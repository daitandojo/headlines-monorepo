# 🎯 MONOREPO SOURCE PACK

**Generated**: 2025-09-29T13:20:36.419Z
**Packages**: 11
**Total Files**: 714
**Total Lines**: 48,534

---

## 📚 TABLE OF CONTENTS

1. **copyboard** (170 files, 11,451 lines)
2. **dashboard** (233 files, 16,454 lines)
3. **pipeline** (106 files, 10,986 lines)
4. **ai-services** (78 files, 3,708 lines)
5. **config** (6 files, 240 lines)
6. **data-access** (25 files, 1,814 lines)
7. **models** (18 files, 643 lines)
8. **prompts** (30 files, 927 lines)
9. **scraper-logic** (27 files, 1,433 lines)
10. **utils-server** (12 files, 552 lines)
11. **utils-shared** (9 files, 326 lines)

---

# 📦 PACKAGE: COPYBOARD

# 📁 PROJECT DIRECTORY STRUCTURE

Total: 182 files, 63 directories

```
headlines/
├── 📁 public/
│   ├── 📁 icons/
│   │   ├── 📄 apple-touch-icon.png
│   │   ├── 📄 icon-16x16.png
│   │   ├── 📄 icon-192x192.png
│   │   ├── 📄 icon-32x32.png
│   │   ├── 📄 icon-512x512.png
│   │   └── 📄 icon-96x96.png
│   ├── 📁 sounds/
│   │   └── 📄 notification.mp3
│   ├── 📄 file.svg
│   ├── 📄 globe.svg
│   ├── 📄 manifest.json
│   ├── 📄 next.svg
│   ├── 📄 sw.js
│   ├── 📄 vercel.svg
│   └── 📄 window.svg
├── 📁 src/
│   ├── 📁 app/
│   │   ├── 📁 _components/
│   │   │   ├── 📄 AppShell.jsx
│   │   │   └── 📄 AppWrapper.jsx
│   │   ├── 📁 (client)/
│   │   │   ├── 📁 articles/
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📁 chat/
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📁 events/
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📁 opportunities/
│   │   │   │   ├── 📁 [opportunityId]/
│   │   │   │   │   └── 📄 page.js
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📁 settings/
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📁 upload/
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📄 client-layout-wrapper.jsx
│   │   │   └── 📄 layout.js
│   │   ├── 📁 admin/
│   │   │   ├── 📁 articles/
│   │   │   │   ├── 📁 [articleId]/
│   │   │   │   │   ├── 📄 ArticleEditor.jsx
│   │   │   │   │   └── 📄 page.jsx
│   │   │   │   ├── 📄 actions.js
│   │   │   │   ├── 📄 columns.jsx
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📁 dashboard/
│   │   │   │   ├── 📄 DashboardClientPage.jsx
│   │   │   │   └── 📄 page.jsx
│   │   │   ├── 📁 events/
│   │   │   │   ├── 📄 actions.js
│   │   │   │   ├── 📄 columns.jsx
│   │   │   │   └── 📄 page.jsx
│   │   │   ├── 📁 opportunities/
│   │   │   │   ├── 📄 actions.js
│   │   │   │   ├── 📄 columns.jsx
│   │   │   │   └── 📄 page.jsx
│   │   │   ├── 📁 users/
│   │   │   │   ├── 📄 actions.js
│   │   │   │   ├── 📄 columns.jsx
│   │   │   │   ├── 📄 country-subscription-manager.jsx
│   │   │   │   ├── 📄 page.jsx
│   │   │   │   ├── 📄 user-editor.jsx
│   │   │   │   └── 📄 UsersClientPage.jsx
│   │   │   ├── 📁 watchlist/
│   │   │   │   ├── 📄 actions.js
│   │   │   │   ├── 📄 columns.jsx
│   │   │   │   ├── 📄 page.jsx
│   │   │   │   ├── 📄 watchlist-editor.jsx
│   │   │   │   └── 📄 WatchlistClientPage.jsx
│   │   │   ├── 📄 layout.js
│   │   │   └── 📄 page.js
│   │   ├── 📁 api/
│   │   │   ├── 📁 articles/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 auth/
│   │   │   │   ├── 📁 login/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📁 logout/
│   │   │   │       └── 📄 route.js
│   │   │   ├── 📁 chat/
│   │   │   │   ├── 📁 title/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 opportunities/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 upload-article/
│   │   │   │   └── 📄 route.js
│   │   │   └── 📁 user/
│   │   │       ├── 📁 interactions/
│   │   │       │   └── 📄 route.js
│   │   │       ├── 📁 profile/
│   │   │       │   └── 📄 route.js
│   │   │       └── 📁 settings/
│   │   │           └── 📁 clear-discarded/
│   │   │               └── 📄 route.js
│   │   ├── 📁 api-admin/
│   │   │   ├── 📁 articles/
│   │   │   │   ├── 📁 [articleId]/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 countries/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 events/
│   │   │   │   ├── 📁 [eventId]/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 opportunities/
│   │   │   │   ├── 📁 [opportunityId]/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 relationships/
│   │   │   │   ├── 📁 link/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📁 unlink/
│   │   │   │       └── 📄 route.js
│   │   │   ├── 📁 subscribers/
│   │   │   │   ├── 📁 [subscriberId]/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 watchlist/
│   │   │   │   └── 📄 route.js
│   │   │   └── 📄 actions.js
│   │   ├── 📁 login/
│   │   │   ├── 📄 layout.js
│   │   │   └── 📄 page.jsx
│   │   ├── 📄 globals.css
│   │   ├── 📄 layout.js
│   │   ├── 📄 page.js
│   │   └── 📄 providers.jsx
│   ├── 📁 components/
│   │   ├── 📁 admin/
│   │   │   ├── 📄 AdminHeader.jsx
│   │   │   ├── 📄 AdminNavTabs.jsx
│   │   │   ├── 📄 article-analysis-viewer.jsx
│   │   │   ├── 📄 DesktopOnlyWrapper.jsx
│   │   │   ├── 📄 main-nav.jsx
│   │   │   ├── 📄 multi-select.jsx
│   │   │   ├── 📄 RelationshipManager.jsx
│   │   │   ├── 📄 source-list.jsx
│   │   │   ├── 📄 test-results-viewer.jsx
│   │   │   ├── 📄 theme-provider.jsx
│   │   │   └── 📄 theme-toggle.jsx
│   │   ├── 📁 client/
│   │   │   ├── 📁 chat/
│   │   │   │   ├── 📄 ChatInput.jsx
│   │   │   │   ├── 📄 ChatLoadingIndicator.jsx
│   │   │   │   ├── 📄 ChatMessage.jsx
│   │   │   │   ├── 📄 ChatScrollAnchor.jsx
│   │   │   │   └── 📄 ChatSidebar.jsx
│   │   │   ├── 📄 AnimatedList.jsx
│   │   │   ├── 📄 ArticleCard.jsx
│   │   │   ├── 📄 ArticleListWrapper.jsx
│   │   │   ├── 📄 ChatManager.jsx
│   │   │   ├── 📄 ChatView.jsx
│   │   │   ├── 📄 CountrySubscriptionEditor.jsx
│   │   │   ├── 📄 DataView.jsx
│   │   │   ├── 📄 EventContextDialog.jsx
│   │   │   ├── 📄 EventList.jsx
│   │   │   ├── 📄 EventListWrapper.jsx
│   │   │   ├── 📄 GlobalCountrySelector.jsx
│   │   │   ├── 📄 Header.jsx
│   │   │   ├── 📄 InfiniteScrollLoader.jsx
│   │   │   ├── 📄 InstallPwaButton.jsx
│   │   │   ├── 📄 IOSInstallInstructions.jsx
│   │   │   ├── 📄 MainNavTabs.jsx
│   │   │   ├── 📄 NotificationToggles.jsx
│   │   │   ├── 📄 OpportunityCard.jsx
│   │   │   ├── 📄 OpportunityListWrapper.jsx
│   │   │   ├── 📄 SettingsForm.jsx
│   │   │   ├── 📄 SplashScreen.jsx
│   │   │   ├── 📄 SynthesizedEventCard.jsx
│   │   │   └── 📄 UploadView.jsx
│   │   ├── 📁 events/
│   │   │   ├── 📄 EventCardDesktop.jsx
│   │   │   ├── 📄 EventCardDetails.jsx
│   │   │   └── 📄 EventCardMobile.jsx
│   │   ├── 📁 shared/
│   │   │   ├── 📁 elements/
│   │   │   │   ├── 📄 accordion.jsx
│   │   │   │   ├── 📄 alert-dialog.jsx
│   │   │   │   ├── 📄 badge.jsx
│   │   │   │   ├── 📄 button.jsx
│   │   │   │   ├── 📄 card.jsx
│   │   │   │   ├── 📄 checkbox.jsx
│   │   │   │   ├── 📄 command.jsx
│   │   │   │   ├── 📄 dialog.jsx
│   │   │   │   ├── 📄 dropdown-menu.jsx
│   │   │   │   ├── 📄 index.js
│   │   │   │   ├── 📄 input.jsx
│   │   │   │   ├── 📄 label.jsx
│   │   │   │   ├── 📄 popover.jsx
│   │   │   │   ├── 📄 scroll-area.jsx
│   │   │   │   ├── 📄 select.jsx
│   │   │   │   ├── 📄 separator.jsx
│   │   │   │   ├── 📄 sheet.jsx
│   │   │   │   ├── 📄 sonner.jsx
│   │   │   │   ├── 📄 switch.jsx
│   │   │   │   ├── 📄 table.jsx
│   │   │   │   ├── 📄 tabs.jsx
│   │   │   │   ├── 📄 textarea.jsx
│   │   │   │   └── 📄 tooltip.jsx
│   │   │   ├── 📄 ConfirmationDialog.jsx
│   │   │   ├── 📄 data-table.jsx
│   │   │   ├── 📄 DataTableColumnHeader.jsx
│   │   │   ├── 📄 EditableCell.jsx
│   │   │   ├── 📄 ExportButton.jsx
│   │   │   ├── 📄 index.js
│   │   │   ├── 📄 LoadingOverlay.jsx
│   │   │   ├── 📄 page-header.jsx
│   │   │   ├── 📄 PremiumSpinner.jsx
│   │   │   ├── 📄 Skeleton.jsx
│   │   │   ├── 📄 SkeletonCard.jsx
│   │   │   └── 📄 ViewHeader.jsx
│   │   ├── 📁 swipe/
│   │   │   └── 📄 SwipeToDelete.jsx
│   │   └── 📄 placeholders.jsx
│   ├── 📁 hooks/
│   │   ├── 📄 index.js
│   │   ├── 📄 use-debounce.js
│   │   ├── 📄 use-entity-manager.js
│   │   ├── 📄 use-has-hydrated.js
│   │   ├── 📄 use-push-manager.js
│   │   └── 📄 use-realtime-updates.js
│   └── 📁 lib/
│       ├── 📁 auth/
│       │   ├── 📄 AuthProvider.js
│       │   ├── 📄 client.js
│       │   ├── 📄 getCookies.js
│       │   ├── 📄 server.js
│       │   └── 📄 verifySession.js
│       ├── 📁 store/
│       │   └── 📄 use-app-store.js
│       ├── 📄 api-client.js
│       ├── 📄 api-handler.js
│       ├── 📄 constants.js
│       └── 📄 init-shared-logic.js
├── 📄 .gitignore
├── 📄 app.config.js
├── 📄 eslint.config.mjs
├── 📄 jsconfig.json
├── 📄 next.config.mjs
├── 📄 package.json
├── 📄 postcss.config.cjs
└── 📄 tailwind.config.js
```

# 📋 PROJECT METADATA

**Generated**: 2025-09-29T13:20:36.337Z
**Repository Path**: /home/mark/Repos/projects/headlines/apps/client
**Total Files**: 170
**Package**: @headlines/copyboard@1.0.0




---


## 📄 .gitignore
*Lines: 42, Size: 480 Bytes*

```
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

```

## 📄 app.config.js
*Lines: 8, Size: 337 Bytes*

```javascript
// File: apps/client/app.config.js

// This file provides the minimal configuration needed by the shared
// packages when they're used by the app's API routes.

export const CONCURRENCY_LIMIT = 2;
export const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
export const LLM_MODEL_UTILITY = process.env.LLM_MODEL_UTILITY || 'gpt-5-nano';
```

## 📄 eslint.config.mjs
*Lines: 26, Size: 505 Bytes*

```
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals"),
  {
    ignores: [
      "node_modules/**",
      ".next/**",
      "out/**",
      "build/**",
      "next-env.d.ts",
    ],
  },
];

export default eslintConfig;

```

## 📄 jsconfig.json
*Lines: 9, Size: 97 Bytes*

```json
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

```

## 📄 next.config.mjs
*Lines: 28, Size: 551 Bytes*

```
// File: apps/client/next.config.mjs
/** @type {import('next').NextConfig} */

const nextConfig = {
  transpilePackages: [
    '@headlines/config/next',
    '@headlines/data-access/next',
    '@headlines/models',
    '@headlines/utils-shared/next',
  ],
  webpack: (config, { isServer }) => {
    config.externals.push(
      'bcrypt',
      'sharp',
      'mongodb-client-encryption',
      'aws4',
      'undici'
    )

    if (isServer) {
      config.externals.push('onnxruntime-node')
    }
    return config
  },
}

export default nextConfig

```

## 📄 package.json
*Lines: 32, Size: 903 Bytes*

```json
{
  "name": "@headlines/copyboard",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@headlines/config": "workspace:*",
    "@headlines/data-access": "workspace:*",
    "@headlines/models": "workspace:*",
    "@headlines/utils-shared": "workspace:*",
    "@radix-ui/react-slot": "^1.1.0",
    "class-variance-authority": "^0.7.0",
    "@tanstack/react-query": "^5.45.1",
    "@tanstack/react-query-devtools": "^5.45.1",
    "react-intersection-observer": "^9.10.3",
    "clsx": "^2.1.1",
    "lucide-react": "^0.379.0",
    "tailwind-merge": "^2.3.0",
    "tailwindcss-animate": "^1.0.7",
    "@tailwindcss/typography": "^0.5.13",
    "react-markdown": "^9.0.1",
    "react-textarea-autosize": "^8.5.3",
    "rehype-raw": "^7.0.0",
    "remark-gfm": "^4.0.0"
  }
}

```

## 📄 postcss.config.cjs
*Lines: 13, Size: 218 Bytes*

```
// File: apps/client/postcss.config.js

const path = require('path')

module.exports = {
  plugins: {
    tailwindcss: {
      config: path.join(__dirname, 'tailwind.config.js'),
    },
    autoprefixer: {},
  },
}

```

## 📄 public/manifest.json
*Lines: 28, Size: 631 Bytes*

```json
{
  "name": "Headlines Intelligence",
  "short_name": "Headlines",
  "description": "An interface to browse, search, and filter wealth event articles.",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#111827",
  "theme_color": "#111827",
  "icons": [
    {
      "src": "/icons/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "/icons/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    },
    {
      "src": "/icons/apple-touch-icon.png",
      "sizes": "180x180",
      "type": "image/png"
    }
  ]
}

```

## 📄 public/sw.js
*Lines: 95, Size: 2.8 KB*

```javascript
// public/sw.js (version 5.0)
// This service worker is designed for reliability and immediate activation.

self.addEventListener('install', (event) => {
  console.log('[Service Worker] Install event fired. New worker installing.')
  // Force the waiting service worker to become the active service worker.
  event.waitUntil(self.skipWaiting())
  console.log('[Service Worker] skipWaiting() called.')
})

self.addEventListener('activate', (event) => {
  console.log('[Service Worker] Activate event fired. New worker activating.')
  // Take control of all pages under this scope immediately.
  event.waitUntil(self.clients.claim())
  console.log('[Service Worker] clients.claim() called.')
})

self.addEventListener('push', (event) => {
  console.log('[Service Worker] Push Received.')
  if (!event.data) {
    console.error('[Service Worker] Push event but no data')
    return
  }
  console.log(`[Service Worker] Push had this data: "${event.data.text()}"`)

  let data
  try {
    data = event.data.json()
  } catch (e) {
    console.error('[Service Worker] Failed to parse push data as JSON.')
    data = {
      title: 'New Update',
      body: event.data.text(),
      url: '/',
    }
  }

  const title = data.title || 'New Intelligence Alert'
  const options = {
    body: data.body || 'New content has been added.',
    icon: data.icon || '/icons/icon-192x192.png',
    badge: '/icons/icon-96x96.png', // A smaller badge icon for some platforms
    vibrate: [100, 50, 100],
    data: {
      url: data.url || '/', // Ensure URL is always present in data
    },
    actions: [
      { action: 'view_event', title: 'View Event' },
      { action: 'dismiss', title: 'Dismiss' },
    ],
  }

  console.log(
    '[Service Worker] Showing notification with options:',
    JSON.stringify(options)
  )
  event.waitUntil(self.registration.showNotification(title, options))
})

self.addEventListener('notificationclick', (event) => {
  console.log(
    '[Service Worker] Notification click Received.',
    event.action,
    event.notification
  )

  const urlToOpen = new URL(event.notification.data.url, self.location.origin).href
  event.notification.close()

  if (event.action === 'dismiss') {
    console.log('[Service Worker] Dismiss action handled.')
    return
  }

  event.waitUntil(
    self.clients
      .matchAll({
        type: 'window',
        includeUncontrolled: true,
      })
      .then((clientList) => {
        for (const client of clientList) {
          if (client.url === urlToOpen && 'focus' in client) {
            console.log('[Service Worker] Found matching client to focus.')
            return client.focus()
          }
        }
        if (self.clients.openWindow) {
          console.log('[Service Worker] No matching client found, opening new window.')
          return self.clients.openWindow(urlToOpen)
        }
      })
  )
})

```

## 📄 src/app/(client)/articles/page.js
*Lines: 44, Size: 1.18 KB*

```javascript
// File: apps/client/src/app/(client)/articles/page.js

// 'use server'

import { DataView } from '@/components/client/DataView'
import { getArticles } from '@headlines/data-access/next'
import { getUserIdFromSession } from '@/lib/auth/server'

export const dynamic = 'force-dynamic'

const sortOptions = [
  { value: 'date_desc', icon: 'clock', tooltip: 'Sort by Date (Newest First)' },
  { value: 'relevance_desc', icon: 'relevance', tooltip: 'Sort by Relevance' },
]

export default async function ArticlesPage({ searchParams }) {
  const userId = await getUserIdFromSession()
  let initialArticles = []

  if (userId) {
    try {
      const filters = { q: searchParams.q || '' }
      const sort = searchParams.sort || 'date_desc'

      const result = await getArticles({ page: 1, filters, sort, userId })
      if (result.success) {
        initialArticles = result.data
      }
    } catch (err) {
      console.error('[ArticlesPage] Failed to fetch initial data:', err.message)
    }
  }

  return (
    <DataView
      viewTitle="Raw Articles"
      sortOptions={sortOptions}
      queryKeyPrefix="articles"
      listComponentKey="article-list"
      initialData={initialArticles}
    />
  )
}

```

## 📄 src/app/(client)/chat/page.js
*Lines: 8, Size: 182 Bytes*

```javascript
// File: apps/client/src/app/(client)/chat/page.js

import { ChatManager } from '@/components/client/ChatManager'

export default function ChatPage() {
  return <ChatManager />
}

```

## 📄 src/app/(client)/client-layout-wrapper.jsx
*Lines: 11, Size: 413 Bytes*

```jsx
// File: apps/client/src/app/(client)/client-layout-wrapper.js
'use client'

import { AppShell } from '@/app/_components/AppShell'

export function ClientLayoutWrapper({ children, serverProps }) {
  // This is a Client Component that receives server-fetched props
  // and passes them to the AppShell, which can now safely use client hooks.
  return <AppShell serverProps={serverProps}>{children}</AppShell>
}

```

## 📄 src/app/(client)/events/page.js
*Lines: 44, Size: 1.29 KB*

```javascript
// File: apps/client/src/app/(client)/events/page.js (Corrected)

import { DataView } from '@/components/client/DataView'
import { getEvents } from '@headlines/data-access/next'
import { getUserIdFromSession } from '@/lib/auth/server'

export const dynamic = 'force-dynamic'

// --- DEFINE sortOptions HERE ---
const sortOptions = [
  { value: 'date_desc', icon: 'clock', tooltip: 'Sort by Date (Newest First)' },
  { value: 'relevance_desc', icon: 'relevance', tooltip: 'Sort by Relevance' },
]
// --------------------------------

export default async function EventsPage({ searchParams }) {
  const userId = await getUserIdFromSession()
  let initialEvents = []

  if (userId) {
    try {
      const filters = { q: searchParams.q || '' }
      const sort = searchParams.sort || sortOptions[0].value

      const result = await getEvents({ page: 1, userId, filters, sort })
      if (result.success) {
        initialEvents = result.data
      }
    } catch (err) {
      console.error('[EventsPage] Failed to fetch initial events:', err.message)
    }
  }

  return (
    <DataView
      viewTitle="Synthesized Events"
      initialData={initialEvents}
      listComponentKey="event-list"
      queryKeyPrefix="events" // <-- Add this prop
      sortOptions={sortOptions} // <-- PASS THE PROP HERE
    />
  )
}

```

## 📄 src/app/(client)/layout.js
*Lines: 21, Size: 827 Bytes*

```javascript
// File: apps/client/src/app/(client)/layout.js (Restored)

import { getDashboardStats, getGlobalCountries } from '@headlines/data-access/next'
import { ClientLayoutWrapper } from './client-layout-wrapper'

export default async function ClientLayout({ children }) {
  const [statsResult, countriesResult] = await Promise.all([
    getDashboardStats().catch((e) => ({ success: false, data: null })),
    getGlobalCountries().catch((e) => ({ success: false, data: [] })),
  ])

  const serverProps = {
    articleCount: statsResult.data?.articles?.total || 0,
    eventCount: statsResult.data?.events?.total || 0,
    opportunityCount: statsResult.data?.opportunities?.total || 0,
    globalCountries: countriesResult.data || [],
  }

  return <ClientLayoutWrapper serverProps={serverProps}>{children}</ClientLayoutWrapper>
}

```

## 📄 src/app/(client)/opportunities/[opportunityId]/page.js
*Lines: 143, Size: 4.88 KB*

```javascript
// File: apps/client/src/app/(client)/opportunities/[opportunityId]/page.js

'use server'

import { getOpportunityDetails } from '@headlines/data-access/next'
import { notFound } from 'next/navigation'
import Link from 'next/link'
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  Button,
  Badge,
} from '@/components/shared'
import { ArrowLeft, User, MapPin, Briefcase, Mail, Zap, ExternalLink } from 'lucide-react'
import { format } from 'date-fns'
import { getCountryFlag } from '@headlines/utils-shared/next'

function TimelineItem({ event, isLast }) {
  return (
    <div className="flex gap-4">
      <div className="flex flex-col items-center">
        <div className="w-3 h-3 bg-blue-500 rounded-full ring-4 ring-slate-800"></div>
        {!isLast && <div className="flex-grow w-px bg-slate-700"></div>}
      </div>
      <div className="flex-grow pb-8">
        <p className="text-xs text-slate-400">
          {format(new Date(event.createdAt), 'MMMM d, yyyy')}
        </p>
        <h3 className="font-semibold text-slate-100 mt-1">
          {event.synthesized_headline}
        </h3>
        <p className="text-sm text-slate-400 mt-1">{event.synthesized_summary}</p>
        <div className="mt-2 flex flex-wrap gap-2">
          {event.source_articles.map((article) => (
            <a
              href={article.link}
              target="_blank"
              rel="noopener noreferrer"
              key={article.link}
            >
              <Badge variant="secondary" className="hover:bg-slate-700">
                {article.newspaper}
                <ExternalLink className="h-3 w-3 ml-1.5" />
              </Badge>
            </a>
          ))}
        </div>
      </div>
    </div>
  )
}

export default async function OpportunityDossierPage({ params }) {
  const { opportunityId } = params
  const { success, data: opportunity } = await getOpportunityDetails(opportunityId)

  if (!success || !opportunity) {
    notFound()
  }

  const { contactDetails } = opportunity
  const flag = getCountryFlag(opportunity.basedIn)

  return (
    <div className="max-w-4xl mx-auto">
      <Button asChild variant="ghost" className="mb-4">
        <Link href="/opportunities">
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back to Opportunities
        </Link>
      </Button>
      <Card className="bg-slate-900/50 border-slate-700/80">
        <CardHeader>
          <div className="flex justify-between items-start">
            <div>
              <CardTitle className="text-3xl font-bold flex items-center gap-3">
                <User className="h-8 w-8 text-slate-400" />
                {opportunity.reachOutTo}
              </CardTitle>
              <CardDescription className="mt-2 text-base">
                {contactDetails?.role && contactDetails?.company && (
                  <span className="flex items-center gap-2">
                    <Briefcase className="h-4 w-4" />
                    {contactDetails.role} at <strong>{contactDetails.company}</strong>
                  </span>
                )}
              </CardDescription>
            </div>
            {opportunity.likelyMMDollarWealth > 0 && (
              <Badge
                variant="outline"
                className="text-lg border-green-500/50 text-green-300"
              >
                Est. ${opportunity.likelyMMDollarWealth}M
              </Badge>
            )}
          </div>
          <div className="flex flex-wrap gap-x-6 gap-y-2 pt-4 text-sm text-slate-300">
            {(opportunity.city || opportunity.basedIn) && (
              <span className="flex items-center gap-2">
                <MapPin className="h-4 w-4 text-slate-500" />
                <span className="text-xl mr-1">{flag}</span>
                {opportunity.city}
                {opportunity.city && opportunity.basedIn ? ', ' : ''}
                {opportunity.basedIn}
              </span>
            )}
            {contactDetails?.email && (
              <a
                href={`mailto:${contactDetails.email}`}
                className="flex items-center gap-2 text-blue-400 hover:underline"
              >
                <Mail className="h-4 w-4 text-slate-500" />
                {contactDetails.email}
              </a>
            )}
          </div>
        </CardHeader>
        <CardContent>
          <div className="border-t border-slate-700 pt-6">
            <h3 className="text-lg font-semibold flex items-center gap-2 mb-4">
              <Zap className="h-5 w-5 text-blue-400" />
              Event Timeline
            </h3>
            <div className="relative">
              {(opportunity.events || []).map((event, index) => (
                <TimelineItem
                  key={event._id}
                  event={event}
                  isLast={index === opportunity.events.length - 1}
                />
              ))}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

```

## 📄 src/app/(client)/opportunities/page.js
*Lines: 47, Size: 1.3 KB*

```javascript
// File: apps/client/src/app/(client)/opportunities/page.js

// 'use server'

import { DataView } from '@/components/client/DataView'
import { getOpportunities } from '@headlines/data-access/next'
import { getUserIdFromSession } from '@/lib/auth/server'

export const dynamic = 'force-dynamic'

const sortOptions = [
  { value: 'date_desc', icon: 'clock', tooltip: 'Sort by Date (Newest First)' },
  { value: 'size_desc', icon: 'size', tooltip: 'Sort by Estimated Size' },
]

export default async function OpportunitiesPage({ searchParams }) {
  const userId = await getUserIdFromSession()
  let initialOpportunities = []

  if (userId) {
    try {
      const filters = {
        q: searchParams.q || '',
        withEmail: searchParams.withEmail === 'true',
      }
      const sort = searchParams.sort || 'date_desc'

      const result = await getOpportunities({ page: 1, filters, sort, userId })
      if (result.success) {
        initialOpportunities = result.data
      }
    } catch (err) {
      console.error('[OpportunitiesPage] Failed to fetch initial data:', err.message)
    }
  }

  return (
    <DataView
      viewTitle="Actionable Opportunities"
      sortOptions={sortOptions}
      queryKeyPrefix="opportunities"
      listComponentKey="opportunity-list"
      initialData={initialOpportunities}
    />
  )
}

```

## 📄 src/app/(client)/settings/page.js
*Lines: 26, Size: 768 Bytes*

```javascript
// File: apps/client/src/app/(client)/settings/page.js

// 'use server'

import { getGlobalCountries } from '@headlines/data-access/next'
import { SettingsForm } from '@/components/client/SettingsForm'

export const dynamic = 'force-dynamic'

export default async function SettingsPage() {
  // Fetch all countries with event counts to pass to the editor
  const { data: allCountries } = await getGlobalCountries()

  return (
    <div className="max-w-4xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold">Settings</h1>
        <p className="text-lg text-slate-300 mt-1">
          Manage your profile and notification preferences.
        </p>
      </div>
      <SettingsForm allCountries={allCountries || []} />
    </div>
  )
}

```

## 📄 src/app/(client)/upload/page.js
*Lines: 10, Size: 197 Bytes*

```javascript
// File: apps/client/src/app/(client)/upload/page.js

'use client'

import { UploadView } from '@/components/client/UploadView'

export default function UploadPage() {
  return <UploadView />
}

```

## 📄 src/app/_components/AppShell.jsx
*Lines: 76, Size: 2.3 KB*

```jsx
// File: apps/client/src/app/_components/AppShell.jsx (With Logging)

'use client'

import { useState, useEffect } from 'react'
import { usePathname } from 'next/navigation'
import { AnimatePresence } from 'framer-motion'
import { Header } from '@/components/client/Header'
import { MainNavTabs } from '@/components/client/MainNavTabs'
import { SplashScreen } from '@/components/client/SplashScreen'
import AdminNav from '@/components/admin/main-nav'

export function AppShell({ children, serverProps }) {
  const pathname = usePathname()

  // --- START: THE CRITICAL LOG ---
  console.log('[AppShell DEBUG] Current pathname:', pathname)
  // --- END: THE CRITICAL LOG ---

  const [isAppLoading, setIsAppLoading] = useState(true)
  useEffect(() => {
    if (pathname.startsWith('/login')) {
      setIsAppLoading(false)
    } else {
      const timer = setTimeout(() => setIsAppLoading(false), 1500)
      return () => clearTimeout(timer)
    }
  }, [pathname])

  const isLoginPage = pathname.startsWith('/login')
  const isAdminPage = pathname.startsWith('/admin')
  const isClientPage = !isLoginPage && !isAdminPage

  console.log(
    `[AppShell DEBUG] isLoginPage: ${isLoginPage}, isAdminPage: ${isAdminPage}, isClientPage: ${isClientPage}`
  )

  if (isLoginPage) {
    return <>{children}</>
  }

  return (
    <>
      <AnimatePresence>{isAppLoading && <SplashScreen />}</AnimatePresence>

      <div style={{ visibility: isAppLoading ? 'hidden' : 'visible' }}>
        {isAdminPage && (
          <div className="flex h-screen bg-background">
            <AdminNav />
            <main className="flex-1 overflow-y-auto p-6">{children}</main>
          </div>
        )}

        {isClientPage && (
          <div className="container mx-auto p-4 md:p-8 flex flex-col min-h-screen">
            <Header {...serverProps} />
            <div className="sticky top-[5px] z-30 my-4">
              <MainNavTabs />
            </div>
            <main className="flex-grow flex flex-col mt-0 min-h-0">{children}</main>
          </div>
        )}

        {/* ADD A FALLBACK RENDER FOR DEBUGGING */}
        {!isClientPage && !isAdminPage && !isLoginPage && (
          <div>
            <h1>Fallback Render</h1>
            <p>Pathname: {pathname}</p>
            <div>{children}</div>
          </div>
        )}
      </div>
    </>
  )
}

```

## 📄 src/app/_components/AppWrapper.jsx
*Lines: 13, Size: 438 Bytes*

```jsx
// File: apps/client/src/app/_components/AppWrapper.jsx (Corrected)

import 'server-only'
import { verifySession } from '@/lib/auth/server'
import { AuthProvider } from '@/lib/auth/AuthProvider'

export async function AppWrapper({ children }) {
  // This Server Component ONLY fetches the user and provides the AuthContext
  const { user } = await verifySession()

  return <AuthProvider initialUser={user}>{children}</AuthProvider>
}

```

## 📄 src/app/admin/articles/[articleId]/ArticleEditor.jsx
*Lines: 129, Size: 3.88 KB*

```jsx
'use client'

import { useState, useCallback } from 'react'
import { useRouter } from 'next/navigation'
import {
  Button,
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
  Label,
  Input,
  Textarea,
} from '@/components/shared'
import { ArrowLeft, Save, Loader2 } from 'lucide-react'
import { toast } from 'sonner'
import Link from 'next/link'
import { updateArticleAction } from '../actions'

const FormField = ({ id, label, children }) => (
  <div className="space-y-2">
    <Label htmlFor={id}>{label}</Label>
    {children}
  </div>
)

export default function ArticleEditor({ initialArticle }) {
  const [article, setArticle] = useState(initialArticle)
  const [isSaving, setIsSaving] = useState(false)
  const router = useRouter()

  const handleChange = (key, value) => {
    setArticle((prev) => ({ ...prev, [key]: value }))
  }

  const handleSave = useCallback(async () => {
    setIsSaving(true)
    const result = await updateArticleAction(article._id, {
      headline: article.headline,
      relevance_headline: article.relevance_headline,
      relevance_article: article.relevance_article,
      assessment_headline: article.assessment_headline,
      assessment_article: article.assessment_article,
    })

    if (result.success) {
      toast.success('Article updated successfully.')
      router.push('/admin/articles')
    } else {
      toast.error(`Update failed: ${result.error}`)
    }
    setIsSaving(false)
  }, [article, router])

  return (
    <div className="max-w-4xl mx-auto">
      <Button asChild variant="ghost" className="mb-4">
        <Link href="/admin/articles">
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back to Articles
        </Link>
      </Button>
      <Card>
        <CardHeader>
          <CardTitle>Edit Article</CardTitle>
          <CardDescription>
            Fine-tune the AI's assessment and details for this article.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <FormField id="headline" label="Headline">
            <Textarea
              value={article.headline}
              onChange={(e) => handleChange('headline', e.target.value)}
              rows={3}
            />
          </FormField>
          <div className="grid grid-cols-2 gap-4">
            <FormField id="relevance_headline" label="Headline Score">
              <Input
                type="number"
                value={article.relevance_headline}
                onChange={(e) =>
                  handleChange('relevance_headline', Number(e.target.value))
                }
              />
            </FormField>
            <FormField id="relevance_article" label="Article Score">
              <Input
                type="number"
                value={article.relevance_article}
                onChange={(e) =>
                  handleChange('relevance_article', Number(e.target.value))
                }
              />
            </FormField>
          </div>
          <FormField id="assessment_headline" label="Headline Assessment">
            <Textarea
              value={article.assessment_headline}
              onChange={(e) => handleChange('assessment_headline', e.target.value)}
              rows={2}
            />
          </FormField>
          <FormField id="assessment_article" label="Article Assessment">
            <Textarea
              value={article.assessment_article}
              onChange={(e) => handleChange('assessment_article', e.target.value)}
              rows={4}
            />
          </FormField>
        </CardContent>
        <CardFooter>
          <Button onClick={handleSave} disabled={isSaving}>
            {isSaving ? (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            ) : (
              <Save className="mr-2 h-4 w-4" />
            )}
            Save Changes
          </Button>
        </CardFooter>
      </Card>
    </div>
  )
}

```

## 📄 src/app/admin/articles/[articleId]/page.jsx
*Lines: 17, Size: 482 Bytes*

```jsx
'use server'

import { getArticleDetails } from '@headlines/data-access'
import { notFound } from 'next/navigation'
import ArticleEditor from './ArticleEditor' // We will create this next

export default async function ArticleDetailPage({ params }) {
  const { articleId } = params
  const result = await getArticleDetails(articleId)

  if (!result.success || !result.data) {
    notFound()
  }

  return <ArticleEditor initialArticle={JSON.parse(JSON.stringify(result.data))} />
}

```

## 📄 src/app/admin/articles/actions.js
*Lines: 24, Size: 628 Bytes*

```javascript
'use server'

import { revalidatePath } from 'next/cache'
import dbConnect from '@headlines/data-access/dbConnect.js'
import { updateArticle, deleteArticle } from '@headlines/data-access'

export async function updateArticleAction(articleId, updateData) {
  await dbConnect()
  const result = await updateArticle(articleId, updateData)
  if (result.success) {
    revalidatePath('/admin/articles')
  }
  return result
}

export async function deleteArticleAction(articleId) {
  await dbConnect()
  const result = await deleteArticle(articleId)
  if (result.success) {
    revalidatePath('/admin/articles')
  }
  return result
}

```

## 📄 src/app/admin/articles/columns.jsx
*Lines: 135, Size: 4.12 KB*

```jsx
'use client'

import React from 'react'
import {
  Button,
  Badge,
  DataTableColumnHeader,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from '@/components/shared'
import { Trash2, ExternalLink, MoreHorizontal, Edit } from 'lucide-react'
import { format } from 'date-fns'
import { EditableCell } from '@/components/shared/EditableCell'
import Link from 'next/link'

export const columns = (onUpdate, onDelete) => [
  {
    accessorKey: 'relevance_headline',
    header: ({ column }) => <DataTableColumnHeader column={column} title="HL Score" />,
    cell: ({ row }) => <Badge variant="outline">{row.original.relevance_headline}</Badge>,
    size: 100,
  },
  {
    accessorKey: 'relevance_article',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Article Score" />
    ),
    cell: ({ row }) => (
      <EditableCell
        initialValue={row.original.relevance_article}
        onSave={(newValue) =>
          onUpdate(row.original, { relevance_article: Number(newValue) })
        }
        placeholder="N/A"
      />
    ),
    size: 120,
  },
  {
    accessorKey: 'headline',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Headline" />,
    cell: ({ row }) => (
      // --- START OF UI FIX ---
      // Apply max-width and allow the EditableCell's internal truncate to work
      <div className="max-w-[400px] xl:max-w-[600px]">
        <EditableCell
          initialValue={row.original.headline}
          onSave={(newValue) => onUpdate(row.original, { headline: newValue })}
          useTextarea={true}
        />
      </div>
      // --- END OF UI FIX ---
    ),
    minSize: 400,
  },
  {
    accessorKey: 'newspaper',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Source" />,
    cell: ({ row }) => (
      // --- UI FIX ---
      <div className="max-w-[180px]">
        <EditableCell
          initialValue={row.original.newspaper}
          onSave={(newValue) => onUpdate(row.original, { newspaper: newValue })}
        />
      </div>
    ),
    size: 180,
  },
  {
    accessorKey: 'country',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Country" />,
    cell: ({ row }) => (
      // --- UI FIX ---
      <div className="max-w-[150px]">
        <EditableCell
          initialValue={row.original.country}
          onSave={(newValue) => onUpdate(row.original, { country: newValue })}
        />
      </div>
    ),
    size: 150,
  },
  {
    accessorKey: 'createdAt',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Discovered" />,
    cell: ({ row }) => format(new Date(row.original.createdAt), 'dd MMM yyyy, HH:mm'),
    size: 180,
  },
  {
    id: 'actions',
    cell: ({ row }) => (
      <div className="text-right">
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="h-8 w-8 p-0">
              <span className="sr-only">Open menu</span>
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>Actions</DropdownMenuLabel>
            <DropdownMenuItem asChild>
              <Link href={`/admin/articles/${row.original._id}`}>
                <Edit className="mr-2 h-4 w-4" />
                Edit Details
              </Link>
            </DropdownMenuItem>
            <DropdownMenuItem asChild>
              <a href={row.original.link} target="_blank" rel="noopener noreferrer">
                <ExternalLink className="mr-2 h-4 w-4" />
                Open Original
              </a>
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem
              className="text-red-400 focus:bg-red-500/10 focus:text-red-400"
              onClick={() => onDelete(row.original._id)}
            >
              <Trash2 className="mr-2 h-4 w-4" />
              Delete Article
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    ),
    size: 80,
    enableResizing: false,
  },
]

```

## 📄 src/app/admin/articles/page.js
*Lines: 103, Size: 3.02 KB*

```javascript
'use client'

import { PageHeader, DataTable, ConfirmationDialog } from '@/components/shared'
import { columns } from './columns'
import { useEntityManager } from '@/hooks/use-entity-manager'
import { toast } from 'sonner'
import { useCallback, useMemo, useState } from 'react'
import { updateArticleAction, deleteArticleAction } from './actions'

export default function ArticlesPage() {
  const {
    data,
    setData,
    total,
    isLoading,
    refetch,
    page,
    setPage,
    sorting,
    setSorting,
    columnFilters,
    setColumnFilters,
  } = useEntityManager('articles')

  const [confirmState, setConfirmState] = useState({ isOpen: false, articleId: null })

  const handleUpdate = useCallback(
    async (article, updateData) => {
      setData((currentData) =>
        currentData.map((a) => (a._id === article._id ? { ...a, ...updateData } : a))
      )

      const result = await updateArticleAction(article._id, updateData)
      if (!result.success) {
        toast.error(`Update failed: ${result.error}. Reverting.`)
        refetch()
      }
    },
    [setData, refetch]
  )

  const handleDeleteRequest = useCallback((articleId) => {
    setConfirmState({ isOpen: true, articleId })
  }, [])

  const confirmDelete = useCallback(async () => {
    const { articleId } = confirmState
    setConfirmState({ isOpen: false, articleId: null })
    const toastId = toast.loading('Deleting article...')

    const result = await deleteArticleAction(articleId)
    if (result.success) {
      toast.success('Article deleted.', { id: toastId })
      refetch()
    } else {
      toast.error(`Deletion failed: ${result.error}`, { id: toastId })
    }
  }, [confirmState, refetch])

  // --- START OF THE FIX ---
  // Pass BOTH handleUpdate and handleDeleteRequest to the columns function.
  const tableColumns = useMemo(
    () => columns(handleUpdate, handleDeleteRequest),
    [handleUpdate, handleDeleteRequest]
  )
  // --- END OF THE FIX ---

  return (
    <>
      <div className="flex flex-col h-full">
        <PageHeader
          title="Article Management"
          description={`Review and manage all ${total.toLocaleString()} raw articles.`}
        />
        <div className="mt-8 flex-grow min-h-0">
          <DataTable
            columns={tableColumns} // Use the memoized columns
            data={data}
            isLoading={isLoading}
            page={page}
            setPage={setPage}
            total={total}
            sorting={sorting}
            setSorting={setSorting}
            columnFilters={columnFilters}
            setColumnFilters={setColumnFilters}
            filterColumn="headline"
            filterPlaceholder="Filter by headline..."
          />
        </div>
      </div>
      <ConfirmationDialog
        open={confirmState.isOpen}
        onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })}
        onConfirm={confirmDelete}
        title="Confirm Deletion"
        description="Are you sure you want to permanently delete this article?"
        confirmText="Delete Article"
      />
    </>
  )
}

```

## 📄 src/app/admin/dashboard/DashboardClientPage.jsx
*Lines: 191, Size: 5.84 KB*

```jsx
// File: apps/client/src/app/admin/dashboard/DashboardClientPage.jsx

'use client'

import { useState, useMemo } from 'react'
import { motion } from 'framer-motion'
import Link from 'next/link'
import { Newspaper, Users, Rss, CheckCircle2, AlertTriangle, Loader2 } from 'lucide-react'
import {
  PageHeader,
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  Button,
} from '@/components/shared'
import { formatDistanceToNow } from 'date-fns'

const StatCard = ({ title, value, icon, link }) => (
  <Card asChild>
    <Link href={link}>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium text-muted-foreground">
          {title}
        </CardTitle>
        {icon}
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">{value}</div>
      </CardContent>
    </Link>
  </Card>
)

const RunFunnelStat = ({ title, value, className }) => (
  <div className={`text-center p-2 rounded-md ${className}`}>
    <p className="text-xl font-bold">{value.toLocaleString()}</p>
    <p className="text-xs text-muted-foreground">{title}</p>
  </div>
)

const RecentRun = ({ run }) => {
  const isSuccess = !run.runStats.errors || run.runStats.errors.length === 0
  return (
    <Link
      href={`/admin/runs/${run._id}`} // Corrected link for admin section
      className="flex items-center justify-between p-3 rounded-md hover:bg-accent transition-colors"
    >
      <div className="flex items-center gap-3">
        {isSuccess ? (
          <CheckCircle2 className="w-5 h-5 text-green-500 flex-shrink-0" />
        ) : (
          <AlertTriangle className="w-5 h-5 text-red-500 flex-shrink-0" />
        )}
        <div>
          <p className="font-medium">
            Found {run.runStats.freshHeadlinesFound} headlines, synthesized{' '}
            {run.runStats.eventsSynthesized} events.
          </p>
          <p className="text-xs text-muted-foreground">
            {formatDistanceToNow(new Date(run.createdAt), { addSuffix: true })}
          </p>
        </div>
      </div>
      <Button variant="ghost" size="sm">
        Details
      </Button>
    </Link>
  )
}

export default function DashboardClientPage({
  initialStats,
  initialRuns,
  initialSources,
}) {
  const [stats] = useState(initialStats)
  const [runs] = useState(initialRuns)
  const [sources] = useState(initialSources)

  const failingSources = useMemo(() => {
    if (!sources) return []
    return sources.filter(
      (s) =>
        s.status === 'active' &&
        s.analytics?.totalRuns > 0 &&
        s.analytics?.lastRunHeadlineCount === 0
    )
  }, [sources])

  if (!stats) {
    return (
      <div className="flex items-center justify-center h-full">
        <Loader2 className="w-12 h-12 animate-spin text-primary" />
      </div>
    )
  }

  const lastRunStats = runs?.[0]?.runStats || {}

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <PageHeader
        title="Admin Dashboard"
        description="High-level overview of system health and content pipeline."
      />
      <div className="mt-8 grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <StatCard
          title="Active Sources"
          value={`${stats.sources.active} / ${stats.sources.total}`}
          icon={<Newspaper className="h-5 w-5 text-muted-foreground" />}
          link="/admin/sources"
        />
        <StatCard
          title="Active Users"
          value={`${stats.users.active} / ${stats.users.total}`}
          icon={<Users className="h-5 w-5 text-muted-foreground" />}
          link="/admin/users"
        />
        <StatCard
          title="Watchlist Entities"
          value={stats.watchlist.total}
          icon={<Rss className="h-5 w-5 text-muted-foreground" />}
          link="/admin/watchlist"
        />
        <StatCard
          title="Failing Sources"
          value={failingSources.length}
          icon={<AlertTriangle className="h-5 w-5 text-muted-foreground" />}
          link="/admin/sources?status=failing"
        />
      </div>
      <div className="mt-8 grid gap-8 md:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle>Recent Pipeline Runs</CardTitle>
            <CardDescription>
              Summary of the last 5 intelligence gathering runs.
            </CardDescription>
          </CardHeader>
          <CardContent>
            {runs && runs.length > 0 ? (
              <div className="space-y-2">
                {runs.map((run) => (
                  <RecentRun key={run._id} run={run} />
                ))}
              </div>
            ) : (
              <p className="text-sm text-muted-foreground">No recent runs found.</p>
            )}
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Last Run Funnel</CardTitle>
            <CardDescription>
              Conversion metrics from the most recent pipeline execution.
            </CardDescription>
          </CardHeader>
          <CardContent className="grid grid-cols-2 gap-4">
            <RunFunnelStat
              title="Headlines Found"
              value={lastRunStats.freshHeadlinesFound || 0}
              className="bg-blue-500/10"
            />
            <RunFunnelStat
              title="Relevant Headlines"
              value={lastRunStats.relevantHeadlines || 0}
              className="bg-yellow-500/10"
            />
            <RunFunnelStat
              title="Events Synthesized"
              value={lastRunStats.eventsSynthesized || 0}
              className="bg-purple-500/10"
            />
            <RunFunnelStat
              title="Notifications Sent"
              value={lastRunStats.eventsEmailed || 0}
              className="bg-green-500/10"
            />
          </CardContent>
        </Card>
      </div>
    </motion.div>
  )
}
```

## 📄 src/app/admin/dashboard/page.jsx
*Lines: 55, Size: 1.43 KB*

```jsx
// File: apps/client/src/app/admin/dashboard/page.jsx (version 2.5 - FINAL)
// 'use server'

import {
  getDashboardStats,
  getRecentRunVerdicts,
  getAllSources,
} from '@headlines/data-access/next'
import DashboardClientPage from './DashboardClientPage'
// The explicit initializer is no longer needed.

export const dynamic = 'force-dynamic'

async function getPageData() {
  try {
    // The data-access functions now reliably handle their own connections.
    const [statsResult, verdictsResult, sourcesResult] = await Promise.all([
      getDashboardStats(),
      getRecentRunVerdicts(),
      getAllSources(),
    ])

    return {
      stats: statsResult.data || null,
      runs: verdictsResult.data || [],
      sources: sourcesResult.data || [],
      error: null,
    }
  } catch (error) {
    console.error('[Admin Dashboard Server Error]', error)
    return { stats: null, runs: [], sources: [], error: error.message }
  }
}

export default async function AdminDashboardPage() {
  const { stats, runs, sources, error } = await getPageData()

  if (error) {
    return (
      <div className="p-8 text-center text-red-400 bg-red-500/10 border border-red-500/30 rounded-lg">
        <h2 className="text-xl font-bold">Error Loading Dashboard Data</h2>
        <p className="mt-2">{error}</p>
      </div>
    )
  }

  return (
    <DashboardClientPage
      initialStats={stats}
      initialRuns={runs}
      initialSources={sources}
    />
  )
}

```

## 📄 src/app/admin/events/actions.js
*Lines: 33, Size: 925 Bytes*

```javascript
'use server'

import { revalidatePath } from 'next/cache'
import dbConnect from '@headlines/data-access/dbConnect.js'
import { deleteEvent, updateEvent, getEventDetails } from '@headlines/data-access'

// These actions will be called by the client component.

export async function updateEventAction(eventId, updateData) {
  await dbConnect()
  const result = await updateEvent(eventId, updateData)
  if (result.success) {
    revalidatePath('/admin/events')
  }
  return result
}

export async function deleteEventAction(eventId) {
  await dbConnect()
  const result = await deleteEvent(eventId)
  if (result.success) {
    revalidatePath('/admin/events')
  }
  return result
}

export async function getEventDetailsAction(eventId) {
  await dbConnect()
  // getEventDetails is already a server function, we just wrap it
  // to ensure it's called within the Server Action context.
  return await getEventDetails(eventId)
}

```

## 📄 src/app/admin/events/columns.jsx
*Lines: 245, Size: 8.2 KB*

```jsx
'use client'

import React, { useState, useCallback } from 'react'
import {
  Button,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  DataTableColumnHeader,
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
  Label,
  Textarea,
} from '@/components/shared'
import { Loader2, Trash2 } from 'lucide-react'
import { format } from 'date-fns'
import { RelationshipManager } from '@/components/admin/RelationshipManager'
import { toast } from 'sonner'
import { EditableCell } from '@/components/shared/EditableCell'

const eventCategories = [
  'New Wealth',
  'Future Wealth',
  'Wealth Mentioned',
  'Legal/Dispute',
  'Background',
  'Other',
]

const FormField = ({ id, label, children }) => (
  <div className="space-y-2">
    <Label htmlFor={id} className="text-sm font-medium text-muted-foreground pl-1">
      {label}
    </Label>
    {children}
  </div>
)

export const EventListItem = ({
  event,
  onUpdate,
  onDelete,
  isExpanded,
  onDetailsNeeded,
}) => {
  const [isLoadingDetails, setIsLoadingDetails] = useState(false)

  const loadDetails = useCallback(async () => {
    if (event.details) return // Already loaded
    setIsLoadingDetails(true)
    try {
      await onDetailsNeeded(event._id)
    } catch (err) {
      toast.error('Failed to load event details', { description: err.message })
    } finally {
      setIsLoadingDetails(false)
    }
  }, [event, onDetailsNeeded])

  React.useEffect(() => {
    if (isExpanded && !event.details && !isLoadingDetails) {
      loadDetails()
    }
  }, [isExpanded, event.details, isLoadingDetails, loadDetails])

  return (
    <AccordionItem value={event._id} className="border-b border-white/10 group">
      <AccordionTrigger className="w-full text-left hover:bg-white/5 px-2 hover:no-underline">
        {/* AccordionTrigger content remains the same */}
        <div className="flex items-center w-full text-sm">
          <div className="w-[180px] flex-shrink-0 text-muted-foreground group-hover:text-foreground">
            {format(new Date(event.createdAt), 'dd MMM yyyy, HH:mm')}
          </div>
          <div className="w-[140px] flex-shrink-0">{event.country}</div>
          <div className="w-[180px] flex-shrink-0">
            {event.eventClassification || 'N/A'}
          </div>
          <div className="w-[80px] text-center flex-shrink-0">
            {event.highest_relevance_score}
          </div>
          <div className="flex-grow min-w-0 pr-4 whitespace-normal font-medium">
            {event.synthesized_headline}
          </div>
        </div>
      </AccordionTrigger>
      <AccordionContent className="p-4 bg-black/20">
        {isLoadingDetails ? (
          <div className="flex items-center justify-center h-64">
            <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
          </div>
        ) : event.details ? (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Event Details</CardTitle>
                <CardDescription>
                  View and edit the core synthesized data.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <FormField label="Synthesized Headline">
                  <EditableCell
                    useTextarea={true}
                    initialValue={event.details.synthesized_headline}
                    onSave={(newValue) =>
                      onUpdate(event.details, { synthesized_headline: newValue })
                    }
                  />
                </FormField>

                {/* --- START OF THE LAYOUT FIX --- */}
                <div className="grid grid-cols-3 gap-4">
                  <FormField label="Country">
                    <EditableCell
                      initialValue={event.details.country}
                      onSave={(newValue) =>
                        onUpdate(event.details, { country: newValue })
                      }
                    />
                  </FormField>
                  <FormField label="Classification">
                    <Select
                      value={event.details.eventClassification}
                      onValueChange={(newValue) =>
                        onUpdate(event.details, { eventClassification: newValue })
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select..." />
                      </SelectTrigger>
                      <SelectContent>
                        {eventCategories.map((cat) => (
                          <SelectItem key={cat} value={cat}>
                            {cat}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormField>
                  <FormField label="Relevance Score">
                    <EditableCell
                      initialValue={event.details.highest_relevance_score}
                      onSave={(newValue) =>
                        onUpdate(event.details, {
                          highest_relevance_score: Number(newValue),
                        })
                      }
                    />
                  </FormField>
                </div>
                {/* --- END OF THE LAYOUT FIX --- */}

                <FormField label="Synthesized Summary">
                  <EditableCell
                    useTextarea={true}
                    initialValue={event.details.synthesized_summary}
                    onSave={(newValue) =>
                      onUpdate(event.details, { synthesized_summary: newValue })
                    }
                  />
                </FormField>
              </CardContent>
              <CardFooter>
                <Button variant="destructive" onClick={() => onDelete(event.details._id)}>
                  <Trash2 className="mr-2 h-4 w-4" /> Delete Event
                </Button>
              </CardFooter>
            </Card>
            <RelationshipManager
              item={event.details}
              itemType="event"
              refetch={loadDetails}
            />
          </div>
        ) : (
          <div className="text-center text-muted-foreground py-10">
            Click to load details.
          </div>
        )}
      </AccordionContent>
    </AccordionItem>
  )
}

export const ListHeader = ({ sorting, setSorting }) => {
  // This is a mock table instance to reuse the DataTableColumnHeader component
  const mockColumn = (id) => ({
    getCanSort: () => true,
    getIsSorted: () =>
      sorting.find((s) => s.id === id)?.desc
        ? 'desc'
        : sorting.find((s) => s.id === id)
          ? 'asc'
          : false,
    toggleSorting: (desc) => setSorting([{ id, desc }]),

    // --- START OF THE FIX ---
    // Add the missing functions that DataTableColumnHeader expects.
    // Since this custom list view doesn't support filtering, we can
    // make these functions do nothing or return default values.
    getCanFilter: () => false, // This will prevent the filter input from rendering
    getFilterValue: () => undefined,
    setFilterValue: () => {}, // No-op
    // --- END OF THE FIX ---
  })

  return (
    <div className="flex items-center p-2 border-b font-medium text-muted-foreground text-sm sticky top-0 bg-background z-10">
      <div className="w-[180px] flex-shrink-0">
        <DataTableColumnHeader column={mockColumn('createdAt')} title="Discovered" />
      </div>
      <div className="w-[140px] flex-shrink-0">
        <DataTableColumnHeader column={mockColumn('country')} title="Country" />
      </div>
      <div className="w-[180px] flex-shrink-0">
        <DataTableColumnHeader
          column={mockColumn('eventClassification')}
          title="Classification"
        />
      </div>
      <div className="w-[80px] flex-shrink-0 text-center">
        <DataTableColumnHeader
          column={mockColumn('highest_relevance_score')}
          title="Score"
        />
      </div>
      <div className="flex-grow min-w-0">
        <DataTableColumnHeader
          column={mockColumn('synthesized_headline')}
          title="Headline"
        />
      </div>
    </div>
  )
}

```

## 📄 src/app/admin/events/page.jsx
*Lines: 140, Size: 4.35 KB*

```jsx
'use client'

import {
  PageHeader,
  Accordion,
  LoadingOverlay,
  Button,
  ConfirmationDialog,
} from '@/components/shared'
import { EventListItem, ListHeader } from './columns'
import { useEntityManager } from '@/hooks/use-entity-manager'
import { toast } from 'sonner'
import { useCallback, useState } from 'react'
import { deleteEventAction, updateEventAction, getEventDetailsAction } from './actions'

export default function EventsPage() {
  const {
    data: events,
    setData, // <-- Let's use the original name for clarity
    total,
    isLoading,
    refetch,
    page,
    setPage,
    sorting,
    setSorting,
  } = useEntityManager('events')

  const [expandedItemId, setExpandedItemId] = useState(null)
  const [confirmState, setConfirmState] = useState({ isOpen: false, eventId: null })

  const handleFetchDetails = useCallback(
    async (eventId) => {
      const result = await getEventDetailsAction(eventId)
      if (result.success) {
        setData((currentData) =>
          currentData.map((e) => (e._id === eventId ? { ...e, details: result.data } : e))
        )
      } else {
        toast.error('Failed to load event details', { description: result.error })
      }
    },
    [setData]
  ) // <-- Dependency is now the stable 'setData'

  const handleUpdate = useCallback(
    async (event, updateData) => {
      setData((currentData) =>
        currentData.map((e) =>
          e._id === event._id
            ? { ...e, ...updateData, details: { ...e.details, ...updateData } }
            : e
        )
      )
      const result = await updateEventAction(event._id, updateData)
      if (!result.success) {
        toast.error(`Update failed: ${result.error}`)
        refetch()
      } else {
        toast.success('Event updated successfully.')
      }
    },
    [setData, refetch]
  )

  const handleDelete = (eventId) => setConfirmState({ isOpen: true, eventId })

  const confirmDelete = useCallback(async () => {
    const { eventId } = confirmState
    setConfirmState({ isOpen: false, eventId: null })
    const toastId = toast.loading('Deleting event...')
    const result = await deleteEventAction(eventId)
    if (result.success) {
      toast.success('Event deleted.', { id: toastId })
      refetch()
    } else {
      toast.error(`Deletion failed: ${result.error}`, { id: toastId })
    }
  }, [confirmState, refetch])

  const description = `Review, audit, and manage all ${total.toLocaleString()} synthesized events.`
  const totalPages = Math.ceil(total / 50) || 1

  return (
    <div className="flex flex-col h-full">
      <PageHeader title="Event Management" description={description} />
      <div className="mt-8 flex-grow min-h-0 flex flex-col">
        <div className="flex items-center py-4 justify-end">
          <Button
            onClick={() => setPage((p) => Math.max(1, p - 1))}
            variant="outline"
            disabled={page <= 1}
          >
            Previous
          </Button>
          <span className="text-sm text-muted-foreground mx-2">
            Page {page} of {totalPages}
          </span>
          <Button
            onClick={() => setPage((p) => p + 1)}
            variant="outline"
            disabled={page >= totalPages}
          >
            Next
          </Button>
        </div>
        <div className="relative rounded-md border flex-grow overflow-y-auto">
          <LoadingOverlay isLoading={isLoading && events.length === 0} />
          <ListHeader sorting={sorting} setSorting={setSorting} />
          <Accordion
            type="single"
            collapsible
            value={expandedItemId}
            onValueChange={setExpandedItemId}
          >
            {events.map((event) => (
              <EventListItem
                key={event._id}
                event={event}
                onUpdate={handleUpdate}
                onDelete={handleDelete}
                isExpanded={expandedItemId === event._id}
                onDetailsNeeded={handleFetchDetails}
              />
            ))}
          </Accordion>
        </div>
      </div>
      <ConfirmationDialog
        open={confirmState.isOpen}
        onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })}
        onConfirm={confirmDelete}
        title="Confirm Deletion"
        description="Are you sure you want to permanently delete this event and its related data?"
        confirmText="Delete Event"
      />
    </div>
  )
}

```

## 📄 src/app/admin/layout.js
*Lines: 28, Size: 856 Bytes*

```javascript
// File: apps/client/src/app/admin/layout.js (Corrected and Unabridged)

// 'use server'

import { verifyAdmin } from '@/lib/auth/server' // <-- THE FIX IS HERE
import { redirect } from 'next/navigation'
import { DesktopOnlyWrapper } from '@/components/admin/DesktopOnlyWrapper'
import { AppShell } from '@/app/_components/AppShell'

export const dynamic = 'force-dynamic'

export default async function AdminLayout({ children }) {
  // This server-side function checks the user's JWT cookie.
  const { isAdmin } = await verifyAdmin()

  // If the user is not an admin, redirect them away.
  if (!isAdmin) {
    redirect('/events') // Redirect to a safe, non-admin page
  }

  // The AppShell will detect the /admin path and render the correct UI
  return (
    <DesktopOnlyWrapper>
      <AppShell>{children}</AppShell>
    </DesktopOnlyWrapper>
  )
}

```

## 📄 src/app/admin/opportunities/actions.js
*Lines: 24, Size: 678 Bytes*

```javascript
'use server'

import { revalidatePath } from 'next/cache'
import dbConnect from '@headlines/data-access/dbConnect.js'
import { updateOpportunity, deleteOpportunity } from '@headlines/data-access'

export async function updateOpportunityAction(opportunityId, updateData) {
  await dbConnect()
  const result = await updateOpportunity(opportunityId, updateData)
  if (result.success) {
    revalidatePath('/admin/opportunities')
  }
  return result
}

export async function deleteOpportunityAction(opportunityId) {
  await dbConnect()
  const result = await deleteOpportunity(opportunityId)
  if (result.success) {
    revalidatePath('/admin/opportunities')
  }
  return result
}

```

## 📄 src/app/admin/opportunities/columns.jsx
*Lines: 109, Size: 2.91 KB*

```jsx
'use client'

import React from 'react'
import {
  Button,
  DataTableColumnHeader,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from '@/components/shared'
import { Trash2, Edit } from 'lucide-react'
import { format } from 'date-fns'
import { EditableCell } from '@/components/shared/EditableCell'
import Link from 'next/link'

export const columns = (onUpdate, onDelete) => [
  {
    accessorKey: 'reachOutTo',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Contact Name" />
    ),
    cell: ({ row }) => (
      <EditableCell
        initialValue={row.original.reachOutTo}
        onSave={(newValue) => onUpdate(row.original, { reachOutTo: newValue })}
      />
    ),
    minSize: 200,
  },
  {
    accessorKey: 'contactDetails.company',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Company" />,
    cell: ({ row }) => (
      <EditableCell
        initialValue={row.original.contactDetails?.company}
        onSave={(newValue) =>
          onUpdate(row.original, { 'contactDetails.company': newValue })
        }
        placeholder="N/A"
      />
    ),
    size: 200,
  },
  {
    accessorKey: 'contactDetails.email',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Email" />,
    cell: ({ row }) => (
      <EditableCell
        initialValue={row.original.contactDetails?.email}
        onSave={(newValue) =>
          onUpdate(row.original, { 'contactDetails.email': newValue })
        }
        placeholder="N/A"
      />
    ),
    size: 250,
  },
  {
    accessorKey: 'likelyMMDollarWealth',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Wealth ($M)" />,
    cell: ({ row }) => (
      <EditableCell
        initialValue={row.original.likelyMMDollarWealth}
        onSave={(newValue) =>
          onUpdate(row.original, { likelyMMDollarWealth: Number(newValue) })
        }
      />
    ),
    size: 120,
  },
  {
    accessorKey: 'basedIn',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Country" />,
    cell: ({ row }) => (
      <EditableCell
        initialValue={row.original.basedIn}
        onSave={(newValue) => onUpdate(row.original, { basedIn: newValue })}
      />
    ),
    size: 150,
  },
  {
    accessorKey: 'createdAt',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Created" />,
    cell: ({ row }) => format(new Date(row.original.createdAt), 'dd MMM yyyy, HH:mm'),
    size: 180,
  },
  {
    id: 'actions',
    cell: ({ row }) => (
      <div className="text-right">
        <Button
          variant="ghost"
          size="icon"
          className="h-8 w-8 text-muted-foreground hover:text-red-500"
          onClick={() => onDelete(row.original._id)}
        >
          <Trash2 className="h-4 w-4" />
        </Button>
      </div>
    ),
    size: 80,
    enableResizing: false,
  },
]

```

## 📄 src/app/admin/opportunities/page.jsx
*Lines: 101, Size: 3.01 KB*

```jsx
'use client'

import { PageHeader, DataTable, ConfirmationDialog } from '@/components/shared'
import { columns } from './columns'
import { useEntityManager } from '@/hooks/use-entity-manager'
import { toast } from 'sonner'
import { useCallback, useMemo, useState } from 'react'
import { updateOpportunityAction, deleteOpportunityAction } from './actions'

export default function OpportunitiesPage() {
  const {
    data: opportunities,
    setData,
    total,
    isLoading,
    refetch,
    page,
    setPage,
    sorting,
    setSorting,
    columnFilters,
    setColumnFilters,
  } = useEntityManager('opportunities')

  const [confirmState, setConfirmState] = useState({ isOpen: false, opportunityId: null })

  const handleUpdate = useCallback(
    async (opportunity, updateData) => {
      // Optimistic UI update
      setData((currentData) =>
        currentData.map((o) => (o._id === opportunity._id ? { ...o, ...updateData } : o))
      )

      const result = await updateOpportunityAction(opportunity._id, updateData)
      if (!result.success) {
        toast.error(`Update failed: ${result.error}. Reverting.`)
        refetch()
      }
    },
    [setData, refetch]
  )

  const handleDeleteRequest = useCallback((opportunityId) => {
    setConfirmState({ isOpen: true, opportunityId })
  }, [])

  const confirmDelete = useCallback(async () => {
    const { opportunityId } = confirmState
    setConfirmState({ isOpen: false, opportunityId: null })
    const toastId = toast.loading('Deleting opportunity...')

    const result = await deleteOpportunityAction(opportunityId)
    if (result.success) {
      toast.success('Opportunity deleted.', { id: toastId })
      refetch()
    } else {
      toast.error(`Deletion failed: ${result.error}`, { id: toastId })
    }
  }, [confirmState, refetch])

  const tableColumns = useMemo(
    () => columns(handleUpdate, handleDeleteRequest),
    [handleUpdate, handleDeleteRequest]
  )

  return (
    <>
      <div className="flex flex-col h-full">
        <PageHeader
          title="Opportunity Management"
          description={`Review and manage all ${total.toLocaleString()} actionable opportunities.`}
        />
        <div className="mt-8 flex-grow min-h-0">
          <DataTable
            columns={tableColumns}
            data={opportunities}
            isLoading={isLoading}
            page={page}
            setPage={setPage}
            total={total}
            sorting={sorting}
            setSorting={setSorting}
            columnFilters={columnFilters}
            setColumnFilters={setColumnFilters}
            filterColumn="reachOutTo"
            filterPlaceholder="Filter by name, company..."
          />
        </div>
      </div>
      <ConfirmationDialog
        open={confirmState.isOpen}
        onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })}
        onConfirm={confirmDelete}
        title="Confirm Deletion"
        description="Are you sure you want to permanently delete this opportunity?"
        confirmText="Delete Opportunity"
      />
    </>
  )
}

```

## 📄 src/app/admin/page.js
*Lines: 9, Size: 269 Bytes*

```javascript
// File: apps/client/src/app/admin/page.js

import { redirect } from 'next/navigation'

export default function AdminRootPage() {
  // This ensures that anyone navigating to /admin is immediately
  // sent to the main dashboard page.
  redirect('/admin/dashboard')
}
```

## 📄 src/app/admin/users/UsersClientPage.jsx
*Lines: 135, Size: 4.13 KB*

```jsx
// File: apps/client/src/app/admin/users/UsersClientPage.jsx (version 1.0 - New File)
'use client'

import { useState, useCallback, useMemo } from 'react'
import { toast } from 'sonner'
import {
  DataTable,
  Button,
  ConfirmationDialog,
  Sheet,
  SheetContent,
} from '@/components/shared'
import { PlusCircle } from 'lucide-react'
import { columns } from './columns'
import UserEditor from './user-editor'
import { updateUserAction, deleteUserAction, createUserAction } from './actions'
import { languageList } from '@headlines/utils-shared/next'

export default function UsersClientPage({ initialUsers, initialTotal, allCountries }) {
  const [users, setUsers] = useState(initialUsers)
  const [isEditorOpen, setIsEditorOpen] = useState(false)
  const [selectedId, setSelectedId] = useState(null)
  const [confirmState, setConfirmState] = useState({ isOpen: false, user: null })

  const handleAction = useCallback(async (user, action, data) => {
    if (action === 'delete') {
      setConfirmState({ isOpen: true, user })
      return
    }

    setUsers((prev) => prev.map((u) => (u._id === user._id ? { ...u, ...data } : u)))

    const result = await updateUserAction(user._id, data)
    if (!result.success) {
      toast.error(`Update failed: ${result.error}`)
      // Revert optimistic update on failure by reloading the page
      window.location.reload()
    }
  }, [])

  const confirmDelete = useCallback(async () => {
    const userToDelete = confirmState.user
    setConfirmState({ isOpen: false, user: null })
    if (!userToDelete) return

    const toastId = toast.loading('Deleting user...')
    const result = await deleteUserAction(userToDelete._id)

    if (!result.success) {
      toast.error(`Deletion failed: ${result.error}`, { id: toastId })
    } else {
      toast.success('User deleted successfully.', { id: toastId })
    }
  }, [confirmState.user])

  const handleSaveEditor = async (userData) => {
    const isNew = !userData._id
    const action = isNew
      ? createUserAction
      : (data) => updateUserAction(userData._id, data)
    const toastId = toast.loading(isNew ? 'Creating user...' : 'Updating user...')

    const result = await action(userData)

    if (result.success) {
      toast.success(`User ${isNew ? 'created' : 'updated'}.`, { id: toastId })
      setIsEditorOpen(false)
    } else {
      toast.error(`Failed to save: ${result.error}`, { id: toastId })
    }
  }

  const activeUserData = useMemo(() => {
    if (selectedId === 'new')
      return {
        _id: null,
        email: '',
        firstName: '',
        lastName: '',
        role: 'user',
        isActive: true,
        countries: [],
        password: '',
        emailNotificationsEnabled: true,
        pushNotificationsEnabled: true,
        subscriptionTier: 'free',
        language: 'English',
      }
    return users.find((u) => u._id.toString() === selectedId) || null
  }, [selectedId, users])

  return (
    <>
      <div className="flex justify-end">
        <Button
          onClick={() => {
            setSelectedId('new')
            setIsEditorOpen(true)
          }}
        >
          <PlusCircle className="mr-2 h-4 w-4" /> Add New User
        </Button>
      </div>
      <div className="mt-8 flex-grow min-h-0">
        <DataTable
          columns={columns((id) => {
            setSelectedId(id)
            setIsEditorOpen(true)
          }, handleAction)}
          data={users}
        />
      </div>
      <Sheet open={isEditorOpen} onOpenChange={setIsEditorOpen}>
        <SheetContent className="w-full sm:max-w-lg p-0">
          <UserEditor
            key={selectedId}
            user={activeUserData}
            onSave={handleSaveEditor}
            onCancel={() => setIsEditorOpen(false)}
            availableCountries={allCountries}
            availableLanguages={languageList}
          />
        </SheetContent>
      </Sheet>
      <ConfirmationDialog
        open={confirmState.isOpen}
        onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })}
        onConfirm={confirmDelete}
        title="Confirm Deletion"
        description={`Are you sure you want to delete user ${confirmState.user?.email}?`}
      />
    </>
  )
}

```

## 📄 src/app/admin/users/actions.js
*Lines: 46, Size: 1.14 KB*

```javascript
'use server'

import { revalidatePath } from 'next/cache'
import dbConnect from '@headlines/data-access/dbConnect.js' // <-- Import dbConnect
import {
  updateSubscriber,
  deleteSubscriber,
  createSubscriber,
} from '@headlines/data-access'

// This file now uses the pure data logic functions from data-access
// and adds the Next.js-specific logic (dbConnect, revalidation).

export async function updateUserAction(userId, updateData) {
  // Establish connection at the start of the action
  await dbConnect()

  const result = await updateSubscriber(userId, updateData)
  if (result.success) {
    revalidatePath('/admin/users')
  }
  return result
}

export async function deleteUserAction(userId) {
  // Establish connection at the start of the action
  await dbConnect()

  const result = await deleteSubscriber(userId)
  if (result.success) {
    revalidatePath('/admin/users')
  }
  return result
}

export async function createUserAction(userData) {
  // Establish connection at the start of the action
  await dbConnect()

  const result = await createSubscriber(userData)
  if (result.success) {
    revalidatePath('/admin/users')
  }
  return result
}

```

## 📄 src/app/admin/users/columns.jsx
*Lines: 169, Size: 4.76 KB*

```jsx
// File: apps/client/src/app/admin/users/columns.jsx (version 3.0 - Server Actions)
'use client'

import React from 'react'
import {
  Button,
  DataTableColumnHeader,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  EditableCell,
} from '@/components/shared'
import { UserCheck, UserX, ShieldCheck, User, Globe, Edit, Trash2 } from 'lucide-react'
import { SUBSCRIPTION_TIERS } from '@headlines/models/client'

export const columns = (handleEdit, handleAction) => [
  {
    accessorKey: 'email',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Email" />,
    cell: ({ row }) => {
      const user = row.original;
      return (
        <div className="flex flex-col">
          <span className="font-medium">{user.email}</span>
          {/* --- START OF THE FIX --- */}
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <EditableCell
              initialValue={user.firstName}
              onSave={(newValue) =>
                handleAction(user, 'updateFirstName', { firstName: newValue })
              }
              placeholder="First Name..."
            />
            <EditableCell
              initialValue={user.lastName}
              onSave={(newValue) =>
                handleAction(user, 'updateLastName', { lastName: newValue })
              }
              placeholder="Last Name..."
            />
          </div>
          {/* --- END OF THE FIX --- */}
        </div>
      );
    },
  },
  {
    accessorKey: 'isActive',
    header: 'Status',
    cell: ({ row }) => {
      const user = row.original
      return (
        <Button
          variant="ghost"
          size="sm"
          className={`flex items-center gap-2 ${user.isActive ? 'text-green-500' : 'text-muted-foreground'}`}
          onClick={() => handleAction(user, 'toggleActive', { isActive: !user.isActive })}
        >
          {user.isActive ? (
            <UserCheck className="h-4 w-4" />
          ) : (
            <UserX className="h-4 w-4" />
          )}
          {user.isActive ? 'Active' : 'Inactive'}
        </Button>
      )
    },
  },
  {
    accessorKey: 'subscriptionTier',
    header: 'Tier',
    cell: ({ row }) => {
      const user = row.original
      return (
        <Select
          value={user.subscriptionTier}
          onValueChange={(newTier) =>
            handleAction(user, 'updateTier', { subscriptionTier: newTier })
          }
        >
          <SelectTrigger className="w-32 h-8 text-xs capitalize bg-transparent border-none focus:ring-0 shadow-none">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            {SUBSCRIPTION_TIERS.map((tier) => (
              <SelectItem key={tier} value={tier} className="capitalize">
                {tier}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      )
    },
  },
  {
    accessorKey: 'role',
    header: 'Role',
    cell: ({ row }) => {
      const user = row.original
      return (
        <Button
          variant="ghost"
          size="sm"
          className={`flex items-center gap-2 capitalize ${user.role === 'admin' ? 'text-yellow-400' : 'text-muted-foreground'}`}
          onClick={() =>
            handleAction(user, 'toggleRole', {
              role: user.role === 'admin' ? 'user' : 'admin',
            })
          }
        >
          {user.role === 'admin' ? (
            <ShieldCheck className="h-4 w-4" />
          ) : (
            <User className="h-4 w-4" />
          )}
          {user.role}
        </Button>
      )
    },
  },
  {
    accessorKey: 'countries',
    header: 'Countries',
    cell: ({ row }) => {
      const user = row.original
      if (user.role === 'admin')
        return (
          <div className="flex items-center gap-2 text-muted-foreground">
            <Globe className="h-4 w-4" /> All Countries
          </div>
        )
      const count = user.countries?.length || 0
      return (
        <div className="flex items-center gap-2 text-muted-foreground">
          <Globe className="h-4 w-4" /> {count} countries
        </div>
      )
    },
  },
  {
    id: 'actions',
    cell: ({ row }) => {
      const user = row.original
      return (
        <div className="text-right flex justify-end items-center">
          <Button
            variant="ghost"
            size="icon"
            className="h-8 w-8"
            onClick={() => handleEdit(user._id.toString())}
          >
            <Edit className="h-4 w-4" />
          </Button>
          <Button
            variant="ghost"
            size="icon"
            className="h-8 w-8 text-red-500/80 hover:text-red-500"
            onClick={() => handleAction(user, 'delete')}
          >
            <Trash2 className="h-4 w-4" />
          </Button>
        </div>
      )
    },
  },
]

```

## 📄 src/app/admin/users/country-subscription-manager.jsx
*Lines: 114, Size: 3.78 KB*

```jsx
// File: apps/client/src/app/admin/users/country-subscription-manager.jsx (version 1.0 - New File)
'use client'

import { useState } from 'react'
import { Popover, PopoverContent, PopoverTrigger } from '@/components/shared'
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from '@/components/shared'
import { Button } from '@/components/shared'
import { Switch } from '@/components/shared'
import { Check, ChevronsUpDown, X } from 'lucide-react'
import { cn } from '@headlines/utils-shared'

export default function CountrySubscriptionManager({
  availableCountries,
  subscriptions,
  onChange,
}) {
  const [open, setOpen] = useState(false)

  const handleAddCountry = (countryName) => {
    if (!subscriptions.some((sub) => sub.name === countryName)) {
      const newSubscriptions = [...subscriptions, { name: countryName, active: true }]
      onChange(newSubscriptions.sort((a, b) => a.name.localeCompare(b.name)))
    }
    setOpen(false)
  }

  const handleRemoveCountry = (countryName) => {
    const newSubscriptions = subscriptions.filter((sub) => sub.name !== countryName)
    onChange(newSubscriptions)
  }

  const handleToggleActive = (countryName, isActive) => {
    const newSubscriptions = subscriptions.map((sub) =>
      sub.name === countryName ? { ...sub, active: isActive } : sub
    )
    onChange(newSubscriptions)
  }

  const subscribedCountryNames = new Set(subscriptions.map((s) => s.name))
  const addableCountries = availableCountries
    .filter((c) => !subscribedCountryNames.has(c))
    .sort()

  return (
    <div className="space-y-2">
      <div className="space-y-2">
        {subscriptions.length > 0 ? (
          subscriptions.map((sub) => (
            <div
              key={sub.name}
              className="flex items-center justify-between p-2 bg-black/20 rounded-md"
            >
              <span className="font-medium text-sm">{sub.name}</span>
              <div className="flex items-center gap-2">
                <Switch
                  checked={sub.active}
                  onCheckedChange={(checked) => handleToggleActive(sub.name, checked)}
                />
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-7 w-7"
                  onClick={() => handleRemoveCountry(sub.name)}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>
          ))
        ) : (
          <div className="text-center text-sm text-muted-foreground p-4 border border-dashed border-white/10 rounded-md">
            No countries subscribed.
          </div>
        )}
      </div>
      <Popover open={open} onOpenChange={setOpen}>
        <PopoverTrigger asChild>
          <Button variant="outline" role="combobox" className="w-full justify-between">
            Add country subscription...
            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
          <Command>
            <CommandInput placeholder="Search countries..." />
            <CommandList>
              <CommandEmpty>No countries found.</CommandEmpty>
              <CommandGroup>
                {addableCountries.map((country) => (
                  <CommandItem
                    key={country}
                    value={country}
                    onSelect={() => handleAddCountry(country)}
                  >
                    <Check className={cn('mr-2 h-4 w-4', 'opacity-0')} />
                    {country}
                  </CommandItem>
                ))}
              </CommandGroup>
            </CommandList>
          </Command>
        </PopoverContent>
      </Popover>
    </div>
  )
}

```

## 📄 src/app/admin/users/page.jsx
*Lines: 46, Size: 1.23 KB*

```jsx
'use server'

import { PageHeader } from '@/components/shared'
import { getAllSubscribers, getAllCountries } from '@headlines/data-access'
import UsersClientPage from './UsersClientPage'
import dbConnect from '@headlines/data-access/dbConnect.js'

export default async function UsersPage() {
  // Establish the database connection ONCE at the start of the page render.
  await dbConnect()

  const [usersResult, countriesResult] = await Promise.all([
    getAllSubscribers({}),
    getAllCountries(),
  ])

  if (!usersResult.success || !countriesResult.success) {
    return (
      <div>
        <h1>Error loading data</h1>
        <p>{usersResult.error || countriesResult.error}</p>
      </div>
    )
  }

  const users = usersResult.data
  const totalUsers = usersResult.total
  const allCountries = countriesResult.data
    .filter((c) => c.status === 'active')
    .map((c) => c.name)

  return (
    <div className="flex flex-col h-full">
      <PageHeader
        title="User Management"
        description={`Manage all ${totalUsers.toLocaleString()} system users.`}
      />
      <UsersClientPage
        initialUsers={JSON.parse(JSON.stringify(users))}
        initialTotal={totalUsers}
        allCountries={allCountries}
      />
    </div>
  )
}

```

## 📄 src/app/admin/users/user-editor.jsx
*Lines: 166, Size: 5.18 KB*

```jsx
// File: apps/client/src/app/admin/users/user-editor.jsx (version 2.0 - Server Actions)
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import {
  Button,
  CardFooter,
  Input,
  Label,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  Separator,
} from '@/components/shared'
import { toast } from 'sonner'
import { Save, Loader2, UserPlus, X } from 'lucide-react'
import CountrySubscriptionManager from './country-subscription-manager'
// The editor now uses the Server Actions directly.
import { createUserAction, updateUserAction } from './actions'
import { SUBSCRIPTION_TIERS } from '@headlines/models/client'

const FormField = ({ id, label, children, description }) => (
  <div className="space-y-2">
    <Label htmlFor={id} className="text-sm font-medium text-muted-foreground pl-1">
      {label}
    </Label>
    {children}
    {description && <p className="text-xs text-muted-foreground pl-1">{description}</p>}
  </div>
)

export default function UserEditor({
  user,
  onSave, // The onSave prop now comes from UsersClientPage
  onCancel,
  availableCountries,
  availableLanguages,
}) {
  const [formData, setFormData] = useState(user)
  const [isSaving, setIsSaving] = useState(false)
  const [isDirty, setIsDirty] = useState(false)

  useEffect(() => {
    setFormData(user)
    setIsDirty(false)
  }, [user])

  if (!user) return null

  const handleChange = (key, value) => {
    setFormData((prev) => ({ ...prev, [key]: value }))
    setIsDirty(true)
  }

  const handleSave = async () => {
    setIsSaving(true)
    // The onSave prop is now the `handleSaveEditor` function from the client page.
    await onSave(formData)
    setIsSaving(false)
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="h-full flex flex-col"
    >
      <div className="flex justify-between items-center flex-shrink-0 p-6 border-b border-white/10">
        <div className="space-y-1">
          <h1 className="text-2xl font-bold tracking-tight flex items-center gap-2">
            {!user._id && <UserPlus />}
            {!user._id ? 'Create New User' : 'Edit User'}
          </h1>
          <p className="text-sm text-muted-foreground">
            {!user._id ? 'Provide details for the new user.' : formData.email}
          </p>
        </div>
        <Button variant="ghost" size="icon" onClick={onCancel}>
          <X className="h-4 w-4" />
        </Button>
      </div>
      <div className="flex-grow overflow-y-auto p-6 space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormField id="firstName" label="First Name">
            <Input
              value={formData.firstName || ''}
              onChange={(e) => handleChange('firstName', e.target.value)}
            />
          </FormField>
          <FormField id="lastName" label="Last Name">
            <Input
              value={formData.lastName || ''}
              onChange={(e) => handleChange('lastName', e.target.value)}
            />
          </FormField>
        </div>
        <FormField id="email" label="Email Address">
          <Input
            type="email"
            value={formData.email || ''}
            onChange={(e) => handleChange('email', e.target.value)}
            disabled={!!user._id}
          />
        </FormField>
        <FormField
          id="password"
          label="Password"
          description={
            !user._id
              ? 'Required for new users.'
              : 'Leave blank to keep current password.'
          }
        >
          <Input
            type="password"
            autoComplete="new-password"
            value={formData.password || ''}
            onChange={(e) => handleChange('password', e.target.value)}
          />
        </FormField>
        <Separator />
        <h3 className="text-lg font-semibold leading-none tracking-tight">
          Subscription Details
        </h3>
        <FormField label="Subscription Tier">
          <Select
            value={formData.subscriptionTier}
            onValueChange={(v) => handleChange('subscriptionTier', v)}
          >
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {SUBSCRIPTION_TIERS.map((tier) => (
                <SelectItem key={tier} value={tier}>
                  {tier}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </FormField>
        <FormField label="Country Subscriptions">
          <CountrySubscriptionManager
            availableCountries={availableCountries}
            subscriptions={formData.countries || []}
            onChange={(newSubs) => handleChange('countries', newSubs)}
          />
        </FormField>
      </div>
      <CardFooter className="mt-auto border-t border-white/10 p-6 flex justify-end">
        <Button onClick={handleSave} disabled={!isDirty || isSaving}>
          {isSaving ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Save className="mr-2 h-4 w-4" />
          )}
          {isSaving ? 'Saving...' : 'Save Changes'}
        </Button>
      </CardFooter>
    </motion.div>
  )
}

```

## 📄 src/app/admin/watchlist/WatchlistClientPage.jsx
*Lines: 182, Size: 5.71 KB*

```jsx
'use client'

import { useState, useMemo, useCallback } from 'react'
import {
  PageHeader,
  Button,
  Sheet,
  SheetContent,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
  ConfirmationDialog,
  DataTable,
} from '@/components/shared'
import { PlusCircle } from 'lucide-react'
import { toast } from 'sonner'
import { watchlistColumns, suggestionColumns } from './columns'
import WatchlistEditor from './watchlist-editor'
import {
  updateEntityAction,
  deleteEntityAction,
  processSuggestionAction,
} from './actions'
import { useEntityManager } from '@/hooks/use-entity-manager'

export default function WatchlistClientPage({
  initialWatchlist,
  initialSuggestions,
  availableCountries,
}) {
  const {
    data: watchlist,
    setData: setWatchlist,
    total,
    isLoading,
    page,
    setPage,
    sorting,
    setSorting,
    columnFilters,
    setColumnFilters,
  } = useEntityManager('watchlist', initialWatchlist, initialWatchlist.length)

  const [suggestions, setSuggestions] = useState(initialSuggestions)
  const [isEditorOpen, setIsEditorOpen] = useState(false)
  const [selectedId, setSelectedId] = useState(null)
  const [confirmState, setConfirmState] = useState({ isOpen: false, entityId: null })

  const handleEdit = (id) => {
    setSelectedId(id)
    setIsEditorOpen(true)
  }

  const handleAdd = () => {
    setSelectedId('new')
    setIsEditorOpen(true)
  }

  const handleEntityUpdate = useCallback(async (entity, updateData) => {
    // Optimistic UI update
    setWatchlist((prev) =>
      prev.map((e) => (e._id === entity._id ? { ...e, ...updateData } : e))
    )

    const result = await updateEntityAction(entity._id, updateData)

    if (!result.success) {
      toast.error('Update failed. Reverting.')
      // Revert optimistic update on failure by reloading the page
      window.location.reload()
    }
  }, [])

  const handleSuggestionAction = async (suggestion, action) => {
    const toastId = toast.loading(`Processing suggestion "${suggestion.name}"...`)
    setSuggestions((prev) => prev.filter((s) => s._id !== suggestion._id)) // Optimistic removal
    const result = await processSuggestionAction(suggestion._id, action)
    if (result.success) {
      toast.success(result.message, { id: toastId })
    } else {
      toast.error(`Failed to ${action} suggestion: ${result.error}`, { id: toastId })
      setSuggestions(initialSuggestions) // Revert on failure
    }
  }

  const handleDelete = (entityId) => setConfirmState({ isOpen: true, entityId })
  const confirmDelete = async () => {
    const { entityId } = confirmState
    setConfirmState({ isOpen: false, entityId: null })
    const toastId = toast.loading('Deleting entity...')
    const result = await deleteEntityAction(entityId)
    if (result.success) {
      toast.success('Entity deleted.', { id: toastId })
    } else {
      toast.error(`Deletion failed: ${result.error}`, { id: toastId })
    }
  }

  const activeEntityData = useMemo(() => {
    if (selectedId === 'new')
      return {
        _id: null,
        name: '',
        type: 'company',
        status: 'candidate',
        context: '',
        country: '',
        searchTerms: [],
      }
    return watchlist?.find((e) => e._id === selectedId) || null
  }, [selectedId, watchlist])

  return (
    <>
      <PageHeader
        title="Watchlist Management"
        description={`Manage ${total.toLocaleString()} entities and review ${suggestions.length} AI-generated suggestions.`}
      >
        <Button onClick={handleAdd}>
          <PlusCircle className="mr-2 h-4 w-4" /> Add New Entity
        </Button>
      </PageHeader>
      <div className="mt-8 flex-grow min-h-0">
        <Tabs defaultValue="watchlist" className="h-full flex flex-col">
          <TabsList>
            <TabsTrigger value="watchlist">
              Monitored Entities ({total.toLocaleString()})
            </TabsTrigger>
            <TabsTrigger value="suggestions">
              AI Suggestions ({suggestions.length})
            </TabsTrigger>
          </TabsList>
          <TabsContent value="watchlist" className="flex-grow min-h-0">
            <DataTable
              columns={watchlistColumns(handleEdit, handleEntityUpdate, handleDelete)}
              data={watchlist}
              isLoading={isLoading}
              total={total}
              page={page}
              setPage={setPage}
              sorting={sorting}
              setSorting={setSorting}
              columnFilters={columnFilters}
              setColumnFilters={setColumnFilters}
              filterColumn="name"
              filterPlaceholder="Filter by name..."
            />
          </TabsContent>
          <TabsContent value="suggestions" className="flex-grow min-h-0">
            <DataTable
              columns={suggestionColumns(handleSuggestionAction)}
              data={suggestions}
              filterColumn="name"
              filterPlaceholder="Filter by name..."
            />
          </TabsContent>
        </Tabs>
      </div>
      <Sheet open={isEditorOpen} onOpenChange={setIsEditorOpen}>
        <SheetContent className="w-full sm:max-w-lg p-0">
          <WatchlistEditor
            key={selectedId}
            entity={activeEntityData}
            onSave={() => setIsEditorOpen(false)} // The editor's action now triggers a revalidation
            onCancel={() => setIsEditorOpen(false)}
            countries={availableCountries}
          />
        </SheetContent>
      </Sheet>
      <ConfirmationDialog
        open={confirmState.isOpen}
        onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })}
        onConfirm={confirmDelete}
        title="Confirm Deletion"
        description="Are you sure you want to delete this entity? This action cannot be undone."
        confirmText="Delete Entity"
      />
    </>
  )
}

```

## 📄 src/app/admin/watchlist/actions.js
*Lines: 56, Size: 1.49 KB*

```javascript
'use server';

import { revalidatePath } from 'next/cache';
import dbConnect from '@headlines/data-access/dbConnect.js';
import {
  createWatchlistEntity,
  updateWatchlistEntity,
  deleteWatchlistEntity,
  processWatchlistSuggestion,
  updateWatchlistSuggestion,
} from '@headlines/data-access';

export async function createEntityAction(entityData) {
  await dbConnect();
  const result = await createWatchlistEntity(entityData);
  if (result.success) {
    revalidatePath('/admin/watchlist');
  }
  return result;
}

export async function updateEntityAction(entityId, updateData) {
  await dbConnect();
  const result = await updateWatchlistEntity(entityId, updateData);
  if (result.success) {
    revalidatePath('/admin/watchlist');
  }
  return result;
}

export async function deleteEntityAction(entityId) {
  await dbConnect();
  const result = await deleteWatchlistEntity(entityId);
  if (result.success) {
    revalidatePath('/admin/watchlist');
  }
  return result;
}

export async function processSuggestionAction(suggestionId, action) {
  await dbConnect();
  const result = await processWatchlistSuggestion({ suggestionId, action, suggestionType: 'watchlist' });
  if (result.success) {
    revalidatePath('/admin/watchlist');
  }
  return result;
}

export async function updateSuggestionAction(suggestionId, updateData) {
  await dbConnect();
  const result = await updateWatchlistSuggestion(suggestionId, updateData);
  if (result.success) {
    revalidatePath('/admin/watchlist');
  }
  return result;
}
```

## 📄 src/app/admin/watchlist/columns.jsx
*Lines: 141, Size: 4.8 KB*

```jsx
'use client';

import React from 'react';
import {
  Button,
  Badge,
  DataTableColumnHeader,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
  Tooltip,
  TooltipProvider,
  TooltipTrigger,
  TooltipContent,
} from '@/components/shared';
import {
  MoreHorizontal,
  Building,
  User,
  Users,
  Trash2,
  Check,
  X,
} from 'lucide-react';
import { EditableCell } from '@/components/shared/EditableCell';

const TypeIcon = ({ type }) => {
  if (type === 'person') return <User className="h-5 w-5 text-blue-400" />;
  if (type === 'family') return <Users className="h-5 w-5 text-purple-400" />;
  return <Building className="h-5 w-5 text-orange-400" />;
};

export const watchlistColumns = (handleEdit, onUpdate, onDelete) => [
  {
    accessorKey: 'hitCount',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Hits" />,
    cell: ({ row }) => <div className="text-center font-medium">{row.original.hitCount || 0}</div>,
  },
  {
    accessorKey: 'name',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />,
    cell: ({ row }) => (
      <div className="flex items-center gap-2">
        <TypeIcon type={row.original.type} />
        <span className="font-medium">{row.getValue('name')}</span>
      </div>
    ),
  },
  {
    accessorKey: 'searchTerms',
    header: 'Search Terms',
    cell: ({ row }) => (
      <div className="max-w-md">
        <EditableCell 
          initialValue={(row.original.searchTerms || []).join(', ')}
          onSave={(newValue) => onUpdate(row.original, { searchTerms: newValue.split(',').map(s => s.trim()) })}
          placeholder="Add terms..."
          useTextarea={true}
        />
      </div>
    ),
  },
  {
    accessorKey: 'status',
    header: 'Status',
    cell: ({ row }) => {
        const entity = row.original;
        const colorClass = {
            active: 'bg-green-500/20 text-green-400 border-green-500/30',
            inactive: 'bg-gray-500/20 text-gray-400 border-gray-500/30',
            candidate: 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30',
        }[entity.status];
        return <Badge className={colorClass}>{entity.status}</Badge>
    }
  },
  {
    id: 'actions',
    cell: ({ row }) => (
      <div className="text-right">
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="h-8 w-8 p-0"><MoreHorizontal className="h-4 w-4" /></Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>Actions</DropdownMenuLabel>
            <DropdownMenuItem onClick={() => handleEdit(row.original._id)}>Edit Details</DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem
              className="text-red-400 focus:bg-red-500/10 focus:text-red-400"
              onClick={() => onDelete(row.original._id)}
            >
              <Trash2 className="mr-2 h-4 w-4" /> Delete
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    ),
  },
];

export const suggestionColumns = (onAction, onUpdate) => [
  {
    accessorKey: 'name',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />,
    cell: ({ row }) => (
      <div className="flex items-center gap-2">
        <TypeIcon type={row.original.type} />
        <span className="font-medium">{row.getValue('name')}</span>
      </div>
    ),
  },
  { accessorKey: 'rationale', header: 'AI Rationale', cell: ({ row }) => <div className="truncate max-w-sm">{row.getValue('rationale')}</div> },
  { accessorKey: 'sourceEvent', header: 'Source Event', cell: ({ row }) => <div className="truncate max-w-xs text-muted-foreground">{row.getValue('sourceEvent')}</div> },
  {
    id: 'actions',
    cell: ({ row }) => {
      const suggestion = row.original;
      return (
        <div className="text-right space-x-2">
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button variant="ghost" size="icon" className="h-8 w-8 text-green-400 hover:bg-green-500/10 hover:text-green-400" onClick={() => onAction(suggestion, 'approved')}><Check className="h-4 w-4" /></Button>
              </TooltipTrigger>
              <TooltipContent><p>Approve and add to watchlist</p></TooltipContent>
            </Tooltip>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button variant="ghost" size="icon" className="h-8 w-8 text-red-400 hover:bg-red-500/10 hover:text-red-400" onClick={() => onAction(suggestion, 'dismissed')}><X className="h-4 w-4" /></Button>
              </TooltipTrigger>
              <TooltipContent><p>Dismiss this suggestion</p></TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
      );
    },
  },
];
```

## 📄 src/app/admin/watchlist/page.jsx
*Lines: 53, Size: 1.42 KB*

```jsx
'use server'

import { PageHeader, Button } from '@/components/shared'
import dbConnect from '@headlines/data-access/dbConnect.js'
import {
  getAllWatchlistEntities,
  getSuggestions,
  getAllCountries,
} from '@headlines/data-access'
import WatchlistClientPage from './WatchlistClientPage' // We will create this next
import { PlusCircle } from 'lucide-react'
import { languageList } from '@headlines/utils-shared'

export default async function WatchlistPage() {
  await dbConnect()

  const [watchlistResult, suggestionsResult, countriesResult] = await Promise.all([
    getAllWatchlistEntities(),
    getSuggestions(),
    getAllCountries(),
  ])

  // Error handling can be improved, but this is a start
  if (
    !watchlistResult.success ||
    !suggestionsResult.success ||
    !countriesResult.success
  ) {
    return (
      <div>
        <h1>Error loading data</h1>
        <p>{watchlistResult.error || suggestionsResult.error || countriesResult.error}</p>
      </div>
    )
  }

  const allCountries = countriesResult.data
    .filter((c) => c.status === 'active')
    .map((c) => c.name)

  return (
    <div className="flex flex-col h-full">
      <WatchlistClientPage
        initialWatchlist={JSON.parse(JSON.stringify(watchlistResult.data))}
        initialSuggestions={JSON.parse(
          JSON.stringify(suggestionsResult.data.watchlistSuggestions)
        )}
        availableCountries={allCountries}
      />
    </div>
  )
}

```

## 📄 src/app/admin/watchlist/watchlist-editor.jsx
*Lines: 159, Size: 5.05 KB*

```jsx
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import {
  Button,
  CardFooter,
  Input,
  Textarea,
  Label,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/shared'
import { toast } from 'sonner'
import { Save, Loader2, PlusCircle, X, Sparkles } from 'lucide-react'
import { createEntityAction, updateEntityAction } from './actions'
// NOTE: AI enrichment features are part of ai-services and would need separate client-side API routes or actions if needed here.
// For now, we will omit them to keep the port clean.

const FormField = ({ id, label, children }) => (
  <div className="space-y-2">
    <Label htmlFor={id} className="text-sm font-medium text-muted-foreground pl-1">
      {label}
    </Label>
    {children}
  </div>
)

export default function WatchlistEditor({ entity, onSave, onCancel, countries = [] }) {
  const [formData, setFormData] = useState(entity)
  const [isSaving, setIsSaving] = useState(false)
  const [isDirty, setIsDirty] = useState(false)

  useEffect(() => {
    setFormData(entity)
    setIsDirty(false)
  }, [entity])

  if (!entity) return null

  const isNewEntity = !entity._id

  const handleChange = (key, value) => {
    setFormData((prev) => ({ ...prev, [key]: value }))
    setIsDirty(true)
  }

  const handleSave = async () => {
    setIsSaving(true)
    const action = isNewEntity
      ? createEntityAction
      : (data) => updateEntityAction(entity._id, data)

    const result = await action(formData)

    if (result.success) {
      toast.success(
        `Entity "${result.entity.name}" ${isNewEntity ? 'created' : 'updated'}.`
      )
      onSave(result.entity)
    } else {
      toast.error(`Error saving entity: ${result.error}`)
    }
    setIsSaving(false)
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="h-full flex flex-col"
    >
      <div className="flex justify-between items-center flex-shrink-0 p-6 border-b border-white/10">
        <div className="space-y-1">
          <h1 className="text-2xl font-bold tracking-tight flex items-center gap-2">
            {isNewEntity && <PlusCircle />}
            {isNewEntity ? 'Create New Entity' : 'Edit Entity'}
          </h1>
          <p className="text-sm text-muted-foreground">
            {isNewEntity ? 'Add a new target to the watchlist.' : formData.name}
          </p>
        </div>
        <Button variant="ghost" size="icon" onClick={onCancel}>
          <X className="h-4 w-4" />
        </Button>
      </div>
      <div className="flex-grow overflow-y-auto p-6 space-y-6">
        <FormField id="name" label="Name">
          <Input
            value={formData.name || ''}
            onChange={(e) => handleChange('name', e.target.value)}
          />
        </FormField>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormField label="Type">
            <Select value={formData.type} onValueChange={(v) => handleChange('type', v)}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="company">Company</SelectItem>
                <SelectItem value="person">Person</SelectItem>
                <SelectItem value="family">Family</SelectItem>
              </SelectContent>
            </Select>
          </FormField>
          <FormField label="Status">
            <Select
              value={formData.status}
              onValueChange={(v) => handleChange('status', v)}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="candidate">Candidate</SelectItem>
                <SelectItem value="active">Active</SelectItem>
                <SelectItem value="inactive">Inactive</SelectItem>
              </SelectContent>
            </Select>
          </FormField>
        </div>
        <FormField id="context" label="Context / AKA">
          <Input
            value={formData.context || ''}
            onChange={(e) => handleChange('context', e.target.value)}
            placeholder="e.g., The Lego Family"
          />
        </FormField>
        <FormField id="searchTerms" label="Search Terms (comma-separated)">
          <Textarea
            value={(formData.searchTerms || []).join(', ')}
            onChange={(e) =>
              handleChange(
                'searchTerms',
                e.target.value.split(',').map((s) => s.trim().toLowerCase())
              )
            }
            placeholder="e.g., hanni, kasprzak, ecco"
          />
        </FormField>
      </div>
      <CardFooter className="mt-auto border-t border-white/10 p-6 flex justify-end">
        <Button onClick={handleSave} disabled={!isDirty || isSaving}>
          {isSaving ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Save className="mr-2 h-4 w-4" />
          )}
          {isSaving ? 'Saving...' : 'Save Changes'}
        </Button>
      </CardFooter>
    </motion.div>
  )
}

```

## 📄 src/app/api/articles/route.js
*Lines: 30, Size: 1.05 KB*

```javascript
import { NextResponse } from 'next/server'
import { getArticles, getTotalArticleCount } from '@headlines/data-access'
import { createClientApiHandler } from '@/lib/api-handler' // Use the new client handler

const handleGet = async (request, { user }) => {
  const { searchParams } = new URL(request.url)
  const page = parseInt(searchParams.get('page') || '1', 10)
  const sort = searchParams.get('sort') || 'date_desc'
  const filters = {
    q: searchParams.get('q') || '',
  }

  // The user object from the handler contains the userId
  const [articlesResult, totalResult] = await Promise.all([
    getArticles({ page, filters, sort, userId: user.userId }),
    getTotalArticleCount({ filters, userId: user.userId }),
  ])

  if (!articlesResult.success || !totalResult.success) {
    throw new Error(
      articlesResult.error || totalResult.error || 'Failed to fetch article data'
    )
  }

  return NextResponse.json({ data: articlesResult.data, total: totalResult.total })
}

export const GET = createClientApiHandler(handleGet)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api/auth/login/route.js
*Lines: 64, Size: 1.63 KB*

```javascript
// File: apps/client/src/app/api/auth/login/route.js (Corrected)

import { NextResponse } from 'next/server'
import { loginUser } from '@headlines/data-access/next'
import * as jose from 'jose'
import { env } from '@headlines/config/next'
import { initializeSharedLogic } from '@/lib/init-shared-logic' // <-- Import initialization

const JWT_COOKIE_NAME = 'headlines-jwt'

export async function POST(request) {
  try {
    // Explicitly initialize for this public route
    await initializeSharedLogic()

    const { email, password } = await request.json()

    const result = await loginUser({ email, password })

    if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: 401 })
    }

    const user = result.user

    const secret = new TextEncoder().encode(env.JWT_SECRET)
    const token = await new jose.SignJWT({
      userId: user._id.toString(),
      email: user.email,
      role: user.role,
    })
      .setProtectedHeader({ alg: 'HS256' })
      .setIssuedAt()
      .setExpirationTime('30d')
      .sign(secret)

    const response = NextResponse.json({
      user: {
        _id: user._id,
        firstName: user.firstName,
        email: user.email,
        role: user.role,
      },
    })

    response.cookies.set({
      name: JWT_COOKIE_NAME,
      value: token,
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      path: '/',
      maxAge: 60 * 60 * 24 * 30,
    })

    return response
  } catch (error) {
    console.error('[API Login Route Error]', error)
    return NextResponse.json(
      { error: 'An internal server error occurred.' },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api/auth/logout/route.js
*Lines: 18, Size: 434 Bytes*

```javascript
// apps/client/src/app/api/auth/logout/route.js
import { NextResponse } from 'next/server'

const JWT_COOKIE_NAME = 'headlines-jwt'

export async function POST() {
  const response = NextResponse.json({ message: 'Logged out successfully' })
  response.cookies.set({
    name: JWT_COOKIE_NAME,
    value: '',
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    path: '/',
    maxAge: 0,
  })
  return response
}

```

## 📄 src/app/api/chat/route.js
*Lines: 18, Size: 723 Bytes*

```javascript
// apps/client/src/app/api/chat/route.js (Refactored)
import { processChatRequest } from '@headlines/ai-services/next'

// This API route is now a lightweight wrapper.
// All heavy logic is correctly encapsulated in the @headlines/ai-services package.
export async function POST(req) {
  try {
    const { messages } = await req.json()
    // Delegate all complex logic to the shared service.
    const response = await processChatRequest(messages)
    return Response.json(response)
  } catch (error) {
    console.error('[CHAT API Top-Level Error]', error)
    const errorMessage = 'An error occurred while processing your request.'
    return new Response(JSON.stringify({ error: errorMessage }), { status: 500 })
  }
}

```

## 📄 src/app/api/chat/title/route.js
*Lines: 26, Size: 803 Bytes*

```javascript
// apps/client/src/app/api/chat/title/route.js
import { NextResponse } from 'next/server'
import { generateChatTitle } from '@headlines/data-access/server' // Use the server entry point
import { verifySession } from '@shared/auth'

export async function POST(request) {
  const { user, error } = await verifySession()
  if (!user) {
    return NextResponse.json(
      { error: error || 'Authentication required' },
      { status: 401 }
    )
  }

  try {
    const { messages } = await request.json()
    const result = await generateChatTitle(messages)
    if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: 400 })
    }
    return NextResponse.json(result)
  } catch (e) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

```

## 📄 src/app/api/opportunities/route.js
*Lines: 32, Size: 1.17 KB*

```javascript
import { NextResponse } from 'next/server'
import { getOpportunities, getTotalOpportunitiesCount } from '@headlines/data-access'
import { createClientApiHandler } from '@/lib/api-handler' // Use the new client handler

const handleGet = async (request, { user }) => {
  const { searchParams } = new URL(request.url)
  const page = parseInt(searchParams.get('page') || '1', 10)
  const sort = searchParams.get('sort') || 'date_desc'
  const filters = {
    q: searchParams.get('q') || '',
    country: searchParams.get('country') || '',
    withEmail: searchParams.get('withEmail') === 'true',
    favoritesOnly: searchParams.get('favorites') === 'true',
  }

  const [oppsResult, totalResult] = await Promise.all([
    getOpportunities({ page, filters, sort, userId: user.userId }),
    getTotalOpportunitiesCount({ filters, userId: user.userId }),
  ])

  if (!oppsResult.success || !totalResult.success) {
    throw new Error(
      oppsResult.error || totalResult.error || 'Failed to fetch opportunity data'
    )
  }

  return NextResponse.json({ data: oppsResult.data, total: totalResult.total })
}

export const GET = createClientApiHandler(handleGet)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api/upload-article/route.js
*Lines: 25, Size: 815 Bytes*

```javascript
'use server'

import { NextResponse } from 'next/server'
import { processUploadedArticle } from '@headlines/data-access'
import { createClientApiHandler } from '@/lib/api-handler' // Use the new client handler

const handlePost = async (request, { user }) => {
  const { item } = await request.json()
  if (!item || !item.headline || !item.article) {
    return NextResponse.json({ error: 'Invalid item structure.' }, { status: 400 })
  }

  // The userId is automatically passed via the user object from the handler
  const result = await processUploadedArticle(item, user.userId)

  if (!result.success) {
    // Let the handler manage the 500 error
    throw new Error(result.error || 'Failed to process article')
  }

  return NextResponse.json(result)
}

export const POST = createClientApiHandler(handlePost)

```

## 📄 src/app/api/user/interactions/route.js
*Lines: 23, Size: 697 Bytes*

```javascript
import { NextResponse } from 'next/server'
import { updateUserInteraction } from '@headlines/data-access'
import { createClientApiHandler } from '@/lib/api-handler' // Use the new client handler

const handlePost = async (request, { user }) => {
  const { itemId, itemType, action } = await request.json()
  const result = await updateUserInteraction({
    userId: user.userId,
    itemId,
    itemType,
    action,
  })

  if (!result.success) {
    // Let the handler manage the 500 error, return 400 for bad input
    return NextResponse.json({ error: result.error }, { status: 400 })
  }

  return NextResponse.json({ success: true })
}

export const POST = createClientApiHandler(handlePost)

```

## 📄 src/app/api/user/profile/route.js
*Lines: 19, Size: 579 Bytes*

```javascript
'use server'

import { NextResponse } from 'next/server'
import { updateUserProfile } from '@headlines/data-access'
import { createClientApiHandler } from '@/lib/api-handler' // Use the new client handler

const handlePatch = async (request, { user }) => {
  const updateData = await request.json()
  const result = await updateUserProfile({ userId: user.userId, updateData })

  if (!result.success) {
    return NextResponse.json({ error: result.error }, { status: 400 })
  }

  return NextResponse.json(result.user)
}

export const PATCH = createClientApiHandler(handlePatch)

```

## 📄 src/app/api/user/settings/clear-discarded/route.js
*Lines: 16, Size: 543 Bytes*

```javascript
'use server'

import { NextResponse } from 'next/server'
import { clearDiscardedItems } from '@headlines/data-access'
import { createClientApiHandler } from '@/lib/api-handler' // Use the new client handler

const handlePost = async (request, { user }) => {
  const result = await clearDiscardedItems(user.userId)
  if (!result.success) {
    return NextResponse.json({ error: result.error }, { status: 400 })
  }
  return NextResponse.json({ success: true, message: result.message })
}

export const POST = createClientApiHandler(handlePost)

```

## 📄 src/app/api-admin/actions.js
*Lines: 30, Size: 885 Bytes*

```javascript
'use server'

import dbConnect from '@headlines/data-access/dbConnect.js'
import {
  linkOpportunityToEvent,
  unlinkOpportunityFromEvent,
} from '@headlines/data-access'
import { revalidatePath } from 'next/cache'

// These actions perform the database work for the relationship API routes.
export async function linkOpportunityToEventAction(eventId, opportunityId) {
  await dbConnect()
  const result = await linkOpportunityToEvent(eventId, opportunityId)
  if (result.success) {
    revalidatePath('/admin/events')
    revalidatePath('/admin/opportunities')
  }
  return result
}

export async function unlinkOpportunityFromEventAction(eventId, opportunityId) {
  await dbConnect()
  const result = await unlinkOpportunityFromEvent(eventId, opportunityId)
  if (result.success) {
    revalidatePath('/admin/events')
    revalidatePath('/admin/opportunities')
  }
  return result
}

```

## 📄 src/app/api-admin/articles/[articleId]/route.js
*Lines: 45, Size: 1.51 KB*

```javascript
import { NextResponse } from 'next/server'
import dbConnect from '@headlines/data-access/dbConnect'
import { updateArticle, deleteArticle } from '@headlines/data-access'
import { Article } from '@headlines/models' // Import the model for GET
import { createApiHandler } from '@/lib/api-handler'
import mongoose from 'mongoose'

// We need a GET handler that is not wrapped by the default auth handler
const handleGet = async (request, { params }) => {
  await dbConnect()
  const { articleId } = params
  if (!mongoose.Types.ObjectId.isValid(articleId)) {
    return NextResponse.json({ error: 'Invalid article ID' }, { status: 400 })
  }
  const article = await Article.findById(articleId).lean()
  if (!article) {
    return NextResponse.json({ error: 'Article not found' }, { status: 404 })
  }
  return NextResponse.json(article)
}

const handlePatch = async (request, { params }) => {
  const { articleId } = params
  const updateData = await request.json()
  const result = await updateArticle(articleId, updateData)
  if (!result.success) {
    throw new Error(result.error)
  }
  return NextResponse.json(result)
}

const handleDelete = async (request, { params }) => {
  const { articleId } = params
  const result = await deleteArticle(articleId)
  if (!result.success) {
    throw new Error(result.error)
  }
  return NextResponse.json(result)
}

export const GET = handleGet // Export directly
export const PATCH = createApiHandler(handlePatch)
export const DELETE = createApiHandler(handleDelete)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api-admin/articles/route.js
*Lines: 33, Size: 1.09 KB*

```javascript
import { NextResponse } from 'next/server'
import { getArticles } from '@headlines/data-access'
import { createApiHandler } from '@/lib/api-handler'
import dbConnect from '@headlines/data-access/dbConnect.js' // Import dbConnect

const handleGet = async (request, { user }) => {
  // --- START OF THE FIX ---
  // Establish the database connection for this serverless request.
  await dbConnect()
  // --- END OF THE FIX ---

  const { searchParams } = new URL(request.url)
  const page = parseInt(searchParams.get('page') || '1', 10)
  const sort = searchParams.get('sort')
  const columnFilters = JSON.parse(searchParams.get('columnFilters') || '[]')

  const filters = columnFilters.reduce((acc, filter) => {
    if (filter.value) {
      const key = filter.id === 'headline' ? 'q' : filter.id
      acc[key] = filter.value
    }
    return acc
  }, {})

  const result = await getArticles({ page, filters, sort, userId: user.userId })
  if (!result.success) throw new Error(result.error)

  return NextResponse.json(result)
}

export const GET = createApiHandler(handleGet)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api-admin/countries/route.js
*Lines: 24, Size: 852 Bytes*

```javascript
// File: apps/client/src/app/api-admin/countries/route.js (version 1.0 - New File)

import { NextResponse } from 'next/server'
import { getAllCountries } from '@headlines/data-access/next'
import { createApiHandler } from '@/lib/api-handler'

const handleGet = async (request) => {
  // This function is now guaranteed to run after the DB connection is established.
  const result = await getAllCountries()
  if (!result.success) {
    throw new Error(result.error)
  }
  // The data structure from data-access is { success: true, data: [...] }
  // useEntityManager expects { data: [...], total: X }
  // We will adapt the response to match what the client hook expects.
  return NextResponse.json({
    data: result.data,
    total: result.data.length,
  })
}

export const GET = createApiHandler(handleGet)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api-admin/events/[eventId]/route.js
*Lines: 62, Size: 2.17 KB*

```javascript
import { NextResponse } from 'next/server'
import dbConnect from '@headlines/data-access/dbConnect'
import { getEventDetails, updateEvent, deleteEvent } from '@headlines/data-access'
import { createApiHandler } from '@/lib/api-handler' // We need a more flexible admin handler
import mongoose from 'mongoose'

// A more flexible admin handler that doesn't require session for GET
async function adminApiHandler(handler, { requireAuth = true } = {}) {
  return async (request, context) => {
    try {
      await dbConnect()
      // In a real app, you'd verify admin role here from the session for PATCH/DELETE
      return await handler(request, context)
    } catch (error) {
      console.error(`[Admin API Handler Error]`, error)
      return NextResponse.json(
        { error: 'Internal Server Error', details: error.message },
        { status: 500 }
      )
    }
  }
}

const handleGet = async (request, { params }) => {
  const { eventId } = params
  const result = await getEventDetails(eventId)
  if (!result.success) {
    return NextResponse.json({ error: result.error }, { status: 404 })
  }
  return NextResponse.json(result.data)
}

const handlePatch = async (request, { params }) => {
  const { eventId } = params
  if (!mongoose.Types.ObjectId.isValid(eventId)) {
    return NextResponse.json({ error: 'Invalid event ID' }, { status: 400 })
  }
  const updateData = await request.json()
  const result = await updateEvent(eventId, updateData)
  if (!result.success) {
    return NextResponse.json({ error: result.error }, { status: 400 })
  }
  return NextResponse.json(result)
}

const handleDelete = async (request, { params }) => {
  const { eventId } = params
  if (!mongoose.Types.ObjectId.isValid(eventId)) {
    return NextResponse.json({ error: 'Invalid event ID' }, { status: 400 })
  }
  const result = await deleteEvent(eventId)
  if (!result.success) {
    return NextResponse.json({ error: result.error }, { status: 400 })
  }
  return NextResponse.json({ success: true })
}

export const GET = adminApiHandler(handleGet, { requireAuth: false })
export const PATCH = adminApiHandler(handlePatch)
export const DELETE = adminApiHandler(handleDelete)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api-admin/events/route.js
*Lines: 28, Size: 920 Bytes*

```javascript
import { NextResponse } from 'next/server'
import { getEvents } from '@headlines/data-access'
import { createApiHandler } from '@/lib/api-handler'

const handleGet = async (request) => {
  const { searchParams } = new URL(request.url)
  const page = parseInt(searchParams.get('page') || '1', 10)
  const sort = searchParams.get('sort')
  const columnFilters = JSON.parse(searchParams.get('columnFilters') || '[]')

  const filters = columnFilters.reduce((acc, filter) => {
    if (filter.value) {
      const key = filter.id === 'synthesized_headline' ? 'q' : filter.id
      acc[key] = filter.value
    }
    return acc
  }, {})

  // getEvents from data-access is already paginated
  const result = await getEvents({ page, filters, sort })
  if (!result.success) throw new Error(result.error)

  return NextResponse.json(result)
}

export const GET = createApiHandler(handleGet)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api-admin/opportunities/route.js
*Lines: 27, Size: 902 Bytes*

```javascript
import { NextResponse } from 'next/server'
import { getOpportunities } from '@headlines/data-access'
import { createApiHandler } from '@/lib/api-handler'

const handleGet = async (request, { user }) => {
  const { searchParams } = new URL(request.url)
  const page = parseInt(searchParams.get('page') || '1', 10)
  const sort = searchParams.get('sort')
  const columnFilters = JSON.parse(searchParams.get('columnFilters') || '[]')

  const filters = columnFilters.reduce((acc, filter) => {
    if (filter.value) {
      const key = filter.id === 'reachOutTo' ? 'q' : filter.id
      acc[key] = filter.value
    }
    return acc
  }, {})

  const result = await getOpportunities({ page, filters, sort, userId: user.userId })
  if (!result.success) throw new Error(result.error)

  return NextResponse.json(result)
}

export const GET = createApiHandler(handleGet)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api-admin/relationships/link/route.js
*Lines: 18, Size: 692 Bytes*

```javascript
import { NextResponse } from 'next/server'
import { linkOpportunityToEventAction } from '../../actions' // We will create this action next

// This is a simplified handler that doesn't use the full createApiHandler
// because it calls a Server Action directly.
export async function POST(request) {
  try {
    const { eventId, opportunityId } = await request.json()
    const result = await linkOpportunityToEventAction(eventId, opportunityId)
    if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: 400 })
    }
    return NextResponse.json(result)
  } catch (e) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

```

## 📄 src/app/api-admin/relationships/unlink/route.js
*Lines: 16, Size: 579 Bytes*

```javascript
import { NextResponse } from 'next/server'
import { unlinkOpportunityFromEventAction } from '../../actions' // We will create this action next

export async function POST(request) {
  try {
    const { eventId, opportunityId } = await request.json()
    const result = await unlinkOpportunityFromEventAction(eventId, opportunityId)
    if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: 400 })
    }
    return NextResponse.json(result)
  } catch (e) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

```

## 📄 src/app/api-admin/subscribers/[subscriberId]/route.js
*Lines: 39, Size: 1.5 KB*

```javascript
// File: apps/client/src/app/api-admin/subscribers/[subscriberId]/route.js (version 1.0 - Unchanged)
import { NextResponse } from 'next/server'
import { updateSubscriber, deleteSubscriber } from '@headlines/data-access/next'
import mongoose from 'mongoose'
import { createApiHandler } from '@/lib/api-handler'

const handlePatch = async (request, { params }) => {
  const { subscriberId } = params
  if (!mongoose.Types.ObjectId.isValid(subscriberId)) {
    return NextResponse.json({ error: 'Invalid subscriber ID' }, { status: 400 })
  }
  const body = await request.json()
  const result = await updateSubscriber(subscriberId, body)
  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500
    return NextResponse.json({ error: result.error }, { status })
  }
  return NextResponse.json({
    message: 'Subscriber updated',
    subscriber: result.subscriber,
  })
}

const handleDelete = async (request, { params }) => {
  const { subscriberId } = params
  if (!mongoose.Types.ObjectId.isValid(subscriberId)) {
    return NextResponse.json({ error: 'Invalid subscriber ID' }, { status: 400 })
  }
  const result = await deleteSubscriber(subscriberId)
  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500
    return NextResponse.json({ error: result.error }, { status })
  }
  return NextResponse.json({ message: 'Subscriber deleted successfully' })
}

export const PATCH = createApiHandler(handlePatch)
export const DELETE = createApiHandler(handleDelete)

```

## 📄 src/app/api-admin/subscribers/route.js
*Lines: 44, Size: 1.47 KB*

```javascript
// File: apps/client/src/app/api-admin/subscribers/route.js (version 2.1 - Directive Removed)
import { NextResponse } from 'next/server'
import { getAllSubscribers, createSubscriber } from '@headlines/data-access/next'
import { createApiHandler } from '@/lib/api-handler'

// 'use server'; // <--- THIS LINE HAS BEEN REMOVED.

const handleGet = async (request) => {
  const { searchParams } = new URL(request.url)
  const page = parseInt(searchParams.get('page') || '1', 10)
  const sort = searchParams.get('sort') || 'createdAt_desc'
  const columnFilters = JSON.parse(searchParams.get('columnFilters') || '[]')

  const filters = columnFilters.reduce((acc, filter) => {
    if (filter.value) {
      const key = filter.id === 'email' ? 'q' : filter.id
      acc[key] = filter.value
    }
    return acc
  }, {})

  const result = await getAllSubscribers({ page, sort, filters })
  if (!result.success) throw new Error(result.error)

  return NextResponse.json(result)
}

const handlePost = async (request) => {
  const body = await request.json()
  const result = await createSubscriber(body)
  if (!result.success) {
    const status = result.error.includes('already exists') ? 409 : 500
    return NextResponse.json({ error: result.error }, { status })
  }
  return NextResponse.json(
    { success: true, subscriber: result.subscriber },
    { status: 201 }
  )
}

export const GET = createApiHandler(handleGet)
export const POST = createApiHandler(handlePost)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api-admin/watchlist/route.js
*Lines: 28, Size: 970 Bytes*

```javascript
import { NextResponse } from 'next/server'
import { getAllWatchlistEntities } from '@headlines/data-access'
import { createApiHandler } from '@/lib/api-handler'

const handleGet = async (request) => {
  const { searchParams } = new URL(request.url)
  const page = parseInt(searchParams.get('page') || '1', 10)
  const sort = searchParams.get('sort')
  const columnFilters = JSON.parse(searchParams.get('columnFilters') || '[]')

  const filters = columnFilters.reduce((acc, filter) => {
    if (filter.value) {
      const key = filter.id === 'name' ? 'q' : filter.id
      acc[key] = filter.value
    }
    return acc
  }, {})

  // Note: We are updating getAllWatchlistEntities to accept pagination/sort/filter params
  const result = await getAllWatchlistEntities({ page, filters, sort })
  if (!result.success) throw new Error(result.error)

  return NextResponse.json(result)
}

export const GET = createApiHandler(handleGet)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/globals.css
*Lines: 190, Size: 5.07 KB*

```css
@import url('https://fonts.googleapis.com/css2?family=Merriweather:ital,wght@0,400;0,700;1,400;1,700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 224 71.4% 4.1%;
    --foreground: 210 40% 98%;
    --card: 224 71.4% 4.1%;
    --card-foreground: 210 40% 98%;
    --popover: 224 71.4% 4.1%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 220.9 39.3% 11%;
    --secondary: 222.2 47.4% 11.2%;
    --secondary-foreground: 210 40% 98%;
    --muted: 215 27.9% 16.9%;
    --muted-foreground: 217.9 10.6% 64.9%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 85.7% 97.3%;
    --border: 215 27.9% 16.9%;
    --input: 215 27.9% 16.9%;
    --ring: 217 91% 60%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 224 71.4% 4.1%;
    --foreground: 210 40% 98%;
    --card: 224 71.4% 4.1%;
    --card-foreground: 210 40% 98%;
    --popover: 224 71.4% 4.1%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 220.9 39.3% 11%;
    --secondary: 222.2 47.4% 11.2%;
    --secondary-foreground: 210 40% 98%;
    --muted: 215 27.9% 16.9%;
    --muted-foreground: 217.9 10.6% 64.9%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 85.7% 97.3%;
    --border: 215 27.9% 16.9%;
    --input: 215 27.9% 16.9%;
    --ring: 217 91% 60%;
  }

  * {
    border-color: hsl(var(--border));
  }

  body {
    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
    background-image:
      radial-gradient(at 27% 37%, hsla(215, 98%, 43%, 0.15) 0px, transparent 50%),
      radial-gradient(at 97% 21%, hsla(217, 91%, 60%, 0.1) 0px, transparent 50%),
      radial-gradient(at 52% 99%, hsla(355, 98%, 51%, 0.1) 0px, transparent 50%);
  }

  /* Professional Table Styling for Chat */
  .prose {
    --tw-prose-body: theme(colors.slate[300]);
    --tw-prose-headings: theme(colors.slate[100]);
    --tw-prose-lead: theme(colors.slate[400]);
    --tw-prose-links: theme(colors.blue[400]);
    --tw-prose-bold: theme(colors.slate[100]);
    --tw-prose-counters: theme(colors.slate[400]);
    --tw-prose-bullets: theme(colors.slate[600]);
    --tw-prose-hr: theme(colors.slate[700]);
    --tw-prose-quotes: theme(colors.slate[200]);
    --tw-prose-quote-borders: theme(colors.slate[700]);
    --tw-prose-captions: theme(colors.slate[400]);
    --tw-prose-code: theme(colors.slate[100]);
    --tw-prose-pre-code: theme(colors.slate[300]);
    --tw-prose-pre-bg: theme(colors.slate[900]);
    --tw-prose-th-borders: theme(colors.slate[600]);
    --tw-prose-td-borders: theme(colors.slate[700]);
  }

  .prose table {
    @apply text-sm;
  }
  .prose th {
    @apply text-slate-200 text-left px-3 py-2;
  }
  .prose td {
    @apply px-3 py-2 align-top;
  }
}

/* --- Premier Scrollbar Styling --- */
@layer utilities {
  .custom-scrollbar::-webkit-scrollbar {
    height: 6px;
    width: 6px;
  }
  .custom-scrollbar::-webkit-scrollbar-track {
    background: hsl(var(--muted) / 0.5);
    border-radius: 10px;
  }
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: hsl(var(--secondary));
    border-radius: 10px;
  }
  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: hsl(var(--accent));
  }
  .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: hsl(var(--secondary)) hsl(var(--muted) / 0.5);
  }

  /* --- Source-Aware Coloring for Chat --- */
  .rag-source,
  .wiki-source {
    color: #a7f3d0;
  }
  .llm-source {
    color: #fde68a;
  }

  /* --- Golden Glowing Border for High-Relevance Cards --- */
  .card-glow {
    position: relative;
    overflow: hidden; /* Keep the glow contained */
  }
  .card-glow::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: inherit; /* Match parent's border-radius */
    border: 1px solid transparent;
    background: conic-gradient(
        from 180deg at 50% 50%,
        rgba(252, 211, 77, 0.5) 0deg,
        rgba(252, 211, 77, 0.2) 50%,
        rgba(252, 211, 77, 0.5) 360deg
      )
      border-box;
    -webkit-mask:
      linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
    z-index: 0;
    animation: glow 4s linear infinite;
  }

  /* --- Bezier Heartbeat Wobble --- */
  .impatient-wobble {
    animation: impatient-wobble 2s cubic-bezier(0.5, 0, 0.1, 1) infinite;
  }

  @keyframes glow {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* --- NEW: "pum PUM . ." Double-Beat Keyframes --- */
  @keyframes impatient-wobble {
    /* The long pause between heartbeats */
    0%,
    90%,
    100% {
      transform: scale(1) rotate(0deg);
    }
    /* The first, smaller beat ("pum") */
    73% {
      transform: scale(1.005) rotate(-0.2deg);
    }
    /* The second, larger beat ("PUM") */
    96% {
      transform: scale(1.012) rotate(0.2deg);
    }
  }
}

```

## 📄 src/app/layout.js
*Lines: 23, Size: 484 Bytes*

```javascript
// File: apps/client/src/app/layout.js (Corrected)

import './globals.css'
import { AppProviders } from './providers'
import { AppWrapper } from './_components/AppWrapper'

export const metadata = {
  title: 'Copyboard App',
  description: 'A fresh start',
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <AppProviders>
          <AppWrapper>{children}</AppWrapper>
        </AppProviders>
      </body>
    </html>
  )
}

```

## 📄 src/app/login/layout.js
*Lines: 18, Size: 512 Bytes*

```javascript
// This layout applies only to the /login page.
export default function LoginLayout({ children }) {
  return (
    <div
      className="min-h-screen flex items-center justify-center p-4"
      style={{
        backgroundColor: 'hsl(224, 71.4%, 4.1%)',
        backgroundImage: `
          radial-gradient(at 27% 37%, hsla(215, 98%, 43%, 0.1) 0px, transparent 50%),
          radial-gradient(at 97% 21%, hsla(217, 91%, 60%, 0.15) 0px, transparent 50%)
        `,
      }}
    >
      {children}
    </div>
  )
}

```

## 📄 src/app/login/page.jsx
*Lines: 122, Size: 3.57 KB*

```jsx
// Full Path: headlines/src/app/login/page.jsx
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  Input,
  Button,
  Label,
} from '@/components/shared' // CORRECTED IMPORT
import { LoadingOverlay } from '@/components/shared/LoadingOverlay'
import { cn } from '@headlines/utils-shared'

import { KeyRound, Shield, Sparkles, Mail } from 'lucide-react'
import { useAuth } from '@/lib/auth/client'

export default function LoginPage() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const { user, login, isLoading } = useAuth()
  const [isError, setIsError] = useState(false)
  const router = useRouter()

  useEffect(() => {
    if (user) {
      router.push('/events')
    }
  }, [user, router])

  const handleLogin = async (e) => {
    e.preventDefault()

    // --- ADD THIS LOG ---
    console.log(
      `[Login Page] Attempting login with Email: "${email}" | Password: "${password}"`
    )
    // --------------------

    setIsError(false)
    const loginSuccessful = await login(email, password)
    if (!loginSuccessful) {
      setIsError(true)
    }
  }

  if (user || isLoading) {
    return <LoadingOverlay isLoading={true} text="Authorizing..." />
  }

  return (
    <Card
      className={cn(
        'w-full max-w-sm',
        'bg-card/80 backdrop-blur-sm border-border',
        'shadow-2xl shadow-black/50',
        isError ? 'animate-shake' : ''
      )}
      onAnimationEnd={() => setIsError(false)}
    >
      <CardHeader className="items-center text-center space-y-2">
        <div className="relative flex items-center justify-center w-16 h-16 bg-gradient-to-br from-background to-secondary border border-border rounded-full">
          <Shield className="h-8 w-8 text-primary" />
        </div>
        <div className="space-y-1">
          <h1 className="text-2xl font-bold">Secure Access Portal</h1>
          <p className="text-muted-foreground text-sm">Authentication Required</p>
        </div>
      </CardHeader>
      <form onSubmit={handleLogin}>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="email" className="flex items-center gap-2">
              <Mail className="h-4 w-4" />
              Email Address
            </Label>
            <Input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              disabled={isLoading}
              placeholder="Enter your email..."
              className="h-12 text-base"
              required
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="password" className="flex items-center gap-2">
              <KeyRound className="h-4 w-4" />
              Password
            </Label>
            <Input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              disabled={isLoading}
              placeholder="Enter your password..."
              className="h-12 text-base"
              required
            />
          </div>
        </CardContent>
        <CardFooter>
          <Button
            type="submit"
            disabled={isLoading || !email.trim() || !password.trim()}
            className="w-full h-12 text-base font-bold"
          >
            <Shield className="mr-2 h-5 w-5" />
            Authorize Access
          </Button>
        </CardFooter>
      </form>
    </Card>
  )
}

```

## 📄 src/app/page.js
*Lines: 6, Size: 105 Bytes*

```javascript
import { redirect } from 'next/navigation'

export default function RootPage() {
  redirect('/events')
}

```

## 📄 src/app/providers.jsx
*Lines: 18, Size: 508 Bytes*

```jsx
// Full Path: headlines/src/app/providers.jsx (REVISED)
'use client'

import { useState } from 'react'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ReactQueryDevtools } from '@tanstack/react-query-devtools'

export function AppProviders({ children }) {
  const [queryClient] = useState(() => new QueryClient())

  return (
    <QueryClientProvider client={queryClient}>
      {children}
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  )
}

```

## 📄 src/components/admin/AdminHeader.jsx
*Lines: 44, Size: 1.48 KB*

```jsx
// apps/client/src/components/admin/AdminHeader.jsx (version 2.0 - Restored & Pathed)
'use client'

import Link from 'next/link'
import { Button } from '@components/shared'
import { Shield, LogOut, ArrowLeft } from 'lucide-react'
import { useAuth } from '@headlines/auth/react'

export function AdminHeader() {
  const { user, logout } = useAuth()

  return (
    <header className="bg-slate-900/50 border-b border-slate-700/50 backdrop-blur-sm sticky top-0 z-40">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-16">
          <div className="flex items-center gap-4">
            <Shield className="h-6 w-6 text-blue-400" />
            <div className="hidden sm:block">
              <h1 className="text-lg font-semibold text-slate-100">
                Admin Command Center
              </h1>
              <p className="text-xs text-slate-400">
                Logged in as {user?.email || '...'}
              </p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Button variant="ghost" asChild>
              <Link href="/events">
                <ArrowLeft className="mr-2 h-4 w-4" />
                Back to App
              </Link>
            </Button>
            <Button variant="outline" size="sm" onClick={logout}>
              <LogOut className="mr-2 h-4 w-4" />
              Logout
            </Button>
          </div>
        </div>
      </div>
    </header>
  )
}

```

## 📄 src/components/admin/AdminNavTabs.jsx
*Lines: 39, Size: 1.02 KB*

```jsx
// apps/client/src/components/admin/AdminNavTabs.jsx (version 2.0 - Restored & Pathed)
'use client'

import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { Tabs, TabsList, TabsTrigger } from '@components/shared'
import { Users, Database } from 'lucide-react'

const ADMIN_TABS = [
  { value: 'users', label: 'User Management', icon: Users, href: '/admin/users' },
  {
    value: 'sources',
    label: 'Source Management',
    icon: Database,
    href: '/admin/sources',
    disabled: false,
  },
]

export function AdminNavTabs() {
  const pathname = usePathname()
  const currentView = pathname.split('/')[2] || 'users'

  return (
    <Tabs value={currentView}>
      <TabsList>
        {ADMIN_TABS.map((tab) => (
          <TabsTrigger key={tab.value} value={tab.value} asChild disabled={tab.disabled}>
            <Link href={tab.href}>
              <tab.icon className="mr-2 h-4 w-4" />
              {tab.label}
            </Link>
          </TabsTrigger>
        ))}
      </TabsList>
    </Tabs>
  )
}

```

## 📄 src/components/admin/DesktopOnlyWrapper.jsx
*Lines: 47, Size: 1.3 KB*

```jsx
// File: apps/client/src/components/admin/DesktopOnlyWrapper.jsx

'use client'

import { useState, useEffect } from 'react'
import { Monitor, Smartphone } from 'lucide-react'

const useIsDesktop = () => {
  const [isDesktop, setIsDesktop] = useState(true)

  useEffect(() => {
    const checkScreenSize = () => {
      setIsDesktop(window.innerWidth >= 1024) // lg breakpoint in Tailwind
    }

    // Check on initial mount
    checkScreenSize()

    // Add event listener for window resize
    window.addEventListener('resize', checkScreenSize)

    // Cleanup listener on component unmount
    return () => window.removeEventListener('resize', checkScreenSize)
  }, [])

  return isDesktop
}

export function DesktopOnlyWrapper({ children }) {
  const isDesktop = useIsDesktop()

  if (!isDesktop) {
    return (
      <div className="flex flex-col items-center justify-center h-screen bg-background text-foreground text-center p-4">
        <Monitor className="h-16 w-16 mb-4 text-primary" />
        <h1 className="text-2xl font-bold">Admin Panel is Desktop-Only</h1>
        <p className="mt-2 text-muted-foreground max-w-sm">
          For the best experience and full functionality, please access the admin command
          center on a larger screen.
        </p>
      </div>
    )
  }

  return <>{children}</>
}

```

## 📄 src/components/admin/RelationshipManager.jsx
*Lines: 116, Size: 3.56 KB*

```jsx
// apps/admin/src/app/_components/relationships/RelationshipManager.jsx (version 2.0.0)
'use client'

import { useState } from 'react'
import {
  Button,
  Input,
  Label,
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from '../shared/elements'
import { toast } from 'sonner'
import { Link, Unlink, Plus, Loader2 } from 'lucide-react'
import {
  linkOpportunityToEventClient,
  unlinkOpportunityFromEventClient,
} from '@/lib/api-client'

export function RelationshipManager({ item, itemType, refetch }) {
  const [newItemId, setNewItemId] = useState('')
  const [isLoading, setIsLoading] = useState(false)

  const handleAdd = async () => {
    setIsLoading(true)
    let result
    if (itemType === 'event') {
      result = await linkOpportunityToEventClient(item._id, newItemId)
    } // Add else if for 'opportunity' here for bidirectional linking

    if (result.success) {
      toast.success('Relationship added.')
      setNewItemId('')
      refetch()
    } else {
      toast.error('Failed to add relationship', { description: result.error })
    }
    setIsLoading(false)
  }

  const handleRemove = async (relatedItemId) => {
    setIsLoading(true)
    let result
    if (itemType === 'event') {
      result = await unlinkOpportunityFromEventClient(item._id, relatedItemId)
    } // Add else if for 'opportunity' here

    if (result.success) {
      toast.success('Relationship removed.')
      refetch()
    } else {
      toast.error('Failed to remove relationship', { description: result.error })
    }
    setIsLoading(false)
  }

  const relatedItems = itemType === 'event' ? item.relatedOpportunities : item.events
  const relatedItemType = itemType === 'event' ? 'Opportunity' : 'Event'

  return (
    <Card>
      <CardHeader>
        <CardTitle>Manage Relationships</CardTitle>
        <CardDescription>Link this {itemType} to related items.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <Label>Existing {relatedItemType} Links</Label>
          <div className="space-y-2 mt-2">
            {relatedItems && relatedItems.length > 0 ? (
              relatedItems.map((related) => (
                <div
                  key={related._id}
                  className="flex items-center justify-between p-2 bg-secondary rounded-md"
                >
                  <div className="font-mono text-xs">{related._id}</div>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-7 w-7 text-destructive"
                    onClick={() => handleRemove(related._id)}
                  >
                    <Unlink className="h-4 w-4" />
                  </Button>
                </div>
              ))
            ) : (
              <p className="text-sm text-muted-foreground p-2">No relationships found.</p>
            )}
          </div>
        </div>
        <div>
          <Label htmlFor="new-item-id">Link New {relatedItemType} ID</Label>
          <div className="flex items-center gap-2 mt-2">
            <Input
              id="new-item-id"
              value={newItemId}
              onChange={(e) => setNewItemId(e.target.value)}
              placeholder={`Paste ${relatedItemType} ID here...`}
            />
            <Button onClick={handleAdd} disabled={isLoading || !newItemId}>
              {isLoading ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                <Plus className="h-4 w-4" />
              )}
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}

```

## 📄 src/components/admin/article-analysis-viewer.jsx
*Lines: 45, Size: 1.44 KB*

```jsx
// src/app/_components/article-analysis-viewer.jsx (version 1.1)
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@components/shared'
import { Button } from '@components/shared'
import { Loader2 } from 'lucide-react'

export default function ArticleAnalysisViewer({ article, open, onOpenChange }) {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl h-[80vh] flex flex-col">
        <DialogHeader>
          <DialogTitle>Analyze Article Content</DialogTitle>
          <DialogDescription className="truncate">
            Target URL:{' '}
            <a href={article?.link} target="_blank" className="underline">
              {article?.link}
            </a>
          </DialogDescription>
        </DialogHeader>

        <div className="flex-grow flex flex-col items-center justify-center text-muted-foreground space-y-4">
          <Loader2 className="w-12 h-12 animate-spin gemini-text" />
          <p className="font-semibold">Feature Coming Soon</p>
          <p className="text-sm text-center">
            This module will allow you to test and find the perfect selector for
            extracting article content.
          </p>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/components/admin/main-nav.jsx
*Lines: 113, Size: 3.49 KB*

```jsx
// File: apps/client/src/components/admin/main-nav.jsx (Full file with both fixes)

'use client'

import Link from 'next/link'
import { usePathname } from 'next/navigation'
import React from 'react'
import {
  BotMessageSquare,
  Newspaper,
  Users,
  Rss,
  Gauge,
  Settings,
  Globe,
  Zap,
  Target,
  FileText,
  Code,
  ArrowLeftCircle,
} from 'lucide-react'
import { cn } from '@headlines/utils-shared'
import { Separator } from '@/components/shared'
import { ThemeToggle } from './theme-toggle'

const navSections = [
  {
    items: [
      { name: 'Dashboard', href: '/admin/dashboard', icon: Gauge },
      { name: 'Scraper IDE', href: '/admin/scraper-ide', icon: Code },
      { name: 'Users', href: '/admin/users', icon: Users },
      { name: 'Watchlist', href: '/admin/watchlist', icon: Rss },
    ],
  },
  {
    items: [
      { name: 'Events', href: '/admin/events', icon: Zap },
      { name: 'Articles', href: '/admin/articles', icon: FileText },
      { name: 'Opportunities', href: '/admin/opportunities', icon: Target },
    ],
  },
  {
    items: [
      { name: 'Countries', href: '/admin/countries', icon: Globe },
      { name: 'Settings', href: '/admin/settings', icon: Settings },
    ],
  },
]

export default function MainNav() {
  const pathname = usePathname()

  // --- START: CORRECTED ACTIVE STATE LOGIC ---
  const isCurrent = (href) => {
    // Use an exact match for the dashboard link.
    if (href === '/admin/dashboard') {
      return pathname === '/admin/dashboard'
    }
    // For all other links, use startsWith to handle nested pages.
    return pathname.startsWith(href)
  }
  // --- END: CORRECTED ACTIVE STATE LOGIC ---

  return (
    <nav className="hidden lg:flex w-[280px] bg-card border-r flex-col flex-shrink-0">
      <div className="p-4 border-b h-16 flex items-center gap-3">
        <BotMessageSquare className="w-8 h-8 text-primary flex-shrink-0" />
        <div>
          <h1 className="text-xl font-bold tracking-tighter">Headlines Admin</h1>
          <p className="text-sm text-muted-foreground">Command Center</p>
        </div>
      </div>
      <div className="flex-1 overflow-y-auto p-4">
        {navSections.map((section, index) => (
          <React.Fragment key={index}>
            <ul className="space-y-1">
              {section.items.map((item) => (
                <li key={item.name}>
                  <Link
                    href={item.href}
                    className={cn(
                      'flex items-center gap-3 px-3 py-2.5 text-sm font-medium rounded-md transition-colors',
                      isCurrent(item.href)
                        ? 'bg-primary/10 text-primary'
                        : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'
                    )}
                  >
                    <item.icon className="w-5 h-5" />
                    {item.name}
                  </Link>
                </li>
              ))}
            </ul>
            {index < navSections.length - 1 && <Separator className="my-4" />}
          </React.Fragment>
        ))}
      </div>
      <div className="p-4 border-t mt-auto space-y-2">
        <Link
          href="/events"
          className={cn(
            'flex items-center gap-3 px-3 py-2.5 text-sm font-medium rounded-md transition-colors text-muted-foreground hover:bg-accent hover:text-accent-foreground'
          )}
        >
          <ArrowLeftCircle className="w-5 h-5" />
          Back to Client App
        </Link>
        <ThemeToggle />
      </div>
    </nav>
  )
}

```

## 📄 src/components/admin/multi-select.jsx
*Lines: 62, Size: 1.86 KB*

```jsx
// File: apps/client/src/components/admin/multi-select.jsx (version 1.0 - New File)
'use client'

import * as React from 'react'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  Button,
  Checkbox,
  ScrollArea,
} from '@/components/shared'
import { ChevronsUpDown } from 'lucide-react'

export function MultiSelect({ options, selected, onChange, placeholder = 'Select...' }) {
  const handleSelect = (option) => {
    const newSelected = selected.includes(option)
      ? selected.filter((item) => item !== option)
      : [...selected, option]
    onChange(newSelected)
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="outline"
          className="w-full justify-between font-normal bg-black/20 border-white/10"
        >
          <span className="truncate">
            {selected.length > 0 ? selected.join(', ') : placeholder}
          </span>
          <ChevronsUpDown className="h-4 w-4 opacity-50" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-[--radix-dropdown-menu-trigger-width] p-0">
        <ScrollArea className="h-72">
          <div className="p-1">
            {options.map((option) => (
              <DropdownMenuItem
                key={option}
                onSelect={(e) => e.preventDefault()}
                className="flex items-center gap-2"
              >
                <Checkbox
                  id={`select-${option}`}
                  checked={selected.includes(option)}
                  onCheckedChange={() => handleSelect(option)}
                />
                <label htmlFor={`select-${option}`} className="w-full">
                  {option}
                </label>
              </DropdownMenuItem>
            ))}
          </div>
        </ScrollArea>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

```

## 📄 src/components/admin/source-list.jsx
*Lines: 211, Size: 6.74 KB*

```jsx
// apps/admin/src/app/_components/source-list.jsx (version 3.0.0)
'use client'

import { useState, useMemo } from 'react'
import {
  Button,
  Input,
  ScrollArea,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  Badge,
} from '@shared/ui'
import {
  PlusCircle,
  DatabaseZap,
  ServerCrash,
  Newspaper,
  ShieldAlert,
  Loader2,
  Ban,
  ExternalLink,
} from 'lucide-react'
import { cn } from '@headlines/utils-shared'

function DynamicStatus({ source, status }) {
  if (status?.checking) {
    return <Loader2 className="w-4 h-4 text-muted-foreground animate-spin" />
  }
  if (status && typeof status.count === 'number') {
    if (status.count > 0) {
      return (
        <Badge
          variant="secondary"
          className="bg-green-500/20 text-green-400 border-green-500/30"
        >
          {status.count}
        </Badge>
      )
    }
    return <Badge variant="destructive">{status.count}</Badge>
  }
  return <SourceStatusIndicator source={source} />
}

function SourceStatusIndicator({ source }) {
  let status = 'healthy'
  let title = 'Healthy'

  if (source.status === 'paused') {
    status = 'paused'
    title = 'Paused'
  } else if (source.status === 'under_review') {
    status = 'under_review'
    title = 'Under Review'
  } else if (
    source.analytics?.totalRuns > 0 &&
    source.analytics?.lastRunHeadlineCount === 0
  ) {
    status = 'failed'
    title = 'Failing: Last run found 0 headlines.'
  }

  const color = {
    paused: 'bg-gray-500',
    under_review: 'bg-yellow-500',
    failed: 'bg-red-500',
    healthy: 'bg-green-500',
  }[status]

  return (
    <div
      className={cn('w-2 h-2 rounded-full flex-shrink-0 transition-colors', color)}
      title={title}
    />
  )
}

export default function SourceList({
  sources,
  isLoading,
  selectedSourceId,
  onSelectSource,
  onAddSource,
  onCheckFiltered,
  onStopCheck,
  isCheckingAll,
  liveStatuses,
  countries,
}) {
  const [searchTerm, setSearchTerm] = useState('')
  const [countryFilter, setCountryFilter] = useState('all')

  const filteredSources = useMemo(() => {
    if (!sources) return []
    return sources
      .filter((source) => countryFilter === 'all' || source.country === countryFilter)
      .filter((source) => source.name.toLowerCase().includes(searchTerm.toLowerCase()))
  }, [sources, searchTerm, countryFilter])

  return (
    <aside className="w-[350px] bg-black/20 border-r border-white/10 flex flex-col flex-shrink-0">
      <div className="p-4 border-b border-white/10 space-y-2 h-[100px] flex flex-col justify-center">
        <div className="flex items-center gap-3">
          <Newspaper className="w-8 h-8 gemini-text flex-shrink-0" />
          <div>
            <h1 className="text-xl font-bold tracking-tighter">Source IDE</h1>
            <p className="text-sm text-muted-foreground">
              {sources ? `${sources.length} sources` : 'Loading...'}
            </p>
          </div>
        </div>
      </div>
      <div className="p-4 space-y-3">
        <Button
          className="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold"
          onClick={onAddSource}
        >
          <PlusCircle className="mr-2 h-4 w-4" /> Add New Source
        </Button>
        {isCheckingAll ? (
          <Button variant="destructive" className="w-full" onClick={onStopCheck}>
            <Ban className="mr-2 h-4 w-4" /> Stop Checking
          </Button>
        ) : (
          <Button
            variant="outline"
            className="w-full"
            onClick={() => onCheckFiltered(filteredSources)}
          >
            <ShieldAlert className="mr-2 h-4 w-4" /> Check Filtered
          </Button>
        )}
        <div className="flex gap-2 justify-between">
          <Input
            placeholder="Search..."
            className="bg-background/50 placeholder:text-muted-foreground flex-1"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <Select value={countryFilter} onValueChange={setCountryFilter}>
            <SelectTrigger className="bg-background/50 flex-1">
              <SelectValue placeholder="All Countries" />
            </SelectTrigger>
            <SelectContent>
              {countries.map((c) => (
                <SelectItem key={c} value={c}>
                  {c === 'all' ? 'All Countries' : c}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>
      <div className="flex-grow min-h-0">
        <ScrollArea className="h-full">
          <div className="p-2 space-y-1">
            {isLoading ? (
              <div className="text-center text-sm text-muted-foreground py-10 animate-pulse">
                Loading Sources...
              </div>
            ) : !sources ? (
              <div className="p-4 flex flex-col items-center justify-center h-full text-muted-foreground">
                <ServerCrash className="w-10 h-10 mb-4" />
                <h3 className="font-semibold">Failed to load sources</h3>
              </div>
            ) : filteredSources.length > 0 ? (
              filteredSources.map((source) => (
                <div key={source._id} className="flex items-center gap-1">
                  <Button
                    variant={selectedSourceId === source._id ? 'secondary' : 'ghost'}
                    className="w-full justify-start items-center gap-3 h-10 text-base"
                    onClick={() => onSelectSource(source._id)}
                  >
                    <div className="w-8 h-4 flex items-center justify-center">
                      <DynamicStatus source={source} status={liveStatuses[source._id]} />
                    </div>
                    <span className="flex-grow text-left truncate">{source.name}</span>
                    <span className="text-xs text-muted-foreground flex-shrink-0">
                      {source.country}
                    </span>
                  </Button>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-10 w-10 flex-shrink-0 text-muted-foreground hover:text-foreground"
                    onClick={(e) => {
                      e.stopPropagation()
                      window.open(source.sectionUrl, '_blank')
                    }}
                    aria-label="Open source URL in new tab"
                  >
                    <ExternalLink className="w-4 h-4" />
                  </Button>
                </div>
              ))
            ) : (
              <div className="text-center text-sm text-muted-foreground py-10">
                <DatabaseZap className="mx-auto h-8 w-8 mb-2" />
                <p>No sources match filters.</p>
              </div>
            )}
          </div>
        </ScrollArea>
      </div>
    </aside>
  )
}

```

## 📄 src/components/admin/test-results-viewer.jsx
*Lines: 75, Size: 2.61 KB*

```jsx
// apps/admin/src/app/_components/test-results-viewer.jsx (version 2.0.0)
'use client'

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  ScrollArea,
  Button,
} from '@components/shared'
import { ExternalLink, XCircle } from 'lucide-react'

export default function TestResultsViewer({ results, open, onOpenChange }) {
  const hasResults = results && results.count > 0

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl h-[80vh] flex flex-col">
        <DialogHeader>
          <DialogTitle>Scrape Test Results</DialogTitle>
          <DialogDescription>
            Found {results?.count ?? 0} headlines using the provided configuration.
          </DialogDescription>
        </DialogHeader>
        <div className="flex-grow overflow-hidden">
          <ScrollArea className="h-full pr-4">
            {hasResults ? (
              <ul className="space-y-3">
                {results.headlines.map((item, index) => (
                  <li
                    key={index}
                    className="p-3 bg-secondary/50 rounded-md flex items-center justify-between gap-4"
                  >
                    <div className="flex-grow">
                      <p className="font-medium">{item.headline}</p>
                      <a
                        href={item.link}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-xs text-muted-foreground hover:text-foreground transition-colors flex items-center gap-1"
                      >
                        <ExternalLink className="w-3 h-3" />
                        {item.link}
                      </a>
                    </div>
                  </li>
                ))}
              </ul>
            ) : (
              <div className="flex flex-col items-center justify-center h-full text-muted-foreground">
                <XCircle className="w-12 h-12 mb-4 text-destructive" />
                <p className="font-semibold">No Headlines Found</p>
                <p className="text-sm">
                  Check your selectors or the source website's structure.
                </p>
                {results?.error && (
                  <p className="text-xs mt-4 max-w-md text-center">
                    Error: {results.details}
                  </p>
                )}
              </div>
            )}
          </ScrollArea>
        </div>
        <DialogFooter>
          <Button onClick={() => onOpenChange(false)}>Close</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/components/admin/theme-provider.jsx
*Lines: 10, Size: 309 Bytes*

```jsx
// apps/admin/src/app/_components/theme-provider.jsx (version 1.0)
'use client'

import * as React from 'react'
import { ThemeProvider as NextThemesProvider } from 'next-themes'

export function ThemeProvider({ children, ...props }) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

```

## 📄 src/components/admin/theme-toggle.jsx
*Lines: 35, Size: 1.18 KB*

```jsx
// Full Path: headlines/src/components/admin/theme-toggle.jsx
'use client'

import * as React from 'react'
import { Moon, Sun } from 'lucide-react'
import { useTheme } from 'next-themes'
import {
  Button,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/shared' // CORRECTED IMPORT

export function ThemeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme('light')}>Light</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('dark')}>Dark</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('system')}>System</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

```

## 📄 src/components/client/AnimatedList.jsx
*Lines: 51, Size: 975 Bytes*

```jsx
// src/components/AnimatedList.jsx (version 1.0)
'use client'

import { motion } from 'framer-motion'

// Animation variants for the container (list)
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.08, // Time delay between each child animating in
      delayChildren: 0.1,
    },
  },
}

// Animation variants for each item in the list
export const itemVariants = {
  hidden: { y: 20, opacity: 0 },
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      type: 'spring',
      stiffness: 100,
      damping: 12,
    },
  },
  exit: {
    opacity: 0,
    height: 0,
    marginBottom: 0,
    transition: { duration: 0.3 },
  },
}

export function AnimatedList({ children, className }) {
  return (
    <motion.div
      className={className}
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      exit="hidden"
    >
      {children}
    </motion.div>
  )
}

```

## 📄 src/components/client/ArticleCard.jsx
*Lines: 202, Size: 7.78 KB*

```jsx
// File: apps/client/src/components/client/ArticleCard.jsx

'use client'

import { useState, useTransition } from 'react'
import {
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
  Badge,
  Button,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
  ConfirmationDialog,
} from '@/components/shared' // <-- CORRECT IMPORT
import { Trash2, ExternalLink, Users, Mail, Building, Briefcase } from 'lucide-react'
import { getCountryFlag } from '@headlines/utils-shared/next'
import { SwipeToDelete } from '../swipe/SwipeToDelete'
import useAppStore from '@/lib/store/use-app-store'
import { cn } from '@headlines/utils-shared'

const getRelevanceBadgeClass = (score) => {
  if (score >= 90)
    return 'bg-red-500/20 text-red-300 border border-red-500/30 shadow-lg shadow-red-500/10'
  if (score >= 75)
    return 'bg-blue-500/20 text-blue-300 border border-blue-500/30 shadow-lg shadow-blue-500/10'
  return 'bg-slate-500/20 text-slate-300 border border-slate-500/30'
}

export const ArticleCard = ({ article, onDelete }) => {
  const [isPending, startTransition] = useTransition()
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const skipConfirmation = useAppStore(
    (state) => state.deletePreferences.skipArticleConfirmation
  )

  const handleDelete = () => {
    startTransition(() => {
      onDelete()
    })
  }

  const handleDeleteClick = (e) => {
    e.stopPropagation()
    if (skipConfirmation) {
      handleDelete()
    } else {
      setIsDialogOpen(true)
    }
  }

  const flag = getCountryFlag(article.country)
  const relevanceScore = article.relevance_article || article.relevance_headline

  return (
    <div className="relative w-full">
      <AccordionItem
        value={article._id}
        className="border-none overflow-hidden rounded-xl"
      >
        <SwipeToDelete onDelete={handleDelete}>
          <div
            className={cn(
              'p-4 relative z-10 bg-cover bg-center',
              article.imageUrl && 'min-h-[150px] flex flex-col justify-end'
            )}
            style={
              article.imageUrl ? { backgroundImage: `url(${article.imageUrl})` } : {}
            }
          >
            {article.imageUrl && (
              <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/50 to-transparent z-0" />
            )}
            <div className="relative z-10">
              <TooltipProvider delayDuration={100}>
                <div className="flex items-center justify-between gap-2 mb-2">
                  <div className="flex items-center gap-2 min-w-0">
                    <Badge
                      className={`text-sm font-bold px-2.5 py-1 ${getRelevanceBadgeClass(
                        relevanceScore
                      )}`}
                    >
                      {relevanceScore}
                    </Badge>
                    <span className="text-lg hidden sm:inline">{flag}</span>
                    <p className="text-xs sm:text-sm text-slate-300 truncate shadow-black drop-shadow-lg">
                      {article.newspaper}
                    </p>
                  </div>
                  <div className="flex items-center flex-shrink-0">
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={(e) => {
                            e.stopPropagation()
                            window.open(article.link, '_blank')
                          }}
                          className="text-slate-300 hover:text-blue-400 bg-black/20 hover:bg-blue-500/20 h-8 w-8"
                        >
                          <ExternalLink className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>Open in new tab</TooltipContent>
                    </Tooltip>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          disabled={isPending}
                          onClick={handleDeleteClick}
                          className="text-slate-300 hover:text-red-400 bg-black/20 hover:bg-red-500/20 h-8 w-8"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>Delete article</TooltipContent>
                    </Tooltip>
                  </div>
                </div>

                <AccordionTrigger className="p-0 hover:no-underline text-left">
                  <div className="flex-grow min-w-0">
                    <p className="font-serif font-bold text-base sm:text-lg text-white line-clamp-3 shadow-black drop-shadow-lg">
                      <span className="text-lg sm:hidden mr-2">{flag}</span>
                      {article.headline_en || `(en N/S): ${article.headline}`}
                    </p>
                  </div>
                </AccordionTrigger>
              </TooltipProvider>
            </div>
          </div>
        </SwipeToDelete>
        <AccordionContent className="p-4 pt-0">
          <div className="border-t border-slate-700/50 pt-4 mt-2 space-y-4">
            {article.assessment_article && (
              <div>
                <h4 className="font-semibold text-sm text-slate-300 mb-1">
                  Intelligence Analysis
                </h4>
                <p className="text-sm text-slate-400 italic break-words">
                  "{article.assessment_article}"
                </p>
              </div>
            )}
            {article.key_individuals && article.key_individuals.length > 0 && (
              <div>
                <h4 className="font-semibold text-sm text-slate-300 mb-2 border-b border-slate-700 pb-1">
                  Key Individuals
                </h4>
                <div className="space-y-3 mt-2">
                  {article.key_individuals.map((person, index) => (
                    <div key={index} className="p-3 rounded-md bg-slate-800/50">
                      <p className="font-bold text-slate-100 flex items-center gap-2">
                        <Users className="h-4 w-4 text-slate-400" /> {person.name}
                      </p>
                      <div className="pl-6 space-y-1 mt-1 text-sm text-slate-400">
                        {person.role_in_event && (
                          <p className="flex items-center gap-2">
                            <Briefcase className="h-3 w-3" /> {person.role_in_event}
                          </p>
                        )}
                        {person.company && (
                          <p className="flex items-center gap-2">
                            <Building className="h-3 w-3" /> {person.company}
                          </p>
                        )}
                        {person.email_suggestion && (
                          <a
                            href={`mailto:${person.email_suggestion}`}
                            className="flex items-center gap-2 text-blue-400 hover:underline"
                          >
                            <Mail className="h-3 w-3" /> {person.email_suggestion}
                          </a>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </AccordionContent>
      </AccordionItem>

      <ConfirmationDialog
        open={isDialogOpen}
        onOpenChange={setIsDialogOpen}
        onConfirm={handleDelete}
        isPending={isPending}
        itemType="article"
        itemDescription={article.headline_en || article.headline}
        preferenceKey="skipArticleConfirmation"
      />
    </div>
  )
}

```

## 📄 src/components/client/ArticleListWrapper.jsx
*Lines: 42, Size: 1.44 KB*

```jsx
// File: apps/client/src/components/client/ArticleListWrapper.jsx

'use client'

import { Accordion } from '@/components/shared'
import { ArticleCard } from './ArticleCard'
import { AnimatePresence, motion } from 'framer-motion'
import { AnimatedList, itemVariants } from './AnimatedList'
import { cn } from '@headlines/utils-shared'

export function ArticleListWrapper({ items, onDelete }) {
  return (
    <Accordion type="single" collapsible>
      <AnimatedList className="w-full space-y-2">
        <AnimatePresence>
          {items.map((article) => {
            const isHighRelevance =
              (article.relevance_article || article.relevance_headline) > 69
            return (
              <motion.div
                key={article._id}
                variants={itemVariants}
                exit={itemVariants.exit}
                layout
                whileHover={{ y: -2 }}
                whileTap={{ scale: 0.98 }}
                className={cn(
                  'rounded-xl bg-gradient-to-br from-slate-900 to-slate-800/60 shadow-lg shadow-black/40 border border-slate-700',
                  isHighRelevance && 'card-glow impatient-wobble',
                  'min-w-full sm:min-w-[480px]'
                )}
              >
                <ArticleCard article={article} onDelete={() => onDelete(article._id)} />
              </motion.div>
            )
          })}
        </AnimatePresence>
      </AnimatedList>
    </Accordion>
  )
}

```

## 📄 src/components/client/ChatManager.jsx
*Lines: 48, Size: 1.39 KB*

```jsx
// File: apps/client/src/components/client/ChatManager.jsx (Corrected and Unabridged)
'use client'

import { useEffect } from 'react'
import { ChatSidebar } from './chat/ChatSidebar'
import { ChatView } from './ChatView'
import useAppStore, { useHasHydrated } from '@/lib/store/use-app-store'
import { Loader2 } from 'lucide-react'

export function ChatManager() {
  const hasHydrated = useHasHydrated()

  const { chats, activeChatId, createChat, selectChat, init } = useAppStore()

  useEffect(() => {
    if (hasHydrated) {
      init()
    }
  }, [hasHydrated, init])

  if (!hasHydrated || !activeChatId) {
    return (
      <div className="flex items-center justify-center h-full text-slate-500">
        <Loader2 className="h-6 w-6 animate-spin mr-3" />
        <p>Initializing Chat Interface...</p>
      </div>
    )
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-[280px_1fr] h-full gap-4">
      <div className="hidden md:flex md:flex-col">
        <ChatSidebar
          chats={chats}
          activeChatId={activeChatId}
          createChat={createChat}
          selectChat={selectChat}
        />
      </div>
      {/*
        THE FIX: ChatView is now keyed to the activeChatId and receives only that ID.
        It will be responsible for fetching its own messages from the store.
      */}
      {activeChatId && <ChatView key={activeChatId} chatId={activeChatId} />}
    </div>
  )
}

```

## 📄 src/components/client/ChatView.jsx
*Lines: 157, Size: 5.23 KB*

```jsx
// File: apps/client/src/components/client/ChatView.jsx (Corrected and Unabridged)
'use client'

import { useState, useRef, useCallback, useEffect } from 'react'
import { useMutation } from '@tanstack/react-query'
import { toast } from 'sonner'
import { Card } from '@/components/shared'
import { ChatMessage } from '@/components/client/chat/ChatMessage'
import { ChatInput } from '@/components/client/chat/ChatInput'
import { ChatScrollAnchor } from '@/components/client/chat/ChatScrollAnchor'
import useAppStore from '@/lib/store/use-app-store'
import { generateChatTitle } from '@/lib/api-client'

async function postChatMessage({ messagesForApi }) {
  const sanitizedMessages = messagesForApi.map(({ role, content }) => ({ role, content }))
  const response = await fetch('/api/chat', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ messages: sanitizedMessages }),
  })
  if (!response.ok) {
    const errorData = await response.json()
    throw new Error(errorData.error || 'Failed to get a response from the server.')
  }
  return response.json()
}

export function ChatView({ chatId }) {
  const [input, setInput] = useState('')
  const inputRef = useRef(null)
  const scrollAnchorRef = useRef(null)

  // --- THE FIX: ChatView gets its own data and actions from the store ---
  const {
    updateChatTitle,
    chatContextPrompt,
    setChatContextPrompt,
    getMessagesForChat,
    setMessagesForChat,
  } = useAppStore()

  const messages = getMessagesForChat(chatId) || []
  const setMessages = (newMessages) => setMessagesForChat(chatId, newMessages)
  // -----------------------------------------------------------------------

  const { mutate: sendMessage, isPending: isThinking } = useMutation({
    mutationFn: postChatMessage,
    onMutate: async ({ userMessage }) => {
      const assistantMessageId = `asst_${Date.now()}`
      const newMessages = [
        ...messages,
        userMessage,
        { role: 'assistant', content: '', id: assistantMessageId, isThinking: true },
      ]
      setMessages(newMessages) // Update the global store directly
      return { assistantMessageId }
    },
    onSuccess: (assistantResponse, variables, context) => {
      const currentMessages = useAppStore.getState().getMessagesForChat(chatId)
      const updatedMessages = currentMessages.map((msg) =>
        msg.id === context.assistantMessageId
          ? {
              ...msg,
              content: assistantResponse.answer,
              thoughts: assistantResponse.thoughts,
              isThinking: false,
            }
          : msg
      )
      setMessages(updatedMessages)

      if (currentMessages.length === 1) {
        // Check before adding the assistant's reply
        generateChatTitle(updatedMessages).then((result) => {
          if (result.success) {
            updateChatTitle(chatId, result.title)
          }
        })
      }
    },
    onError: (error, variables, context) => {
      const currentMessages = useAppStore.getState().getMessagesForChat(chatId)
      setMessages(
        currentMessages.map((msg) =>
          msg.id === context.assistantMessageId
            ? {
                ...msg,
                content: `Error: ${error.message}`,
                isError: true,
                isThinking: false,
              }
            : msg
        )
      )
      toast.error(`An error occurred: ${error.message}`)
    },
  })

  const startMessageFlow = useCallback(
    (content) => {
      if (isThinking) return
      const userMessage = { role: 'user', content: content, id: `user_${Date.now()}` }
      const messagesForApi = [...messages, userMessage]
      sendMessage({ messagesForApi, userMessage })
    },
    [isThinking, messages, sendMessage]
  )

  const handleSubmit = (e) => {
    e.preventDefault()
    if (!input.trim()) return
    startMessageFlow(input)
    setInput('')
  }

  useEffect(() => {
    if (chatContextPrompt) {
      startMessageFlow(chatContextPrompt)
      setChatContextPrompt('')
    }
  }, [chatContextPrompt, startMessageFlow, setChatContextPrompt])

  useEffect(() => {
    if (!isThinking && inputRef.current) {
      setTimeout(() => inputRef.current.focus(), 100)
    }
  }, [isThinking])

  return (
    <div className="flex-grow flex flex-col justify-between h-full min-h-0">
      <Card className="bg-black/20 backdrop-blur-sm border border-white/10 shadow-2xl shadow-black/30 h-full flex flex-col">
        <div className="flex-grow overflow-y-auto p-4 space-y-6 custom-scrollbar">
          {messages.length === 0 && !isThinking && (
            <div className="flex flex-col items-center justify-center h-full text-slate-500">
              <p className="text-lg">Ask anything about the knowledge base.</p>
            </div>
          )}
          {messages.map((m, i) => (
            <ChatMessage key={m.id || `msg-${i}`} message={m} />
          ))}
          <ChatScrollAnchor ref={scrollAnchorRef} messages={messages} />
        </div>
        <div className="px-4 pb-4">
          <ChatInput
            inputRef={inputRef}
            input={input}
            setInput={setInput}
            handleInputChange={(e) => setInput(e.target.value)}
            handleSubmit={handleSubmit}
            isLoading={isThinking}
          />
        </div>
      </Card>
    </div>
  )
}

```

## 📄 src/components/client/CountrySubscriptionEditor.jsx
*Lines: 108, Size: 3.57 KB*

```jsx
// File: apps/client/src/components/client/CountrySubscriptionEditor.jsx

'use client'

import { useState, useMemo } from 'react'
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
  Button,
  Badge,
  Input,
} from '@/components/shared'
import { PlusCircle, X, Search } from 'lucide-react'
import { getCountryFlag } from '@headlines/utils-shared/next'

export function CountrySubscriptionEditor({
  allCountries,
  selectedCountries,
  onSelectionChange,
}) {
  const [open, setOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')

  const availableCountries = useMemo(() => {
    const filtered = allCountries.filter((c) => !selectedCountries.includes(c.name))
    if (!searchQuery) return filtered
    return filtered.filter((c) =>
      c.name.toLowerCase().includes(searchQuery.toLowerCase())
    )
  }, [allCountries, selectedCountries, searchQuery])

  const handleAddCountry = (countryName) => {
    onSelectionChange([...selectedCountries, countryName].sort())
    setSearchQuery('')
    setOpen(false)
  }

  const handleRemoveCountry = (countryName) => {
    onSelectionChange(selectedCountries.filter((c) => c !== countryName))
  }

  return (
    <div className="space-y-3">
      <div className="flex flex-wrap gap-2 p-3 border rounded-md min-h-[40px] bg-slate-900/50 border-slate-700">
        {selectedCountries.length > 0 ? (
          selectedCountries.map((country) => (
            <Badge key={country} variant="secondary" className="text-base py-1 px-3">
              <span>{getCountryFlag(country)}</span>
              <span className="ml-2">{country}</span>
              <button
                onClick={() => handleRemoveCountry(country)}
                className="ml-2 rounded-full hover:bg-white/20 p-0.5"
              >
                <X className="h-3 w-3" />
              </button>
            </Badge>
          ))
        ) : (
          <p className="text-sm text-slate-500">No countries selected.</p>
        )}
      </div>

      <Popover open={open} onOpenChange={setOpen}>
        <PopoverTrigger asChild>
          <Button variant="outline">
            <PlusCircle className="mr-2 h-4 w-4" />
            Add Country
          </Button>
        </PopoverTrigger>
        <PopoverContent className="p-0 w-[300px]" align="start">
          <div className="p-2 border-b">
            <div className="relative">
              <Search className="absolute left-2 top-1/2 -translate-y-1/2 h-4 w-4 text-slate-500" />
              <Input
                placeholder="Search country..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-8"
              />
            </div>
          </div>
          <div className="max-h-[300px] overflow-y-auto custom-scrollbar p-1">
            {availableCountries.length > 0 ? (
              availableCountries.map((country) => (
                <Button
                  key={country.name}
                  variant="ghost"
                  onClick={() => handleAddCountry(country.name)}
                  className="w-full justify-start flex items-center gap-2"
                >
                  <span>{getCountryFlag(country.name)}</span>
                  <span>{country.name}</span>
                  <span className="text-xs text-slate-500 ml-auto">
                    ({country.count})
                  </span>
                </Button>
              ))
            ) : (
              <p className="text-center text-sm text-slate-500 py-4">No results found.</p>
            )}
          </div>
        </PopoverContent>
      </Popover>
    </div>
  )
}

```

## 📄 src/components/client/DataView.jsx
*Lines: 161, Size: 5.4 KB*

```jsx
// File: apps/client/src/components/client/DataView.jsx (Unabridged and Corrected)

'use client'

import { useMemo, Suspense } from 'react'
import { useSearchParams, useRouter } from 'next/navigation'
import { useInfiniteQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { ViewHeader } from '@/components/shared/ViewHeader'
import { LoadingOverlay, SkeletonCard } from '@/components/shared'
import { EventListWrapper } from './EventListWrapper'
import { ArticleListWrapper } from './ArticleListWrapper'
import { OpportunityListWrapper } from './OpportunityListWrapper'
import { InfiniteScrollLoader } from './InfiniteScrollLoader'
import { useAuth } from '@/lib/auth/client'
import { toast } from 'sonner'
import { SearchX } from 'lucide-react'

async function fetchData({ queryKey, pageParam = 1 }) {
  const [queryKeyPrefix, params] = queryKey
  const urlParams = new URLSearchParams()
  urlParams.set('page', pageParam.toString())
  if (params.sort) urlParams.set('sort', params.sort)
  if (params.q) urlParams.set('q', params.q)
  if (params.withEmail) urlParams.set('withEmail', 'true')

  const res = await fetch(`/api/${queryKeyPrefix}?${urlParams.toString()}`)
  if (!res.ok) throw new Error('Network response was not ok')
  return res.json()
}

async function updateUserInteraction(interactionData) {
  const res = await fetch('/api/user/interactions', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(interactionData),
  })
  if (!res.ok) {
    const errorData = await res.json()
    throw new Error(errorData.error || 'Interaction failed')
  }
  return res.json()
}

const componentMap = {
  'event-list': EventListWrapper,
  'article-list': ArticleListWrapper,
  'opportunity-list': OpportunityListWrapper,
}

export function DataView({
  viewTitle,
  sortOptions,
  queryKeyPrefix,
  listComponentKey,
  initialData,
}) {
  const ListComponent = componentMap[listComponentKey]
  const router = useRouter()
  const searchParams = useSearchParams()
  const queryClient = useQueryClient()
  const { user } = useAuth()

  const q = searchParams.get('q') || ''
  const sort = searchParams.get('sort') || sortOptions[0].value
  const withEmail = searchParams.get('withEmail') === 'true'

  const memoizedSearchParams = useMemo(
    () => ({ q, sort, withEmail }),
    [q, sort, withEmail]
  )
  const listQueryKey = useMemo(
    () => [queryKeyPrefix, memoizedSearchParams],
    [queryKeyPrefix, memoizedSearchParams]
  )

  const { data, fetchNextPage, hasNextPage, isFetching } = useInfiniteQuery({
    queryKey: listQueryKey,
    queryFn: fetchData,
    getNextPageParam: (lastPage, allPages) =>
      lastPage?.data?.length > 0 ? allPages.length + 1 : undefined,
    initialPageParam: 1,
    initialData: {
      pages: [{ data: initialData || [], total: initialData?.length || 0 }],
      pageParams: [1],
    },
    enabled: !!user,
    initialDataStale: false,
  })

  const { mutate: performInteraction } = useMutation({
    mutationFn: updateUserInteraction,
    onMutate: async ({ itemId, action }) => {
      await queryClient.cancelQueries({ queryKey: listQueryKey })
      const previousData = queryClient.getQueryData(listQueryKey)

      if (action === 'discard') {
        queryClient.setQueryData(listQueryKey, (old) => {
          if (!old) return old
          const newPages = old.pages.map((page) => ({
            ...page,
            data: page.data.filter((item) => item._id !== itemId),
          }))
          return { ...old, pages: newPages }
        })
      }
      return { previousData }
    },
    onError: (err, variables, context) => {
      toast.error('Action failed. Restoring data.')
      if (context?.previousData) {
        queryClient.setQueryData(listQueryKey, context.previousData)
      }
    },
    onSuccess: (data, { action }) => {
      toast.success(`Item ${action}ed.`)
      queryClient.invalidateQueries({ queryKey: ['user', 'profile'] })
      router.refresh()
    },
  })

  const handleInteraction = (itemId, action) => {
    performInteraction({ itemId, itemType: queryKeyPrefix.slice(0, -1), action })
  }

  const items = useMemo(() => data?.pages.flatMap((page) => page.data) ?? [], [data])
  const userFavoritedIds = useMemo(
    () => new Set(user?.favoritedItems?.[queryKeyPrefix] || []),
    [user, queryKeyPrefix]
  )

  return (
    <>
      <ViewHeader title={viewTitle} sortOptions={sortOptions} searchTerm={q} />
      <Suspense fallback={<SkeletonCard />}>
        <div className="relative max-w-5xl mx-auto space-y-6">
          <LoadingOverlay isLoading={isFetching && items.length === 0} />
          {items.length > 0 ? (
            <ListComponent
              items={items}
              onDelete={(itemId) => handleInteraction(itemId, 'discard')}
              onFavoriteToggle={(itemId, isFavorited) =>
                handleInteraction(itemId, isFavorited ? 'favorite' : 'unfavorite')
              }
              userFavoritedIds={userFavoritedIds}
            />
          ) : (
            !isFetching && (
              <div className="text-center py-16 text-slate-500">
                <SearchX className="h-12 w-12 mx-auto mb-4" />
                <h3 className="text-xl font-semibold">No results found.</h3>
                <p>Try adjusting your search or filter criteria.</p>
              </div>
            )
          )}
          <InfiniteScrollLoader onLoadMore={fetchNextPage} hasMore={hasNextPage} />
        </div>
      </Suspense>
    </>
  )
}

```

## 📄 src/components/client/EventContextDialog.jsx
*Lines: 79, Size: 2.91 KB*

```jsx
// src/components/EventContextDialog.jsx (version 1.1)
'use client'

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  Badge
} from '@/components/shared/elements'
import { ExternalLink } from 'lucide-react'

const getRelevanceBadgeClass = (score) => {
  if (score >= 90) return 'bg-red-500/20 text-red-300 border border-red-500/30'
  if (score >= 75) return 'bg-blue-500/20 text-blue-300 border border-blue-500/30'
  return 'bg-slate-500/20 text-slate-300 border border-slate-500/30'
}

export function EventContextDialog({ event, open, onOpenChange }) {
  if (!event) return null

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-3xl w-[95vw] bg-slate-900 border-slate-700 p-8">
        <DialogHeader>
          <div className="flex items-center justify-between mb-2">
            <DialogTitle className="text-xl text-slate-100">
              Parent Event Context
            </DialogTitle>
            <Badge
              className={`text-base font-bold px-3 py-1 ${getRelevanceBadgeClass(event.highest_relevance_score)}`}
            >
              Score: {event.highest_relevance_score}
            </Badge>
          </div>
          <DialogDescription className="text-slate-400 text-base font-serif font-semibold">
            {event.synthesized_headline}
          </DialogDescription>
        </DialogHeader>
        <div className="space-y-6 max-h-[60vh] overflow-y-auto p-1 pr-6 custom-scrollbar">
          <div>
            <h4 className="font-semibold text-sm text-slate-300 mb-2">
              Synthesized Summary
            </h4>
            <div className="p-4 rounded-md bg-slate-800/50 border border-slate-700 text-sm text-slate-300">
              <p>{event.synthesized_summary}</p>
            </div>
          </div>
          <div>
            <h4 className="font-semibold text-sm text-slate-300 mb-2">
              Corroborating Source Articles ({event.source_articles?.length || 0})
            </h4>
            <div className="space-y-2">
              {event.source_articles?.map((article, index) => (
                <a
                  key={index}
                  href={article.link}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center justify-between gap-4 p-3 rounded-md bg-slate-800/50 hover:bg-slate-800/80 transition-colors"
                >
                  <div className="flex-grow min-w-0">
                    <p className="font-medium text-slate-200 line-clamp-1 text-sm">
                      {article.headline}
                    </p>
                    <p className="text-xs text-slate-400">{article.newspaper}</p>
                  </div>
                  <ExternalLink className="h-4 w-4 text-slate-500 flex-shrink-0" />
                </a>
              ))}
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/components/client/EventList.jsx
*Lines: 51, Size: 1.72 KB*

```jsx
// File: apps/client/src/components/client/EventList.jsx (Restored)
'use client'
import { Accordion } from '@/components/shared'
import { SynthesizedEventCard } from './SynthesizedEventCard'
import { AnimatePresence, motion } from 'framer-motion'
import { AnimatedList, itemVariants } from './AnimatedList'
import { cn } from '@headlines/utils-shared'

export const EventList = ({
  events = [],
  onDelete,
  onFavoriteToggle,
  userFavoritedIds,
}) => {
  return (
    <Accordion type="single" collapsible>
      <AnimatedList className="w-full space-y-4">
        <AnimatePresence>
          {events.map((event) => {
            const isHighRelevance = event.highest_relevance_score > 69
            const isFavorited = userFavoritedIds.has(event._id)
            return (
              <motion.div
                key={event.event_key}
                variants={itemVariants}
                exit={itemVariants.exit}
                layout
                whileHover={{ y: -2 }}
                whileTap={{ scale: 0.98 }}
                className={cn(
                  'rounded-xl bg-gradient-to-br from-slate-900 to-slate-800/60 shadow-lg shadow-black/40 border border-slate-700',
                  isHighRelevance && 'card-glow',
                  isFavorited &&
                    'bg-gradient-to-br from-yellow-900/50 to-slate-800/60 border-yellow-700/50'
                )}
              >
                <SynthesizedEventCard
                  event={event}
                  onDelete={onDelete}
                  onFavoriteToggle={onFavoriteToggle}
                  isFavorited={isFavorited}
                />
              </motion.div>
            )
          })}
        </AnimatePresence>
      </AnimatedList>
    </Accordion>
  )
}

```

## 📄 src/components/client/EventListWrapper.jsx
*Lines: 22, Size: 481 Bytes*

```jsx
// Full Path: headlines/src/components/client/EventListWrapper.jsx
'use client'

import { EventList } from './EventList'

export function EventListWrapper({
  items,
  onDelete,
  onFavoriteToggle,
  userFavoritedIds,
}) {
  return (
    <EventList
      events={items}
      // Standardize the prop name. The swipe action is a "delete" or "discard" action.
      onDelete={onDelete}
      onFavoriteToggle={onFavoriteToggle}
      userFavoritedIds={userFavoritedIds}
    />
  )
}

```

## 📄 src/components/client/GlobalCountrySelector.jsx
*Lines: 136, Size: 4.55 KB*

```jsx
// File: apps/client/src/components/client/GlobalCountrySelector.jsx (Corrected and Unabridged)

'use client'
import { useState, useMemo, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  Button,
  Input,
  Checkbox,
  ScrollArea,
} from '@/components/shared'
import { Globe, Save, Search } from 'lucide-react'
import { getCountryFlag } from '@headlines/utils-shared/next'
import { useAuth } from '@/lib/auth/client.js'
import { toast } from 'sonner'

export function GlobalCountrySelector({ allCountries }) {
  const [open, setOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const { user, updateUserPreferences } = useAuth()
  const [isSaving, setIsSaving] = useState(false)
  const [selectedInDialog, setSelectedInDialog] = useState([])
  const router = useRouter()

  useEffect(() => {
    if (open && user) {
      if (user.role === 'admin') {
        setSelectedInDialog(allCountries.map((c) => c.name))
      } else {
        setSelectedInDialog((user.countries || []).map((c) => c.name))
      }
    }
  }, [open, user, allCountries])

  const filteredCountries = useMemo(() => {
    if (!allCountries) return []
    if (!searchQuery) return allCountries
    return allCountries.filter((country) =>
      country.name.toLowerCase().includes(searchQuery.toLowerCase())
    )
  }, [allCountries, searchQuery])

  const handleSelect = (countryName) => {
    const newSelection = selectedInDialog.includes(countryName)
      ? selectedInDialog.filter((c) => c !== countryName)
      : [...selectedInDialog, countryName]
    setSelectedInDialog(newSelection.sort())
  }

  const handleSave = async () => {
    setIsSaving(true)
    const newSubscriptions = selectedInDialog.map((name) => ({ name, active: true }))
    await updateUserPreferences({ countries: newSubscriptions })
    toast.success('Country subscriptions updated.')

    router.refresh()

    setIsSaving(false)
    setOpen(false)
  }

  const renderIcon = () => {
    if (!user) return <Globe className="h-5 w-5" />
    const userCountryNames = user.countries || []
    if (userCountryNames.length === 1) {
      return <span className="text-xl">{getCountryFlag(userCountryNames[0].name)}</span>
    }
    return <Globe className="h-5 w-5" />
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="ghost" size="icon" aria-label="Select Country Filter">
          {renderIcon()}
        </Button>
      </DialogTrigger>
      <DialogContent className="p-0 max-w-2xl">
        <div className="flex flex-col h-full">
          <DialogHeader className="p-4 border-b">
            <DialogTitle>Filter by Region</DialogTitle>
            <DialogDescription>
              Select from your subscribed countries to apply a global filter.
            </DialogDescription>
          </DialogHeader>
          <div className="p-2 border-b">
            <div className="relative">
              <Search className="absolute left-2 top-1/2 -translate-y-1/2 h-4 w-4 text-slate-500" />
              <Input
                placeholder="Search country..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-8"
              />
            </div>
          </div>
          <ScrollArea className="max-h-[50vh]">
            <div className="p-2 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-1">
              {filteredCountries.map((country) => (
                <Button
                  key={country.name}
                  variant="ghost"
                  onClick={() => handleSelect(country.name)}
                  className="w-full justify-start flex items-center gap-2"
                >
                  <Checkbox
                    checked={selectedInDialog.includes(country.name)}
                    className="mr-2"
                  />
                  <span>{getCountryFlag(country.name)}</span>
                  <span>{country.name}</span>
                  <span className="text-xs text-slate-500 ml-auto">
                    ({country.count})
                  </span>
                </Button>
              ))}
            </div>
          </ScrollArea>
          <div className="p-4 border-t flex justify-end">
            <Button onClick={handleSave} disabled={isSaving}>
              <Save className="mr-2 h-4 w-4" />
              {isSaving ? 'Saving...' : 'Save and Close'}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/components/client/Header.jsx
*Lines: 98, Size: 3.4 KB*

```jsx
// File: apps/client/src/components/client/Header.jsx (Unabridged and Updated)

'use client'

import { Briefcase, LogOut, Settings, User, Shield } from 'lucide-react' // <-- Add Shield icon
import { InstallPwaButton } from './InstallPwaButton'
import { GlobalCountrySelector } from './GlobalCountrySelector'
import { useAuth } from '@/lib/auth/client.js'
import { NotificationToggles } from './NotificationToggles'
import {
  Button,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/shared'
import Link from 'next/link'

export const Header = ({
  articleCount,
  eventCount,
  opportunityCount,
  globalCountries,
}) => {
  const { user, logout } = useAuth()

  return (
    <header className="mb-4 sm:mb-6 relative">
      <div className="absolute top-2 right-2 flex items-center gap-1">
        {user && (
          <>
            {/* --- START: ADD ADMIN BUTTON --- */}
            {user.role === 'admin' && (
              <Button asChild variant="ghost" size="icon" aria-label="Admin Panel">
                <Link href="/admin/dashboard">
                  <Shield className="h-4 w-4" />
                </Link>
              </Button>
            )}
            {/* --- END: ADD ADMIN BUTTON --- */}
            <GlobalCountrySelector allCountries={globalCountries || []} />
            <NotificationToggles />
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  className="flex items-center gap-2 rounded-full"
                >
                  <User className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56 bg-secondary">
                <DropdownMenuLabel>Hi, {user.firstName}</DropdownMenuLabel>
                <DropdownMenuSeparator />
                <Link href="/settings" passHref>
                  <DropdownMenuItem>
                    <Settings className="mr-2 h-4 w-4" />
                    <span>Settings</span>
                  </DropdownMenuItem>
                </Link>
                <DropdownMenuItem onClick={logout}>
                  <LogOut className="mr-2 h-4 w-4" />
                  <span>Log out</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </>
        )}
        <InstallPwaButton />
      </div>
      <div className="flex flex-row items-center justify-center gap-x-3 sm:gap-x-4 mb-3 pt-8 sm:pt-0">
        <Briefcase size={28} className="text-blue-400 sm:size-10" />
        <h1 className="text-3xl sm:text-4xl font-extrabold tracking-tight text-slate-100 text-center sm:text-left">
          Headlines<span className="hidden sm:inline"> Intelligence</span>
        </h1>
      </div>
      <p className="text-center text-sm sm:text-base text-slate-400 max-w-3xl mx-auto">
        Analyze
        <span className="font-bold text-slate-300"> {eventCount?.toLocaleString()} </span>
        events,
        <span className="font-bold text-slate-300">
          {' '}
          {opportunityCount?.toLocaleString()}{' '}
        </span>
        opportunities, from
        <span className="font-bold text-slate-300">
          {' '}
          {articleCount?.toLocaleString()}{' '}
        </span>
        articles.
      </p>
    </header>
  )
}

```

## 📄 src/components/client/IOSInstallInstructions.jsx
*Lines: 47, Size: 1.53 KB*

```jsx
// src/components/IOSInstallInstructions.jsx (version 1.0)
'use client'

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from '../shared'
import { Share, PlusSquare } from 'lucide-react'

export function IOSInstallInstructions({ open, onOpenChange }) {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md bg-slate-900 border-slate-700">
        <DialogHeader>
          <DialogTitle>Install on your iPhone</DialogTitle>
          <DialogDescription>
            To install the app, please follow these steps:
          </DialogDescription>
        </DialogHeader>
        <div className="py-4 space-y-4 text-sm text-slate-300">
          <div className="flex items-center gap-4">
            <div className="flex-shrink-0 w-10 h-10 bg-slate-800 rounded-lg flex items-center justify-center">
              <Share className="h-5 w-5" />
            </div>
            <p>
              1. Tap the <span className="font-bold">Share</span> button in Safari's
              bottom toolbar.
            </p>
          </div>
          <div className="flex items-center gap-4">
            <div className="flex-shrink-0 w-10 h-10 bg-slate-800 rounded-lg flex items-center justify-center">
              <PlusSquare className="h-5 w-5" />
            </div>
            <p>
              2. Scroll down and tap '
              <span className="font-bold">Add to Home Screen</span>'.
            </p>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/components/client/InfiniteScrollLoader.jsx
*Lines: 26, Size: 657 Bytes*

```jsx
// File: apps/client/src/components/client/InfiniteScrollLoader.jsx
'use client'

import { useEffect } from 'react'
import { useInView } from 'react-intersection-observer'
import { Loader2 } from 'lucide-react'

export function InfiniteScrollLoader({ onLoadMore, hasMore }) {
  const { ref, inView } = useInView({
    threshold: 0,
    triggerOnce: false,
  })

  useEffect(() => {
    if (inView && hasMore) {
      onLoadMore()
    }
  }, [inView, hasMore, onLoadMore])

  return (
    <div ref={ref} className="flex justify-center items-center p-4 h-16">
      {hasMore && <Loader2 className="h-6 w-6 animate-spin text-slate-500" />}
    </div>
  )
}

```

## 📄 src/components/client/InstallPwaButton.jsx
*Lines: 112, Size: 3.08 KB*

```jsx
// src/components/InstallPwaButton.jsx (version 2.0)
'use client'

import { useState, useEffect } from 'react'
import { Download, Smartphone } from 'lucide-react'
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
  Button
} from '../shared'
import { IOSInstallInstructions } from './IOSInstallInstructions'

export function InstallPwaButton() {
  const [installPrompt, setInstallPrompt] = useState(null)
  const [isAppInstalled, setIsAppInstalled] = useState(false)
  const [isIOS, setIsIOS] = useState(false)
  const [showIOSInstructions, setShowIOSInstructions] = useState(false)

  useEffect(() => {
    // Detect iOS
    const isIOSDevice = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream
    setIsIOS(isIOSDevice)

    const handleBeforeInstallPrompt = (e) => {
      e.preventDefault()
      // This event only fires on supported browsers (e.g., Chrome on Android/Desktop)
      setInstallPrompt(e)
    }

    const checkInstallStatus = () => {
      // Standalone mode is a strong indicator of an installed PWA
      if (window.matchMedia('(display-mode: standalone)').matches) {
        setIsAppInstalled(true)
      }
    }

    checkInstallStatus()
    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt)
    window.addEventListener('appinstalled', () => {
      setIsAppInstalled(true)
      setInstallPrompt(null)
    })

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt)
    }
  }, [])

  const handleInstallClick = async () => {
    if (!installPrompt) return
    installPrompt.prompt()
    await installPrompt.userChoice
    setInstallPrompt(null)
  }

  const handleIOSClick = () => {
    setShowIOSInstructions(true)
  }

  // If the app is already installed, render nothing.
  if (isAppInstalled) {
    return null
  }

  // If on iOS, show the button that triggers the instruction modal.
  if (isIOS) {
    return (
      <>
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button variant="ghost" size="icon" onClick={handleIOSClick}>
                <Smartphone className="h-4 w-4" />
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Install on iPhone</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        <IOSInstallInstructions
          open={showIOSInstructions}
          onOpenChange={setShowIOSInstructions}
        />
      </>
    )
  }

  // If on a compatible browser and the install prompt is available, show the direct install button.
  if (installPrompt) {
    return (
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <Button variant="ghost" size="icon" onClick={handleInstallClick}>
              <Download className="h-4 w-4" />
            </Button>
          </TooltipTrigger>
          <TooltipContent>
            <p>Install App</p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    )
  }

  // Fallback for other scenarios (e.g., desktop browser without PWA support) - show nothing.
  return null
}

```

## 📄 src/components/client/MainNavTabs.jsx
*Lines: 91, Size: 3.08 KB*

```jsx
// src/components/MainNavTabs.jsx (version 2.0)
'use client'

import { useState, useEffect } from 'react'
import { usePathname } from 'next/navigation'
import Link from 'next/link'
import { motion, AnimatePresence } from 'framer-motion'
import { Button, Tabs, TabsList, TabsTrigger } from '../shared'
import { Zap, Newspaper, UploadCloud, MessageSquare, Target, ArrowUp } from 'lucide-react'

const TABS = [
  { value: 'events', label: 'Events', icon: Zap },
  { value: 'articles', label: 'Articles', icon: Newspaper },
  { value: 'opportunities', label: 'Opportunities', icon: Target },
  { value: 'upload', label: 'Upload', icon: UploadCloud },
  { value: 'chat', label: 'Chat', icon: MessageSquare },
]

export function MainNavTabs() {
  const pathname = usePathname()
  const currentView = pathname.substring(1).split('/')[0] || 'events'
  const [showScrollButton, setShowScrollButton] = useState(false)

  useEffect(() => {
    const checkScrollTop = () => {
      // Show button if user has scrolled down more than 400px
      if (window.scrollY > 400) {
        setShowScrollButton(true)
      } else {
        setShowScrollButton(false)
      }
    }

    window.addEventListener('scroll', checkScrollTop)
    return () => {
      window.removeEventListener('scroll', checkScrollTop)
    }
  }, [])

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth',
    })
  }

  return (
    <Tabs value={currentView} className="w-full">
      <div className="flex justify-center">
        <TabsList className="h-12 rounded-full bg-slate-900/60 backdrop-blur-sm border border-slate-700/80 p-2 shadow-lg transition-all duration-300">
          {TABS.map((tab) => (
            <TabsTrigger
              key={tab.value}
              value={tab.value}
              asChild
              className="px-3 sm:px-6 rounded-full data-[state=active]:bg-blue-600/80 data-[state=active]:text-white"
            >
              <Link href={`/${tab.value}`} className="flex items-center gap-2">
                <tab.icon className="h-4 w-4" />
                <span className="hidden sm:inline">{tab.label}</span>
              </Link>
            </TabsTrigger>
          ))}
          <AnimatePresence>
            {showScrollButton && (
              <motion.div
                initial={{ opacity: 0, width: 0 }}
                animate={{ opacity: 1, width: 'auto' }}
                exit={{ opacity: 0, width: 0 }}
                transition={{ duration: 0.3, ease: 'easeInOut' }}
                className="overflow-hidden flex items-center"
              >
                <div className="h-6 w-px bg-slate-700/60 mx-2" />
                <Button
                  variant="ghost"
                  size="icon"
                  className="rounded-full h-9 w-9 text-slate-400 hover:text-white hover:bg-slate-700/50"
                  onClick={scrollToTop}
                  aria-label="Scroll to top"
                >
                  <ArrowUp className="h-5 w-5" />
                </Button>
              </motion.div>
            )}
          </AnimatePresence>
        </TabsList>
      </div>
    </Tabs>
  )
}

```

## 📄 src/components/client/NotificationToggles.jsx
*Lines: 88, Size: 2.57 KB*

```jsx
// apps/client/src/components/NotificationToggles.jsx
'use client'

import { Mail, Bell, BellOff, Loader2, MailMinus } from 'lucide-react'
import {
  Button,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '../shared'
import { useAuth } from '@/lib/auth/client.js'
import { usePushManager } from '@/hooks'
import { saveSubscription } from '@/lib/api-client' // Import the save function

export function NotificationToggles() {
  const { user, updateUserPreferences } = useAuth()

  // Pass user and the save function to the hook
  const {
    isSupported: isPushSupported,
    isSubscribed: isBrowserSubscribed,
    isLoading: isPushLoading,
    subscribe: subscribeToPush,
  } = usePushManager({ user, saveSubscription })

  if (!user) return null

  const handleEmailToggle = () => {
    updateUserPreferences({ emailNotificationsEnabled: !user.emailNotificationsEnabled })
  }

  const handlePushToggle = async () => {
    const newPreference = !user.pushNotificationsEnabled
    await updateUserPreferences({ pushNotificationsEnabled: newPreference })
    if (newPreference && isPushSupported && !isBrowserSubscribed) {
      await subscribeToPush()
    }
  }

  const isPushEnabled = user.pushNotificationsEnabled && isBrowserSubscribed

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button variant="ghost" size="icon" onClick={handleEmailToggle}>
            {user.emailNotificationsEnabled ? (
              <Mail className="h-4 w-4 text-green-400" />
            ) : (
              <MailMinus className="h-4 w-4" />
            )}
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          <p>
            {user.emailNotificationsEnabled ? 'Disable' : 'Enable'} Email Notifications
          </p>
        </TooltipContent>
      </Tooltip>

      {isPushSupported && (
        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              onClick={handlePushToggle}
              disabled={isPushLoading}
            >
              {isPushLoading && <Loader2 className="h-4 w-4 animate-spin" />}
              {!isPushLoading &&
                (isPushEnabled ? (
                  <Bell className="h-4 w-4 text-green-400" />
                ) : (
                  <BellOff className="h-4 w-4" />
                ))}
            </Button>
          </TooltipTrigger>
          <TooltipContent>
            <p>{isPushEnabled ? 'Disable' : 'Enable'} Push Notifications</p>
          </TooltipContent>
        </Tooltip>
      )}
    </TooltipProvider>
  )
}

```

## 📄 src/components/client/OpportunityCard.jsx
*Lines: 188, Size: 7.01 KB*

```jsx
// File: apps/client/src/components/client/OpportunityCard.jsx

'use client'

import { useState, useTransition } from 'react'
import { Card, Button, Badge, ConfirmationDialog } from '@/components/shared'
import {
  User,
  Briefcase,
  MapPin,
  Mail,
  Zap,
  MessageSquare,
  ArrowRight,
  Trash2,
} from 'lucide-react'
import { SwipeToDelete } from '../swipe/SwipeToDelete'
import { cn, getCountryFlag } from '@headlines/utils-shared'
import { EventContextDialog } from './EventContextDialog'
import Link from 'next/link'
import useAppStore from '@/lib/store/use-app-store'

export function OpportunityCard({ opportunity, onDelete }) {
  const [isEventDialogOpen, setIsEventDialogOpen] = useState(false)
  const [isPending, startTransition] = useTransition()
  const [isConfirmOpen, setIsConfirmOpen] = useState(false)
  const skipConfirmation = useAppStore(
    (state) => state.deletePreferences.skipOpportunityConfirmation
  )

  const handleDelete = () => {
    startTransition(() => {
      onDelete(opportunity._id)
    })
  }

  const handleDeleteRequest = () => {
    if (skipConfirmation) {
      handleDelete()
    } else {
      setIsConfirmOpen(true)
    }
  }

  const sourceEvent =
    opportunity.events && opportunity.events.length > 0 ? opportunity.events[0] : null
  const { contactDetails } = opportunity
  const isPremiumOpportunity = opportunity.likelyMMDollarWealth > 49
  const reasonsToContact = Array.isArray(opportunity.whyContact)
    ? opportunity.whyContact
    : [opportunity.whyContact]
  const flag = getCountryFlag(opportunity.basedIn)

  return (
    <>
      <Card
        className={cn(
          'bg-slate-900/50 border border-slate-700 transition-all duration-300 ease-out overflow-hidden hover:border-blue-500/50 hover:bg-slate-900',
          isPending ? 'opacity-50' : 'opacity-100',
          isPremiumOpportunity && 'card-glow'
        )}
      >
        <SwipeToDelete onDelete={handleDeleteRequest}>
          <div className="p-4 space-y-3 bg-slate-900/50 relative z-10">
            <div className="flex justify-between items-start gap-3">
              <Link
                href={`/opportunities/${opportunity._id}`}
                className="block group flex-grow min-w-0"
              >
                <div className="flex justify-between items-start gap-3">
                  <div className="flex-1 space-y-1">
                    <p className="font-bold text-base text-slate-100 flex items-center gap-2">
                      <User className="h-4 w-4 text-slate-400" />
                      {opportunity.reachOutTo}
                    </p>
                    {(opportunity.city || opportunity.basedIn) && (
                      <p className="text-xs text-slate-400 flex items-center gap-2 pl-6">
                        <MapPin className="h-3 w-3" />
                        <span className="text-base mr-1">{flag}</span>
                        {opportunity.city}
                        {opportunity.city && opportunity.basedIn ? ', ' : ''}
                        {opportunity.basedIn}
                      </p>
                    )}
                  </div>
                  <div className="flex items-center gap-2">
                    {opportunity.likelyMMDollarWealth > 0 && (
                      <Badge
                        variant="outline"
                        className="border-green-500/50 text-green-300"
                      >
                        ${opportunity.likelyMMDollarWealth}M
                      </Badge>
                    )}
                    <div className="opacity-0 group-hover:opacity-100 transition-opacity">
                      <ArrowRight className="h-5 w-5 text-blue-400" />
                    </div>
                  </div>
                </div>
              </Link>
              <div className="flex-shrink-0 hidden sm:block">
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={handleDeleteRequest}
                  disabled={isPending}
                  className="h-8 w-8 text-slate-500 hover:bg-red-500/10 hover:text-red-400"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </div>
            <div className="pl-4 border-l-2 border-slate-700 space-y-3">
              <div className="text-sm text-slate-400 space-y-1">
                {contactDetails?.role && contactDetails?.company && (
                  <p className="flex items-center gap-2">
                    <Briefcase className="h-4 w-4 text-slate-500 flex-shrink-0" />
                    <span>
                      {contactDetails.role} at <strong>{contactDetails.company}</strong>
                    </span>
                  </p>
                )}
                {contactDetails?.email && (
                  <a
                    href={`mailto:${contactDetails.email}`}
                    className="flex items-center gap-2 text-blue-400 hover:underline"
                  >
                    <Mail className="h-4 w-4 text-slate-500 flex-shrink-0" />{' '}
                    {contactDetails.email}
                  </a>
                )}
              </div>
              <div className="space-y-2">
                {reasonsToContact.slice(0, 1).map((reason, index) => (
                  <div
                    key={index}
                    className="flex items-start gap-2 text-sm text-slate-300 italic"
                  >
                    <MessageSquare className="h-4 w-4 mt-0.5 text-slate-500 flex-shrink-0" />
                    <p className="line-clamp-2">“{reason}”</p>
                  </div>
                ))}
              </div>
            </div>
            {sourceEvent && (
              <div className="pt-3 mt-3 border-t border-slate-700/50">
                <Button
                  variant="ghost"
                  className="w-full h-auto text-left justify-start p-2 hover:bg-slate-800/50"
                  onClick={(e) => {
                    e.preventDefault()
                    e.stopPropagation()
                    setIsEventDialogOpen(true)
                  }}
                >
                  <Zap className="h-4 w-4 mr-3 text-blue-400 flex-shrink-0" />
                  <div className="min-w-0">
                    <p className="text-xs text-slate-400">View Parent Event:</p>
                    <p className="text-sm font-semibold text-slate-200 truncate">
                      {sourceEvent.synthesized_headline}
                    </p>
                  </div>
                </Button>
              </div>
            )}
          </div>
        </SwipeToDelete>
      </Card>
      {sourceEvent && (
        <EventContextDialog
          event={sourceEvent}
          open={isEventDialogOpen}
          onOpenChange={setIsEventDialogOpen}
        />
      )}
      <ConfirmationDialog
        open={isConfirmOpen}
        onOpenChange={setIsConfirmOpen}
        onConfirm={handleDelete}
        isPending={isPending}
        itemType="opportunity"
        itemDescription={opportunity.reachOutTo}
        preferenceKey="skipOpportunityConfirmation"
      />
    </>
  )
}

```

## 📄 src/components/client/OpportunityListWrapper.jsx
*Lines: 32, Size: 924 Bytes*

```jsx
// File: apps/client/src/components/client/OpportunityListWrapper.jsx

'use client'

import { AnimatePresence, motion } from 'framer-motion'
import { AnimatedList, itemVariants } from './AnimatedList'
import { OpportunityCard } from './OpportunityCard'
import { cn } from '@headlines/utils-shared'

export function OpportunityListWrapper({ items, onDelete }) {
  return (
    <AnimatedList className="space-y-3">
      <AnimatePresence>
        {items.map((opportunity) => (
          <motion.div
            key={opportunity._id}
            variants={itemVariants}
            exit={itemVariants.exit}
            layout
            className={cn('min-w-full sm:min-w-[480px]')}
          >
            <OpportunityCard
              opportunity={opportunity}
              onDelete={() => onDelete(opportunity._id)}
            />
          </motion.div>
        ))}
      </AnimatePresence>
    </AnimatedList>
  )
}

```

## 📄 src/components/client/SettingsForm.jsx
*Lines: 247, Size: 7.81 KB*

```jsx
// File: apps/client/src/components/client/SettingsForm.jsx (Unabridged and Corrected)

'use client'
import { useState, useEffect, useRef } from 'react'
import { useRouter } from 'next/navigation'
import { useAuth } from '@/lib/auth/client.js'
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
  Button,
  Label,
  Input,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/shared'
import { Save, Loader2, Trash2, User, Settings as SettingsIcon } from 'lucide-react'
import { toast } from 'sonner'

async function clearDiscardedItems() {
  const res = await fetch('/api/user/settings/clear-discarded', { method: 'POST' })
  if (!res.ok) {
    const errorData = await res.json()
    throw new Error(errorData.error || 'Failed to clear items')
  }
  return res.json()
}

export function SettingsForm() {
  const { user, updateUserPreferences } = useAuth()
  const router = useRouter()
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    confirmPassword: '',
  })
  const [isSaving, setIsSaving] = useState(false)
  const [isClearing, setIsClearing] = useState(false)

  const tabsListRef = useRef(null)
  const [contentWidth, setContentWidth] = useState(0)

  useEffect(() => {
    const handleResize = () => {
      if (tabsListRef.current) {
        setContentWidth(tabsListRef.current.offsetWidth)
      }
    }

    handleResize()

    window.addEventListener('resize', handleResize)
    return () => window.removeEventListener('resize', handleResize)
  }, [])

  useEffect(() => {
    if (user) {
      setFormData({
        firstName: user.firstName || '',
        lastName: user.lastName || '',
        email: user.email || '',
        password: '',
        confirmPassword: '',
      })
    }
  }, [user])

  const handleChange = (e) => {
    const { id, value } = e.target
    setFormData((prev) => ({ ...prev, [id]: value }))
  }

  const handleSaveChanges = async (e) => {
    e.preventDefault()
    if (formData.password && formData.password !== formData.confirmPassword) {
      toast.error('Passwords do not match.')
      return
    }

    setIsSaving(true)

    const updateData = {
      firstName: formData.firstName,
      lastName: formData.lastName,
    }
    if (formData.password) {
      updateData.password = formData.password
    }

    await updateUserPreferences(updateData)
    setFormData((prev) => ({ ...prev, password: '', confirmPassword: '' }))

    setIsSaving(false)
  }

  const handleClearDiscarded = async () => {
    toast.info('Clearing discarded items...')
    setIsClearing(true)
    try {
      const result = await clearDiscardedItems()
      toast.success(
        result.message || 'Discarded items cleared. Your feeds will be refreshed.'
      )
      router.refresh()
    } catch (error) {
      toast.error('Failed to clear items', { description: error.message })
    }
    setIsClearing(false)
  }

  if (!user) return null

  return (
    <div className="flex flex-col items-center">
      <Tabs
        defaultValue="profile"
        className="w-full"
        style={{ maxWidth: contentWidth > 0 ? `${contentWidth}px` : '100%' }}
      >
        <TabsList ref={tabsListRef} className="grid w-full grid-cols-2">
          <TabsTrigger value="profile">
            <User className="w-4 h-4 mr-2" />
            Profile Information
          </TabsTrigger>
          <TabsTrigger value="advanced">
            <SettingsIcon className="w-4 h-4 mr-2" />
            Advanced Settings
          </TabsTrigger>
        </TabsList>

        <TabsContent value="profile">
          <form onSubmit={handleSaveChanges}>
            <Card className="bg-slate-900/50 border-slate-700/80">
              <CardHeader>
                <CardTitle>Profile Information</CardTitle>
                <CardDescription>
                  Update your personal details and password.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="firstName">First Name</Label>
                    <Input
                      id="firstName"
                      value={formData.firstName}
                      onChange={handleChange}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="lastName">Last Name</Label>
                    <Input
                      id="lastName"
                      value={formData.lastName}
                      onChange={handleChange}
                    />
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input id="email" type="email" value={formData.email} disabled />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="password">New Password</Label>
                  <Input
                    id="password"
                    type="password"
                    placeholder="Leave blank to keep current password"
                    value={formData.password}
                    onChange={handleChange}
                  />
                </div>
                {formData.password && (
                  <div className="space-y-2">
                    <Label htmlFor="confirmPassword">Confirm New Password</Label>
                    <Input
                      id="confirmPassword"
                      type="password"
                      placeholder="Confirm your new password"
                      value={formData.confirmPassword}
                      onChange={handleChange}
                    />
                  </div>
                )}
              </CardContent>
              <CardFooter>
                <Button type="submit" disabled={isSaving}>
                  {isSaving ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <Save className="mr-2 h-4 w-4" />
                  )}
                  Save Changes
                </Button>
              </CardFooter>
            </Card>
          </form>
        </TabsContent>

        <TabsContent value="advanced">
          <Card className="bg-slate-900/50 border-slate-700/80">
            <CardHeader>
              <CardTitle>Advanced Settings</CardTitle>
              <CardDescription>
                Manage application data and other settings.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap items-center justify-between gap-4 rounded-lg border border-yellow-500/30 bg-yellow-500/10 p-4">
                <div className="flex-1 min-w-0">
                  <p className="font-semibold text-yellow-200">Reset Discarded Items</p>
                  <p className="text-sm text-yellow-300/80">
                    If you've dismissed items by swiping, this will make them visible
                    again in your feeds.
                  </p>
                </div>
                <div className="flex-shrink-0">
                  <Button
                    variant="outline"
                    onClick={handleClearDiscarded}
                    disabled={isClearing}
                    className="border-yellow-500/50 text-yellow-200 hover:bg-yellow-500/20 hover:text-yellow-100"
                  >
                    {isClearing ? (
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    ) : (
                      <Trash2 className="mr-2 h-4 w-4" />
                    )}
                    Clear Discarded
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

```

## 📄 src/components/client/SplashScreen.jsx
*Lines: 109, Size: 2.45 KB*

```jsx
// src/components/SplashScreen.jsx (version 2.0)
'use client'

import { motion } from 'framer-motion'
import { Briefcase } from 'lucide-react'

const containerVariants = {
  initial: { opacity: 1 },
  exit: {
    opacity: 0,
    transition: {
      duration: 0.5,
      ease: 'easeInOut',
    },
  },
}

const wooshContainerVariants = {
  animate: {
    transition: {
      staggerChildren: 0.15,
    },
  },
}

const wooshVariants = {
  initial: {
    scale: 0,
    opacity: 0,
    borderRadius: '50%',
  },
  animate: {
    scale: 1,
    opacity: 1,
    borderRadius: ['50%', '40%', '30%'],
    transition: {
      duration: 0.8,
      ease: [0.22, 1, 0.36, 1], // "easeOutCirc"
    },
  },
}

const textVariants = {
  initial: {
    scale: 0.8,
    opacity: 0,
  },
  animate: {
    scale: 1,
    opacity: 1,
    transition: {
      delay: 0.5,
      duration: 0.5,
      ease: 'easeOut',
    },
  },
}

export function SplashScreen() {
  const wooshLayers = 5

  return (
    <motion.div
      variants={containerVariants}
      initial="initial"
      animate="animate"
      exit="exit"
      className="fixed inset-0 z-50 flex items-center justify-center bg-[hsl(224,71.4%,4.1%)]"
    >
      <div className="relative flex flex-col items-center justify-center w-64 h-64">
        <div className="relative flex items-center justify-center w-32 h-32">
          {/* The "Woosh" Animation Layers */}
          <motion.div
            variants={wooshContainerVariants}
            initial="initial"
            animate="animate"
            className="absolute inset-0"
          >
            {[...Array(wooshLayers)].map((_, i) => (
              <motion.div
                key={i}
                variants={wooshVariants}
                className="absolute inset-0 border-2 border-blue-400/50"
                style={{
                  transformOrigin: 'center',
                  width: `${100 - i * 15}%`,
                  height: `${100 - i * 15}%`,
                  top: `${(i * 15) / 2}%`,
                  left: `${(i * 15) / 2}%`,
                }}
              />
            ))}
          </motion.div>
          {/* The Central Icon */}
          <motion.div variants={textVariants}>
            <Briefcase size={48} className="text-blue-300" />
          </motion.div>
        </div>
        <motion.h1
          variants={textVariants}
          className="mt-6 text-3xl font-bold text-slate-200"
        >
          Headlines
        </motion.h1>
      </div>
    </motion.div>
  )
}

```

## 📄 src/components/client/SynthesizedEventCard.jsx
*Lines: 100, Size: 3.32 KB*

```jsx
// File: apps/client/src/components/client/SynthesizedEventCard.jsx (Restored)
'use client'

import { useState, useTransition } from 'react'
import { useRouter } from 'next/navigation'
import { AccordionContent, AccordionItem, ConfirmationDialog } from '@/components/shared'
import useAppStore from '@/lib/store/use-app-store'
import { SwipeToDelete } from '../swipe/SwipeToDelete'
import { EventCardDesktop } from '../events/EventCardDesktop'
import { EventCardMobile } from '../events/EventCardMobile'
import { EventCardDetails } from '../events/EventCardDetails'
import { useAuth } from '@/lib/auth/client'
import { toast } from 'sonner'

export const SynthesizedEventCard = ({
  event,
  onDelete, // <-- Changed from onSwipeLeft
  onFavoriteToggle,
  isFavorited,
}) => {
  const [isPending, startTransition] = useTransition()
  const [isEmailDialogOpen, setIsEmailDialogOpen] = useState(false)
  const setChatContextPrompt = useAppStore((state) => state.setChatContextPrompt)
  const router = useRouter()
  const { user } = useAuth()

  const performDelete = () => {
    startTransition(() => {
      onDelete(event._id)
    })
  }

  const handleSwipeRight = () => {
    if (isFavorited) {
      setIsEmailDialogOpen(true) // <-- Un-commented
    } else {
      toast.info('Item must be favorited to email.')
    }
  }

  const handleChatAboutEvent = (e) => {
    e.stopPropagation()
    const prompt = `Tell me more about the event: "${event.synthesized_headline}". What are the key implications?`
    setChatContextPrompt(prompt)
    router.push('/chat')
  }

  const handleFavorite = (e) => {
    e.stopPropagation()
    onFavoriteToggle(event._id, !isFavorited)
  }

  return (
    <>
      <div className="relative w-full">
        <AccordionItem
          value={event.event_key}
          className={`relative border-none rounded-xl overflow-hidden transition-all duration-300 ${isPending ? 'opacity-50' : ''}`}
        >
          <SwipeToDelete onDelete={performDelete} onSwipeRight={handleSwipeRight}>
            <div className="relative p-4">
              <EventCardMobile
                event={event}
                onChat={handleChatAboutEvent}
                onDelete={performDelete}
                onFavorite={handleFavorite}
                isFavorited={isFavorited}
                isPending={isPending}
              />
              <EventCardDesktop
                event={event}
                onChat={handleChatAboutEvent}
                onDelete={performDelete}
                onFavorite={handleFavorite}
                isFavorited={isFavorited}
                isPending={isPending}
              />
            </div>
          </SwipeToDelete>
          <AccordionContent className="p-4 pt-0 bg-slate-900/50">
            <EventCardDetails event={event} />
          </AccordionContent>
        </AccordionItem>
      </div>
      {/* Un-commented this block */}
      <ConfirmationDialog
        open={isEmailDialogOpen}
        onOpenChange={setIsEmailDialogOpen}
        title="Confirm Action"
        description={`This will send a detailed brief of the event "${event.synthesized_headline}" to your registered email address. Do you want to continue?`}
        confirmText="Send Email"
        onConfirm={() => {
          toast.info('Email functionality is not yet implemented.')
          setIsEmailDialogOpen(false)
        }}
      />
    </>
  )
}

```

## 📄 src/components/client/UploadView.jsx
*Lines: 227, Size: 7.59 KB*

```jsx
// File: apps/client/src/components/client/UploadView.jsx (Redesigned Version)

'use client'

import { useState, useRef } from 'react'
import { toast } from 'sonner'
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
  Label,
  Input,
  Button,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
  Textarea,
} from '@/components/shared'
import { Loader2, UploadCloud, FileJson, Type } from 'lucide-react'

async function processUploadedArticle(item) {
  const res = await fetch('/api/upload/process-article', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ item }),
  })
  if (!res.ok) {
    const errorData = await res.json()
    throw new Error(errorData.error || 'Failed to process item')
  }
  return res.json()
}

export function UploadView() {
  const [file, setFile] = useState(null)
  const [headlineInput, setHeadlineInput] = useState('')
  const [articleInput, setArticleInput] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const fileInputRef = useRef(null)

  const handleFileChange = (event) => {
    const uploadedFile = event.target.files[0]
    if (uploadedFile && uploadedFile.type === 'application/json') {
      setFile(uploadedFile)
    } else {
      toast.error('Please select a valid JSON file.')
      setFile(null)
    }
  }

  const handleProcessText = async () => {
    const item = { headline: headlineInput.trim(), article: articleInput.trim() }
    if (!item.headline || !item.article) {
      toast.error('Headline and Article content are both required.')
      return
    }

    setIsLoading(true)
    try {
      const toastId = toast.loading(`Processing text input...`)
      await processUploadedArticle(item)
      toast.success(`Successfully processed text input.`, { id: toastId })
      setHeadlineInput('')
      setArticleInput('')
    } catch (error) {
      toast.error('Failed to process text.', { description: error.message })
    } finally {
      setIsLoading(false)
    }
  }

  const handleProcessFile = async () => {
    if (!file) return
    setIsLoading(true)
    const reader = new FileReader()
    reader.onload = async (e) => {
      try {
        const content = JSON.parse(e.target.result)
        if (!Array.isArray(content)) throw new Error('JSON must be an array of objects.')

        const totalItems = content.length
        const toastId = toast.loading(
          `Processing ${totalItems} items from file... (0/${totalItems})`
        )

        for (let i = 0; i < totalItems; i++) {
          const item = content[i]
          if (!item.headline || !item.article) {
            toast.warning(`Skipping item ${i + 1}: missing headline or article.`)
            continue
          }
          await processUploadedArticle(item)
          toast.loading(`Processing ${totalItems} items... (${i + 1}/${totalItems})`, {
            id: toastId,
          })
        }

        toast.success(
          `Successfully processed file. ${totalItems} items were sent to the pipeline.`,
          { id: toastId }
        )
        setFile(null)
        if (fileInputRef.current) fileInputRef.current.value = ''
      } catch (error) {
        toast.error('Failed to process file.', { description: error.message })
      } finally {
        setIsLoading(false)
      }
    }
    reader.readAsText(file)
  }

  return (
    // Increased max-width of the container
    <div className="max-w-4xl mx-auto">
      <Card className="bg-slate-900/50 border-slate-700/80">
        <CardHeader className="p-6">
          <CardTitle className="text-2xl">Upload New Knowledge</CardTitle>
          <CardDescription>
            Process external intelligence by uploading a file or pasting text directly.
          </CardDescription>
        </CardHeader>
        <Tabs defaultValue="text" className="w-full">
          <div className="px-6">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="text">
                <Type className="w-4 h-4 mr-2" />
                Paste Text
              </TabsTrigger>
              <TabsTrigger value="file">
                <FileJson className="w-4 h-4 mr-2" />
                Upload File
              </TabsTrigger>
            </TabsList>
          </div>
          <TabsContent value="text">
            <CardContent className="p-6 space-y-4">
              {/* Two separate inputs for headline and article */}
              <div className="space-y-2">
                <Label htmlFor="headline-input" className="text-base">
                  Headline
                </Label>
                <Input
                  id="headline-input"
                  placeholder="Enter the article headline..."
                  className="bg-slate-900/80 border-slate-700"
                  value={headlineInput}
                  onChange={(e) => setHeadlineInput(e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="article-input" className="text-base">
                  Article Content
                </Label>
                <Textarea
                  id="article-input"
                  placeholder="Paste the full article content here..."
                  className="min-h-[250px] bg-slate-900/80 border-slate-700"
                  value={articleInput}
                  onChange={(e) => setArticleInput(e.target.value)}
                />
              </div>
            </CardContent>
            <CardFooter className="p-6 pt-0">
              <Button
                onClick={handleProcessText}
                disabled={isLoading || !headlineInput.trim() || !articleInput.trim()}
                size="lg"
                className="w-full h-12"
              >
                {isLoading ? (
                  <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                ) : (
                  <UploadCloud className="mr-2 h-5 w-5" />
                )}
                Process Text
              </Button>
            </CardFooter>
          </TabsContent>
          <TabsContent value="file">
            {/* File upload content remains the same */}
            <CardContent className="p-6 space-y-4">
              <Label htmlFor="file-upload" className="text-base font-semibold">
                JSON File Upload
              </Label>
              <div className="flex items-center p-2 border-2 border-dashed rounded-lg border-slate-700 bg-slate-900/50">
                <div className="flex-grow">
                  <Input
                    id="file-upload"
                    type="file"
                    accept=".json"
                    onChange={handleFileChange}
                    ref={fileInputRef}
                    className="file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-600/20 file:text-blue-300 hover:file:bg-blue-600/30"
                  />
                  {file && (
                    <p className="text-xs text-slate-400 mt-1">Selected: {file.name}</p>
                  )}
                </div>
              </div>
            </CardContent>
            <CardFooter className="p-6 pt-0">
              <Button
                onClick={handleProcessFile}
                disabled={isLoading || !file}
                size="lg"
                className="h-12 w-full"
              >
                {isLoading ? (
                  <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                ) : (
                  <UploadCloud className="mr-2 h-5 w-5" />
                )}
                Process File
              </Button>
            </CardFooter>
          </TabsContent>
        </Tabs>
      </Card>
    </div>
  )
}

```

## 📄 src/components/client/chat/ChatInput.jsx
*Lines: 51, Size: 1.29 KB*

```jsx
// src/components/chat/ChatInput.jsx (version 2.0)
import { Button } from '@/components/shared/elements'
import { Send, Loader2 } from 'lucide-react'
import Textarea from 'react-textarea-autosize'

export function ChatInput({
  input,
  handleInputChange,
  handleSubmit,
  isLoading,
  inputRef,
}) {
  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSubmit(e)
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="flex items-end gap-2 p-4 border-t border-white/10"
    >
      <Textarea
        ref={inputRef}
        value={input}
        onChange={handleInputChange}
        onKeyDown={handleKeyDown}
        placeholder="Ask a follow-up question..."
        disabled={isLoading}
        className="flex-grow resize-none bg-slate-900/80 border border-slate-700 rounded-lg shadow-sm p-3 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all"
        minRows={1}
        maxRows={5}
      />
      <Button
        type="submit"
        disabled={isLoading || !input.trim()}
        className="h-12 w-12 flex-shrink-0"
        size="icon"
      >
        {isLoading ? (
          <Loader2 className="h-5 w-5 animate-spin" />
        ) : (
          <Send className="h-5 w-5" />
        )}
      </Button>
    </form>
  )
}

```

## 📄 src/components/client/chat/ChatLoadingIndicator.jsx
*Lines: 66, Size: 2.18 KB*

```jsx
// src/components/chat/ChatLoadingIndicator.jsx (version 2.0)
'use client'

import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Bot, Sparkles } from 'lucide-react'

const statuses = [
  'Analyzing query...',
  'Searching internal database...',
  'Consulting Wikipedia...',
  'Scanning web results...',
  'Synthesizing response...',
  'Performing final checks...',
]

/**
 * A self-animating loading indicator for the chat that cycles through
 * a predefined list of statuses to give a sense of progress.
 */
export function ChatLoadingIndicator() {
  const [statusIndex, setStatusIndex] = useState(0)

  useEffect(() => {
    // This effect runs only once on mount to start the interval.
    const interval = setInterval(() => {
      setStatusIndex((prevIndex) => (prevIndex + 1) % statuses.length)
    }, 1800) // Change status every 1.8 seconds

    // Cleanup function to clear the interval when the component unmounts.
    return () => clearInterval(interval)
  }, [])

  return (
    <div className="flex items-start gap-4">
      <div className="flex-shrink-0 w-8 h-8 rounded-full bg-blue-500/20 text-blue-300 flex items-center justify-center">
        <Bot className="h-5 w-5" />
      </div>
      <div className="px-4 py-3 rounded-xl max-w-[85%] bg-slate-800">
        <div className="flex items-center gap-3 text-sm text-slate-400">
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}
          >
            <Sparkles className="h-4 w-4 text-yellow-400" />
          </motion.div>
          <div className="relative h-5 w-52 overflow-hidden">
            <AnimatePresence initial={false}>
              <motion.p
                key={statusIndex}
                initial={{ opacity: 0, y: -15 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: 15 }}
                transition={{ duration: 0.3, ease: 'easeInOut' }}
                className="absolute inset-0 italic"
              >
                {statuses[statusIndex]}
              </motion.p>
            </AnimatePresence>
          </div>
        </div>
      </div>
    </div>
  )
}

```

## 📄 src/components/client/chat/ChatMessage.jsx
*Lines: 77, Size: 2.78 KB*

```jsx
// src/components/chat/ChatMessage.jsx (version 2.2)
import React from 'react'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import rehypeRaw from 'rehype-raw'
import { cn } from '@headlines/utils-shared'
import { User, Bot, ChevronsUpDown } from 'lucide-react'
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/shared/elements'
import { ChatLoadingIndicator } from './ChatLoadingIndicator'

export function ChatMessage({ message, onAccordionToggle }) {
  const isUser = message.role === 'user'

  return (
    <div className={cn('flex items-start gap-4', isUser && 'justify-end')}>
      {!isUser && (
        <div className="flex-shrink-0 w-8 h-8 rounded-full bg-blue-500/20 text-blue-300 flex items-center justify-center">
          <Bot className="h-5 w-5" />
        </div>
      )}
      <div
        className={cn(
          'px-4 py-3 rounded-xl max-w-[85%]',
          isUser ? 'bg-slate-700' : 'bg-slate-800'
        )}
      >
        {!isUser && (message.isThinking || message.thoughts) && (
          <Accordion
            type="single"
            collapsible
            className="w-full mb-2"
            onValueChange={onAccordionToggle}
          >
            <AccordionItem value="item-1" className="border-b border-slate-700/50">
              <AccordionTrigger className="py-2 text-xs text-slate-400 hover:no-underline">
                <div className="flex items-center gap-2">
                  <ChevronsUpDown className="h-3 w-3" />
                  View Thoughts
                </div>
              </AccordionTrigger>
              <AccordionContent className="pt-2 pb-0">
                {message.isThinking ? (
                  <ChatLoadingIndicator />
                ) : (
                  <div className="prose prose-xs prose-invert max-w-none text-slate-400 bg-black/20 p-3 rounded-md">
                    <ReactMarkdown>{`\`\`\`markdown\n${message.thoughts}\n\`\`\``}</ReactMarkdown>
                  </div>
                )}
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        )}

        {!message.isThinking && message.content && (
          <div className="overflow-x-auto custom-scrollbar">
            <div className="prose prose-sm prose-invert max-w-none prose-p:my-1 prose-headings:my-2 prose-ul:my-2 prose-li:my-0 text-slate-200">
              <ReactMarkdown remarkPlugins={[remarkGfm]} rehypePlugins={[rehypeRaw]}>
                {message.content}
              </ReactMarkdown>
            </div>
          </div>
        )}
      </div>
      {isUser && (
        <div className="flex-shrink-0 w-8 h-8 rounded-full bg-slate-500/20 text-slate-300 flex items-center justify-center">
          <User className="h-5 w-5" />
        </div>
      )}
    </div>
  )
}

```

## 📄 src/components/client/chat/ChatScrollAnchor.jsx
*Lines: 21, Size: 538 Bytes*

```jsx
// src/components/chat/ChatScrollAnchor.jsx (version 1.1)
'use client'

import { useRef, useEffect, forwardRef } from 'react'

export const ChatScrollAnchor = forwardRef(function ChatScrollAnchor({ messages }, ref) {
  const internalRef = useRef(null)
  const anchorRef = ref || internalRef

  useEffect(() => {
    if (anchorRef.current) {
      anchorRef.current.scrollIntoView({
        block: 'start',
        behavior: 'smooth',
      })
    }
  }, [messages, anchorRef])

  return <div ref={anchorRef} className="h-px w-full" />
})

```

## 📄 src/components/client/chat/ChatSidebar.jsx
*Lines: 36, Size: 1.2 KB*

```jsx
// src/components/chat/ChatSidebar.jsx (version 1.0)
'use client'

import { Button } from '@/components/shared/elements'
import { PlusCircle, MessageSquare } from 'lucide-react'
import { cn } from '@headlines/utils-shared'

export function ChatSidebar({ chats, activeChatId, createChat, selectChat }) {
  return (
    <div className="flex flex-col h-full bg-slate-900/50 border-r border-slate-700/50 p-2">
      <Button onClick={createChat} className="mb-4">
        <PlusCircle className="mr-2 h-4 w-4" />
        New Chat
      </Button>
      <div className="flex-grow overflow-y-auto custom-scrollbar pr-1">
        <div className="flex flex-col gap-1">
          {chats.map((chat) => (
            <Button
              key={chat.id}
              variant="ghost"
              onClick={() => selectChat(chat.id)}
              className={cn(
                'w-full justify-start text-left truncate',
                activeChatId === chat.id && 'bg-blue-500/20 text-blue-200'
              )}
            >
              <MessageSquare className="mr-2 h-4 w-4 flex-shrink-0" />
              <span className="truncate">{chat.title}</span>
            </Button>
          ))}
        </div>
      </div>
    </div>
  )
}

```

## 📄 src/components/events/EventCardDesktop.jsx
*Lines: 111, Size: 4.12 KB*

```jsx
// File: apps/client/src/components/client/events/EventCardDesktop.jsx

'use client'

import {
  Badge,
  Button,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/shared'
import { Trash2, MessageSquarePlus, Users } from 'lucide-react'
import { getCountryFlag } from '@headlines/utils-shared/next'
import Image from 'next/image'

const getRelevanceBadgeClass = (score) => {
  if (score >= 90)
    return 'bg-red-500/20 text-red-300 border border-red-500/30 shadow-lg shadow-red-500/10'
  if (score >= 75)
    return 'bg-blue-500/20 text-blue-300 border border-blue-500/30 shadow-lg shadow-blue-500/10'
  return 'bg-slate-500/20 text-slate-300 border border-slate-500/30'
}

export function EventCardDesktop({ event, onChat, onDelete, isPending }) {
  if (!event) return null
  const flag = getCountryFlag(event.country)
  const primaryImageUrl = event.source_articles?.find((a) => a.imageUrl)?.imageUrl

  return (
    <div className="hidden sm:block">
      <TooltipProvider delayDuration={100}>
        <div className="flex items-start gap-6">
          <div className="flex flex-col items-center shrink-0">
            <Badge
              className={`text-xl font-bold px-4 py-2 ${getRelevanceBadgeClass(
                event.highest_relevance_score
              )}`}
            >
              {event.highest_relevance_score}
            </Badge>
            <span className="text-xs text-slate-500 mt-1">Score</span>
          </div>
          <div className="flex-grow min-w-0 pr-20">
            <h3 className="font-serif font-bold text-xl text-slate-100 mb-2">
              <span className="text-2xl mr-3 align-middle">{flag}</span>
              {event.synthesized_headline}
            </h3>
            <p className="text-slate-300 leading-relaxed">{event.synthesized_summary}</p>
          </div>
          {primaryImageUrl && (
            <div className="relative h-24 w-24 rounded-lg overflow-hidden flex-shrink-0">
              <Image
                src={primaryImageUrl}
                alt={event.synthesized_headline}
                fill
                className="object-cover"
                sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
              />
            </div>
          )}
          <div className="absolute top-4 right-4 z-10 flex gap-1">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={onChat}
                  className="text-slate-400 hover:text-blue-400 bg-black/20 hover:bg-blue-500/20 h-8 w-8"
                >
                  <MessageSquarePlus className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Ask AI about this event</TooltipContent>
            </Tooltip>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  disabled={isPending}
                  onClick={onDelete}
                  className="text-slate-400 hover:text-red-400 bg-black/20 hover:bg-red-500/20 h-8 w-8"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Delete Event</TooltipContent>
            </Tooltip>
          </div>
        </div>
        <div className="mt-4 pt-4 border-t border-slate-800/50 flex flex-col sm:flex-row justify-between items-start gap-4">
          {event.key_individuals && event.key_individuals.length > 0 && (
            <div className="flex items-start gap-3 text-slate-400">
              <Users className="h-5 w-5 mt-0.5 shrink-0 text-slate-500" />
              <p className="text-sm font-medium text-slate-300">
                {event.key_individuals.length} Key Individual(s) Identified
              </p>
            </div>
          )}
          {event.ai_assessment_reason && (
            <p className="text-xs text-slate-500 italic sm:text-right flex-grow">
              {event.ai_assessment_reason}
            </p>
          )}
        </div>
      </TooltipProvider>
    </div>
  )
}

```

## 📄 src/components/events/EventCardDetails.jsx
*Lines: 69, Size: 2.55 KB*

```jsx
// src/components/events/EventCardDetails.jsx (version 1.0)
'use client'

import { Users, Mail, Building, Briefcase } from 'lucide-react'

export function EventCardDetails({ event }) {
  if (!event) return null

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      {/* Key Individuals Column */}
      {event.key_individuals && event.key_individuals.length > 0 && (
        <div className="space-y-3">
          <h4 className="font-semibold text-sm text-slate-300 mb-2 border-b border-slate-700 pb-1">
            Key Individuals
          </h4>
          {event.key_individuals.map((person, index) => (
            <div key={index} className="p-3 rounded-md bg-slate-800/50">
              <p className="font-bold text-slate-100 flex items-center gap-2">
                <Users className="h-4 w-4 text-slate-400" /> {person.name}
              </p>
              <div className="pl-6 space-y-1 mt-1 text-sm text-slate-400">
                {person.role_in_event && (
                  <p className="flex items-center gap-2">
                    <Briefcase className="h-3 w-3" /> {person.role_in_event}
                  </p>
                )}
                {person.company && (
                  <p className="flex items-center gap-2">
                    <Building className="h-3 w-3" /> {person.company}
                  </p>
                )}
                {person.email_suggestion && (
                  <a
                    href={`mailto:${person.email_suggestion}`}
                    className="flex items-center gap-2 text-blue-400 hover:underline"
                  >
                    <Mail className="h-3 w-3" /> {person.email_suggestion}
                  </a>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
      {/* Source Articles Column */}
      <div className="space-y-2">
        <h4 className="font-semibold text-sm text-slate-300 mb-2 border-b border-slate-700 pb-1">
          Source Articles ({event.source_articles.length})
        </h4>
        {event.source_articles.map((article) => (
          <a
            key={article.link}
            href={article.link}
            target="_blank"
            rel="noopener noreferrer"
            className="block p-3 rounded-md bg-slate-800/50 hover:bg-slate-800/80 transition-colors"
          >
            <p className="font-medium text-slate-200 line-clamp-1 text-sm">
              {article.headline}
            </p>
            <p className="text-xs text-slate-400">{article.newspaper}</p>
          </a>
        ))}
      </div>
    </div>
  )
}

```

## 📄 src/components/events/EventCardMobile.jsx
*Lines: 105, Size: 3.79 KB*

```jsx
// File: apps/client/src/components/client/events/EventCardMobile.jsx

'use client'

import { Badge, Button } from '@/components/shared'
import { Trash2, MessageSquarePlus, Users } from 'lucide-react'
import { getCountryFlag } from '@headlines/utils-shared/next'
import { cn } from '@headlines/utils-shared'

const getRelevanceBadgeClass = (score) => {
  if (score >= 90) return 'bg-red-500/20 text-red-300 border border-red-500/30'
  if (score >= 75) return 'bg-blue-500/20 text-blue-300 border border-blue-500/30'
  return 'bg-slate-500/20 text-slate-300 border border-slate-500/30'
}

export function EventCardMobile({ event, onChat, onDelete, isPending }) {
  if (!event) return null
  const flag = getCountryFlag(event.country)
  const primaryImageUrl = event.source_articles?.find((a) => a.imageUrl)?.imageUrl

  return (
    <div className="sm:hidden">
      <div
        className={cn(
          'relative rounded-lg -m-4 mb-0 p-4',
          primaryImageUrl && 'min-h-[200px] flex flex-col justify-end'
        )}
        style={primaryImageUrl ? { backgroundImage: `url(${primaryImageUrl})` } : {}}
      >
        {primaryImageUrl && (
          <div className="absolute inset-0 bg-gradient-to-t from-black/90 via-black/60 to-transparent z-0 rounded-lg" />
        )}

        <div className="relative z-10">
          <div className="flex justify-between items-start gap-2 mb-2">
            <div className="flex items-center gap-2 min-w-0">
              <Badge
                className={`text-sm font-bold px-2 py-0.5 ${getRelevanceBadgeClass(
                  event.highest_relevance_score
                )}`}
              >
                {event.highest_relevance_score}
              </Badge>
            </div>
            <div className="flex flex-col items-center gap-1">
              <Button
                variant="ghost"
                size="icon"
                onClick={onChat}
                className="text-slate-300 hover:text-blue-400 bg-black/20 hover:bg-blue-500/20 h-8 w-8"
              >
                <MessageSquarePlus className="h-4 w-4" />
              </Button>
              <Button
                variant="ghost"
                size="icon"
                disabled={isPending}
                onClick={onDelete}
                className="text-slate-300 hover:text-red-400 bg-black/20 hover:bg-red-500/20 h-8 w-8"
              >
                <Trash2 className="h-4 w-4" />
              </Button>
            </div>
          </div>
          <h3
            className={cn(
              'font-serif font-bold text-lg line-clamp-3',
              primaryImageUrl ? 'text-white drop-shadow-lg' : 'text-slate-100'
            )}
          >
            <span className="text-xl mr-2 align-middle">{flag}</span>
            {event.synthesized_headline}
          </h3>
        </div>
      </div>

      <div
        className={cn(
          'pt-4',
          primaryImageUrl && 'bg-slate-900 -m-4 mt-0 p-4 rounded-b-xl'
        )}
      >
        <p className="text-sm text-slate-300 leading-relaxed">
          {event.synthesized_summary}
        </p>
        <div className="mt-4 pt-4 border-t border-slate-800/50 flex flex-col justify-between items-start gap-4">
          {event.key_individuals && event.key_individuals.length > 0 && (
            <div className="flex items-start gap-3 text-slate-400">
              <Users className="h-5 w-5 mt-0.5 shrink-0 text-slate-500" />
              <p className="text-sm font-medium text-slate-300">
                {event.key_individuals.length} Key Individual(s) Identified
              </p>
            </div>
          )}
          {event.ai_assessment_reason && (
            <p className="text-xs text-slate-500 italic sm:text-right flex-grow">
              {event.ai_assessment_reason}
            </p>
          )}
        </div>
      </div>
    </div>
  )
}

```

## 📄 src/components/placeholders.jsx
*Lines: 39, Size: 1.19 KB*

```jsx
// File: apps/client/src/components/placeholders.jsx
'use client'

// Simple placeholders to make the login page render without the full UI library.
export const Card = ({ className, children, ...props }) => (
  <div className={className} {...props}>
    {children}
  </div>
)
export const CardHeader = ({ className, children, ...props }) => (
  <div className={className} {...props}>
    {children}
  </div>
)
export const CardContent = ({ className, children, ...props }) => (
  <div className={className} {...props}>
    {children}
  </div>
)
export const CardFooter = ({ className, children, ...props }) => (
  <div className={className} {...props}>
    {children}
  </div>
)
export const Input = (props) => (
  <input {...props} className="p-2 border rounded w-full bg-gray-800 text-white" />
)
export const Button = ({ children, ...props }) => (
  <button {...props} className="p-2 bg-blue-600 text-white rounded w-full">
    {children}
  </button>
)
export const Label = (props) => <label {...props} className="block mb-1 text-sm" />
export const LoadingOverlay = ({ text }) => (
  <div className="fixed inset-0 bg-black/50 flex items-center justify-center text-white">
    {text || 'Loading...'}
  </div>
)

```

## 📄 src/components/shared/ConfirmationDialog.jsx
*Lines: 49, Size: 1.45 KB*

```jsx
// packages/ui/src/ConfirmationDialog.jsx (version 1.0.0)
'use client'

import React from 'react'
import {
  AlertDialog,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogCancel,
  Button
} from '../shared'
import { AlertTriangle, Loader2 } from 'lucide-react'

export function ConfirmationDialog({
  open,
  onOpenChange,
  onConfirm,
  isPending,
  title = 'Are you absolutely sure?',
  description,
  confirmText = 'Continue',
}) {
  return (
    <AlertDialog open={open} onOpenChange={onOpenChange}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <div className="flex items-center justify-center w-16 h-16 rounded-full bg-red-500/10 mx-auto mb-4">
            <AlertTriangle className="w-8 h-8 text-red-500" />
          </div>
          <AlertDialogTitle className="text-center text-xl">{title}</AlertDialogTitle>
          <AlertDialogDescription className="text-center">
            {description}
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter className="sm:justify-center">
          <AlertDialogCancel disabled={isPending}>Cancel</AlertDialogCancel>
          <Button variant="destructive" onClick={onConfirm} disabled={isPending}>
            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {confirmText}
          </Button>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  )
}

```

## 📄 src/components/shared/DataTableColumnHeader.jsx
*Lines: 69, Size: 2.25 KB*

```jsx
// packages/ui/src/DataTableColumnHeader.jsx (version 2.0.0 - With Filtering)
'use client'

import { ArrowDownIcon, ArrowUpIcon, ChevronsUpDownIcon } from 'lucide-react'
import { cn } from '@headlines/utils-shared'
import {
  Button,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
  Input
} from '../shared'

export function DataTableColumnHeader({ column, title, className }) {
  if (!column.getCanSort() && !column.getCanFilter()) {
    return <div className={cn(className)}>{title}</div>
  }

  return (
    <div className={cn('flex items-center space-x-2', className)}>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            size="sm"
            className="-ml-3 h-8 data-[state=open]:bg-accent"
          >
            <span>{title}</span>
            {column.getIsSorted() === 'desc' ? (
              <ArrowDownIcon className="ml-2 h-4 w-4" />
            ) : column.getIsSorted() === 'asc' ? (
              <ArrowUpIcon className="ml-2 h-4 w-4" />
            ) : (
              <ChevronsUpDownIcon className="ml-2 h-4 w-4" />
            )}
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="start">
          {column.getCanSort() && (
            <>
              <DropdownMenuItem onClick={() => column.toggleSorting(false)}>
                <ArrowUpIcon className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                Asc
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => column.toggleSorting(true)}>
                <ArrowDownIcon className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                Desc
              </DropdownMenuItem>
              <DropdownMenuSeparator />
            </>
          )}
          {column.getCanFilter() && (
            <DropdownMenuItem onSelect={(e) => e.preventDefault()}>
              <Input
                placeholder={`Filter ${title}...`}
                value={column.getFilterValue() || ''}
                onChange={(event) => column.setFilterValue(event.target.value)}
                className="h-8"
              />
            </DropdownMenuItem>
          )}
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  )
}

```

## 📄 src/components/shared/EditableCell.jsx
*Lines: 77, Size: 2.11 KB*

```jsx
'use client'

import React, { useState, useEffect, useRef } from 'react'
import { Input, Textarea } from '@/components/shared'
import { Edit } from 'lucide-react'

export const EditableCell = ({
  initialValue,
  onSave,
  placeholder = 'N/A',
  useTextarea = false, // Add this prop back if needed for headlines
}) => {
  const [isEditing, setIsEditing] = useState(false)
  // Handle case where initialValue is null or undefined
  const [value, setValue] = useState(initialValue ?? '')
  const inputRef = useRef(null)

  useEffect(() => {
    if (isEditing) {
      inputRef.current?.focus()
      inputRef.current?.select()
    }
  }, [isEditing])

  const handleSave = () => {
    // Only save if the value has actually changed
    if (String(value).trim() !== String(initialValue ?? '').trim()) {
      onSave(String(value).trim())
    }
    setIsEditing(false)
  }

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey && !useTextarea) {
      handleSave()
    } else if (e.key === 'Escape') {
      setValue(initialValue ?? '')
      setIsEditing(false)
    }
  }

  if (isEditing) {
    const Component = useTextarea ? Textarea : Input // Allow Textarea again
    return (
      <Component
        ref={inputRef}
        value={value}
        onChange={(e) => setValue(e.target.value)}
        onBlur={handleSave}
        onKeyDown={handleKeyDown}
        className="h-7 text-xs p-1 bg-secondary border-primary/50"
      />
    )
  }

  // --- START OF THE FIX for displaying '0' ---
  // Check if initialValue is null or undefined, not just falsy
  const displayValue = initialValue ?? null
  // --- END OF THE FIX ---

  return (
    <div
      className="group flex items-center cursor-pointer p-1 -m-1 rounded-md hover:bg-secondary/50 min-h-[28px]"
      onClick={() => setIsEditing(true)}
    >
      <span className="truncate">
        {displayValue !== null ? (
          displayValue
        ) : (
          <span className="text-muted-foreground italic">{placeholder}</span>
        )}
      </span>
      <Edit className="h-3 w-3 ml-2 text-muted-foreground opacity-0 group-hover:opacity-100 flex-shrink-0" />
    </div>
  )
}

```

## 📄 src/components/shared/ExportButton.jsx
*Lines: 61, Size: 1.51 KB*

```jsx
// packages/ui/src/ExportButton.jsx (version 2.0.0)
'use client'

import { useState } from 'react'
import {
  Button,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '../shared'
import { Download, Loader2 } from 'lucide-react'
import { toast } from 'sonner'

export function ExportButton({ hasData, onExport }) {
  const [isLoading, setIsLoading] = useState(false)

  const handleExportClick = async (format) => {
    if (!hasData) {
      toast.info('No data available to export.')
      return
    }

    if (typeof onExport !== 'function') {
      toast.error('Export action is not configured correctly.')
      return
    }

    setIsLoading(true)
    const result = await onExport(format)
    setIsLoading(false)

    if (result?.success) {
      toast.success('Your download will begin shortly.')
    }
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button disabled={isLoading || !hasData}>
          {isLoading ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Download className="mr-2 h-4 w-4" />
          )}
          Export
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => handleExportClick('csv')}>
          Export as CSV
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => handleExportClick('xlsx')}>
          Export as Excel (.xls)
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

```

## 📄 src/components/shared/LoadingOverlay.jsx
*Lines: 34, Size: 1.16 KB*

```jsx
// packages/ui/src/LoadingOverlay.jsx (version 1.3.0)
'use client'

import { AnimatePresence, motion } from 'framer-motion'
import { PremiumSpinner } from './PremiumSpinner'

/**
 * A persistent overlay that displays a premium spinner.
 * It uses AnimatePresence to gracefully fade in and out on top of content.
 *
 * @param {object} props
 * @param {boolean} props.isLoading - Controls the visibility of the overlay.
 * @param {string} [props.text] - Optional text to display below the spinner.
 */
export function LoadingOverlay({ isLoading, text }) {
  return (
    <AnimatePresence>
      {isLoading && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.2 }}
          // CRITICAL FIX: High z-index ensures it's on top of everything inside its relative parent.
          className="absolute inset-0 z-30 flex flex-col items-center justify-center bg-background/60 backdrop-blur-sm rounded-lg"
        >
          <PremiumSpinner />
          {text && <p className="mt-4 text-base font-medium text-slate-200">{text}</p>}
        </motion.div>
      )}
    </AnimatePresence>
  )
}

```

## 📄 src/components/shared/PremiumSpinner.jsx
*Lines: 83, Size: 2.35 KB*

```jsx
// packages/ui/src/PremiumSpinner.jsx (version 1.1.0)
'use client'

import { motion } from 'framer-motion'

/**
 * A visually rich, multi-layered, animated spinner component.
 * It features rotating conic gradients and a dynamic sparkle effect.
 */
export function PremiumSpinner({ size = 80 }) {
  const sparkleCount = 8
  const sparkleRadius = size * 1.2

  return (
    <div
      className="relative flex items-center justify-center"
      style={{ width: size, height: size }}
    >
      {/* Sparkles */}
      {[...Array(sparkleCount)].map((_, i) => (
        <motion.div
          key={i}
          className="absolute rounded-full bg-cyan-300"
          style={{
            width: size / 20,
            height: size / 20,
            left: '50%',
            top: '50%',
            translateX: '-50%',
            translateY: '-50%',
          }}
          initial={{
            transform: `rotate(${
              (360 / sparkleCount) * i
            }deg) translateY(${sparkleRadius}px) scale(0)`,
          }}
          animate={{
            scale: [0, 1, 0],
            opacity: [0, 1, 0],
          }}
          transition={{
            duration: 1.5,
            repeat: Infinity,
            repeatType: 'loop',
            ease: 'easeInOut',
            delay: i * 0.1,
          }}
        />
      ))}

      {/* Outer Ring */}
      <motion.div
        className="absolute inset-0 rounded-full"
        style={{
          background:
            'conic-gradient(from 90deg, transparent 0%, #06b6d4 50%, transparent 100%)',
          maskImage: 'radial-gradient(circle at center, transparent 75%, black 76%)',
        }}
        animate={{ rotate: 360 }}
        transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}
      />

      {/* Inner Ring */}
      <motion.div
        className="absolute inset-[15%] rounded-full"
        style={{
          background:
            'conic-gradient(from -90deg, transparent 0%, #a855f7 50%, transparent 100%)',
          maskImage: 'radial-gradient(circle at center, transparent 75%, black 76%)',
        }}
        animate={{ rotate: -360 }}
        transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}
      />

      {/* Center Glow */}
      <div
        className="absolute inset-[35%] rounded-full bg-blue-500/20 blur-lg"
        style={{ animation: 'pulse 2s infinite ease-in-out' }}
      ></div>
    </div>
  )
}

```

## 📄 src/components/shared/Skeleton.jsx
*Lines: 7, Size: 216 Bytes*

```jsx
'use client'
import { cn } from '@headlines/utils-shared'
function Skeleton({ className, ...props }) {
  return <div className={cn('animate-pulse rounded-md bg-muted', className)} {...props} />
}
export { Skeleton }

```

## 📄 src/components/shared/SkeletonCard.jsx
*Lines: 30, Size: 1.12 KB*

```jsx
// packages/ui/src/SkeletonCard.jsx
'use client'

import { Card, CardContent } from '../shared'
// DEFINITIVE FIX: Use the package name for imports between packages.
import { cn } from '@headlines/utils-shared'

export const SkeletonCard = ({ className }) => {
  return (
    <Card className={cn('bg-slate-900/50 border-slate-700/50 animate-pulse', className)}>
      <CardContent className="p-6">
        <div className="flex items-start gap-6">
          {/* Left Column Skeleton */}
          <div className="flex flex-col items-center shrink-0">
            <div className="h-10 w-14 bg-slate-700 rounded-md"></div>
            <div className="h-4 w-10 bg-slate-700 rounded mt-1"></div>
          </div>
          {/* Right Column Skeleton */}
          <div className="flex-grow min-w-0 space-y-3">
            <div className="h-6 w-3/4 bg-slate-700 rounded"></div>
            <div className="h-4 w-full bg-slate-700 rounded"></div>
            <div className="h-4 w-5/6 bg-slate-700 rounded"></div>
            <div className="h-4 w-1/3 bg-slate-700 rounded mt-2"></div>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}

```

## 📄 src/components/shared/ViewHeader.jsx
*Lines: 149, Size: 5.2 KB*

```jsx
// packages/ui/src/ViewHeader.jsx
'use client'

import { useRouter, useSearchParams, usePathname } from 'next/navigation'
import { useState, useEffect, useMemo } from 'react'
// DEFINITIVE FIX: Import hooks from the dedicated '/hooks' entry point.
import { useDebounce } from '@/hooks'
import {
  Input,
  Button,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  ScrollArea,
} from '../shared'
import { Search, Clock, BarChart, ArrowDownUp, Mail, Star, X } from 'lucide-react'
import { cn } from '@headlines/utils-shared'

const iconMap = { clock: Clock, relevance: BarChart, size: ArrowDownUp }

export function ViewHeader({
  title,
  sortOptions,
  allCountries = [],
  globalCountryFilter = [],
  viewCountry,
  onViewCountryChange,
}) {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  const currentSort = searchParams.get('sort') || 'date_desc'
  const [searchTerm, setSearchTerm] = useState(searchParams.get('q') || '')
  const debouncedSearchTerm = useDebounce(searchTerm, 500)

  useEffect(() => {
    const params = new URLSearchParams(searchParams.toString())
    if (debouncedSearchTerm) params.set('q', debouncedSearchTerm)
    else params.delete('q')
    router.replace(`?${params.toString()}`, { scroll: false })
  }, [debouncedSearchTerm, router, searchParams])

  const handleUrlParamChange = (key, value) => {
    const params = new URLSearchParams(searchParams.toString())
    if (!value || value === 'all' || value === false) params.delete(key)
    else params.set(key, value)
    params.set('page', '1')
    router.push(`${pathname}?${params.toString()}`, { scroll: false })
  }

  const handleClearSearch = () => setSearchTerm('')

  const withEmailOnly = searchParams.get('withEmail') === 'true'
  const favoritesOnly = searchParams.get('favorites') === 'true'

  const displayedCountries = useMemo(() => {
    if (globalCountryFilter.length > 0) {
      const globalFilterSet = new Set(globalCountryFilter)
      return allCountries.filter((c) => globalFilterSet.has(c.name))
    }
    return allCountries
  }, [allCountries, globalCountryFilter])

  return (
    <div className="flex flex-col items-center justify-center text-center mb-8 space-y-6 max-w-5xl mx-auto">
      <div>
        <h2 className="text-3xl font-bold tracking-tight text-slate-100">{title}</h2>
      </div>
      <div className="w-full flex flex-col sm:flex-row items-center gap-4">
        <div className="flex w-full sm:w-auto items-center gap-2">
          <Select value={viewCountry} onValueChange={onViewCountryChange}>
            <SelectTrigger className="w-full sm:w-[200px] h-12 bg-slate-900/80 border-slate-700">
              <SelectValue placeholder="View Country..." />
            </SelectTrigger>
            <SelectContent>
              <ScrollArea className="h-[250px]">
                <SelectItem value="all">All Selected Countries</SelectItem>
                {displayedCountries.map((country) => (
                  <SelectItem key={country.name} value={country.name}>
                    {country.name} ({country.count})
                  </SelectItem>
                ))}
              </ScrollArea>
            </SelectContent>
          </Select>
        </div>
        <div className="relative flex-grow w-full">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-slate-500" />
          <Input
            id="search"
            placeholder="Search by name, company..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="bg-slate-900/80 border-slate-700 h-12 pl-10 pr-10"
          />
          {searchTerm && (
            <Button
              variant="ghost"
              size="icon"
              className="absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8 rounded-full"
              onClick={handleClearSearch}
            >
              <X className="h-4 w-4" />
            </Button>
          )}
        </div>
        <div className="flex items-center gap-2">
          <TooltipProvider>
            {sortOptions.map((option) => {
              const IconComponent = iconMap[option.icon] || Clock
              return (
                <Tooltip key={option.value}>
                  <TooltipTrigger asChild>
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={() =>
                        handleUrlParamChange(
                          'sort',
                          option.value === 'date_desc' ? null : option.value
                        )
                      }
                      className={cn(
                        'h-12 w-12',
                        currentSort === option.value && 'bg-blue-500/20 text-blue-300'
                      )}
                      aria-label={option.tooltip}
                    >
                      <IconComponent className="h-5 w-5" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>{option.tooltip}</TooltipContent>
                </Tooltip>
              )
            })}
          </TooltipProvider>
        </div>
      </div>
    </div>
  )
}

```

## 📄 src/components/shared/data-table.jsx
*Lines: 187, Size: 5.22 KB*

```jsx
// packages/ui/src/data-table.jsx (version 3.1.0 - Fully Controlled & Responsive)
'use client'

import React, { useState, useEffect } from 'react'
import { flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
  Input,
  Button,
  Checkbox,
} from './elements'
import { LoadingOverlay } from './LoadingOverlay'

const addSelectionColumn = (columns) => [
  {
    id: 'select',
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected() ||
          (table.getIsSomePageRowsSelected() && 'indeterminate')
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
    size: 40,
  },
  ...columns,
]

export function DataTable({
  columns,
  data,
  isLoading,
  page,
  setPage,
  total,
  sorting,
  setSorting,
  columnFilters = [],
  setColumnFilters = () => {},
  enableRowSelection = false,
  onRowSelectionChange,
  filterColumn,
  filterPlaceholder,
}) {
  const [rowSelection, setRowSelection] = useState({})

  const tableColumns = React.useMemo(
    () => (enableRowSelection ? addSelectionColumn(columns) : columns),
    [enableRowSelection, columns]
  )

  const pageCount = total ? Math.ceil(total / 50) : 0 // Page size is 50

  const table = useReactTable({
    data: data || [],
    columns: tableColumns,
    pageCount,
    state: {
      sorting,
      columnFilters,
      rowSelection,
      pagination: {
        pageIndex: page - 1,
        pageSize: 50,
      },
    },
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    onRowSelectionChange: setRowSelection,
    getCoreRowModel: getCoreRowModel(),
    manualPagination: true,
    manualSorting: true,
    manualFiltering: true,
  })

  useEffect(() => {
    if (onRowSelectionChange) {
      onRowSelectionChange(
        table.getSelectedRowModel().flatRows.map((row) => row.original)
      )
    }
  }, [rowSelection, onRowSelectionChange, table])

  const handleFilterChange = (value) => {
    if (!filterColumn) return
    setPage(1) // Reset to first page on filter change
    const newFilters = value ? [{ id: filterColumn, value }] : []
    setColumnFilters(newFilters)
  }

  const filterValue = columnFilters.find((f) => f.id === filterColumn)?.value || ''

  return (
    <div className="relative isolate flex flex-col h-full">
      <LoadingOverlay isLoading={isLoading && !(data?.length > 0)} />
      <div className="flex-shrink-0 flex items-center justify-between py-4">
        {filterColumn && (
          <Input
            placeholder={filterPlaceholder}
            value={filterValue}
            onChange={(event) => handleFilterChange(event.target.value)}
            className="max-w-sm"
          />
        )}

        {/* --- THIS IS THE CRUCIAL PAGINATION LOGIC --- */}
        {pageCount > 1 && (
          <div className="flex items-center justify-end space-x-2">
            <span className="text-sm text-muted-foreground">
              Page {page} of {pageCount || 1}
            </span>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setPage((p) => p - 1)}
              disabled={page <= 1}
            >
              Previous
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setPage((p) => p + 1)}
              disabled={page >= pageCount}
            >
              Next
            </Button>
          </div>
        )}
      </div>
      <div className="flex-grow rounded-md border overflow-auto">
        <Table>
          <TableHeader className="sticky top-0 bg-background z-10">
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(header.column.columnDef.header, header.getContext())}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
                      {flexRender(cell.column.columnDef.cell, cell.getContext())}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={tableColumns.length} className="h-24 text-center">
                  {isLoading ? 'Loading...' : 'No results.'}
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
    </div>
  )
}

```

## 📄 src/components/shared/elements/accordion.jsx
*Lines: 41, Size: 1.62 KB*

```jsx
'use client'
import * as React from 'react'
import * as AccordionPrimitive from '@radix-ui/react-accordion'
import { ChevronDown } from 'lucide-react'
import { cn } from '@headlines/utils-shared'
const Accordion = AccordionPrimitive.Root
const AccordionItem = React.forwardRef(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item ref={ref} className={cn('border-b', className)} {...props} />
))
AccordionItem.displayName = 'AccordionItem'
const AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    {' '}
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180',
        className
      )}
      {...props}
    >
      {' '}
      {children}{' '}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />{' '}
    </AccordionPrimitive.Trigger>{' '}
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName
const AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    {' '}
    <div className={cn('pb-4 pt-0', className)}>{children}</div>{' '}
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName
export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

```

## 📄 src/components/shared/elements/alert-dialog.jsx
*Lines: 108, Size: 3.52 KB*

```jsx
// packages/ui/src/components/alert-dialog.jsx (version 1.3.0 - Definitive Slot Fix)
'use client'

import * as React from 'react'
import * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog'
import { cn } from '@headlines/utils-shared'
import { buttonVariants } from './button'

const AlertDialog = AlertDialogPrimitive.Root
const AlertDialogTrigger = AlertDialogPrimitive.Trigger
const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({ className, ...props }) => (
  <div
    className={cn('flex flex-col space-y-2 text-center sm:text-left', className)}
    {...props}
  />
)
AlertDialogHeader.displayName = 'AlertDialogHeader'

const AlertDialogFooter = ({ className, ...props }) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = 'AlertDialogFooter'

const AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold', className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
AlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(buttonVariants({ variant: 'outline' }), 'mt-2 sm:mt-0', className)}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

```

## 📄 src/components/shared/elements/badge.jsx
*Lines: 31, Size: 992 Bytes*

```jsx
import * as React from 'react'
import { cva } from 'class-variance-authority'

import { cn } from '@headlines/utils-shared'

const badgeVariants = cva(
  'inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
  {
    variants: {
      variant: {
        default:
          'border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80',
        secondary:
          'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',
        destructive:
          'border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80',
        outline: 'text-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
)

function Badge({ className, variant, ...props }) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />
}

export { Badge, badgeVariants }

```

## 📄 src/components/shared/elements/button.jsx
*Lines: 50, Size: 1.63 KB*

```jsx
// src/components/ui/button.jsx (version 1.1)
import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cva } from 'class-variance-authority'

import { cn } from '@headlines/utils-shared'

const buttonVariants = cva(
  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline:
          'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
)

const Button = React.forwardRef(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button'
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = 'Button'

export { Button, buttonVariants }

```

## 📄 src/components/shared/elements/card.jsx
*Lines: 52, Size: 1.64 KB*

```jsx
// src/components/ui/card.jsx (version 1.1)
import * as React from 'react'

import { Slot } from '@radix-ui/react-slot' // <-- Import Slot
import { cn } from '@headlines/utils-shared'

const Card = React.forwardRef(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : 'div' // <-- Use Slot if asChild is true
  return (
    <Comp
      ref={ref}
      className={cn(
        'rounded-lg border bg-card text-card-foreground shadow-sm',
        className
      )}
      {...props}
    />
  )
})
Card.displayName = 'Card'

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('flex flex-col space-y-1.5 p-6', className)} {...props} />
))
CardHeader.displayName = 'CardHeader'

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn('text-2xl font-semibold leading-none tracking-tight', className)}
    {...props}
  />
))
CardTitle.displayName = 'CardTitle'

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <p ref={ref} className={cn('text-sm text-muted-foreground', className)} {...props} />
))
CardDescription.displayName = 'CardDescription'

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
))
CardContent.displayName = 'CardContent'

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('flex items-center p-6 pt-0', className)} {...props} />
))
CardFooter.displayName = 'CardFooter'

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

```

## 📄 src/components/shared/elements/checkbox.jsx
*Lines: 26, Size: 1009 Bytes*

```jsx
// src/components/ui/checkbox.jsx (version 1.0)
'use client'
import * as React from 'react'
import * as CheckboxPrimitive from '@radix-ui/react-checkbox'
import { Check } from 'lucide-react'

import { cn } from '@headlines/utils-shared'
const Checkbox = React.forwardRef(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn('flex items-center justify-center text-current')}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName
export { Checkbox }

```

## 📄 src/components/shared/elements/command.jsx
*Lines: 122, Size: 3.83 KB*

```jsx
// packages/ui/src/components/command.jsx (version 1.2.0 - Definitive Slot Fix)
'use client'

import * as React from 'react'
import { Dialog, DialogContent } from './dialog'
import { Search } from 'lucide-react'
import { Command as CommandPrimitive } from 'cmdk'
import { cn } from '@headlines/utils-shared'

const Command = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        'flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef((props, ref) => (
  <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 h-px bg-border', className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50',
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({ className, ...props }) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest text-muted-foreground', className)}
      {...props}
    />
  )
}
CommandShortcut.displayName = 'CommandShortcut'

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

```

## 📄 src/components/shared/elements/dialog.jsx
*Lines: 97, Size: 3.22 KB*

```jsx
// packages/ui/src/components/dialog.jsx (version 2.0.0 - Definitive Slot Fix)
'use client'

import * as React from 'react'
import * as DialogPrimitive from '@radix-ui/react-dialog'
import { X } from 'lucide-react'

import { cn } from '@headlines/utils-shared'

const Dialog = DialogPrimitive.Root
const DialogTrigger = DialogPrimitive.Trigger
const DialogPortal = DialogPrimitive.Portal
const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({ className, ...props }) => (
  <div
    className={cn('flex flex-col space-y-1.5 text-center sm:text-left', className)}
    {...props}
  />
)
DialogHeader.displayName = 'DialogHeader'

const DialogFooter = ({ className, ...props }) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = 'DialogFooter'

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold leading-none tracking-tight', className)}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
  DialogPortal,
  DialogOverlay,
  DialogClose,
}

```

## 📄 src/components/shared/elements/dropdown-menu.jsx
*Lines: 166, Size: 6.21 KB*

```jsx
// packages/ui/src/components/dropdown-menu.jsx (version 3.0.0 - Definitive Slot Fix)
'use client'
import * as React from 'react'
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'
import { Check, ChevronRight, Circle } from 'lucide-react'
import { cn } from '@headlines/utils-shared'

const DropdownMenu = DropdownMenuPrimitive.Root
const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger
const DropdownMenuGroup = DropdownMenuPrimitive.Group
const DropdownMenuPortal = DropdownMenuPrimitive.Portal
const DropdownMenuSub = DropdownMenuPrimitive.Sub
const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef(
  ({ className, inset, children, ...props }, ref) => (
    <DropdownMenuPrimitive.SubTrigger
      ref={ref}
      className={cn(
        'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',
        inset && 'pl-8',
        className
      )}
      {...props}
    >
      {children}
      <ChevronRight className="ml-auto h-4 w-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
)
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef(
  ({ className, sideOffset = 4, ...props }, ref) => (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        ref={ref}
        sideOffset={sideOffset}
        className={cn(
          'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md',
          'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
)
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef(
  ({ className, children, checked, ...props }, ref) => (
    <DropdownMenuPrimitive.CheckboxItem
      ref={ref}
      className={cn(
        'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          {' '}
          <Check className="h-4 w-4" />{' '}
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
)
DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef(
  ({ className, children, ...props }, ref) => (
    <DropdownMenuPrimitive.RadioItem
      ref={ref}
      className={cn(
        'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
        className
      )}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          {' '}
          <Circle className="h-2 w-2 fill-current" />{' '}
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
)
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn('px-2 py-1.5 text-sm font-semibold', inset && 'pl-8', className)}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({ className, ...props }) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest opacity-60', className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = 'DropdownMenuShortcut'

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

```

## 📄 src/components/shared/elements/index.js
*Lines: 22, Size: 571 Bytes*

```javascript
export * from './accordion'
export * from './alert-dialog'
export * from './badge'
export * from './button'
export * from './card'
export * from './checkbox'
export * from './command'
export * from './dialog'
export * from './dropdown-menu'
export * from './input'
export * from './label'
export * from './popover'
export * from './scroll-area'
export * from './select'
export * from './separator'
export * from './sheet'
export * from './sonner'
export * from './switch'
export * from './table'
export * from './tabs'
export * from './textarea'
export * from './tooltip'
```

## 📄 src/components/shared/elements/input.jsx
*Lines: 22, Size: 757 Bytes*

```jsx
// File: apps/client/src/components/shared/elements/input.jsx
import * as React from 'react'

import { cn } from '@headlines/utils-shared'

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Input.displayName = 'Input'

export { Input }

```

## 📄 src/components/shared/elements/label.jsx
*Lines: 20, Size: 595 Bytes*

```jsx
// src/components/ui/label.jsx (version 1.1)
'use client'

import * as React from 'react'
import * as LabelPrimitive from '@radix-ui/react-label'
import { cva } from 'class-variance-authority'

import { cn } from '@headlines/utils-shared'

const labelVariants = cva(
  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'
)

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

```

## 📄 src/components/shared/elements/popover.jsx
*Lines: 32, Size: 1.21 KB*

```jsx
// packages/ui/src/components/popover.jsx (version 2.0.0 - Definitive Slot Fix)
'use client'

import * as React from 'react'
import * as PopoverPrimitive from '@radix-ui/react-popover'

import { cn } from '@headlines/utils-shared'

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef(
  ({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        ref={ref}
        align={align}
        sideOffset={sideOffset}
        className={cn(
          'z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
)
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

```

## 📄 src/components/shared/elements/scroll-area.jsx
*Lines: 52, Size: 1.46 KB*

```jsx
// packages/ui/src/components/scroll-area.jsx (version 1.1.0)
'use client'

import * as React from 'react'
import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area'

import { cn } from '@headlines/utils-shared'

function ScrollArea({ className, children, ...props }) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn('relative overflow-hidden', className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="h-full w-full rounded-[inherit]"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({ className, orientation = 'vertical', ...props }) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        'flex touch-none select-none transition-colors',
        orientation === 'vertical' &&
          'h-full w-2.5 border-l border-l-transparent p-[1px]',
        orientation === 'horizontal' &&
          'h-2.5 flex-col border-t border-t-transparent p-[1px]',
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="relative flex-1 rounded-full bg-border"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }

```

## 📄 src/components/shared/elements/select.jsx
*Lines: 146, Size: 5.46 KB*

```jsx
'use client'

import * as React from 'react'
import * as SelectPrimitive from '@radix-ui/react-select'
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from 'lucide-react'

import { cn } from '@headlines/utils-shared'

function Select({ ...props }) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({ ...props }) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({ ...props }) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({ className, size = 'default', children, ...props }) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({ className, children, position = 'popper', ...props }) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md',
          position === 'popper' &&
            'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            'p-1',
            position === 'popper' &&
              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1'
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({ className, ...props }) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn('text-muted-foreground px-2 py-1.5 text-xs', className)}
      {...props}
    />
  )
}

function SelectItem({ className, children, ...props }) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({ className, ...props }) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn('bg-border pointer-events-none -mx-1 my-1 h-px', className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({ className, ...props }) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn('flex cursor-default items-center justify-center py-1', className)}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({ className, ...props }) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn('flex cursor-default items-center justify-center py-1', className)}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}

```

## 📄 src/components/shared/elements/separator.jsx
*Lines: 29, Size: 657 Bytes*

```jsx
'use client'

import * as React from 'react'
import * as SeparatorPrimitive from '@radix-ui/react-separator'

import { cn } from '@headlines/utils-shared'

function Separator({
  className,
  orientation = 'horizontal',
  decorative = true,
  ...props
}) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        'bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px',
        className
      )}
      {...props}
    />
  )
}

export { Separator }

```

## 📄 src/components/shared/elements/sheet.jsx
*Lines: 156, Size: 4.28 KB*

```jsx
'use client'

import * as React from 'react'
import * as SheetPrimitive from '@radix-ui/react-dialog'
import { cva } from 'class-variance-authority'
import { X } from 'lucide-react'
import { cn } from '@headlines/utils-shared'

// Base components from Radix
const Sheet = SheetPrimitive.Root
const SheetTrigger = SheetPrimitive.Trigger
const SheetClose = SheetPrimitive.Close
const SheetPortal = SheetPrimitive.Portal

// Sheet overlay component with proper forwardRef
const SheetOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    ref={ref}
    className={cn(
      'fixed inset-0 z-50 bg-black/80',
      'data-[state=open]:animate-in data-[state=closed]:animate-out',
      'data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

// Sheet content variants using CVA
const sheetVariants = cva(
  [
    'fixed z-50 gap-4 bg-background p-6 shadow-lg',
    'transition ease-in-out',
    'data-[state=open]:animate-in data-[state=closed]:animate-out',
    'data-[state=closed]:duration-300 data-[state=open]:duration-500',
  ],
  {
    variants: {
      side: {
        top: [
          'inset-x-0 top-0 border-b',
          'data-[state=closed]:slide-out-to-top',
          'data-[state=open]:slide-in-from-top',
        ],
        bottom: [
          'inset-x-0 bottom-0 border-t',
          'data-[state=closed]:slide-out-to-bottom',
          'data-[state=open]:slide-in-from-bottom',
        ],
        left: [
          'inset-y-0 left-0 h-full w-3/4 border-r',
          'data-[state=closed]:slide-out-to-left',
          'data-[state=open]:slide-in-from-left',
          'sm:max-w-sm',
        ],
        right: [
          'inset-y-0 right-0 h-full w-3/4 border-l',
          'data-[state=closed]:slide-out-to-right',
          'data-[state=open]:slide-in-from-right',
          'sm:max-w-sm',
        ],
      },
    },
    defaultVariants: {
      side: 'right',
    },
  }
)

// Main sheet content component - Fixed to handle single child requirement
const SheetContent = React.forwardRef(
  ({ side = 'right', className, children, ...props }, ref) => (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        ref={ref}
        className={cn(sheetVariants({ side }), className)}
        {...props}
      >
        <SheetPrimitive.Close
          className={cn(
            'absolute right-4 top-4 rounded-sm opacity-70 z-50',
            'ring-offset-background transition-opacity',
            'hover:opacity-100 focus:outline-none',
            'focus:ring-2 focus:ring-ring focus:ring-offset-2',
            'disabled:pointer-events-none',
            'data-[state=open]:bg-secondary'
          )}
        >
          <X className="h-4 w-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
        {children}
      </SheetPrimitive.Content>
    </SheetPortal>
  )
)
SheetContent.displayName = SheetPrimitive.Content.displayName

// Sheet header component
const SheetHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex flex-col space-y-2 text-center sm:text-left', className)}
    {...props}
  />
))
SheetHeader.displayName = 'SheetHeader'

// Sheet footer component
const SheetFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
))
SheetFooter.displayName = 'SheetFooter'

// Sheet title component
const SheetTitle = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold text-foreground', className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

// Sheet description component
const SheetDescription = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

```

## 📄 src/components/shared/elements/sonner.jsx
*Lines: 39, Size: 1.02 KB*

```jsx
'use client'
import { useTheme } from 'next-themes'
import { Toaster as Sonner } from 'sonner'
import { useEffect, useState } from 'react'

const Toaster = ({ ...props }) => {
  const { theme = 'system' } = useTheme()
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  // Don't render on server or until mounted to avoid hydration mismatch
  if (!mounted) {
    return null
  }

  return (
    <Sonner
      theme={theme}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            'group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg',
          description: 'group-[.toast]:text-muted-foreground',
          actionButton:
            'group-[.toast]:bg-primary group-[.toast]:text-primary-foreground',
          cancelButton: 'group-[.toast]:bg-muted group-[.toast]:text-muted-foreground',
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

```

## 📄 src/components/shared/elements/switch.jsx
*Lines: 25, Size: 1.07 KB*

```jsx
// src/components/ui/switch.jsx (version 1.0)
'use client'
import * as React from 'react'
import * as SwitchPrimitives from '@radix-ui/react-switch'

import { cn } from '@headlines/utils-shared'
const Switch = React.forwardRef(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      'peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input',
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        'pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0'
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName
export { Switch }

```

## 📄 src/components/shared/elements/table.jsx
*Lines: 88, Size: 2.19 KB*

```jsx
// src/components/ui/table.jsx (version 1.1)
import * as React from 'react'

import { cn } from '@headlines/utils-shared'

const Table = React.forwardRef(({ className, ...props }, ref) => (
  // CORRECTIVE ACTION: Removed the wrapping div with `overflow-auto`.
  // The `w-full` class is applied directly to the table.
  <table
    ref={ref}
    className={cn('w-full caption-bottom text-sm', className)}
    {...props}
  />
))
Table.displayName = 'Table'

const TableHeader = React.forwardRef(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn('[&_tr]:border-b', className)} {...props} />
))
TableHeader.displayName = 'TableHeader'

const TableBody = React.forwardRef(({ className, ...props }, ref) => (
  <tbody ref={ref} className={cn('[&_tr:last-child]:border-0', className)} {...props} />
))
TableBody.displayName = 'TableBody'

const TableFooter = React.forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn('bg-muted/50 font-medium [&>tr]:last:border-b-0', className)}
    {...props}
  />
))
TableFooter.displayName = 'TableFooter'

const TableRow = React.forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',
      className
    )}
    {...props}
  />
))
TableRow.displayName = 'TableRow'

const TableHead = React.forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      'h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0',
      className
    )}
    {...props}
  />
))
TableHead.displayName = 'TableHead'

const TableCell = React.forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', className)}
    {...props}
  />
))
TableCell.displayName = 'TableCell'

const TableCaption = React.forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn('mt-4 text-sm text-muted-foreground', className)}
    {...props}
  />
))
TableCaption.displayName = 'TableCaption'

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

```

## 📄 src/components/shared/elements/tabs.jsx
*Lines: 48, Size: 1.61 KB*

```jsx
// File: apps/client/src/components/shared/elements/tabs.jsx (Full Version)
'use client'

import * as React from 'react'
import * as TabsPrimitive from '@radix-ui/react-tabs'

import { cn } from '@headlines/utils-shared'

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      'inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground',
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      'inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm',
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      'mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

```

## 📄 src/components/shared/elements/textarea.jsx
*Lines: 21, Size: 710 Bytes*

```jsx
// File: apps/client/src/components/shared/elements/textarea.jsx (Full Version)
import * as React from 'react'

import { cn } from '@headlines/utils-shared'

const Textarea = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = 'Textarea'

export { Textarea }

```

## 📄 src/components/shared/elements/tooltip.jsx
*Lines: 31, Size: 1.13 KB*

```jsx
// packages/ui/src/components/tooltip.jsx (version 2.0.0 - Definitive Slot Fix)
'use client'

import * as React from 'react'
import * as TooltipPrimitive from '@radix-ui/react-tooltip'

import { cn } from '@headlines/utils-shared'

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef(
  ({ className, sideOffset = 4, ...props }, ref) => (
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        'z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  )
)
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

```

## 📄 src/components/shared/index.js
*Lines: 137, Size: 3.16 KB*

```javascript
// packages/ui/src/index.js
'use client'

// Components from ./components directory
export {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from './elements/accordion'
export {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogOverlay,
  AlertDialogPortal,
  AlertDialogTitle,
  AlertDialogTrigger,
} from './elements/alert-dialog'
export { Badge, badgeVariants } from './elements/badge'
export { Button, buttonVariants } from './elements/button'
export {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from './elements/card'
export { Checkbox } from './elements/checkbox'
export {
  Command,
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
  CommandShortcut,
} from './elements/command'
export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
} from './elements/dialog'
export {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuPortal,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuTrigger,
} from './elements/dropdown-menu'
export { Input } from './elements/input'
export { Label } from './elements/label'
export { Popover, PopoverContent, PopoverTrigger } from './elements/popover'
export { ScrollArea, ScrollBar } from './elements/scroll-area'
export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
} from './elements/select'
export { Separator } from './elements/separator'
export {
  Sheet,
  SheetClose,
  SheetContent,
  SheetDescription,
  SheetFooter,
  SheetHeader,
  SheetOverlay,
  SheetPortal,
  SheetTitle,
  SheetTrigger,
} from './elements/sheet'
export { Toaster } from './elements/sonner'
export { Switch } from './elements/switch'
export {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableFooter,
  TableHead,
  TableHeader,
  TableRow,
} from './elements/table'
export { Tabs, TabsContent, TabsList, TabsTrigger } from './elements/tabs'
export { Textarea } from './elements/textarea'
export {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from './elements/tooltip'

// Components from ./src root
export { ConfirmationDialog } from './ConfirmationDialog.jsx'
export { DataTable } from './data-table.jsx'
export { DataTableColumnHeader } from './DataTableColumnHeader.jsx'
export { EditableCell } from './EditableCell.jsx'
export { ExportButton } from './ExportButton.jsx'
export { LoadingOverlay } from './LoadingOverlay.jsx'
export { default as PageHeader } from './page-header.jsx'
export { PremiumSpinner } from './PremiumSpinner.jsx'
export { Skeleton } from './Skeleton.jsx'
export { SkeletonCard } from './SkeletonCard.jsx'
export { ViewHeader } from './ViewHeader.jsx'

```

## 📄 src/components/shared/page-header.jsx
*Lines: 24, Size: 716 Bytes*

```jsx
// packages/ui/src/page-header.jsx (version 2.0.0)
'use client'

import { motion } from 'framer-motion'

export function PageHeader({ title, description, children }) {
  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.4, ease: 'easeInOut' }}
      className="flex-shrink-0 flex justify-between items-start"
    >
      <div>
        <h1 className="text-4xl font-bold tracking-tighter">{title}</h1>
        <p className="text-muted-foreground mt-1">{description}</p>
      </div>
      {children && <div className="flex-shrink-0">{children}</div>}
    </motion.div>
  )
}
// This is a default export now.
export default PageHeader;

```

## 📄 src/components/swipe/SwipeToDelete.jsx
*Lines: 41, Size: 1.11 KB*

```jsx
// src/components/swipe/SwipeToDelete.jsx (version 1.0)
'use client'

import { motion, useMotionValue, useTransform } from 'framer-motion'
import { Trash2 } from 'lucide-react'

const SWIPE_THRESHOLD = -100 // pixels to swipe before delete is triggered

export function SwipeToDelete({ children, onDelete }) {
  const x = useMotionValue(0)

  const onDragEnd = (event, info) => {
    if (info.offset.x < SWIPE_THRESHOLD) {
      onDelete()
    }
  }

  const backgroundOpacity = useTransform(x, [-100, 0], [1, 0])
  const backgroundScale = useTransform(x, [-100, 0], [1, 0.8])

  return (
    <div className="relative w-full">
      <motion.div
        className="absolute inset-0 flex items-center justify-end pr-8 bg-red-600/80 pointer-events-none rounded-xl"
        style={{ opacity: backgroundOpacity, scale: backgroundScale }}
      >
        <Trash2 className="text-white h-6 w-6" />
      </motion.div>
      <motion.div
        drag="x"
        dragConstraints={{ left: 0, right: 0 }}
        onDragEnd={onDragEnd}
        style={{ x }}
        className="relative"
      >
        {children}
      </motion.div>
    </div>
  )
}

```

## 📄 src/hooks/index.js
*Lines: 6, Size: 197 Bytes*

```javascript
export * from './use-debounce.js';
export * from './use-entity-manager.js';
export * from './use-has-hydrated.js';
export * from './use-push-manager.js';
export * from './use-realtime-updates.js';

```

## 📄 src/hooks/use-debounce.js
*Lines: 20, Size: 372 Bytes*

```javascript
'use client'

import { useState, useEffect } from 'react'

export function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = useState(value)

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value)
    }, delay)

    return () => {
      clearTimeout(handler)
    }
  }, [value, delay])

  return debouncedValue
}

```

## 📄 src/hooks/use-entity-manager.js
*Lines: 67, Size: 2.04 KB*

```javascript
'use client'

import { useState, useEffect, useCallback } from 'react'
import { useDebounce } from './use-debounce'
import { toast } from 'sonner'

// The hook no longer needs initialData or initialTotal.
// It will be responsible for its own initial fetch.
export function useEntityManager(apiPath) {
  const [data, setData] = useState([])
  const [total, setTotal] = useState(0)
  const [isLoading, setIsLoading] = useState(true) // Start in a loading state
  const [page, setPage] = useState(1)
  const [sorting, setSorting] = useState([])
  const [columnFilters, setColumnFilters] = useState([])
  const debouncedFilters = useDebounce(columnFilters, 500)

  const fetchEntities = useCallback(async () => {
    setIsLoading(true)
    try {
      const sortParam = sorting[0]
        ? `${sorting[0].id}_${sorting[0].desc ? 'desc' : 'asc'}`
        : null
      const params = new URLSearchParams()
      params.set('page', page.toString())
      if (sortParam) params.set('sort', sortParam)
      if (debouncedFilters && debouncedFilters.length > 0) {
        params.set('columnFilters', JSON.stringify(debouncedFilters))
      }

      const res = await fetch(`/api-admin/${apiPath}?${params.toString()}`)
      if (!res.ok) {
        const errorData = await res.json()
        throw new Error(errorData.details || `Failed to fetch from ${apiPath}.`)
      }
      const result = await res.json()
      setData(result.data || [])
      setTotal(result.total || 0)
    } catch (err) {
      toast.error(`Failed to load data`, { description: err.message })
      setData([]) // Clear data on error
      setTotal(0)
    } finally {
      setIsLoading(false)
    }
  }, [apiPath, page, sorting, debouncedFilters])

  // This useEffect now fetches on mount and whenever the dependencies change.
  useEffect(() => {
    fetchEntities()
  }, [fetchEntities]) // fetchEntities is stable due to useCallback

  return {
    data,
    setData,
    total,
    isLoading,
    refetch: fetchEntities,
    page,
    setPage,
    sorting,
    setSorting,
    columnFilters,
    setColumnFilters,
  }
}

```

## 📄 src/hooks/use-has-hydrated.js
*Lines: 17, Size: 417 Bytes*

```javascript
// packages/utils-shared/src/hooks/use-has-hydrated.js (version 2.0.0)
'use client'

import { useState, useEffect } from 'react'

// This is a generic hook to detect when client-side hydration is complete.
// It is no longer tied to a specific Zustand store.
export function useHasHydrated() {
  const [hydrated, setHydrated] = useState(false)

  useEffect(() => {
    setHydrated(true)
  }, [])

  return hydrated
}

```

## 📄 src/hooks/use-push-manager.js
*Lines: 99, Size: 3.23 KB*

```javascript
// packages/utils-shared/src/hooks/use-push-manager.js
'use client'

import { useState, useEffect, useCallback } from 'react'
import { toast } from 'sonner'
// useAuth import is removed

function urlBase64ToUint8Array(base64String) {
  const padding = '='.repeat((4 - (base64String.length % 4)) % 4)
  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/')
  const rawData = window.atob(base64)
  const outputArray = new Uint8Array(rawData.length)
  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i)
  }
  return outputArray
}

export function usePushManager({ user, saveSubscription }) {
  // user is now a prop
  const [isSupported, setIsSupported] = useState(false)
  const [isSubscribed, setIsSubscribed] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  // const { user } = useAuth() // This line is removed

  const checkSubscription = useCallback(async () => {
    try {
      const registration = await navigator.serviceWorker.ready
      const subscription = await registration.pushManager.getSubscription()
      setIsSubscribed(!!subscription)
      return !!subscription
    } catch (error) {
      console.error('[PushManager] Error checking subscription:', error)
      setIsSubscribed(false)
      return false
    }
  }, [])

  useEffect(() => {
    if (
      typeof window !== 'undefined' &&
      'serviceWorker' in navigator &&
      'PushManager' in window
    ) {
      setIsSupported(true)
      navigator.serviceWorker.ready
        .then(() => {
          checkSubscription().finally(() => setIsLoading(false))
        })
        .catch((error) => {
          console.error('[PushManager] Service worker failed to become ready:', error)
          setIsLoading(false)
        })
    } else {
      setIsLoading(false)
    }
  }, [checkSubscription])

  const subscribe = useCallback(async () => {
    if (!user) {
      // Logic remains the same, but user comes from props
      toast.error('You must be logged in to subscribe to notifications.')
      return
    }
    if (typeof saveSubscription !== 'function') {
      toast.error('Push notification handler is not configured.')
      return
    }
    setIsLoading(true)
    try {
      const registration = await navigator.serviceWorker.ready
      if (Notification.permission === 'denied') {
        throw new Error('Notification permission has been denied by the user.')
      }
      const VAPID_PUBLIC_KEY = process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY
      if (!VAPID_PUBLIC_KEY) {
        throw new Error('VAPID public key not configured.')
      }
      const subscription = await registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: urlBase64ToUint8Array(VAPID_PUBLIC_KEY),
      })
      await saveSubscription(subscription)
      setIsSubscribed(true)
      toast.success('Notifications enabled!')
    } catch (error) {
      if (error.name === 'NotAllowedError') {
        toast.error('Permission for notifications was denied.')
      } else {
        toast.error('Failed to enable notifications.', { description: error.message })
      }
    } finally {
      setIsLoading(false)
    }
  }, [isSubscribed, user, saveSubscription])

  return { isSupported, isSubscribed, isLoading, subscribe }
}

```

## 📄 src/hooks/use-realtime-updates.js
*Lines: 46, Size: 1.46 KB*

```javascript
// packages/utils-shared/src/hooks/use-realtime-updates.js (version 1.0.1 - Complete)
'use client'

import { useEffect, useRef } from 'react'
import Pusher from 'pusher-js'
import { useQueryClient } from '@tanstack/react-query'

export function useRealtimeUpdates({ channel, event, queryKey }) {
  const queryClient = useQueryClient()
  const pusherRef = useRef(null)

  useEffect(() => {
    if (!channel || !event || !queryKey) {
      return
    }
    const PUSHER_KEY = process.env.NEXT_PUBLIC_PUSHER_KEY
    const PUSHER_CLUSTER = process.env.NEXT_PUBLIC_PUSHER_CLUSTER
    if (!pusherRef.current) {
      if (!PUSHER_KEY || !PUSHER_CLUSTER) {
        console.warn('Pusher keys not found, real-time updates are disabled.')
        return
      }
      try {
        pusherRef.current = new Pusher(PUSHER_KEY, { cluster: PUSHER_CLUSTER })
      } catch (error) {
        console.error('Failed to initialize Pusher:', error)
        return
      }
    }
    try {
      const pusherChannel = pusherRef.current.subscribe(channel)
      pusherChannel.bind(event, (data) => {
        // Invalidate queries to trigger a refetch of the list
        queryClient.invalidateQueries({ queryKey: [queryKey] })
      })
      return () => {
        if (pusherRef.current) {
          pusherRef.current.unsubscribe(channel)
        }
      }
    } catch (error) {
      console.error(`Failed to subscribe to Pusher channel '${channel}':`, error)
    }
  }, [channel, event, queryKey, queryClient])
}

```

## 📄 src/lib/api-client.js
*Lines: 148, Size: 5.33 KB*

```javascript
// File: apps/client/src/lib/api-client.js (Unabridged and Corrected)

'use client'

import { toast } from 'sonner'

async function fetchApi(
  endpoint,
  { body, method = 'POST', headers = { 'Content-Type': 'application/json' } } = {}
) {
  try {
    const response = await fetch(endpoint, {
      method,
      headers,
      body: body ? JSON.stringify(body) : undefined,
    })

    if (
      response.headers.get('content-type')?.includes('csv') ||
      response.headers.get('content-type')?.includes('excel')
    ) {
      return response
    }

    const result = await response.json()
    if (!response.ok) {
      throw new Error(result.error || result.details || 'An unknown API error occurred.')
    }
    return result
  } catch (error) {
    console.error(`[api-client] Fetch failed for ${endpoint}:`, error.message)
    return { success: false, error: error.message }
  }
}

// === CLIENT-FACING FUNCTIONS ===
export const generateChatTitle = (messages) =>
  fetchApi('/api/chat/title', { body: { messages } })
export const savePushSubscription = (subscription) =>
  fetchApi('/api/push/subscribe', { body: subscription })
export const updateUserInteraction = (interactionData) =>
  fetchApi('/api/user/interactions', { body: interactionData })
export const clearDiscardedItems = () =>
  fetchApi('/api/user/settings/clear-discarded', { method: 'POST' })
export const processUploadedArticle = (item) =>
  fetchApi('/api/upload/process-article', { body: { item } })

// --- START: THE FIX ---
// The NotificationToggles component specifically imports 'saveSubscription'.
// We will add it here as an alias to the correctly named 'savePushSubscription'.
export const saveSubscription = savePushSubscription
// --- END: THE FIX ---

// === ADMIN-FACING FUNCTIONS ===

// SUBSCRIBERS (USERS)
export const createSubscriber = (data) =>
  fetchApi('/api-admin/subscribers', { body: data })
export const updateSubscriber = (id, data) =>
  fetchApi(`/api-admin/subscribers/${id}`, { body: data, method: 'PATCH' })
export const deleteSubscriber = (id) =>
  fetchApi(`/api-admin/subscribers/${id}`, { method: 'DELETE' })

// COUNTRIES
export const createCountry = (data) => fetchApi('/api-admin/countries', { body: data })
export const updateCountry = (id, data) =>
  fetchApi(`/api-admin/countries/${id}`, { body: data, method: 'PATCH' })

// ARTICLES, EVENTS, OPPORTUNITIES (Admin CRUD)
export const updateArticle = (id, data) =>
  fetchApi(`/api-admin/articles/${id}`, { body: data, method: 'PATCH' })
export const deleteArticle = (id) =>
  fetchApi(`/api-admin/articles/${id}`, { method: 'DELETE' })

export const updateEvent = (id, data) =>
  fetchApi(`/api-admin/events/${id}`, { body: data, method: 'PATCH' })
export const deleteEvent = (id) =>
  fetchApi(`/api-admin/events/${id}`, { method: 'DELETE' })

export const updateOpportunity = (id, data) =>
  fetchApi(`/api-admin/opportunities/${id}`, { body: data, method: 'PATCH' })
export const deleteOpportunity = (id) =>
  fetchApi(`/api-admin/opportunities/${id}`, { method: 'DELETE' })


export const linkOpportunityToEventClient = (eventId, opportunityId) =>
  fetchApi('/api-admin/relationships/link', { body: { eventId, opportunityId } });

export const unlinkOpportunityFromEventClient = (eventId, opportunityId) =>
  fetchApi('/api-admin/relationships/unlink', { body: { eventId, opportunityId } });

// SETTINGS
export const getSettings = () => fetchApi('/api-admin/settings', { method: 'GET' })
export const updateSettings = (data) =>
  fetchApi('/api-admin/settings', { body: data, method: 'PATCH' })

// WATCHLIST
export const createWatchlistEntity = (data) =>
  fetchApi('/api-admin/watchlist', { body: data })
export const updateWatchlistEntity = (id, data) =>
  fetchApi(`/api-admin/watchlist/${id}`, { body: data, method: 'PATCH' })
export const deleteWatchlistEntity = (id) =>
  fetchApi(`/api-admin/watchlist/${id}`, { method: 'DELETE' })

// SUGGESTIONS
export const processSuggestion = (suggestionId, suggestionType, action) =>
  fetchApi('/api-admin/suggestions', { body: { suggestionId, suggestionType, action } })
export const updateWatchlistSuggestion = (id, data) =>
  fetchApi(`/api-admin/watchlist/suggestions/${id}`, { body: data, method: 'PATCH' })

// --- EXPORT ACTIONS ---
export async function handleExport(entity, fileType, filters, sort) {
  try {
    const response = await fetch('/api-admin/export', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ entity, fileType, filters, sort }),
    })

    if (!response.ok) {
      const errorResult = await response.json()
      throw new Error(errorResult.details || 'Export failed on the server.')
    }

    const blob = await response.blob()
    const contentDisposition = response.headers.get('content-disposition')
    let filename = 'export.dat'
    if (contentDisposition) {
      const filenameMatch = contentDisposition.match(/filename="(.+?)"/)
      if (filenameMatch && filenameMatch.length === 2) filename = filenameMatch[1]
    }

    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = filename
    document.body.appendChild(a)
    a.click()
    a.remove()
    window.URL.revokeObjectURL(url)

    return { success: true }
  } catch (error) {
    toast.error('Export Failed', { description: error.message })
    return { success: false, error: error.message }
  }
}

```

## 📄 src/lib/api-handler.js
*Lines: 66, Size: 1.96 KB*

```javascript
import { NextResponse } from 'next/server'
import { verifySession, verifyAdmin } from '@/lib/auth/server'
import dbConnect from '@headlines/data-access/dbConnect.js'

/**
 * A higher-order function for ADMIN API routes.
 * It handles DB connection, admin verification, and error handling in the correct order.
 */
export function createApiHandler(handler) {
  return async (request, context) => {
    try {
      // 1. Establish database connection FIRST. This resolves the race condition.
      await dbConnect()

      // 2. Verify user is an admin.
      const { isAdmin, user, error: authError } = await verifyAdmin()
      if (!isAdmin) {
        return NextResponse.json({ error: authError }, { status: 401 })
      }

      // 3. Execute the specific route logic, passing the verified user.
      return await handler(request, { ...context, user })
    } catch (error) {
      console.error(`[Admin API Handler Error] in ${request.nextUrl.pathname}:`, error)
      return NextResponse.json(
        {
          error: 'An unexpected internal server error occurred.',
          details: error.message,
        },
        { status: 500 }
      )
    }
  }
}

/**
 * A simpler handler for CLIENT-FACING API routes.
 * It handles DB connection and standard user session verification.
 */
export function createClientApiHandler(handler) {
  return async (request, context) => {
    try {
      await dbConnect()

      const { user, error: authError } = await verifySession()
      if (!user) {
        return NextResponse.json(
          { error: authError || 'Authentication required' },
          { status: 401 }
        )
      }

      return await handler(request, { ...context, user })
    } catch (error) {
      console.error(`[Client API Handler Error] in ${request.nextUrl.pathname}:`, error)
      return NextResponse.json(
        {
          error: 'An unexpected internal server error occurred.',
          details: error.message,
        },
        { status: 500 }
      )
    }
  }
}

```

## 📄 src/lib/auth/AuthProvider.js
*Lines: 89, Size: 2.75 KB*

```javascript
// File: apps/client/src/lib/auth/AuthProvider.js (Full Version)
'use client'

import React, { createContext, useState, useEffect, useCallback } from 'react'
import { usePathname, useRouter } from 'next/navigation'
import { toast } from 'sonner'
import { LoadingOverlay } from '@/components/shared/LoadingOverlay'

export const AuthContext = createContext(null)

export function AuthProvider({ initialUser, children }) {
  const [user, setUser] = useState(initialUser)
  const [isLoading, setIsLoading] = useState(!initialUser)
  const router = useRouter()
  const pathname = usePathname()

  useEffect(() => {
    if (!initialUser) {
      setIsLoading(false)
    }
  }, [initialUser])

  useEffect(() => {
    const isAuthPage = pathname.startsWith('/login')
    if (!user && !isAuthPage) {
      router.push('/login')
    } else if (user && isAuthPage) {
      router.push('/events')
    }
  }, [user, pathname, router])

  const login = async (email, password) => {
    setIsLoading(true)
    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      })
      const data = await response.json()
      if (response.ok) {
        toast.success('Login successful!')
        setUser(data.user)
        return true
      } else {
        toast.error('Login Failed', { description: data.error })
        return false
      }
    } catch (error) {
      toast.error('Login Failed', { description: 'Could not connect to the server.' })
      return false
    } finally {
      setIsLoading(false)
    }
  }

  const logout = async () => {
    await fetch('/api/auth/logout', { method: 'POST' })
    toast.info('You have been logged out.')
    setUser(null)
  }

  const updateUserPreferences = useCallback(async (updateData) => {
    setUser((prevUser) => ({ ...prevUser, ...updateData })) // Optimistic update
    try {
      const response = await fetch('/api/user/profile', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updateData),
      })
      const updatedUser = await response.json()
      if (!response.ok) throw new Error(updatedUser.error)
      setUser(updatedUser) // Sync with server response
      toast.success('Preferences saved.')
    } catch (error) {
      toast.error('Failed to save preferences', { description: error.message })
      // Here you might want to re-fetch the user to revert the optimistic update
    }
  }, [])

  const value = { user, isLoading, login, logout, updateUserPreferences }

  if (isLoading && !user) {
    return <LoadingOverlay isLoading={true} text="Authorizing..." />
  }

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}

```

## 📄 src/lib/auth/client.js
*Lines: 16, Size: 383 Bytes*

```javascript
// Full Path: headlines/src/lib/auth/client.js
'use client'

import { useContext } from 'react'
import { AuthContext } from './AuthProvider'

export const useAuth = () => {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}

export { AuthProvider } from './AuthProvider'

```

## 📄 src/lib/auth/getCookies.js
*Lines: 36, Size: 791 Bytes*

```javascript
'use server'

/**
 * An environment-aware cookie accessor.
 */
export async function getCookies() {
  if (
    process.env.IS_PIPELINE_RUN === 'true' ||
    typeof window !== 'undefined' ||
    !process.env.NEXT_RUNTIME
  ) {
    // Return a mock for non-Next.js server environments or client-side
    return {
      get: () => undefined,
      getAll: () => [],
      has: () => false,
      set: () => {},
      delete: () => {},
    }
  }
  try {
    const { cookies } = await import('next/headers')
    return cookies()
  } catch (error) {
    console.error('Failed to import cookies from next/headers:', error.message)
    // Fallback mock
    return {
      get: () => undefined,
      getAll: () => [],
      has: () => false,
      set: () => {},
      delete: () => {},
    }
  }
}

```

## 📄 src/lib/auth/server.js
*Lines: 5, Size: 286 Bytes*

```javascript
// Full Path: headlines/src/lib/auth/server.js
// This file is the designated server-side entry point for auth utilities.
// It re-exports functions from other modules to create a clean API boundary.
export { verifySession, verifyAdmin, getUserIdFromSession } from './verifySession.js'

```

## 📄 src/lib/auth/verifySession.js
*Lines: 50, Size: 1.43 KB*

```javascript
'use server'

import { getCookies } from './getCookies.js'
import * as jose from 'jose'
import { env } from '@headlines/config/next'

const JWT_COOKIE_NAME = 'headlines-jwt'

async function verifyToken(token) {
  if (!token) return { user: null, error: 'No token provided.' }
  try {
    const secret = new TextEncoder().encode(env.JWT_SECRET)
    const { payload } = await jose.jwtVerify(token, secret)
    return { user: payload, error: null }
  } catch (e) {
    return { user: null, error: 'Invalid or expired session token.' }
  }
}

export async function verifySession() {
  const cookieStore = await getCookies()
  const token = cookieStore.get(JWT_COOKIE_NAME)?.value
  return await verifyToken(token)
}

export async function getUserIdFromSession() {
  const { user } = await verifySession()
  return user ? user.userId : null
}

// This function is now simplified and has no database side-effects.
// It relies on a user having been seeded manually.
export async function verifyAdmin() {
  const { user, error } = await verifySession()

  // A simple check for a known dev user email can be a convenience.
  if (process.env.NODE_ENV === 'development' && user?.email === 'dev@headlines.dev') {
    return { isAdmin: true, user, error: null }
  }

  if (error || user?.role !== 'admin') {
    return {
      isAdmin: false,
      error: error || 'Administrator access required.',
      user: null,
    }
  }
  return { isAdmin: true, user, error: null }
}

```

## 📄 src/lib/constants.js
*Lines: 24, Size: 1.09 KB*

```javascript
// File: apps/client/src/lib/constants.js

// API Routes
export const API_ARTICLES = '/api-admin/articles'
export const API_EVENTS = '/api-admin/events'
export const API_OPPORTUNITIES = '/api-admin/opportunities'
export const API_SUBSCRIBERS = '/api-admin/subscribers'
export const API_COUNTRIES = '/api-admin/countries'
export const API_SOURCES = '/api-admin/sources'
export const API_WATCHLIST = '/api-admin/watchlist'
export const API_WATCHLIST_SUGGESTIONS = '/api-admin/watchlist/suggestions'
export const API_SUGGESTIONS = '/api-admin/suggestions'
export const API_SETTINGS = '/api-admin/settings'

// React Query Keys (used for client-side caching and invalidation)
export const QUERY_KEY_ARTICLES = 'adminArticles'
export const QUERY_KEY_EVENTS = 'adminEvents'
export const QUERY_KEY_OPPORTUNITIES = 'adminOpportunities'
export const QUERY_KEY_SUBSCRIBERS = 'adminSubscribers'
export const QUERY_KEY_COUNTRIES = 'adminCountries'
export const QUERY_KEY_SOURCES = 'adminSources'
export const QUERY_KEY_WATCHLIST = 'adminWatchlist'
export const QUERY_KEY_WATCHLIST_SUGGESTIONS = 'adminWatchlistSuggestions'

```

## 📄 src/lib/init-shared-logic.js
*Lines: 20, Size: 478 Bytes*

```javascript
// File: apps/client/src/lib/init-shared-logic.js (version 2.3 - FINAL)
'use server'

import { initializeSettings } from '@headlines/config/next'
// dbConnect is not used here.

let isInitialized = false

export async function initializeSharedLogic() {
  if (isInitialized) {
    return
  }

  // This function's only job is loading settings into memory.
  // DB connection is handled by data-access functions directly.
  await initializeSettings()

  isInitialized = true
}

```

## 📄 src/lib/store/use-app-store.js
*Lines: 100, Size: 2.86 KB*

```javascript
// File: apps/client/src/lib/store/use-app-store.js (Corrected Export)
'use client'

import { create } from 'zustand'
import { persist, createJSONStorage } from 'zustand/middleware'
import { useState, useEffect } from 'react'

const useAppStore = create(
  persist(
    (set, get) => ({
      // --- Chat State ---
      chats: [],
      activeChatId: null,
      chatContextPrompt: '',
      deletePreferences: {
        skipArticleConfirmation: false,
        skipOpportunityConfirmation: false,
      },
      setChatContextPrompt: (prompt) => set({ chatContextPrompt: prompt }),
      createChat: () => {
        const newChatId = `chat_${Date.now()}`
        const newChat = {
          id: newChatId,
          title: 'New Chat',
          createdAt: new Date().toISOString(),
          messages: [],
        }
        set((state) => ({ chats: [newChat, ...state.chats], activeChatId: newChatId }))
        return newChatId
      },
      selectChat: (id) => {
        const { chats } = get()
        if (chats.find((c) => c.id === id)) {
          set({ activeChatId: id })
        } else if (chats.length > 0) {
          set({ activeChatId: chats[0].id })
        } else {
          get().createChat()
        }
      },
      updateChatTitle: (id, newTitle) =>
        set((state) => ({
          chats: state.chats.map((chat) =>
            chat.id === id ? { ...chat, title: newTitle } : chat
          ),
        })),
      getMessagesForChat: (id) => {
        const chat = get().chats.find((c) => c.id === id)
        return chat ? chat.messages : []
      },
      setMessagesForChat: (id, messages) =>
        set((state) => ({
          chats: state.chats.map((chat) =>
            chat.id === id ? { ...chat, messages } : chat
          ),
        })),
      init: () => {
        if (useAppStore.getState().chats.length === 0) {
          get().createChat()
        } else {
          const { chats, activeChatId } = get()
          if (!activeChatId || !chats.find((c) => c.id === activeChatId)) {
            get().selectChat(chats[0].id)
          }
        }
      },
      setDeletePreference: (key, value) => {
        set((state) => ({
          deletePreferences: { ...state.deletePreferences, [key]: value },
        }))
      },
    }),
    {
      name: 'headlines-app-storage',
      storage: createJSONStorage(() => localStorage),
      partialize: (state) => ({
        chats: state.chats,
        activeChatId: state.activeChatId,
        deletePreferences: state.deletePreferences,
      }),
    }
  )
)

// A simple hook to prevent rendering until the client has mounted and the store is hydrated.
const useHasHydrated = () => {
  const [hydrated, setHydrated] = useState(false)

  useEffect(() => {
    setHydrated(true)
  }, [])

  return hydrated
}

// --- THE FIX IS HERE ---
// We need to export the hook alongside the default export.
export { useHasHydrated }
export default useAppStore

```

## 📄 tailwind.config.js
*Lines: 100, Size: 3.09 KB*

```javascript
// File: apps/client/tailwind.config.js

const { fontFamily } = require('tailwindcss/defaultTheme')

/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ['class'],
  plugins: [require('tailwindcss-animate'), require('@tailwindcss/typography')],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px',
      },
    },
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      fontFamily: {
        sans: ['var(--font-sans)', ...fontFamily.sans],
        serif: ['Merriweather', 'serif'],
      },
      keyframes: {
        'accordion-down': {
          from: { height: '0' },
          to: { height: 'var(--radix-accordion-content-height)' },
        },
        'accordion-up': {
          from: { height: 'var(--radix-accordion-content-height)' },
          to: { height: '0' },
        },
        'fade-in-up': {
          '0%': { opacity: '0', transform: 'translateY(10px)' },
          '100%': { opacity: '1', transform: 'translateY(0)' },
        },
        shake: {
          '0%, 100%': { transform: 'translateX(0)' },
          '20%, 60%': { transform: 'translateX(-5px)' },
          '40%, 80%': { transform: 'translateX(5px)' },
        },
        pulse: {
          '0%, 100%': { opacity: 1, transform: 'scale(1)' },
          '50%': { opacity: 0.7, transform: 'scale(0.95)' },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
        'fade-in-up': 'fade-in-up 0.5s ease-out forwards',
        shake: 'shake 0.5s ease-in-out',
        pulse: 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
      },
    },
  },
  plugins: [require('tailwindcss-animate'), require('@tailwindcss/typography')],
}
```


================================================================================

# 📦 PACKAGE: DASHBOARD

# 📁 PROJECT DIRECTORY STRUCTURE

Total: 244 files, 114 directories

```
headlines/
├── 📁 public/
│   ├── 📁 icons/
│   │   ├── 📄 apple-touch-icon.png
│   │   ├── 📄 icon-16x16.png
│   │   ├── 📄 icon-192x192.png
│   │   ├── 📄 icon-32x32.png
│   │   ├── 📄 icon-512x512.png
│   │   └── 📄 icon-96x96.png
│   ├── 📁 sounds/
│   │   └── 📄 notification.mp3
│   ├── 📄 file.svg
│   ├── 📄 globe.svg
│   ├── 📄 manifest.json
│   ├── 📄 next.svg
│   ├── 📄 sw.js
│   └── 📄 window.svg
├── 📁 src/
│   ├── 📁 app/
│   │   ├── 📁 _components/
│   │   │   ├── 📄 AppShell.jsx
│   │   │   └── 📄 AppWrapper.jsx
│   │   ├── 📁 (admin)/
│   │   │   ├── 📁 articles/
│   │   │   │   ├── 📄 columns.jsx
│   │   │   │   └── 📄 page.jsx
│   │   │   ├── 📁 countries/
│   │   │   │   ├── 📁 [countryName]/
│   │   │   │   │   └── 📄 page.js
│   │   │   │   ├── 📄 columns.jsx
│   │   │   │   ├── 📄 country-editor.jsx
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📁 dashboard/
│   │   │   │   ├── 📄 DashboardClientPage.jsx
│   │   │   │   └── 📄 page.jsx
│   │   │   ├── 📁 events/
│   │   │   │   ├── 📄 columns.jsx
│   │   │   │   └── 📄 page.jsx
│   │   │   ├── 📁 opportunities/
│   │   │   │   ├── 📄 columns.jsx
│   │   │   │   └── 📄 page.jsx
│   │   │   ├── 📁 runs/
│   │   │   │   └── 📁 [runId]/
│   │   │   │       └── 📄 page.js
│   │   │   ├── 📁 scraper-ide/
│   │   │   │   ├── 📁 _components/
│   │   │   │   │   ├── 📄 AnalysisPanel.jsx
│   │   │   │   │   ├── 📄 ArticleExtractorView.jsx
│   │   │   │   │   ├── 📄 ConfirmationModal.jsx
│   │   │   │   │   ├── 📄 ScraperIde.jsx
│   │   │   │   │   ├── 📄 SourceDefinitionPanel.jsx
│   │   │   │   │   ├── 📄 SourceIdeLayout.jsx
│   │   │   │   │   ├── 📄 SourceSelectorInput.jsx
│   │   │   │   │   └── 📄 TabsBar.jsx
│   │   │   │   └── 📄 page.jsx
│   │   │   ├── 📁 settings/
│   │   │   │   ├── 📄 page.jsx
│   │   │   │   └── 📄 settings-form.jsx
│   │   │   ├── 📁 sources/
│   │   │   │   ├── 📄 page.jsx
│   │   │   │   └── 📄 use-source-health-checker.js
│   │   │   ├── 📁 users/
│   │   │   │   ├── 📄 columns.jsx
│   │   │   │   ├── 📄 country-subscription-manager.jsx
│   │   │   │   ├── 📄 page.jsx
│   │   │   │   └── 📄 user-editor.jsx
│   │   │   ├── 📁 watchlist/
│   │   │   │   ├── 📄 columns.jsx
│   │   │   │   ├── 📄 page.jsx
│   │   │   │   ├── 📄 suggestion-search-term-manager.jsx
│   │   │   │   └── 📄 watchlist-editor.jsx
│   │   │   ├── 📄 DesktopOnlyWrapper.jsx
│   │   │   └── 📄 layout.js
│   │   ├── 📁 (client)/
│   │   │   ├── 📁 articles/
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📁 chat/
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📁 events/
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📁 opportunities/
│   │   │   │   ├── 📁 [opportunityId]/
│   │   │   │   │   └── 📄 page.js
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📁 settings/
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📁 upload/
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📄 client-layout-wrapper.js
│   │   │   └── 📄 layout.js
│   │   ├── 📁 api/
│   │   │   ├── 📁 ai-client/
│   │   │   │   ├── 📁 analyze-source-structure/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 debug-source/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 enrich-entity/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 full-source-analysis/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 scrape/
│   │   │   │   │   └── 📁 test-recipe/
│   │   │   │   │       └── 📄 route.js
│   │   │   │   └── 📁 suggest-search-terms/
│   │   │   │       └── 📄 route.js
│   │   │   ├── 📁 analytics/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 articles/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 auth/
│   │   │   │   ├── 📁 login/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📁 logout/
│   │   │   │       └── 📄 route.js
│   │   │   ├── 📁 chat/
│   │   │   │   ├── 📁 title/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 events/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 opportunities/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 push/
│   │   │   │   └── 📁 subscribe/
│   │   │   │       └── 📄 route.js
│   │   │   ├── 📁 subscribers/
│   │   │   │   └── 📁 me/
│   │   │   │       └── 📄 route.js
│   │   │   ├── 📁 upload/
│   │   │   │   └── 📁 process-article/
│   │   │   │       └── 📄 route.js
│   │   │   └── 📁 user/
│   │   │       ├── 📁 interactions/
│   │   │       │   └── 📄 route.js
│   │   │       ├── 📁 profile/
│   │   │       │   └── 📄 route.js
│   │   │       └── 📁 settings/
│   │   │           └── 📁 clear-discarded/
│   │   │               └── 📄 route.js
│   │   ├── 📁 api-admin/
│   │   │   ├── 📁 ai-admin/
│   │   │   │   ├── 📁 analyze-source-structure/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 discover-sources/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 enrich-entity/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 executive-summary/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 full-source-analysis/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📁 suggest-search-terms/
│   │   │   │       └── 📄 route.js
│   │   │   ├── 📁 articles/
│   │   │   │   ├── 📁 [articleId]/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 countries/
│   │   │   │   ├── 📁 [countryId]/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 dashboard-stats/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 events/
│   │   │   │   ├── 📁 [eventId]/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 export/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 opportunities/
│   │   │   │   ├── 📁 [opportunityId]/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 relationships/
│   │   │   │   ├── 📁 link/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📁 unlink/
│   │   │   │       └── 📄 route.js
│   │   │   ├── 📁 run-verdicts/
│   │   │   │   ├── 📁 [runId]/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 scrape/
│   │   │   │   ├── 📁 analyze-url/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 debug-content-selector/
│   │   │   │   ├── 📁 fetch-html/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 test-config/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📁 test-recipe/
│   │   │   │       └── 📄 route.js
│   │   │   ├── 📁 settings/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 sources/
│   │   │   │   ├── 📁 [sourceId]/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 subscribers/
│   │   │   │   ├── 📁 [subscriberId]/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 suggestions/
│   │   │   │   └── 📄 route.jsx
│   │   │   └── 📁 watchlist/
│   │   │       ├── 📁 [entityId]/
│   │   │       │   └── 📄 route.js
│   │   │       ├── 📁 suggestions/
│   │   │       │   ├── 📁 [suggestionId]/
│   │   │       │   │   └── 📄 route.js
│   │   │       │   └── 📄 route.js
│   │   │       └── 📄 route.js
│   │   ├── 📁 login/
│   │   │   ├── 📄 layout.js
│   │   │   └── 📄 page.jsx
│   │   ├── 📄 globals.css
│   │   ├── 📄 layout.js
│   │   ├── 📄 not-found.jsx
│   │   ├── 📄 page.js
│   │   └── 📄 providers.jsx
│   ├── 📁 components/
│   │   ├── 📁 admin/
│   │   │   ├── 📄 AdminHeader.jsx
│   │   │   ├── 📄 AdminNavTabs.jsx
│   │   │   ├── 📄 article-analysis-viewer.jsx
│   │   │   ├── 📄 main-nav.jsx
│   │   │   ├── 📄 multi-select.jsx
│   │   │   ├── 📄 RelationshipManager.jsx
│   │   │   ├── 📄 source-list.jsx
│   │   │   ├── 📄 test-results-viewer.jsx
│   │   │   ├── 📄 theme-provider.jsx
│   │   │   └── 📄 theme-toggle.jsx
│   │   ├── 📁 client/
│   │   │   ├── 📁 chat/
│   │   │   │   ├── 📄 ChatInput.jsx
│   │   │   │   ├── 📄 ChatLoadingIndicator.jsx
│   │   │   │   ├── 📄 ChatMessage.jsx
│   │   │   │   ├── 📄 ChatScrollAnchor.jsx
│   │   │   │   └── 📄 ChatSidebar.jsx
│   │   │   ├── 📁 events/
│   │   │   │   ├── 📄 EventCardDesktop.jsx
│   │   │   │   ├── 📄 EventCardDetails.jsx
│   │   │   │   └── 📄 EventCardMobile.jsx
│   │   │   ├── 📁 swipe/
│   │   │   │   └── 📄 SwipeToDelete.jsx
│   │   │   ├── 📄 AnimatedList.jsx
│   │   │   ├── 📄 ArticleCard.jsx
│   │   │   ├── 📄 ArticleList.jsx
│   │   │   ├── 📄 ArticleListWrapper.jsx
│   │   │   ├── 📄 ChatManager.jsx
│   │   │   ├── 📄 ChatView.jsx
│   │   │   ├── 📄 CountrySubscriptionEditor.jsx
│   │   │   ├── 📄 DataView.jsx
│   │   │   ├── 📄 DeletionConfirmationDialog.jsx
│   │   │   ├── 📄 EventContextDialog.jsx
│   │   │   ├── 📄 EventList.jsx
│   │   │   ├── 📄 EventListWrapper.jsx
│   │   │   ├── 📄 GlobalCountrySelector.jsx
│   │   │   ├── 📄 Header.jsx
│   │   │   ├── 📄 InfiniteScrollLoader.jsx
│   │   │   ├── 📄 InstallPwaButton.jsx
│   │   │   ├── 📄 IOSInstallInstructions.jsx
│   │   │   ├── 📄 MainNavTabs.jsx
│   │   │   ├── 📄 NotificationToggles.jsx
│   │   │   ├── 📄 OpportunityCard.jsx
│   │   │   ├── 📄 OpportunityFilters.jsx
│   │   │   ├── 📄 OpportunityListWrapper.jsx
│   │   │   ├── 📄 PaginationControls.jsx
│   │   │   ├── 📄 ServiceWorkerProvider.js
│   │   │   ├── 📄 SettingsForm.jsx
│   │   │   ├── 📄 SplashScreen.jsx
│   │   │   ├── 📄 StatsBar.jsx
│   │   │   ├── 📄 SynthesizedEventCard.jsx
│   │   │   └── 📄 UploadView.jsx
│   │   └── 📁 shared/
│   │       ├── 📁 elements/
│   │       │   ├── 📄 accordion.jsx
│   │       │   ├── 📄 alert-dialog.jsx
│   │       │   ├── 📄 badge.jsx
│   │       │   ├── 📄 button.jsx
│   │       │   ├── 📄 card.jsx
│   │       │   ├── 📄 checkbox.jsx
│   │       │   ├── 📄 command.jsx
│   │       │   ├── 📄 dialog.jsx
│   │       │   ├── 📄 dropdown-menu.jsx
│   │       │   ├── 📄 index.js
│   │       │   ├── 📄 input.jsx
│   │       │   ├── 📄 label.jsx
│   │       │   ├── 📄 popover.jsx
│   │       │   ├── 📄 scroll-area.jsx
│   │       │   ├── 📄 select.jsx
│   │       │   ├── 📄 separator.jsx
│   │       │   ├── 📄 sheet.jsx
│   │       │   ├── 📄 sonner.jsx
│   │       │   ├── 📄 switch.jsx
│   │       │   ├── 📄 table.jsx
│   │       │   ├── 📄 tabs.jsx
│   │       │   ├── 📄 textarea.jsx
│   │       │   └── 📄 tooltip.jsx
│   │       ├── 📄 ConfirmationDialog.jsx
│   │       ├── 📄 data-table.jsx
│   │       ├── 📄 DataTableColumnHeader.jsx
│   │       ├── 📄 EditableCell.jsx
│   │       ├── 📄 ExportButton.jsx
│   │       ├── 📄 index.js
│   │       ├── 📄 LoadingOverlay.jsx
│   │       ├── 📄 page-header.jsx
│   │       ├── 📄 PremiumSpinner.jsx
│   │       ├── 📄 Skeleton.jsx
│   │       ├── 📄 SkeletonCard.jsx
│   │       └── 📄 ViewHeader.jsx
│   ├── 📁 config/
│   │   └── 📄 constants.js
│   ├── 📁 hooks/
│   │   ├── 📄 index.js
│   │   ├── 📄 use-debounce.js
│   │   ├── 📄 use-entity-manager.js
│   │   ├── 📄 use-has-hydrated.js
│   │   ├── 📄 use-push-manager.js
│   │   └── 📄 use-realtime-updates.js
│   ├── 📁 lib/
│   │   ├── 📁 auth/
│   │   │   ├── 📄 AuthProvider.js
│   │   │   ├── 📄 client.js
│   │   │   ├── 📄 getCookies.js
│   │   │   ├── 📄 server.js
│   │   │   └── 📄 verifySession.js
│   │   ├── 📁 store/
│   │   │   └── 📄 use-app-store.js
│   │   ├── 📁 utils/
│   │   │   ├── 📁 data/
│   │   │   │   ├── 📄 countries.json
│   │   │   │   └── 📄 languages.json
│   │   │   ├── 📁 hooks/
│   │   │   ├── 📄 apiCallTracker.js
│   │   │   ├── 📄 countries.js
│   │   │   ├── 📄 helpers.js
│   │   │   ├── 📄 hooks.js
│   │   │   ├── 📄 index.js
│   │   │   ├── 📄 languages.js
│   │   │   └── 📄 logger.js
│   │   ├── 📄 api-client.js
│   │   ├── 📄 api-handler.js
│   │   ├── 📄 constants.js
│   │   ├── 📄 env.mjs
│   │   ├── 📄 init-shared-logic.js
│   │   ├── 📄 mongodb.js
│   │   └── 📄 monitoring.js
│   └── 📄 middleware.js
├── 📄 .gitignore
├── 📄 app.config.js
├── 📄 components.json
├── 📄 eslint.config.mjs
├── 📄 jsconfig.json
├── 📄 next.config.mjs
├── 📄 package.json
├── 📄 postcss.config.cjs
├── 📄 sources.txt
└── 📄 tailwind.config.js
```

# 📋 PROJECT METADATA

**Generated**: 2025-09-29T13:20:36.370Z
**Repository Path**: /home/mark/Repos/projects/headlines/apps/client
**Total Files**: 233
**Package**: @headlines/dashboard@1.0.0




---


## 📄 .gitignore
*Lines: 44, Size: 526 Bytes*

```
# .gitignore
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
/public/workbox*.*
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions
sourcePack.txt

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
```

## 📄 app.config.js
*Lines: 11, Size: 545 Bytes*

```javascript
// apps/admin/app.config.js (version 3.0.0)
// This file provides the minimal configuration needed by the shared
// scraper-logic package when it's used by the admin app's API routes.

export const CONCURRENCY_LIMIT = 2 // Lower limit for admin app tests

// We provide the OPENAI_API_KEY directly from the process environment
// The validation will be handled by initializeSharedLogic before these are used.
export const OPENAI_API_KEY = process.env.OPENAI_API_KEY
export const LLM_MODEL_UTILITY = process.env.LLM_MODEL_UTILITY || 'gpt-5-nano'

```

## 📄 components.json
*Lines: 22, Size: 452 Bytes*

```json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": false,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/app/globals.css",
    "baseColor": "stone",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/shared",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

```

## 📄 eslint.config.mjs
*Lines: 12, Size: 461 Bytes*

```
// Full Path: headlines/apps/client/eslint.config.mjs
import eslintConfigNext from 'eslint-config-next'

// This is the modern, correct way to configure ESLint with Next.js
// in a flat config file (`eslint.config.mjs`). The older `.eslintrc.json`
// format can cause build "renderer confusion", leading to the exact error
// you are seeing, even when layouts are correct.
export default [
  eslintConfigNext,
  // You can add custom rules here if needed.
]

```

## 📄 jsconfig.json
*Lines: 9, Size: 97 Bytes*

```json
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

```

## 📄 next.config.mjs
*Lines: 46, Size: 1.19 KB*

```
// File: headlines/apps/client/next.config.mjs (Corrected and Simplified)
/** @type {import('next').NextConfig} */

import path from 'path'
import { fileURLToPath } from 'url'

// Get the directory name of the current module
const __dirname = path.dirname(fileURLToPath(import.meta.url))

const nextConfig = {
  transpilePackages: [
    '@headlines/utils-server',
    '@headlines/config',
    '@headlines/data-access',
    '@headlines/models',
    '@headlines/prompts',
    '@headlines/ai-services',
    // --- ADD THIS ---
    '@headlines/utils-shared',
  ],
  webpack: (config, { isServer }) => {
    // --- START: DEFINITIVE FIX FOR DUPLICATE REACT ---
    config.resolve.symlinks = false
    config.resolve.alias['react'] = path.resolve(__dirname, 'node_modules/react')
    config.resolve.alias['react-dom'] = path.resolve(__dirname, 'node_modules/react-dom')
    // --- END: DEFINITIVE FIX ---

    // This section can remain as is
    config.externals.push(
      'bcrypt',
      'playwright',
      'sharp',
      'mongodb-client-encryption',
      'aws4',
      'undici'
    )

    if (isServer) {
      config.externals.push('onnxruntime-node')
    }
    return config
  },
}

export default nextConfig

```

## 📄 package.json
*Lines: 76, Size: 2.28 KB*

```json
{
  "name": "@headlines/dashboard",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@headlines/ai-services": "workspace:*",
    "@headlines/config": "workspace:*",
    "@headlines/data-access": "workspace:*",
    "@headlines/models": "workspace:*",
    "@headlines/prompts": "workspace:*",
    "@headlines/scraper-logic": "workspace:*",
    "@headlines/utils-server": "workspace:*",
    "@headlines/utils-shared": "workspace:*",
    "@mozilla/readability": "0.6.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-dialog": "^1.1.1",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.2",
    "@tanstack/react-query": "^5.45.1",
    "@tanstack/react-query-devtools": "^5.45.1",
    "@tanstack/react-table": "^8.19.2",
    "@upstash/redis": "^1.31.5",
    "@xenova/transformers": "^2.1.7",
    "cheerio": "^1.0.0-rc.12",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "framer-motion": "^11.2.10",
    "jose": "^6.1.0",
    "jsdom": "^24.1.0",
    "lucide-react": "^0.379.0",
    "moment": "^2.30.1",
    "mongoose": "^8.4.1",
    "next": "14.2.4",
    "next-themes": "^0.3.0",
    "pusher-js": "^8.4.0",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-intersection-observer": "^9.10.3",
    "react-markdown": "^9.0.1",
    "react-textarea-autosize": "^8.5.3",
    "rehype-raw": "^7.0.0",
    "remark-gfm": "^4.0.0",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.3.0",
    "tailwindcss-animate": "^1.0.7",
    "web-push": "^3.6.7",
    "zod": "^3.23.8",
    "zustand": "^4.5.2"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.13",
    "autoprefixer": "^10.4.19",
    "postcss": "^8",
    "tailwindcss": "^3.4.1"
  },
  "type": "module"
}

```

## 📄 postcss.config.cjs
*Lines: 13, Size: 274 Bytes*

```
// apps/client/postcss.config.cjs
const path = require('path')

module.exports = {
  plugins: {
    tailwindcss: {
      // It's crucial that this points to the correct file name.
      config: path.join(__dirname, 'tailwind.config.js'),
    },
    autoprefixer: {},
  },
}

```

## 📄 public/manifest.json
*Lines: 28, Size: 631 Bytes*

```json
{
  "name": "Headlines Intelligence",
  "short_name": "Headlines",
  "description": "An interface to browse, search, and filter wealth event articles.",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#111827",
  "theme_color": "#111827",
  "icons": [
    {
      "src": "/icons/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "/icons/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    },
    {
      "src": "/icons/apple-touch-icon.png",
      "sizes": "180x180",
      "type": "image/png"
    }
  ]
}

```

## 📄 public/sw.js
*Lines: 95, Size: 2.8 KB*

```javascript
// public/sw.js (version 5.0)
// This service worker is designed for reliability and immediate activation.

self.addEventListener('install', (event) => {
  console.log('[Service Worker] Install event fired. New worker installing.')
  // Force the waiting service worker to become the active service worker.
  event.waitUntil(self.skipWaiting())
  console.log('[Service Worker] skipWaiting() called.')
})

self.addEventListener('activate', (event) => {
  console.log('[Service Worker] Activate event fired. New worker activating.')
  // Take control of all pages under this scope immediately.
  event.waitUntil(self.clients.claim())
  console.log('[Service Worker] clients.claim() called.')
})

self.addEventListener('push', (event) => {
  console.log('[Service Worker] Push Received.')
  if (!event.data) {
    console.error('[Service Worker] Push event but no data')
    return
  }
  console.log(`[Service Worker] Push had this data: "${event.data.text()}"`)

  let data
  try {
    data = event.data.json()
  } catch (e) {
    console.error('[Service Worker] Failed to parse push data as JSON.')
    data = {
      title: 'New Update',
      body: event.data.text(),
      url: '/',
    }
  }

  const title = data.title || 'New Intelligence Alert'
  const options = {
    body: data.body || 'New content has been added.',
    icon: data.icon || '/icons/icon-192x192.png',
    badge: '/icons/icon-96x96.png', // A smaller badge icon for some platforms
    vibrate: [100, 50, 100],
    data: {
      url: data.url || '/', // Ensure URL is always present in data
    },
    actions: [
      { action: 'view_event', title: 'View Event' },
      { action: 'dismiss', title: 'Dismiss' },
    ],
  }

  console.log(
    '[Service Worker] Showing notification with options:',
    JSON.stringify(options)
  )
  event.waitUntil(self.registration.showNotification(title, options))
})

self.addEventListener('notificationclick', (event) => {
  console.log(
    '[Service Worker] Notification click Received.',
    event.action,
    event.notification
  )

  const urlToOpen = new URL(event.notification.data.url, self.location.origin).href
  event.notification.close()

  if (event.action === 'dismiss') {
    console.log('[Service Worker] Dismiss action handled.')
    return
  }

  event.waitUntil(
    self.clients
      .matchAll({
        type: 'window',
        includeUncontrolled: true,
      })
      .then((clientList) => {
        for (const client of clientList) {
          if (client.url === urlToOpen && 'focus' in client) {
            console.log('[Service Worker] Found matching client to focus.')
            return client.focus()
          }
        }
        if (self.clients.openWindow) {
          console.log('[Service Worker] No matching client found, opening new window.')
          return self.clients.openWindow(urlToOpen)
        }
      })
  )
})

```

## 📄 sources.txt
*Lines: 59, Size: 1022 Bytes*

```
Finanswatch

https://finanswatch.dk/
Add
DR Nyheder – Penge

https://www.dr.dk/nyheder/penge
Add
TV 2 Nyheder – Erhverv

https://nyheder.tv2.dk/erhverv
Add
The Copenhagen Post

https://cphpost.dk/
Add
Business.dk

https://www.business.dk/
Add
TechSavvy (Danish startup & VC coverage)

https://techsavvy.media/
Add
DVCA (Danish Venture Capital and Private Equity Association)

https://www.dvca.dk/
Add
The Nordic Web (Nordic startup & VC)

https://thenordicweb.com/
Add
Tech.eu (European tech & VC, strong Nordic coverage)

https://tech.eu/
Add
Sifted (European startup & VC journalism)

https://sifted.eu/
Add
Mergermarket

https://www.mergermarket.com/
Add
Reuters — Denmark (business & deal coverage)

https://www.reuters.com/places/denmark
Add
Bloomberg

https://www.bloomberg.com/
Add
PwC Denmark — Transaction Services / Deals

https://www.pwc.dk/da/transaction-services.html
Add
Deloitte Denmark — Mergers & Acquisitions

https://www2.deloitte.com/dk/da/pages/finance/articles/mergers-and-acquisitions.html
```

## 📄 src/app/(admin)/DesktopOnlyWrapper.jsx
*Lines: 44, Size: 1.28 KB*

```jsx
// Full Path: headlines/src/components/admin/DesktopOnlyWrapper.jsx
'use client'

import { useState, useEffect } from 'react'
import { Monitor, Smartphone } from 'lucide-react'

const useIsDesktop = () => {
  const [isDesktop, setIsDesktop] = useState(true)

  useEffect(() => {
    const checkScreenSize = () => {
      setIsDesktop(window.innerWidth >= 1024) // lg breakpoint in Tailwind
    }

    // Check on initial mount
    checkScreenSize()

    // Add event listener for window resize
    window.addEventListener('resize', checkScreenSize)

    // Cleanup listener on component unmount
    return () => window.removeEventListener('resize', checkScreenSize)
  }, [])

  return isDesktop
}

export function DesktopOnlyWrapper({ children }) {
  const isDesktop = useIsDesktop()

  if (!isDesktop) {
    return (
      <div className="flex flex-col items-center justify-center h-screen bg-background text-foreground text-center p-4">
        <Monitor className="h-16 w-16 mb-4 text-primary" />
        <h1 className="text-2xl font-bold">Admin Panel is Desktop-Only</h1>
        <p className="mt-2 text-muted-foreground max-w-sm">
          For the best experience and full functionality, please access the admin command center on a larger screen.
        </p>
      </div>
    )
  }

  return <>{children}</>
}
```

## 📄 src/app/(admin)/articles/columns.jsx
*Lines: 82, Size: 2.59 KB*

```jsx
// Full Path: headlines/src/app/(admin)/articles/columns.jsx
'use client'

import React from 'react'
import { Button, Badge, EditableCell, DataTableColumnHeader } from '@/components/shared' // CORRECTED IMPORT
import { Trash2, ExternalLink } from 'lucide-react'
import { format } from 'date-fns'

export const columns = (onUpdate, onDelete) => [
  {
    accessorKey: 'relevance_headline',
    header: ({ column }) => <DataTableColumnHeader column={column} title="HL Score" />,
    cell: ({ row }) => <Badge variant="outline">{row.original.relevance_headline}</Badge>,
  },
  {
    accessorKey: 'relevance_article',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Article Score" />
    ),
    cell: ({ row }) => (
      <Badge variant={row.original.relevance_article > 50 ? 'default' : 'secondary'}>
        {row.original.relevance_article || 'N/A'}
      </Badge>
    ),
  },
  {
    accessorKey: 'headline',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Headline" />,
    cell: ({ row }) => (
      <EditableCell
        initialValue={row.original.headline}
        onSave={(newValue) => onUpdate(row.original, { headline: newValue })}
      />
    ),
  },
  {
    accessorKey: 'newspaper',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Source" />,
    cell: ({ row }) => (
      <EditableCell
        initialValue={row.original.newspaper}
        onSave={(newValue) => onUpdate(row.original, { newspaper: newValue })}
      />
    ),
  },
  {
    accessorKey: 'country',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Country" />,
    cell: ({ row }) => (
      <EditableCell
        initialValue={row.original.country}
        onSave={(newValue) => onUpdate(row.original, { country: newValue })}
      />
    ),
  },
  {
    accessorKey: 'createdAt',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Discovered" />,
    cell: ({ row }) => format(new Date(row.original.createdAt), 'dd MMM yyyy, HH:mm'),
  },
  {
    id: 'actions',
    cell: ({ row }) => (
      <div className="flex items-center justify-end gap-2">
        <a href={row.original.link} target="_blank" rel="noopener noreferrer">
          <Button variant="ghost" size="icon" className="h-8 w-8">
            <ExternalLink className="h-4 w-4" />
          </Button>
        </a>
        <Button
          variant="ghost"
          size="icon"
          className="h-8 w-8 text-muted-foreground"
          onClick={() => onDelete(row.original._id)}
        >
          <Trash2 className="h-4 w-4" />
        </Button>
      </div>
    ),
  },
]

```

## 📄 src/app/(admin)/articles/page.jsx
*Lines: 76, Size: 2.06 KB*

```jsx
// apps/admin/src/app/(protected)/articles/page.jsx (version 3.1.0)
'use client'

import { PageHeader, DataTable, ExportButton } from '@components/shared'
import { columns } from './columns'
import { useEntityManager } from '@/hooks/use-entity-manager'
import { toast } from 'sonner'
import { useCallback } from 'react'
import { deleteArticle, updateArticle, handleExport } from '@/lib/api-client'
import { API_ARTICLES, QUERY_KEY_ARTICLES } from '@/lib/constants'

export default function ArticlesPage() {
  const {
    data,
    setData,
    total,
    isLoading,
    refetch,
    page,
    setPage,
    sorting,
    setSorting,
    columnFilters,
    setColumnFilters,
  } = useEntityManager(API_ARTICLES, QUERY_KEY_ARTICLES, [
    { id: 'createdAt', desc: true },
  ])

  const handleDelete = useCallback(
    async (articleId) => {
      /* ... implementation ... */
    },
    [data, setData, refetch]
  )
  const handleUpdate = useCallback(
    async (article, updateData) => {
      /* ... implementation ... */
    },
    [setData, refetch]
  )

  const onExport = (fileType) => {
    const sort = sorting[0]
      ? `${sorting[0].id}_${sorting[0].desc ? 'desc' : 'asc'}`
      : 'createdAt_desc'
    return handleExport('articles', fileType, columnFilters, sort)
  }

  return (
    <div className="flex flex-col h-full">
      <PageHeader
        title="Article Management"
        description={`Review and manage all ${total.toLocaleString()} articles.`}
      >
        <ExportButton hasData={data && data.length > 0} onExport={onExport} />
      </PageHeader>
      <div className="mt-8 flex-grow min-h-0 max-w-none">
        <DataTable
          columns={columns(handleUpdate, handleDelete)}
          data={data}
          isLoading={isLoading}
          page={page}
          setPage={setPage}
          total={total}
          sorting={sorting}
          setSorting={setSorting}
          columnFilters={columnFilters}
          setColumnFilters={setColumnFilters}
          filterColumn="headline"
          filterPlaceholder="Filter by headline..."
        />
      </div>
    </div>
  )
}

```

## 📄 src/app/(admin)/countries/[countryName]/page.js
*Lines: 199, Size: 6.25 KB*

```javascript
'use client'

// apps/admin/src/app/countries/[countryName]/page.js (version 1.0)
// src/app/countries/[countryName]/page.js (version 1.3)
'use client'

import { useState, useEffect, useMemo } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { motion } from 'framer-motion'
import { ArrowLeft, Loader2, ServerCrash, Wand2, PlusCircle, Edit } from 'lucide-react'
import { Button } from '@components/shared'
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from '@components/shared'
import { Badge } from '@components/shared'
import { Separator } from '@components/shared'
import { toast } from 'sonner'
import { useEntityManager } from '@/hooks/use-entity-manager'

const SourceListCard = ({ title, sources, onAction, actionType }) => (
  <Card className="bg-black/20 border-white/10">
    <CardHeader>
      <CardTitle>{title}</CardTitle>
    </CardHeader>
    <CardContent>
      {sources && sources.length > 0 ? (
        <ul className="space-y-3">
          {sources.map((source, index) => (
            <li key={index} className="flex items-center justify-between">
              <div>
                <p className="font-medium">{source.name}</p>
                <a
                  href={source.url || source.sectionUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-xs text-muted-foreground hover:underline"
                >
                  {source.url || source.sectionUrl}
                </a>
              </div>
              <Button size="sm" variant="outline" onClick={() => onAction(source)}>
                {actionType === 'add' ? (
                  <PlusCircle className="h-4 w-4 mr-2" />
                ) : (
                  <Edit className="h-4 w-4 mr-2" />
                )}
                {actionType === 'add' ? 'Add' : 'Edit'}
              </Button>
            </li>
          ))}
        </ul>
      ) : (
        <p className="text-sm text-muted-foreground">No sources in this category.</p>
      )}
    </CardContent>
  </Card>
)

export default function CountryDetailPage({ params }) {
  const countryName = decodeURIComponent(params.countryName)
  const router = useRouter()
  const [suggestions, setSuggestions] = useState(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState(null)

  const { entities: allSources, isLoading: isLoadingSources } = useEntityManager(
    '/api/sources',
    'Source',
    'name'
  )

  const onboardedSources = useMemo(() => {
    if (!allSources) return []
    return allSources.filter((s) => s.country === countryName)
  }, [allSources, countryName])

  const handleDiscover = async () => {
    setIsLoading(true)
    setError(null)
    const toastId = toast.loading(
      `AI is discovering additional sources for ${countryName}...`
    )
    try {
      const res = await fetch('/api/ai/discover-sources', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          country: countryName,
          existingSources: onboardedSources.map((s) => s.name),
        }),
      })
      const data = await res.json()
      if (!res.ok) throw new Error(data.details || 'Failed to discover sources.')
      setSuggestions(data.suggestions)
      toast.success('Source discovery complete!', { id: toastId })
    } catch (err) {
      setError(err.message)
      toast.error('Discovery Failed', { id: toastId, description: err.message })
    } finally {
      setIsLoading(false)
    }
  }

  // CORRECTIVE ACTION: This now correctly navigates to the Sources page
  // and passes all necessary data via query params to pre-populate the editor.
  const handleAddSource = (source) => {
    const query = new URLSearchParams({
      action: 'add',
      name: source.name,
      country: countryName,
      sectionUrl: source.url,
      baseUrl: new URL(source.url).origin,
    }).toString()
    router.push(`/?${query}`)
  }

  const handleEditSource = (source) => {
    const query = new URLSearchParams({
      action: 'edit',
      sourceId: source._id,
    }).toString()
    router.push(`/?${query}`)
  }

  const allSuggestions = suggestions
    ? [
        ...(suggestions.financial_news || []),
        ...(suggestions.pe_vc_news || []),
        ...(suggestions.ma_news || []),
      ]
    : []

  if (isLoadingSources) {
    return (
      <div className="flex items-center justify-center h-full">
        <Loader2 className="w-12 h-12 animate-spin gemini-text" />
      </div>
    )
  }

  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
      <Button asChild variant="ghost" className="mb-4">
        <Link href="/countries">
          <ArrowLeft className="mr-2 h-4 w-4" /> Back to Countries
        </Link>
      </Button>
      <Card className="bg-black/20 border-white/10 mb-8">
        <CardHeader>
          <CardTitle className="text-3xl">Source Hub: {countryName}</CardTitle>
          <CardDescription>
            Manage existing sources or use AI to discover new ones for this country.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Button onClick={handleDiscover} disabled={isLoading}>
            {isLoading ? (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            ) : (
              <Wand2 className="mr-2 h-4 w-4" />
            )}
            {isLoading ? 'Discovering...' : 'Discover Additional Sources with AI'}
          </Button>
        </CardContent>
      </Card>

      <div className="space-y-6">
        <SourceListCard
          title="Onboarded Sources"
          sources={onboardedSources}
          onAction={handleEditSource}
          actionType="edit"
        />
        <Separator />
        {error && (
          <div className="p-4 rounded-lg bg-destructive/10 border border-destructive/50 text-destructive-foreground">
            <p>{error}</p>
          </div>
        )}
        {suggestions && (
          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }}>
            <SourceListCard
              title="AI-Suggested New Sources"
              sources={allSuggestions}
              onAction={handleAddSource}
              actionType="add"
            />
          </motion.div>
        )}
      </div>
    </motion.div>
  )
}

```

## 📄 src/app/(admin)/countries/columns.jsx
*Lines: 101, Size: 2.83 KB*

```jsx
// src/app/countries/columns.jsx (version 1.2.0)
'use client'

import { Button } from '@components/shared'
import { Badge } from '@components/shared'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from '@components/shared'
import { ArrowUpDown, MoreHorizontal } from 'lucide-react'

export const columns = (handleEdit) => [
  {
    accessorKey: 'name',
    header: ({ column }) => (
      <Button
        variant="ghost"
        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
      >
        Country Name
        <ArrowUpDown className="ml-2 h-4 w-4" />
      </Button>
    ),
  },
  {
    accessorKey: 'status',
    header: 'Status',
    cell: ({ row }) => {
      const status = row.getValue('status')
      const colorClass =
        status === 'active'
          ? 'bg-green-500/20 text-green-400 border-green-500/30'
          : 'bg-gray-500/20 text-gray-400 border-gray-500/30'
      return <Badge className={colorClass}>{status}</Badge>
    },
  },
  {
    accessorKey: 'eventCount',
    header: ({ column }) => (
      <Button
        variant="ghost"
        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
      >
        Total Events
        <ArrowUpDown className="ml-2 h-4 w-4" />
      </Button>
    ),
    cell: ({ row }) => (
      <div className="text-center font-medium">{row.original.eventCount}</div>
    ),
  },
  {
    accessorKey: 'sourceCount',
    header: 'Sources',
    cell: ({ row }) => {
      const { sourceCount, activeSourceCount } = row.original
      let activeText
      if (activeSourceCount === 0 && sourceCount > 0) {
        activeText = '(none active)'
      } else if (activeSourceCount === sourceCount && sourceCount > 0) {
        activeText = '(all active)'
      } else {
        activeText = `(${activeSourceCount} active)`
      }
      return (
        <div className="text-center">
          <span className="font-medium">{sourceCount}</span>
          <span className="text-muted-foreground text-xs ml-1">{activeText}</span>
        </div>
      )
    },
  },
  {
    id: 'actions',
    cell: ({ row }) => {
      const country = row.original
      return (
        <div className="text-right">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">Open menu</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem onClick={() => handleEdit(country._id)}>
                Edit Country
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      )
    },
  },
]

```

## 📄 src/app/(admin)/countries/country-editor.jsx
*Lines: 126, Size: 3.84 KB*

```jsx
// apps/admin/src/app/(protected)/countries/country-editor.jsx (version 2.0.1)
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import {
  Button,
  CardFooter,
  Input,
  Label,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@components/shared'
import { toast } from 'sonner'
import { Save, Loader2, PlusCircle, X } from 'lucide-react'
import { createCountry, updateCountry } from '@/lib/api-client'

const FormField = ({ id, label, children }) => (
  <div className="space-y-2">
    <Label htmlFor={id} className="text-sm font-medium text-muted-foreground pl-1">
      {label}
    </Label>
    {children}
  </div>
)

export default function CountryEditor({ country, onSave, onCancel }) {
  const [formData, setFormData] = useState(country)
  const [isSaving, setIsSaving] = useState(false)
  const [isDirty, setIsDirty] = useState(false)

  useEffect(() => {
    setFormData(country)
    setIsDirty(false)
  }, [country])

  if (!country) return null
  const isNew = !formData._id
  const handleChange = (key, value) => {
    setFormData((prev) => ({ ...prev, [key]: value }))
    setIsDirty(true)
  }

  const handleSave = async () => {
    setIsSaving(true)
    try {
      const result = isNew
        ? await createCountry(formData)
        : await updateCountry(country._id, formData)
      if (result.error) throw new Error(result.error)
      const savedCountry = result.country
      onSave(savedCountry)
      toast.success(`Country "${savedCountry.name}" ${isNew ? 'created' : 'updated'}.`)
    } catch (error) {
      toast.error(`Error saving country: ${error.message}`)
    } finally {
      setIsSaving(false)
    }
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="h-full flex flex-col"
    >
      <div className="flex justify-between items-center flex-shrink-0 p-6 border-b border-white/10">
        <div className="space-y-1">
          <h1 className="text-2xl font-bold tracking-tight flex items-center gap-2">
            {isNew && <PlusCircle />}
            {isNew ? 'Create New Country' : 'Edit Country'}
          </h1>
          <p className="text-sm text-muted-foreground">
            {isNew ? 'Add a new country to the system.' : formData.name}
          </p>
        </div>
        <Button variant="ghost" size="icon" onClick={onCancel}>
          <X className="h-4 w-4" />
        </Button>
      </div>
      <div className="flex-grow overflow-y-auto p-6 space-y-6">
        <FormField id="name" label="Country Name">
          <Input
            value={formData.name || ''}
            onChange={(e) => handleChange('name', e.target.value)}
          />
        </FormField>
        <FormField id="isoCode" label="2-Letter ISO Code">
          <Input
            value={formData.isoCode || ''}
            onChange={(e) => handleChange('isoCode', e.target.value.toUpperCase())}
            maxLength={2}
          />
        </FormField>
        <FormField label="Status">
          <Select
            value={formData.status}
            onValueChange={(v) => handleChange('status', v)}
          >
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="active">Active</SelectItem>
              <SelectItem value="inactive">Inactive</SelectItem>
            </SelectContent>
          </Select>
        </FormField>
      </div>
      <CardFooter className="mt-auto border-t border-white/10 p-6 flex justify-end">
        <Button onClick={handleSave} disabled={!isDirty || isSaving}>
          {isSaving ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Save className="mr-2 h-4 w-4" />
          )}
          {isSaving ? 'Saving...' : 'Save Changes'}
        </Button>
      </CardFooter>
    </motion.div>
  )
}

```

## 📄 src/app/(admin)/countries/page.js
*Lines: 104, Size: 3.14 KB*

```javascript
// apps/admin/src/app/(protected)/countries/page.js (version 2.0.0)
'use client'

import { useMemo, useState } from 'react'
import Link from 'next/link'
import { ServerCrash, PlusCircle, ChevronsRight } from 'lucide-react'
import { PageHeader, Sheet, SheetContent, DataTable } from '@components/shared'
import { useEntityManager } from '@/hooks/use-entity-manager'
import { Button } from '@components/shared'
import { columns } from './columns'
import CountryEditor from './country-editor'

export default function CountriesPage() {
  const {
    entities: countries,
    isLoading,
    error,
    handleSave,
  } = useEntityManager('/api/countries', 'Country', 'name')
  const [isEditorOpen, setIsEditorOpen] = useState(false)
  const [selectedId, setSelectedId] = useState(null)

  const handleEdit = (id) => {
    setSelectedId(id)
    setIsEditorOpen(true)
  }
  const handleAdd = () => {
    setSelectedId('new')
    setIsEditorOpen(true)
  }

  const activeCountryData = useMemo(() => {
    if (selectedId === 'new') {
      return { _id: null, name: '', isoCode: '', status: 'active' }
    }
    return countries?.find((c) => c._id === selectedId) || null
  }, [selectedId, countries])

  const columnsWithDetails = useMemo(
    () => [
      ...columns(handleEdit),
      {
        id: 'details',
        cell: ({ row }) => (
          <Button asChild variant="ghost" size="icon">
            <Link href={`/countries/${encodeURIComponent(row.original.name)}`}>
              <ChevronsRight className="h-4 w-4" />
            </Link>
          </Button>
        ),
      },
    ],
    [handleEdit]
  )

  if (error) {
    return (
      <div className="flex h-full w-full items-center justify-center text-center p-4">
        <div className="p-8 rounded-lg bg-destructive/10 border border-destructive/50 max-w-md">
          <ServerCrash className="w-12 h-12 mx-auto text-destructive mb-4" />
          <h1 className="text-2xl font-bold">Failed to Load Countries</h1>
          <p className="text-destructive-foreground/80 mt-2">{error}</p>
        </div>
      </div>
    )
  }

  return (
    <div className="flex flex-col h-full">
      <PageHeader
        title="Country Management"
        description="Enable or disable countries for scraping and user subscriptions."
      >
        <Button onClick={handleAdd}>
          <PlusCircle className="mr-2 h-4 w-4" /> Add New Country
        </Button>
      </PageHeader>
      <div className="mt-8 flex-grow min-h-0">
        <DataTable
          columns={columnsWithDetails}
          data={countries || []}
          isLoading={isLoading}
          filterColumn="name"
          filterPlaceholder="Filter by name..."
          initialSort={[{ id: 'eventCount', desc: true }]}
        />
      </div>
      <Sheet open={isEditorOpen} onOpenChange={setIsEditorOpen}>
        <SheetContent className="w-full sm:max-w-md p-0">
          <CountryEditor
            key={selectedId}
            country={activeCountryData}
            onSave={(saved) => {
              handleSave(saved)
              setIsEditorOpen(false)
            }}
            onCancel={() => setIsEditorOpen(false)}
          />
        </SheetContent>
      </Sheet>
    </div>
  )
}

```

## 📄 src/app/(admin)/dashboard/DashboardClientPage.jsx
*Lines: 191, Size: 5.8 KB*

```jsx
// apps/admin/src/app/(protected)/dashboard/DashboardClientPage.jsx (version 1.0.2 - Complete)
'use client'

import { useState, useMemo } from 'react'
import { motion } from 'framer-motion'
import Link from 'next/link'
import { Newspaper, Users, Rss, CheckCircle2, AlertTriangle, Loader2 } from 'lucide-react'
import {
  PageHeader,
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  Button,
} from '@components/shared'
import { formatDistanceToNow } from 'date-fns'

const StatCard = ({ title, value, icon, link }) => (
  <Card asChild>
    <Link href={link}>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium text-muted-foreground">
          {title}
        </CardTitle>
        {icon}
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">{value}</div>
      </CardContent>
    </Link>
  </Card>
)

const RunFunnelStat = ({ title, value, className }) => (
  <div className={`text-center p-2 rounded-md ${className}`}>
    <p className="text-xl font-bold">{value.toLocaleString()}</p>
    <p className="text-xs text-muted-foreground">{title}</p>
  </div>
)

const RecentRun = ({ run }) => {
  const isSuccess = !run.runStats.errors || run.runStats.errors.length === 0
  return (
    <Link
      href={`/runs/${run._id}`}
      className="flex items-center justify-between p-3 rounded-md hover:bg-accent transition-colors"
    >
      <div className="flex items-center gap-3">
        {isSuccess ? (
          <CheckCircle2 className="w-5 h-5 text-green-500 flex-shrink-0" />
        ) : (
          <AlertTriangle className="w-5 h-5 text-red-500 flex-shrink-0" />
        )}
        <div>
          <p className="font-medium">
            Found {run.runStats.freshHeadlinesFound} headlines, synthesized{' '}
            {run.runStats.eventsSynthesized} events.
          </p>
          <p className="text-xs text-muted-foreground">
            {formatDistanceToNow(new Date(run.createdAt), { addSuffix: true })}
          </p>
        </div>
      </div>
      <Button variant="ghost" size="sm">
        Details
      </Button>
    </Link>
  )
}

export default function DashboardClientPage({
  initialStats,
  initialRuns,
  initialSources,
}) {
  const [stats] = useState(initialStats)
  const [runs] = useState(initialRuns)
  const [sources] = useState(initialSources)

  const failingSources = useMemo(() => {
    if (!sources) return []
    return sources.filter(
      (s) =>
        s.status === 'active' &&
        s.analytics?.totalRuns > 0 &&
        s.analytics?.lastRunHeadlineCount === 0
    )
  }, [sources])

  if (!stats) {
    return (
      <div className="flex items-center justify-center h-full">
        <Loader2 className="w-12 h-12 animate-spin gemini-text" />
      </div>
    )
  }

  const lastRunStats = runs?.[0]?.runStats || {}

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <PageHeader
        title="Admin Dashboard"
        description="High-level overview of system health and content pipeline."
      />
      <div className="mt-8 grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <StatCard
          title="Active Sources"
          value={`${stats.sources.active} / ${stats.sources.total}`}
          icon={<Newspaper className="h-5 w-5 text-muted-foreground" />}
          link="/sources"
        />
        <StatCard
          title="Active Users"
          value={`${stats.users.active} / ${stats.users.total}`}
          icon={<Users className="h-5 w-5 text-muted-foreground" />}
          link="/users"
        />
        <StatCard
          title="Watchlist Entities"
          value={stats.watchlist.total}
          icon={<Rss className="h-5 w-5 text-muted-foreground" />}
          link="/watchlist"
        />
        <StatCard
          title="Failing Sources"
          value={failingSources.length}
          icon={<AlertTriangle className="h-5 w-5 text-muted-foreground" />}
          link="/sources?status=failing"
        />
      </div>
      <div className="mt-8 grid gap-8 md:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle>Recent Pipeline Runs</CardTitle>
            <CardDescription>
              Summary of the last 5 intelligence gathering runs.
            </CardDescription>
          </CardHeader>
          <CardContent>
            {runs && runs.length > 0 ? (
              <div className="space-y-2">
                {runs.map((run) => (
                  <RecentRun key={run._id} run={run} />
                ))}
              </div>
            ) : (
              <p className="text-sm text-muted-foreground">No recent runs found.</p>
            )}
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Last Run Funnel</CardTitle>
            <CardDescription>
              Conversion metrics from the most recent pipeline execution.
            </CardDescription>
          </CardHeader>
          <CardContent className="grid grid-cols-2 gap-4">
            <RunFunnelStat
              title="Headlines Found"
              value={lastRunStats.freshHeadlinesFound || 0}
              className="bg-blue-500/10"
            />
            <RunFunnelStat
              title="Relevant Headlines"
              value={lastRunStats.relevantHeadlines || 0}
              className="bg-yellow-500/10"
            />
            <RunFunnelStat
              title="Events Synthesized"
              value={lastRunStats.eventsSynthesized || 0}
              className="bg-purple-500/10"
            />
            <RunFunnelStat
              title="Notifications Sent"
              value={lastRunStats.eventsEmailed || 0}
              className="bg-green-500/10"
            />
          </CardContent>
        </Card>
      </div>
    </motion.div>
  )
}

```

## 📄 src/app/(admin)/dashboard/page.jsx
*Lines: 49, Size: 1.15 KB*

```jsx
// apps/admin/src/app/(protected)/dashboard/page.jsx (version 3.0.1)
import {
  getDashboardStats,
  getRecentRunVerdicts,
  getAllSources,
} from '@headlines/data-access'
import DashboardClientPage from './DashboardClientPage'

export const dynamic = 'force-dynamic'

async function getPageData() {
  try {
    const [statsResult, verdictsResult, sourcesResult] = await Promise.all([
      getDashboardStats(),
      getRecentRunVerdicts(),
      getAllSources(),
    ])
    return {
      stats: statsResult.data || null,
      runs: verdictsResult.data || [],
      sources: sourcesResult.data || [],
      error: null,
    }
  } catch (error) {
    console.error('[Dashboard Server Error]', error)
    return { stats: null, runs: [], sources: [], error: error.message }
  }
}

export default async function DashboardPage() {
  const { stats, runs, sources, error } = await getPageData()

  if (error) {
    return (
      <div className="text-red-500 text-center p-8">
        Error loading dashboard data: {error}
      </div>
    )
  }

  return (
    <DashboardClientPage
      initialStats={stats}
      initialRuns={runs}
      initialSources={sources}
    />
  )
}

```

## 📄 src/app/(admin)/events/columns.jsx
*Lines: 238, Size: 8.08 KB*

```jsx
// Full Path: headlines/src/app/(admin)/events/columns.jsx
'use client'

import React, { useState, useCallback } from 'react'
import {
  EditableCell,
  Button,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  DataTableColumnHeader,
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
  Label,
  Textarea,
} from '@/components/shared' // CORRECTED IMPORT
import { Trash2, Loader2 } from 'lucide-react'
import { format } from 'date-fns'
import { RelationshipManager } from '@/components/admin/RelationshipManager' // CORRECTED IMPORT
import { toast } from 'sonner'

const eventCategories = [
  'New Wealth',
  'Future Wealth',
  'Wealth Mentioned',
  'Legal/Dispute',
  'Background',
  'Other',
]

const FormField = ({ id, label, children }) => (
  <div className="space-y-2">
    <Label htmlFor={id} className="text-sm font-medium text-muted-foreground pl-1">
      {label}
    </Label>
    {children}
  </div>
)

export const EventListItem = ({ event, onUpdate, onDelete, isExpanded }) => {
  const [details, setDetails] = useState(null)
  const [isLoadingDetails, setIsLoadingDetails] = useState(false)

  const loadDetails = useCallback(async () => {
    setIsLoadingDetails(true)
    try {
      const res = await fetch(`/api-admin/events/${event._id}`)
      const data = await res.json()
      if (!res.ok) throw new Error(data.error || 'Failed to fetch details')
      setDetails(data)
    } catch (err) {
      toast.error('Failed to load event details', { description: err.message })
    } finally {
      setIsLoadingDetails(false)
    }
  }, [event._id])

  React.useEffect(() => {
    if (isExpanded && !details && !isLoadingDetails) {
      loadDetails()
    }
  }, [isExpanded, details, isLoadingDetails, loadDetails])

  const handleRelationshipUpdate = useCallback(() => {
    loadDetails()
    onUpdate(event, {})
  }, [loadDetails, onUpdate, event])

  return (
    <AccordionItem value={event._id} className="border-b border-white/10 group">
      <AccordionTrigger className="w-full text-left hover:bg-white/5 px-2 hover:no-underline">
        <div className="flex items-center w-full text-sm">
          <div className="w-[180px] flex-shrink-0 text-muted-foreground group-hover:text-foreground">
            {format(new Date(event.createdAt), 'dd MMM yyyy, HH:mm')}
          </div>
          <div className="w-[140px] flex-shrink-0">{event.country}</div>
          <div className="w-[180px] flex-shrink-0">
            {event.eventClassification || 'N/A'}
          </div>
          <div className="w-[80px] text-center flex-shrink-0">
            {event.highest_relevance_score}
          </div>
          <div className="flex-grow min-w-0 pr-4 whitespace-normal font-medium">
            {event.synthesized_headline}
          </div>
        </div>
      </AccordionTrigger>
      <AccordionContent className="p-4 bg-black/20">
        {isLoadingDetails ? (
          <div className="flex items-center justify-center h-64">
            <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
          </div>
        ) : details ? (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Event Details</CardTitle>
                <CardDescription>
                  View and edit the core synthesized data.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <FormField label="Synthesized Headline">
                  <EditableCell
                    useTextarea={true}
                    initialValue={details.synthesized_headline}
                    onSave={(newValue) =>
                      onUpdate(details, { synthesized_headline: newValue })
                    }
                  />
                </FormField>
                <FormField label="Country">
                  <EditableCell
                    initialValue={details.country}
                    onSave={(newValue) => onUpdate(details, { country: newValue })}
                  />
                </FormField>
                <FormField label="Classification">
                  <Select
                    value={details.eventClassification}
                    onValueChange={(newValue) =>
                      onUpdate(details, { eventClassification: newValue })
                    }
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select..." />
                    </SelectTrigger>
                    <SelectContent>
                      {eventCategories.map((cat) => (
                        <SelectItem key={cat} value={cat}>
                          {cat}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </FormField>
                <FormField label="Relevance Score">
                  <EditableCell
                    type="number"
                    initialValue={details.highest_relevance_score}
                    onSave={(newValue) =>
                      onUpdate(details, { highest_relevance_score: newValue })
                    }
                  />
                </FormField>
                <FormField label="Synthesized Summary">
                  <Textarea
                    readOnly
                    value={details.synthesized_summary}
                    className="bg-secondary/50 h-32"
                  />
                </FormField>
              </CardContent>
              <CardFooter>
                <Button variant="destructive" onClick={() => onDelete(details._id)}>
                  <Trash2 className="mr-2 h-4 w-4" /> Delete Event
                </Button>
              </CardFooter>
            </Card>
            <RelationshipManager
              item={details}
              itemType="event"
              refetch={handleRelationshipUpdate}
            />
          </div>
        ) : (
          <div className="text-center text-muted-foreground py-10">
            Click to load details. If this message persists, the fetch may have failed.
          </div>
        )}
      </AccordionContent>
    </AccordionItem>
  )
}
// ListHeader component remains unchanged from your provided source.
export const ListHeader = ({ sorting, setSorting, columnFilters, setColumnFilters }) => {
  const mockTable = {
    getColumn: (id) => ({
      getCanSort: () => true,
      getCanFilter: () =>
        ['country', 'eventClassification', 'synthesized_headline'].includes(id),
      getIsSorted: () =>
        sorting.find((s) => s.id === id)?.desc
          ? 'desc'
          : sorting.find((s) => s.id === id)
            ? 'asc'
            : false,
      toggleSorting: (desc) => setSorting([{ id, desc }]),
      getFilterValue: () => columnFilters.find((f) => f.id === id)?.value,
      setFilterValue: (value) => {
        const newFilters = columnFilters.filter((f) => f.id !== id)
        if (value) newFilters.push({ id, value })
        setColumnFilters(newFilters)
      },
    }),
  }
  return (
    <div className="flex items-center p-2 border-b font-medium text-muted-foreground text-sm sticky top-0 bg-background z-10">
      <div className="w-[180px] flex-shrink-0">
        <DataTableColumnHeader
          column={mockTable.getColumn('createdAt')}
          title="Discovered"
        />
      </div>
      <div className="w-[140px] flex-shrink-0">
        <DataTableColumnHeader column={mockTable.getColumn('country')} title="Country" />
      </div>
      <div className="w-[180px] flex-shrink-0">
        <DataTableColumnHeader
          column={mockTable.getColumn('eventClassification')}
          title="Classification"
        />
      </div>
      <div className="w-[80px] flex-shrink-0 text-center">
        <DataTableColumnHeader
          column={mockTable.getColumn('highest_relevance_score')}
          title="Score"
        />
      </div>
      <div className="flex-grow min-w-0">
        <DataTableColumnHeader
          column={mockTable.getColumn('synthesized_headline')}
          title="Headline"
        />
      </div>
    </div>
  )
}

```

## 📄 src/app/(admin)/events/page.jsx
*Lines: 138, Size: 4.06 KB*

```jsx
// apps/admin/src/app/(protected)/events/page.jsx (version 4.0.1)
'use client'

import {
  PageHeader,
  Accordion,
  LoadingOverlay,
  Button,
  ExportButton,
} from '@components/shared'
import { EventListItem, ListHeader } from './columns'
import { useEntityManager } from '@/hooks/use-entity-manager'
import { toast } from 'sonner'
import { useCallback, useState } from 'react'
import { deleteEvent, updateEvent } from '@/lib/api-client'
import { exportEventsToCSV, exportEventsToXLSX } from '@headlines/data-access'
import { API_EVENTS, QUERY_KEY_EVENTS } from '@/lib/constants'

export default function EventsPage() {
  const {
    data,
    setData,
    total,
    isLoading,
    refetch,
    page,
    setPage,
    sorting,
    setSorting,
    columnFilters,
    setColumnFilters,
  } = useEntityManager(API_EVENTS, QUERY_KEY_EVENTS, [{ id: 'createdAt', desc: true }])

  const [expandedItemId, setExpandedItemId] = useState(null)

  const handleUpdate = useCallback(
    async (event, updateData) => {
      if (Object.keys(updateData).length === 0) {
        refetch()
        return
      }
      setData((currentData) =>
        currentData.map((e) => (e._id === event._id ? { ...e, ...updateData } : e))
      )
      const result = await updateEvent(event._id, updateData)
      if (result.error) {
        toast.error(`Update failed: ${result.error}`)
        refetch()
      }
    },
    [setData, refetch]
  )

  const handleDelete = useCallback(
    async (eventId) => {
      const originalData = [...data]
      setData((currentData) => currentData.filter((e) => e._id !== eventId))
      const result = await deleteEvent(eventId)
      if (result.error) {
        toast.error(`Deletion failed: ${result.error}. Reverting.`)
        setData(originalData)
      } else {
        toast.success('Event deleted.')
        refetch()
      }
    },
    [data, setData, refetch]
  )

  const description = `Review, audit, and manage all ${total.toLocaleString()} synthesized events.`
  const totalPages = Math.ceil(total / 50) || 1
  const sortParam = sorting[0]
    ? `${sorting[0].id}_${sorting[0].desc ? 'desc' : 'asc'}`
    : 'createdAt_desc'
  const exportActions = {
    csv: () => exportEventsToCSV({ filters: columnFilters, sort: sortParam }),
    xlsx: () => exportEventsToXLSX({ filters: columnFilters, sort: sortParam }),
  }

  return (
    <div className="flex flex-col h-full">
      <PageHeader title="Event Management" description={description}>
        <ExportButton
          hasData={data && data.length > 0}
          filename="events_export"
          exportActions={exportActions}
        />
      </PageHeader>
      <div className="mt-8 flex-grow min-h-0 flex flex-col">
        <div className="flex items-center py-4 justify-end">
          <Button
            onClick={() => setPage((p) => Math.max(1, p - 1))}
            variant="outline"
            disabled={page <= 1}
          >
            Previous
          </Button>
          <span className="text-sm text-muted-foreground mx-2">
            Page {page} of {totalPages}
          </span>
          <Button
            onClick={() => setPage((p) => p + 1)}
            variant="outline"
            disabled={page >= totalPages}
          >
            Next
          </Button>
        </div>
        <div className="relative rounded-md border flex-grow overflow-y-auto">
          <LoadingOverlay isLoading={isLoading && !data?.length} />
          <ListHeader
            sorting={sorting}
            setSorting={setSorting}
            columnFilters={columnFilters}
            setColumnFilters={setColumnFilters}
          />
          <Accordion
            type="single"
            collapsible
            value={expandedItemId}
            onValueChange={setExpandedItemId}
          >
            {data.map((event) => (
              <EventListItem
                key={event._id}
                event={event}
                onUpdate={handleUpdate}
                onDelete={handleDelete}
                isExpanded={expandedItemId === event._id}
              />
            ))}
          </Accordion>
        </div>
      </div>
    </div>
  )
}

```

## 📄 src/app/(admin)/layout.js
*Lines: 23, Size: 636 Bytes*

```javascript
// Full Path: headlines/src/app/(admin)/layout.js
import { verifyAdmin } from '@/lib/auth/server'
import { redirect } from 'next/navigation'
import { DesktopOnlyWrapper } from '@/components/admin/DesktopOnlyWrapper'
import { AppShell } from '@/app/_components/AppShell'

export const dynamic = 'force-dynamic'

export default async function AdminLayout({ children }) {
  const { isAdmin } = await verifyAdmin()

  if (!isAdmin) {
    redirect('/login')
  }

  // The AppShell will detect the /admin path and render the correct UI
  return (
    <DesktopOnlyWrapper>
      <AppShell>{children}</AppShell>
    </DesktopOnlyWrapper>
  )
}

```

## 📄 src/app/(admin)/opportunities/columns.jsx
*Lines: 210, Size: 5.69 KB*

```jsx
// apps/admin/src/app/opportunities/columns.jsx (version 2.5.0 - Responsive Layout)
'use client'

import React from 'react'
import { Button, EditableCell } from '@components/shared'
import { ArrowUpDown, Trash2, Edit } from 'lucide-react'
import { format } from 'date-fns'
import { toast } from 'sonner'

// Compact Cell Wrapper
const CompactCell = ({ children, allowWrap = false }) => (
  <div className={`text-xs p-1 ${allowWrap ? 'whitespace-normal' : ''}`}>{children}</div>
)
const CompactHeader = ({ column, title }) => (
  <Button
    variant="ghost"
    className="h-8 -ml-4"
    onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
  >
    <span className="text-xs">{title}</span>
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

export const columns = (onUpdate, onDelete, onEdit) => [
  {
    accessorKey: '_id',
    header: 'ID',
    cell: ({ row }) => (
      <CompactCell>
        <Button
          variant="ghost"
          size="sm"
          className="h-auto p-0 font-mono text-[11px] w-full justify-start max-w-[90px]"
          onClick={() => {
            navigator.clipboard.writeText(row.original._id)
            toast.success('ID Copied!')
          }}
        >
          <span className="truncate">{row.original._id}</span>
        </Button>
      </CompactCell>
    ),
    size: 90,
    minSize: 90,
    maxSize: 90,
    meta: { className: 'w-[90px]' },
  },
  {
    accessorKey: 'basedIn',
    header: ({ column }) => <CompactHeader column={column} title="Country" />,
    cell: ({ row }) => (
      <CompactCell>
        <div className="max-w-[85px]">
          <EditableCell
            initialValue={row.original.basedIn}
            placeholder="Add..."
            onSave={(newValue) => onUpdate(row.original, { basedIn: newValue })}
          />
        </div>
      </CompactCell>
    ),
    size: 85,
    minSize: 85,
    maxSize: 85,
    meta: { className: 'w-[85px]' },
  },
  {
    accessorKey: 'city',
    header: ({ column }) => <CompactHeader column={column} title="City" />,
    cell: ({ row }) => (
      <CompactCell>
        <div className="max-w-[75px]">
          <EditableCell
            initialValue={row.original.city}
            placeholder="Add..."
            onSave={(newValue) => onUpdate(row.original, { city: newValue })}
          />
        </div>
      </CompactCell>
    ),
    size: 75,
    minSize: 75,
    maxSize: 75,
    meta: { className: 'w-[75px]' },
  },
  {
    accessorKey: 'reachOutTo',
    header: ({ column }) => <CompactHeader column={column} title="Contact" />,
    cell: ({ row }) => (
      <CompactCell>
        <div className="max-w-[110px]">
          <EditableCell
            initialValue={row.original.reachOutTo}
            onSave={(newValue) => onUpdate(row.original, { reachOutTo: newValue })}
          />
        </div>
      </CompactCell>
    ),
    size: 110,
    minSize: 110,
    maxSize: 110,
    meta: { className: 'w-[110px]' },
  },
  {
    accessorKey: 'likelyMMDollarWealth',
    header: ({ column }) => <CompactHeader column={column} title="Wealth ($M)" />,
    cell: ({ row }) => (
      <CompactCell>
        <div className="max-w-[80px]">
          <EditableCell
            initialValue={row.original.likelyMMDollarWealth}
            placeholder="Add..."
            onSave={(newValue) =>
              onUpdate(row.original, { likelyMMDollarWealth: newValue })
            }
            type="number"
          />
        </div>
      </CompactCell>
    ),
    size: 80,
    minSize: 80,
    maxSize: 80,
    meta: { className: 'w-[80px]' },
  },
  {
    accessorKey: 'contactDetails.email',
    header: ({ column }) => <CompactHeader column={column} title="Email" />,
    cell: ({ row }) => (
      <CompactCell>
        <div className="max-w-[160px]">
          <EditableCell
            initialValue={row.original.contactDetails?.email}
            placeholder="Add..."
            onSave={(newValue) =>
              onUpdate(row.original, { 'contactDetails.email': newValue })
            }
          />
        </div>
      </CompactCell>
    ),
    size: 160,
    minSize: 160,
    maxSize: 160,
    meta: { className: 'w-[160px]' },
  },
  {
    accessorKey: 'whyContact',
    header: 'Reason',
    cell: ({ row }) => (
      <CompactCell allowWrap={true}>
        <EditableCell
          initialValue={row.original.whyContact}
          onSave={(newValue) => onUpdate(row.original, { whyContact: newValue })}
          placeholder="Add reason..."
          useTextarea={true}
          allowWrap={true}
        />
      </CompactCell>
    ),
    // This column will flex to fill remaining space
    minSize: 120,
    meta: { className: 'flex-1 min-w-[120px]' },
  },
  {
    accessorKey: 'createdAt',
    header: ({ column }) => <CompactHeader column={column} title="Created" />,
    cell: ({ row }) => (
      <CompactCell>
        <div className="max-w-[70px]">
          {format(new Date(row.original.createdAt), 'dd MMM yy')}
        </div>
      </CompactCell>
    ),
    size: 70,
    minSize: 70,
    maxSize: 70,
    meta: { className: 'w-[70px]' },
  },
  {
    id: 'actions',
    cell: ({ row }) => (
      <div className="flex items-center justify-end opacity-50 group-hover:opacity-100 max-w-[60px]">
        <Button
          variant="ghost"
          size="icon"
          className="h-6 w-6"
          onClick={() => onEdit(row.original._id)}
        >
          <Edit className="h-3 w-3" />
        </Button>
        <Button
          variant="ghost"
          size="icon"
          className="h-6 w-6"
          onClick={() => onDelete(row.original)}
        >
          <Trash2 className="h-3 w-3" />
        </Button>
      </div>
    ),
    size: 60,
    minSize: 60,
    maxSize: 60,
    enableResizing: false,
    meta: { className: 'w-[60px]' },
  },
]

```

## 📄 src/app/(admin)/opportunities/page.jsx
*Lines: 133, Size: 4.09 KB*

```jsx
// apps/admin/src/app/(protected)/opportunities/page.jsx (version 5.0.1)
'use client'

import { useMemo, useState, useCallback } from 'react'
import {
  PageHeader,
  DataTable,
  ExportButton,
  ConfirmationDialog,
} from '@components/shared'
import { columns } from './columns'
import { useEntityManager } from '@/hooks/use-entity-manager'
import { toast } from 'sonner'
import { deleteOpportunity, updateOpportunity } from '@/lib/api-client'
import {
  exportOpportunitiesToCSV,
  exportOpportunitiesToXLSX,
} from '@headlines/data-access'
import { API_OPPORTUNITIES, QUERY_KEY_OPPORTUNITIES } from '@/lib/constants'

export default function OpportunitiesPage() {
  const {
    data,
    setData,
    total,
    isLoading,
    refetch,
    page,
    setPage,
    sorting,
    setSorting,
    columnFilters,
    setColumnFilters,
  } = useEntityManager(API_OPPORTUNITIES, QUERY_KEY_OPPORTUNITIES, [
    { id: 'createdAt', desc: true },
  ])

  const [confirmState, setConfirmState] = useState({
    isOpen: false,
    oppId: null,
    oppName: '',
  })

  const handleUpdate = useCallback(
    async (opp, updateData) => {
      setData((currentData) =>
        currentData.map((o) => (o._id === opp._id ? { ...o, ...updateData } : o))
      )
      const result = await updateOpportunity(opp._id, updateData)
      if (result.error) {
        toast.error(`Update failed: ${result.error}`)
        refetch()
      } else {
        toast.success(`Updated opportunity for ${opp.reachOutTo}`)
      }
    },
    [setData, refetch]
  )

  const handleDeleteRequest = useCallback((opp) => {
    setConfirmState({ isOpen: true, oppId: opp._id, oppName: opp.reachOutTo })
  }, [])

  const confirmDelete = useCallback(async () => {
    const { oppId, oppName } = confirmState
    setConfirmState({ isOpen: false, oppId: null, oppName: '' })
    const originalData = [...data]
    setData((currentData) => currentData.filter((o) => o._id !== oppId))
    const result = await deleteOpportunity(oppId)
    if (result.error) {
      toast.error(`Deletion failed: ${result.error}. Reverting.`)
      setData(originalData)
    } else {
      toast.success(`Opportunity for "${oppName}" deleted.`)
      refetch()
    }
  }, [confirmState, data, setData, refetch])

  const handleEdit = useCallback((oppId) => {
    toast.info('Full editor for this view is coming soon.')
  }, [])
  const tableColumns = useMemo(
    () => columns(handleUpdate, handleDeleteRequest, handleEdit),
    [handleUpdate, handleDeleteRequest, handleEdit]
  )
  const description = `Review and manage all ${total.toLocaleString()} actionable opportunities.`
  const sortParam = sorting[0]
    ? `${sorting[0].id}_${sorting[0].desc ? 'desc' : 'asc'}`
    : 'createdAt_desc'
  const exportActions = {
    csv: () => exportOpportunitiesToCSV({ filters: columnFilters, sort: sortParam }),
    xlsx: () => exportOpportunitiesToXLSX({ filters: columnFilters, sort: sortParam }),
  }

  return (
    <>
      <div className="flex flex-col h-full">
        <PageHeader title="Opportunity Management" description={description}>
          <ExportButton
            hasData={data && data.length > 0}
            filename="opportunities_export"
            exportActions={exportActions}
          />
        </PageHeader>
        <div className="mt-8 flex-grow min-h-0">
          <DataTable
            columns={tableColumns}
            data={data}
            isLoading={isLoading}
            page={page}
            setPage={setPage}
            total={total}
            sorting={sorting}
            setSorting={setSorting}
            columnFilters={columnFilters}
            setColumnFilters={setColumnFilters}
            filterColumn="reachOutTo"
            filterPlaceholder="Filter by name..."
          />
        </div>
      </div>
      <ConfirmationDialog
        open={confirmState.isOpen}
        onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })}
        onConfirm={confirmDelete}
        title="Confirm Deletion"
        description={`Are you sure you want to permanently delete the opportunity for "${confirmState.oppName}"?`}
        confirmText="Delete Opportunity"
      />
    </>
  )
}

```

## 📄 src/app/(admin)/runs/[runId]/page.js
*Lines: 261, Size: 8.49 KB*

```javascript
// apps/admin/src/app/runs/[runId]/page.js (version 1.0)
// apps/admin/src/app/runs/[runId]/page.js (version 1.0)
'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { motion } from 'framer-motion'
import {
  Loader2,
  ServerCrash,
  CheckCircle2,
  AlertTriangle,
  BotMessageSquare,
  Newspaper,
  Users,
  Rss,
  ArrowLeft,
  Database,
  Globe,
  BookOpen,
} from 'lucide-react'
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from '@components/shared'
import { Badge } from '@components/shared'
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@components/shared'
import { Button } from '@components/shared'

const StatCard = ({ title, value, icon }) => (
  <Card className="bg-black/20 border-white/10">
    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
      <CardTitle className="text-sm font-medium text-muted-foreground">{title}</CardTitle>
      {icon}
    </CardHeader>
    <CardContent>
      <div className="text-2xl font-bold">{value}</div>
    </CardContent>
  </Card>
)

const EnrichmentSourceIcons = ({ sources = [] }) => {
  const iconMap = {
    rag_db: { icon: Database, tooltip: 'RAG / Historical DB' },
    wikipedia: { icon: Globe, tooltip: 'Wikipedia' },
    news_api: { icon: BookOpen, tooltip: 'NewsAPI' },
  }
  return (
    <div className="flex items-center gap-2">
      <TooltipProvider>
        {sources.map((sourceKey) => {
          const IconComponent = iconMap[sourceKey]?.icon
          if (!IconComponent) return null
          return (
            <Tooltip key={sourceKey}>
              <TooltipTrigger>
                <IconComponent className="h-4 w-4 text-muted-foreground" />
              </TooltipTrigger>
              <TooltipContent>
                <p>Enriched with {iconMap[sourceKey].tooltip}</p>
              </TooltipContent>
            </Tooltip>
          )
        })}
      </TooltipProvider>
    </div>
  )
}

const VerdictCard = ({ items, title }) => (
  <Card className="bg-black/20 border-white/10">
    <CardHeader>
      <CardTitle>{title}</CardTitle>
    </CardHeader>
    <CardContent className="space-y-3">
      {items && items.length > 0 ? (
        items.map((item, index) => {
          const quality = item.quality?.toLowerCase() || 'n/a'
          let colorClass = 'bg-gray-500/20 text-gray-400'
          if (quality === 'excellent' || quality === 'good')
            colorClass = 'bg-green-500/20 text-green-400'
          if (quality === 'poor' || quality === 'irrelevant')
            colorClass = 'bg-red-500/20 text-red-400'

          return (
            <div
              key={index}
              className="text-sm p-3 rounded-md bg-background/50 border border-white/10"
            >
              <div className="flex justify-between items-start">
                <p className="font-semibold pr-4">{item.identifier}</p>
                <Badge className={`capitalize ${colorClass}`}>{item.quality}</Badge>
              </div>
              <p className="text-xs text-muted-foreground mt-1 italic">
                `{item.commentary}`
              </p>
              {item.enrichmentSources && (
                <div className="mt-2 pt-2 border-t border-white/10">
                  <EnrichmentSourceIcons sources={item.enrichmentSources} />
                </div>
              )}
            </div>
          )
        })
      ) : (
        <p className="text-sm text-muted-foreground">
          No {title.toLowerCase()} were judged in this run.
        </p>
      )}
    </CardContent>
  </Card>
)

export default function RunDetailsPage({ params }) {
  const { runId } = params
  const [verdict, setVerdict] = useState(null)
  const [summary, setSummary] = useState(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState(null)

  useEffect(() => {
    if (!runId) return
    setIsLoading(true)
    fetch(`/api/run-verdicts/${runId}`)
      .then((res) => {
        if (!res.ok) throw new Error(`API Error: ${res.status} ${res.statusText}`)
        return res.json()
      })
      .then((data) => {
        if (data.error) throw new Error(data.error)
        setVerdict(data.verdict)
        if (
          !data.verdict.judgeVerdict ||
          (!data.verdict.judgeVerdict.event_judgements &&
            !data.verdict.judgeVerdict.opportunity_judgements)
        ) {
          setSummary('No judge verdict was generated for this run.')
          return Promise.resolve(null)
        }
        return fetch('/api/ai/executive-summary', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ judgeVerdict: data.verdict.judgeVerdict }),
        })
      })
      .then((res) => (res ? res.json() : null))
      .then((data) => {
        if (data && data.summary) setSummary(data.summary)
        setIsLoading(false)
      })
      .catch((err) => {
        setError(err.message)
        setIsLoading(false)
      })
  }, [runId])

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <Loader2 className="w-12 h-12 animate-spin gemini-text" />
      </div>
    )
  }
  if (error) {
    return (
      <div className="flex h-full w-full items-center justify-center text-center p-4">
        <div className="p-8 rounded-lg bg-destructive/10 border border-destructive/50 max-w-md">
          <ServerCrash className="w-12 h-12 mx-auto text-destructive mb-4" />
          <h1 className="text-2xl font-bold">Failed to Load Run Details</h1>
          <p className="text-destructive-foreground/80 mt-2">{error}</p>
        </div>
      </div>
    )
  }

  const runDate = new Date(verdict.createdAt).toLocaleString(undefined, {
    dateStyle: 'full',
    timeStyle: 'long',
  })
  const isSuccess = !verdict.runStats.errors || verdict.runStats.errors.length === 0

  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
      <Button asChild variant="ghost" className="mb-4">
        <Link href="/dashboard">
          <ArrowLeft className="mr-2 h-4 w-4" /> Back to Dashboard
        </Link>
      </Button>
      <Card className="bg-black/20 border-white/10 mb-8">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-2xl">Pipeline Run Details</CardTitle>
              <CardDescription>{runDate}</CardDescription>
            </div>
            {isSuccess ? (
              <Badge className="bg-green-500/20 text-green-400 border-green-500/30 text-base">
                <CheckCircle2 className="mr-2 h-4 w-4" /> Success
              </Badge>
            ) : (
              <Badge variant="destructive" className="text-base">
                <AlertTriangle className="mr-2 h-4 w-4" /> Failed
              </Badge>
            )}
          </div>
        </CardHeader>
        <CardContent className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          <StatCard
            title="Headlines Found"
            value={verdict.runStats.freshHeadlinesFound}
            icon={<Newspaper className="h-5 w-5 text-muted-foreground" />}
          />
          <StatCard
            title="Events Synthesized"
            value={verdict.runStats.eventsSynthesized}
            icon={<Rss className="h-5 w-5 text-muted-foreground" />}
          />
          <StatCard
            title="Opportunities Generated"
            value={(verdict.generatedOpportunities || []).length}
            icon={<Users className="h-5 w-5 text-muted-foreground" />}
          />
          <StatCard
            title="Errors"
            value={verdict.runStats.errors?.length || 0}
            icon={<AlertTriangle className="h-5 w-5 text-muted-foreground" />}
          />
        </CardContent>
      </Card>
      <Card className="bg-black/20 border-white/10 mb-8">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BotMessageSquare className="h-6 w-6 gemini-text" /> AI Executive Summary
          </CardTitle>
        </CardHeader>
        <CardContent className="text-muted-foreground italic">
          {summary ? `"${summary}"` : <Loader2 className="h-5 w-5 animate-spin" />}
        </CardContent>
      </Card>
      <div className="grid gap-8 md:grid-cols-2">
        <VerdictCard
          items={verdict.judgeVerdict?.event_judgements || []}
          title="Judged Events"
        />
        <VerdictCard
          items={verdict.judgeVerdict?.opportunity_judgements || []}
          title="Judged Opportunities"
        />
      </div>
    </motion.div>
  )
}

```

## 📄 src/app/(admin)/scraper-ide/_components/AnalysisPanel.jsx
*Lines: 116, Size: 4.15 KB*

```jsx
// apps/admin/src/app/(protected)/scraper-ide/_components/AnalysisPanel.jsx (version 3.0.0)
'use client'

import { useState } from 'react'
import {
  Button,
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  Accordion,
  AccordionItem,
  AccordionTrigger,
  AccordionContent,
} from '@components/shared'
import { Link as LinkIcon, CheckCircle2 } from 'lucide-react'
import { cn } from '@headlines/utils-shared'

export default function AnalysisPanel({
  analysis,
  onSetSelector,
  onDrillDown,
  activeHeadlineSelector,
}) {
  const [openAccordion, setOpenAccordion] = useState(null)

  if (!analysis) {
    return (
      <div className="flex items-center justify-center h-full text-muted-foreground">
        <p>Analyze a URL to see link structure suggestions here.</p>
      </div>
    )
  }

  if (analysis.suggestions.length === 0) {
    return (
      <div className="flex items-center justify-center h-full text-muted-foreground">
        <p>No suitable link clusters found on this page.</p>
      </div>
    )
  }

  return (
    <div className="h-full overflow-y-auto p-4">
      <Card className="bg-transparent border-none shadow-none">
        <CardHeader>
          <CardTitle>Heuristic Link Analysis</CardTitle>
        </CardHeader>
        <CardContent>
          <Accordion
            type="single"
            collapsible
            className="w-full"
            value={openAccordion}
            onValueChange={setOpenAccordion}
          >
            {analysis.suggestions.map((cluster, index) => {
              const isActive = activeHeadlineSelector === cluster.selector
              return (
                <AccordionItem value={`item-${index}`} key={index}>
                  <AccordionTrigger
                    className={cn(
                      'font-mono text-sm px-2 rounded hover:bg-white/5',
                      isActive && 'bg-primary/10'
                    )}
                  >
                    <div className="flex justify-between w-full items-center pr-2">
                      <div className="flex items-center gap-2 truncate">
                        {isActive && (
                          <CheckCircle2 className="h-4 w-4 text-green-400 flex-shrink-0" />
                        )}
                        <span className="truncate">{cluster.selector}</span>
                      </div>
                      <span className="text-xs text-muted-foreground bg-secondary px-2 py-1 rounded-md">
                        {cluster.count} links
                      </span>
                    </div>
                  </AccordionTrigger>
                  <AccordionContent className="p-2">
                    <div className="bg-background/50 p-4 rounded-md border border-border">
                      <div className="flex justify-end gap-2 mb-3">
                        <Button size="sm" onClick={() => onSetSelector(cluster.selector)}>
                          Set as Headline Selector
                        </Button>
                      </div>
                      <ul className="space-y-1 max-h-48 overflow-y-auto pr-2">
                        {cluster.samples.map((sample, s_index) => (
                          <li
                            key={s_index}
                            className="text-xs p-1.5 rounded bg-background flex items-center gap-2 cursor-pointer hover:bg-accent"
                            onClick={() => onDrillDown(sample.href)}
                          >
                            <LinkIcon className="h-3 w-3 flex-shrink-0" />
                            <div className="truncate">
                              <p className="text-muted-foreground truncate font-medium">
                                {sample.text}
                              </p>
                              <p className="text-blue-400 text-[10px] truncate">
                                {sample.href}
                              </p>
                            </div>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </AccordionContent>
                </AccordionItem>
              )
            })}
          </Accordion>
        </CardContent>
      </Card>
    </div>
  )
}

```

## 📄 src/app/(admin)/scraper-ide/_components/ArticleExtractorView.jsx
*Lines: 130, Size: 4.52 KB*

```jsx
// apps/admin/src/app/(protected)/scraper-ide/_components/ArticleExtractorView.jsx (version 4.0.0)
'use client'

import { useState, useEffect, useMemo } from 'react'
import {
  Button,
  Textarea,
  Label,
  Accordion,
  AccordionItem,
  AccordionTrigger,
  AccordionContent,
  Badge,
} from '@components/shared'
import { toast } from 'sonner'
import * as cheerio from 'cheerio'
import { testRecipe } from '@/lib/api-client'

export default function ArticleExtractorView({
  articleHtml,
  onSetSelector,
  value,
  sourceConfig,
}) {
  const [extractedText, setExtractedText] = useState('')
  const [suggestions, setSuggestions] = useState([])

  const cleanBodyHtml = useMemo(() => {
    if (!articleHtml) return ''
    const $ = cheerio.load(articleHtml)
    $('script, style, link, noscript, svg, header, footer, nav, aside').remove()
    return $('body').html() || ''
  }, [articleHtml])

  useEffect(() => {
    if (cleanBodyHtml) {
      const heuristicSuggestions = heuristicallyFindSelectors(cleanBodyHtml)
      setSuggestions(heuristicSuggestions)

      if ((!value || value.length === 0) && heuristicSuggestions.length > 0) {
        onSetSelector([heuristicSuggestions[0].selector])
        toast.info('Heuristics suggested an article selector.')
      }
    }
  }, [cleanBodyHtml, onSetSelector, value])

  const handleManualExtract = async () => {
    if (!value || value.length === 0) return toast.error('No selector provided to test.')
    const testConfig = { ...sourceConfig, articleSelector: value }
    const result = await testRecipe(testConfig, sourceConfig.sectionUrl) // A bit of a hack to reuse testRecipe
    if (result.success && result.content.preview) {
      setExtractedText(result.content.preview)
      toast.success(`Extracted ${result.content.preview.length} characters.`)
    } else {
      setExtractedText('')
      toast.warn('Selector seems valid, but no text was found.')
    }
  }

  return (
    <div className="p-4 h-full grid grid-rows-[auto_1fr] gap-4">
      <div>
        <Label htmlFor="article-selector">Article Body Selectors</Label>
        <div className="flex gap-2 mt-1">
          <Textarea
            id="article-selector"
            value={(value || []).join(', ')}
            onChange={(e) =>
              onSetSelector(
                e.target.value
                  .split(',')
                  .map((s) => s.trim())
                  .filter(Boolean)
              )
            }
            placeholder="e.g., div.prose, main > article"
            rows={2}
            className="font-mono text-sm"
          />
          <Button
            onClick={handleManualExtract}
            variant="outline"
            className="h-auto"
            disabled={!value || value.length === 0}
          >
            Test Selector
          </Button>
        </div>
      </div>
      <div className="min-h-0 grid grid-cols-2 gap-4">
        <div className="border rounded-md overflow-y-auto p-2">
          <h4 className="text-sm font-semibold mb-2 px-2">Selector Suggestions</h4>
          <Accordion type="single" collapsible className="w-full">
            {suggestions.map((item, index) => (
              <AccordionItem value={`item-${index}`} key={index}>
                <AccordionTrigger className="font-mono text-xs px-2 hover:bg-white/5 rounded">
                  <div className="flex justify-between w-full items-center pr-2">
                    <span className="truncate">{item.selector}</span>
                    <Badge variant="secondary">{item.score.toFixed(0)} score</Badge>
                  </div>
                </AccordionTrigger>
                <AccordionContent className="p-2">
                  <div className="bg-background/50 p-2 rounded-md border">
                    <Button
                      size="sm"
                      className="w-full mb-2"
                      onClick={() => onSetSelector([item.selector])}
                    >
                      Apply this Selector
                    </Button>
                    <p className="text-xs text-muted-foreground p-2 bg-background rounded max-h-24 overflow-y-auto">
                      {(item.samples || []).join(' ').substring(0, 300)}...
                    </p>
                  </div>
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
        </div>
        <Textarea
          readOnly
          value={extractedText}
          className="h-full w-full resize-none bg-secondary/50"
          placeholder="Test a selector to see the extracted text here..."
        />
      </div>
    </div>
  )
}

```

## 📄 src/app/(admin)/scraper-ide/_components/ConfirmationModal.jsx
*Lines: 139, Size: 4.87 KB*

```jsx
// apps/admin/src/app/(protected)/scraper-ide/_components/ConfirmationModal.jsx (version 3.0.0)
'use client'
import { useState, useEffect, useCallback } from 'react'
import {
  Button,
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  ScrollArea,
  LoadingOverlay,
  Textarea,
} from '@components/shared'
import { ExternalLink, Save } from 'lucide-react'
import { toast } from 'sonner'
import { testRecipe } from '@/lib/api-client'

export default function ConfirmationModal({
  open,
  onOpenChange,
  onConfirm,
  testResults,
  isTesting,
  isSaving,
  sourceConfig,
}) {
  const [contentPreview, setContentPreview] = useState('')
  const [isLoadingContent, setIsLoadingContent] = useState(false)
  const [activeUrl, setActiveUrl] = useState(null)

  useEffect(() => {
    if (testResults) {
      setContentPreview(
        testResults.content?.preview || 'Could not fetch content from first article.'
      )
      setActiveUrl(testResults.content?.sourceUrl)
    } else {
      setContentPreview('')
      setActiveUrl(null)
    }
  }, [testResults])

  const fetchArticleContent = useCallback(
    async (article) => {
      if (!article?.link) return
      setIsLoadingContent(true)
      setActiveUrl(article.link)
      try {
        const result = await testRecipe(sourceConfig, article.link)
        if (!result.success) throw new Error(result.error || 'Failed to fetch content')
        setContentPreview(
          result.content.preview || `No content found for ${article.link}`
        )
      } catch (err) {
        toast.error('Failed to fetch article content', { description: err.message })
        setContentPreview(`Error: ${err.message}`)
      } finally {
        setIsLoadingContent(false)
      }
    },
    [sourceConfig]
  )

  const hasHeadlines = testResults?.headlines?.count > 0

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-[85vw] h-[85vh] flex flex-col">
        <DialogHeader>
          <DialogTitle>Confirm Source Configuration</DialogTitle>
          <DialogDescription>
            A live test was performed. Click on a headline to preview its content before
            saving.
          </DialogDescription>
        </DialogHeader>
        <div className="flex-grow min-h-0 relative">
          <LoadingOverlay isLoading={isTesting} text="Running live test scrape..." />
          {testResults && (
            <div className="grid grid-cols-2 gap-4 h-full">
              <div className="flex flex-col gap-2">
                <h3 className="font-semibold">
                  Found {testResults.headlines.count} Headlines
                </h3>
                <ScrollArea className="h-full border rounded-md p-2">
                  <ul className="space-y-2">
                    {hasHeadlines ? (
                      testResults.headlines.samples.map((item, i) => (
                        <li
                          key={i}
                          className={`text-sm p-2 rounded bg-secondary/50 flex justify-between items-center cursor-pointer hover:bg-secondary ${activeUrl === item.link ? 'ring-2 ring-primary' : ''}`}
                          onClick={() => fetchArticleContent(item)}
                        >
                          <span className="truncate pr-4">{item.headline}</span>
                          <a
                            href={item.link}
                            target="_blank"
                            rel="noopener noreferrer"
                            onClick={(e) => e.stopPropagation()}
                          >
                            <ExternalLink className="h-4 w-4 text-muted-foreground" />
                          </a>
                        </li>
                      ))
                    ) : (
                      <li className="text-sm text-muted-foreground p-4 text-center">
                        No headlines found.
                      </li>
                    )}
                  </ul>
                </ScrollArea>
              </div>
              <div className="flex flex-col gap-2 h-full relative">
                <LoadingOverlay isLoading={isLoadingContent} text="Fetching content..." />
                <h3 className="font-semibold">Article Content Preview</h3>
                <Textarea
                  readOnly
                  value={contentPreview}
                  className="h-full w-full resize-none bg-secondary/50"
                />
              </div>
            </div>
          )}
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Go Back & Edit
          </Button>
          <Button onClick={onConfirm} disabled={!hasHeadlines || isSaving || isTesting}>
            <Save className="mr-2 h-4 w-4" />
            {isSaving ? 'Saving...' : 'Confirm & Save Source'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/app/(admin)/scraper-ide/_components/ScraperIde.jsx
*Lines: 259, Size: 8.71 KB*

```jsx
// apps/admin/src/app/(protected)/scraper-ide/_components/ScraperIde.jsx (NEW FILE)
'use client'

import { useState, useReducer, useEffect, useCallback } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { toast } from 'sonner'
import { produce } from 'immer'

import { createSource, updateSource } from '@/lib/api-client'
import {
  fullSourceAnalysis,
  analyzeSourceForSelectors,
  testRecipe,
} from '@/lib/api-client'

import { Tabs, TabsContent, TabsList, TabsTrigger } from '@components/shared'
import SourceDefinitionPanel from './SourceDefinitionPanel'
import AnalysisPanel from './AnalysisPanel'
import ArticleExtractorView from './ArticleExtractorView'
import ConfirmationModal from './ConfirmationModal'
import TabsBar from './TabsBar'

const ideReducer = (state, action) =>
  produce(state, (draft) => {
    switch (action.type) {
      case 'SET_SOURCE_DATA':
        draft.sourceData = { ...draft.sourceData, ...action.payload }
        draft.isDirty = true
        break
      case 'REPLACE_SOURCE_DATA':
        draft.sourceData = action.payload
        draft.isDirty = false
        break
      case 'SET_LOADING':
        draft.loadingStates[action.payload.key] = action.payload.value
        break
      case 'ADD_TAB':
        if (!draft.tabs.some((t) => t.url === action.payload.url)) {
          draft.tabs.push(action.payload)
        }
        draft.activeTabId = action.payload.id
        break
      case 'CLOSE_TAB':
        const tabIndex = draft.tabs.findIndex((t) => t.id === action.payload)
        if (tabIndex > -1) {
          draft.tabs.splice(tabIndex, 1)
          if (draft.activeTabId === action.payload) {
            draft.activeTabId = draft.tabs[tabIndex - 1]?.id || draft.tabs[0]?.id || null
          }
        }
        break
      case 'SET_ACTIVE_TAB':
        draft.activeTabId = action.payload
        break
      case 'SET_ANALYSIS_DATA':
        draft.analysisData[action.payload.tabId] = action.payload.data
        break
      case 'SET_HTML_DATA':
        draft.htmlData[action.payload.tabId] = action.payload.data
        break
      case 'SET_MODAL':
        draft.modalState.key = action.payload.key
        draft.modalState.data = action.payload.data
        break
      case 'RESET_DIRTY':
        draft.isDirty = false
        break
      default:
        break
    }
  })

export function ScraperIde({
  sourceData: initialSourceData,
  onSave,
  onTest,
  allCountries,
}) {
  const [state, dispatch] = useReducer(ideReducer, {
    sourceData: initialSourceData,
    isDirty: false,
    loadingStates: { isSaving: false, isTesting: false, isAnalyzing: false },
    tabs: [],
    activeTabId: null,
    analysisData: {},
    htmlData: {},
    modalState: { key: null, data: null },
  })

  useEffect(() => {
    dispatch({ type: 'REPLACE_SOURCE_DATA', payload: initialSourceData })
    if (initialSourceData.sectionUrl) {
      handleOpenTab(initialSourceData.sectionUrl, 'discovery')
    }
  }, [initialSourceData])

  const handleDataChange = useCallback((payload) => {
    dispatch({ type: 'SET_SOURCE_DATA', payload })
  }, [])

  const handleOpenTab = (url, type) => {
    if (!url) return
    const id = btoa(url) // Simple unique ID from URL
    dispatch({ type: 'ADD_TAB', payload: { id, url, type } })
  }

  const activeTab = useMemo(
    () => state.tabs.find((t) => t.id === state.activeTabId),
    [state.tabs, state.activeTabId]
  )

  const handleAnalyzeUrl = useCallback(
    async (url) => {
      if (!url || state.loadingStates.isAnalyzing) return
      dispatch({ type: 'SET_LOADING', payload: { key: 'isAnalyzing', value: true } })
      const toastId = toast.loading(`Analyzing ${url}...`)
      const result = await analyzeSourceForSelectors(url)
      dispatch({ type: 'SET_LOADING', payload: { key: 'isAnalyzing', value: false } })
      if (result.success) {
        toast.success('Analysis complete.', { id: toastId })
        dispatch({
          type: 'SET_ANALYSIS_DATA',
          payload: { tabId: activeTab.id, data: result },
        })
        dispatch({ type: 'SET_HTML_DATA', payload: { tabId: activeTab.id, data: null } }) // Clear HTML view if analysis is run
      } else {
        toast.error('Analysis failed.', { id: toastId, description: result.error })
      }
    },
    [activeTab?.id, state.loadingStates.isAnalyzing]
  )

  const handleSetSelector = (selectors, key = 'headlineSelector') => {
    const payload = Array.isArray(selectors)
      ? selectors
      : selectors
          .split(',')
          .map((s) => s.trim())
          .filter(Boolean)
    handleDataChange({ [key]: payload })
  }

  const handleDrillDown = async (url) => {
    handleOpenTab(url, 'article')
    dispatch({ type: 'SET_LOADING', payload: { key: 'isAnalyzing', value: true } })
    const result = await testRecipe(state.sourceData, url) // Using testRecipe to fetch HTML
    dispatch({ type: 'SET_LOADING', payload: { key: 'isAnalyzing', value: false } })
    if (result.success) {
      const tabId = btoa(url)
      dispatch({
        type: 'SET_HTML_DATA',
        payload: { tabId, data: result.content.preview },
      })
    }
  }

  const handleSave = async () => {
    dispatch({ type: 'SET_LOADING', payload: { key: 'isSaving', value: true } })
    const isNew = !state.sourceData._id
    const result = isNew
      ? await createSource(state.sourceData)
      : await updateSource(state.sourceData._id, state.sourceData)
    if (result.source) {
      toast.success(`Source ${isNew ? 'created' : 'updated'}.`)
      onSave(result.source)
      dispatch({ type: 'RESET_DIRTY' })
    } else {
      toast.error('Save failed', { description: result.error })
    }
    dispatch({ type: 'SET_LOADING', payload: { key: 'isSaving', value: false } })
    dispatch({ type: 'SET_MODAL', payload: { key: null, data: null } })
  }

  const handleTest = async () => {
    dispatch({ type: 'SET_LOADING', payload: { key: 'isTesting', value: true } })
    const testResults = await onTest(state.sourceData)
    dispatch({ type: 'SET_LOADING', payload: { key: 'isTesting', value: false } })
    if (testResults) {
      dispatch({ type: 'SET_MODAL', payload: { key: 'confirm', data: testResults } })
    }
  }

  const isSavable = useMemo(() => {
    const { name, country, baseUrl, sectionUrl, headlineSelector, articleSelector } =
      state.sourceData
    return (
      name &&
      country &&
      baseUrl &&
      sectionUrl &&
      headlineSelector?.length > 0 &&
      articleSelector?.length > 0
    )
  }, [state.sourceData])

  const currentAnalysis = state.analysisData[state.activeTabId]
  const currentHtml = state.htmlData[state.activeTabId]

  return (
    <div className="grid grid-cols-[1fr_380px] h-full border-l">
      <div className="flex flex-col h-full">
        <TabsBar
          tabs={state.tabs}
          activeTabId={state.activeTabId}
          onSelectTab={(id) => dispatch({ type: 'SET_ACTIVE_TAB', payload: id })}
          onCloseTab={(id) => dispatch({ type: 'CLOSE_TAB', payload: id })}
        />
        <AnimatePresence mode="wait">
          <motion.div
            key={state.activeTabId}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="flex-grow min-h-0 bg-background"
          >
            {activeTab?.type === 'discovery' && (
              <AnalysisPanel
                analysis={currentAnalysis}
                onSetSelector={(selector) => handleSetSelector([selector])}
                onDrillDown={handleDrillDown}
                activeHeadlineSelector={(state.sourceData.headlineSelector || [])[0]}
              />
            )}
            {activeTab?.type === 'article' && (
              <ArticleExtractorView
                articleHtml={currentHtml}
                onSetSelector={(selectors) =>
                  handleSetSelector(selectors, 'articleSelector')
                }
                value={state.sourceData.articleSelector}
              />
            )}
          </motion.div>
        </AnimatePresence>
      </div>
      <div className="border-l bg-card h-full">
        <SourceDefinitionPanel
          sourceData={state.sourceData}
          onDataChange={handleDataChange}
          onTest={handleTest}
          onUpdate={() => dispatch({ type: 'SET_MODAL', payload: { key: 'confirm' } })}
          isSaving={state.loadingStates.isSaving}
          countries={allCountries}
          isSavable={isSavable}
        />
      </div>
      <ConfirmationModal
        open={state.modalState.key === 'confirm'}
        onOpenChange={() => dispatch({ type: 'SET_MODAL', payload: { key: null } })}
        onConfirm={handleSave}
        testResults={state.modalState.data}
        isTesting={state.loadingStates.isTesting}
        isSaving={state.loadingStates.isSaving}
        sourceConfig={state.sourceData}
      />
    </div>
  )
}

```

## 📄 src/app/(admin)/scraper-ide/_components/SourceDefinitionPanel.jsx
*Lines: 188, Size: 6 KB*

```jsx
// apps/admin/src/app/(protected)/scraper-ide/_components/SourceDefinitionPanel.jsx (version 4.0.0)
'use client'
import {
  Button,
  Input,
  Label,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  Separator,
  Textarea,
} from '@components/shared'
import { Save, Loader2, TestTube2 } from 'lucide-react'
import { SOURCE_STATUSES, SOURCE_FREQUENCIES } from '@headlines/models'

const FormField = ({ id, label, children, description }) => (
  <div className="space-y-1">
    <Label htmlFor={id} className="text-xs text-muted-foreground">
      {label}
    </Label>
    {children}
    {description && <p className="text-xs text-slate-500 mt-1">{description}</p>}
  </div>
)

export default function SourceDefinitionPanel({
  sourceData,
  onDataChange,
  onTest,
  onUpdate,
  isSaving,
  countries,
  isSavable,
}) {
  const handleSelectorChange = (key, value) => {
    const selectors = value
      .split(',')
      .map((s) => s.trim())
      .filter(Boolean)
    onDataChange({ [key]: selectors })
  }

  const handleChange = (key, value) => {
    onDataChange({ [key]: value })
  }

  if (!sourceData) return null

  return (
    <div className="p-4 flex flex-col h-full">
      <h3 className="font-semibold mb-2 px-2 text-lg">Source Definition</h3>
      <div className="flex-grow overflow-y-auto pr-2 space-y-3">
        <FormField label="Headline Container Selectors" id="headlineSelector">
          <Textarea
            value={(sourceData.headlineSelector || []).join(', ')}
            onChange={(e) => handleSelectorChange('headlineSelector', e.target.value)}
            placeholder="e.g., .article-container, .news-item"
            className="font-mono text-sm"
            rows={3}
          />
        </FormField>
        <FormField
          label="Link Selector (relative)"
          id="linkSelector"
          description="Relative to the container. Leave blank if container is the link."
        >
          <Input
            value={sourceData.linkSelector || ''}
            onChange={(e) => handleChange('linkSelector', e.target.value)}
            placeholder="e.g., a.headline-link"
            className="font-mono text-sm"
          />
        </FormField>
        <FormField
          label="Headline Text Selector (relative)"
          id="headlineTextSelector"
          description="Relative to the container. Leave blank for default text extraction."
        >
          <Input
            value={sourceData.headlineTextSelector || ''}
            onChange={(e) => handleChange('headlineTextSelector', e.target.value)}
            placeholder="e.g., h2, .title-text"
            className="font-mono text-sm"
          />
        </FormField>
        <FormField label="Article Body Selectors" id="articleSelector">
          <Textarea
            value={(sourceData.articleSelector || []).join(', ')}
            onChange={(e) => handleSelectorChange('articleSelector', e.target.value)}
            placeholder="e.g., div.prose, main > article"
            className="font-mono text-sm"
            rows={3}
          />
        </FormField>
        <Separator className="my-2" />
        <FormField label="Source Name" id="name">
          <Input
            value={sourceData.name || ''}
            onChange={(e) => handleChange('name', e.target.value)}
          />
        </FormField>
        <div className="grid grid-cols-2 gap-2">
          <FormField label="Country" id="country">
            <Select
              value={sourceData.country || ''}
              onValueChange={(v) => handleChange('country', v)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select..." />
              </SelectTrigger>
              <SelectContent>
                {countries.map((c) => (
                  <SelectItem key={c} value={c}>
                    {c}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </FormField>
          <FormField label="Language" id="language">
            <Input
              value={sourceData.language || 'en'}
              onChange={(e) => handleChange('language', e.target.value)}
            />
          </FormField>
        </div>
        <div className="grid grid-cols-2 gap-2">
          <FormField label="Status" id="status">
            <Select
              value={sourceData.status || 'active'}
              onValueChange={(v) => handleChange('status', v)}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {SOURCE_STATUSES.map((s) => (
                  <SelectItem key={s} value={s}>
                    {s}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </FormField>
          <FormField label="Frequency" id="scrapeFrequency">
            <Select
              value={sourceData.scrapeFrequency || 'high'}
              onValueChange={(v) => handleChange('scrapeFrequency', v)}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {SOURCE_FREQUENCIES.map((f) => (
                  <SelectItem key={f} value={f}>
                    {f}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </FormField>
        </div>
      </div>
      <div className="flex-shrink-0 pt-4 flex gap-2">
        <Button
          onClick={onTest}
          disabled={isSaving || !isSavable}
          className="w-full"
          variant="outline"
        >
          <TestTube2 className="mr-2 h-4 w-4" />
          Test Configuration
        </Button>
        <Button onClick={onUpdate} disabled={isSaving || !isSavable} className="w-full">
          {isSaving ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Save className="mr-2 h-4 w-4" />
          )}
          {sourceData._id ? 'Update Source' : 'Create Source'}
        </Button>
      </div>
    </div>
  )
}

```

## 📄 src/app/(admin)/scraper-ide/_components/SourceIdeLayout.jsx
*Lines: 150, Size: 4.46 KB*

```jsx
// Full Path: headlines/src/app/(admin)/scraper-ide/_components/SourceIdeLayout.jsx
'use client'

import { useState, useCallback, useMemo, useEffect } from 'react'
import { useSearchParams, useRouter } from 'next/navigation'
import { useEntityManager } from '@/hooks/use-entity-manager'
import { SourceList } from '@/components/admin/source-list' // CORRECTED IMPORT
import { ScraperIde } from './ScraperIde'
import { useSourceHealthChecker } from '../../sources/use-source-health-checker'
import { toast } from 'sonner'
import { testSourceConfigClient as testSourceConfig } from '@/lib/api-client'

const EMPTY_SOURCE = {
  name: '',
  country: '',
  baseUrl: '',
  sectionUrl: '',
  status: 'active',
  scrapeFrequency: 'high',
  extractionMethod: 'declarative',
  headlineSelector: [],
  linkSelector: '',
  headlineTextSelector: '',
  articleSelector: [],
}

export function SourceIdeLayout() {
  const router = useRouter()
  const searchParams = useSearchParams()

  const {
    entities: sources,
    setEntities,
    isLoading: isLoadingSources,
    error: sourcesError,
    handleSave: handleEntitySave,
  } = useEntityManager('/api-admin/sources', 'Source', 'name')

  const {
    entities: countries,
    isLoading: isLoadingCountries,
    error: countriesError,
  } = useEntityManager('/api-admin/countries', 'Country', 'name')

  const [selectedSourceId, setSelectedSourceId] = useState(searchParams.get('sourceId'))

  useEffect(() => {
    setSelectedSourceId(searchParams.get('sourceId'))
  }, [searchParams])

  const handleSourceUpdate = useCallback(
    (updatedSource) => {
      setEntities((prev) =>
        prev.map((s) => (s._id === updatedSource._id ? updatedSource : s))
      )
    },
    [setEntities]
  )

  const {
    liveStatuses,
    isCheckingAll,
    handleCheckFiltered,
    handleStopCheck,
    handleTestComplete,
  } = useSourceHealthChecker(handleSourceUpdate)

  const availableCountries = useMemo(() => {
    if (!countries) return []
    return countries
      .filter((c) => c.status === 'active')
      .map((c) => c.name)
      .sort()
  }, [countries])

  const handleTest = useCallback(
    async (source) => {
      const toastId = toast.loading(`Running test scrape for "${source.name}"...`)
      const result = await testSourceConfig(source)
      if (result.success) {
        handleEntitySave(result.data.updatedSource)
        handleTestComplete(source._id, result.data.count, result.data.updatedSource)
        toast.success(`Test complete! Found ${result.data.count} headlines.`, {
          id: toastId,
        })
        return result.data
      } else {
        toast.error(`Test failed: ${result.details || 'Unknown error'}`, { id: toastId })
        return null
      }
    },
    [handleEntitySave, handleTestComplete]
  )

  const selectedSourceData = useMemo(() => {
    if (!selectedSourceId) {
      const prefillName = searchParams.get('name') || ''
      const prefillUrl = searchParams.get('sectionUrl') || ''
      let prefillBaseUrl = ''
      try {
        prefillBaseUrl = prefillUrl ? new URL(prefillUrl).origin : ''
      } catch (e) {}
      return {
        ...EMPTY_SOURCE,
        name: prefillName,
        sectionUrl: prefillUrl,
        baseUrl: prefillBaseUrl,
        country: searchParams.get('country') || '',
      }
    }
    return sources?.find((s) => s._id === selectedSourceId) || EMPTY_SOURCE
  }, [selectedSourceId, sources, searchParams])

  const handleSelectSource = (id) => {
    const newSearchParams = new URLSearchParams(searchParams.toString())
    if (id) {
      newSearchParams.set('sourceId', id)
    } else {
      newSearchParams.delete('sourceId')
    }
    router.push(`/scraper-ide?${newSearchParams.toString()}`)
  }

  return (
    <div className="flex flex-row h-[calc(100vh-4rem)] w-full -m-6">
      <SourceList
        sources={sources}
        isLoading={isLoadingSources || isLoadingCountries}
        selectedSourceId={selectedSourceId}
        onSelectSource={handleSelectSource}
        onAddSource={() => handleSelectSource(null)}
        onCheckFiltered={handleCheckFiltered}
        onStopCheck={handleStopCheck}
        isCheckingAll={isCheckingAll}
        liveStatuses={liveStatuses}
        countries={['all', ...availableCountries]}
      />
      <div className="flex-grow min-w-0">
        <ScraperIde
          key={selectedSourceId || 'new'}
          sourceData={selectedSourceData}
          onSave={handleEntitySave}
          onTest={handleTest}
          allCountries={availableCountries}
        />
      </div>
    </div>
  )
}

```

## 📄 src/app/(admin)/scraper-ide/_components/SourceSelectorInput.jsx
*Lines: 80, Size: 2.46 KB*

```jsx
// apps/admin/src/app/scraper-ide/_components/SourceSelectorInput.jsx (version 2.3 - UX Improvement)
'use client'
import * as React from 'react'
import {
  Button,
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@components/shared'
import { Check, ChevronsUpDown } from 'lucide-react'
import { cn } from '@headlines/utils-shared'

export default function SourceSelectorInput({
  sources,
  selectedSource,
  onSelectSource,
  disabled,
}) {
  const [open, setOpen] = React.useState(false)
  const selectedValue = selectedSource?._id ? selectedSource.name : '' // Only show a name if it's a real, selected source

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-full justify-between h-11 text-base"
          disabled={disabled}
        >
          <span className="truncate">
            {selectedValue ? selectedValue : 'Select existing source to edit...'}
          </span>
          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
        <Command>
          <CommandInput placeholder="Search sources..." />
          <CommandList>
            <CommandEmpty>No source found.</CommandEmpty>
            <CommandGroup>
              {sources.map((source) => (
                <CommandItem
                  key={source._id}
                  value={source.name}
                  onSelect={(currentValue) => {
                    const sourceToSelect = sources.find(
                      (s) => s.name.toLowerCase() === currentValue.toLowerCase()
                    )
                    onSelectSource(sourceToSelect ?? null) // Pass null if deselected
                    setOpen(false)
                  }}
                >
                  <Check
                    className={cn(
                      'mr-2 h-4 w-4',
                      selectedValue.toLowerCase() === source.name.toLowerCase()
                        ? 'opacity-100'
                        : 'opacity-0'
                    )}
                  />
                  {source.name}
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  )
}

```

## 📄 src/app/(admin)/scraper-ide/_components/TabsBar.jsx
*Lines: 78, Size: 2.44 KB*

```jsx
// apps/admin/src/app/(protected)/scraper-ide/_components/TabsBar.jsx (version 2.0.0)
'use client'

import { cn } from '@headlines/utils-shared'
import { LayoutList, FileText, X, RefreshCw, Wand2 } from 'lucide-react'
import { Button } from '@components/shared'

export default function TabsBar({
  tabs,
  activeTabId,
  onSelectTab,
  onCloseTab,
  onAnalyze,
  isAnalyzing,
}) {
  if (!tabs || tabs.length === 0) {
    return (
      <div className="flex-shrink-0 border-b bg-secondary/30 p-2 text-center text-sm text-muted-foreground h-[49px] flex items-center justify-center">
        Select a source or click "Add New Source" to begin.
      </div>
    )
  }

  const activeTab = tabs.find((t) => t.id === activeTabId)

  return (
    <div className="flex-shrink-0 border-b bg-secondary/30 flex justify-between items-center pr-2">
      <ul className="flex items-center gap-1 p-1">
        {tabs.map((tab) => {
          const isActive = tab.id === activeTabId
          const Icon = tab.type === 'discovery' ? LayoutList : FileText
          return (
            <li
              key={tab.id}
              onClick={() => onSelectTab(tab.id)}
              className={cn(
                'flex items-center gap-2 pl-3 pr-2 py-1.5 rounded-t-md cursor-pointer border-b-2',
                isActive
                  ? 'bg-background border-primary text-primary'
                  : 'bg-secondary border-transparent hover:bg-accent'
              )}
            >
              <Icon className="h-4 w-4 text-muted-foreground" />
              <span className="text-sm truncate max-w-48">
                {tab.url.replace(/^https?:\/\//, '')}
              </span>
              <button
                onClick={(e) => {
                  e.stopPropagation()
                  onCloseTab(tab.id)
                }}
                className="p-1 rounded hover:bg-destructive/20 text-muted-foreground hover:text-destructive"
              >
                <X className="h-3 w-3" />
              </button>
            </li>
          )
        })}
      </ul>
      {activeTab?.type === 'discovery' && (
        <Button
          variant="outline"
          size="sm"
          onClick={() => onAnalyze(activeTab.url)}
          disabled={isAnalyzing}
        >
          {isAnalyzing ? (
            <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
          ) : (
            <Wand2 className="h-4 w-4 mr-2" />
          )}
          Analyze Page
        </Button>
      )}
    </div>
  )
}

```

## 📄 src/app/(admin)/scraper-ide/page.jsx
*Lines: 19, Size: 494 Bytes*

```jsx
// apps/admin/src/app/(protected)/scraper-ide/page.jsx (version 2.0.0)
'use client'

import { Suspense } from 'react'
import { SourceIdeLayout } from './_components/SourceIdeLayout'
import { LoadingOverlay } from '@components/shared'

function ScraperIdePageContent() {
  return <SourceIdeLayout />
}

export default function ScraperIdePage() {
  return (
    <Suspense fallback={<LoadingOverlay isLoading={true} text="Loading IDE..." />}>
      <ScraperIdePageContent />
    </Suspense>
  )
}

```

## 📄 src/app/(admin)/settings/page.jsx
*Lines: 65, Size: 1.75 KB*

```jsx
// apps/admin/src/app/(protected)/settings/page.jsx (version 2.0.0)
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { PageHeader } from '@components/shared'
import SettingsForm from './settings-form'
import { Loader2 } from 'lucide-react'
import { toast } from 'sonner'
import { getSettings, updateSettings } from '@/lib/api-client'

export default function SettingsPage() {
  const [settings, setSettings] = useState([])
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    getSettings().then((result) => {
      if (result.settings) {
        setSettings(result.settings)
      } else {
        toast.error('Failed to load settings: ' + result.error)
        setSettings([])
      }
      setIsLoading(false)
    })
  }, [])

  const handleSave = async (updatedSettings) => {
    toast.info('Saving settings...')
    const result = await updateSettings(updatedSettings)
    if (!result.error) {
      setSettings(updatedSettings)
      toast.success('Settings saved successfully.')
      return true
    } else {
      toast.error(`Error: ${result.error}`)
      return false
    }
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <Loader2 className="w-12 h-12 animate-spin gemini-text" />
      </div>
    )
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <PageHeader
        title="Pipeline Settings"
        description="Dynamically adjust thresholds and parameters for the backend scraper pipeline."
      />
      <div className="mt-8">
        <SettingsForm initialSettings={settings} onSave={handleSave} />
      </div>
    </motion.div>
  )
}

```

## 📄 src/app/(admin)/settings/settings-form.jsx
*Lines: 140, Size: 4.31 KB*

```jsx
// apps/admin/src/app/settings/settings-form.jsx (version 1.3.0)
'use client'

import { useState, useMemo } from 'react'
import { motion } from 'framer-motion'
import {
  Card,
  CardContent,
  CardFooter,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@components/shared'
import { Label } from '@components/shared'
import { Input } from '@components/shared'
import { Switch } from '@components/shared'
import { Button } from '@components/shared'
import { Save, Loader2 } from 'lucide-react'

const SettingInput = ({ setting, onChange }) => {
  const { type, key, value } = setting
  switch (type) {
    case 'number':
      return (
        <Input
          type="number"
          id={key}
          value={value}
          onChange={(e) => onChange(key, parseFloat(e.target.value))}
          className="bg-black/20 border-white/10"
        />
      )
    case 'boolean':
      return (
        <Switch
          id={key}
          checked={value}
          onCheckedChange={(checked) => onChange(key, checked)}
        />
      )
    default:
      return (
        <Input
          type="text"
          id={key}
          value={value}
          onChange={(e) => onChange(key, e.target.value)}
          className="bg-black/20 border-white/10"
        />
      )
  }
}

const SettingRow = ({ setting, onChange }) => (
  <div key={setting.key} className="grid grid-cols-3 items-center gap-4">
    <div className="col-span-2">
      <Label htmlFor={setting.key}>{setting.key.replace(/_/g, ' ')}</Label>
      <p className="text-sm text-muted-foreground">{setting.description}</p>
    </div>
    <SettingInput setting={setting} onChange={onChange} />
  </div>
)

export default function SettingsForm({ initialSettings = [], onSave }) {
  const [settings, setSettings] = useState(initialSettings)
  const [isSaving, setIsSaving] = useState(false)

  const { thresholdSettings, modelSettings, promptSettings } = useMemo(() => {
    const thresholds = [],
      models = [],
      prompts = []
    ;(initialSettings || []).forEach((s) => {
      if (s.key.includes('_THRESHOLD') || s.key.includes('MIN_')) {
        thresholds.push(s)
      } else if (s.key.includes('LLM_MODEL')) {
        models.push(s)
      } else {
        prompts.push(s)
      }
    })
    return {
      thresholdSettings: thresholds,
      modelSettings: models,
      promptSettings: prompts,
    }
  }, [initialSettings])

  const handleChange = (key, value) => {
    setSettings((prev) => prev.map((s) => (s.key === key ? { ...s, value } : s)))
  }

  const handleSaveClick = async () => {
    setIsSaving(true)
    await onSave(settings)
    setIsSaving(false)
  }

  return (
    <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }}>
      <Card className="bg-black/20 border-white/10">
        <CardContent className="pt-6">
          <Tabs defaultValue="thresholds">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="thresholds">Thresholds</TabsTrigger>
              <TabsTrigger value="ai_models">AI Models</TabsTrigger>
              <TabsTrigger value="prompt_params">Prompt Parameters</TabsTrigger>
            </TabsList>
            <TabsContent value="thresholds" className="mt-6 space-y-6">
              {thresholdSettings.map((setting) => (
                <SettingRow key={setting.key} setting={setting} onChange={handleChange} />
              ))}
            </TabsContent>
            <TabsContent value="ai_models" className="mt-6 space-y-6">
              {modelSettings.map((setting) => (
                <SettingRow key={setting.key} setting={setting} onChange={handleChange} />
              ))}
            </TabsContent>
            <TabsContent value="prompt_params" className="mt-6 space-y-6">
              {promptSettings.map((setting) => (
                <SettingRow key={setting.key} setting={setting} onChange={handleChange} />
              ))}
            </TabsContent>
          </Tabs>
        </CardContent>
        <CardFooter className="border-t border-white/10 px-6 py-4">
          <Button onClick={handleSaveClick} disabled={isSaving}>
            {isSaving ? (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            ) : (
              <Save className="mr-2 h-4 w-4" />
            )}
            Save Settings
          </Button>
        </CardFooter>
      </Card>
    </motion.div>
  )
}

```

## 📄 src/app/(admin)/sources/page.jsx
*Lines: 11, Size: 375 Bytes*

```jsx
// apps/admin/src/app/(protected)/sources/page.jsx (version 7.0.0)
'use client'

import { redirect } from 'next/navigation'

// This page is now a simple redirect to the new, canonical Scraper IDE page.
// This simplifies the navigation and makes the IDE the central hub for all source management.
export default function SourcesRedirectPage() {
  redirect('/scraper-ide')
}

```

## 📄 src/app/(admin)/sources/use-source-health-checker.js
*Lines: 88, Size: 2.53 KB*

```javascript
// apps/admin/src/app/(protected)/sources/use-source-health-checker.js (version 2.0.0)
'use client'

import { useState, useCallback, useRef } from 'react'
import { toast } from 'sonner'
import { testSourceConfigClient as testSourceConfig } from '@/lib/api-client' // Use client helper

export function useSourceHealthChecker(onSourceUpdate) {
  const [liveStatuses, setLiveStatuses] = useState({})
  const [isCheckingAll, setIsCheckingAll] = useState(false)
  const isCheckingRef = useRef(false)

  const handleCheckFiltered = async (filteredSources) => {
    if (!filteredSources || filteredSources.length === 0) {
      toast.info('No sources in the current view to check.')
      return
    }

    const sourcesToCheck = filteredSources.filter((s) => {
      const status = liveStatuses[s._id]
      return !status || status.count === undefined || status.count <= 0
    })

    if (sourcesToCheck.length === 0) {
      toast.success('All sources in the current view are already verified.')
      return
    }

    toast.info(
      `Starting health check for ${sourcesToCheck.length} unverified source(s)...`
    )
    isCheckingRef.current = true
    setIsCheckingAll(true)

    for (const source of sourcesToCheck) {
      if (!isCheckingRef.current) {
        toast.warning('Health check cancelled by user.')
        break
      }
      setLiveStatuses((prev) => ({ ...prev, [source._id]: { checking: true } }))
      try {
        const result = await testSourceConfig(source)
        if (!result.success) {
          throw new Error(result.details || 'Scrape failed')
        }
        onSourceUpdate(result.data.updatedSource)
        setLiveStatuses((prev) => ({
          ...prev,
          [source._id]: { checking: false, count: result.data.count },
        }))
      } catch (error) {
        setLiveStatuses((prev) => ({
          ...prev,
          [source._id]: { checking: false, count: -1, error: error.message },
        }))
      }
    }

    if (isCheckingRef.current) {
      toast.success('Health check complete.')
    }
    isCheckingRef.current = false
    setIsCheckingAll(false)
  }

  const handleStopCheck = () => {
    isCheckingRef.current = false
  }

  const handleTestComplete = useCallback(
    (sourceId, count, updatedSource) => {
      setLiveStatuses((prev) => ({ ...prev, [sourceId]: { checking: false, count } }))
      if (updatedSource) {
        onSourceUpdate(updatedSource)
      }
    },
    [onSourceUpdate]
  )

  return {
    liveStatuses,
    isCheckingAll,
    handleCheckFiltered,
    handleStopCheck,
    handleTestComplete,
  }
}

```

## 📄 src/app/(admin)/users/columns.jsx
*Lines: 276, Size: 7.96 KB*

```jsx
// apps/admin/src/app/users/columns.jsx (version 2.1.1 - Import Fix)
'use client'

import React from 'react'
import { Button } from '@components/shared'
import { Popover, PopoverTrigger, PopoverContent } from '@components/shared'
import { MultiSelect } from '../../_components/multi-select'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@components/shared'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from '@components/shared'
import {
  ArrowUpDown,
  MoreHorizontal,
  UserCheck,
  UserX,
  ShieldCheck,
  User,
  Trash2,
  Globe,
  Star,
  Mail,
  MailMinus,
  Bell,
  BellOff,
  Edit,
  Newspaper,
  Languages,
} from 'lucide-react'
// DEFINITIVE FIX: Import constants directly from the models package index.
import { SUBSCRIPTION_TIERS, SUBSCRIBER_ROLES } from '@headlines/models'

const InlineCountryEditor = ({ user, allCountries, onAction }) => {
  const subscribedCountryNames = (user.countries || []).map((c) => c.name)

  const handleSelectionChange = (newSelection) => {
    const newSubscriptions = newSelection.map((name) => {
      const existing = user.countries.find((c) => c.name === name)
      return existing || { name, active: true }
    })
    onAction(user, 'updateCountries', { countries: newSubscriptions })
  }

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="ghost" size="sm" className="h-auto p-1 text-left justify-start">
          <Edit className="h-3 w-3 mr-2 flex-shrink-0" />
          <span className="truncate max-w-[200px]">
            {subscribedCountryNames.length > 0
              ? subscribedCountryNames.join(', ')
              : 'No subscriptions'}
          </span>
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-80 p-0">
        <MultiSelect
          options={allCountries}
          selected={subscribedCountryNames}
          onChange={handleSelectionChange}
          placeholder="Select subscriptions..."
        />
      </PopoverContent>
    </Popover>
  )
}

const InlineLanguageEditor = ({ user, availableLanguages, onAction }) => {
  const handleLanguageChange = (newLanguage) => {
    onAction(user, 'updateLanguage', { language: newLanguage })
  }

  return (
    <Select value={user.language} onValueChange={handleLanguageChange}>
      <SelectTrigger className="w-40 h-8 text-xs bg-transparent border-none focus:ring-0 shadow-none">
        <SelectValue placeholder="Select..." />
      </SelectTrigger>
      <SelectContent>
        {availableLanguages.map((lang) => (
          <SelectItem key={lang} value={lang}>
            {lang}
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  )
}

export const columns = (
  handleEdit,
  handleAction,
  allCountries = [],
  availableLanguages = []
) => [
  {
    accessorKey: 'email',
    header: ({ column }) => (
      <Button
        variant="ghost"
        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
      >
        Email <ArrowUpDown className="ml-2 h-4 w-4" />
      </Button>
    ),
    cell: ({ row }) => (
      <div className="flex flex-col">
        <span className="font-medium">{row.original.email}</span>
        <span className="text-muted-foreground text-xs">
          {row.original.firstName} {row.original.lastName || ''}
        </span>
      </div>
    ),
  },
  {
    accessorKey: 'isActive',
    header: 'Status',
    cell: ({ row }) => {
      const user = row.original
      const Icon = user.isActive ? UserCheck : UserX
      const color = user.isActive ? 'text-green-500' : 'text-muted-foreground'
      const text = user.isActive ? 'Active' : 'Inactive'
      return (
        <Button
          variant="ghost"
          size="sm"
          className={`flex items-center gap-2 ${color}`}
          onClick={() => handleAction(user, 'toggleActive')}
        >
          <Icon className="h-4 w-4" /> {text}
        </Button>
      )
    },
  },
  {
    accessorKey: 'role',
    header: 'Role',
    cell: ({ row }) => {
      const user = row.original
      const Icon = user.role === 'admin' ? ShieldCheck : User
      const color = user.role === 'admin' ? 'text-yellow-400' : 'text-muted-foreground'
      return (
        <Button
          variant="ghost"
          size="sm"
          className={`flex items-center gap-2 capitalize ${color}`}
          onClick={() => handleAction(user, 'toggleRole')}
        >
          <Icon className="h-4 w-4" /> {user.role}
        </Button>
      )
    },
  },
  {
    accessorKey: 'language',
    header: 'Language',
    cell: ({ row }) => {
      const user = row.original
      return (
        <InlineLanguageEditor
          user={user}
          availableLanguages={availableLanguages}
          onAction={handleAction}
        />
      )
    },
  },
  {
    accessorKey: 'countries',
    header: 'Countries',
    cell: ({ row }) => {
      const user = row.original
      if (user.role === 'admin') {
        return (
          <div className="flex items-center gap-2 text-muted-foreground">
            <Globe className="h-4 w-4" />
            All Countries
          </div>
        )
      }
      return (
        <InlineCountryEditor
          user={user}
          allCountries={allCountries}
          onAction={handleAction}
        />
      )
    },
  },
  {
    id: 'notifications',
    header: 'Engagement',
    cell: ({ row }) => {
      const user = row.original
      return (
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-2">
            <button
              onClick={() => handleAction(user, 'toggleEmail')}
              title={user.emailNotificationsEnabled ? 'Email Enabled' : 'Email Disabled'}
            >
              {user.emailNotificationsEnabled ? (
                <Mail className="h-5 w-5 text-green-400" />
              ) : (
                <MailMinus className="h-5 w-5 text-muted-foreground" />
              )}
            </button>
            <button
              onClick={() => handleAction(user, 'togglePush')}
              title={user.pushNotificationsEnabled ? 'Push Enabled' : 'Push Disabled'}
            >
              {user.pushNotificationsEnabled ? (
                <Bell className="h-5 w-5 text-green-400" />
              ) : (
                <BellOff className="h-5 w-5 text-muted-foreground" />
              )}
            </button>
          </div>
          <div className="flex items-center gap-3 text-xs text-muted-foreground">
            <div className="flex items-center gap-1" title="Emails Sent">
              <Mail className="h-3 w-3" />
              <span>{user.emailSentCount || 0}</span>
            </div>
            <div className="flex items-center gap-1" title="Events Received">
              <Newspaper className="h-3 w-3" />
              <span>{user.eventsReceivedCount || 0}</span>
            </div>
          </div>
        </div>
      )
    },
  },
  {
    id: 'actions',
    cell: ({ row }) => {
      const user = row.original
      return (
        <div className="text-right">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">Open menu</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem onClick={() => handleEdit(user._id)}>
                Edit Full Profile
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                className="text-red-400 focus:bg-red-500/10 focus:text-red-400"
                onClick={() => handleAction(user, 'delete')}
              >
                <Trash2 className="mr-2 h-4 w-4" />
                Delete User
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      )
    },
  },
]

```

## 📄 src/app/(admin)/users/country-subscription-manager.jsx
*Lines: 116, Size: 3.81 KB*

```jsx
// apps/admin/src/app/users/country-subscription-manager.jsx (version 1.0)
'use client'

import { useState } from 'react'
import { Popover, PopoverContent, PopoverTrigger } from '@components/shared'
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from '@components/shared'
import { Button } from '@components/shared'
import { Switch } from '@components/shared'
import { Check, ChevronsUpDown, X } from 'lucide-react'
import { cn } from '@headlines/utils-shared'

export default function CountrySubscriptionManager({
  availableCountries,
  subscriptions,
  onChange,
}) {
  const [open, setOpen] = useState(false)

  const handleAddCountry = (countryName) => {
    if (!subscriptions.some((sub) => sub.name === countryName)) {
      const newSubscriptions = [...subscriptions, { name: countryName, active: true }]
      onChange(newSubscriptions.sort((a, b) => a.name.localeCompare(b.name)))
    }
    setOpen(false)
  }

  const handleRemoveCountry = (countryName) => {
    const newSubscriptions = subscriptions.filter((sub) => sub.name !== countryName)
    onChange(newSubscriptions)
  }

  const handleToggleActive = (countryName, isActive) => {
    const newSubscriptions = subscriptions.map((sub) =>
      sub.name === countryName ? { ...sub, active: isActive } : sub
    )
    onChange(newSubscriptions)
  }

  const subscribedCountryNames = new Set(subscriptions.map((s) => s.name))
  const addableCountries = availableCountries
    .filter((c) => !subscribedCountryNames.has(c))
    .sort()

  return (
    <div className="space-y-2">
      <div className="space-y-2">
        {subscriptions.length > 0 ? (
          subscriptions.map((sub) => (
            <div
              key={sub.name}
              className="flex items-center justify-between p-2 bg-black/20 rounded-md"
            >
              <span className="font-medium text-sm">{sub.name}</span>
              <div className="flex items-center gap-2">
                <Switch
                  checked={sub.active}
                  onCheckedChange={(checked) => handleToggleActive(sub.name, checked)}
                />
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-7 w-7"
                  onClick={() => handleRemoveCountry(sub.name)}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>
          ))
        ) : (
          <div className="text-center text-sm text-muted-foreground p-4 border border-dashed border-white/10 rounded-md">
            No countries subscribed.
          </div>
        )}
      </div>
      <Popover open={open} onOpenChange={setOpen}>
        <PopoverTrigger asChild>
          <Button variant="outline" role="combobox" className="w-full justify-between">
            Add country subscription...
            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
          <Command>
            <CommandInput placeholder="Search countries..." />
            <CommandList>
              <CommandEmpty>No countries found.</CommandEmpty>
              <CommandGroup>
                {addableCountries.map((country) => (
                  <CommandItem
                    key={country}
                    value={country}
                    onSelect={() => handleAddCountry(country)}
                  >
                    <Check
                      className={cn('mr-2 h-4 w-4', 'opacity-0')} // Keep layout consistent
                    />
                    {country}
                  </CommandItem>
                ))}
              </CommandGroup>
            </CommandList>
          </Command>
        </PopoverContent>
      </Popover>
    </div>
  )
}

```

## 📄 src/app/(admin)/users/page.jsx
*Lines: 192, Size: 5.69 KB*

```jsx
// apps/admin/src/app/(protected)/users/page.jsx (version 7.0.1)
'use client'

import { ServerCrash, PlusCircle } from 'lucide-react'
import {
  PageHeader,
  Button,
  ConfirmationDialog,
  Sheet,
  SheetContent,
  DataTable,
} from '@components/shared'
import { useEntityManager } from '@/hooks/use-entity-manager'
import { columns } from './columns'
import UserEditor from './user-editor'
import { toast } from 'sonner'
import { useMemo, useState, useCallback } from 'react'
import { languageList } from '@shared/utils-shared'
import { deleteSubscriber, updateSubscriber } from '@/lib/api-client'
import {
  API_SUBSCRIBERS,
  QUERY_KEY_SUBSCRIBERS,
  API_COUNTRIES,
  QUERY_KEY_COUNTRIES,
} from '@/lib/constants'

export default function UsersPage() {
  const {
    data: users,
    setData: setUsers,
    total: totalUsers,
    isLoading: isLoadingUsers,
    error: usersError,
    handleSave,
    refetch,
    page,
    setPage,
    sorting,
    setSorting,
    columnFilters,
    setColumnFilters,
  } = useEntityManager(API_SUBSCRIBERS, QUERY_KEY_SUBSCRIBERS, [
    { id: 'createdAt', desc: true },
  ])

  const {
    entities: countries,
    isLoading: isLoadingCountries,
    error: countriesError,
  } = useEntityManager(API_COUNTRIES, QUERY_KEY_COUNTRIES)

  const [isEditorOpen, setIsEditorOpen] = useState(false)
  const [selectedId, setSelectedId] = useState(null)
  const [confirmState, setConfirmState] = useState({
    isOpen: false,
    data: null,
    action: null,
  })

  const availableCountries = useMemo(() => {
    if (!countries) return []
    return countries.filter((c) => c.status === 'active').map((c) => c.name)
  }, [countries])

  const handleEdit = (id) => {
    setSelectedId(id)
    setIsEditorOpen(true)
  }
  const handleAdd = () => {
    setSelectedId('new')
    setIsEditorOpen(true)
  }

  const handleAction = useCallback(
    async (user, action, data) => {
      if (action === 'delete') {
        setConfirmState({ isOpen: true, data: { user }, action })
        return
      }
      setUsers((prev) => prev.map((u) => (u._id === user._id ? { ...u, ...data } : u)))
      const result = await updateSubscriber(user._id, data)
      if (result.error) {
        toast.error(`Update failed: ${result.error}`)
        refetch()
      }
    },
    [setUsers, refetch]
  )

  const confirmAction = useCallback(async () => {
    const { action, data } = confirmState
    setConfirmState({ isOpen: false, data: null, action: null })
    const toastId = toast.loading(`Performing action: ${action}...`)
    if (action === 'delete') {
      const result = await deleteSubscriber(data.user._id)
      if (result.error) {
        toast.error(`Action failed: ${result.error}`, { id: toastId })
      } else {
        toast.success('Action completed successfully.', { id: toastId })
        refetch()
      }
    }
  }, [confirmState, refetch])

  const activeUserData = useMemo(() => {
    if (selectedId === 'new')
      return {
        _id: null,
        email: '',
        firstName: '',
        lastName: '',
        role: 'user',
        isActive: true,
        countries: [],
        password: '',
        emailNotificationsEnabled: true,
        pushNotificationsEnabled: true,
        subscriptionTier: 'free',
        isLifetimeFree: false,
        subscriptionExpiresAt: null,
        language: 'English',
      }
    return users?.find((u) => u._id === selectedId) || null
  }, [selectedId, users])

  const error = usersError || countriesError
  const isLoading = isLoadingUsers || isLoadingCountries

  if (error) {
    return (
      <div className="flex h-full w-full items-center justify-center text-center p-4">
        <div className="p-8 rounded-lg bg-destructive/10 border border-destructive/50 max-w-md">
          <ServerCrash className="w-12 h-12 mx-auto text-destructive mb-4" />
          <h1 className="text-2xl font-bold">Failed to Load Users</h1>
          <p className="text-destructive-foreground/80 mt-2">{error}</p>
        </div>
      </div>
    )
  }

  return (
    <div className="flex flex-col h-full">
      <PageHeader
        title="User Management"
        description={`Manage all ${totalUsers.toLocaleString()} system users.`}
      >
        <Button onClick={handleAdd}>
          <PlusCircle className="mr-2 h-4 w-4" /> Add New User
        </Button>
      </PageHeader>
      <div className="mt-8 flex-grow min-h-0">
        <DataTable
          columns={columns(handleEdit, handleAction, availableCountries, languageList)}
          data={users || []}
          isLoading={isLoading}
          page={page}
          setPage={setPage}
          total={totalUsers}
          sorting={sorting}
          setSorting={setSorting}
          columnFilters={columnFilters}
          setColumnFilters={setColumnFilters}
          filterColumn="email"
          filterPlaceholder="Filter by email..."
        />
      </div>
      <Sheet open={isEditorOpen} onOpenChange={setIsEditorOpen}>
        <SheetContent className="w-full sm:max-w-lg p-0">
          <UserEditor
            key={selectedId}
            user={activeUserData}
            onSave={(saved) => {
              handleSave(saved)
              setIsEditorOpen(false)
            }}
            onCancel={() => setIsEditorOpen(false)}
            availableCountries={availableCountries}
            availableLanguages={languageList}
          />
        </SheetContent>
      </Sheet>
      <ConfirmationDialog
        open={confirmState.isOpen}
        onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })}
        onConfirm={confirmAction}
        title={`Confirm Action: ${confirmState.action}`}
        description={`Are you sure you want to ${confirmState.action} user ${confirmState.data?.user?.email}? This may be irreversible.`}
      />
    </div>
  )
}

```

## 📄 src/app/(admin)/users/user-editor.jsx
*Lines: 167, Size: 5.12 KB*

```jsx
// apps/admin/src/app/(protected)/users/user-editor.jsx (version 4.0.1)
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import {
  Button,
  CardFooter,
  Input,
  Label,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  Switch,
  Separator,
} from '@components/shared'
import { toast } from 'sonner'
import { Save, Loader2, UserPlus, X } from 'lucide-react'
import CountrySubscriptionManager from './country-subscription-manager'
import { createSubscriber, updateSubscriber } from '@/lib/api-client'

const FormField = ({ id, label, children, description }) => (
  <div className="space-y-2">
    <Label htmlFor={id} className="text-sm font-medium text-muted-foreground pl-1">
      {label}
    </Label>
    {children}
    {description && <p className="text-xs text-muted-foreground pl-1">{description}</p>}
  </div>
)

export default function UserEditor({
  user,
  onSave,
  onCancel,
  availableCountries,
  availableLanguages,
}) {
  const [formData, setFormData] = useState(user)
  const [isSaving, setIsSaving] = useState(false)
  const [isDirty, setIsDirty] = useState(false)

  useEffect(() => {
    setFormData(user)
    setIsDirty(false)
  }, [user])

  if (!user) return null
  const isNewUser = !formData._id

  const handleChange = (key, value) => {
    setFormData((prev) => ({ ...prev, [key]: value }))
    setIsDirty(true)
  }
  const handleDateChange = (e) => {
    const value = e.target.value
    const dateValue = value ? new Date(value) : null
    handleChange('subscriptionExpiresAt', dateValue)
  }

  const handleSave = async () => {
    setIsSaving(true)
    try {
      const result = isNewUser
        ? await createSubscriber(formData)
        : await updateSubscriber(user._id, formData)
      if (result.error) throw new Error(result.error)
      const savedUser = result.subscriber
      onSave(savedUser)
      toast.success(`User "${savedUser.email}" ${isNewUser ? 'created' : 'updated'}.`)
    } catch (error) {
      toast.error(`Error saving user: ${error.message}`)
    } finally {
      setIsSaving(false)
    }
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="h-full flex flex-col"
    >
      <div className="flex justify-between items-center flex-shrink-0 p-6 border-b border-white/10">
        <div className="space-y-1">
          <h1 className="text-2xl font-bold tracking-tight flex items-center gap-2">
            {isNewUser && <UserPlus />}
            {isNewUser ? 'Create New User' : 'Edit User'}
          </h1>
          <p className="text-sm text-muted-foreground">
            {isNewUser ? 'Provide details for the new user.' : formData.email}
          </p>
        </div>
        <Button variant="ghost" size="icon" onClick={onCancel}>
          <X className="h-4 w-4" />
        </Button>
      </div>
      <div className="flex-grow overflow-y-auto p-6 space-y-6">
        <h3 className="text-lg font-semibold leading-none tracking-tight">
          Account Details
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormField id="firstName" label="First Name">
            <Input
              value={formData.firstName || ''}
              onChange={(e) => handleChange('firstName', e.target.value)}
            />
          </FormField>
          <FormField id="lastName" label="Last Name">
            <Input
              value={formData.lastName || ''}
              onChange={(e) => handleChange('lastName', e.target.value)}
            />
          </FormField>
        </div>
        <FormField id="email" label="Email Address">
          <Input
            type="email"
            value={formData.email || ''}
            onChange={(e) => handleChange('email', e.target.value)}
            disabled={!isNewUser}
          />
        </FormField>
        <FormField
          id="password"
          label="Password"
          description={
            isNewUser
              ? 'Required for new users.'
              : 'Leave blank to keep current password.'
          }
        >
          <Input
            type="password"
            autoComplete="new-password"
            value={formData.password || ''}
            onChange={(e) => handleChange('password', e.target.value)}
          />
        </FormField>
        <Separator />
        <h3 className="text-lg font-semibold leading-none tracking-tight">
          Subscription Details
        </h3>
        <FormField label="Country Subscriptions">
          <CountrySubscriptionManager
            availableCountries={availableCountries}
            subscriptions={formData.countries || []}
            onChange={(newSubs) => handleChange('countries', newSubs)}
          />
        </FormField>
      </div>
      <CardFooter className="mt-auto border-t border-white/10 p-6 flex justify-end">
        <Button onClick={handleSave} disabled={!isDirty || isSaving}>
          {isSaving ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Save className="mr-2 h-4 w-4" />
          )}
          {isSaving ? 'Saving...' : 'Save Changes'}
        </Button>
      </CardFooter>
    </motion.div>
  )
}

```

## 📄 src/app/(admin)/watchlist/columns.jsx
*Lines: 409, Size: 11.61 KB*

```jsx
// apps/admin/src/app/watchlist/columns.jsx (version 3.5.0 - Final Slot Fix)
'use client'

import React, { useState, useEffect, useRef } from 'react'
import {
  Button,
  Badge,
  Input,
  Popover,
  PopoverContent,
  PopoverTrigger,
  PremiumSpinner,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
  Tooltip,
  TooltipProvider,
  TooltipTrigger,
  TooltipContent,
  DataTableColumnHeader,
} from '@components/shared'
import {
  ArrowUpDown,
  MoreHorizontal,
  Building,
  User,
  Users,
  Trash2,
  PlusCircle,
  X,
  Check,
} from 'lucide-react'

// --- Shared Components ---

const TypeIcon = ({ type }) => {
  if (type === 'person') return <User className="h-5 w-5 text-blue-400" />
  if (type === 'family') return <Users className="h-5 w-5 text-purple-400" />
  return <Building className="h-5 w-5 text-orange-400" />
}

const EditableTermBadge = ({ term, onUpdate, onRemove }) => {
  const [isEditing, setIsEditing] = useState(false)
  const [editText, setEditText] = useState(term)
  const inputRef = useRef(null)
  useEffect(() => {
    if (isEditing && inputRef.current) {
      inputRef.current.focus()
      inputRef.current.select()
    }
  }, [isEditing])
  const handleSave = () => {
    if (editText.trim() && editText.trim().toLowerCase() !== term) {
      onUpdate(term, editText.trim().toLowerCase())
    }
    setIsEditing(false)
  }
  if (isEditing) {
    return (
      <Input
        ref={inputRef}
        value={editText}
        onChange={(e) => setEditText(e.target.value)}
        onBlur={handleSave}
        onKeyDown={(e) => {
          if (e.key === 'Enter') handleSave()
          if (e.key === 'Escape') setIsEditing(false)
        }}
        className="h-6 text-xs w-auto inline-flex"
        style={{ width: `${Math.max(editText.length, 5)}ch` }}
      />
    )
  }
  return (
    <Badge
      variant="secondary"
      className="group cursor-pointer"
      onClick={() => setIsEditing(true)}
    >
      {' '}
      {term}{' '}
      <button
        onClick={(e) => {
          e.stopPropagation()
          onRemove(term)
        }}
        className="ml-1.5 opacity-50 group-hover:opacity-100 rounded-full hover:bg-background/50"
      >
        {' '}
        <X className="h-3 w-3" />{' '}
      </button>{' '}
    </Badge>
  )
}

const SearchTermManager = ({ entity, onUpdate }) => {
  const [newTerm, setNewTerm] = useState('')
  const [isPopoverOpen, setIsPopoverOpen] = useState(false)
  const handleUpdateTerms = (newTerms) => {
    onUpdate(entity, { searchTerms: [...new Set(newTerms)] })
  }
  const handleAddTerm = () => {
    if (newTerm.trim()) {
      handleUpdateTerms([...(entity.searchTerms || []), newTerm.trim().toLowerCase()])
      setNewTerm('')
      setIsPopoverOpen(false)
    }
  }
  const handleRemoveTerm = (termToRemove) => {
    handleUpdateTerms((entity.searchTerms || []).filter((t) => t !== termToRemove))
  }
  const handleUpdateTerm = (oldTerm, newTerm) => {
    handleUpdateTerms(
      (entity.searchTerms || []).map((t) => (t === oldTerm ? newTerm : t))
    )
  }
  return (
    <div className="flex flex-wrap items-center gap-1 max-w-md">
      {(entity.searchTerms || []).map((term) => (
        <EditableTermBadge
          key={term}
          term={term}
          onUpdate={handleUpdateTerm}
          onRemove={handleRemoveTerm}
        />
      ))}
      <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>
        <PopoverTrigger asChild>
          <Button size="icon" variant="ghost" className="h-6 w-6 rounded-full">
            <PlusCircle className="h-4 w-4" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-48 p-2">
          <div className="flex items-center gap-1">
            <Input
              value={newTerm}
              onChange={(e) => setNewTerm(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && handleAddTerm()}
              placeholder="Add term..."
              className="h-7 text-xs"
            />
            <Button
              size="icon"
              variant="default"
              className="h-7 w-7"
              onClick={handleAddTerm}
            >
              {' '}
              <PlusCircle className="h-4 w-4" />{' '}
            </Button>
          </div>
        </PopoverContent>
      </Popover>
    </div>
  )
}

// --- Column Definitions ---

export const watchlistColumns = (
  handleEdit,
  onUpdate,
  onDelete,
  availableCountries = []
) => [
  {
    accessorKey: 'hitCount',
    header: ({ column }) => (
      <Button
        variant="ghost"
        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
      >
        {' '}
        Hits <ArrowUpDown className="ml-2 h-4 w-4" />{' '}
      </Button>
    ),
    cell: ({ row }) => {
      const hitCount = row.getValue('hitCount')
      if (hitCount === 'recalculating') {
        return (
          <div className="flex justify-center items-center h-full">
            {' '}
            <div className="w-6 h-6">
              {' '}
              <PremiumSpinner size={24} />{' '}
            </div>{' '}
          </div>
        )
      }
      return <div className="text-center font-medium">{hitCount || 0}</div>
    },
  },
  // DEFINITIVE FIX: Replace the simple sortable button with the new DataTableColumnHeader.
  {
    accessorKey: 'name',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />,
    cell: ({ row }) => (
      <div className="flex items-center gap-2">
        {' '}
        <TypeIcon type={row.original.type} />{' '}
        <span className="font-medium">{row.getValue('name')}</span>{' '}
      </div>
    ),
  },
  {
    accessorKey: 'searchTerms',
    header: 'Search Terms',
    cell: ({ row }) => <SearchTermManager entity={row.original} onUpdate={onUpdate} />,
  },
  {
    accessorKey: 'status',
    header: 'Status',
    cell: ({ row }) => {
      const entity = row.original
      const statuses = ['candidate', 'active', 'inactive']
      const currentStatusIndex = statuses.indexOf(entity.status)
      const nextStatus = statuses[(currentStatusIndex + 1) % statuses.length]
      const colorClass = {
        active:
          'bg-green-500/20 text-green-400 border-green-500/30 hover:bg-green-500/30',
        inactive: 'bg-gray-500/20 text-gray-400 border-gray-500/30 hover:bg-gray-500/30',
        candidate:
          'bg-yellow-500/20 text-yellow-400 border-yellow-500/30 hover:bg-yellow-500/30',
      }[entity.status]
      return (
        <Badge
          variant="outline"
          className={`cursor-pointer transition-colors ${colorClass}`}
          onClick={() => onUpdate(entity, { status: nextStatus })}
        >
          {' '}
          {entity.status}{' '}
        </Badge>
      )
    },
  },
  {
    accessorKey: 'country',
    header: 'Country',
    cell: ({ row }) => {
      const entity = row.original
      return (
        <Select
          value={entity.country || ''}
          onValueChange={(value) => onUpdate(entity, { country: value })}
        >
          {' '}
          <SelectTrigger className="w-32 h-8 text-xs bg-transparent border-none focus:ring-0 shadow-none">
            {' '}
            <SelectValue placeholder="Select..." />{' '}
          </SelectTrigger>{' '}
          <SelectContent>
            {' '}
            {availableCountries.map((c) => (
              <SelectItem key={c} value={c}>
                {' '}
                {c}{' '}
              </SelectItem>
            ))}{' '}
          </SelectContent>{' '}
        </Select>
      )
    },
    filterFn: (row, id, value) => value === row.getValue(id),
  },
  {
    id: 'actions',
    cell: ({ row }) => {
      const entity = row.original
      return (
        <div className="text-right">
          {' '}
          <DropdownMenu>
            {' '}
            <DropdownMenuTrigger asChild>
              {' '}
              <Button variant="ghost" className="h-8 w-8 p-0">
                {' '}
                <span className="sr-only">Open menu</span>{' '}
                <MoreHorizontal className="h-4 w-4" />{' '}
              </Button>{' '}
            </DropdownMenuTrigger>{' '}
            <DropdownMenuContent align="end">
              {' '}
              <DropdownMenuLabel>Actions</DropdownMenuLabel>{' '}
              <DropdownMenuItem onClick={() => handleEdit(entity._id)}>
                {' '}
                Edit Details{' '}
              </DropdownMenuItem>{' '}
              <DropdownMenuSeparator />{' '}
              <DropdownMenuItem
                className="text-red-400 focus:bg-red-500/10 focus:text-red-400"
                onClick={() => onDelete(entity._id)}
              >
                {' '}
                <Trash2 className="mr-2 h-4 w-4" /> Delete{' '}
              </DropdownMenuItem>{' '}
            </DropdownMenuContent>{' '}
          </DropdownMenu>{' '}
        </div>
      )
    },
  },
]

export const suggestionColumns = (onAction, onUpdate) => [
  {
    accessorKey: 'name',
    header: ({ column }) => (
      <Button
        variant="ghost"
        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
      >
        {' '}
        Name <ArrowUpDown className="ml-2 h-4 w-4" />{' '}
      </Button>
    ),
    cell: ({ row }) => (
      <div className="flex items-center gap-2">
        {' '}
        <TypeIcon type={row.original.type} />{' '}
        <span className="font-medium">{row.getValue('name')}</span>{' '}
      </div>
    ),
  },
  { accessorKey: 'country', header: 'Country' },
  {
    accessorKey: 'rationale',
    header: 'AI Rationale',
    cell: ({ row }) => (
      <div className="truncate max-w-sm">{row.getValue('rationale')}</div>
    ),
  },
  {
    accessorKey: 'searchTerms',
    header: 'Suggested Search Terms',
    cell: ({ row }) => <SearchTermManager entity={row.original} onUpdate={onUpdate} />,
  },
  {
    accessorKey: 'sourceEvent',
    header: 'Source Event',
    cell: ({ row }) => (
      <div className="truncate max-w-xs text-muted-foreground">
        {row.getValue('sourceEvent')}
      </div>
    ),
  },
  {
    id: 'actions',
    cell: ({ row }) => {
      const suggestion = row.original
      return (
        <div className="text-right space-x-2">
          {' '}
          <TooltipProvider>
            {' '}
            <Tooltip>
              {' '}
              <TooltipTrigger asChild>
                {' '}
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 text-green-400 hover:bg-green-500/10 hover:text-green-400"
                  onClick={() => onAction(suggestion, 'approved')}
                >
                  {' '}
                  <Check className="h-4 w-4" />{' '}
                </Button>{' '}
              </TooltipTrigger>{' '}
              <TooltipContent>
                {' '}
                <p>Approve and add to watchlist</p>{' '}
              </TooltipContent>{' '}
            </Tooltip>{' '}
            <Tooltip>
              {' '}
              <TooltipTrigger asChild>
                {' '}
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 text-red-400 hover:bg-red-500/10 hover:text-red-400"
                  onClick={() => onAction(suggestion, 'dismissed')}
                >
                  {' '}
                  <X className="h-4 w-4" />{' '}
                </Button>{' '}
              </TooltipTrigger>{' '}
              <TooltipContent>
                {' '}
                <p>Dismiss this suggestion</p>{' '}
              </TooltipContent>{' '}
            </Tooltip>{' '}
          </TooltipProvider>{' '}
        </div>
      )
    },
  },
]

```

## 📄 src/app/(admin)/watchlist/page.jsx
*Lines: 265, Size: 8.69 KB*

```jsx
// apps/admin/src/app/(protected)/watchlist/page.jsx (version 4.0.3 - Complete)
'use client'

import { useMemo, useState, useCallback } from 'react'
import { ServerCrash, PlusCircle } from 'lucide-react'
import {
  PageHeader,
  Button,
  Sheet,
  SheetContent,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
  ConfirmationDialog,
  DataTable,
} from '@components/shared'
import { useEntityManager } from '@/hooks/use-entity-manager'
import { watchlistColumns, suggestionColumns } from './columns'
import WatchlistEditor from './watchlist-editor'
import { toast } from 'sonner'
import {
  processSuggestion,
  updateWatchlistEntity,
  deleteWatchlistEntity,
  updateWatchlistSuggestion,
} from '@/lib/api-client'
import {
  API_WATCHLIST,
  QUERY_KEY_WATCHLIST,
  API_WATCHLIST_SUGGESTIONS,
  QUERY_KEY_WATCHLIST_SUGGESTIONS,
} from '@/lib/constants'

export default function WatchlistPage() {
  const {
    data: watchlist,
    setData: setWatchlist,
    total: totalWatchlist,
    isLoading: isLoadingWatchlist,
    error: watchlistError,
    handleSave: handleEditorSave,
    refetch: refetchWatchlist,
    page: watchlistPage,
    setPage: setWatchlistPage,
    sorting: watchlistSorting,
    setSorting: setWatchlistSorting,
    columnFilters: watchlistColumnFilters,
    setColumnFilters: setWatchlistColumnFilters,
  } = useEntityManager(API_WATCHLIST, QUERY_KEY_WATCHLIST, [
    { id: 'hitCount', desc: true },
  ])

  const {
    data: suggestions,
    setData: setSuggestions,
    total: totalSuggestions,
    isLoading: isLoadingSuggestions,
    error: suggestionError,
    refetch: refetchSuggestions,
    page: suggestionPage,
    setPage: setSuggestionPage,
    sorting: suggestionSorting,
    setSorting: setSuggestionSorting,
    columnFilters: suggestionColumnFilters,
    setColumnFilters: setSuggestionColumnFilters,
  } = useEntityManager(API_WATCHLIST_SUGGESTIONS, QUERY_KEY_WATCHLIST_SUGGESTIONS)

  const [isEditorOpen, setIsEditorOpen] = useState(false)
  const [selectedId, setSelectedId] = useState(null)
  const [confirmState, setConfirmState] = useState({ isOpen: false, entityId: null })

  const availableCountries = useMemo(() => {
    if (!watchlist) return []
    const countrySet = new Set(watchlist.map((item) => item.country).filter(Boolean))
    return Array.from(countrySet).sort()
  }, [watchlist])

  const handleEdit = (id) => {
    setSelectedId(id)
    setIsEditorOpen(true)
  }
  const handleAdd = () => {
    setSelectedId('new')
    setIsEditorOpen(true)
  }

  const handleSuggestionAction = async (suggestion, action) => {
    const toastId = toast.loading(`Processing suggestion "${suggestion.name}"...`)
    const result = await processSuggestion(suggestion._id, 'watchlist', action)
    if (!result.error) {
      if (action === 'approved') refetchWatchlist()
      refetchSuggestions()
      toast.success(result.message, { id: toastId })
    } else {
      toast.error(`Failed to ${action} suggestion: ${result.error}`, { id: toastId })
    }
  }

  const handleSuggestionUpdate = useCallback(
    async (suggestion, updateData) => {
      setSuggestions((prev) =>
        prev.map((s) => (s._id === suggestion._id ? { ...s, ...updateData } : s))
      )
      const result = await updateWatchlistSuggestion(suggestion._id, updateData)
      if (result.error) {
        toast.error(`Update failed: ${result.error}`)
        refetchSuggestions()
      }
    },
    [setSuggestions, refetchSuggestions]
  )

  const handleRowUpdate = useCallback(
    async (entity, updateData) => {
      let updatedEntity = { ...entity, ...updateData }
      if (updateData.searchTerms) updatedEntity.hitCount = 'recalculating'
      setWatchlist((prev) => prev.map((e) => (e._id === entity._id ? updatedEntity : e)))
      if (updateData.status)
        toast.success(
          `Updated "${updatedEntity.name}" status to ${updatedEntity.status}.`
        )
      const result = await updateWatchlistEntity(entity._id, updateData)
      if (!result.error) {
        setWatchlist((prev) =>
          prev.map((e) => (e._id === result.entity._id ? result.entity : e))
        )
      } else {
        toast.error(`Update failed: ${result.error}`)
        refetchWatchlist()
      }
    },
    [setWatchlist, refetchWatchlist]
  )

  const handleDelete = (entityId) => {
    setConfirmState({ isOpen: true, entityId })
  }
  const confirmDelete = async () => {
    const { entityId } = confirmState
    setConfirmState({ isOpen: false, entityId: null })
    const toastId = toast.loading('Deleting entity...')
    const result = await deleteWatchlistEntity(entityId)
    if (!result.error) {
      toast.success('Entity deleted.', { id: toastId })
      refetchWatchlist()
    } else {
      toast.error(`Deletion failed: ${result.error}`, { id: toastId })
    }
  }

  const activeEntityData = useMemo(() => {
    if (selectedId === 'new')
      return {
        _id: null,
        name: '',
        type: 'company',
        status: 'candidate',
        context: '',
        country: '',
        searchTerms: [],
      }
    return watchlist?.find((e) => e._id === selectedId) || null
  }, [selectedId, watchlist])

  const error = watchlistError || suggestionError
  const isLoading = isLoadingWatchlist || isLoadingSuggestions

  if (error) {
    return (
      <div className="flex h-full w-full items-center justify-center text-center p-4">
        <div className="p-8 rounded-lg bg-destructive/10 border border-destructive/50 max-w-md">
          <ServerCrash className="w-12 h-12 mx-auto text-destructive mb-4" />
          <h1 className="text-2xl font-bold">Failed to Load Data</h1>
          <p className="text-destructive-foreground/80 mt-2">{error}</p>
        </div>
      </div>
    )
  }

  return (
    <div className="flex flex-col h-full">
      <PageHeader
        title="Watchlist Management"
        description="Manage entities and review AI-generated suggestions."
      >
        <Button onClick={handleAdd}>
          <PlusCircle className="mr-2 h-4 w-4" /> Add New Entity
        </Button>
      </PageHeader>
      <div className="mt-8 flex-grow min-h-0">
        <Tabs defaultValue="watchlist" className="h-full flex flex-col">
          <TabsList>
            <TabsTrigger value="watchlist">
              Monitored Entities ({totalWatchlist || 0})
            </TabsTrigger>
            <TabsTrigger value="suggestions">
              AI Suggestions ({totalSuggestions || 0})
            </TabsTrigger>
          </TabsList>
          <TabsContent value="watchlist" className="flex-grow min-h-0">
            <DataTable
              columns={watchlistColumns(
                handleEdit,
                handleRowUpdate,
                handleDelete,
                availableCountries
              )}
              data={watchlist || []}
              isLoading={isLoadingWatchlist}
              page={watchlistPage}
              setPage={setWatchlistPage}
              total={totalWatchlist}
              sorting={watchlistSorting}
              setSorting={setWatchlistSorting}
              columnFilters={watchlistColumnFilters}
              setColumnFilters={setWatchlistColumnFilters}
              filterColumn="name"
              filterPlaceholder="Filter by name..."
            />
          </TabsContent>
          <TabsContent value="suggestions" className="flex-grow min-h-0">
            <DataTable
              columns={suggestionColumns(handleSuggestionAction, handleSuggestionUpdate)}
              data={suggestions || []}
              isLoading={isLoadingSuggestions}
              page={suggestionPage}
              setPage={setSuggestionPage}
              total={totalSuggestions}
              sorting={suggestionSorting}
              setSorting={setSuggestionSorting}
              columnFilters={suggestionColumnFilters}
              setColumnFilters={setSuggestionColumnFilters}
              filterColumn="name"
              filterPlaceholder="Filter by name..."
            />
          </TabsContent>
        </Tabs>
      </div>
      <Sheet open={isEditorOpen} onOpenChange={setIsEditorOpen}>
        <SheetContent className="w-full sm:max-w-lg p-0">
          <WatchlistEditor
            key={selectedId}
            entity={activeEntityData}
            onSave={(saved) => {
              handleEditorSave(saved)
              setIsEditorOpen(false)
            }}
            onCancel={() => setIsEditorOpen(false)}
            countries={availableCountries}
          />
        </SheetContent>
      </Sheet>
      <ConfirmationDialog
        open={confirmState.isOpen}
        onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })}
        onConfirm={confirmDelete}
        title="Confirm Deletion"
        description="Are you sure you want to delete this entity? This action cannot be undone."
        confirmText="Delete Entity"
      />
    </div>
  )
}

```

## 📄 src/app/(admin)/watchlist/suggestion-search-term-manager.jsx
*Lines: 137, Size: 3.72 KB*

```jsx
// apps/admin/src/app/watchlist/suggestion-search-term-manager.jsx (version 1.0.0)
'use client'

import React, { useState, useEffect, useRef } from 'react'
import {
  Button,
  Badge,
  Input,
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@components/shared'
import { PlusCircle, X } from 'lucide-react'

const EditableTermBadge = ({ term, onUpdate, onRemove }) => {
  const [isEditing, setIsEditing] = useState(false)
  const [editText, setEditText] = useState(term)
  const inputRef = useRef(null)

  useEffect(() => {
    if (isEditing && inputRef.current) {
      inputRef.current.focus()
      inputRef.current.select()
    }
  }, [isEditing])

  const handleSave = () => {
    if (editText.trim() && editText.trim().toLowerCase() !== term) {
      onUpdate(term, editText.trim().toLowerCase())
    }
    setIsEditing(false)
  }

  if (isEditing) {
    return (
      <Input
        ref={inputRef}
        value={editText}
        onChange={(e) => setEditText(e.target.value)}
        onBlur={handleSave}
        onKeyDown={(e) => {
          if (e.key === 'Enter') handleSave()
          if (e.key === 'Escape') setIsEditing(false)
        }}
        className="h-6 text-xs w-auto inline-flex"
        style={{ width: `${Math.max(editText.length, 5)}ch` }}
      />
    )
  }

  return (
    <Badge
      variant="secondary"
      className="group cursor-pointer"
      onClick={() => setIsEditing(true)}
    >
      {term}
      <button
        onClick={(e) => {
          e.stopPropagation()
          onRemove(term)
        }}
        className="ml-1.5 opacity-50 group-hover:opacity-100 rounded-full hover:bg-background/50"
      >
        <X className="h-3 w-3" />
      </button>
    </Badge>
  )
}

export const SuggestionSearchTermManager = ({ suggestion, onUpdate }) => {
  const [newTerm, setNewTerm] = useState('')
  const [isPopoverOpen, setIsPopoverOpen] = useState(false)

  const handleUpdateTerms = (newTerms) => {
    onUpdate(suggestion, { searchTerms: [...new Set(newTerms)] })
  }

  const handleAddTerm = () => {
    if (newTerm.trim()) {
      handleUpdateTerms([...(suggestion.searchTerms || []), newTerm.trim().toLowerCase()])
      setNewTerm('')
      setIsPopoverOpen(false)
    }
  }

  const handleRemoveTerm = (termToRemove) => {
    handleUpdateTerms((suggestion.searchTerms || []).filter((t) => t !== termToRemove))
  }

  const handleUpdateTerm = (oldTerm, newTerm) => {
    handleUpdateTerms(
      (suggestion.searchTerms || []).map((t) => (t === oldTerm ? newTerm : t))
    )
  }

  return (
    <div className="flex flex-wrap items-center gap-1 max-w-md">
      {(suggestion.searchTerms || []).map((term) => (
        <EditableTermBadge
          key={term}
          term={term}
          onUpdate={handleUpdateTerm}
          onRemove={handleRemoveTerm}
        />
      ))}
      <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>
        <PopoverTrigger asChild>
          <Button size="icon" variant="ghost" className="h-6 w-6 rounded-full">
            <PlusCircle className="h-4 w-4" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-48 p-2">
          <div className="flex items-center gap-1">
            <Input
              value={newTerm}
              onChange={(e) => setNewTerm(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && handleAddTerm()}
              placeholder="Add term..."
              className="h-7 text-xs"
            />
            <Button
              size="icon"
              variant="default"
              className="h-7 w-7"
              onClick={handleAddTerm}
            >
              {' '}
              <PlusCircle className="h-4 w-4" />{' '}
            </Button>
          </div>
        </PopoverContent>
      </Popover>
    </div>
  )
}

```

## 📄 src/app/(admin)/watchlist/watchlist-editor.jsx
*Lines: 220, Size: 7.11 KB*

```jsx
// apps/admin/src/app/(protected)/watchlist/watchlist-editor.jsx (version 3.0.0)
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import {
  Button,
  CardFooter,
  Input,
  Textarea,
  Label,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@components/shared'
import { toast } from 'sonner'
import { Save, Loader2, PlusCircle, X, Sparkles } from 'lucide-react'
import { enrichEntity, suggestSearchTerms } from '@/lib/api-client'
import { createWatchlistEntity, updateWatchlistEntity } from '@/lib/api-client'

const FormField = ({ id, label, children }) => (
  <div className="space-y-2">
    {' '}
    <Label htmlFor={id} className="text-sm font-medium text-muted-foreground pl-1">
      {label}
    </Label>{' '}
    {children}{' '}
  </div>
)

export default function WatchlistEditor({ entity, onSave, onCancel, countries = [] }) {
  const [formData, setFormData] = useState(entity)
  const [isSaving, setIsSaving] = useState(false)
  const [isEnriching, setIsEnriching] = useState(false)
  const [isDirty, setIsDirty] = useState(false)

  useEffect(() => {
    setFormData(entity)
    setIsDirty(false)
  }, [entity])

  if (!entity) return null

  const isNewEntity = !entity._id
  const handleChange = (key, value) => {
    setFormData((prev) => ({ ...prev, [key]: value }))
    setIsDirty(true)
  }

  const handleAIEnrich = async () => {
    if (!formData.name) {
      toast.warning('Please enter a name before enriching.')
      return
    }
    setIsEnriching(true)
    const toastId = toast.loading('AI is enriching entity context...')
    try {
      const [contextRes, termsRes] = await Promise.all([
        enrichEntity(formData.name, formData.type),
        suggestSearchTerms(formData.name, formData.type, formData.context),
      ])
      if (contextRes.error && termsRes.error)
        throw new Error('AI enrichment failed on all fronts.')
      const updates = {}
      if (contextRes.context) updates.context = contextRes.context
      if (termsRes.searchTerms)
        updates.searchTerms = [
          ...new Set([...(formData.searchTerms || []), ...termsRes.searchTerms]),
        ]
      setFormData((prev) => ({ ...prev, ...updates }))
      setIsDirty(true)
      toast.success('AI enrichment successful!', { id: toastId })
    } catch (error) {
      toast.error('AI Enrichment Failed', { id: toastId, description: error.message })
    } finally {
      setIsEnriching(false)
    }
  }

  const handleSave = async () => {
    setIsSaving(true)
    try {
      const result = isNewEntity
        ? await createWatchlistEntity(formData)
        : await updateWatchlistEntity(entity._id, formData)
      if (result.error) throw new Error(result.error)
      onSave(result.entity)
      toast.success(
        `Entity "${result.entity.name}" ${isNewEntity ? 'created' : 'updated'}.`
      )
    } catch (error) {
      toast.error(`Error saving entity: ${error.message}`)
    } finally {
      setIsSaving(false)
    }
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="h-full flex flex-col"
    >
      <div className="flex justify-between items-center flex-shrink-0 p-6 border-b border-white/10">
        <div className="space-y-1">
          {' '}
          <h1 className="text-2xl font-bold tracking-tight flex items-center gap-2">
            {' '}
            {isNewEntity && <PlusCircle />}{' '}
            {isNewEntity ? 'Create New Entity' : 'Edit Entity'}{' '}
          </h1>{' '}
          <p className="text-sm text-muted-foreground">
            {' '}
            {isNewEntity ? 'Add a new target to the watchlist.' : formData.name}{' '}
          </p>{' '}
        </div>
        <Button variant="ghost" size="icon" onClick={onCancel}>
          {' '}
          <X className="h-4 w-4" />{' '}
        </Button>
      </div>
      <div className="flex-grow overflow-y-auto p-6 space-y-6">
        <FormField id="name" label="Name">
          <div className="flex gap-2">
            {' '}
            <Input
              value={formData.name || ''}
              onChange={(e) => handleChange('name', e.target.value)}
            />{' '}
            <Button
              variant="outline"
              onClick={handleAIEnrich}
              disabled={isEnriching || !formData.name}
            >
              {' '}
              {isEnriching ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                <Sparkles className="h-4 w-4" />
              )}{' '}
              AI Enrich{' '}
            </Button>{' '}
          </div>
        </FormField>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormField label="Type">
            {' '}
            <Select value={formData.type} onValueChange={(v) => handleChange('type', v)}>
              {' '}
              <SelectTrigger>
                {' '}
                <SelectValue />{' '}
              </SelectTrigger>{' '}
              <SelectContent>
                {' '}
                <SelectItem value="company">Company</SelectItem>{' '}
                <SelectItem value="person">Person</SelectItem>{' '}
                <SelectItem value="family">Family</SelectItem>{' '}
              </SelectContent>{' '}
            </Select>{' '}
          </FormField>
          <FormField label="Status">
            {' '}
            <Select
              value={formData.status}
              onValueChange={(v) => handleChange('status', v)}
            >
              {' '}
              <SelectTrigger>
                {' '}
                <SelectValue />{' '}
              </SelectTrigger>{' '}
              <SelectContent>
                {' '}
                <SelectItem value="candidate">Candidate</SelectItem>{' '}
                <SelectItem value="active">Active</SelectItem>{' '}
                <SelectItem value="inactive">Inactive</SelectItem>{' '}
              </SelectContent>{' '}
            </Select>{' '}
          </FormField>
        </div>
        <FormField id="context" label="Context / AKA">
          {' '}
          <Input
            value={formData.context || ''}
            onChange={(e) => handleChange('context', e.target.value)}
            placeholder="e.g., The Lego Family"
          />{' '}
        </FormField>
        <FormField id="searchTerms" label="Search Terms (Crums)">
          {' '}
          <Textarea
            value={(formData.searchTerms || []).join(', ')}
            onChange={(e) =>
              handleChange(
                'searchTerms',
                e.target.value.split(',').map((s) => s.trim().toLowerCase())
              )
            }
            placeholder="e.g., hanni, kasprzak, ecco"
          />{' '}
        </FormField>
      </div>
      <CardFooter className="mt-auto border-t border-white/10 p-6 flex justify-end">
        <Button onClick={handleSave} disabled={!isDirty || isSaving}>
          {' '}
          {isSaving ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Save className="mr-2 h-4 w-4" />
          )}{' '}
          {isSaving ? 'Saving...' : 'Save Changes'}{' '}
        </Button>
      </CardFooter>
    </motion.div>
  )
}

```

## 📄 src/app/(client)/articles/page.js
*Lines: 35, Size: 927 Bytes*

```javascript
// apps/client/src/app/(protected)/articles/page.js (NEW FILE)
import { DataView } from '@/components/DataView'
import { getArticles } from '@headlines/data-access'

export const dynamic = 'force-dynamic'

const sortOptions = [
  { value: 'date_desc', icon: 'clock', tooltip: 'Sort by Date (Newest First)' },
  { value: 'relevance_desc', icon: 'relevance', tooltip: 'Sort by Relevance' },
]

export default async function ArticlesPage() {
  let initialArticles = []
  try {
    const articles = await getArticles({ page: 1 })
    initialArticles = articles
  } catch (err) {
    console.error(
      '[ArticlesPage Build] Exception fetching initial articles:',
      err.message
    )
  }

  return (
    <DataView
      viewTitle="Raw Articles"
      baseSubtitle="articles"
      sortOptions={sortOptions}
      queryKeyPrefix="articles"
      listComponentKey="article-list"
      initialData={initialArticles}
    />
  )
}

```

## 📄 src/app/(client)/chat/page.js
*Lines: 7, Size: 179 Bytes*

```javascript
// apps/client/src/app/(protected)/chat/page.js (NEW FILE)
import { ChatManager } from '@/components/ChatManager'

export default function ChatPage() {
  return <ChatManager />
}

```

## 📄 src/app/(client)/client-layout-wrapper.js
*Lines: 10, Size: 433 Bytes*

```javascript
// File (4 of 5): headlines/src/app/(client)/client-layout-wrapper.js
'use client'

import { AppShell } from '@/app/_components/AppShell'

// This is a Client Component that acts as a bridge. It receives server-fetched props
// and passes them to the AppShell, which can now safely use client hooks.
export function ClientLayoutWrapper({ children, serverProps }) {
  return <AppShell serverProps={serverProps}>{children}</AppShell>
}
```

## 📄 src/app/(client)/events/page.js
*Lines: 59, Size: 1.99 KB*

```javascript
// Full Path: headlines/src/app/(client)/events/page.js
import { DataView } from '@/components/client/DataView'
import { getEvents, getGlobalCountries } from '@headlines/data-access'
import { getUserIdFromSession } from '@/lib/auth/server'
import { cookies } from 'next/headers'

const sortOptions = [
  { value: 'date_desc', icon: 'clock', tooltip: 'Sort by Date (Newest First)' },
  { value: 'relevance_desc', icon: 'relevance', tooltip: 'Sort by Relevance' },
]

export default async function EventsPage({ searchParams }) {
  const userId = await getUserIdFromSession()

  // Read the client's filter state from the cookie on the server
  const cookieStore = cookies()
  const zustandCookie = cookieStore.get('headlines-app-storage')
  let serverSideCountryFilter = null
  if (zustandCookie?.value) {
    try {
      const parsedCookie = JSON.parse(zustandCookie.value)
      const globalFilter = parsedCookie?.state?.globalCountryFilter
      if (Array.isArray(globalFilter) && globalFilter.length > 0) {
        serverSideCountryFilter = globalFilter.join(',')
      }
    } catch (e) {
      console.error('Failed to parse Zustand cookie for server-side filter', e)
    }
  }

  const filters = {
    category: searchParams.category,
    country: serverSideCountryFilter, // Use the cookie value for the initial fetch
  }

  const [eventsResult, allCountriesResult] = await Promise.all([
    getEvents({ page: 1, filters, sort: searchParams.sort, userId }).catch((err) => ({
      success: false,
      data: [],
    })),
    getGlobalCountries().catch((err) => ({ success: false, data: [] })),
  ])

  const initialEvents = eventsResult.success ? eventsResult.data : []
  const countriesWithEvents = (allCountriesResult.data || []).filter((c) => c.count > 0)

  return (
    <DataView
      viewTitle="Synthesized Events"
      sortOptions={sortOptions}
      queryKeyPrefix="events"
      listComponentKey="event-list"
      initialData={initialEvents}
      filters={filters}
      allCountries={countriesWithEvents}
    />
  )
}

```

## 📄 src/app/(client)/layout.js
*Lines: 24, Size: 992 Bytes*

```javascript
// File (3 of 5): headlines/src/app/(client)/layout.js
import { getDashboardStats, getGlobalCountries } from '@headlines/data-access'
import { ClientLayoutWrapper } from './client-layout-wrapper' // Import the new wrapper

// This is a Server Component. It fetches data and passes it to the client wrapper.
export default async function ClientLayout({ children }) {
  const [statsResult, countriesResult] = await Promise.all([
    getDashboardStats().catch((e) => ({ success: false, data: null })),
    getGlobalCountries().catch((e) => ({ success: false, data: [] })),
  ])

  const serverProps = {
    articleCount: statsResult.data?.articles?.total || 0,
    eventCount: statsResult.data?.events?.total || 0,
    opportunityCount: statsResult.data?.opportunities?.total || 0,
    globalCountries: countriesResult.data || [],
  }

  return (
    // The wrapper receives server-fetched data as props.
    <ClientLayoutWrapper serverProps={serverProps}>{children}</ClientLayoutWrapper>
  )
}

```

## 📄 src/app/(client)/opportunities/[opportunityId]/page.js
*Lines: 140, Size: 4.87 KB*

```javascript
// apps/client/src/app/(protected)/opportunities/[opportunityId]/page.js (version 1.0.1 - Complete)
import { getOpportunityDetails } from '@headlines/data-access'
import { notFound } from 'next/navigation'
import Link from 'next/link'
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  Button,
  Badge,
} from '@shared/ui'
import { ArrowLeft, User, MapPin, Briefcase, Mail, Zap, ExternalLink } from 'lucide-react'
import { format } from 'date-fns'
import { getCountryFlag } from '@shared/utils-shared'

function TimelineItem({ event, isLast }) {
  return (
    <div className="flex gap-4">
      <div className="flex flex-col items-center">
        <div className="w-3 h-3 bg-blue-500 rounded-full ring-4 ring-slate-800"></div>
        {!isLast && <div className="flex-grow w-px bg-slate-700"></div>}
      </div>
      <div className="flex-grow pb-8">
        <p className="text-xs text-slate-400">
          {format(new Date(event.createdAt), 'MMMM d, yyyy')}
        </p>
        <h3 className="font-semibold text-slate-100 mt-1">
          {event.synthesized_headline}
        </h3>
        <p className="text-sm text-slate-400 mt-1">{event.synthesized_summary}</p>
        <div className="mt-2 flex flex-wrap gap-2">
          {event.source_articles.map((article) => (
            <a
              href={article.link}
              target="_blank"
              rel="noopener noreferrer"
              key={article.link}
            >
              <Badge variant="secondary" className="hover:bg-slate-700">
                {article.newspaper}
                <ExternalLink className="h-3 w-3 ml-1.5" />
              </Badge>
            </a>
          ))}
        </div>
      </div>
    </div>
  )
}

export default async function OpportunityDossierPage({ params }) {
  const { opportunityId } = params
  const { success, data: opportunity } = await getOpportunityDetails(opportunityId)

  if (!success || !opportunity) {
    notFound()
  }

  const { contactDetails } = opportunity
  const flag = getCountryFlag(opportunity.basedIn)

  return (
    <div className="max-w-4xl mx-auto">
      <Button asChild variant="ghost" className="mb-4">
        <Link href="/opportunities">
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back to Opportunities
        </Link>
      </Button>
      <Card className="bg-slate-900/50 border-slate-700/80">
        <CardHeader>
          <div className="flex justify-between items-start">
            <div>
              <CardTitle className="text-3xl font-bold flex items-center gap-3">
                <User className="h-8 w-8 text-slate-400" />
                {opportunity.reachOutTo}
              </CardTitle>
              <CardDescription className="mt-2 text-base">
                {contactDetails?.role && contactDetails?.company && (
                  <span className="flex items-center gap-2">
                    <Briefcase className="h-4 w-4" />
                    {contactDetails.role} at <strong>{contactDetails.company}</strong>
                  </span>
                )}
              </CardDescription>
            </div>
            {opportunity.likelyMMDollarWealth > 0 && (
              <Badge
                variant="outline"
                className="text-lg border-green-500/50 text-green-300"
              >
                Est. ${opportunity.likelyMMDollarWealth}M
              </Badge>
            )}
          </div>
          <div className="flex flex-wrap gap-x-6 gap-y-2 pt-4 text-sm text-slate-300">
            {(opportunity.city || opportunity.basedIn) && (
              <span className="flex items-center gap-2">
                <MapPin className="h-4 w-4 text-slate-500" />
                <span className="text-xl mr-1">{flag}</span>
                {opportunity.city}
                {opportunity.city && opportunity.basedIn ? ', ' : ''}
                {opportunity.basedIn}
              </span>
            )}
            {contactDetails?.email && (
              <a
                href={`mailto:${contactDetails.email}`}
                className="flex items-center gap-2 text-blue-400 hover:underline"
              >
                <Mail className="h-4 w-4 text-slate-500" />
                {contactDetails.email}
              </a>
            )}
          </div>
        </CardHeader>
        <CardContent>
          <div className="border-t border-slate-700 pt-6">
            <h3 className="text-lg font-semibold flex items-center gap-2 mb-4">
              <Zap className="h-5 w-5 text-blue-400" />
              Event Timeline
            </h3>
            <div className="relative">
              {(opportunity.events || []).map((event, index) => (
                <TimelineItem
                  key={event._id}
                  event={event}
                  isLast={index === opportunity.events.length - 1}
                />
              ))}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

```

## 📄 src/app/(client)/opportunities/page.js
*Lines: 65, Size: 2.22 KB*

```javascript
// Full Path: headlines/src/app/(client)/opportunities/page.js
import { DataView } from '@/components/client/DataView'
import { getOpportunities, getGlobalCountries } from '@headlines/data-access'
import { getUserIdFromSession } from '@/lib/auth/server'
import { cookies } from 'next/headers'

export const metadata = {
  title: 'Opportunities | Headlines',
  description: 'Manage and track wealth management opportunities.',
}

const sortOptions = [
  { value: 'date_desc', icon: 'clock', tooltip: 'Sort by Date (Newest First)' },
  { value: 'size_desc', icon: 'size', tooltip: 'Sort by Estimated Size' },
]

export default async function OpportunitiesPage({ searchParams }) {
  const userId = await getUserIdFromSession()

  // Read the client's filter state from the cookie on the server
  const cookieStore = cookies()
  const zustandCookie = cookieStore.get('headlines-app-storage')
  let serverSideCountryFilter = null
  if (zustandCookie?.value) {
    try {
      const parsedCookie = JSON.parse(zustandCookie.value)
      const globalFilter = parsedCookie?.state?.globalCountryFilter
      if (Array.isArray(globalFilter) && globalFilter.length > 0) {
        serverSideCountryFilter = globalFilter.join(',')
      }
    } catch (e) {
      console.error('Failed to parse Zustand cookie for server-side filter', e)
    }
  }

  const filters = {
    country: serverSideCountryFilter, // Use the cookie value for the initial fetch
    withEmail: searchParams.withEmail === 'true',
  }

  const [oppsResult, allCountriesResult] = await Promise.all([
    getOpportunities({ page: 1, filters, sort: searchParams.sort, userId }).catch(
      (err) => ({ success: false, data: [] })
    ),
    getGlobalCountries().catch((err) => ({ success: false, data: [] })),
  ])

  const initialOpportunities = oppsResult.success ? oppsResult.data : []
  const countriesWithEvents = (allCountriesResult.data || []).filter((c) => c.count > 0)

  return (
    <div>
      <DataView
        viewTitle="Actionable Opportunities"
        sortOptions={sortOptions}
        queryKeyPrefix="opportunities"
        listComponentKey="opportunity-list"
        initialData={initialOpportunities}
        filters={filters}
        allCountries={countriesWithEvents}
      />
    </div>
  )
}

```

## 📄 src/app/(client)/settings/page.js
*Lines: 20, Size: 632 Bytes*

```javascript
// apps/client/src/app/(protected)/settings/page.js (NEW FILE)
import { getGlobalCountries } from '@headlines/data-access'
import { SettingsForm } from '@/components/SettingsForm'

export default async function SettingsPage() {
  const { data: allCountries } = await getGlobalCountries()

  return (
    <div className="max-w-4xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold">Settings</h1>
        <p className="text-lg text-slate-300 mt-1">
          Manage your profile and notification preferences.
        </p>
      </div>
      <SettingsForm allCountries={allCountries} />
    </div>
  )
}

```

## 📄 src/app/(client)/upload/page.js
*Lines: 7, Size: 180 Bytes*

```javascript
// apps/client/src/app/(protected)/upload/page.js (NEW FILE)
import { UploadView } from '@/components/UploadView'

export default function UploadPage() {
  return <UploadView />
}

```

## 📄 src/app/_components/AppShell.jsx
*Lines: 50, Size: 1.45 KB*

```jsx
// File: apps/client/src/app/_components/AppShell.jsx

'use client'

import { usePathname } from 'next/navigation'
import { Header } from '@/components/client/Header'
import { MainNavTabs } from '@/components/client/MainNavTabs'

// Placeholder for AdminNav
const AdminNav = () => <div className="w-64 bg-gray-800 p-4 text-white">Admin Nav</div>

// The AppShell now expects serverProps to pass to the Header and children for the page content.
export function AppShell({ children, serverProps }) {
  const pathname = usePathname()

  const isLoginPage = pathname.startsWith('/login')
  const isAdminPage = pathname.startsWith('/admin')
  const isClientPage = !isLoginPage && !isAdminPage

  if (isLoginPage) {
    return <>{children}</>
  }

  // Admin layout remains the same for now
  if (isAdminPage) {
    return (
      <div className="flex h-screen">
        <AdminNav />
        <main className="flex-1 p-6">{children}</main>
      </div>
    )
  }

  // Client layout now uses the real components and renders children in the main tag
  if (isClientPage) {
    return (
      <div className="container mx-auto p-4 md:p-8 flex flex-col min-h-screen">
        <Header {...serverProps} />
        <div className="sticky top-[5px] z-30 my-4">
          <MainNavTabs />
        </div>
        <main className="flex-grow flex flex-col mt-0 min-h-0">{children}</main>
      </div>
    )
  }

  // Fallback to render children if no other condition is met
  return <>{children}</>
}

```

## 📄 src/app/_components/AppWrapper.jsx
*Lines: 36, Size: 1.29 KB*

```jsx
// File: apps/client/src/app/_components/AppWrapper.jsx (Corrected)

import 'server-only'
import { verifySession } from '@/lib/auth/server'
import { AuthProvider } from '@/lib/auth/AuthProvider'
import { AppShell } from './AppShell' // <-- Import AppShell here
import { getDashboardStats, getGlobalCountries } from '@headlines/data-access'

export async function AppWrapper({ children }) {
  // This Server Component now fetches ALL initial data
  const { user } = await verifySession()

  const [statsResult, countriesResult] = await Promise.all([
    getDashboardStats().catch((e) => ({ success: false, data: null })),
    getGlobalCountries().catch((e) => ({ success: false, data: [] })),
  ])

  const serverProps = {
    articleCount: statsResult.data?.articles?.total || 0,
    eventCount: statsResult.data?.events?.total || 0,
    opportunityCount: statsResult.data?.opportunities?.total || 0,
    globalCountries: countriesResult.data || [],
  }

  return (
    // AuthProvider is a Client Component, receiving the initial user
    <AuthProvider initialUser={user}>
      {/* AppShell is a Client Component, receiving serverProps */}
      <AppShell serverProps={serverProps}>
        {/* The actual page content is rendered inside the AppShell */}
        {children}
      </AppShell>
    </AuthProvider>
  )
}

```

## 📄 src/app/api/ai-client/analyze-source-structure/route.js
*Lines: 66, Size: 2.09 KB*

```javascript
// apps/admin/src/app/api/ai/analyze-source-structure/route.js (version 1.0)
import { NextResponse } from 'next/server'
import { verifyAdmin } from '@shared/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'
import * as cheerio from 'cheerio'

export async function POST(request) {
  await initializeSharedLogic()
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ success: false, error: authError }, { status: 401 })
  }

  try {
    const { url } = await request.json()
    if (!url) {
      return NextResponse.json(
        { success: false, error: 'URL is required.' },
        { status: 400 }
      )
    }

    const html = await fetchPageWithPlaywright(url, 'SourceStructureAnalyzer')
    if (!html) {
      throw new Error('Failed to fetch page content.')
    }

    const heuristicSuggestions = heuristicallyFindSelectors(html)
    const $ = cheerio.load(html)
    const baseUrl = new URL(url).origin

    // Live test each suggestion to get a real count and samples
    const finalSuggestions = heuristicSuggestions
      .map((suggestion) => {
        const matchedElements = $(suggestion.selector)
        const samples = []
        matchedElements.slice(0, 10).each((_, el) => {
          const linkEl = $(el).is('a') ? $(el) : $(el).find('a').first()
          const text = $(el).text().trim().replace(/\s+/g, ' ')
          const href = linkEl.attr('href')
          if (text && href) {
            try {
              samples.push({ text, href: new URL(href, baseUrl).href })
            } catch (e) {
              /* ignore invalid urls */
            }
          }
        })
        return {
          selector: suggestion.selector,
          count: matchedElements.length,
          samples,
        }
      })
      .filter((s) => s.count > 0)

    return NextResponse.json({ success: true, url, suggestions: finalSuggestions })
  } catch (e) {
    console.error('[API analyze-source-structure Error]', e)
    return NextResponse.json(
      { success: false, error: 'Analysis failed', details: e.message },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api/ai-client/debug-source/route.js
*Lines: 30, Size: 1.02 KB*

```javascript
// apps/admin/src/app/api/ai/debug-source/route.js (version 1.0)
import { NextResponse } from 'next/server'
import { initializeSharedLogic } from '@/lib/init-shared-logic'
import { verifyAdmin } from '@shared/auth'
// Logic for this route might need to be created or moved into ai-services
// For now, we will return a placeholder. This will be implemented in a future step.

export async function POST(request) {
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  await initializeSharedLogic()
  const sourceData = await request.json()

  // Placeholder logic - this would call a complex chain in ai-services
  console.log('AI Debug triggered for source:', sourceData.name)

  return NextResponse.json(
    {
      success: false,
      error: 'AI Debugging is not yet implemented.',
      details:
        'The backend logic for the AI Auto-Heal feature is pending implementation.',
    },
    { status: 501 }
  ) // 501 Not Implemented
}

```

## 📄 src/app/api/ai-client/enrich-entity/route.js
*Lines: 55, Size: 2.08 KB*

```javascript
// apps/admin/src/app/api/ai/enrich-entity/route.js (version 1.0)
import { NextResponse } from 'next/server'
import { initializeSharedLogic } from '@/lib/init-shared-logic'
import { callLanguageModel } from '@headlines/ai-services'
import { verifyAdmin } from '@shared/auth'

const getEntityEnrichmentPrompt = () => `
You are a corporate intelligence analyst. Your task is to provide a brief, factual, one-sentence context for a given person, family, or company name. This context will be used in a financial intelligence watchlist.
**CRITICAL Instructions:**
1.  **Analyze the entity name and type.**
2.  **Provide a single, concise sentence.** Examples: "Founder and CEO of Microsoft.", "Danish family behind the LEGO Group (Kirkbi A/S).", "Leading Nordic private equity firm."
3.  **Be factual and neutral.**
4.  **If the name is ambiguous or you have no information, you MUST return "null".**
5.  **Your response MUST be a valid JSON object with the following structure:** { "context": "Your one-sentence description." | null }
`

export async function POST(request) {
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  try {
    await initializeSharedLogic()
    const { name, type } = await request.json()

    if (!name || !type) {
      return NextResponse.json(
        { error: 'Entity name and type are required.' },
        { status: 400 }
      )
    }

    const userContent = `Enrich the following entity:\nName: ${name}\nType: ${type}`
    const result = await callLanguageModel({
      modelName: process.env.LLM_MODEL_UTILITY || 'gpt-5-nano',
      systemPrompt: getEntityEnrichmentPrompt(),
      userContent,
      isJson: true,
    })

    if (result.error) {
      throw new Error(result.error)
    }

    return NextResponse.json({ success: true, context: result.context })
  } catch (error) {
    console.error('[API AI Enrich Entity Error]', error)
    return NextResponse.json(
      { success: false, error: 'Failed to enrich entity.', details: error.message },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api/ai-client/full-source-analysis/route.js
*Lines: 75, Size: 3.29 KB*

```javascript
// apps/admin/src/app/api/ai/full-source-analysis/route.js (version 1.0)
import { NextResponse } from 'next/server';
import { initializeSharedLogic } from '@/lib/init-shared-logic';
import { smartStripHtml } from '@headlines/utils-server';
import { callLanguageModel } from '@headlines/ai-services';
import { verifyAdmin } from '@shared/auth';

const getSourceAnalysisPrompt = () => `
You are an expert web scraping engineer. Your task is to devise a complete, robust "Extraction Recipe" for scraping headlines from the provided HTML.
**CRITICAL Instructions:**
1.  **Analyze HTML Structure:** Identify the primary repeating container element for each news article.
2.  **Devise the Recipe:** You MUST determine three key CSS selectors:
    *   \`headlineSelector\`: The selector for the main container of a single article teaser.
    *   \`linkSelector\`: The selector for the \`<a>\` tag, *relative to the headlineSelector*.
    *   \`headlineTextSelector\`: The selector for the element containing the headline text, *relative to the headlineSelector*.
    *   \`articleSelector\`: A best-guess, robust selector for the main article content (e.g., \`div.article-body\`).
3.  **Your response MUST be a valid JSON object:** \`{ "recipe": { "headlineSelector": "...", "linkSelector": "...", "headlineTextSelector": "...", "articleSelector": "..." } }\`
`;

export async function POST(request) {
  const { isAdmin, error: authError } = await verifyAdmin();
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 });
  }

  try {
    await initializeSharedLogic();
    const { url } = await request.json();
    if (!url) return NextResponse.json({ error: 'URL is required.' }, { status: 400 });

    const rawHtml = await fetchPageWithPlaywright(url);
    const cleanHtml = await smartStripHtml(rawHtml);

    const analysis = await callLanguageModel({
      modelName: process.env.LLM_MODEL_UTILITY || 'gpt-5-nano',
      systemPrompt: getSourceAnalysisPrompt(),
      userContent: `Analyze the following HTML and provide a complete extraction recipe.\n\nHTML:\n\`\`\`html\n${cleanHtml}\n\`\`\``,
      isJson: true,
    });

    if (analysis.error || !analysis.recipe) {
      throw new Error(analysis.error || 'AI failed to generate a valid recipe.');
    }

    const recipe = analysis.recipe;
    const configuration = {
      ...recipe,
      sectionUrl: url,
      status: 'active',
      scrapeFrequency: 'high',
      isStatic: false, 
      isDynamicContent: true,
      extractionMethod: 'declarative',
    };
    try {
        const urlObject = new URL(url);
        configuration.baseUrl = urlObject.origin;
        const name = urlObject.hostname.replace(/^www\./, '').split('.')[0];
        configuration.name = name.charAt(0).toUpperCase() + name.slice(1);
    } catch(e) {}

    const headlines = await testHeadlineExtraction(configuration, rawHtml);
    if (headlines.length === 0) {
      throw new Error('AI analysis complete, but live test found 0 headlines with the generated recipe.');
    }

    return NextResponse.json({
      success: true,
      configuration,
      testResults: { count: headlines.length, headlines: headlines.slice(0, 5) },
    });
  } catch (error) {
    return NextResponse.json({ success: false, error: 'Failed to perform full source analysis.', details: error.message }, { status: 500 });
  }
}
```

## 📄 src/app/api/ai-client/scrape/test-recipe/route.js
*Lines: 66, Size: 2 KB*

```javascript
// apps/admin/src/app/api/scrape/test-recipe/route.js (version 1.0)
import { NextResponse } from 'next/server'
import { initializeSharedLogic } from '@/lib/init-shared-logic'
import { verifyAdmin } from '@shared/auth'

export async function POST(request) {
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  try {
    await initializeSharedLogic()
    const { sourceConfig, articleUrl } = await request.json()

    // Mode 1: Test a single article's content
    if (articleUrl && sourceConfig.articleSelector) {
      const content = await scrapeArticleContentForTest(
        articleUrl,
        sourceConfig.articleSelector
      )
      return NextResponse.json({
        success: true,
        content: { preview: content, sourceUrl: articleUrl },
      })
    }

    // Mode 2: Test the full source recipe for headlines
    if (sourceConfig && sourceConfig.sectionUrl) {
      const headlines = await testHeadlineExtraction(sourceConfig)
      let firstArticleContent = ''
      if (headlines.length > 0 && sourceConfig.articleSelector) {
        firstArticleContent = await scrapeArticleContentForTest(
          headlines[0].link,
          sourceConfig.articleSelector
        )
      }
      return NextResponse.json({
        success: true,
        headlines: {
          count: headlines.length,
          samples: headlines.slice(0, 10),
        },
        content: {
          preview: firstArticleContent,
          sourceUrl: headlines.length > 0 ? headlines[0].link : null,
        },
      })
    }

    return NextResponse.json(
      {
        error:
          'Invalid request payload. Must provide either a full sourceConfig or a sourceConfig with an articleUrl.',
      },
      { status: 400 }
    )
  } catch (error) {
    console.error('[API Test Recipe Error]', error)
    return NextResponse.json(
      { success: false, error: 'Failed to perform test scrape.', details: error.message },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api/ai-client/suggest-search-terms/route.js
*Lines: 54, Size: 2.39 KB*

```javascript
// apps/admin/src/app/api/ai/suggest-search-terms/route.js (version 1.0)
import { NextResponse } from 'next/server'
import { callLanguageModel } from '@headlines/ai-services'
import { verifyAdmin } from '@shared/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'

const getSearchTermPrompt = () => `
You are a search query generation expert for a financial intelligence firm. Your task is to analyze an entity's name, type, and context to generate a list of likely search terms (or "crums") that would identify this entity in news headlines.

**CRITICAL Instructions:**
1.  **Analyze the Input:** You will receive the entity's formal name, its type (person, family, company), and a brief context sentence.
2.  **Generate Aliases and Keywords:** Think of common abbreviations, alternative spellings, key individuals, or related company names. For example, for "Kirk Kristiansen family", terms could be "kirk kristiansen", "lego family", "kirkbi". For "Hanni Merete Toosbuy Kasprzak", a key term would be "ecco".
3.  **Return a List:** Your output should be a list of 3-5 lowercase strings.
4.  **Simplicity is Key:** The terms should be simple and likely to appear in text.
5.  **Your response MUST be a valid JSON object with the following structure:** { "searchTerms": ["term1", "term2"] }
`

export async function POST(request) {
  await initializeSharedLogic()
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  try {
    const { name, type, context } = await request.json()
    if (!name || !type) {
      return NextResponse.json({ error: 'Name and type are required.' }, { status: 400 })
    }

    const userContent = `Entity Name: ${name}\nEntity Type: ${type}\nContext: ${context || 'No context provided.'}`

    const result = await callLanguageModel({
      modelName: process.env.LLM_MODEL_UTILITY || 'gpt-5-nano',
      systemPrompt: getSearchTermPrompt(),
      userContent,
      isJson: true,
    })
    if (result.error) throw new Error(result.error)

    return NextResponse.json({ success: true, searchTerms: result.searchTerms })
  } catch (error) {
    console.error('[API AI Suggest Search Terms Error]', error)
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to suggest search terms.',
        details: error.message,
      },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api/analytics/route.js
*Lines: 83, Size: 2.96 KB*

```javascript
// src/app/api/analytics/route.js - Analytics dashboard API
import { 
    getAnalyticsDashboard, 
    generateSystemRecommendations, 
    exportAnalytics,
    checkAlerts,
    cleanupAnalytics,
    identifyHallucinationRisks 
} from '@/lib/monitoring';

export async function GET(req) {
    try {
        const { searchParams } = new URL(req.url);
        const action = searchParams.get('action') || 'dashboard';
        const format = searchParams.get('format') || 'json';
        
        switch (action) {
            case 'dashboard':
                const dashboard = getAnalyticsDashboard();
                return Response.json(dashboard);
                
            case 'recommendations':
                const recommendations = generateSystemRecommendations();
                return Response.json({ recommendations });
                
            case 'alerts':
                const alerts = checkAlerts();
                return Response.json({ alerts, count: alerts.length });
                
            case 'risks':
                const risks = identifyHallucinationRisks();
                return Response.json({ risks });
                
            case 'export':
                const exportData = exportAnalytics(format);
                const headers = {
                    'Content-Type': format === 'csv' ? 'text/csv' : 'application/json',
                    'Content-Disposition': `attachment; filename="rag-analytics-${new Date().toISOString().split('T')[0]}.${format}"`
                };
                return new Response(exportData, { headers });
                
            case 'health':
                const healthData = {
                    status: 'healthy',
                    timestamp: new Date().toISOString(),
                    alerts: checkAlerts(),
                    uptime: process.uptime(),
                    memory: process.memoryUsage()
                };
                return Response.json(healthData);
                
            default:
                return Response.json({ error: 'Unknown action' }, { status: 400 });
        }
        
    } catch (error) {
        console.error('[Analytics API Error]', error);
        return Response.json({ error: 'Internal server error' }, { status: 500 });
    }
}

export async function POST(req) {
    try {
        const { action, ...params } = await req.json();
        
        switch (action) {
            case 'cleanup':
                const daysToKeep = params.daysToKeep || 30;
                const cleanupResult = cleanupAnalytics(daysToKeep);
                return Response.json({ 
                    message: 'Cleanup completed',
                    ...cleanupResult 
                });
                
            default:
                return Response.json({ error: 'Unknown action' }, { status: 400 });
        }
        
    } catch (error) {
        console.error('[Analytics API Error]', error);
        return Response.json({ error: 'Internal server error' }, { status: 500 });
    }
}
```

## 📄 src/app/api/articles/route.js
*Lines: 35, Size: 1.2 KB*

```javascript
// apps/client/src/app/api/articles/route.js (version 2.0.0)
import { NextResponse } from 'next/server'
import { getArticles, getTotalArticleCount } from '@headlines/data-access'
import { getUserIdFromSession } from '@shared/auth'

export const dynamic = 'force-dynamic'

export async function GET(request) {
  const { searchParams } = new URL(request.url)
  const page = parseInt(searchParams.get('page') || '1', 10)
  const sort = searchParams.get('sort') || 'date_desc'
  const q = searchParams.get('q') || ''

  const userId = await getUserIdFromSession()
  if (!userId)
    return NextResponse.json({ error: 'Authentication required' }, { status: 401 })

  try {
    const [articlesResult, totalResult] = await Promise.all([
      getArticles({ page, filters: { q }, sort, userId }),
      getTotalArticleCount({ filters: { q }, userId }),
    ])

    if (!articlesResult.success || !totalResult.success) {
      throw new Error(
        articlesResult.error || totalResult.error || 'Failed to fetch article data'
      )
    }

    return NextResponse.json({ data: articlesResult.data, total: totalResult.total })
  } catch (error) {
    return NextResponse.json({ error: 'Failed to fetch articles' }, { status: 500 })
  }
}

```

## 📄 src/app/api/auth/login/route.js
*Lines: 61, Size: 1.55 KB*

```javascript
// apps/client/src/app/api/auth/login/route.js
import { NextResponse } from 'next/server'
import { loginUser } from '@headlines/data-access'
import * as jose from 'jose'
import { env } from '@headlines/config'

const JWT_COOKIE_NAME = 'headlines-jwt'

export async function POST(request) {
  try {
    const { email, password } = await request.json()

    // 1. Call the centralized business logic
    const result = await loginUser({ email, password })

    if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: 401 })
    }

    const user = result.user

    // 2. Handle HTTP-specific tasks (JWT creation and cookie setting)
    const secret = new TextEncoder().encode(env.JWT_SECRET)
    const token = await new jose.SignJWT({
      userId: user._id.toString(),
      email: user.email,
      role: user.role,
    })
      .setProtectedHeader({ alg: 'HS256' })
      .setIssuedAt()
      .setExpirationTime('30d')
      .sign(secret)

    const response = NextResponse.json({
      user: {
        _id: user._id,
        firstName: user.firstName,
        email: user.email,
        role: user.role,
      },
    })

    response.cookies.set({
      name: JWT_COOKIE_NAME,
      value: token,
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      path: '/',
      maxAge: 60 * 60 * 24 * 30, // 30 days
    })

    return response
  } catch (error) {
    console.error('[API Login Route Error]', error)
    return NextResponse.json(
      { error: 'An internal server error occurred.' },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api/auth/logout/route.js
*Lines: 18, Size: 434 Bytes*

```javascript
// apps/client/src/app/api/auth/logout/route.js
import { NextResponse } from 'next/server'

const JWT_COOKIE_NAME = 'headlines-jwt'

export async function POST() {
  const response = NextResponse.json({ message: 'Logged out successfully' })
  response.cookies.set({
    name: JWT_COOKIE_NAME,
    value: '',
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    path: '/',
    maxAge: 0,
  })
  return response
}

```

## 📄 src/app/api/chat/route.js
*Lines: 18, Size: 725 Bytes*

```javascript
// apps/client/src/app/api/chat/route.js (Refactored)
import { processChatRequest } from '@headlines/ai-services';

// This API route is now a lightweight wrapper.
// All heavy logic is correctly encapsulated in the @headlines/ai-services package.
export async function POST(req) {
  try {
    const { messages } = await req.json();
    // Delegate all complex logic to the shared service.
    const response = await processChatRequest(messages);
    return Response.json(response);
  } catch (error) {
    console.error('[CHAT API Top-Level Error]', error);
    const errorMessage = 'An error occurred while processing your request.';
    return new Response(JSON.stringify({ error: errorMessage }), { status: 500 });
  }
}

```

## 📄 src/app/api/chat/title/route.js
*Lines: 26, Size: 803 Bytes*

```javascript
// apps/client/src/app/api/chat/title/route.js
import { NextResponse } from 'next/server'
import { generateChatTitle } from '@headlines/data-access/server' // Use the server entry point
import { verifySession } from '@shared/auth'

export async function POST(request) {
  const { user, error } = await verifySession()
  if (!user) {
    return NextResponse.json(
      { error: error || 'Authentication required' },
      { status: 401 }
    )
  }

  try {
    const { messages } = await request.json()
    const result = await generateChatTitle(messages)
    if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: 400 })
    }
    return NextResponse.json(result)
  } catch (e) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

```

## 📄 src/app/api/events/route.js
*Lines: 40, Size: 1.34 KB*

```javascript
// apps/client/src/app/api/events/route.js (NEW FILE)
import { NextResponse } from 'next/server'
import { getEvents, getTotalEventCount } from '@headlines/data-access'
import { getUserIdFromSession } from '@shared/auth'

export const dynamic = 'force-dynamic'

export async function GET(request) {
  const { searchParams } = new URL(request.url)
  const page = parseInt(searchParams.get('page') || '1', 10)
  const sort = searchParams.get('sort') || 'date_desc'
  const filters = {
    q: searchParams.get('q') || '',
    country: searchParams.get('country') || '',
    category: searchParams.get('category') || '',
    favoritesOnly: searchParams.get('favorites') === 'true',
  }

  const userId = await getUserIdFromSession()
  if (!userId)
    return NextResponse.json({ error: 'Authentication required' }, { status: 401 })

  try {
    const [eventsResult, totalResult] = await Promise.all([
      getEvents({ page, filters, sort, userId }),
      getTotalEventCount({ filters, userId }),
    ])

    if (!eventsResult.success || !totalResult.success) {
      throw new Error(
        eventsResult.error || totalResult.error || 'Failed to fetch event data'
      )
    }

    return NextResponse.json({ data: eventsResult.data, total: totalResult.total })
  } catch (error) {
    return NextResponse.json({ error: 'Failed to fetch events' }, { status: 500 })
  }
}

```

## 📄 src/app/api/opportunities/route.js
*Lines: 40, Size: 1.38 KB*

```javascript
// apps/client/src/app/api/opportunities/route.js (NEW FILE)
import { NextResponse } from 'next/server'
import { getOpportunities, getTotalOpportunitiesCount } from '@headlines/data-access'
import { getUserIdFromSession } from '@shared/auth'

export const dynamic = 'force-dynamic'

export async function GET(request) {
  const { searchParams } = new URL(request.url)
  const page = parseInt(searchParams.get('page') || '1', 10)
  const sort = searchParams.get('sort') || 'date_desc'
  const filters = {
    q: searchParams.get('q') || '',
    country: searchParams.get('country') || '',
    withEmail: searchParams.get('withEmail') === 'true',
    favoritesOnly: searchParams.get('favorites') === 'true',
  }

  const userId = await getUserIdFromSession()
  if (!userId)
    return NextResponse.json({ error: 'Authentication required' }, { status: 401 })

  try {
    const [oppsResult, totalResult] = await Promise.all([
      getOpportunities({ page, filters, sort, userId }),
      getTotalOpportunitiesCount({ filters, userId }),
    ])

    if (!oppsResult.success || !totalResult.success) {
      throw new Error(
        oppsResult.error || totalResult.error || 'Failed to fetch opportunity data'
      )
    }

    return NextResponse.json({ data: oppsResult.data, total: totalResult.total })
  } catch (error) {
    return NextResponse.json({ error: 'Failed to fetch opportunities' }, { status: 500 })
  }
}

```

## 📄 src/app/api/push/subscribe/route.js
*Lines: 22, Size: 798 Bytes*

```javascript
// apps/client/src/app/api/push/subscribe/route.js (version 2.0.0)
import { NextResponse } from 'next/server'
import { savePushSubscription } from '@headlines/data-access'
import { getUserIdFromSession } from '@shared/auth'

export async function POST(req) {
  try {
    const userId = await getUserIdFromSession()
    if (!userId) {
      return NextResponse.json({ error: 'Authentication required' }, { status: 401 })
    }
    const subscription = await req.json()
    const result = await savePushSubscription(subscription, userId)
    if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: 400 })
    }
    return NextResponse.json({ success: true })
  } catch (error) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

```

## 📄 src/app/api/subscribers/me/route.js
*Lines: 19, Size: 647 Bytes*

```javascript
// apps/client/src/app/api/subscribers/me/route.js (version 2.0.0)
import { NextResponse } from 'next/server'
import { getCurrentSubscriber } from '@headlines/data-access'
import { getUserIdFromSession } from '@shared/auth'

export const dynamic = 'force-dynamic'

export async function GET(request) {
  const userId = await getUserIdFromSession()
  if (!userId) {
    return NextResponse.json({ error: 'Authentication required' }, { status: 401 })
  }
  const result = await getCurrentSubscriber(userId)
  if (!result.success) {
    return NextResponse.json({ error: result.error }, { status: 404 })
  }
  return NextResponse.json(result.data)
}

```

## 📄 src/app/api/upload/process-article/route.js
*Lines: 35, Size: 1013 Bytes*

```javascript
// apps/client/src/app/api/upload/process-article/route.js (NEW FILE)
import { NextResponse } from 'next/server'
import { processUploadedArticle } from '@headlines/data-access'
import { verifySession } from '@shared/auth'

export async function POST(request) {
  const { user, error } = await verifySession()
  if (!user) {
    return NextResponse.json(
      { error: error || 'Authentication required' },
      { status: 401 }
    )
  }

  try {
    const { item } = await request.json()
    if (!item || !item.headline || !item.article) {
      return NextResponse.json({ error: 'Invalid item structure.' }, { status: 400 })
    }

    const result = await processUploadedArticle(item, user.userId)

    if (!result.success) {
      return NextResponse.json(
        { error: 'Failed to process article', details: result.error },
        { status: 500 }
      )
    }

    return NextResponse.json(result)
  } catch (e) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

```

## 📄 src/app/api/user/interactions/route.js
*Lines: 33, Size: 896 Bytes*

```javascript
// apps/client/src/app/api/user/interactions/route.js (version 2.0.0)
import { NextResponse } from 'next/server'
import { updateUserInteraction } from '@headlines/data-access'
import { verifySession } from '@shared/auth'

export async function POST(request) {
  const { user, error } = await verifySession()
  if (!user) {
    return NextResponse.json(
      { error: error || 'Authentication required' },
      { status: 401 }
    )
  }

  try {
    const { itemId, itemType, action } = await request.json()
    const result = await updateUserInteraction({
      userId: user.userId,
      itemId,
      itemType,
      action,
    })

    if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: 400 })
    }

    return NextResponse.json({ success: true })
  } catch (e) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

```

## 📄 src/app/api/user/profile/route.js
*Lines: 28, Size: 844 Bytes*

```javascript
// apps/client/src/app/api/user/profile/route.js (version 2.0.1)
import { NextResponse } from 'next/server'
import { updateUserProfile } from '@headlines/data-access'
import { getUserIdFromSession } from '@shared/auth'

export async function PATCH(request) {
  const userId = await getUserIdFromSession()
  if (!userId) {
    return NextResponse.json({ error: 'Authentication required' }, { status: 401 })
  }

  try {
    const updateData = await request.json()

    // Server-side validation can be added here if needed

    const result = await updateUserProfile({ userId, updateData })

    if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: 400 })
    }

    return NextResponse.json(result.user)
  } catch (e) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

```

## 📄 src/app/api/user/settings/clear-discarded/route.js
*Lines: 21, Size: 785 Bytes*

```javascript
// apps/client/src/app/api/user/settings/clear-discarded/route.js (NEW FILE)
import { NextResponse } from 'next/server';
import { clearDiscardedItems } from '@headlines/data-access';
import { verifySession } from '@shared/auth';

export async function POST(request) {
  const { user, error } = await verifySession();
  if (!user) {
    return NextResponse.json({ error: error || 'Authentication required' }, { status: 401 });
  }
  
  try {
    const result = await clearDiscardedItems(user.userId);
    if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: 400 });
    }
    return NextResponse.json({ success: true, message: result.message });
  } catch (e) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}
```

## 📄 src/app/api-admin/ai-admin/analyze-source-structure/route.js
*Lines: 26, Size: 944 Bytes*

```javascript
// apps/admin/src/app/api/ai/analyze-source-structure/route.js (REVISED)
import { NextResponse } from 'next/server'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'
import { analyzeSourceForSelectors } from '@headlines/ai-services/admin-orchestrators' // New Import

export async function POST(request) {
  await initializeSharedLogic()
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ success: false, error: authError }, { status: 401 })
  }

  try {
    const { url } = await request.json()
    const result = await analyzeSourceForSelectors(url) // Call shared logic
    return NextResponse.json(result)
  } catch (e) {
    console.error('[API analyze-source-structure Error]', e)
    return NextResponse.json(
      { success: false, error: 'Analysis failed', details: e.message },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api-admin/ai-admin/discover-sources/route.js
*Lines: 68, Size: 2.84 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// src/app/api/ai/discover-sources/route.js (version 1.1)
import { NextResponse } from 'next/server'
import OpenAI from 'openai'

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY })

// CORRECTIVE ACTION: Upgraded prompt to be context-aware of existing sources
const getSourceDiscoveryPrompt = () => `
You are an expert financial intelligence researcher with deep knowledge of global media markets. Your task is to identify influential and relevant news sources for a specific country that are NOT on a provided list of existing sources.
**CRITICAL Instructions:**
1.  **Analyze the Country and Existing Sources:** You will receive a country name and an array of source names that are already onboarded.
2.  **Find NEW Sources:** Your primary goal is to find sources that are NOT on the existing list.
3.  **Categorize Sources:** Categorize your findings into three types: "Financial News", "Private Equity & Venture Capital", and "M&A News".
4.  **Provide Top Sources:** For each category, list up to 5 of the most prominent and respected sources.
5.  **Include Name and URL:** For each source, you must provide its official \`name\` and the direct \`url\` to its homepage or relevant news section.
6.  **Strict Formatting:** Your entire response must be a single, valid JSON object.

Example Input User Content:
"Country: Denmark. Existing Sources: [\\"Børsen\\", \\"KapitalWatch\\"]"

Example Response:
{
  "financial_news": [
    { "name": "Finans.dk", "url": "https://finans.dk/" }
  ],
  "pe_vc_news": [
    { "name": "Bootstrapping.dk", "url": "https://bootstrapping.dk/" }
  ],
  "ma_news": [
    { "name": "RevisionsWatch", "url": "https://revisionswatch.dk/" }
  ]
}
`

export async function POST(request) {
  await initializeSharedLogic();

  try {
    // CORRECTIVE ACTION: Accept existing sources in the request body
    const { country, existingSources } = await request.json()
    if (!country) {
      return NextResponse.json({ error: 'Country is required.' }, { status: 400 })
    }

    const userContent = `Country: ${country}. Existing Sources: ${JSON.stringify(existingSources || [])}`

    const completion = await openai.chat.completions.create({
      model: 'gpt-5-mini', // Using gpt-5-mini as requested
      response_format: { type: 'json_object' },
      messages: [
        { role: 'system', content: getSourceDiscoveryPrompt() },
        { role: 'user', content: userContent },
      ],
    })
    const content = completion.choices[0].message.content
    const parsed = JSON.parse(content)

    return NextResponse.json({ success: true, suggestions: parsed })
  } catch (error) {
    console.error('[API AI Discover Sources Error]', error)
    return NextResponse.json(
      { success: false, error: 'Failed to discover sources.', details: error.message },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api-admin/ai-admin/enrich-entity/route.js
*Lines: 55, Size: 2.08 KB*

```javascript
// apps/admin/src/app/api/ai/enrich-entity/route.js (version 2.0.1)
import { NextResponse } from 'next/server'
import { initializeSharedLogic } from '@/lib/init-shared-logic'
import { callLanguageModel } from '@headlines/ai-services'
import { verifyAdmin } from '@headlines/auth'

const getEntityEnrichmentPrompt = () => `
You are a corporate intelligence analyst. Your task is to provide a brief, factual, one-sentence context for a given person, family, or company name. This context will be used in a financial intelligence watchlist.
**CRITICAL Instructions:**
1.  **Analyze the entity name and type.**
2.  **Provide a single, concise sentence.** Examples: "Founder and CEO of Microsoft.", "Danish family behind the LEGO Group (Kirkbi A/S).", "Leading Nordic private equity firm."
3.  **Be factual and neutral.**
4.  **If the name is ambiguous or you have no information, you MUST return "null".**
5.  **Your response MUST be a valid JSON object with the following structure:** { "context": "Your one-sentence description." | null }
`

export async function POST(request) {
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  try {
    await initializeSharedLogic()
    const { name, type } = await request.json()

    if (!name || !type) {
      return NextResponse.json(
        { error: 'Entity name and type are required.' },
        { status: 400 }
      )
    }

    const userContent = `Enrich the following entity:\nName: ${name}\nType: ${type}`
    const result = await callLanguageModel({
      modelName: process.env.LLM_MODEL_UTILITY || 'gpt-5-nano',
      systemPrompt: getEntityEnrichmentPrompt(),
      userContent,
      isJson: true,
    })

    if (result.error) {
      throw new Error(result.error)
    }

    return NextResponse.json({ success: true, context: result.context })
  } catch (error) {
    console.error('[API AI Enrich Entity Error]', error)
    return NextResponse.json(
      { success: false, error: 'Failed to enrich entity.', details: error.message },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api-admin/ai-admin/executive-summary/route.js
*Lines: 53, Size: 2.79 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/ai/executive-summary/route.js (version 1.0)
import { NextResponse } from 'next/server'
import OpenAI from 'openai'

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY })

const getExecutiveSummaryPrompt = () => `
You are a Managing Director at an elite wealth management firm. You are writing a high-level executive summary of a junior AI analyst's performance for a given intelligence-gathering run. You will receive a JSON object containing the junior AI's own 'judge verdicts' on the events and opportunities it generated. Your task is to synthesize this feedback into a concise, actionable summary for the senior partners.

**CRITICAL Instructions:**
1.  **Summarize Overall Quality:** Start by stating the overall quality of the run. Was it excellent, good, mixed, or poor?
2.  **Highlight Successes:** Mention the number of high-quality ('Excellent' or 'Good') events or opportunities identified. Point out a specific success if one stands out.
3.  **Identify Failures & Patterns:** Crucially, identify any systemic failures or patterns of errors. Did the AI repeatedly flag irrelevant corporate news? Did it struggle with a specific type of event? Use the AI's own 'Irrelevant' or 'Poor' commentary to diagnose the problem.
4.  **Provide Actionable Recommendations:** Based on the failures, provide a clear, one-sentence recommendation for improvement. This should be a concrete suggestion for prompt engineering. Example: 'Recommend refining the headline assessment prompt to be more skeptical of press releases about corporate partnerships.'
5.  **Be Concise and Professional:** The entire summary should be 2-4 sentences and written in a professional, direct tone.
6.  **Your response MUST be a valid JSON object with a single key "summary".**
`

export async function POST(request) {
  await initializeSharedLogic();

  try {
    const { judgeVerdict } = await request.json()
    if (!judgeVerdict) {
      return NextResponse.json({ error: 'judgeVerdict is required.' }, { status: 400 })
    }

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      response_format: { type: 'json_object' },
      messages: [
        { role: 'system', content: getExecutiveSummaryPrompt() },
        { role: 'user', content: JSON.stringify(judgeVerdict) },
      ],
    })
    const content = completion.choices[0].message.content
    const parsed = JSON.parse(content)

    return NextResponse.json({ success: true, summary: parsed.summary })
  } catch (error) {
    console.error('[API AI Executive Summary Error]', error)
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to generate executive summary.',
        details: error.message,
      },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api-admin/ai-admin/full-source-analysis/route.js
*Lines: 29, Size: 927 Bytes*

```javascript
// apps/admin/src/app/api/ai/full-source-analysis/route.js (REVISED)
import { NextResponse } from 'next/server'
import { initializeSharedLogic } from '@/lib/init-shared-logic'
import { verifyAdmin } from '@headlines/auth'
import { autoConfigureSourceFromUrl } from '@headlines/ai-services/admin-orchestrators' // New Import

export async function POST(request) {
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  try {
    await initializeSharedLogic()
    const { url } = await request.json()
    const result = await autoConfigureSourceFromUrl(url) // Call shared logic
    return NextResponse.json(result)
  } catch (error) {
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to perform full source analysis.',
        details: error.message,
      },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api-admin/ai-admin/suggest-search-terms/route.js
*Lines: 50, Size: 2.36 KB*

```javascript
// src/app/api/ai/suggest-search-terms/route.js (version 1.0)
import { NextResponse } from 'next/server'
import { callLanguageModel } from '@headlines/ai-services'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';

const getSearchTermPrompt = () => `
You are a search query generation expert for a financial intelligence firm. Your task is to analyze an entity's name, type, and context to generate a list of likely search terms (or "crums") that would identify this entity in news headlines.

**CRITICAL Instructions:**
1.  **Analyze the Input:** You will receive the entity's formal name, its type (person, family, company), and a brief context sentence.
2.  **Generate Aliases and Keywords:** Think of common abbreviations, alternative spellings, key individuals, or related company names. For example, for "Kirk Kristiansen family", terms could be "kirk kristiansen", "lego family", "kirkbi". For "Hanni Merete Toosbuy Kasprzak", a key term would be "ecco".
3.  **Return a List:** Your output should be a list of 3-5 lowercase strings.
4.  **Simplicity is Key:** The terms should be simple and likely to appear in text.
5.  **Your response MUST be a valid JSON object with the following structure:** { "searchTerms": ["term1", "term2"] }
`

export async function POST(request) {
  await initializeSharedLogic();
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  try {
    const { name, type, context } = await request.json()
    if (!name || !type) {
      return NextResponse.json({ error: 'Name and type are required.' }, { status: 400 })
    }

    const userContent = `Entity Name: ${name}\nEntity Type: ${type}\nContext: ${context || 'No context provided.'}`

    const result = await callLanguageModel({
        modelName: process.env.LLM_MODEL_UTILITY || 'gpt-5-nano',
        systemPrompt: getSearchTermPrompt(),
        userContent,
        isJson: true
    })
    if (result.error) throw new Error(result.error)

    return NextResponse.json({ success: true, searchTerms: result.searchTerms })
  } catch (error) {
    console.error('[API AI Suggest Search Terms Error]', error)
    return NextResponse.json(
      { success: false, error: 'Failed to suggest search terms.', details: error.message },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api-admin/articles/[articleId]/route.js
*Lines: 42, Size: 1.49 KB*

```javascript
// apps/admin/src/app/api/articles/[articleId]/route.js (NEW FILE)
import { NextResponse } from 'next/server'
import { updateAdminArticle, deleteAdminArticle } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'
import mongoose from 'mongoose'

export async function PATCH(request, { params }) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const { articleId } = params
  if (!mongoose.Types.ObjectId.isValid(articleId)) {
    return NextResponse.json({ error: 'Invalid article ID' }, { status: 400 })
  }

  const updateData = await request.json()
  const result = await updateAdminArticle(articleId, updateData)
  if (!result.success) {
    return NextResponse.json({ error: result.error }, { status: 500 })
  }
  return NextResponse.json(result)
}

export async function DELETE(request, { params }) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const { articleId } = params
  if (!mongoose.Types.ObjectId.isValid(articleId)) {
    return NextResponse.json({ error: 'Invalid article ID' }, { status: 400 })
  }

  const result = await deleteAdminArticle(articleId)
  if (!result.success) {
    return NextResponse.json({ error: result.error }, { status: 500 })
  }
  return NextResponse.json({ success: true })
}

```

## 📄 src/app/api-admin/articles/route.js
*Lines: 26, Size: 937 Bytes*

```javascript
// apps/admin/src/app/api/articles/route.js (version 2.0.1)
import { NextResponse } from 'next/server'
import { getArticles } from '@headlines/data-access'
import { createApiHandler } from '@/lib/api-handler'

const handleGet = async (request) => {
  const { searchParams } = new URL(request.url)
  const page = parseInt(searchParams.get('page') || '1', 10)
  const sort = searchParams.get('sort') || 'createdAt_desc'
  const columnFilters = JSON.parse(searchParams.get('columnFilters') || '[]')
  const filters = columnFilters.reduce((acc, filter) => {
    if (filter.value) {
      const key = filter.id === 'headline' ? 'q' : filter.id
      acc[key] = filter.value
    }
    return acc
  }, {})

  const result = await getArticles({ page, sort, filters })
  if (!result.success) throw new Error(result.error)
  return NextResponse.json(result)
}

export const GET = createApiHandler(handleGet)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api-admin/countries/[countryId]/route.js
*Lines: 26, Size: 1.02 KB*

```javascript
// apps/admin/src/app/api/countries/[countryId]/route.js (version 1.0.1)
import { NextResponse } from 'next/server'
import { updateCountry } from '@headlines/data-access'
import mongoose from 'mongoose'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'

export async function PATCH(request, { params }) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const { countryId } = params
  if (!mongoose.Types.ObjectId.isValid(countryId)) {
    return NextResponse.json({ error: 'Invalid country ID' }, { status: 400 })
  }
  const body = await request.json()
  const result = await updateCountry(countryId, body)

  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500
    return NextResponse.json({ error: result.error, details: result.error }, { status })
  }
  return NextResponse.json({ message: 'Country updated', country: result.data })
}

```

## 📄 src/app/api-admin/countries/route.js
*Lines: 37, Size: 1.25 KB*

```javascript
// apps/admin/src/app/api/countries/route.js (version 2.0.1)
import { NextResponse } from 'next/server'
import { getAllCountries, createCountry } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'

export const dynamic = 'force-dynamic'

export async function GET() {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const result = await getAllCountries()
  if (!result.success) {
    return NextResponse.json(
      { error: 'Failed to fetch countries.', details: result.error },
      { status: 500 }
    )
  }
  return NextResponse.json({ countries: result.data })
}

export async function POST(request) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const body = await request.json()
  const result = await createCountry(body)
  if (!result.success) {
    const status = result.error.includes('exists') ? 409 : 500
    return NextResponse.json({ error: result.error }, { status })
  }
  return NextResponse.json({ success: true, country: result.data }, { status: 201 })
}

```

## 📄 src/app/api-admin/dashboard-stats/route.js
*Lines: 26, Size: 803 Bytes*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'
// apps/admin/src/app/api/dashboard-stats/route.js (version 4.0.2)
import { NextResponse } from 'next/server'
import { getDashboardStats } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'

export const dynamic = 'force-dynamic'

export async function GET(request) {
  await initializeSharedLogic()

  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const result = await getDashboardStats()
  if (!result.success) {
    return NextResponse.json(
      { error: 'Failed to fetch dashboard stats.', details: result.error },
      { status: 500 }
    )
  }
  return NextResponse.json({ stats: result.data })
}

```

## 📄 src/app/api-admin/events/[eventId]/route.js
*Lines: 45, Size: 1.45 KB*

```javascript
// apps/admin/src/app/api/events/[eventId]/route.js (version 2.0.2)
import { NextResponse } from 'next/server'
import { getEventDetails, updateEvent, deleteEvent } from '@headlines/data-access'
import { createApiHandler } from '@/lib/api-handler'
import mongoose from 'mongoose'

const handleGet = async (request, { params }) => {
  const { eventId } = params
  const result = await getEventDetails(eventId)
  if (!result.success) {
    throw new Error(result.error)
  }
  return NextResponse.json(result.data)
}

const handlePatch = async (request, { params }) => {
  const { eventId } = params
  if (!mongoose.Types.ObjectId.isValid(eventId)) {
    return NextResponse.json({ error: 'Invalid event ID' }, { status: 400 })
  }
  const updateData = await request.json()
  const result = await updateEvent(eventId, updateData)
  if (!result.success) {
    throw new Error(result.error)
  }
  return NextResponse.json(result)
}

const handleDelete = async (request, { params }) => {
  const { eventId } = params
  if (!mongoose.Types.ObjectId.isValid(eventId)) {
    return NextResponse.json({ error: 'Invalid event ID' }, { status: 400 })
  }
  const result = await deleteEvent(eventId)
  if (!result.success) {
    throw new Error(result.error)
  }
  return NextResponse.json({ success: true })
}

export const GET = createApiHandler(handleGet)
export const PATCH = createApiHandler(handlePatch)
export const DELETE = createApiHandler(handleDelete)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api-admin/events/route.js
*Lines: 26, Size: 943 Bytes*

```javascript
// apps/admin/src/app/api/events/route.js (version 3.0.1)
import { NextResponse } from 'next/server'
import { getEvents } from '@headlines/data-access'
import { createApiHandler } from '@/lib/api-handler'

const handleGet = async (request) => {
  const { searchParams } = new URL(request.url)
  const page = parseInt(searchParams.get('page') || '1', 10)
  const sort = searchParams.get('sort') || 'createdAt_desc'
  const columnFilters = JSON.parse(searchParams.get('columnFilters') || '[]')
  const filters = columnFilters.reduce((acc, filter) => {
    if (filter.value) {
      const key = filter.id === 'synthesized_headline' ? 'q' : filter.id
      acc[key] = filter.value
    }
    return acc
  }, {})

  const result = await getEvents({ page, sort, filters })
  if (!result.success) throw new Error(result.error)
  return NextResponse.json(result)
}

export const GET = createApiHandler(handleGet)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api-admin/export/route.js
*Lines: 88, Size: 2.56 KB*

```javascript
// apps/admin/src/app/api/export/route.js (NEW FILE)
import { NextResponse } from 'next/server'
import { createApiHandler } from '@/lib/api-handler'
import { generateExport } from '@headlines/data-access'
import { Opportunity, Subscriber, SynthesizedEvent, Article } from '@headlines/models'

const entityConfig = {
  opportunities: {
    model: Opportunity,
    columns: [
      { header: 'Country', key: 'basedIn' },
      { header: 'City', key: 'city' },
      { header: 'Contact', key: 'reachOutTo' },
      { header: 'Wealth ($M)', key: 'likelyMMDollarWealth' },
      { header: 'Email', key: 'contactDetails.email' },
      { header: 'Reason', key: 'whyContact' },
      { header: 'Created', key: 'createdAt' },
    ],
  },
  users: {
    model: Subscriber,
    columns: [
      { header: 'Email', key: 'email' },
      { header: 'FirstName', key: 'firstName' },
      { header: 'LastName', key: 'lastName' },
      { header: 'IsActive', key: 'isActive' },
      { header: 'Role', key: 'role' },
      { header: 'Tier', key: 'subscriptionTier' },
      { header: 'Created', key: 'createdAt' },
    ],
  },
  events: {
    model: SynthesizedEvent,
    columns: [
      { header: 'Headline', key: 'synthesized_headline' },
      { header: 'Summary', key: 'synthesized_summary' },
      { header: 'Score', key: 'highest_relevance_score' },
      { header: 'Country', key: 'country' },
      { header: 'Created', key: 'createdAt' },
    ],
  },
  articles: {
    model: Article,
    columns: [
      { header: 'Headline', key: 'headline' },
      { header: 'Newspaper', key: 'newspaper' },
      { header: 'Country', key: 'country' },
      { header: 'Headline Score', key: 'relevance_headline' },
      { header: 'Article Score', key: 'relevance_article' },
      { header: 'Link', key: 'link' },
      { header: 'Created', key: 'createdAt' },
    ],
  },
}

const handlePost = async (request) => {
  const { entity, fileType, filters, sort } = await request.json()

  const config = entityConfig[entity]
  if (!config) {
    return NextResponse.json(
      { error: 'Invalid entity type for export.' },
      { status: 400 }
    )
  }

  const result = await generateExport({
    model: config.model,
    columns: config.columns,
    filters,
    sort,
    fileType,
  })

  if (!result.success) {
    throw new Error(result.error)
  }

  return new Response(result.data, {
    headers: {
      'Content-Type': result.contentType,
      'Content-Disposition': `attachment; filename="export_${entity}_${new Date().toISOString()}.${result.extension}"`,
    },
  })
}

export const POST = createApiHandler(handlePost)

```

## 📄 src/app/api-admin/opportunities/[opportunityId]/route.js
*Lines: 42, Size: 1.54 KB*

```javascript
// apps/admin/src/app/api/opportunities/[opportunityId]/route.js (NEW FILE)
import { NextResponse } from 'next/server'
import { updateAdminOpportunity, deleteAdminOpportunity } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'
import mongoose from 'mongoose'

export async function PATCH(request, { params }) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const { opportunityId } = params
  if (!mongoose.Types.ObjectId.isValid(opportunityId)) {
    return NextResponse.json({ error: 'Invalid opportunity ID' }, { status: 400 })
  }

  const updateData = await request.json()
  const result = await updateAdminOpportunity(opportunityId, updateData)
  if (!result.success) {
    return NextResponse.json({ error: result.error }, { status: 500 })
  }
  return NextResponse.json(result)
}

export async function DELETE(request, { params }) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const { opportunityId } = params
  if (!mongoose.Types.ObjectId.isValid(opportunityId)) {
    return NextResponse.json({ error: 'Invalid opportunity ID' }, { status: 400 })
  }

  const result = await deleteAdminOpportunity(opportunityId)
  if (!result.success) {
    return NextResponse.json({ error: result.error }, { status: 500 })
  }
  return NextResponse.json({ success: true })
}

```

## 📄 src/app/api-admin/opportunities/route.js
*Lines: 26, Size: 954 Bytes*

```javascript
// apps/admin/src/app/api/opportunities/route.js (version 2.0.1)
import { NextResponse } from 'next/server'
import { getOpportunities } from '@headlines/data-access'
import { createApiHandler } from '@/lib/api-handler'

const handleGet = async (request) => {
  const { searchParams } = new URL(request.url)
  const page = parseInt(searchParams.get('page') || '1', 10)
  const sort = searchParams.get('sort') || 'createdAt_desc'
  const columnFilters = JSON.parse(searchParams.get('columnFilters') || '[]')
  const filters = columnFilters.reduce((acc, filter) => {
    if (filter.value) {
      const key = filter.id === 'reachOutTo' ? 'q' : filter.id
      acc[key] = filter.value
    }
    return acc
  }, {})

  const result = await getOpportunities({ page, sort, filters })
  if (!result.success) throw new Error(result.error)
  return NextResponse.json(result)
}

export const GET = createApiHandler(handleGet)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api-admin/relationships/link/route.js
*Lines: 23, Size: 862 Bytes*

```javascript
// apps/admin/src/app/api/relationships/link/route.js (NEW FILE)
import { NextResponse } from 'next/server'
import { linkOpportunityToEvent } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'

export async function POST(request) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  try {
    const { eventId, opportunityId } = await request.json()
    const result = await linkOpportunityToEvent(eventId, opportunityId)
    if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: 400 })
    }
    return NextResponse.json(result)
  } catch (e) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

```

## 📄 src/app/api-admin/relationships/unlink/route.js
*Lines: 23, Size: 872 Bytes*

```javascript
// apps/admin/src/app/api/relationships/unlink/route.js (NEW FILE)
import { NextResponse } from 'next/server'
import { unlinkOpportunityFromEvent } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'

export async function POST(request) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  try {
    const { eventId, opportunityId } = await request.json()
    const result = await unlinkOpportunityFromEvent(eventId, opportunityId)
    if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: 400 })
    }
    return NextResponse.json(result)
  } catch (e) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

```

## 📄 src/app/api-admin/run-verdicts/[runId]/route.js
*Lines: 29, Size: 1.01 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'
// apps/admin/src/app/api/run-verdicts/[runId]/route.js (version 3.0.2)
import { NextResponse } from 'next/server'
import { getRunVerdictById } from '@headlines/data-access'
import mongoose from 'mongoose'
import { verifyAdmin } from '@headlines/auth'

export const dynamic = 'force-dynamic'

export async function GET(request, { params }) {
  await initializeSharedLogic()

  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const { runId } = params
  if (!mongoose.Types.ObjectId.isValid(runId)) {
    return NextResponse.json({ error: 'Invalid Run ID' }, { status: 400 })
  }
  const result = await getRunVerdictById(runId)
  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500
    return NextResponse.json({ error: result.error, details: result.error }, { status })
  }
  return NextResponse.json({ verdict: result.data })
}

```

## 📄 src/app/api-admin/run-verdicts/route.js
*Lines: 27, Size: 859 Bytes*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'
// apps/admin/src/app/api/run-verdicts/route.js (version 3.0.3)
import { NextResponse } from 'next/server'
import { getRecentRunVerdicts } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'

export const dynamic = 'force-dynamic'

export async function GET(request) {
  await initializeSharedLogic()

  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const result = await getRecentRunVerdicts()
  if (!result.success) {
    return NextResponse.json(
      { error: 'Failed to fetch verdicts.', details: result.error },
      { status: 500 }
    )
  }
  // Data is already sanitized in the data-access action
  return NextResponse.json({ verdicts: result.data })
}

```

## 📄 src/app/api-admin/scrape/analyze-url/route.js
*Lines: 80, Size: 3.55 KB*

```javascript
// apps/admin/src/app/api/scrape/analyze-url/route.js (Corrected Imports)
import { NextResponse } from 'next/server'
import { initializeSharedLogic } from '@/lib/init-shared-logic'
import { smartStripHtml } from '@shared/utils-shared'
// DEFINITIVE FIX: Import fetchPageWithPlaywright from its actual source file.
import { callLanguageModel } from '@headlines/ai-services'
import { verifyAdmin } from '@headlines/auth'

const getScraperAnalysisPrompt = () => `
You are a master web scraping engineer. You will be given the cleaned HTML from a news website's front page and, optionally, some example headlines. Your task is to analyze the structure and determine the most robust CSS selectors for scraping all headlines.
**CRITICAL Instructions:**
1.  **Determine Extraction Method:** Analyze the HTML to see if it uses JSON-LD. If a \`script[type="application/ld+json"]\` tag contains a list of news articles, the method should be \`json-ld\`. Otherwise, it should be \`declarative\`.
2.  **Find the Best Selector:** Identify the single, repeating CSS selector that uniquely wraps each news item.
3.  **Provide a Rationale:** Briefly explain your choice.
4.  **Handle Examples:** If example headlines and outerHTML are provided, use them as a strong guide.
5.  **Return Multiple Suggestions:** Provide a list of the top 1-3 most likely selectors.
6.  **Your response MUST be a valid JSON object:** \`{ "extractionMethod": "declarative" | "json-ld", "suggestions": [{ "selector": "CSS selector", "reasoning": "Your explanation." }] }\`
`
const analyzePageForScraping = async (html, example1, example2, outerHTML) => {
  let userContent = `Analyze the following HTML:\n\`\`\`html\n${html}\n\`\`\``
  if (example1 && example2)
    userContent += `\n\nUse these examples as a guide:\n- Example 1: "${example1}"\n- Example 2: "${example2}"`
  if (outerHTML)
    userContent += `\n\nThe user identified this element's outerHTML:\n\`\`\`html\n${outerHTML}\n\`\`\``
  const result = await callLanguageModel({
    modelName: process.env.LLM_MODEL_UTILITY || 'gpt-5-nano',
    systemPrompt: getScraperAnalysisPrompt(),
    userContent,
    isJson: true,
  })
  if (result.error) throw new Error(result.error)
  return result
}

export async function POST(request) {
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  try {
    initializeSharedLogic()
    const { url, example1, example2, outerHTML } = await request.json()
    if (!url) return NextResponse.json({ error: 'URL is required.' }, { status: 400 })

    const fullHtml = await fetchPageWithPlaywright(url)
    const cleanHtml = await smartStripHtml(fullHtml)
    const analysis = await analyzePageForScraping(
      cleanHtml,
      example1,
      example2,
      outerHTML
    )

    const suggestionsWithSamples = await Promise.all(
      analysis.suggestions.map(async (suggestion) => {
        const headlines = await testHeadlineExtraction({
          extractionMethod: analysis.extractionMethod,
          sectionUrl: url,
          baseUrl: new URL(url).origin,
          headlineSelector: suggestion.selector,
        })
        return { ...suggestion, count: headlines.length, samples: headlines.slice(0, 3) }
      })
    )
    return NextResponse.json({
      success: true,
      analysis: {
        ...analysis,
        suggestions: suggestionsWithSamples.filter((s) => s.count > 0),
      },
    })
  } catch (error) {
    return NextResponse.json(
      { success: false, error: 'Failed to analyze URL.', details: error.message },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api-admin/scrape/fetch-html/route.js
*Lines: 33, Size: 1.03 KB*

```javascript
// apps/admin/src/app/api/scrape/fetch-html/route.js (version 1.0)
import { NextResponse } from 'next/server';
import { verifyAdmin } from '@headlines/auth';
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';

export async function POST(request) {
  await initializeSharedLogic();
  const { isAdmin, error: authError } = await verifyAdmin();
  if (!isAdmin) {
    return NextResponse.json({ success: false, error: authError }, { status: 401 });
  }

  await initializeSharedLogic();

  try {
    const { url } = await request.json();
    if (!url) {
      return NextResponse.json({ success: false, error: 'URL is required.' }, { status: 400 });
    }

    const html = await fetchPageWithPlaywright(url, 'FetchHtmlEndpoint');
    if (!html) {
      throw new Error('Failed to fetch page content.');
    }

    return NextResponse.json({ success: true, url, htmlContent: html });

  } catch (e) {
    console.error('[API fetch-html Error]', e);
    return NextResponse.json({ success: false, error: e.message }, { status: 500 });
  }
}

```

## 📄 src/app/api-admin/scrape/test-config/route.js
*Lines: 40, Size: 1.23 KB*

```javascript
// apps/admin/src/app/api/scrape/test-config/route.js (version 2.0.0)
import { NextResponse } from 'next/server'
import mongoose from 'mongoose'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'
import { testSourceConfig } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'

export async function POST(request) {
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  try {
    await initializeSharedLogic()
    const sourceConfig = await request.json()

    if (!sourceConfig || !sourceConfig.sectionUrl || !sourceConfig._id) {
      return NextResponse.json(
        { error: 'Full source configuration with _id is required.' },
        { status: 400 }
      )
    }

    const result = await testSourceConfig(sourceConfig)

    if (!result.success) {
      throw new Error(result.details || 'Test scrape failed in the data-access layer.')
    }

    return NextResponse.json(result)
  } catch (error) {
    console.error(`[API Test Config Route Error]`, error)
    return NextResponse.json(
      { success: false, error: 'Failed to perform test scrape.', details: error.message },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api-admin/scrape/test-recipe/route.js
*Lines: 25, Size: 895 Bytes*

```javascript
// apps/client/src/app/api-admin/scrape/test-recipe/route.js (REVISED)
import { NextResponse } from 'next/server'
import { initializeSharedLogic } from '@/lib/init-shared-logic'
import { verifyAdmin } from '@headlines/auth'

export async function POST(request) {
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  try {
    await initializeSharedLogic()
    const { sourceConfig, articleUrl } = await request.json()
    // Call the refactored, shared logic
    const result = await testScraperRecipe(sourceConfig, articleUrl) 
    return NextResponse.json(result)
  } catch (error) {
    console.error('[API Test Recipe Error]', error)
    return NextResponse.json(
      { success: false, error: 'Failed to perform test scrape.', details: error.message },
      { status: 500 }
    )
  }
}
```

## 📄 src/app/api-admin/settings/route.js
*Lines: 45, Size: 1.37 KB*

```javascript
// apps/admin/src/app/api/settings/route.js (version 1.0.1)
import { NextResponse } from 'next/server'
import { getSettings, updateSettings } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'

export const dynamic = 'force-dynamic'

export async function GET(request) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const result = await getSettings()
  if (!result.success) {
    return NextResponse.json(
      { error: 'Failed to fetch settings.', details: result.error },
      { status: 500 }
    )
  }
  return NextResponse.json({ settings: result.data })
}

export async function PATCH(request) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const body = await request.json()
  if (!Array.isArray(body)) {
    return NextResponse.json(
      { error: 'Request body must be an array of settings.' },
      { status: 400 }
    )
  }
  const result = await updateSettings(body)
  if (!result.success) {
    return NextResponse.json(
      { error: 'Failed to update settings', details: result.error },
      { status: 500 }
    )
  }
  return NextResponse.json({ message: result.message })
}

```

## 📄 src/app/api-admin/sources/[sourceId]/route.js
*Lines: 25, Size: 1009 Bytes*

```javascript
// apps/admin/src/app/api/sources/[sourceId]/route.js (version 1.0.1)
import { NextResponse } from 'next/server'
import { updateSource } from '@headlines/data-access'
import mongoose from 'mongoose'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'

export async function PATCH(request, { params }) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const { sourceId } = params
  if (!mongoose.Types.ObjectId.isValid(sourceId)) {
    return NextResponse.json({ error: 'Invalid source ID' }, { status: 400 })
  }
  const body = await request.json()
  const result = await updateSource(sourceId, body)
  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500
    return NextResponse.json({ error: result.error }, { status })
  }
  return NextResponse.json({ message: 'Source updated', source: result.data })
}

```

## 📄 src/app/api-admin/sources/route.js
*Lines: 37, Size: 1.24 KB*

```javascript
// apps/admin/src/app/api/sources/route.js (version 2.0.1)
import { NextResponse } from 'next/server'
import { getAllSources, createSource } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'

export const dynamic = 'force-dynamic'

export async function GET() {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const result = await getAllSources()
  if (!result.success) {
    return NextResponse.json(
      { error: 'Failed to fetch sources.', details: result.error },
      { status: 500 }
    )
  }
  return NextResponse.json({ sources: result.data })
}

export async function POST(request) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const body = await request.json()
  const result = await createSource(body)
  if (!result.success) {
    const status = result.error.includes('exists') ? 409 : 500
    return NextResponse.json({ error: result.error }, { status })
  }
  return NextResponse.json({ success: true, source: result.data }, { status: 201 })
}

```

## 📄 src/app/api-admin/subscribers/[subscriberId]/route.js
*Lines: 42, Size: 1.7 KB*

```javascript
// apps/admin/src/app/api/subscribers/[subscriberId]/route.js (version 1.0.1)
import { NextResponse } from 'next/server'
import { updateSubscriber, deleteSubscriber } from '@headlines/data-access'
import mongoose from 'mongoose'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'

export async function PATCH(request, { params }) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const { subscriberId } = params
  if (!mongoose.Types.ObjectId.isValid(subscriberId)) {
    return NextResponse.json({ error: 'Invalid subscriber ID' }, { status: 400 })
  }
  const body = await request.json()
  const result = await updateSubscriber(subscriberId, body)
  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500
    return NextResponse.json({ error: result.error }, { status })
  }
  return NextResponse.json({ message: 'Subscriber updated', subscriber: result.data })
}

export async function DELETE(request, { params }) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const { subscriberId } = params
  if (!mongoose.Types.ObjectId.isValid(subscriberId)) {
    return NextResponse.json({ error: 'Invalid subscriber ID' }, { status: 400 })
  }
  const result = await deleteSubscriber(subscriberId)
  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500
    return NextResponse.json({ error: result.error }, { status })
  }
  return NextResponse.json({ message: 'Subscriber deleted successfully' })
}

```

## 📄 src/app/api-admin/subscribers/route.js
*Lines: 37, Size: 1.28 KB*

```javascript
// apps/admin/src/app/api/subscribers/route.js (version 1.0.1)
import { NextResponse } from 'next/server'
import { getAllSubscribers, createSubscriber } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'

export const dynamic = 'force-dynamic'

export async function GET(request) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const result = await getAllSubscribers()
  if (!result.success) {
    return NextResponse.json(
      { error: 'Failed to fetch subscribers.', details: result.error },
      { status: 500 }
    )
  }
  return NextResponse.json({ subscribers: result.data })
}

export async function POST(request) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const body = await request.json()
  const result = await createSubscriber(body)
  if (!result.success) {
    const status = result.error.includes('already exists') ? 409 : 500
    return NextResponse.json({ error: result.error }, { status })
  }
  return NextResponse.json({ success: true, subscriber: result.data }, { status: 201 })
}

```

## 📄 src/app/api-admin/suggestions/route.jsx
*Lines: 44, Size: 1.42 KB*

```jsx
// apps/admin/src/app/api/suggestions/route.jsx (version 1.0.1)
import { NextResponse } from 'next/server'
import {
  processWatchlistSuggestion,
  processSourceSuggestion,
} from '@headlines/data-access'
import mongoose from 'mongoose'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'

export async function POST(request) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const { suggestionId, suggestionType, action } = await request.json()
  if (
    !suggestionId ||
    !suggestionType ||
    !action ||
    !mongoose.Types.ObjectId.isValid(suggestionId)
  ) {
    return NextResponse.json({ error: 'Invalid parameters.' }, { status: 400 })
  }

  let result
  if (suggestionType === 'watchlist') {
    result = await processWatchlistSuggestion({ suggestionId, action })
  } else if (suggestionType === 'source') {
    result = await processSourceSuggestion({ suggestionId, action })
  } else {
    return NextResponse.json({ error: 'Invalid suggestion type.' }, { status: 400 })
  }

  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500
    return NextResponse.json(
      { error: 'Failed to process suggestion.', details: result.error },
      { status }
    )
  }
  return NextResponse.json({ success: true, message: result.message })
}

```

## 📄 src/app/api-admin/watchlist/[entityId]/route.js
*Lines: 42, Size: 1.68 KB*

```javascript
// apps/admin/src/app/api/watchlist/[entityId]/route.js (version 1.0.1)
import { NextResponse } from 'next/server'
import { updateWatchlistEntity, deleteWatchlistEntity } from '@headlines/data-access'
import mongoose from 'mongoose'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'

export async function PATCH(request, { params }) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const { entityId } = params
  if (!mongoose.Types.ObjectId.isValid(entityId)) {
    return NextResponse.json({ error: 'Invalid entity ID' }, { status: 400 })
  }
  const body = await request.json()
  const result = await updateWatchlistEntity(entityId, body)
  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500
    return NextResponse.json({ error: result.error }, { status })
  }
  return NextResponse.json({ message: 'Watchlist entity updated', entity: result.data })
}

export async function DELETE(request, { params }) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const { entityId } = params
  if (!mongoose.Types.ObjectId.isValid(entityId)) {
    return NextResponse.json({ error: 'Invalid entity ID' }, { status: 400 })
  }
  const result = await deleteWatchlistEntity(entityId)
  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500
    return NextResponse.json({ error: result.error }, { status })
  }
  return NextResponse.json({ message: 'Watchlist entity deleted' })
}

```

## 📄 src/app/api-admin/watchlist/route.js
*Lines: 37, Size: 1.29 KB*

```javascript
// apps/admin/src/app/api/watchlist/route.js (version 1.0.1)
import { NextResponse } from 'next/server'
import { getAllWatchlistEntities, createWatchlistEntity } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'

export const dynamic = 'force-dynamic'

export async function GET(request) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const result = await getAllWatchlistEntities()
  if (!result.success) {
    return NextResponse.json(
      { error: 'Failed to fetch watchlist.', details: result.error },
      { status: 500 }
    )
  }
  return NextResponse.json({ entities: result.data })
}

export async function POST(request) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const body = await request.json()
  const result = await createWatchlistEntity(body)
  if (!result.success) {
    const status = result.error.includes('already exists') ? 409 : 500
    return NextResponse.json({ error: result.error }, { status })
  }
  return NextResponse.json({ success: true, entity: result.data }, { status: 201 })
}

```

## 📄 src/app/api-admin/watchlist/suggestions/[suggestionId]/route.js
*Lines: 26, Size: 978 Bytes*

```javascript
// apps/admin/src/app/api/watchlist/suggestions/[suggestionId]/route.js (version 1.0.1)
import { NextResponse } from 'next/server'
import { updateWatchlistSuggestion } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'
import mongoose from 'mongoose'

export async function PATCH(request, { params }) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const { suggestionId } = params
  if (!mongoose.Types.ObjectId.isValid(suggestionId)) {
    return NextResponse.json({ error: 'Invalid suggestion ID' }, { status: 400 })
  }

  const updateData = await request.json()
  const result = await updateWatchlistSuggestion(suggestionId, updateData)

  if (!result.success) {
    return NextResponse.json({ error: result.error }, { status: 500 })
  }
  return NextResponse.json(result)
}

```

## 📄 src/app/api-admin/watchlist/suggestions/route.js
*Lines: 23, Size: 802 Bytes*

```javascript
// apps/admin/src/app/api/watchlist/suggestions/route.js (version 1.0.1)
import { NextResponse } from 'next/server'
import { getSuggestions } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js'

export const dynamic = 'force-dynamic'

export async function GET(request) {
  await initializeSharedLogic()
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return NextResponse.json({ error }, { status: 401 })

  const result = await getSuggestions()
  if (!result.success) {
    return NextResponse.json(
      { error: 'Failed to fetch suggestions.', details: result.error },
      { status: 500 }
    )
  }
  return NextResponse.json({ watchlistSuggestions: result.data.watchlistSuggestions })
}

```

## 📄 src/app/globals.css
*Lines: 190, Size: 5.07 KB*

```css
@import url('https://fonts.googleapis.com/css2?family=Merriweather:ital,wght@0,400;0,700;1,400;1,700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 224 71.4% 4.1%;
    --foreground: 210 40% 98%;
    --card: 224 71.4% 4.1%;
    --card-foreground: 210 40% 98%;
    --popover: 224 71.4% 4.1%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 220.9 39.3% 11%;
    --secondary: 222.2 47.4% 11.2%;
    --secondary-foreground: 210 40% 98%;
    --muted: 215 27.9% 16.9%;
    --muted-foreground: 217.9 10.6% 64.9%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 85.7% 97.3%;
    --border: 215 27.9% 16.9%;
    --input: 215 27.9% 16.9%;
    --ring: 217 91% 60%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 224 71.4% 4.1%;
    --foreground: 210 40% 98%;
    --card: 224 71.4% 4.1%;
    --card-foreground: 210 40% 98%;
    --popover: 224 71.4% 4.1%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 220.9 39.3% 11%;
    --secondary: 222.2 47.4% 11.2%;
    --secondary-foreground: 210 40% 98%;
    --muted: 215 27.9% 16.9%;
    --muted-foreground: 217.9 10.6% 64.9%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 85.7% 97.3%;
    --border: 215 27.9% 16.9%;
    --input: 215 27.9% 16.9%;
    --ring: 217 91% 60%;
  }

  * {
    border-color: hsl(var(--border));
  }

  body {
    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
    background-image:
      radial-gradient(at 27% 37%, hsla(215, 98%, 43%, 0.15) 0px, transparent 50%),
      radial-gradient(at 97% 21%, hsla(217, 91%, 60%, 0.1) 0px, transparent 50%),
      radial-gradient(at 52% 99%, hsla(355, 98%, 51%, 0.1) 0px, transparent 50%);
  }

  /* Professional Table Styling for Chat */
  .prose {
    --tw-prose-body: theme(colors.slate[300]);
    --tw-prose-headings: theme(colors.slate[100]);
    --tw-prose-lead: theme(colors.slate[400]);
    --tw-prose-links: theme(colors.blue[400]);
    --tw-prose-bold: theme(colors.slate[100]);
    --tw-prose-counters: theme(colors.slate[400]);
    --tw-prose-bullets: theme(colors.slate[600]);
    --tw-prose-hr: theme(colors.slate[700]);
    --tw-prose-quotes: theme(colors.slate[200]);
    --tw-prose-quote-borders: theme(colors.slate[700]);
    --tw-prose-captions: theme(colors.slate[400]);
    --tw-prose-code: theme(colors.slate[100]);
    --tw-prose-pre-code: theme(colors.slate[300]);
    --tw-prose-pre-bg: theme(colors.slate[900]);
    --tw-prose-th-borders: theme(colors.slate[600]);
    --tw-prose-td-borders: theme(colors.slate[700]);
  }

  .prose table {
    @apply text-sm;
  }
  .prose th {
    @apply text-slate-200 text-left px-3 py-2;
  }
  .prose td {
    @apply px-3 py-2 align-top;
  }
}

/* --- Premier Scrollbar Styling --- */
@layer utilities {
  .custom-scrollbar::-webkit-scrollbar {
    height: 6px;
    width: 6px;
  }
  .custom-scrollbar::-webkit-scrollbar-track {
    background: hsl(var(--muted) / 0.5);
    border-radius: 10px;
  }
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: hsl(var(--secondary));
    border-radius: 10px;
  }
  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: hsl(var(--accent));
  }
  .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: hsl(var(--secondary)) hsl(var(--muted) / 0.5);
  }

  /* --- Source-Aware Coloring for Chat --- */
  .rag-source,
  .wiki-source {
    color: #a7f3d0;
  }
  .llm-source {
    color: #fde68a;
  }

  /* --- Golden Glowing Border for High-Relevance Cards --- */
  .card-glow {
    position: relative;
    overflow: hidden; /* Keep the glow contained */
  }
  .card-glow::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: inherit; /* Match parent's border-radius */
    border: 1px solid transparent;
    background: conic-gradient(
        from 180deg at 50% 50%,
        rgba(252, 211, 77, 0.5) 0deg,
        rgba(252, 211, 77, 0.2) 50%,
        rgba(252, 211, 77, 0.5) 360deg
      )
      border-box;
    -webkit-mask:
      linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
    z-index: 0;
    animation: glow 4s linear infinite;
  }

  /* --- Bezier Heartbeat Wobble --- */
  .impatient-wobble {
    animation: impatient-wobble 2s cubic-bezier(0.5, 0, 0.1, 1) infinite;
  }

  @keyframes glow {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* --- NEW: "pum PUM . ." Double-Beat Keyframes --- */
  @keyframes impatient-wobble {
    /* The long pause between heartbeats */
    0%,
    90%,
    100% {
      transform: scale(1) rotate(0deg);
    }
    /* The first, smaller beat ("pum") */
    73% {
      transform: scale(1.005) rotate(-0.2deg);
    }
    /* The second, larger beat ("PUM") */
    96% {
      transform: scale(1.012) rotate(0.2deg);
    }
  }
}

```

## 📄 src/app/layout.js
*Lines: 26, Size: 724 Bytes*

```javascript
// File: apps/client/src/app/layout.js (Corrected Provider Structure)

import './globals.css'
import { AppProviders } from './providers'
import { AppWrapper } from './_components/AppWrapper'

export const metadata = {
  title: 'Copyboard App',
  description: 'A fresh start',
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        {/* 1. AppProviders is now the outermost client wrapper */}
        <AppProviders>
          {/* 2. AppWrapper is a SERVER component that fetches user data.
                 It renders its children, which will include the AppShell. */}
          <AppWrapper>{children}</AppWrapper>
        </AppProviders>
      </body>
    </html>
  )
}

```

## 📄 src/app/login/layout.js
*Lines: 18, Size: 512 Bytes*

```javascript
// This layout applies only to the /login page.
export default function LoginLayout({ children }) {
  return (
    <div
      className="min-h-screen flex items-center justify-center p-4"
      style={{
        backgroundColor: 'hsl(224, 71.4%, 4.1%)',
        backgroundImage: `
          radial-gradient(at 27% 37%, hsla(215, 98%, 43%, 0.1) 0px, transparent 50%),
          radial-gradient(at 97% 21%, hsla(217, 91%, 60%, 0.15) 0px, transparent 50%)
        `,
      }}
    >
      {children}
    </div>
  )
}

```

## 📄 src/app/login/page.jsx
*Lines: 111, Size: 3.38 KB*

```jsx
// Full Path: headlines/src/app/login/page.jsx
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  Input,
  Button,
  Label,
} from '@/components/shared' // CORRECTED IMPORT
import { KeyRound, Shield, Sparkles, Mail } from 'lucide-react'
import { cn } from '@headlines/shared-utils' // Assuming you have a local utils file
import { useAuth } from '@/lib/auth/client'
import { LoadingOverlay } from '@/components/shared/LoadingOverlay' // CORRECTED IMPORT

export default function LoginPage() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const { user, login, isLoading } = useAuth()
  const [isError, setIsError] = useState(false)
  const router = useRouter()

  useEffect(() => {
    if (user) {
      router.push('/events')
    }
  }, [user, router])

  const handleLogin = async (e) => {
    e.preventDefault()
    setIsError(false)
    await login(email, password)
  }

  if (user || isLoading) {
    return <LoadingOverlay isLoading={true} text="Authorizing..." />
  }

  return (
    <Card
      className={cn(
        'w-full max-w-sm',
        'bg-card/80 backdrop-blur-sm border-border',
        'shadow-2xl shadow-black/50',
        isError ? 'animate-shake' : ''
      )}
      onAnimationEnd={() => setIsError(false)}
    >
      <CardHeader className="items-center text-center space-y-2">
        <div className="relative flex items-center justify-center w-16 h-16 bg-gradient-to-br from-background to-secondary border border-border rounded-full">
          <Shield className="h-8 w-8 text-primary" />
        </div>
        <div className="space-y-1">
          <h1 className="text-2xl font-bold">Secure Access Portal</h1>
          <p className="text-muted-foreground text-sm">Authentication Required</p>
        </div>
      </CardHeader>
      <form onSubmit={handleLogin}>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="email" className="flex items-center gap-2">
              <Mail className="h-4 w-4" />
              Email Address
            </Label>
            <Input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              disabled={isLoading}
              placeholder="Enter your email..."
              className="h-12 text-base"
              required
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="password" className="flex items-center gap-2">
              <KeyRound className="h-4 w-4" />
              Password
            </Label>
            <Input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              disabled={isLoading}
              placeholder="Enter your password..."
              className="h-12 text-base"
              required
            />
          </div>
        </CardContent>
        <CardFooter>
          <Button
            type="submit"
            disabled={isLoading || !email.trim() || !password.trim()}
            className="w-full h-12 text-base font-bold"
          >
            <Shield className="mr-2 h-5 w-5" />
            Authorize Access
          </Button>
        </CardFooter>
      </form>
    </Card>
  )
}

```

## 📄 src/app/not-found.jsx
*Lines: 17, Size: 487 Bytes*

```jsx
// apps/client/src/app/not-found.jsx
export default function NotFound() {
  // This component must NOT contain <html> or <body> tags.
  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <h1 className="text-4xl font-bold mb-4">404</h1>
      <p className="text-lg">Page not found</p>
      <a
        href="/"
        className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
      >
        Go Home
      </a>
    </div>
  )
}

```

## 📄 src/app/page.js
*Lines: 11, Size: 442 Bytes*

```javascript
// Full Path: headlines/src/app/page.js
import { redirect } from 'next/navigation'

export default function RootPage() {
  // This page will be the main entry point.
  // The AuthProvider wrapping all pages will see the user is not authenticated
  // (or is authenticated) and handle the redirect to either /login or /events.
  // This redirect acts as a sensible default if the AuthProvider logic were ever bypassed.
  redirect('/events')
}

```

## 📄 src/app/providers.jsx
*Lines: 18, Size: 508 Bytes*

```jsx
// Full Path: headlines/src/app/providers.jsx (REVISED)
'use client'

import { useState } from 'react'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ReactQueryDevtools } from '@tanstack/react-query-devtools'

export function AppProviders({ children }) {
  const [queryClient] = useState(() => new QueryClient())

  return (
    <QueryClientProvider client={queryClient}>
      {children}
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  )
}

```

## 📄 src/components/admin/AdminHeader.jsx
*Lines: 44, Size: 1.48 KB*

```jsx
// apps/client/src/components/admin/AdminHeader.jsx (version 2.0 - Restored & Pathed)
'use client'

import Link from 'next/link'
import { Button } from '@components/shared'
import { Shield, LogOut, ArrowLeft } from 'lucide-react'
import { useAuth } from '@headlines/auth/react'

export function AdminHeader() {
  const { user, logout } = useAuth()

  return (
    <header className="bg-slate-900/50 border-b border-slate-700/50 backdrop-blur-sm sticky top-0 z-40">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-16">
          <div className="flex items-center gap-4">
            <Shield className="h-6 w-6 text-blue-400" />
            <div className="hidden sm:block">
              <h1 className="text-lg font-semibold text-slate-100">
                Admin Command Center
              </h1>
              <p className="text-xs text-slate-400">
                Logged in as {user?.email || '...'}
              </p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Button variant="ghost" asChild>
              <Link href="/events">
                <ArrowLeft className="mr-2 h-4 w-4" />
                Back to App
              </Link>
            </Button>
            <Button variant="outline" size="sm" onClick={logout}>
              <LogOut className="mr-2 h-4 w-4" />
              Logout
            </Button>
          </div>
        </div>
      </div>
    </header>
  )
}

```

## 📄 src/components/admin/AdminNavTabs.jsx
*Lines: 39, Size: 1.02 KB*

```jsx
// apps/client/src/components/admin/AdminNavTabs.jsx (version 2.0 - Restored & Pathed)
'use client'

import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { Tabs, TabsList, TabsTrigger } from '@components/shared'
import { Users, Database } from 'lucide-react'

const ADMIN_TABS = [
  { value: 'users', label: 'User Management', icon: Users, href: '/admin/users' },
  {
    value: 'sources',
    label: 'Source Management',
    icon: Database,
    href: '/admin/sources',
    disabled: false,
  },
]

export function AdminNavTabs() {
  const pathname = usePathname()
  const currentView = pathname.split('/')[2] || 'users'

  return (
    <Tabs value={currentView}>
      <TabsList>
        {ADMIN_TABS.map((tab) => (
          <TabsTrigger key={tab.value} value={tab.value} asChild disabled={tab.disabled}>
            <Link href={tab.href}>
              <tab.icon className="mr-2 h-4 w-4" />
              {tab.label}
            </Link>
          </TabsTrigger>
        ))}
      </TabsList>
    </Tabs>
  )
}

```

## 📄 src/components/admin/RelationshipManager.jsx
*Lines: 116, Size: 3.56 KB*

```jsx
// apps/admin/src/app/_components/relationships/RelationshipManager.jsx (version 2.0.0)
'use client'

import { useState } from 'react'
import {
  Button,
  Input,
  Label,
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from '@components/shared'
import { toast } from 'sonner'
import { Link, Unlink, Plus, Loader2 } from 'lucide-react'
import {
  linkOpportunityToEventClient,
  unlinkOpportunityFromEventClient,
} from '@/lib/api-client'

export function RelationshipManager({ item, itemType, refetch }) {
  const [newItemId, setNewItemId] = useState('')
  const [isLoading, setIsLoading] = useState(false)

  const handleAdd = async () => {
    setIsLoading(true)
    let result
    if (itemType === 'event') {
      result = await linkOpportunityToEventClient(item._id, newItemId)
    } // Add else if for 'opportunity' here for bidirectional linking

    if (result.success) {
      toast.success('Relationship added.')
      setNewItemId('')
      refetch()
    } else {
      toast.error('Failed to add relationship', { description: result.error })
    }
    setIsLoading(false)
  }

  const handleRemove = async (relatedItemId) => {
    setIsLoading(true)
    let result
    if (itemType === 'event') {
      result = await unlinkOpportunityFromEventClient(item._id, relatedItemId)
    } // Add else if for 'opportunity' here

    if (result.success) {
      toast.success('Relationship removed.')
      refetch()
    } else {
      toast.error('Failed to remove relationship', { description: result.error })
    }
    setIsLoading(false)
  }

  const relatedItems = itemType === 'event' ? item.relatedOpportunities : item.events
  const relatedItemType = itemType === 'event' ? 'Opportunity' : 'Event'

  return (
    <Card>
      <CardHeader>
        <CardTitle>Manage Relationships</CardTitle>
        <CardDescription>Link this {itemType} to related items.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <Label>Existing {relatedItemType} Links</Label>
          <div className="space-y-2 mt-2">
            {relatedItems && relatedItems.length > 0 ? (
              relatedItems.map((related) => (
                <div
                  key={related._id}
                  className="flex items-center justify-between p-2 bg-secondary rounded-md"
                >
                  <div className="font-mono text-xs">{related._id}</div>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-7 w-7 text-destructive"
                    onClick={() => handleRemove(related._id)}
                  >
                    <Unlink className="h-4 w-4" />
                  </Button>
                </div>
              ))
            ) : (
              <p className="text-sm text-muted-foreground p-2">No relationships found.</p>
            )}
          </div>
        </div>
        <div>
          <Label htmlFor="new-item-id">Link New {relatedItemType} ID</Label>
          <div className="flex items-center gap-2 mt-2">
            <Input
              id="new-item-id"
              value={newItemId}
              onChange={(e) => setNewItemId(e.target.value)}
              placeholder={`Paste ${relatedItemType} ID here...`}
            />
            <Button onClick={handleAdd} disabled={isLoading || !newItemId}>
              {isLoading ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                <Plus className="h-4 w-4" />
              )}
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}

```

## 📄 src/components/admin/article-analysis-viewer.jsx
*Lines: 45, Size: 1.44 KB*

```jsx
// src/app/_components/article-analysis-viewer.jsx (version 1.1)
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@components/shared'
import { Button } from '@components/shared'
import { Loader2 } from 'lucide-react'

export default function ArticleAnalysisViewer({ article, open, onOpenChange }) {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl h-[80vh] flex flex-col">
        <DialogHeader>
          <DialogTitle>Analyze Article Content</DialogTitle>
          <DialogDescription className="truncate">
            Target URL:{' '}
            <a href={article?.link} target="_blank" className="underline">
              {article?.link}
            </a>
          </DialogDescription>
        </DialogHeader>

        <div className="flex-grow flex flex-col items-center justify-center text-muted-foreground space-y-4">
          <Loader2 className="w-12 h-12 animate-spin gemini-text" />
          <p className="font-semibold">Feature Coming Soon</p>
          <p className="text-sm text-center">
            This module will allow you to test and find the perfect selector for
            extracting article content.
          </p>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/components/admin/main-nav.jsx
*Lines: 96, Size: 2.86 KB*

```jsx
// Full Path: headlines/src/components/admin/main-nav.jsx
'use client'

import Link from 'next/link'
import { usePathname } from 'next/navigation'
import React from 'react'
import {
  BotMessageSquare,
  Newspaper,
  Users,
  Rss,
  Gauge,
  Settings,
  Globe,
  Zap,
  Target,
  FileText,
  Code,
} from 'lucide-react'
import { cn } from '@headlines/utils-shared' // Assuming you have a local utils file
import { Separator } from '@/components/shared' // CORRECTED IMPORT
import { ThemeToggle } from './theme-toggle'

const navSections = [
  {
    items: [
      { name: 'Dashboard', href: '/dashboard', icon: Gauge },
      { name: 'Scraper IDE', href: '/scraper-ide', icon: Code },
      { name: 'Users', href: '/users', icon: Users },
      { name: 'Watchlist', href: '/watchlist', icon: Rss },
    ],
  },
  {
    items: [
      { name: 'Events', href: '/events', icon: Zap },
      { name: 'Articles', href: '/articles', icon: FileText },
      { name: 'Opportunities', href: '/opportunities', icon: Target },
    ],
  },
  {
    items: [
      { name: 'Countries', href: '/countries', icon: Globe },
      { name: 'Settings', href: '/settings', icon: Settings },
    ],
  },
]

export default function MainNav() {
  const pathname = usePathname()

  const isCurrent = (href) => {
    if (href === '/dashboard') return pathname === '/dashboard'
    return pathname.startsWith(href)
  }

  return (
    <nav className="hidden lg:flex w-[280px] bg-card border-r flex-col flex-shrink-0">
      <div className="p-4 border-b h-16 flex items-center gap-3">
        <BotMessageSquare className="w-8 h-8 text-primary flex-shrink-0" />
        <div>
          <h1 className="text-xl font-bold tracking-tighter">Headlines Admin</h1>
          <p className="text-sm text-muted-foreground">Command Center</p>
        </div>
      </div>
      <div className="flex-1 overflow-y-auto p-4">
        {navSections.map((section, index) => (
          <React.Fragment key={index}>
            <ul className="space-y-1">
              {section.items.map((item) => (
                <li key={item.name}>
                  <Link
                    href={item.href}
                    className={cn(
                      'flex items-center gap-3 px-3 py-2.5 text-sm font-medium rounded-md transition-colors',
                      isCurrent(item.href)
                        ? 'bg-primary/10 text-primary'
                        : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'
                    )}
                  >
                    <item.icon className="w-5 h-5" />
                    {item.name}
                  </Link>
                </li>
              ))}
            </ul>
            {index < navSections.length - 1 && <Separator className="my-4" />}
          </React.Fragment>
        ))}
      </div>
      <div className="p-4 border-t mt-auto">
        <ThemeToggle />
      </div>
    </nav>
  )
}

```

## 📄 src/components/admin/multi-select.jsx
*Lines: 61, Size: 1.86 KB*

```jsx
// Full Path: headlines/src/components/admin/multi-select.jsx
'use client'

import * as React from 'react'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  Button,
  Checkbox,
  ScrollArea,
} from '@/components/shared' // CORRECTED IMPORT
import { ChevronsUpDown } from 'lucide-react'

export function MultiSelect({ options, selected, onChange, placeholder = 'Select...' }) {
  const handleSelect = (option) => {
    const newSelected = selected.includes(option)
      ? selected.filter((item) => item !== option)
      : [...selected, option]
    onChange(newSelected)
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="outline"
          className="w-full justify-between font-normal bg-black/20 border-white/10"
        >
          <span className="truncate">
            {selected.length > 0 ? selected.join(', ') : placeholder}
          </span>
          <ChevronsUpDown className="h-4 w-4 opacity-50" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-[--radix-dropdown-menu-trigger-width] p-0">
        <ScrollArea className="h-72">
          <div className="p-1">
            {options.map((option) => (
              <DropdownMenuItem
                key={option}
                onSelect={(e) => e.preventDefault()}
                className="flex items-center gap-2"
              >
                <Checkbox
                  id={`select-${option}`}
                  checked={selected.includes(option)}
                  onCheckedChange={() => handleSelect(option)}
                />
                <label htmlFor={`select-${option}`} className="w-full">
                  {option}
                </label>
              </DropdownMenuItem>
            ))}
          </div>
        </ScrollArea>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
```

## 📄 src/components/admin/source-list.jsx
*Lines: 211, Size: 6.74 KB*

```jsx
// apps/admin/src/app/_components/source-list.jsx (version 3.0.0)
'use client'

import { useState, useMemo } from 'react'
import {
  Button,
  Input,
  ScrollArea,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  Badge,
} from '@shared/ui'
import {
  PlusCircle,
  DatabaseZap,
  ServerCrash,
  Newspaper,
  ShieldAlert,
  Loader2,
  Ban,
  ExternalLink,
} from 'lucide-react'
import { cn } from '@headlines/utils-shared'

function DynamicStatus({ source, status }) {
  if (status?.checking) {
    return <Loader2 className="w-4 h-4 text-muted-foreground animate-spin" />
  }
  if (status && typeof status.count === 'number') {
    if (status.count > 0) {
      return (
        <Badge
          variant="secondary"
          className="bg-green-500/20 text-green-400 border-green-500/30"
        >
          {status.count}
        </Badge>
      )
    }
    return <Badge variant="destructive">{status.count}</Badge>
  }
  return <SourceStatusIndicator source={source} />
}

function SourceStatusIndicator({ source }) {
  let status = 'healthy'
  let title = 'Healthy'

  if (source.status === 'paused') {
    status = 'paused'
    title = 'Paused'
  } else if (source.status === 'under_review') {
    status = 'under_review'
    title = 'Under Review'
  } else if (
    source.analytics?.totalRuns > 0 &&
    source.analytics?.lastRunHeadlineCount === 0
  ) {
    status = 'failed'
    title = 'Failing: Last run found 0 headlines.'
  }

  const color = {
    paused: 'bg-gray-500',
    under_review: 'bg-yellow-500',
    failed: 'bg-red-500',
    healthy: 'bg-green-500',
  }[status]

  return (
    <div
      className={cn('w-2 h-2 rounded-full flex-shrink-0 transition-colors', color)}
      title={title}
    />
  )
}

export default function SourceList({
  sources,
  isLoading,
  selectedSourceId,
  onSelectSource,
  onAddSource,
  onCheckFiltered,
  onStopCheck,
  isCheckingAll,
  liveStatuses,
  countries,
}) {
  const [searchTerm, setSearchTerm] = useState('')
  const [countryFilter, setCountryFilter] = useState('all')

  const filteredSources = useMemo(() => {
    if (!sources) return []
    return sources
      .filter((source) => countryFilter === 'all' || source.country === countryFilter)
      .filter((source) => source.name.toLowerCase().includes(searchTerm.toLowerCase()))
  }, [sources, searchTerm, countryFilter])

  return (
    <aside className="w-[350px] bg-black/20 border-r border-white/10 flex flex-col flex-shrink-0">
      <div className="p-4 border-b border-white/10 space-y-2 h-[100px] flex flex-col justify-center">
        <div className="flex items-center gap-3">
          <Newspaper className="w-8 h-8 gemini-text flex-shrink-0" />
          <div>
            <h1 className="text-xl font-bold tracking-tighter">Source IDE</h1>
            <p className="text-sm text-muted-foreground">
              {sources ? `${sources.length} sources` : 'Loading...'}
            </p>
          </div>
        </div>
      </div>
      <div className="p-4 space-y-3">
        <Button
          className="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold"
          onClick={onAddSource}
        >
          <PlusCircle className="mr-2 h-4 w-4" /> Add New Source
        </Button>
        {isCheckingAll ? (
          <Button variant="destructive" className="w-full" onClick={onStopCheck}>
            <Ban className="mr-2 h-4 w-4" /> Stop Checking
          </Button>
        ) : (
          <Button
            variant="outline"
            className="w-full"
            onClick={() => onCheckFiltered(filteredSources)}
          >
            <ShieldAlert className="mr-2 h-4 w-4" /> Check Filtered
          </Button>
        )}
        <div className="flex gap-2 justify-between">
          <Input
            placeholder="Search..."
            className="bg-background/50 placeholder:text-muted-foreground flex-1"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <Select value={countryFilter} onValueChange={setCountryFilter}>
            <SelectTrigger className="bg-background/50 flex-1">
              <SelectValue placeholder="All Countries" />
            </SelectTrigger>
            <SelectContent>
              {countries.map((c) => (
                <SelectItem key={c} value={c}>
                  {c === 'all' ? 'All Countries' : c}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>
      <div className="flex-grow min-h-0">
        <ScrollArea className="h-full">
          <div className="p-2 space-y-1">
            {isLoading ? (
              <div className="text-center text-sm text-muted-foreground py-10 animate-pulse">
                Loading Sources...
              </div>
            ) : !sources ? (
              <div className="p-4 flex flex-col items-center justify-center h-full text-muted-foreground">
                <ServerCrash className="w-10 h-10 mb-4" />
                <h3 className="font-semibold">Failed to load sources</h3>
              </div>
            ) : filteredSources.length > 0 ? (
              filteredSources.map((source) => (
                <div key={source._id} className="flex items-center gap-1">
                  <Button
                    variant={selectedSourceId === source._id ? 'secondary' : 'ghost'}
                    className="w-full justify-start items-center gap-3 h-10 text-base"
                    onClick={() => onSelectSource(source._id)}
                  >
                    <div className="w-8 h-4 flex items-center justify-center">
                      <DynamicStatus source={source} status={liveStatuses[source._id]} />
                    </div>
                    <span className="flex-grow text-left truncate">{source.name}</span>
                    <span className="text-xs text-muted-foreground flex-shrink-0">
                      {source.country}
                    </span>
                  </Button>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-10 w-10 flex-shrink-0 text-muted-foreground hover:text-foreground"
                    onClick={(e) => {
                      e.stopPropagation()
                      window.open(source.sectionUrl, '_blank')
                    }}
                    aria-label="Open source URL in new tab"
                  >
                    <ExternalLink className="w-4 h-4" />
                  </Button>
                </div>
              ))
            ) : (
              <div className="text-center text-sm text-muted-foreground py-10">
                <DatabaseZap className="mx-auto h-8 w-8 mb-2" />
                <p>No sources match filters.</p>
              </div>
            )}
          </div>
        </ScrollArea>
      </div>
    </aside>
  )
}

```

## 📄 src/components/admin/test-results-viewer.jsx
*Lines: 75, Size: 2.61 KB*

```jsx
// apps/admin/src/app/_components/test-results-viewer.jsx (version 2.0.0)
'use client'

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  ScrollArea,
  Button,
} from '@components/shared'
import { ExternalLink, XCircle } from 'lucide-react'

export default function TestResultsViewer({ results, open, onOpenChange }) {
  const hasResults = results && results.count > 0

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl h-[80vh] flex flex-col">
        <DialogHeader>
          <DialogTitle>Scrape Test Results</DialogTitle>
          <DialogDescription>
            Found {results?.count ?? 0} headlines using the provided configuration.
          </DialogDescription>
        </DialogHeader>
        <div className="flex-grow overflow-hidden">
          <ScrollArea className="h-full pr-4">
            {hasResults ? (
              <ul className="space-y-3">
                {results.headlines.map((item, index) => (
                  <li
                    key={index}
                    className="p-3 bg-secondary/50 rounded-md flex items-center justify-between gap-4"
                  >
                    <div className="flex-grow">
                      <p className="font-medium">{item.headline}</p>
                      <a
                        href={item.link}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-xs text-muted-foreground hover:text-foreground transition-colors flex items-center gap-1"
                      >
                        <ExternalLink className="w-3 h-3" />
                        {item.link}
                      </a>
                    </div>
                  </li>
                ))}
              </ul>
            ) : (
              <div className="flex flex-col items-center justify-center h-full text-muted-foreground">
                <XCircle className="w-12 h-12 mb-4 text-destructive" />
                <p className="font-semibold">No Headlines Found</p>
                <p className="text-sm">
                  Check your selectors or the source website's structure.
                </p>
                {results?.error && (
                  <p className="text-xs mt-4 max-w-md text-center">
                    Error: {results.details}
                  </p>
                )}
              </div>
            )}
          </ScrollArea>
        </div>
        <DialogFooter>
          <Button onClick={() => onOpenChange(false)}>Close</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/components/admin/theme-provider.jsx
*Lines: 10, Size: 309 Bytes*

```jsx
// apps/admin/src/app/_components/theme-provider.jsx (version 1.0)
'use client'

import * as React from 'react'
import { ThemeProvider as NextThemesProvider } from 'next-themes'

export function ThemeProvider({ children, ...props }) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

```

## 📄 src/components/admin/theme-toggle.jsx
*Lines: 35, Size: 1.18 KB*

```jsx
// Full Path: headlines/src/components/admin/theme-toggle.jsx
'use client'

import * as React from 'react'
import { Moon, Sun } from 'lucide-react'
import { useTheme } from 'next-themes'
import {
  Button,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/shared' // CORRECTED IMPORT

export function ThemeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme('light')}>Light</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('dark')}>Dark</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('system')}>System</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

```

## 📄 src/components/client/AnimatedList.jsx
*Lines: 51, Size: 975 Bytes*

```jsx
// src/components/AnimatedList.jsx (version 1.0)
'use client'

import { motion } from 'framer-motion'

// Animation variants for the container (list)
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.08, // Time delay between each child animating in
      delayChildren: 0.1,
    },
  },
}

// Animation variants for each item in the list
export const itemVariants = {
  hidden: { y: 20, opacity: 0 },
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      type: 'spring',
      stiffness: 100,
      damping: 12,
    },
  },
  exit: {
    opacity: 0,
    height: 0,
    marginBottom: 0,
    transition: { duration: 0.3 },
  },
}

export function AnimatedList({ children, className }) {
  return (
    <motion.div
      className={className}
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      exit="hidden"
    >
      {children}
    </motion.div>
  )
}

```

## 📄 src/components/client/ArticleCard.jsx
*Lines: 200, Size: 7.75 KB*

```jsx
'use client'

import { useState, useTransition } from 'react'
import {
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
  Badge,
  Button,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@shared/ui'
import { Trash2, ExternalLink, Users, Mail, Building, Briefcase } from 'lucide-react'
import { getCountryFlag } from '@shared/utils-shared'
import { SwipeToDelete } from './client/swipe/SwipeToDelete'
import { DeletionConfirmationDialog } from './DeletionConfirmationDialog'
import useAppStore from '@/lib/store/use-app-store'
import { cn } from '@headlines/utils-shared'

const getRelevanceBadgeClass = (score) => {
  if (score >= 90)
    return 'bg-red-500/20 text-red-300 border border-red-500/30 shadow-lg shadow-red-500/10'
  if (score >= 75)
    return 'bg-blue-500/20 text-blue-300 border border-blue-500/30 shadow-lg shadow-blue-500/10'
  return 'bg-slate-500/20 text-slate-300 border border-slate-500/30'
}

export const ArticleCard = ({ article, onDelete }) => {
  const [isPending, startTransition] = useTransition()
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const skipConfirmation = useAppStore(
    (state) => state.deletePreferences.skipArticleConfirmation
  )

  const handleDelete = () => {
    startTransition(() => {
      onDelete()
    })
  }

  const handleDeleteClick = (e) => {
    e.stopPropagation()
    if (skipConfirmation) {
      handleDelete()
    } else {
      setIsDialogOpen(true)
    }
  }

  const flag = getCountryFlag(article.country)
  const relevanceScore = article.relevance_article || article.relevance_headline

  return (
    <div className="relative w-full">
      <AccordionItem
        value={article._id}
        className="border-none overflow-hidden rounded-xl"
      >
        <SwipeToDelete onDelete={handleDelete}>
          <div
            className={cn(
              'p-4 relative z-10 bg-cover bg-center',
              article.imageUrl && 'min-h-[150px] flex flex-col justify-end'
            )}
            style={
              article.imageUrl ? { backgroundImage: `url(${article.imageUrl})` } : {}
            }
          >
            {article.imageUrl && (
              <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/50 to-transparent z-0" />
            )}
            <div className="relative z-10">
              <TooltipProvider delayDuration={100}>
                <div className="flex items-center justify-between gap-2 mb-2">
                  <div className="flex items-center gap-2 min-w-0">
                    <Badge
                      className={`text-sm font-bold px-2.5 py-1 ${getRelevanceBadgeClass(
                        relevanceScore
                      )}`}
                    >
                      {relevanceScore}
                    </Badge>
                    <span className="text-lg hidden sm:inline">{flag}</span>
                    <p className="text-xs sm:text-sm text-slate-300 truncate shadow-black drop-shadow-lg">
                      {article.newspaper}
                    </p>
                  </div>
                  <div className="flex items-center flex-shrink-0">
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={(e) => {
                            e.stopPropagation()
                            window.open(article.link, '_blank')
                          }}
                          className="text-slate-300 hover:text-blue-400 bg-black/20 hover:bg-blue-500/20 h-8 w-8"
                        >
                          <ExternalLink className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>Open in new tab</TooltipContent>
                    </Tooltip>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          disabled={isPending}
                          onClick={handleDeleteClick}
                          className="text-slate-300 hover:text-red-400 bg-black/20 hover:bg-red-500/20 h-8 w-8"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>Delete article</TooltipContent>
                    </Tooltip>
                  </div>
                </div>

                <AccordionTrigger className="p-0 hover:no-underline text-left">
                  <div className="flex-grow min-w-0">
                    <p className="font-serif font-bold text-base sm:text-lg text-white line-clamp-3 shadow-black drop-shadow-lg">
                      <span className="text-lg sm:hidden mr-2">{flag}</span>
                      {article.headline_en || `(en N/S): ${article.headline}`}
                    </p>
                  </div>
                </AccordionTrigger>
              </TooltipProvider>
            </div>
          </div>
        </SwipeToDelete>
        <AccordionContent className="p-4 pt-0">
          <div className="border-t border-slate-700/50 pt-4 mt-2 space-y-4">
            {article.assessment_article && (
              <div>
                <h4 className="font-semibold text-sm text-slate-300 mb-1">
                  Intelligence Analysis
                </h4>
                <p className="text-sm text-slate-400 italic break-words">
                  "{article.assessment_article}"
                </p>
              </div>
            )}
            {article.key_individuals && article.key_individuals.length > 0 && (
              <div>
                <h4 className="font-semibold text-sm text-slate-300 mb-2 border-b border-slate-700 pb-1">
                  Key Individuals
                </h4>
                <div className="space-y-3 mt-2">
                  {article.key_individuals.map((person, index) => (
                    <div key={index} className="p-3 rounded-md bg-slate-800/50">
                      <p className="font-bold text-slate-100 flex items-center gap-2">
                        <Users className="h-4 w-4 text-slate-400" /> {person.name}
                      </p>
                      <div className="pl-6 space-y-1 mt-1 text-sm text-slate-400">
                        {person.role_in_event && (
                          <p className="flex items-center gap-2">
                            <Briefcase className="h-3 w-3" /> {person.role_in_event}
                          </p>
                        )}
                        {person.company && (
                          <p className="flex items-center gap-2">
                            <Building className="h-3 w-3" /> {person.company}
                          </p>
                        )}
                        {person.email_suggestion && (
                          <a
                            href={`mailto:${person.email_suggestion}`}
                            className="flex items-center gap-2 text-blue-400 hover:underline"
                          >
                            <Mail className="h-3 w-3" /> {person.email_suggestion}
                          </a>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </AccordionContent>
      </AccordionItem>

      <DeletionConfirmationDialog
        open={isDialogOpen}
        onOpenChange={setIsDialogOpen}
        onConfirm={handleDelete}
        isPending={isPending}
        itemType="article"
        itemDescription={article.headline_en || article.headline}
        preferenceKey="skipArticleConfirmation"
      />
    </div>
  )
}

```

## 📄 src/components/client/ArticleList.jsx
*Lines: 39, Size: 1.43 KB*

```jsx
// src/components/ArticleList.jsx (version 4.2)
import { Accordion } from '@shared/ui'
import { ArticleCard } from '@/components/ArticleCard'
import { AnimatePresence, motion } from 'framer-motion'
import { AnimatedList, itemVariants } from './AnimatedList'
import { cn } from '@headlines/utils-shared'

export const ArticleList = ({ articles, onDelete }) => {
  return (
    <Accordion type="single" collapsible>
      <AnimatedList className="w-full space-y-2">
        <AnimatePresence>
          {articles.map((article) => {
            const isHighRelevance =
              (article.relevance_article || article.relevance_headline) > 69
            return (
              <motion.div
                key={article._id}
                variants={itemVariants}
                exit={itemVariants.exit}
                layout
                whileHover={{ y: -2 }}
                whileTap={{ scale: 0.98 }}
                className={cn(
                  'rounded-xl bg-gradient-to-br from-slate-900 to-slate-800/60 shadow-lg shadow-black/40 border border-slate-700',
                  isHighRelevance && 'card-glow impatient-wobble',
                  'min-w-full sm:min-w-[480px]' // <-- ADDED MINIMUM WIDTH
                )}
              >
                <ArticleCard article={article} onDelete={() => onDelete(article._id)} />
              </motion.div>
            )
          })}
        </AnimatePresence>
      </AnimatedList>
    </Accordion>
  )
}

```

## 📄 src/components/client/ArticleListWrapper.jsx
*Lines: 9, Size: 250 Bytes*

```jsx
// Full Path: headlines/src/components/client/ArticleListWrapper.jsx
'use client'

import { ArticleList } from './ArticleList'

export function ArticleListWrapper({ items, onDelete }) {
  return <ArticleList articles={items} onDelete={onDelete} />
}

```

## 📄 src/components/client/ChatManager.jsx
*Lines: 68, Size: 1.94 KB*

```jsx
// File: apps/client/src/components/client/ChatManager.jsx (Corrected Hydration)
'use client'

import { useEffect } from 'react'
import { ChatSidebar } from './chat/ChatSidebar'
import { ChatView } from './ChatView'
import useAppStore, { useHasHydrated } from '@/lib/store/use-app-store' // <-- Import the new hook
import { Loader2 } from 'lucide-react'

export function ChatManager() {
  // This hook now simply tells us if we are on the client and mounted.
  const hasHydrated = useHasHydrated()

  // We can safely call the store hooks at the top level.
  const {
    chats,
    activeChatId,
    createChat,
    selectChat,
    init,
    getMessagesForChat,
    setMessagesForChat,
  } = useAppStore()

  const messages = getMessagesForChat(activeChatId)

  useEffect(() => {
    // We still wait for hydration before running the init logic.
    if (hasHydrated) {
      init()
    }
  }, [hasHydrated, init])

  // The guard condition: if not hydrated, show the spinner.
  if (!hasHydrated) {
    return (
      <div className="flex items-center justify-center h-full text-slate-500">
        <Loader2 className="h-6 w-6 animate-spin mr-3" />
        <p>Initializing Chat Interface...</p>
      </div>
    )
  }

  // If hydrated, we can safely render the rest of the component tree,
  // which will now be guaranteed to be inside the QueryClientProvider.
  return (
    <div className="grid grid-cols-1 md:grid-cols-[280px_1fr] h-full gap-4">
      <div className="hidden md:flex md:flex-col">
        <ChatSidebar
          chats={chats}
          activeChatId={activeChatId}
          createChat={createChat}
          selectChat={selectChat}
        />
      </div>
      {/* Ensure activeChatId exists before rendering ChatView to prevent errors */}
      {activeChatId && (
        <ChatView
          key={activeChatId}
          chatId={activeChatId}
          initialMessages={messages}
          setMessages={setMessagesForChat}
        />
      )}
    </div>
  )
}

```

## 📄 src/components/client/ChatView.jsx
*Lines: 158, Size: 5.32 KB*

```jsx
'use client'

import { useState, useRef, useCallback, useEffect } from 'react'
import { useMutation, useQueryClient, useQuery } from '@tanstack/react-query'
import { toast } from 'sonner'
import { Card } from '@shared/ui'
import { ChatMessage } from '@/components/client/chat/ChatMessage'
import { ChatInput } from '@/components/client/chat/ChatInput'
import { ChatScrollAnchor } from '@/components/client/chat/ChatScrollAnchor'
import useAppStore from '@/lib/store/use-app-store'
import { generateChatTitle } from '@lib/api-client'

async function postChatMessage({ messagesForApi }) {
  const sanitizedMessages = messagesForApi.map(({ role, content }) => ({ role, content }))
  const response = await fetch('/api/chat', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ messages: sanitizedMessages }),
  })
  if (!response.ok) {
    const errorData = await response.json()
    throw new Error(errorData.error || 'Failed to get a response from the server.')
  }
  return response.json()
}

export function ChatView({ chatId }) {
  const [input, setInput] = useState('')
  const inputRef = useRef(null)
  const scrollAnchorRef = useRef(null)
  const queryClient = useQueryClient()
  const chatQueryKey = ['chat', chatId]
  const { updateChatTitle } = useAppStore()

  const { chatContextPrompt, setChatContextPrompt } = useAppStore((state) => ({
    chatContextPrompt: state.chatContextPrompt,
    setChatContextPrompt: state.setChatContextPrompt,
  }))

  const { data: messages = [] } = useQuery({
    queryKey: chatQueryKey,
    queryFn: () => [], // Handled by Zustand, so no fetch needed here.
    staleTime: Infinity,
    gcTime: 1000 * 60 * 5,
  })

  const { mutate: sendMessage, isPending: isThinking } = useMutation({
    mutationFn: postChatMessage,
    onMutate: async ({ userMessage }) => {
      await queryClient.cancelQueries({ queryKey: chatQueryKey })
      const previousMessages = queryClient.getQueryData(chatQueryKey)
      const assistantMessageId = `asst_${Date.now()}`
      const newMessages = [
        ...previousMessages,
        userMessage,
        { role: 'assistant', content: '', id: assistantMessageId, isThinking: true },
      ]
      queryClient.setQueryData(chatQueryKey, newMessages)
      return { previousMessages, assistantMessageId }
    },
    onSuccess: (assistantResponse, variables, context) => {
      queryClient.setQueryData(chatQueryKey, (old) =>
        old.map((msg) =>
          msg.id === context.assistantMessageId
            ? {
                ...msg,
                content: assistantResponse.answer,
                thoughts: assistantResponse.thoughts,
                isThinking: false,
              }
            : msg
        )
      )
      // Generate title after the first successful response
      if (queryClient.getQueryData(chatQueryKey).length === 2) {
        generateChatTitle(queryClient.getQueryData(chatQueryKey)).then((result) => {
          if (result.success) {
            updateChatTitle(chatId, result.title)
          }
        })
      }
    },
    onError: (error, variables, context) => {
      toast.error(`An error occurred: ${error.message}`)
      queryClient.setQueryData(chatQueryKey, (old) =>
        old.map((msg) =>
          msg.id === context.assistantMessageId
            ? {
                ...msg,
                content: `Error: ${error.message}`,
                isError: true,
                isThinking: false,
              }
            : msg
        )
      )
    },
  })

  const startMessageFlow = useCallback(
    (content) => {
      if (isThinking) return
      const userMessage = { role: 'user', content: content, id: `user_${Date.now()}` }
      const messagesForApi = [...messages, userMessage]
      sendMessage({ messagesForApi, userMessage })
    },
    [isThinking, messages, sendMessage]
  )

  const handleSubmit = (e) => {
    e.preventDefault()
    if (!input.trim()) return
    startMessageFlow(input)
    setInput('')
  }

  useEffect(() => {
    if (chatContextPrompt) {
      startMessageFlow(chatContextPrompt)
      setChatContextPrompt('')
    }
  }, [chatContextPrompt, startMessageFlow, setChatContextPrompt])

  useEffect(() => {
    if (!isThinking && inputRef.current) {
      setTimeout(() => inputRef.current.focus(), 100)
    }
  }, [isThinking])

  return (
    <div className="flex-grow flex flex-col justify-between h-full min-h-0">
      <Card className="bg-black/20 backdrop-blur-sm border border-white/10 shadow-2xl shadow-black/30 h-full flex flex-col">
        <div className="flex-grow overflow-y-auto p-4 space-y-6 custom-scrollbar">
          {messages.length === 0 && !isThinking && (
            <div className="flex flex-col items-center justify-center h-full text-slate-500">
              <p className="text-lg">Ask anything about the knowledge base.</p>
            </div>
          )}
          {messages.map((m, i) => (
            <ChatMessage key={m.id || `msg-${i}`} message={m} />
          ))}
          <ChatScrollAnchor ref={scrollAnchorRef} messages={messages} />
        </div>
        <div className="px-4 pb-4">
          <ChatInput
            inputRef={inputRef}
            input={input}
            setInput={setInput}
            handleInputChange={(e) => setInput(e.target.value)}
            handleSubmit={handleSubmit}
            isLoading={isThinking}
          />
        </div>
      </Card>
    </div>
  )
}

```

## 📄 src/components/client/CountrySubscriptionEditor.jsx
*Lines: 107, Size: 3.51 KB*

```jsx
// src/components/CountrySubscriptionEditor.jsx (version 1.1)
'use client'

import { useState, useMemo } from 'react'
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
  Button,
  Badge,
  Input,
} from '@shared/ui'
import { PlusCircle, X, Search } from 'lucide-react'
import { getCountryFlag } from '@shared/utils-shared'

export function CountrySubscriptionEditor({
  allCountries,
  selectedCountries,
  onSelectionChange,
}) {
  const [open, setOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')

  const availableCountries = useMemo(() => {
    const filtered = allCountries.filter((c) => !selectedCountries.includes(c.name))
    if (!searchQuery) return filtered
    return filtered.filter((c) =>
      c.name.toLowerCase().includes(searchQuery.toLowerCase())
    )
  }, [allCountries, selectedCountries, searchQuery])

  const handleAddCountry = (countryName) => {
    onSelectionChange([...selectedCountries, countryName].sort())
    setSearchQuery('')
    setOpen(false)
  }

  const handleRemoveCountry = (countryName) => {
    onSelectionChange(selectedCountries.filter((c) => c !== countryName))
  }

  return (
    <div className="space-y-3">
      <div className="flex flex-wrap gap-2 p-3 border rounded-md min-h-[40px] bg-slate-900/50">
        {selectedCountries.length > 0 ? (
          selectedCountries.map((country) => (
            <Badge key={country} variant="secondary" className="text-base py-1 px-3">
              <span>{getCountryFlag(country)}</span>
              <span>{country}</span>
              <button
                onClick={() => handleRemoveCountry(country)}
                className="ml-2 rounded-full hover:bg-white/20 p-0.5"
              >
                <X className="h-3 w-3" />
              </button>
            </Badge>
          ))
        ) : (
          <p className="text-sm text-slate-500">No countries selected.</p>
        )}
      </div>

      <Popover open={open} onOpenChange={setOpen}>
        <PopoverTrigger asChild>
          <Button variant="outline">
            <PlusCircle className="mr-2 h-4 w-4" />
            Add Country
          </Button>
        </PopoverTrigger>
        <PopoverContent className="p-0 w-[300px]" align="start">
          <div className="p-2 border-b">
            <div className="relative">
              <Search className="absolute left-2 top-1/2 -translate-y-1/2 h-4 w-4 text-slate-500" />
              <Input
                placeholder="Search country..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-8"
              />
            </div>
          </div>
          <div className="max-h-[300px] overflow-y-auto custom-scrollbar p-1">
            {availableCountries.length > 0 ? (
              availableCountries.map((country) => (
                <Button
                  key={country.name}
                  variant="ghost"
                  onClick={() => handleAddCountry(country.name)}
                  className="w-full justify-start flex items-center gap-2"
                >
                  <span>{getCountryFlag(country.name)}</span>
                  <span>{country.name}</span>
                  <span className="text-xs text-slate-500 ml-auto">
                    ({country.count})
                  </span>
                </Button>
              ))
            ) : (
              <p className="text-center text-sm text-slate-500 py-4">No results found.</p>
            )}
          </div>
        </PopoverContent>
      </Popover>
    </div>
  )
}

```

## 📄 src/components/client/DataView.jsx
*Lines: 158, Size: 5.6 KB*

```jsx
// Full Path: headlines/src/components/client/DataView.jsx
'use client'

import { useMemo, Suspense } from 'react'
import { useSearchParams } from 'next/navigation'
import { useInfiniteQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { ViewHeader, LoadingOverlay, SkeletonCard } from '@/components/shared'
import { InfiniteScrollLoader } from '@/components/client/InfiniteScrollLoader'
import { toast } from 'sonner'
import { useAuth } from '@/lib/auth/client'
import { SearchX } from 'lucide-react'
import { EventListWrapper } from '@/components/client/EventListWrapper'
import { ArticleListWrapper } from '@/components/client/ArticleListWrapper'
import { OpportunityListWrapper } from '@/components/client/OpportunityListWrapper'
import { updateUserInteraction } from '@/lib/api-client'
import useAppStore from '@/lib/store/use-app-store'

async function fetchData({ queryKey, pageParam = 1 }) {
  const [queryKeyPrefix, params] = queryKey
  const urlParams = new URLSearchParams()
  urlParams.set('page', pageParam.toString())
  if (params.sort) urlParams.set('sort', params.sort)
  if (params.q) urlParams.set('q', params.q)
  if (params.country) urlParams.set('country', params.country)
  if (params.favoritesOnly) urlParams.set('favorites', 'true')
  if (params.category) urlParams.set('category', params.category)
  if (params.withEmail) urlParams.set('withEmail', 'true')

  const res = await fetch(`/api/${queryKeyPrefix}?${urlParams.toString()}`)
  if (!res.ok) throw new Error('Network response was not ok')
  return res.json()
}

const componentMap = {
  'event-list': EventListWrapper,
  'article-list': ArticleListWrapper,
  'opportunity-list': OpportunityListWrapper,
}

export function DataView({
  viewTitle,
  sortOptions,
  queryKeyPrefix,
  listComponentKey,
  initialData,
  filters,
  allCountries,
}) {
  const ListComponent = componentMap[listComponentKey]
  const searchParams = useSearchParams()
  const queryClient = useQueryClient()
  const { user, updateUserPreferences } = useAuth()
  const { globalCountryFilter, setGlobalCountryFilter } = useAppStore()

  const q = searchParams.get('q') || ''
  const sort = searchParams.get('sort') || sortOptions[0].value
  const country = globalCountryFilter.length > 0 ? globalCountryFilter.join(',') : null
  const favoritesOnly = searchParams.get('favorites') === 'true'

  const memoizedSearchParams = useMemo(
    () => ({ q, sort, favoritesOnly, country, ...filters }),
    [q, sort, favoritesOnly, country, filters]
  )
  const listQueryKey = useMemo(
    () => [queryKeyPrefix, memoizedSearchParams],
    [queryKeyPrefix, memoizedSearchParams]
  )

  const { data, fetchNextPage, hasNextPage, isFetching } = useInfiniteQuery({
    queryKey: listQueryKey,
    queryFn: fetchData,
    getNextPageParam: (lastPage, allPages) =>
      lastPage?.data?.length > 0 ? allPages.length + 1 : undefined,
    initialPageParam: 1,
    initialData: {
      pages: [{ data: initialData || [], total: initialData?.length || 0 }],
      pageParams: [1],
    },
    enabled: !!user,
  })

  const { mutate: performInteraction } = useMutation({
    mutationFn: updateUserInteraction,
    onMutate: async ({ itemId }) => {
      await queryClient.cancelQueries({ queryKey: listQueryKey })
      const previousData = queryClient.getQueryData(listQueryKey)
      queryClient.setQueryData(listQueryKey, (old) => {
        if (!old) return old
        const newPages = old.pages.map((page) => ({
          ...page,
          data: page.data.filter((item) => item._id !== itemId),
        }))
        return { ...old, pages: newPages }
      })
      return { previousData }
    },
    onError: (err, variables, context) => {
      toast.error('Action failed. Restoring data.')
      if (context?.previousData)
        queryClient.setQueryData(listQueryKey, context.previousData)
    },
    onSuccess: (data, { action }) => {
      toast.success(`Item ${action}ed.`)
    },
  })

  const handleInteraction = (itemId, action) => {
    const itemType = queryKeyPrefix.slice(0, -1)
    performInteraction({ itemId, itemType, action })
  }

  const items = useMemo(() => data?.pages.flatMap((page) => page.data) ?? [], [data])

  return (
    <>
      <ViewHeader
        title={viewTitle}
        sortOptions={sortOptions}
        allCountries={allCountries}
        globalCountryFilter={globalCountryFilter}
        onGlobalCountryFilterChange={setGlobalCountryFilter}
      />
      <Suspense
        fallback={
          <div className="max-w-5xl mx-auto space-y-6">
            <SkeletonCard />
            <SkeletonCard />
            <SkeletonCard />
          </div>
        }
      >
        <div className="relative max-w-5xl mx-auto space-y-6 sm:px-0 -mx-4 px-4">
          <LoadingOverlay isLoading={isFetching && items.length === 0} />
          {items.length > 0 ? (
            <ListComponent
              items={items}
              onDelete={(itemId) => handleInteraction(itemId, 'discard')}
              onFavoriteToggle={(itemId, isFavorited) =>
                handleInteraction(itemId, isFavorited ? 'favorite' : 'unfavorite')
              }
              userFavoritedIds={new Set(user?.favoritedItems?.[queryKeyPrefix] || [])}
            />
          ) : (
            !isFetching && (
              <div className="text-center py-16 text-slate-500">
                <SearchX className="h-12 w-12 mx-auto mb-4" />
                <h3 className="text-xl font-semibold">No results found.</h3>
                <p>Try adjusting your search or filter criteria.</p>
              </div>
            )
          )}
          <InfiniteScrollLoader onLoadMore={fetchNextPage} hasMore={hasNextPage} />
        </div>
      </Suspense>
    </>
  )
}

```

## 📄 src/components/client/DeletionConfirmationDialog.jsx
*Lines: 84, Size: 2.58 KB*

```jsx
// src/components/DeletionConfirmationDialog.jsx (version 1.0)
'use client'

import { useState } from 'react'
import {
  AlertDialog,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogCancel,
  Button,
  Label,
} from '@shared/ui'
import { AlertTriangle, Loader2 } from 'lucide-react'
import useAppStore from '@/lib/store/use-app-store'

export function DeletionConfirmationDialog({
  open,
  onOpenChange,
  onConfirm,
  isPending,
  itemType = 'item',
  itemDescription,
  preferenceKey,
}) {
  const [doNotAskAgain, setDoNotAskAgain] = useState(false)
  const setDeletePreference = useAppStore((state) => state.setDeletePreference)

  const handleConfirm = () => {
    if (doNotAskAgain && preferenceKey) {
      setDeletePreference(preferenceKey, true)
    }
    onConfirm()
  }

  return (
    <AlertDialog open={open} onOpenChange={onOpenChange}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <div className="flex items-center justify-center w-16 h-16 rounded-full bg-red-500/10 mx-auto mb-4">
            <AlertTriangle className="w-8 h-8 text-red-500" />
          </div>
          <AlertDialogTitle className="text-center text-xl">
            Are you absolutely sure?
          </AlertDialogTitle>
          <AlertDialogDescription className="text-center">
            This will permanently delete the {itemType}: <br />
            <span className="font-semibold italic text-slate-300">
              "{itemDescription}"
            </span>
            <br /> This action cannot be undone.
          </AlertDialogDescription>
        </AlertDialogHeader>

        <div className="flex items-center space-x-2 my-4 justify-center">
          <input
            type="checkbox"
            id="do-not-ask-again"
            checked={doNotAskAgain}
            onChange={(e) => setDoNotAskAgain(e.target.checked)}
            className="h-4 w-4 rounded border-gray-300 text-red-600 focus:ring-red-500"
          />
          <Label
            htmlFor="do-not-ask-again"
            className="text-sm font-medium text-slate-400"
          >
            Do not ask me again for {itemType}s.
          </Label>
        </div>

        <AlertDialogFooter className="sm:justify-center">
          <AlertDialogCancel disabled={isPending}>Cancel</AlertDialogCancel>
          <Button variant="destructive" onClick={handleConfirm} disabled={isPending}>
            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            Continue
          </Button>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  )
}

```

## 📄 src/components/client/EventContextDialog.jsx
*Lines: 79, Size: 2.9 KB*

```jsx
// src/components/EventContextDialog.jsx (version 1.1)
'use client'

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  Badge
} from '@shared/ui'
import { ExternalLink } from 'lucide-react'

const getRelevanceBadgeClass = (score) => {
  if (score >= 90) return 'bg-red-500/20 text-red-300 border border-red-500/30'
  if (score >= 75) return 'bg-blue-500/20 text-blue-300 border border-blue-500/30'
  return 'bg-slate-500/20 text-slate-300 border border-slate-500/30'
}

export function EventContextDialog({ event, open, onOpenChange }) {
  if (!event) return null

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-3xl w-[95vw] bg-slate-900 border-slate-700 p-8">
        <DialogHeader>
          <div className="flex items-center justify-between mb-2">
            <DialogTitle className="text-xl text-slate-100">
              Parent Event Context
            </DialogTitle>
            <Badge
              className={`text-base font-bold px-3 py-1 ${getRelevanceBadgeClass(event.highest_relevance_score)}`}
            >
              Score: {event.highest_relevance_score}
            </Badge>
          </div>
          <DialogDescription className="text-slate-400 text-base font-serif font-semibold">
            {event.synthesized_headline}
          </DialogDescription>
        </DialogHeader>
        <div className="space-y-6 max-h-[60vh] overflow-y-auto p-1 pr-6 custom-scrollbar">
          <div>
            <h4 className="font-semibold text-sm text-slate-300 mb-2">
              Synthesized Summary
            </h4>
            <div className="p-4 rounded-md bg-slate-800/50 border border-slate-700 text-sm text-slate-300">
              <p>{event.synthesized_summary}</p>
            </div>
          </div>
          <div>
            <h4 className="font-semibold text-sm text-slate-300 mb-2">
              Corroborating Source Articles ({event.source_articles?.length || 0})
            </h4>
            <div className="space-y-2">
              {event.source_articles?.map((article, index) => (
                <a
                  key={index}
                  href={article.link}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center justify-between gap-4 p-3 rounded-md bg-slate-800/50 hover:bg-slate-800/80 transition-colors"
                >
                  <div className="flex-grow min-w-0">
                    <p className="font-medium text-slate-200 line-clamp-1 text-sm">
                      {article.headline}
                    </p>
                    <p className="text-xs text-slate-400">{article.newspaper}</p>
                  </div>
                  <ExternalLink className="h-4 w-4 text-slate-500 flex-shrink-0" />
                </a>
              ))}
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/components/client/EventList.jsx
*Lines: 49, Size: 1.66 KB*

```jsx
'use client'
import { Accordion } from '@shared/ui'
import { SynthesizedEventCard } from '@/components/SynthesizedEventCard'
import { AnimatePresence, motion } from 'framer-motion'
import { AnimatedList, itemVariants } from './AnimatedList'
import { cn } from '@headlines/utils-shared'
export const EventList = ({
  items: events = [],
  onSwipeLeft,
  onFavoriteToggle,
  userFavoritedIds,
}) => {
  return (
    <Accordion type="single" collapsible>
      <AnimatedList className="w-full space-y-4">
        <AnimatePresence>
          {events.map((event) => {
            const isHighRelevance = event.highest_relevance_score > 69
            const isFavorited = userFavoritedIds.has(event._id)
            return (
              <motion.div
                key={event.event_key}
                variants={itemVariants}
                exit={itemVariants.exit}
                layout
                whileHover={{ y: -2 }}
                whileTap={{ scale: 0.98 }}
                className={cn(
                  'rounded-xl bg-gradient-to-br from-slate-900 to-slate-800/60 shadow-lg shadow-black/40 border border-slate-700',
                  isHighRelevance && 'card-glow',
                  isFavorited &&
                    'bg-gradient-to-br from-yellow-900/50 to-slate-800/60 border-yellow-700/50'
                )}
              >
                <SynthesizedEventCard
                  event={event}
                  onSwipeLeft={onSwipeLeft}
                  onFavoriteToggle={onFavoriteToggle}
                  isFavorited={isFavorited}
                />
              </motion.div>
            )
          })}
        </AnimatePresence>
      </AnimatedList>
    </Accordion>
  )
}

```

## 📄 src/components/client/EventListWrapper.jsx
*Lines: 22, Size: 481 Bytes*

```jsx
// Full Path: headlines/src/components/client/EventListWrapper.jsx
'use client'

import { EventList } from './EventList'

export function EventListWrapper({
  items,
  onDelete,
  onFavoriteToggle,
  userFavoritedIds,
}) {
  return (
    <EventList
      events={items}
      // Standardize the prop name. The swipe action is a "delete" or "discard" action.
      onDelete={onDelete}
      onFavoriteToggle={onFavoriteToggle}
      userFavoritedIds={userFavoritedIds}
    />
  )
}

```

## 📄 src/components/client/GlobalCountrySelector.jsx
*Lines: 89, Size: 2.86 KB*

```jsx
'use client'
import { useState, useMemo, useEffect } from 'react'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  Button,
  Input,
} from '../shared'
import { Check, Globe, X, Search, Save } from 'lucide-react'
import { getCountryFlag, cn } from '@headlines/utils-shared'
import { useAuth } from '@/lib/auth/client.js'

export function GlobalCountrySelector({ countries }) {
  const [open, setOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const { user, updateUserPreferences } = useAuth()
  const [selectedCountries, setSelectedCountries] = useState(
    user?.countries?.map((c) => c.name) || []
  )
  const [isSaving, setIsSaving] = useState(false)

  useEffect(() => {
    setSelectedCountries(user?.countries?.map((c) => c.name) || [])
  }, [user?.countries])

  const filteredCountries = useMemo(() => {
    if (!searchQuery) return countries
    return countries.filter((country) =>
      country.name.toLowerCase().includes(searchQuery.toLowerCase())
    )
  }, [countries, searchQuery])

  const handleSelect = (countryName) => {
    const newSelection = selectedCountries.includes(countryName)
      ? selectedCountries.filter((c) => c !== countryName)
      : [...selectedCountries, countryName]
    setSelectedCountries(newSelection)
  }

  const handleSave = async () => {
    setIsSaving(true)
    const newSubscriptions = selectedCountries.map((name) => ({ name, active: true }))
    await updateUserPreferences({ countries: newSubscriptions })
    setIsSaving(false)
    setOpen(false)
  }

  const renderIcon = () => {
    const userCountryNames = user?.countries?.map((c) => c.name) || []
    if (userCountryNames.length === 1) {
      return <span className="text-xl">{getCountryFlag(userCountryNames[0])}</span>
    }
    return <Globe className="h-5 w-5" />
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="ghost" size="icon" aria-label="Select Country Filter">
          {renderIcon()}
        </Button>
      </DialogTrigger>
      <DialogContent className="p-0 max-w-2xl">
        <div className="flex flex-col h-full">
          <DialogHeader className="p-4 border-b">
            <DialogTitle>Filter by Region</DialogTitle>
            <DialogDescription>
              Select from your subscribed countries to apply a global filter.
            </DialogDescription>
          </DialogHeader>
          <div className="p-2 max-h-[50vh] overflow-y-auto custom-scrollbar">
            {/* ... rest of component ... */}
          </div>
          <div className="p-4 border-t flex justify-end">
            <Button onClick={handleSave} disabled={isSaving}>
              <Save className="mr-2 h-4 w-4" />
              {isSaving ? 'Saving...' : 'Save and Close'}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/components/client/Header.jsx
*Lines: 86, Size: 2.9 KB*

```jsx
'use client'
import { Briefcase, LogOut, Settings, User } from 'lucide-react'
import { InstallPwaButton } from './InstallPwaButton'
import { GlobalCountrySelector } from './GlobalCountrySelector'
import { useAuth } from '@/lib/auth/client.js'
import { NotificationToggles } from './NotificationToggles'
import {
  Button,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '../shared'
import Link from 'next/link'

export const Header = ({
  articleCount,
  eventCount,
  opportunityCount,
  globalCountries,
}) => {
  const { user, logout } = useAuth()

  return (
    <header className="mb-4 sm:mb-6 relative">
      <div className="absolute top-2 right-2 flex items-center gap-1">
        {user && (
          <>
            <GlobalCountrySelector countries={globalCountries || []} />
            <NotificationToggles />
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  className="flex items-center gap-2 rounded-full"
                >
                  <User className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56 bg-secondary">
                <DropdownMenuLabel>Hi, {user.firstName}</DropdownMenuLabel>
                <DropdownMenuSeparator />
                <Link href="/settings" passHref>
                  <DropdownMenuItem>
                    <Settings className="mr-2 h-4 w-4" />
                    <span>Settings</span>
                  </DropdownMenuItem>
                </Link>
                <DropdownMenuItem onClick={logout}>
                  <LogOut className="mr-2 h-4 w-4" />
                  <span>Log out</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </>
        )}
        <InstallPwaButton />
      </div>
      <div className="flex flex-row items-center justify-center gap-x-3 sm:gap-x-4 mb-3 pt-8 sm:pt-0">
        <Briefcase size={28} className="text-blue-400 sm:size-10" />
        <h1 className="text-3xl sm:text-4xl font-extrabold tracking-tight text-slate-100 text-center sm:text-left">
          Headlines<span className="hidden sm:inline"> Intelligence</span>
        </h1>
      </div>
      <p className="text-center text-sm sm:text-base text-slate-400 max-w-3xl mx-auto">
        Analyze
        <span className="font-bold text-slate-300"> {eventCount?.toLocaleString()} </span>
        events,
        <span className="font-bold text-slate-300">
          {' '}
          {opportunityCount?.toLocaleString()}{' '}
        </span>
        opportunities, from
        <span className="font-bold text-slate-300">
          {' '}
          {articleCount?.toLocaleString()}{' '}
        </span>
        articles.
      </p>
    </header>
  )
}

```

## 📄 src/components/client/IOSInstallInstructions.jsx
*Lines: 47, Size: 1.53 KB*

```jsx
// src/components/IOSInstallInstructions.jsx (version 1.0)
'use client'

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from '../shared'
import { Share, PlusSquare } from 'lucide-react'

export function IOSInstallInstructions({ open, onOpenChange }) {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md bg-slate-900 border-slate-700">
        <DialogHeader>
          <DialogTitle>Install on your iPhone</DialogTitle>
          <DialogDescription>
            To install the app, please follow these steps:
          </DialogDescription>
        </DialogHeader>
        <div className="py-4 space-y-4 text-sm text-slate-300">
          <div className="flex items-center gap-4">
            <div className="flex-shrink-0 w-10 h-10 bg-slate-800 rounded-lg flex items-center justify-center">
              <Share className="h-5 w-5" />
            </div>
            <p>
              1. Tap the <span className="font-bold">Share</span> button in Safari's
              bottom toolbar.
            </p>
          </div>
          <div className="flex items-center gap-4">
            <div className="flex-shrink-0 w-10 h-10 bg-slate-800 rounded-lg flex items-center justify-center">
              <PlusSquare className="h-5 w-5" />
            </div>
            <p>
              2. Scroll down and tap '
              <span className="font-bold">Add to Home Screen</span>'.
            </p>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/components/client/InfiniteScrollLoader.jsx
*Lines: 26, Size: 651 Bytes*

```jsx
// src/components/InfiniteScrollLoader.jsx (version 1.0)
'use client'

import { useEffect, useRef } from 'react'
import { useInView } from 'react-intersection-observer'
import { Loader2 } from 'lucide-react'

export function InfiniteScrollLoader({ onLoadMore, hasMore }) {
  const { ref, inView } = useInView({
    threshold: 0,
    triggerOnce: false,
  })

  useEffect(() => {
    if (inView && hasMore) {
      onLoadMore()
    }
  }, [inView, hasMore, onLoadMore])

  return (
    <div ref={ref} className="flex justify-center items-center p-4 h-16">
      {hasMore && <Loader2 className="h-6 w-6 animate-spin text-slate-500" />}
    </div>
  )
}

```

## 📄 src/components/client/InstallPwaButton.jsx
*Lines: 112, Size: 3.08 KB*

```jsx
// src/components/InstallPwaButton.jsx (version 2.0)
'use client'

import { useState, useEffect } from 'react'
import { Download, Smartphone } from 'lucide-react'
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
  Button
} from '../shared'
import { IOSInstallInstructions } from './IOSInstallInstructions'

export function InstallPwaButton() {
  const [installPrompt, setInstallPrompt] = useState(null)
  const [isAppInstalled, setIsAppInstalled] = useState(false)
  const [isIOS, setIsIOS] = useState(false)
  const [showIOSInstructions, setShowIOSInstructions] = useState(false)

  useEffect(() => {
    // Detect iOS
    const isIOSDevice = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream
    setIsIOS(isIOSDevice)

    const handleBeforeInstallPrompt = (e) => {
      e.preventDefault()
      // This event only fires on supported browsers (e.g., Chrome on Android/Desktop)
      setInstallPrompt(e)
    }

    const checkInstallStatus = () => {
      // Standalone mode is a strong indicator of an installed PWA
      if (window.matchMedia('(display-mode: standalone)').matches) {
        setIsAppInstalled(true)
      }
    }

    checkInstallStatus()
    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt)
    window.addEventListener('appinstalled', () => {
      setIsAppInstalled(true)
      setInstallPrompt(null)
    })

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt)
    }
  }, [])

  const handleInstallClick = async () => {
    if (!installPrompt) return
    installPrompt.prompt()
    await installPrompt.userChoice
    setInstallPrompt(null)
  }

  const handleIOSClick = () => {
    setShowIOSInstructions(true)
  }

  // If the app is already installed, render nothing.
  if (isAppInstalled) {
    return null
  }

  // If on iOS, show the button that triggers the instruction modal.
  if (isIOS) {
    return (
      <>
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button variant="ghost" size="icon" onClick={handleIOSClick}>
                <Smartphone className="h-4 w-4" />
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Install on iPhone</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        <IOSInstallInstructions
          open={showIOSInstructions}
          onOpenChange={setShowIOSInstructions}
        />
      </>
    )
  }

  // If on a compatible browser and the install prompt is available, show the direct install button.
  if (installPrompt) {
    return (
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <Button variant="ghost" size="icon" onClick={handleInstallClick}>
              <Download className="h-4 w-4" />
            </Button>
          </TooltipTrigger>
          <TooltipContent>
            <p>Install App</p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    )
  }

  // Fallback for other scenarios (e.g., desktop browser without PWA support) - show nothing.
  return null
}

```

## 📄 src/components/client/MainNavTabs.jsx
*Lines: 91, Size: 3.08 KB*

```jsx
// src/components/MainNavTabs.jsx (version 2.0)
'use client'

import { useState, useEffect } from 'react'
import { usePathname } from 'next/navigation'
import Link from 'next/link'
import { motion, AnimatePresence } from 'framer-motion'
import { Button, Tabs, TabsList, TabsTrigger } from '../shared'
import { Zap, Newspaper, UploadCloud, MessageSquare, Target, ArrowUp } from 'lucide-react'

const TABS = [
  { value: 'events', label: 'Events', icon: Zap },
  { value: 'articles', label: 'Articles', icon: Newspaper },
  { value: 'opportunities', label: 'Opportunities', icon: Target },
  { value: 'upload', label: 'Upload', icon: UploadCloud },
  { value: 'chat', label: 'Chat', icon: MessageSquare },
]

export function MainNavTabs() {
  const pathname = usePathname()
  const currentView = pathname.substring(1).split('/')[0] || 'events'
  const [showScrollButton, setShowScrollButton] = useState(false)

  useEffect(() => {
    const checkScrollTop = () => {
      // Show button if user has scrolled down more than 400px
      if (window.scrollY > 400) {
        setShowScrollButton(true)
      } else {
        setShowScrollButton(false)
      }
    }

    window.addEventListener('scroll', checkScrollTop)
    return () => {
      window.removeEventListener('scroll', checkScrollTop)
    }
  }, [])

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth',
    })
  }

  return (
    <Tabs value={currentView} className="w-full">
      <div className="flex justify-center">
        <TabsList className="h-12 rounded-full bg-slate-900/60 backdrop-blur-sm border border-slate-700/80 p-2 shadow-lg transition-all duration-300">
          {TABS.map((tab) => (
            <TabsTrigger
              key={tab.value}
              value={tab.value}
              asChild
              className="px-3 sm:px-6 rounded-full data-[state=active]:bg-blue-600/80 data-[state=active]:text-white"
            >
              <Link href={`/${tab.value}`} className="flex items-center gap-2">
                <tab.icon className="h-4 w-4" />
                <span className="hidden sm:inline">{tab.label}</span>
              </Link>
            </TabsTrigger>
          ))}
          <AnimatePresence>
            {showScrollButton && (
              <motion.div
                initial={{ opacity: 0, width: 0 }}
                animate={{ opacity: 1, width: 'auto' }}
                exit={{ opacity: 0, width: 0 }}
                transition={{ duration: 0.3, ease: 'easeInOut' }}
                className="overflow-hidden flex items-center"
              >
                <div className="h-6 w-px bg-slate-700/60 mx-2" />
                <Button
                  variant="ghost"
                  size="icon"
                  className="rounded-full h-9 w-9 text-slate-400 hover:text-white hover:bg-slate-700/50"
                  onClick={scrollToTop}
                  aria-label="Scroll to top"
                >
                  <ArrowUp className="h-5 w-5" />
                </Button>
              </motion.div>
            )}
          </AnimatePresence>
        </TabsList>
      </div>
    </Tabs>
  )
}

```

## 📄 src/components/client/NotificationToggles.jsx
*Lines: 88, Size: 2.58 KB*

```jsx
// apps/client/src/components/NotificationToggles.jsx
'use client'

import { Mail, Bell, BellOff, Loader2, MailMinus } from 'lucide-react'
import {
  Button,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '../shared'
import { useAuth } from '@/lib/auth/client.js'
import { usePushManager } from '@/hooks'
import { savePushSubscription } from '@/lib/api-client' // Import the save function

export function NotificationToggles() {
  const { user, updateUserPreferences } = useAuth()

  // Pass user and the save function to the hook
  const {
    isSupported: isPushSupported,
    isSubscribed: isBrowserSubscribed,
    isLoading: isPushLoading,
    subscribe: subscribeToPush,
  } = usePushManager({ user, saveSubscription })

  if (!user) return null

  const handleEmailToggle = () => {
    updateUserPreferences({ emailNotificationsEnabled: !user.emailNotificationsEnabled })
  }

  const handlePushToggle = async () => {
    const newPreference = !user.pushNotificationsEnabled
    await updateUserPreferences({ pushNotificationsEnabled: newPreference })
    if (newPreference && isPushSupported && !isBrowserSubscribed) {
      await subscribeToPush()
    }
  }

  const isPushEnabled = user.pushNotificationsEnabled && isBrowserSubscribed

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button variant="ghost" size="icon" onClick={handleEmailToggle}>
            {user.emailNotificationsEnabled ? (
              <Mail className="h-4 w-4 text-green-400" />
            ) : (
              <MailMinus className="h-4 w-4" />
            )}
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          <p>
            {user.emailNotificationsEnabled ? 'Disable' : 'Enable'} Email Notifications
          </p>
        </TooltipContent>
      </Tooltip>

      {isPushSupported && (
        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              onClick={handlePushToggle}
              disabled={isPushLoading}
            >
              {isPushLoading && <Loader2 className="h-4 w-4 animate-spin" />}
              {!isPushLoading &&
                (isPushEnabled ? (
                  <Bell className="h-4 w-4 text-green-400" />
                ) : (
                  <BellOff className="h-4 w-4" />
                ))}
            </Button>
          </TooltipTrigger>
          <TooltipContent>
            <p>{isPushEnabled ? 'Disable' : 'Enable'} Push Notifications</p>
          </TooltipContent>
        </Tooltip>
      )}
    </TooltipProvider>
  )
}

```

## 📄 src/components/client/OpportunityCard.jsx
*Lines: 188, Size: 7.1 KB*

```jsx
// Full Path: headlines/src/components/client/OpportunityCard.jsx
'use client'

import { useState, useTransition } from 'react'
import { Card, Button, Badge } from '@/components/shared'
import {
  User,
  Briefcase,
  MapPin,
  Mail,
  Zap,
  MessageSquare,
  ArrowRight,
  Trash2,
} from 'lucide-react'
import { SwipeToDelete } from './swipe/SwipeToDelete'
import { cn, getCountryFlag } from '@headlines/utils-shared' // Assuming local utils file
import { EventContextDialog } from './EventContextDialog'
import Link from 'next/link'
import useAppStore from '@/lib/store/use-app-store'
import { DeletionConfirmationDialog } from './DeletionConfirmationDialog'

export function OpportunityCard({ opportunity, onDelete }) {
  const [isEventDialogOpen, setIsEventDialogOpen] = useState(false)
  const [isPending, startTransition] = useTransition()
  const [isConfirmOpen, setIsConfirmOpen] = useState(false)
  const skipConfirmation = useAppStore(
    (state) => state.deletePreferences.skipOpportunityConfirmation
  )

  const handleDelete = () => {
    startTransition(() => {
      onDelete(opportunity._id)
    })
  }

  const handleDeleteRequest = () => {
    if (skipConfirmation) {
      handleDelete()
    } else {
      setIsConfirmOpen(true)
    }
  }

  const sourceEvent =
    opportunity.events && opportunity.events.length > 0 ? opportunity.events[0] : null
  const { contactDetails } = opportunity
  const isPremiumOpportunity = opportunity.likelyMMDollarWealth > 49
  const reasonsToContact = Array.isArray(opportunity.whyContact)
    ? opportunity.whyContact
    : [opportunity.whyContact]
  const flag = getCountryFlag(opportunity.basedIn)

  return (
    <>
      <Card
        className={cn(
          'bg-slate-900/50 border border-slate-700 transition-all duration-300 ease-out overflow-hidden hover:border-blue-500/50 hover:bg-slate-900',
          isPending ? 'opacity-50' : 'opacity-100',
          isPremiumOpportunity && 'card-glow'
        )}
      >
        <SwipeToDelete onDelete={handleDeleteRequest}>
          <div className="p-4 space-y-3 bg-slate-900/50 relative z-10">
            <div className="flex justify-between items-start gap-3">
              <Link
                href={`/opportunities/${opportunity._id}`}
                className="block group flex-grow min-w-0"
              >
                <div className="flex justify-between items-start gap-3">
                  <div className="flex-1 space-y-1">
                    <p className="font-bold text-base text-slate-100 flex items-center gap-2">
                      <User className="h-4 w-4 text-slate-400" />
                      {opportunity.reachOutTo}
                    </p>
                    {(opportunity.city || opportunity.basedIn) && (
                      <p className="text-xs text-slate-400 flex items-center gap-2 pl-6">
                        <MapPin className="h-3 w-3" />
                        <span className="text-base mr-1">{flag}</span>
                        {opportunity.city}
                        {opportunity.city && opportunity.basedIn ? ', ' : ''}
                        {opportunity.basedIn}
                      </p>
                    )}
                  </div>
                  <div className="flex items-center gap-2">
                    {opportunity.likelyMMDollarWealth > 0 && (
                      <Badge
                        variant="outline"
                        className="border-green-500/50 text-green-300"
                      >
                        ${opportunity.likelyMMDollarWealth}M
                      </Badge>
                    )}
                    <div className="opacity-0 group-hover:opacity-100 transition-opacity">
                      <ArrowRight className="h-5 w-5 text-blue-400" />
                    </div>
                  </div>
                </div>
              </Link>
              <div className="flex-shrink-0 hidden sm:block">
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={handleDeleteRequest}
                  disabled={isPending}
                  className="h-8 w-8 text-slate-500 hover:bg-red-500/10 hover:text-red-400"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </div>
            <div className="pl-4 border-l-2 border-slate-700 space-y-3">
              <div className="text-sm text-slate-400 space-y-1">
                {contactDetails?.role && contactDetails?.company && (
                  <p className="flex items-center gap-2">
                    <Briefcase className="h-4 w-4 text-slate-500 flex-shrink-0" />
                    <span>
                      {contactDetails.role} at <strong>{contactDetails.company}</strong>
                    </span>
                  </p>
                )}
                {contactDetails?.email && (
                  <a
                    href={`mailto:${contactDetails.email}`}
                    className="flex items-center gap-2 text-blue-400 hover:underline"
                  >
                    <Mail className="h-4 w-4 text-slate-500 flex-shrink-0" />{' '}
                    {contactDetails.email}
                  </a>
                )}
              </div>
              <div className="space-y-2">
                {reasonsToContact.slice(0, 1).map((reason, index) => (
                  <div
                    key={index}
                    className="flex items-start gap-2 text-sm text-slate-300 italic"
                  >
                    <MessageSquare className="h-4 w-4 mt-0.5 text-slate-500 flex-shrink-0" />
                    <p className="line-clamp-2">“{reason}”</p>
                  </div>
                ))}
              </div>
            </div>
            {sourceEvent && (
              <div className="pt-3 mt-3 border-t border-slate-700/50">
                <Button
                  variant="ghost"
                  className="w-full h-auto text-left justify-start p-2 hover:bg-slate-800/50"
                  onClick={(e) => {
                    e.preventDefault()
                    e.stopPropagation()
                    setIsEventDialogOpen(true)
                  }}
                >
                  <Zap className="h-4 w-4 mr-3 text-blue-400 flex-shrink-0" />
                  <div className="min-w-0">
                    <p className="text-xs text-slate-400">View Parent Event:</p>
                    <p className="text-sm font-semibold text-slate-200 truncate">
                      {sourceEvent.synthesized_headline}
                    </p>
                  </div>
                </Button>
              </div>
            )}
          </div>
        </SwipeToDelete>
      </Card>
      {sourceEvent && (
        <EventContextDialog
          event={sourceEvent}
          open={isEventDialogOpen}
          onOpenChange={setIsEventDialogOpen}
        />
      )}
      <DeletionConfirmationDialog
        open={isConfirmOpen}
        onOpenChange={setIsConfirmOpen}
        onConfirm={handleDelete}
        isPending={isPending}
        itemType="opportunity"
        itemDescription={opportunity.reachOutTo}
        preferenceKey="skipOpportunityConfirmation"
      />
    </>
  )
}

```

## 📄 src/components/client/OpportunityFilters.jsx
*Lines: 60, Size: 1.72 KB*

```jsx
// src/components/OpportunityFilters.jsx (version 1.0)
'use client'

import { usePathname, useRouter, useSearchParams } from 'next/navigation'
import {
  Card,
  CardContent,
  Label,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@shared/ui'

export function OpportunityFilters({ uniqueCountries }) {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()
  const currentCountry = searchParams.get('country') || 'all'

  const handleCountryChange = (value) => {
    const params = new URLSearchParams(searchParams.toString())
    if (value === 'all') {
      params.delete('country')
    } else {
      params.set('country', value)
    }
    router.push(`${pathname}?${params.toString()}`, { scroll: false })
  }

  return (
    <Card className="mb-6 bg-slate-900/50 border-slate-700/80">
      <CardContent className="p-4">
        <div className="max-w-xs">
          <Label htmlFor="country-filter" className="text-slate-300">
            Filter by Country
          </Label>
          <Select value={currentCountry} onValueChange={handleCountryChange}>
            <SelectTrigger
              id="country-filter"
              className="w-full mt-1 bg-slate-900/80 border-slate-700"
            >
              <SelectValue placeholder="Filter by country..." />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Countries</SelectItem>
              {uniqueCountries.map((country) => (
                <SelectItem key={country} value={country}>
                  {country}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </CardContent>
    </Card>
  )
}

```

## 📄 src/components/client/OpportunityListWrapper.jsx
*Lines: 31, Size: 958 Bytes*

```jsx
// src/components/OpportunityListWrapper.jsx (version 1.1)
'use client'

import { AnimatePresence, motion } from 'framer-motion'
import { AnimatedList, itemVariants } from '@/components/AnimatedList'
import { OpportunityCard } from '@/components/OpportunityCard'
import { cn } from '@headlines/utils-shared'

export function OpportunityListWrapper({ items, onDelete }) {
  return (
    <AnimatedList className="space-y-3">
      <AnimatePresence>
        {items.map((opportunity) => (
          <motion.div
            key={opportunity._id}
            variants={itemVariants}
            exit={itemVariants.exit}
            layout
            className={cn('min-w-full sm:min-w-[480px]')} // <-- ADDED MINIMUM WIDTH
          >
            <OpportunityCard
              opportunity={opportunity}
              onDelete={() => onDelete(opportunity._id)}
            />
          </motion.div>
        ))}
      </AnimatePresence>
    </AnimatedList>
  )
}

```

## 📄 src/components/client/PaginationControls.jsx
*Lines: 41, Size: 1.06 KB*

```jsx
'use client'

import { usePathname, useRouter, useSearchParams } from 'next/navigation'
import { Button } from '@shared/ui'

export const PaginationControls = ({ totalPages, currentPage }) => {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  const handlePageChange = (newPage) => {
    const params = new URLSearchParams(searchParams.toString())
    params.set('page', newPage.toString())
    router.push(`${pathname}?${params.toString()}`)
  }

  return (
    <div className="flex items-center gap-2">
      <Button
        variant="secondary"
        size="sm"
        onClick={() => handlePageChange(currentPage - 1)}
        disabled={currentPage <= 1}
      >
        Previous
      </Button>
      <span className="text-slate-400 font-medium text-sm">
        Page {currentPage} of {totalPages}
      </span>
      <Button
        variant="secondary"
        size="sm"
        onClick={() => handlePageChange(currentPage + 1)}
        disabled={currentPage >= totalPages}
      >
        Next
      </Button>
    </div>
  )
}

```

## 📄 src/components/client/ServiceWorkerProvider.js
*Lines: 55, Size: 1.81 KB*

```javascript
// src/components/ServiceWorkerProvider.js
"use client";

import { useEffect } from 'react';

export function ServiceWorkerProvider({ children }) {
  useEffect(() => {
    if (typeof window !== 'undefined' && 'serviceWorker' in navigator) {
      const registerServiceWorker = async () => {
        try {
          console.log('[SW] Registering service worker...');
          
          const registration = await navigator.serviceWorker.register('/sw.js', {
            scope: '/'
          });
          
          console.log('[SW] Service Worker registered successfully:', registration);
          
          // Handle updates
          registration.addEventListener('updatefound', () => {
            console.log('[SW] Service Worker update found');
            const newWorker = registration.installing;
            
            newWorker?.addEventListener('statechange', () => {
              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                console.log('[SW] New service worker installed, refresh recommended');
                // Optionally show a toast here about app update
              }
            });
          });
          
        } catch (error) {
          console.error('[SW] Service Worker registration failed:', error);
        }
      };

      // Register immediately
      registerServiceWorker();
      
      // Also listen for the page becoming visible (tab focus)
      document.addEventListener('visibilitychange', () => {
        if (!document.hidden) {
          navigator.serviceWorker.getRegistrations().then(registrations => {
            if (registrations.length === 0) {
              console.log('[SW] No service worker found, re-registering...');
              registerServiceWorker();
            }
          });
        }
      });
    }
  }, []);

  return children;
}
```

## 📄 src/components/client/SettingsForm.jsx
*Lines: 124, Size: 3.8 KB*

```jsx
// apps/client/src/components/SettingsForm.jsx (version 2.0.0)
'use client'
import { useState, useEffect } from 'react'
import { useAuth } from '@shared/auth/client.js'
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
  Button,
  Label,
} from '@shared/ui'
import { CountrySubscriptionEditor } from './CountrySubscriptionEditor'
import { Save, Loader2, Trash2 } from 'lucide-react'
import { toast } from 'sonner'
import { clearDiscardedItems } from '@/lib/api-client'

export function SettingsForm({ allCountries }) {
  const { user, updateUserPreferences } = useAuth()
  const [formData, setFormData] = useState({ countries: [] })
  const [isSaving, setIsSaving] = useState(false)
  const [isClearing, setIsClearing] = useState(false)

  useEffect(() => {
    if (user) {
      setFormData({
        countries: (user.countries || []).map((c) => c.name).filter(Boolean),
      })
    }
  }, [user])

  const handleCountryChange = (newCountryNames) => {
    setFormData((prev) => ({ ...prev, countries: newCountryNames }))
  }

  const handleSaveChanges = async (e) => {
    e.preventDefault()
    setIsSaving(true)
    const newSubscriptions = formData.countries.map((name) => ({ name, active: true }))
    await updateUserPreferences({ countries: newSubscriptions })
    setIsSaving(false)
  }

  const handleClearDiscarded = async () => {
    toast.info('Clearing discarded items...')
    setIsClearing(true)
    const result = await clearDiscardedItems()
    if (result.success) {
      toast.success('Discarded items cleared. Your feeds will be refreshed.')
    } else {
      toast.error('Failed to clear items', { description: result.error })
    }
    setIsClearing(false)
  }

  if (!user) return null

  return (
    <>
      <form onSubmit={handleSaveChanges}>
        <Card className="bg-slate-900/50 border-slate-700/80">
          <CardHeader>
            <CardTitle>Country Subscriptions</CardTitle>
            <CardDescription>
              Select the countries you want to receive intelligence from.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Label>Subscribed Countries</Label>
            <CountrySubscriptionEditor
              allCountries={allCountries}
              selectedCountries={formData.countries}
              onSelectionChange={handleCountryChange}
            />
          </CardContent>
          <CardFooter>
            <Button type="submit" disabled={isSaving}>
              {isSaving ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <Save className="mr-2 h-4 w-4" />
              )}
              Save Preferences
            </Button>
          </CardFooter>
        </Card>
      </form>
      <Card className="mt-8 bg-slate-900/50 border-red-500/30">
        <CardHeader>
          <CardTitle>Danger Zone</CardTitle>
          <CardDescription>
            These actions are irreversible. Proceed with caution.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex justify-between items-center">
            <div>
              <p className="font-semibold">Reset Discarded Items</p>
              <p className="text-sm text-slate-400">
                If you've dismissed items by swiping, this will make them visible again in
                your feeds.
              </p>
            </div>
            <Button
              variant="destructive"
              onClick={handleClearDiscarded}
              disabled={isClearing}
            >
              {isClearing ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <Trash2 className="mr-2 h-4 w-4" />
              )}
              Clear Discarded
            </Button>
          </div>
        </CardContent>
      </Card>
    </>
  )
}

```

## 📄 src/components/client/SplashScreen.jsx
*Lines: 109, Size: 2.45 KB*

```jsx
// src/components/SplashScreen.jsx (version 2.0)
'use client'

import { motion } from 'framer-motion'
import { Briefcase } from 'lucide-react'

const containerVariants = {
  initial: { opacity: 1 },
  exit: {
    opacity: 0,
    transition: {
      duration: 0.5,
      ease: 'easeInOut',
    },
  },
}

const wooshContainerVariants = {
  animate: {
    transition: {
      staggerChildren: 0.15,
    },
  },
}

const wooshVariants = {
  initial: {
    scale: 0,
    opacity: 0,
    borderRadius: '50%',
  },
  animate: {
    scale: 1,
    opacity: 1,
    borderRadius: ['50%', '40%', '30%'],
    transition: {
      duration: 0.8,
      ease: [0.22, 1, 0.36, 1], // "easeOutCirc"
    },
  },
}

const textVariants = {
  initial: {
    scale: 0.8,
    opacity: 0,
  },
  animate: {
    scale: 1,
    opacity: 1,
    transition: {
      delay: 0.5,
      duration: 0.5,
      ease: 'easeOut',
    },
  },
}

export function SplashScreen() {
  const wooshLayers = 5

  return (
    <motion.div
      variants={containerVariants}
      initial="initial"
      animate="animate"
      exit="exit"
      className="fixed inset-0 z-50 flex items-center justify-center bg-[hsl(224,71.4%,4.1%)]"
    >
      <div className="relative flex flex-col items-center justify-center w-64 h-64">
        <div className="relative flex items-center justify-center w-32 h-32">
          {/* The "Woosh" Animation Layers */}
          <motion.div
            variants={wooshContainerVariants}
            initial="initial"
            animate="animate"
            className="absolute inset-0"
          >
            {[...Array(wooshLayers)].map((_, i) => (
              <motion.div
                key={i}
                variants={wooshVariants}
                className="absolute inset-0 border-2 border-blue-400/50"
                style={{
                  transformOrigin: 'center',
                  width: `${100 - i * 15}%`,
                  height: `${100 - i * 15}%`,
                  top: `${(i * 15) / 2}%`,
                  left: `${(i * 15) / 2}%`,
                }}
              />
            ))}
          </motion.div>
          {/* The Central Icon */}
          <motion.div variants={textVariants}>
            <Briefcase size={48} className="text-blue-300" />
          </motion.div>
        </div>
        <motion.h1
          variants={textVariants}
          className="mt-6 text-3xl font-bold text-slate-200"
        >
          Headlines
        </motion.h1>
      </div>
    </motion.div>
  )
}

```

## 📄 src/components/client/StatsBar.jsx
*Lines: 29, Size: 1.14 KB*

```jsx
import { Card } from '@shared/ui'
import { Newspaper, Zap } from 'lucide-react'

export function StatsBar({ articleCount, eventCount }) {
  return (
    <Card className="mb-8 bg-black/20 backdrop-blur-sm border-white/10 shadow-lg shadow-black/30">
      <div className="p-4 flex justify-around items-center">
        <div className="text-center">
          <div className="flex items-center justify-center gap-2 text-blue-300">
            <Zap className="h-5 w-5" />
            <span className="text-2xl font-bold">{eventCount.toLocaleString()}</span>
          </div>
          <p className="text-xs text-slate-400 uppercase tracking-wider">
            Synthesized Events
          </p>
        </div>
        <div className="h-12 w-px bg-slate-700"></div>
        <div className="text-center">
          <div className="flex items-center justify-center gap-2 text-slate-300">
            <Newspaper className="h-5 w-5" />
            <span className="text-2xl font-bold">{articleCount.toLocaleString()}</span>
          </div>
          <p className="text-xs text-slate-400 uppercase tracking-wider">Raw Articles</p>
        </div>
      </div>
    </Card>
  )
}

```

## 📄 src/components/client/SynthesizedEventCard.jsx
*Lines: 101, Size: 3.35 KB*

```jsx
// Full Path: headlines/src/components/client/SynthesizedEventCard.jsx
'use client'

import { useState, useTransition } from 'react'
import { useRouter } from 'next/navigation'
import { AccordionContent, AccordionItem, ConfirmationDialog } from '@/components/shared'
import useAppStore from '@/lib/store/use-app-store'
import { SwipeToDelete } from './swipe/SwipeToDelete'
import { EventCardDesktop } from './events/EventCardDesktop'
import { EventCardMobile } from './events/EventCardMobile'
import { EventCardDetails } from './events/EventCardDetails'
import { useAuth } from '@/lib/auth/client'
import { toast } from 'sonner'

export const SynthesizedEventCard = ({
  event,
  onDelete,
  onFavoriteToggle,
  isFavorited,
}) => {
  const [isPending, startTransition] = useTransition()
  const [isEmailDialogOpen, setIsEmailDialogOpen] = useState(false)
  const setChatContextPrompt = useAppStore((state) => state.setChatContextPrompt)
  const router = useRouter()
  const { user } = useAuth()

  const performDelete = () => {
    startTransition(() => {
      // The parent DataView's interaction handler will remove the item
      // from the correct list (favorites or main list).
      onDelete(event._id)
    })
  }

  const handleSwipeRight = () => {
    if (isFavorited) {
      setIsEmailDialogOpen(true)
    } else {
      toast.info('Item must be favorited to email.')
    }
  }

  const handleChatAboutEvent = (e) => {
    e.stopPropagation()
    const prompt = `Tell me more about the event: "${event.synthesized_headline}". What are the key implications?`
    setChatContextPrompt(prompt)
    router.push('/chat')
  }

  const handleFavorite = (e) => {
    e.stopPropagation()
    onFavoriteToggle(event._id, !isFavorited)
  }

  return (
    <>
      <div className="relative w-full">
        <AccordionItem
          value={event.event_key}
          className={`relative border-none rounded-xl overflow-hidden transition-all duration-300 ${isPending ? 'opacity-50' : ''}`}
        >
          <SwipeToDelete onDelete={performDelete} onSwipeRight={handleSwipeRight}>
            <div className="relative p-4">
              <EventCardMobile
                event={event}
                onChat={handleChatAboutEvent}
                onDelete={performDelete}
                onFavorite={handleFavorite}
                isFavorited={isFavorited}
                isPending={isPending}
              />
              <EventCardDesktop
                event={event}
                onChat={handleChatAboutEvent}
                onDelete={performDelete}
                onFavorite={handleFavorite}
                isFavorited={isFavorited}
                isPending={isPending}
              />
            </div>
          </SwipeToDelete>
          <AccordionContent className="p-4 pt-0 bg-slate-900/50">
            <EventCardDetails event={event} />
          </AccordionContent>
        </AccordionItem>
      </div>
      <ConfirmationDialog
        open={isEmailDialogOpen}
        onOpenChange={setIsEmailDialogOpen}
        title="Confirm Action"
        description={`This will send a detailed brief of the event "${event.synthesized_headline}" to your registered email address. Do you want to continue?`}
        confirmText="Send Email"
        onConfirm={() => {
          toast.info('Email functionality is not yet implemented.')
          setIsEmailDialogOpen(false)
        }}
      />
    </>
  )
}

```

## 📄 src/components/client/UploadView.jsx
*Lines: 135, Size: 4.44 KB*

```jsx
// apps/client/src/components/UploadView.jsx (version 2.0.0)
'use client'

import { useState, useRef } from 'react'
import { toast } from 'sonner'
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
  Label,
  Input,
  Button
} from '@shared/ui'
import { Loader2, UploadCloud, FileJson } from 'lucide-react'
import { processUploadedArticle } from '@/lib/api-client'

export function UploadView() {
  const [file, setFile] = useState(null)
  const [isLoading, setIsLoading] = useState(false)
  const fileInputRef = useRef(null)

  const handleFileChange = (event) => {
    const uploadedFile = event.target.files[0]
    if (uploadedFile && uploadedFile.type === 'application/json') {
      setFile(uploadedFile)
    } else {
      toast.error('Please select a valid JSON file.')
      setFile(null)
    }
  }

  const handleProcessFile = async () => {
    if (!file) return
    setIsLoading(true)
    const reader = new FileReader()
    reader.onload = async (e) => {
      try {
        const content = JSON.parse(e.target.result)
        if (!Array.isArray(content)) throw new Error('JSON must be an array of objects.')

        const totalItems = content.length
        const toastId = toast.loading(
          `Processing ${totalItems} items from file... (0/${totalItems})`
        )

        for (let i = 0; i < totalItems; i++) {
          const item = content[i]
          if (!item.headline || !item.article) {
            toast.warning(`Skipping item ${i + 1}: missing headline or article.`)
            continue
          }
          const result = await processUploadedArticle(item)
          if (result.error) {
            toast.error(
              `Failed to process item ${i + 1}: ${item.headline.substring(0, 30)}...`,
              { description: result.error }
            )
          }
          toast.loading(`Processing ${totalItems} items... (${i + 1}/${totalItems})`, {
            id: toastId,
          })
        }

        toast.success(
          `Successfully processed file. ${totalItems} items were sent to the pipeline.`,
          { id: toastId }
        )
        setFile(null)
        if (fileInputRef.current) fileInputRef.current.value = ''
      } catch (error) {
        toast.error('Failed to process file.', { description: error.message })
      } finally {
        setIsLoading(false)
      }
    }
    reader.readAsText(file)
  }

  return (
    <div className="max-w-4xl mx-auto">
      <Card className="bg-black/20 backdrop-blur-sm border border-white/10 shadow-2xl shadow-black/30">
        <CardHeader className="p-8">
          <CardTitle className="text-2xl">Upload New Knowledge</CardTitle>
          <CardDescription>
            {
              'Upload a JSON file with an array of `{"headline": "...", "article": "..."}` objects to batch-process intelligence.'
            }
          </CardDescription>
        </CardHeader>
        <CardContent className="p-8 pt-0">
          <div className="space-y-2">
            <Label htmlFor="file-upload" className="text-lg font-semibold">
              JSON File Upload
            </Label>
            <div className="flex items-center p-2 border-2 border-dashed rounded-lg border-slate-700 bg-slate-900/50">
              <FileJson className="h-10 w-10 text-slate-500 mr-4 flex-shrink-0" />
              <div className="flex-grow">
                <Input
                  id="file-upload"
                  type="file"
                  accept=".json"
                  onChange={handleFileChange}
                  ref={fileInputRef}
                  className="file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-600/20 file:text-blue-300 hover:file:bg-blue-600/30"
                />
                {file && (
                  <p className="text-xs text-slate-400 mt-1">Selected: {file.name}</p>
                )}
              </div>
            </div>
          </div>
        </CardContent>
        <CardFooter className="p-8 pt-0">
          <Button
            onClick={handleProcessFile}
            disabled={isLoading || !file}
            size="lg"
            className="h-12 w-full"
          >
            {isLoading ? (
              <Loader2 className="mr-2 h-5 w-5 animate-spin" />
            ) : (
              <UploadCloud className="mr-2 h-5 w-5" />
            )}
            {isLoading ? 'Processing...' : `Process ${file ? file.name : 'File'}`}
          </Button>
        </CardFooter>
      </Card>
    </div>
  )
}

```

## 📄 src/components/client/chat/ChatInput.jsx
*Lines: 51, Size: 1.28 KB*

```jsx
// src/components/chat/ChatInput.jsx (version 2.0)
import { Button } from '@shared/ui'
import { Send, Loader2 } from 'lucide-react'
import Textarea from 'react-textarea-autosize'

export function ChatInput({
  input,
  handleInputChange,
  handleSubmit,
  isLoading,
  inputRef,
}) {
  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSubmit(e)
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="flex items-end gap-2 p-4 border-t border-white/10"
    >
      <Textarea
        ref={inputRef}
        value={input}
        onChange={handleInputChange}
        onKeyDown={handleKeyDown}
        placeholder="Ask a follow-up question..."
        disabled={isLoading}
        className="flex-grow resize-none bg-slate-900/80 border border-slate-700 rounded-lg shadow-sm p-3 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all"
        minRows={1}
        maxRows={5}
      />
      <Button
        type="submit"
        disabled={isLoading || !input.trim()}
        className="h-12 w-12 flex-shrink-0"
        size="icon"
      >
        {isLoading ? (
          <Loader2 className="h-5 w-5 animate-spin" />
        ) : (
          <Send className="h-5 w-5" />
        )}
      </Button>
    </form>
  )
}

```

## 📄 src/components/client/chat/ChatLoadingIndicator.jsx
*Lines: 66, Size: 2.18 KB*

```jsx
// src/components/chat/ChatLoadingIndicator.jsx (version 2.0)
'use client'

import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Bot, Sparkles } from 'lucide-react'

const statuses = [
  'Analyzing query...',
  'Searching internal database...',
  'Consulting Wikipedia...',
  'Scanning web results...',
  'Synthesizing response...',
  'Performing final checks...',
]

/**
 * A self-animating loading indicator for the chat that cycles through
 * a predefined list of statuses to give a sense of progress.
 */
export function ChatLoadingIndicator() {
  const [statusIndex, setStatusIndex] = useState(0)

  useEffect(() => {
    // This effect runs only once on mount to start the interval.
    const interval = setInterval(() => {
      setStatusIndex((prevIndex) => (prevIndex + 1) % statuses.length)
    }, 1800) // Change status every 1.8 seconds

    // Cleanup function to clear the interval when the component unmounts.
    return () => clearInterval(interval)
  }, [])

  return (
    <div className="flex items-start gap-4">
      <div className="flex-shrink-0 w-8 h-8 rounded-full bg-blue-500/20 text-blue-300 flex items-center justify-center">
        <Bot className="h-5 w-5" />
      </div>
      <div className="px-4 py-3 rounded-xl max-w-[85%] bg-slate-800">
        <div className="flex items-center gap-3 text-sm text-slate-400">
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}
          >
            <Sparkles className="h-4 w-4 text-yellow-400" />
          </motion.div>
          <div className="relative h-5 w-52 overflow-hidden">
            <AnimatePresence initial={false}>
              <motion.p
                key={statusIndex}
                initial={{ opacity: 0, y: -15 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: 15 }}
                transition={{ duration: 0.3, ease: 'easeInOut' }}
                className="absolute inset-0 italic"
              >
                {statuses[statusIndex]}
              </motion.p>
            </AnimatePresence>
          </div>
        </div>
      </div>
    </div>
  )
}

```

## 📄 src/components/client/chat/ChatMessage.jsx
*Lines: 72, Size: 2.75 KB*

```jsx
// src/components/chat/ChatMessage.jsx (version 2.2)
import React from 'react'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import rehypeRaw from 'rehype-raw'
import { cn } from '@headlines/utils-shared'
import { User, Bot, ChevronsUpDown } from 'lucide-react'
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@shared/ui'
import { ChatLoadingIndicator } from './ChatLoadingIndicator'

export function ChatMessage({ message, onAccordionToggle }) {
  const isUser = message.role === 'user'

  return (
    <div className={cn('flex items-start gap-4', isUser && 'justify-end')}>
      {!isUser && (
        <div className="flex-shrink-0 w-8 h-8 rounded-full bg-blue-500/20 text-blue-300 flex items-center justify-center">
          <Bot className="h-5 w-5" />
        </div>
      )}
      <div
        className={cn(
          'px-4 py-3 rounded-xl max-w-[85%]',
          isUser ? 'bg-slate-700' : 'bg-slate-800'
        )}
      >
        {!isUser && (message.isThinking || message.thoughts) && (
          <Accordion
            type="single"
            collapsible
            className="w-full mb-2"
            onValueChange={onAccordionToggle}
          >
            <AccordionItem value="item-1" className="border-b border-slate-700/50">
              <AccordionTrigger className="py-2 text-xs text-slate-400 hover:no-underline">
                <div className="flex items-center gap-2">
                  <ChevronsUpDown className="h-3 w-3" />
                  View Thoughts
                </div>
              </AccordionTrigger>
              <AccordionContent className="pt-2 pb-0">
                {message.isThinking ? (
                  <ChatLoadingIndicator />
                ) : (
                  <div className="prose prose-xs prose-invert max-w-none text-slate-400 bg-black/20 p-3 rounded-md">
                    <ReactMarkdown>{`\`\`\`markdown\n${message.thoughts}\n\`\`\``}</ReactMarkdown>
                  </div>
                )}
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        )}

        {!message.isThinking && message.content && (
          <div className="overflow-x-auto custom-scrollbar">
            <div className="prose prose-sm prose-invert max-w-none prose-p:my-1 prose-headings:my-2 prose-ul:my-2 prose-li:my-0 text-slate-200">
              <ReactMarkdown remarkPlugins={[remarkGfm]} rehypePlugins={[rehypeRaw]}>
                {message.content}
              </ReactMarkdown>
            </div>
          </div>
        )}
      </div>
      {isUser && (
        <div className="flex-shrink-0 w-8 h-8 rounded-full bg-slate-500/20 text-slate-300 flex items-center justify-center">
          <User className="h-5 w-5" />
        </div>
      )}
    </div>
  )
}

```

## 📄 src/components/client/chat/ChatScrollAnchor.jsx
*Lines: 21, Size: 538 Bytes*

```jsx
// src/components/chat/ChatScrollAnchor.jsx (version 1.1)
'use client'

import { useRef, useEffect, forwardRef } from 'react'

export const ChatScrollAnchor = forwardRef(function ChatScrollAnchor({ messages }, ref) {
  const internalRef = useRef(null)
  const anchorRef = ref || internalRef

  useEffect(() => {
    if (anchorRef.current) {
      anchorRef.current.scrollIntoView({
        block: 'start',
        behavior: 'smooth',
      })
    }
  }, [messages, anchorRef])

  return <div ref={anchorRef} className="h-px w-full" />
})

```

## 📄 src/components/client/chat/ChatSidebar.jsx
*Lines: 36, Size: 1.18 KB*

```jsx
// src/components/chat/ChatSidebar.jsx (version 1.0)
'use client'

import { Button } from '@shared/ui'
import { PlusCircle, MessageSquare } from 'lucide-react'
import { cn } from '@headlines/utils-shared'

export function ChatSidebar({ chats, activeChatId, createChat, selectChat }) {
  return (
    <div className="flex flex-col h-full bg-slate-900/50 border-r border-slate-700/50 p-2">
      <Button onClick={createChat} className="mb-4">
        <PlusCircle className="mr-2 h-4 w-4" />
        New Chat
      </Button>
      <div className="flex-grow overflow-y-auto custom-scrollbar pr-1">
        <div className="flex flex-col gap-1">
          {chats.map((chat) => (
            <Button
              key={chat.id}
              variant="ghost"
              onClick={() => selectChat(chat.id)}
              className={cn(
                'w-full justify-start text-left truncate',
                activeChatId === chat.id && 'bg-blue-500/20 text-blue-200'
              )}
            >
              <MessageSquare className="mr-2 h-4 w-4 flex-shrink-0" />
              <span className="truncate">{chat.title}</span>
            </Button>
          ))}
        </div>
      </div>
    </div>
  )
}

```

## 📄 src/components/client/events/EventCardDesktop.jsx
*Lines: 111, Size: 4.18 KB*

```jsx
// src/components/events/EventCardDesktop.jsx (version 1.2)
'use client'

import {
  Badge,
  Button,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@shared/ui'
import { Trash2, MessageSquarePlus, Users } from 'lucide-react'
// DEFINITIVE FIX: Corrected the typo from '@shared/utils-shared' to '@shared/utils-shared'
import { getCountryFlag } from '@shared/utils-shared'
import Image from 'next/image'

const getRelevanceBadgeClass = (score) => {
  if (score >= 90)
    return 'bg-red-500/20 text-red-300 border border-red-500/30 shadow-lg shadow-red-500/10'
  if (score >= 75)
    return 'bg-blue-500/20 text-blue-300 border border-blue-500/30 shadow-lg shadow-blue-500/10'
  return 'bg-slate-500/20 text-slate-300 border border-slate-500/30'
}

export function EventCardDesktop({ event, onChat, onDelete, isPending }) {
  if (!event) return null
  const flag = getCountryFlag(event.country)
  const primaryImageUrl = event.source_articles?.find((a) => a.imageUrl)?.imageUrl

  return (
    <div className="hidden sm:block">
      <TooltipProvider delayDuration={100}>
        <div className="flex items-start gap-6">
          <div className="flex flex-col items-center shrink-0">
            <Badge
              className={`text-xl font-bold px-4 py-2 ${getRelevanceBadgeClass(
                event.highest_relevance_score
              )}`}
            >
              {event.highest_relevance_score}
            </Badge>
            <span className="text-xs text-slate-500 mt-1">Score</span>
          </div>
          <div className="flex-grow min-w-0 pr-20">
            <h3 className="font-serif font-bold text-xl text-slate-100 mb-2">
              <span className="text-2xl mr-3 align-middle">{flag}</span>
              {event.synthesized_headline}
            </h3>
            <p className="text-slate-300 leading-relaxed">{event.synthesized_summary}</p>
          </div>
          {primaryImageUrl && (
            <div className="relative h-24 w-24 rounded-lg overflow-hidden flex-shrink-0">
              <Image
                src={primaryImageUrl}
                alt={event.synthesized_headline}
                fill
                className="object-cover"
                sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
              />
            </div>
          )}
          <div className="absolute top-4 right-4 z-10 flex gap-1">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={onChat}
                  className="text-slate-400 hover:text-blue-400 bg-black/20 hover:bg-blue-500/20 h-8 w-8"
                >
                  <MessageSquarePlus className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Ask AI about this event</TooltipContent>
            </Tooltip>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  disabled={isPending}
                  onClick={onDelete}
                  className="text-slate-400 hover:text-red-400 bg-black/20 hover:bg-red-500/20 h-8 w-8"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Delete Event</TooltipContent>
            </Tooltip>
          </div>
        </div>
        <div className="mt-4 pt-4 border-t border-slate-800/50 flex flex-col sm:flex-row justify-between items-start gap-4">
          {event.key_individuals && event.key_individuals.length > 0 && (
            <div className="flex items-start gap-3 text-slate-400">
              <Users className="h-5 w-5 mt-0.5 shrink-0 text-slate-500" />
              <p className="text-sm font-medium text-slate-300">
                {event.key_individuals.length} Key Individual(s) Identified
              </p>
            </div>
          )}
          {event.ai_assessment_reason && (
            <p className="text-xs text-slate-500 italic sm:text-right flex-grow">
              {event.ai_assessment_reason}
            </p>
          )}
        </div>
      </TooltipProvider>
    </div>
  )
}

```

## 📄 src/components/client/events/EventCardDetails.jsx
*Lines: 69, Size: 2.55 KB*

```jsx
// src/components/events/EventCardDetails.jsx (version 1.0)
'use client'

import { Users, Mail, Building, Briefcase } from 'lucide-react'

export function EventCardDetails({ event }) {
  if (!event) return null

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      {/* Key Individuals Column */}
      {event.key_individuals && event.key_individuals.length > 0 && (
        <div className="space-y-3">
          <h4 className="font-semibold text-sm text-slate-300 mb-2 border-b border-slate-700 pb-1">
            Key Individuals
          </h4>
          {event.key_individuals.map((person, index) => (
            <div key={index} className="p-3 rounded-md bg-slate-800/50">
              <p className="font-bold text-slate-100 flex items-center gap-2">
                <Users className="h-4 w-4 text-slate-400" /> {person.name}
              </p>
              <div className="pl-6 space-y-1 mt-1 text-sm text-slate-400">
                {person.role_in_event && (
                  <p className="flex items-center gap-2">
                    <Briefcase className="h-3 w-3" /> {person.role_in_event}
                  </p>
                )}
                {person.company && (
                  <p className="flex items-center gap-2">
                    <Building className="h-3 w-3" /> {person.company}
                  </p>
                )}
                {person.email_suggestion && (
                  <a
                    href={`mailto:${person.email_suggestion}`}
                    className="flex items-center gap-2 text-blue-400 hover:underline"
                  >
                    <Mail className="h-3 w-3" /> {person.email_suggestion}
                  </a>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
      {/* Source Articles Column */}
      <div className="space-y-2">
        <h4 className="font-semibold text-sm text-slate-300 mb-2 border-b border-slate-700 pb-1">
          Source Articles ({event.source_articles.length})
        </h4>
        {event.source_articles.map((article) => (
          <a
            key={article.link}
            href={article.link}
            target="_blank"
            rel="noopener noreferrer"
            className="block p-3 rounded-md bg-slate-800/50 hover:bg-slate-800/80 transition-colors"
          >
            <p className="font-medium text-slate-200 line-clamp-1 text-sm">
              {article.headline}
            </p>
            <p className="text-xs text-slate-400">{article.newspaper}</p>
          </a>
        ))}
      </div>
    </div>
  )
}

```

## 📄 src/components/client/events/EventCardMobile.jsx
*Lines: 104, Size: 3.76 KB*

```jsx
// src/components/events/EventCardMobile.jsx (version 1.2)
'use client'

import { Badge, Button } from '@shared/ui'
import { Trash2, MessageSquarePlus, Users } from 'lucide-react'
import { getCountryFlag } from '@shared/utils-shared'
import { cn } from '@headlines/utils-shared'

const getRelevanceBadgeClass = (score) => {
  if (score >= 90) return 'bg-red-500/20 text-red-300 border border-red-500/30'
  if (score >= 75) return 'bg-blue-500/20 text-blue-300 border border-blue-500/30'
  return 'bg-slate-500/20 text-slate-300 border border-slate-500/30'
}

export function EventCardMobile({ event, onChat, onDelete, isPending }) {
  if (!event) return null
  const flag = getCountryFlag(event.country)
  const primaryImageUrl = event.source_articles?.find((a) => a.imageUrl)?.imageUrl

  return (
    <div className="sm:hidden">
      <div
        className={cn(
          'relative rounded-lg -m-4 mb-0 p-4',
          primaryImageUrl && 'min-h-[200px] flex flex-col justify-end'
        )}
        style={primaryImageUrl ? { backgroundImage: `url(${primaryImageUrl})` } : {}}
      >
        {primaryImageUrl && (
          <div className="absolute inset-0 bg-gradient-to-t from-black/90 via-black/60 to-transparent z-0 rounded-lg" />
        )}

        <div className="relative z-10">
          <div className="flex justify-between items-start gap-2 mb-2">
            <div className="flex items-center gap-2 min-w-0">
              <Badge
                className={`text-sm font-bold px-2 py-0.5 ${getRelevanceBadgeClass(
                  event.highest_relevance_score
                )}`}
              >
                {event.highest_relevance_score}
              </Badge>
            </div>
            <div className="flex flex-col items-center gap-1">
              <Button
                variant="ghost"
                size="icon"
                onClick={onChat}
                className="text-slate-300 hover:text-blue-400 bg-black/20 hover:bg-blue-500/20 h-8 w-8"
              >
                <MessageSquarePlus className="h-4 w-4" />
              </Button>
              <Button
                variant="ghost"
                size="icon"
                disabled={isPending}
                onClick={onDelete}
                className="text-slate-300 hover:text-red-400 bg-black/20 hover:bg-red-500/20 h-8 w-8"
              >
                <Trash2 className="h-4 w-4" />
              </Button>
            </div>
          </div>
          <h3
            className={cn(
              'font-serif font-bold text-lg line-clamp-3',
              primaryImageUrl ? 'text-white drop-shadow-lg' : 'text-slate-100'
            )}
          >
            <span className="text-xl mr-2 align-middle">{flag}</span>
            {event.synthesized_headline}
          </h3>
        </div>
      </div>

      <div
        className={cn(
          'pt-4',
          primaryImageUrl && 'bg-slate-900 -m-4 mt-0 p-4 rounded-b-xl'
        )}
      >
        <p className="text-sm text-slate-300 leading-relaxed">
          {event.synthesized_summary}
        </p>
        <div className="mt-4 pt-4 border-t border-slate-800/50 flex flex-col justify-between items-start gap-4">
          {event.key_individuals && event.key_individuals.length > 0 && (
            <div className="flex items-start gap-3 text-slate-400">
              <Users className="h-5 w-5 mt-0.5 shrink-0 text-slate-500" />
              <p className="text-sm font-medium text-slate-300">
                {event.key_individuals.length} Key Individual(s) Identified
              </p>
            </div>
          )}
          {event.ai_assessment_reason && (
            <p className="text-xs text-slate-500 italic sm:text-right flex-grow">
              {event.ai_assessment_reason}
            </p>
          )}
        </div>
      </div>
    </div>
  )
}

```

## 📄 src/components/client/swipe/SwipeToDelete.jsx
*Lines: 41, Size: 1.11 KB*

```jsx
// src/components/swipe/SwipeToDelete.jsx (version 1.0)
'use client'

import { motion, useMotionValue, useTransform } from 'framer-motion'
import { Trash2 } from 'lucide-react'

const SWIPE_THRESHOLD = -100 // pixels to swipe before delete is triggered

export function SwipeToDelete({ children, onDelete }) {
  const x = useMotionValue(0)

  const onDragEnd = (event, info) => {
    if (info.offset.x < SWIPE_THRESHOLD) {
      onDelete()
    }
  }

  const backgroundOpacity = useTransform(x, [-100, 0], [1, 0])
  const backgroundScale = useTransform(x, [-100, 0], [1, 0.8])

  return (
    <div className="relative w-full">
      <motion.div
        className="absolute inset-0 flex items-center justify-end pr-8 bg-red-600/80 pointer-events-none rounded-xl"
        style={{ opacity: backgroundOpacity, scale: backgroundScale }}
      >
        <Trash2 className="text-white h-6 w-6" />
      </motion.div>
      <motion.div
        drag="x"
        dragConstraints={{ left: 0, right: 0 }}
        onDragEnd={onDragEnd}
        style={{ x }}
        className="relative"
      >
        {children}
      </motion.div>
    </div>
  )
}

```

## 📄 src/components/shared/ConfirmationDialog.jsx
*Lines: 49, Size: 1.45 KB*

```jsx
// packages/ui/src/ConfirmationDialog.jsx (version 1.0.0)
'use client'

import React from 'react'
import {
  AlertDialog,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogCancel,
  Button
} from '../shared'
import { AlertTriangle, Loader2 } from 'lucide-react'

export function ConfirmationDialog({
  open,
  onOpenChange,
  onConfirm,
  isPending,
  title = 'Are you absolutely sure?',
  description,
  confirmText = 'Continue',
}) {
  return (
    <AlertDialog open={open} onOpenChange={onOpenChange}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <div className="flex items-center justify-center w-16 h-16 rounded-full bg-red-500/10 mx-auto mb-4">
            <AlertTriangle className="w-8 h-8 text-red-500" />
          </div>
          <AlertDialogTitle className="text-center text-xl">{title}</AlertDialogTitle>
          <AlertDialogDescription className="text-center">
            {description}
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter className="sm:justify-center">
          <AlertDialogCancel disabled={isPending}>Cancel</AlertDialogCancel>
          <Button variant="destructive" onClick={onConfirm} disabled={isPending}>
            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {confirmText}
          </Button>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  )
}

```

## 📄 src/components/shared/DataTableColumnHeader.jsx
*Lines: 69, Size: 2.25 KB*

```jsx
// packages/ui/src/DataTableColumnHeader.jsx (version 2.0.0 - With Filtering)
'use client'

import { ArrowDownIcon, ArrowUpIcon, ChevronsUpDownIcon } from 'lucide-react'
import { cn } from '@headlines/utils-shared'
import {
  Button,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
  Input,
} from '../shared'

export function DataTableColumnHeader({ column, title, className }) {
  if (!column.getCanSort() && !column.getCanFilter()) {
    return <div className={cn(className)}>{title}</div>
  }

  return (
    <div className={cn('flex items-center space-x-2', className)}>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            size="sm"
            className="-ml-3 h-8 data-[state=open]:bg-accent"
          >
            <span>{title}</span>
            {column.getIsSorted() === 'desc' ? (
              <ArrowDownIcon className="ml-2 h-4 w-4" />
            ) : column.getIsSorted() === 'asc' ? (
              <ArrowUpIcon className="ml-2 h-4 w-4" />
            ) : (
              <ChevronsUpDownIcon className="ml-2 h-4 w-4" />
            )}
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="start">
          {column.getCanSort() && (
            <>
              <DropdownMenuItem onClick={() => column.toggleSorting(false)}>
                <ArrowUpIcon className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                Asc
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => column.toggleSorting(true)}>
                <ArrowDownIcon className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                Desc
              </DropdownMenuItem>
              <DropdownMenuSeparator />
            </>
          )}
          {column.getCanFilter() && (
            <DropdownMenuItem onSelect={(e) => e.preventDefault()}>
              <Input
                placeholder={`Filter ${title}...`}
                value={column.getFilterValue() || ''}
                onChange={(event) => column.setFilterValue(event.target.value)}
                className="h-8"
              />
            </DropdownMenuItem>
          )}
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  )
}

```

## 📄 src/components/shared/EditableCell.jsx
*Lines: 103, Size: 3.16 KB*

```jsx
// packages/ui/src/EditableCell.jsx (version 1.0.0)
'use client'

import React, { useState, useEffect, useRef } from 'react'
import { Input, Textarea } from '../shared'
import { Edit } from 'lucide-react'
import { cn } from '@headlines/utils-shared'

export const EditableCell = ({
  initialValue,
  onSave,
  placeholder = 'N/A',
  type = 'text',
  allowWrap = false,
  useTextarea = false,
}) => {
  const [isEditing, setIsEditing] = useState(false)
  // DEFINITIVE FIX: Handle both array and primitive initial values.
  const [value, setValue] = useState(
    Array.isArray(initialValue) ? initialValue.join('\n') : initialValue || ''
  )
  const inputRef = useRef(null)
  const wrapperRef = useRef(null)

  const handleSave = () => {
    // DEFINITIVE FIX: Correctly format the final value based on the initial data type.
    const finalValue = Array.isArray(initialValue)
      ? value
          .split('\n')
          .map((s) => s.trim())
          .filter(Boolean)
      : type === 'number'
        ? value
          ? Number(value)
          : null
        : value.trim()

    const originalValue =
      initialValue || (Array.isArray(initialValue) ? [] : type === 'number' ? null : '')

    // A more robust change check for arrays and strings/numbers
    if (JSON.stringify(finalValue) !== JSON.stringify(originalValue)) {
      onSave(finalValue)
    }
    setIsEditing(false)
  }

  useEffect(() => {
    function handleClickOutside(event) {
      if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {
        if (isEditing) {
          handleSave()
        }
      }
    }

    if (isEditing) {
      inputRef.current?.focus()
      document.addEventListener('mousedown', handleClickOutside)
      return () => {
        document.removeEventListener('mousedown', handleClickOutside)
      }
    }
  }, [isEditing, value]) // value is needed to ensure handleSave has the latest state

  if (isEditing) {
    const Component = useTextarea ? Textarea : Input
    return (
      <div ref={wrapperRef}>
        <Component
          ref={inputRef}
          value={value}
          onChange={(e) => setValue(e.target.value)}
          onKeyDown={(e) => {
            if (e.key === 'Enter' && !e.shiftKey && !useTextarea) handleSave()
          }}
          className="h-auto bg-secondary"
          rows={useTextarea ? 3 : 1}
        />
      </div>
    )
  }

  // DEFINITIVE FIX: Correctly generate the display value from an array or primitive.
  let displayValue = Array.isArray(initialValue) ? initialValue.join(' ') : initialValue
  if (type === 'number' && initialValue) displayValue = `$${initialValue}M`
  if (!displayValue || (Array.isArray(initialValue) && initialValue.length === 0)) {
    displayValue = <span className="text-muted-foreground italic">{placeholder}</span>
  }

  return (
    <div
      className="group flex items-center cursor-pointer p-2 -m-2 rounded-md hover:bg-secondary/50"
      onClick={() => setIsEditing(true)}
    >
      <span className={cn(!allowWrap && 'truncate', allowWrap && 'whitespace-normal')}>
        {displayValue}
      </span>
      <Edit className="h-3 w-3 ml-auto text-muted-foreground opacity-0 group-hover:opacity-100 flex-shrink-0" />
    </div>
  )
}

```

## 📄 src/components/shared/ExportButton.jsx
*Lines: 61, Size: 1.51 KB*

```jsx
// packages/ui/src/ExportButton.jsx (version 2.0.0)
'use client'

import { useState } from 'react'
import {
  Button,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '../shared'
import { Download, Loader2 } from 'lucide-react'
import { toast } from 'sonner'

export function ExportButton({ hasData, onExport }) {
  const [isLoading, setIsLoading] = useState(false)

  const handleExportClick = async (format) => {
    if (!hasData) {
      toast.info('No data available to export.')
      return
    }

    if (typeof onExport !== 'function') {
      toast.error('Export action is not configured correctly.')
      return
    }

    setIsLoading(true)
    const result = await onExport(format)
    setIsLoading(false)

    if (result?.success) {
      toast.success('Your download will begin shortly.')
    }
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button disabled={isLoading || !hasData}>
          {isLoading ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Download className="mr-2 h-4 w-4" />
          )}
          Export
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => handleExportClick('csv')}>
          Export as CSV
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => handleExportClick('xlsx')}>
          Export as Excel (.xls)
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

```

## 📄 src/components/shared/LoadingOverlay.jsx
*Lines: 34, Size: 1.16 KB*

```jsx
// packages/ui/src/LoadingOverlay.jsx (version 1.3.0)
'use client'

import { AnimatePresence, motion } from 'framer-motion'
import { PremiumSpinner } from './PremiumSpinner'

/**
 * A persistent overlay that displays a premium spinner.
 * It uses AnimatePresence to gracefully fade in and out on top of content.
 *
 * @param {object} props
 * @param {boolean} props.isLoading - Controls the visibility of the overlay.
 * @param {string} [props.text] - Optional text to display below the spinner.
 */
export function LoadingOverlay({ isLoading, text }) {
  return (
    <AnimatePresence>
      {isLoading && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.2 }}
          // CRITICAL FIX: High z-index ensures it's on top of everything inside its relative parent.
          className="absolute inset-0 z-30 flex flex-col items-center justify-center bg-background/60 backdrop-blur-sm rounded-lg"
        >
          <PremiumSpinner />
          {text && <p className="mt-4 text-base font-medium text-slate-200">{text}</p>}
        </motion.div>
      )}
    </AnimatePresence>
  )
}

```

## 📄 src/components/shared/PremiumSpinner.jsx
*Lines: 83, Size: 2.35 KB*

```jsx
// packages/ui/src/PremiumSpinner.jsx (version 1.1.0)
'use client'

import { motion } from 'framer-motion'

/**
 * A visually rich, multi-layered, animated spinner component.
 * It features rotating conic gradients and a dynamic sparkle effect.
 */
export function PremiumSpinner({ size = 80 }) {
  const sparkleCount = 8
  const sparkleRadius = size * 1.2

  return (
    <div
      className="relative flex items-center justify-center"
      style={{ width: size, height: size }}
    >
      {/* Sparkles */}
      {[...Array(sparkleCount)].map((_, i) => (
        <motion.div
          key={i}
          className="absolute rounded-full bg-cyan-300"
          style={{
            width: size / 20,
            height: size / 20,
            left: '50%',
            top: '50%',
            translateX: '-50%',
            translateY: '-50%',
          }}
          initial={{
            transform: `rotate(${
              (360 / sparkleCount) * i
            }deg) translateY(${sparkleRadius}px) scale(0)`,
          }}
          animate={{
            scale: [0, 1, 0],
            opacity: [0, 1, 0],
          }}
          transition={{
            duration: 1.5,
            repeat: Infinity,
            repeatType: 'loop',
            ease: 'easeInOut',
            delay: i * 0.1,
          }}
        />
      ))}

      {/* Outer Ring */}
      <motion.div
        className="absolute inset-0 rounded-full"
        style={{
          background:
            'conic-gradient(from 90deg, transparent 0%, #06b6d4 50%, transparent 100%)',
          maskImage: 'radial-gradient(circle at center, transparent 75%, black 76%)',
        }}
        animate={{ rotate: 360 }}
        transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}
      />

      {/* Inner Ring */}
      <motion.div
        className="absolute inset-[15%] rounded-full"
        style={{
          background:
            'conic-gradient(from -90deg, transparent 0%, #a855f7 50%, transparent 100%)',
          maskImage: 'radial-gradient(circle at center, transparent 75%, black 76%)',
        }}
        animate={{ rotate: -360 }}
        transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}
      />

      {/* Center Glow */}
      <div
        className="absolute inset-[35%] rounded-full bg-blue-500/20 blur-lg"
        style={{ animation: 'pulse 2s infinite ease-in-out' }}
      ></div>
    </div>
  )
}

```

## 📄 src/components/shared/Skeleton.jsx
*Lines: 7, Size: 216 Bytes*

```jsx
'use client'
import { cn } from '@headlines/utils-shared'
function Skeleton({ className, ...props }) {
  return <div className={cn('animate-pulse rounded-md bg-muted', className)} {...props} />
}
export { Skeleton }

```

## 📄 src/components/shared/SkeletonCard.jsx
*Lines: 30, Size: 1.12 KB*

```jsx
// packages/ui/src/SkeletonCard.jsx
'use client'

import { Card, CardContent } from '../shared'
// DEFINITIVE FIX: Use the package name for imports between packages.
import { cn } from '@headlines/utils-shared'

export const SkeletonCard = ({ className }) => {
  return (
    <Card className={cn('bg-slate-900/50 border-slate-700/50 animate-pulse', className)}>
      <CardContent className="p-6">
        <div className="flex items-start gap-6">
          {/* Left Column Skeleton */}
          <div className="flex flex-col items-center shrink-0">
            <div className="h-10 w-14 bg-slate-700 rounded-md"></div>
            <div className="h-4 w-10 bg-slate-700 rounded mt-1"></div>
          </div>
          {/* Right Column Skeleton */}
          <div className="flex-grow min-w-0 space-y-3">
            <div className="h-6 w-3/4 bg-slate-700 rounded"></div>
            <div className="h-4 w-full bg-slate-700 rounded"></div>
            <div className="h-4 w-5/6 bg-slate-700 rounded"></div>
            <div className="h-4 w-1/3 bg-slate-700 rounded mt-2"></div>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}

```

## 📄 src/components/shared/ViewHeader.jsx
*Lines: 149, Size: 5.2 KB*

```jsx
// packages/ui/src/ViewHeader.jsx
'use client'

import { useRouter, useSearchParams, usePathname } from 'next/navigation'
import { useState, useEffect, useMemo } from 'react'
// DEFINITIVE FIX: Import hooks from the dedicated '/hooks' entry point.
import { useDebounce } from '@/hooks'
import {
  Input,
  Button,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  ScrollArea,
} from '../shared'
import { Search, Clock, BarChart, ArrowDownUp, Mail, Star, X } from 'lucide-react'
import { cn } from '@headlines/utils-shared'

const iconMap = { clock: Clock, relevance: BarChart, size: ArrowDownUp }

export function ViewHeader({
  title,
  sortOptions,
  allCountries = [],
  globalCountryFilter = [],
  viewCountry,
  onViewCountryChange,
}) {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  const currentSort = searchParams.get('sort') || 'date_desc'
  const [searchTerm, setSearchTerm] = useState(searchParams.get('q') || '')
  const debouncedSearchTerm = useDebounce(searchTerm, 500)

  useEffect(() => {
    const params = new URLSearchParams(searchParams.toString())
    if (debouncedSearchTerm) params.set('q', debouncedSearchTerm)
    else params.delete('q')
    router.replace(`?${params.toString()}`, { scroll: false })
  }, [debouncedSearchTerm, router, searchParams])

  const handleUrlParamChange = (key, value) => {
    const params = new URLSearchParams(searchParams.toString())
    if (!value || value === 'all' || value === false) params.delete(key)
    else params.set(key, value)
    params.set('page', '1')
    router.push(`${pathname}?${params.toString()}`, { scroll: false })
  }

  const handleClearSearch = () => setSearchTerm('')

  const withEmailOnly = searchParams.get('withEmail') === 'true'
  const favoritesOnly = searchParams.get('favorites') === 'true'

  const displayedCountries = useMemo(() => {
    if (globalCountryFilter.length > 0) {
      const globalFilterSet = new Set(globalCountryFilter)
      return allCountries.filter((c) => globalFilterSet.has(c.name))
    }
    return allCountries
  }, [allCountries, globalCountryFilter])

  return (
    <div className="flex flex-col items-center justify-center text-center mb-8 space-y-6 max-w-5xl mx-auto">
      <div>
        <h2 className="text-3xl font-bold tracking-tight text-slate-100">{title}</h2>
      </div>
      <div className="w-full flex flex-col sm:flex-row items-center gap-4">
        <div className="flex w-full sm:w-auto items-center gap-2">
          <Select value={viewCountry} onValueChange={onViewCountryChange}>
            <SelectTrigger className="w-full sm:w-[200px] h-12 bg-slate-900/80 border-slate-700">
              <SelectValue placeholder="View Country..." />
            </SelectTrigger>
            <SelectContent>
              <ScrollArea className="h-[250px]">
                <SelectItem value="all">All Selected Countries</SelectItem>
                {displayedCountries.map((country) => (
                  <SelectItem key={country.name} value={country.name}>
                    {country.name} ({country.count})
                  </SelectItem>
                ))}
              </ScrollArea>
            </SelectContent>
          </Select>
        </div>
        <div className="relative flex-grow w-full">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-slate-500" />
          <Input
            id="search"
            placeholder="Search by name, company..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="bg-slate-900/80 border-slate-700 h-12 pl-10 pr-10"
          />
          {searchTerm && (
            <Button
              variant="ghost"
              size="icon"
              className="absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8 rounded-full"
              onClick={handleClearSearch}
            >
              <X className="h-4 w-4" />
            </Button>
          )}
        </div>
        <div className="flex items-center gap-2">
          <TooltipProvider>
            {sortOptions.map((option) => {
              const IconComponent = iconMap[option.icon] || Clock
              return (
                <Tooltip key={option.value}>
                  <TooltipTrigger asChild>
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={() =>
                        handleUrlParamChange(
                          'sort',
                          option.value === 'date_desc' ? null : option.value
                        )
                      }
                      className={cn(
                        'h-12 w-12',
                        currentSort === option.value && 'bg-blue-500/20 text-blue-300'
                      )}
                      aria-label={option.tooltip}
                    >
                      <IconComponent className="h-5 w-5" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>{option.tooltip}</TooltipContent>
                </Tooltip>
              )
            })}
          </TooltipProvider>
        </div>
      </div>
    </div>
  )
}

```

## 📄 src/components/shared/data-table.jsx
*Lines: 195, Size: 5.44 KB*

```jsx
// packages/ui/src/data-table.jsx (version 3.1.0 - Fully Controlled & Responsive)
'use client'

import React, { useState, useEffect } from 'react'
import { flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
  Input,
  Button,
  Checkbox,
} from './elements'
import { LoadingOverlay } from './LoadingOverlay'

const addSelectionColumn = (columns) => [
  {
    id: 'select',
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected() ||
          (table.getIsSomePageRowsSelected() && 'indeterminate')
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
    size: 40,
  },
  ...columns,
]

export function DataTable({
  columns,
  data,
  isLoading,
  page,
  setPage,
  total,
  sorting,
  setSorting,
  columnFilters = [],
  setColumnFilters = () => {},
  enableRowSelection = false,
  onRowSelectionChange,
  filterColumn,
  filterPlaceholder,
  enableColumnResizing,
  tableProps,
}) {
  const [rowSelection, setRowSelection] = useState({})

  const tableColumns = React.useMemo(
    () => (enableRowSelection ? addSelectionColumn(columns) : columns),
    [enableRowSelection, columns]
  )

  const pageCount = total ? Math.ceil(total / 50) : 0

  const table = useReactTable({
    data: data || [],
    columns: tableColumns,
    pageCount,
    state: {
      sorting,
      columnFilters,
      rowSelection,
      pagination: {
        pageIndex: page - 1,
        pageSize: 50,
      },
    },
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    onRowSelectionChange: setRowSelection,
    getCoreRowModel: getCoreRowModel(),
    manualPagination: true,
    manualSorting: true,
    manualFiltering: true,
    enableColumnResizing,
  })

  useEffect(() => {
    if (onRowSelectionChange) {
      onRowSelectionChange(
        table.getSelectedRowModel().flatRows.map((row) => row.original)
      )
    }
  }, [rowSelection, onRowSelectionChange, table])

  const handleFilterChange = (value) => {
    if (!filterColumn) return
    const currentFilter = columnFilters.find((f) => f.id === filterColumn)
    let newFilters = columnFilters.filter((f) => f.id !== filterColumn)
    if (value) {
      newFilters.push({ id: filterColumn, value })
    }
    setColumnFilters(newFilters)
  }

  const filterValue = columnFilters.find((f) => f.id === filterColumn)?.value || ''

  return (
    <div className="relative isolate flex flex-col h-full">
      <LoadingOverlay isLoading={isLoading && !(data?.length > 0)} />
      <div className="flex-shrink-0 flex items-center justify-between py-4">
        {filterColumn && (
          <Input
            placeholder={filterPlaceholder}
            value={filterValue}
            onChange={(event) => handleFilterChange(event.target.value)}
            className="max-w-sm"
          />
        )}
        <div className="flex items-center justify-end space-x-2">
          <span className="text-sm text-muted-foreground">
            Page {page} of {pageCount || 1}
          </span>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setPage((p) => p - 1)}
            disabled={page <= 1}
          >
            Previous
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setPage((p) => p + 1)}
            disabled={page >= pageCount}
          >
            Next
          </Button>
        </div>
      </div>
      <div className="flex-grow rounded-md border overflow-auto">
        <Table {...tableProps}>
          <TableHeader className="sticky top-0 bg-background z-10">
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead
                    key={header.id}
                    style={{
                      width:
                        header.getSize() !== 150 ? `${header.getSize()}px` : undefined,
                    }}
                  >
                    {header.isPlaceholder
                      ? null
                      : flexRender(header.column.columnDef.header, header.getContext())}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
                      {flexRender(cell.column.columnDef.cell, cell.getContext())}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={tableColumns.length} className="h-24 text-center">
                  {isLoading ? 'Loading...' : 'No results.'}
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
    </div>
  )
}

```

## 📄 src/components/shared/elements/accordion.jsx
*Lines: 41, Size: 1.62 KB*

```jsx
'use client'
import * as React from 'react'
import * as AccordionPrimitive from '@radix-ui/react-accordion'
import { ChevronDown } from 'lucide-react'
import { cn } from '@headlines/utils-shared'
const Accordion = AccordionPrimitive.Root
const AccordionItem = React.forwardRef(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item ref={ref} className={cn('border-b', className)} {...props} />
))
AccordionItem.displayName = 'AccordionItem'
const AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    {' '}
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180',
        className
      )}
      {...props}
    >
      {' '}
      {children}{' '}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />{' '}
    </AccordionPrimitive.Trigger>{' '}
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName
const AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    {' '}
    <div className={cn('pb-4 pt-0', className)}>{children}</div>{' '}
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName
export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

```

## 📄 src/components/shared/elements/alert-dialog.jsx
*Lines: 108, Size: 3.52 KB*

```jsx
// packages/ui/src/components/alert-dialog.jsx (version 1.3.0 - Definitive Slot Fix)
'use client'

import * as React from 'react'
import * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog'
import { cn } from '@headlines/utils-shared'
import { buttonVariants } from './button'

const AlertDialog = AlertDialogPrimitive.Root
const AlertDialogTrigger = AlertDialogPrimitive.Trigger
const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({ className, ...props }) => (
  <div
    className={cn('flex flex-col space-y-2 text-center sm:text-left', className)}
    {...props}
  />
)
AlertDialogHeader.displayName = 'AlertDialogHeader'

const AlertDialogFooter = ({ className, ...props }) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = 'AlertDialogFooter'

const AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold', className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
AlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(buttonVariants({ variant: 'outline' }), 'mt-2 sm:mt-0', className)}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

```

## 📄 src/components/shared/elements/badge.jsx
*Lines: 31, Size: 992 Bytes*

```jsx
import * as React from 'react'
import { cva } from 'class-variance-authority'

import { cn } from '@headlines/utils-shared'

const badgeVariants = cva(
  'inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
  {
    variants: {
      variant: {
        default:
          'border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80',
        secondary:
          'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',
        destructive:
          'border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80',
        outline: 'text-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
)

function Badge({ className, variant, ...props }) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />
}

export { Badge, badgeVariants }

```

## 📄 src/components/shared/elements/button.jsx
*Lines: 50, Size: 1.63 KB*

```jsx
// src/components/ui/button.jsx (version 1.1)
import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cva } from 'class-variance-authority'

import { cn } from '@headlines/utils-shared'

const buttonVariants = cva(
  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline:
          'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
)

const Button = React.forwardRef(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button'
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = 'Button'

export { Button, buttonVariants }

```

## 📄 src/components/shared/elements/card.jsx
*Lines: 45, Size: 1.44 KB*

```jsx
// src/components/ui/card.jsx (version 1.1)
import * as React from 'react'

import { cn } from '@headlines/utils-shared'

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('rounded-lg border bg-card text-card-foreground shadow-sm', className)}
    {...props}
  />
))
Card.displayName = 'Card'

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('flex flex-col space-y-1.5 p-6', className)} {...props} />
))
CardHeader.displayName = 'CardHeader'

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn('text-2xl font-semibold leading-none tracking-tight', className)}
    {...props}
  />
))
CardTitle.displayName = 'CardTitle'

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <p ref={ref} className={cn('text-sm text-muted-foreground', className)} {...props} />
))
CardDescription.displayName = 'CardDescription'

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
))
CardContent.displayName = 'CardContent'

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('flex items-center p-6 pt-0', className)} {...props} />
))
CardFooter.displayName = 'CardFooter'

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

```

## 📄 src/components/shared/elements/checkbox.jsx
*Lines: 26, Size: 1009 Bytes*

```jsx
// src/components/ui/checkbox.jsx (version 1.0)
'use client'
import * as React from 'react'
import * as CheckboxPrimitive from '@radix-ui/react-checkbox'
import { Check } from 'lucide-react'

import { cn } from '@headlines/utils-shared'
const Checkbox = React.forwardRef(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn('flex items-center justify-center text-current')}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName
export { Checkbox }

```

## 📄 src/components/shared/elements/command.jsx
*Lines: 122, Size: 3.83 KB*

```jsx
// packages/ui/src/components/command.jsx (version 1.2.0 - Definitive Slot Fix)
'use client'

import * as React from 'react'
import { Dialog, DialogContent } from './dialog'
import { Search } from 'lucide-react'
import { Command as CommandPrimitive } from 'cmdk'
import { cn } from '@headlines/utils-shared'

const Command = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        'flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef((props, ref) => (
  <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 h-px bg-border', className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50',
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({ className, ...props }) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest text-muted-foreground', className)}
      {...props}
    />
  )
}
CommandShortcut.displayName = 'CommandShortcut'

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

```

## 📄 src/components/shared/elements/dialog.jsx
*Lines: 97, Size: 3.22 KB*

```jsx
// packages/ui/src/components/dialog.jsx (version 2.0.0 - Definitive Slot Fix)
'use client'

import * as React from 'react'
import * as DialogPrimitive from '@radix-ui/react-dialog'
import { X } from 'lucide-react'

import { cn } from '@headlines/utils-shared'

const Dialog = DialogPrimitive.Root
const DialogTrigger = DialogPrimitive.Trigger
const DialogPortal = DialogPrimitive.Portal
const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({ className, ...props }) => (
  <div
    className={cn('flex flex-col space-y-1.5 text-center sm:text-left', className)}
    {...props}
  />
)
DialogHeader.displayName = 'DialogHeader'

const DialogFooter = ({ className, ...props }) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = 'DialogFooter'

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold leading-none tracking-tight', className)}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
  DialogPortal,
  DialogOverlay,
  DialogClose,
}

```

## 📄 src/components/shared/elements/dropdown-menu.jsx
*Lines: 166, Size: 6.21 KB*

```jsx
// packages/ui/src/components/dropdown-menu.jsx (version 3.0.0 - Definitive Slot Fix)
'use client'
import * as React from 'react'
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'
import { Check, ChevronRight, Circle } from 'lucide-react'
import { cn } from '@headlines/utils-shared'

const DropdownMenu = DropdownMenuPrimitive.Root
const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger
const DropdownMenuGroup = DropdownMenuPrimitive.Group
const DropdownMenuPortal = DropdownMenuPrimitive.Portal
const DropdownMenuSub = DropdownMenuPrimitive.Sub
const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef(
  ({ className, inset, children, ...props }, ref) => (
    <DropdownMenuPrimitive.SubTrigger
      ref={ref}
      className={cn(
        'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',
        inset && 'pl-8',
        className
      )}
      {...props}
    >
      {children}
      <ChevronRight className="ml-auto h-4 w-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
)
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef(
  ({ className, sideOffset = 4, ...props }, ref) => (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        ref={ref}
        sideOffset={sideOffset}
        className={cn(
          'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md',
          'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
)
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef(
  ({ className, children, checked, ...props }, ref) => (
    <DropdownMenuPrimitive.CheckboxItem
      ref={ref}
      className={cn(
        'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          {' '}
          <Check className="h-4 w-4" />{' '}
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
)
DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef(
  ({ className, children, ...props }, ref) => (
    <DropdownMenuPrimitive.RadioItem
      ref={ref}
      className={cn(
        'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
        className
      )}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          {' '}
          <Circle className="h-2 w-2 fill-current" />{' '}
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
)
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn('px-2 py-1.5 text-sm font-semibold', inset && 'pl-8', className)}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({ className, ...props }) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest opacity-60', className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = 'DropdownMenuShortcut'

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

```

## 📄 src/components/shared/elements/index.js
*Lines: 23, Size: 572 Bytes*

```javascript
export * from './accordion'
export * from './alert-dialog'
export * from './badge'
export * from './button'
export * from './card'
export * from './checkbox'
export * from './command'
export * from './dialog'
export * from './dropdown-menu'
export * from './input'
export * from './label'
export * from './popover'
export * from './scroll-area'
export * from './select'
export * from './separator'
export * from './sheet'
export * from './sonner'
export * from './switch'
export * from './table'
export * from './tabs'
export * from './textarea'
export * from './tooltip'

```

## 📄 src/components/shared/elements/input.jsx
*Lines: 22, Size: 948 Bytes*

```jsx
import * as React from 'react'

import { cn } from '@headlines/utils-shared'

function Input({ className, type, ...props }) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
        'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',
        'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',
        className
      )}
      {...props}
    />
  )
}

export { Input }

```

## 📄 src/components/shared/elements/label.jsx
*Lines: 20, Size: 595 Bytes*

```jsx
// src/components/ui/label.jsx (version 1.1)
'use client'

import * as React from 'react'
import * as LabelPrimitive from '@radix-ui/react-label'
import { cva } from 'class-variance-authority'

import { cn } from '@headlines/utils-shared'

const labelVariants = cva(
  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'
)

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

```

## 📄 src/components/shared/elements/popover.jsx
*Lines: 32, Size: 1.21 KB*

```jsx
// packages/ui/src/components/popover.jsx (version 2.0.0 - Definitive Slot Fix)
'use client'

import * as React from 'react'
import * as PopoverPrimitive from '@radix-ui/react-popover'

import { cn } from '@headlines/utils-shared'

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef(
  ({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        ref={ref}
        align={align}
        sideOffset={sideOffset}
        className={cn(
          'z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
)
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

```

## 📄 src/components/shared/elements/scroll-area.jsx
*Lines: 52, Size: 1.46 KB*

```jsx
// packages/ui/src/components/scroll-area.jsx (version 1.1.0)
'use client'

import * as React from 'react'
import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area'

import { cn } from '@headlines/utils-shared'

function ScrollArea({ className, children, ...props }) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn('relative overflow-hidden', className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="h-full w-full rounded-[inherit]"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({ className, orientation = 'vertical', ...props }) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        'flex touch-none select-none transition-colors',
        orientation === 'vertical' &&
          'h-full w-2.5 border-l border-l-transparent p-[1px]',
        orientation === 'horizontal' &&
          'h-2.5 flex-col border-t border-t-transparent p-[1px]',
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="relative flex-1 rounded-full bg-border"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }

```

## 📄 src/components/shared/elements/select.jsx
*Lines: 146, Size: 5.46 KB*

```jsx
'use client'

import * as React from 'react'
import * as SelectPrimitive from '@radix-ui/react-select'
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from 'lucide-react'

import { cn } from '@headlines/utils-shared'

function Select({ ...props }) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({ ...props }) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({ ...props }) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({ className, size = 'default', children, ...props }) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({ className, children, position = 'popper', ...props }) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md',
          position === 'popper' &&
            'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            'p-1',
            position === 'popper' &&
              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1'
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({ className, ...props }) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn('text-muted-foreground px-2 py-1.5 text-xs', className)}
      {...props}
    />
  )
}

function SelectItem({ className, children, ...props }) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({ className, ...props }) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn('bg-border pointer-events-none -mx-1 my-1 h-px', className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({ className, ...props }) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn('flex cursor-default items-center justify-center py-1', className)}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({ className, ...props }) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn('flex cursor-default items-center justify-center py-1', className)}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}

```

## 📄 src/components/shared/elements/separator.jsx
*Lines: 29, Size: 657 Bytes*

```jsx
'use client'

import * as React from 'react'
import * as SeparatorPrimitive from '@radix-ui/react-separator'

import { cn } from '@headlines/utils-shared'

function Separator({
  className,
  orientation = 'horizontal',
  decorative = true,
  ...props
}) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        'bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px',
        className
      )}
      {...props}
    />
  )
}

export { Separator }

```

## 📄 src/components/shared/elements/sheet.jsx
*Lines: 156, Size: 4.28 KB*

```jsx
'use client'

import * as React from 'react'
import * as SheetPrimitive from '@radix-ui/react-dialog'
import { cva } from 'class-variance-authority'
import { X } from 'lucide-react'
import { cn } from '@headlines/utils-shared'

// Base components from Radix
const Sheet = SheetPrimitive.Root
const SheetTrigger = SheetPrimitive.Trigger
const SheetClose = SheetPrimitive.Close
const SheetPortal = SheetPrimitive.Portal

// Sheet overlay component with proper forwardRef
const SheetOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    ref={ref}
    className={cn(
      'fixed inset-0 z-50 bg-black/80',
      'data-[state=open]:animate-in data-[state=closed]:animate-out',
      'data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

// Sheet content variants using CVA
const sheetVariants = cva(
  [
    'fixed z-50 gap-4 bg-background p-6 shadow-lg',
    'transition ease-in-out',
    'data-[state=open]:animate-in data-[state=closed]:animate-out',
    'data-[state=closed]:duration-300 data-[state=open]:duration-500',
  ],
  {
    variants: {
      side: {
        top: [
          'inset-x-0 top-0 border-b',
          'data-[state=closed]:slide-out-to-top',
          'data-[state=open]:slide-in-from-top',
        ],
        bottom: [
          'inset-x-0 bottom-0 border-t',
          'data-[state=closed]:slide-out-to-bottom',
          'data-[state=open]:slide-in-from-bottom',
        ],
        left: [
          'inset-y-0 left-0 h-full w-3/4 border-r',
          'data-[state=closed]:slide-out-to-left',
          'data-[state=open]:slide-in-from-left',
          'sm:max-w-sm',
        ],
        right: [
          'inset-y-0 right-0 h-full w-3/4 border-l',
          'data-[state=closed]:slide-out-to-right',
          'data-[state=open]:slide-in-from-right',
          'sm:max-w-sm',
        ],
      },
    },
    defaultVariants: {
      side: 'right',
    },
  }
)

// Main sheet content component - Fixed to handle single child requirement
const SheetContent = React.forwardRef(
  ({ side = 'right', className, children, ...props }, ref) => (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        ref={ref}
        className={cn(sheetVariants({ side }), className)}
        {...props}
      >
        <SheetPrimitive.Close
          className={cn(
            'absolute right-4 top-4 rounded-sm opacity-70 z-50',
            'ring-offset-background transition-opacity',
            'hover:opacity-100 focus:outline-none',
            'focus:ring-2 focus:ring-ring focus:ring-offset-2',
            'disabled:pointer-events-none',
            'data-[state=open]:bg-secondary'
          )}
        >
          <X className="h-4 w-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
        {children}
      </SheetPrimitive.Content>
    </SheetPortal>
  )
)
SheetContent.displayName = SheetPrimitive.Content.displayName

// Sheet header component
const SheetHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex flex-col space-y-2 text-center sm:text-left', className)}
    {...props}
  />
))
SheetHeader.displayName = 'SheetHeader'

// Sheet footer component
const SheetFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
))
SheetFooter.displayName = 'SheetFooter'

// Sheet title component
const SheetTitle = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold text-foreground', className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

// Sheet description component
const SheetDescription = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

```

## 📄 src/components/shared/elements/sonner.jsx
*Lines: 39, Size: 1.02 KB*

```jsx
'use client'
import { useTheme } from 'next-themes'
import { Toaster as Sonner } from 'sonner'
import { useEffect, useState } from 'react'

const Toaster = ({ ...props }) => {
  const { theme = 'system' } = useTheme()
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  // Don't render on server or until mounted to avoid hydration mismatch
  if (!mounted) {
    return null
  }

  return (
    <Sonner
      theme={theme}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            'group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg',
          description: 'group-[.toast]:text-muted-foreground',
          actionButton:
            'group-[.toast]:bg-primary group-[.toast]:text-primary-foreground',
          cancelButton: 'group-[.toast]:bg-muted group-[.toast]:text-muted-foreground',
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

```

## 📄 src/components/shared/elements/switch.jsx
*Lines: 25, Size: 1.07 KB*

```jsx
// src/components/ui/switch.jsx (version 1.0)
'use client'
import * as React from 'react'
import * as SwitchPrimitives from '@radix-ui/react-switch'

import { cn } from '@headlines/utils-shared'
const Switch = React.forwardRef(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      'peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input',
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        'pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0'
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName
export { Switch }

```

## 📄 src/components/shared/elements/table.jsx
*Lines: 88, Size: 2.19 KB*

```jsx
// src/components/ui/table.jsx (version 1.1)
import * as React from 'react'

import { cn } from '@headlines/utils-shared'

const Table = React.forwardRef(({ className, ...props }, ref) => (
  // CORRECTIVE ACTION: Removed the wrapping div with `overflow-auto`.
  // The `w-full` class is applied directly to the table.
  <table
    ref={ref}
    className={cn('w-full caption-bottom text-sm', className)}
    {...props}
  />
))
Table.displayName = 'Table'

const TableHeader = React.forwardRef(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn('[&_tr]:border-b', className)} {...props} />
))
TableHeader.displayName = 'TableHeader'

const TableBody = React.forwardRef(({ className, ...props }, ref) => (
  <tbody ref={ref} className={cn('[&_tr:last-child]:border-0', className)} {...props} />
))
TableBody.displayName = 'TableBody'

const TableFooter = React.forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn('bg-muted/50 font-medium [&>tr]:last:border-b-0', className)}
    {...props}
  />
))
TableFooter.displayName = 'TableFooter'

const TableRow = React.forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',
      className
    )}
    {...props}
  />
))
TableRow.displayName = 'TableRow'

const TableHead = React.forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      'h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0',
      className
    )}
    {...props}
  />
))
TableHead.displayName = 'TableHead'

const TableCell = React.forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', className)}
    {...props}
  />
))
TableCell.displayName = 'TableCell'

const TableCaption = React.forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn('mt-4 text-sm text-muted-foreground', className)}
    {...props}
  />
))
TableCaption.displayName = 'TableCaption'

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

```

## 📄 src/components/shared/elements/tabs.jsx
*Lines: 47, Size: 1.52 KB*

```jsx
'use client'

import * as React from 'react'
import * as TabsPrimitive from '@radix-ui/react-tabs'

import { cn } from '@headlines/utils-shared'

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      'inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground',
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      'inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow',
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      'mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

```

## 📄 src/components/shared/elements/textarea.jsx
*Lines: 20, Size: 600 Bytes*

```jsx
import * as React from 'react'

import { cn } from '@headlines/utils-shared'

const Textarea = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        'flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = 'Textarea'

export { Textarea }

```

## 📄 src/components/shared/elements/tooltip.jsx
*Lines: 31, Size: 1.13 KB*

```jsx
// packages/ui/src/components/tooltip.jsx (version 2.0.0 - Definitive Slot Fix)
'use client'

import * as React from 'react'
import * as TooltipPrimitive from '@radix-ui/react-tooltip'

import { cn } from '@headlines/utils-shared'

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef(
  ({ className, sideOffset = 4, ...props }, ref) => (
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        'z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  )
)
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

```

## 📄 src/components/shared/index.js
*Lines: 137, Size: 3.15 KB*

```javascript
// packages/ui/src/index.js
'use client'

// Components from ./components directory
export {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from './elements/accordion'
export {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogOverlay,
  AlertDialogPortal,
  AlertDialogTitle,
  AlertDialogTrigger,
} from './elements/alert-dialog'
export { Badge, badgeVariants } from './elements/badge'
export { Button, buttonVariants } from './elements/button'
export {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from './elements/card'
export { Checkbox } from './elements/checkbox'
export {
  Command,
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
  CommandShortcut,
} from './elements/command'
export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
} from './elements/dialog'
export {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuPortal,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuTrigger,
} from './elements/dropdown-menu'
export { Input } from './elements/input'
export { Label } from './elements/label'
export { Popover, PopoverContent, PopoverTrigger } from './elements/popover'
export { ScrollArea, ScrollBar } from './elements/scroll-area'
export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
} from './elements/select'
export { Separator } from './elements/separator'
export {
  Sheet,
  SheetClose,
  SheetContent,
  SheetDescription,
  SheetFooter,
  SheetHeader,
  SheetOverlay,
  SheetPortal,
  SheetTitle,
  SheetTrigger,
} from './elements/sheet'
export { Toaster } from './elements/sonner'
export { Switch } from './elements/switch'
export {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableFooter,
  TableHead,
  TableHeader,
  TableRow,
} from './elements/table'
export { Tabs, TabsContent, TabsList, TabsTrigger } from './elements/tabs'
export { Textarea } from './elements/textarea'
export {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from './elements/tooltip'

// Components from ./src root
export { ConfirmationDialog } from './ConfirmationDialog.jsx'
export { DataTable } from './data-table.jsx'
export { DataTableColumnHeader } from './DataTableColumnHeader.jsx'
export { EditableCell } from './EditableCell.jsx'
export { ExportButton } from './ExportButton.jsx'
export { LoadingOverlay } from './LoadingOverlay.jsx'
export { PageHeader } from './page-header.jsx'
export { PremiumSpinner } from './PremiumSpinner.jsx'
export { Skeleton } from './Skeleton.jsx'
export { SkeletonCard } from './SkeletonCard.jsx'
export { ViewHeader } from './ViewHeader.jsx'

```

## 📄 src/components/shared/page-header.jsx
*Lines: 24, Size: 716 Bytes*

```jsx
// packages/ui/src/page-header.jsx (version 2.0.0)
'use client'

import { motion } from 'framer-motion'

export function PageHeader({ title, description, children }) {
  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.4, ease: 'easeInOut' }}
      className="flex-shrink-0 flex justify-between items-start"
    >
      <div>
        <h1 className="text-4xl font-bold tracking-tighter">{title}</h1>
        <p className="text-muted-foreground mt-1">{description}</p>
      </div>
      {children && <div className="flex-shrink-0">{children}</div>}
    </motion.div>
  )
}
// This is a default export now.
export default PageHeader;

```

## 📄 src/config/constants.js
*Lines: 6, Size: 174 Bytes*

```javascript
// src/config/constants.js (version 2.0)
// Pagination settings
export const ARTICLES_PER_PAGE = 10
export const EVENTS_PER_PAGE = 5
export const OPPORTUNITIES_PER_PAGE = 10

```

## 📄 src/hooks/index.js
*Lines: 6, Size: 197 Bytes*

```javascript
export * from './use-debounce.js';
export * from './use-entity-manager.js';
export * from './use-has-hydrated.js';
export * from './use-push-manager.js';
export * from './use-realtime-updates.js';

```

## 📄 src/hooks/use-debounce.js
*Lines: 18, Size: 431 Bytes*

```javascript
// packages/utils-shared/src/hooks/use-debounce.js (NEW FILE)
'use client'

import { useState, useEffect } from 'react'

export function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = useState(value)
  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value)
    }, delay)
    return () => {
      clearTimeout(handler)
    }
  }, [value, delay])
  return debouncedValue
}

```

## 📄 src/hooks/use-entity-manager.js
*Lines: 85, Size: 2.35 KB*

```javascript
// apps/admin/src/hooks/use-entity-manager.js (version 4.0.1 - Complete)
'use client'

import { useState, useEffect, useCallback } from 'react'
import { useDebounce } from '@/hooks'
import { toast } from 'sonner'

export function useEntityManager(apiPath, queryKey, initialSort = []) {
  const [data, setData] = useState([])
  const [total, setTotal] = useState(0)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState(null)

  // State for server-side operations
  const [page, setPage] = useState(1)
  const [sorting, setSorting] = useState(initialSort)
  const [columnFilters, setColumnFilters] = useState([])
  const debouncedFilters = useDebounce(columnFilters, 500)

  const fetchEntities = useCallback(async () => {
    setIsLoading(true)
    setError(null)
    try {
      const sortParam = sorting[0]
        ? `${sorting[0].id}_${sorting[0].desc ? 'desc' : 'asc'}`
        : null
      const params = new URLSearchParams()
      params.set('page', page.toString())
      if (sortParam) params.set('sort', sortParam)
      if (debouncedFilters && debouncedFilters.length > 0) {
        params.set('columnFilters', JSON.stringify(debouncedFilters))
      }

      const res = await fetch(`${apiPath}?${params.toString()}`)
      if (!res.ok) {
        const errorData = await res.json()
        throw new Error(errorData.details || `Failed to fetch from ${apiPath}.`)
      }
      const result = await res.json()

      setData(result.data || [])
      setTotal(result.total || 0)
    } catch (err) {
      setError(err.message)
      toast.error(`Failed to load data for ${queryKey}`, { description: err.message })
    } finally {
      setIsLoading(false)
    }
  }, [apiPath, queryKey, page, sorting, debouncedFilters])

  useEffect(() => {
    fetchEntities()
  }, [fetchEntities])

  const handleSave = useCallback(
    (savedEntity) => {
      setData((prev) => {
        const exists = prev.some((e) => e._id === savedEntity._id)
        if (exists) {
          return prev.map((e) => (e._id === savedEntity._id ? savedEntity : e))
        }
        return [savedEntity, ...prev]
      })
      fetchEntities()
    },
    [fetchEntities]
  )

  return {
    data,
    setData,
    total,
    isLoading,
    error,
    handleSave,
    refetch: fetchEntities,
    page,
    setPage,
    sorting,
    setSorting,
    columnFilters,
    setColumnFilters,
  }
}

```

## 📄 src/hooks/use-has-hydrated.js
*Lines: 17, Size: 417 Bytes*

```javascript
// packages/utils-shared/src/hooks/use-has-hydrated.js (version 2.0.0)
'use client'

import { useState, useEffect } from 'react'

// This is a generic hook to detect when client-side hydration is complete.
// It is no longer tied to a specific Zustand store.
export function useHasHydrated() {
  const [hydrated, setHydrated] = useState(false)

  useEffect(() => {
    setHydrated(true)
  }, [])

  return hydrated
}

```

## 📄 src/hooks/use-push-manager.js
*Lines: 99, Size: 3.23 KB*

```javascript
// packages/utils-shared/src/hooks/use-push-manager.js
'use client'

import { useState, useEffect, useCallback } from 'react'
import { toast } from 'sonner'
// useAuth import is removed

function urlBase64ToUint8Array(base64String) {
  const padding = '='.repeat((4 - (base64String.length % 4)) % 4)
  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/')
  const rawData = window.atob(base64)
  const outputArray = new Uint8Array(rawData.length)
  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i)
  }
  return outputArray
}

export function usePushManager({ user, saveSubscription }) {
  // user is now a prop
  const [isSupported, setIsSupported] = useState(false)
  const [isSubscribed, setIsSubscribed] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  // const { user } = useAuth() // This line is removed

  const checkSubscription = useCallback(async () => {
    try {
      const registration = await navigator.serviceWorker.ready
      const subscription = await registration.pushManager.getSubscription()
      setIsSubscribed(!!subscription)
      return !!subscription
    } catch (error) {
      console.error('[PushManager] Error checking subscription:', error)
      setIsSubscribed(false)
      return false
    }
  }, [])

  useEffect(() => {
    if (
      typeof window !== 'undefined' &&
      'serviceWorker' in navigator &&
      'PushManager' in window
    ) {
      setIsSupported(true)
      navigator.serviceWorker.ready
        .then(() => {
          checkSubscription().finally(() => setIsLoading(false))
        })
        .catch((error) => {
          console.error('[PushManager] Service worker failed to become ready:', error)
          setIsLoading(false)
        })
    } else {
      setIsLoading(false)
    }
  }, [checkSubscription])

  const subscribe = useCallback(async () => {
    if (!user) {
      // Logic remains the same, but user comes from props
      toast.error('You must be logged in to subscribe to notifications.')
      return
    }
    if (typeof saveSubscription !== 'function') {
      toast.error('Push notification handler is not configured.')
      return
    }
    setIsLoading(true)
    try {
      const registration = await navigator.serviceWorker.ready
      if (Notification.permission === 'denied') {
        throw new Error('Notification permission has been denied by the user.')
      }
      const VAPID_PUBLIC_KEY = process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY
      if (!VAPID_PUBLIC_KEY) {
        throw new Error('VAPID public key not configured.')
      }
      const subscription = await registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: urlBase64ToUint8Array(VAPID_PUBLIC_KEY),
      })
      await saveSubscription(subscription)
      setIsSubscribed(true)
      toast.success('Notifications enabled!')
    } catch (error) {
      if (error.name === 'NotAllowedError') {
        toast.error('Permission for notifications was denied.')
      } else {
        toast.error('Failed to enable notifications.', { description: error.message })
      }
    } finally {
      setIsLoading(false)
    }
  }, [isSubscribed, user, saveSubscription])

  return { isSupported, isSubscribed, isLoading, subscribe }
}

```

## 📄 src/hooks/use-realtime-updates.js
*Lines: 46, Size: 1.46 KB*

```javascript
// packages/utils-shared/src/hooks/use-realtime-updates.js (version 1.0.1 - Complete)
'use client'

import { useEffect, useRef } from 'react'
import Pusher from 'pusher-js'
import { useQueryClient } from '@tanstack/react-query'

export function useRealtimeUpdates({ channel, event, queryKey }) {
  const queryClient = useQueryClient()
  const pusherRef = useRef(null)

  useEffect(() => {
    if (!channel || !event || !queryKey) {
      return
    }
    const PUSHER_KEY = process.env.NEXT_PUBLIC_PUSHER_KEY
    const PUSHER_CLUSTER = process.env.NEXT_PUBLIC_PUSHER_CLUSTER
    if (!pusherRef.current) {
      if (!PUSHER_KEY || !PUSHER_CLUSTER) {
        console.warn('Pusher keys not found, real-time updates are disabled.')
        return
      }
      try {
        pusherRef.current = new Pusher(PUSHER_KEY, { cluster: PUSHER_CLUSTER })
      } catch (error) {
        console.error('Failed to initialize Pusher:', error)
        return
      }
    }
    try {
      const pusherChannel = pusherRef.current.subscribe(channel)
      pusherChannel.bind(event, (data) => {
        // Invalidate queries to trigger a refetch of the list
        queryClient.invalidateQueries({ queryKey: [queryKey] })
      })
      return () => {
        if (pusherRef.current) {
          pusherRef.current.unsubscribe(channel)
        }
      }
    } catch (error) {
      console.error(`Failed to subscribe to Pusher channel '${channel}':`, error)
    }
  }, [channel, event, queryKey, queryClient])
}

```

## 📄 src/lib/api-client.js
*Lines: 118, Size: 4.46 KB*

```javascript
// apps/admin/src/lib/api-client.js (version 2.2.0)
'use client'

import { toast } from 'sonner'

async function fetchApi(endpoint, { body, method = 'POST' } = {}) {
  try {
    const response = await fetch(endpoint, {
      method,
      headers: { 'Content-Type': 'application/json' },
      body: body ? JSON.stringify(body) : undefined,
    })
    const result = await response.json()
    if (!response.ok) {
      throw new Error(result.error || result.details || 'An unknown API error occurred.')
    }
    return result
  } catch (error) {
    toast.error('API Request Failed', { description: error.message })
    return { success: false, error: error.message }
  }
}

// SUBSCRIBERS (USERS)
export const createSubscriber = (data) => fetchApi('/api/subscribers', { body: data })
export const updateSubscriber = (id, data) =>
  fetchApi(`/api/subscribers/${id}`, { body: data, method: 'PATCH' })
export const deleteSubscriber = (id) =>
  fetchApi(`/api/subscribers/${id}`, { method: 'DELETE' })

// COUNTRIES
export const createCountry = (data) => fetchApi('/api/countries', { body: data })
export const updateCountry = (id, data) =>
  fetchApi(`/api/countries/${id}`, { body: data, method: 'PATCH' })

// SOURCES
export const createSource = (data) => fetchApi('/api/sources', { body: data })
export const updateSource = (id, data) =>
  fetchApi(`/api/sources/${id}`, { body: data, method: 'PATCH' })
export const testSourceConfigClient = (sourceConfig) =>
  fetchApi('/api/scrape/test-config', { body: sourceConfig })

// WATCHLIST
export const createWatchlistEntity = (data) => fetchApi('/api/watchlist', { body: data })
export const updateWatchlistEntity = (id, data) =>
  fetchApi(`/api/watchlist/${id}`, { body: data, method: 'PATCH' })
export const deleteWatchlistEntity = (id) =>
  fetchApi(`/api/watchlist/${id}`, { method: 'DELETE' })

// SUGGESTIONS
export const processSuggestion = (suggestionId, suggestionType, action) =>
  fetchApi('/api/suggestions', { body: { suggestionId, suggestionType, action } })
export const updateWatchlistSuggestion = (id, data) =>
  fetchApi(`/api/watchlist/suggestions/${id}`, { body: data, method: 'PATCH' })

// SETTINGS
export const getSettings = () => fetchApi('/api/settings', { method: 'GET' })
export const updateSettings = (data) =>
  fetchApi('/api/settings', { body: data, method: 'PATCH' })

// ARTICLES, EVENTS, OPPORTUNITIES (CRUD for inline editing)
export const updateAdminArticle = (id, data) =>
  fetchApi(`/api/articles/${id}`, { body: data, method: 'PATCH' })
export const deleteAdminArticle = (id) =>
  fetchApi(`/api/articles/${id}`, { method: 'DELETE' })
export const updateAdminEvent = (id, data) =>
  fetchApi(`/api/events/${id}`, { body: data, method: 'PATCH' })
export const deleteAdminEvent = (id) =>
  fetchApi(`/api/events/${id}`, { method: 'DELETE' })
export const updateAdminOpportunity = (id, data) =>
  fetchApi(`/api/opportunities/${id}`, { body: data, method: 'PATCH' })
export const deleteAdminOpportunity = (id) =>
  fetchApi(`/api/opportunities/${id}`, { method: 'DELETE' })

// RELATIONSHIPS
export const linkOpportunityToEventClient = (eventId, opportunityId) =>
  fetchApi('/api/relationships/link', { body: { eventId, opportunityId } })
export const unlinkOpportunityFromEventClient = (eventId, opportunityId) =>
  fetchApi('/api/relationships/unlink', { body: { eventId, opportunityId } })

// --- EXPORT ACTIONS ---
export async function handleExport(entity, fileType, filters, sort) {
  try {
    const response = await fetch('/api/export', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ entity, fileType, filters, sort }),
    })

    if (!response.ok) {
      const errorResult = await response.json()
      throw new Error(errorResult.details || 'Export failed on the server.')
    }

    const blob = await response.blob()
    const contentDisposition = response.headers.get('content-disposition')
    let filename = 'export.dat'
    if (contentDisposition) {
      const filenameMatch = contentDisposition.match(/filename="(.+?)"/)
      if (filenameMatch.length === 2) filename = filenameMatch[1]
    }

    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = filename
    document.body.appendChild(a)
    a.click()
    a.remove()
    window.URL.revokeObjectURL(url)

    return { success: true }
  } catch (error) {
    toast.error('Export Failed', { description: error.message })
    return { success: false, error: error.message }
  }
}

```

## 📄 src/lib/api-handler.js
*Lines: 48, Size: 1.57 KB*

```javascript
// apps/admin/src/lib/api-handler.js (NEW FILE)
import { NextResponse } from 'next/server'
import { initializeSharedLogic } from '../../../admin/src/lib/init-shared-logic'
import { verifyAdmin } from '@headlines/auth'
import mongoose from 'mongoose'

/**
 * A higher-order function to wrap API route handlers.
 * It provides a consistent structure for initialization, authentication, and error handling.
 * @param {function} handler - The core API logic function. It receives the request and any params.
 * @returns {function} An API route handler function.
 */
export function createApiHandler(handler) {
  return async (request, context) => {
    try {
      await initializeSharedLogic()

      const { isAdmin, user, error: authError } = await verifyAdmin()
      if (!isAdmin) {
        return NextResponse.json({ error: authError }, { status: 401 })
      }

      // The handler receives the request, context (for params), and the verified user payload.
      return await handler(request, { ...context, user })
    } catch (error) {
      console.error(`[API Handler Error] Caught in ${request.nextUrl.pathname}:`, error)

      if (
        error instanceof mongoose.Error.ValidationError ||
        error instanceof mongoose.Error.CastError
      ) {
        return NextResponse.json(
          { error: 'Invalid input data.', details: error.message },
          { status: 400 }
        )
      }

      return NextResponse.json(
        {
          error: 'An unexpected internal server error occurred.',
          details: error.message,
        },
        { status: 500 }
      )
    }
  }
}

```

## 📄 src/lib/auth/AuthProvider.js
*Lines: 68, Size: 2.25 KB*

```javascript
// Full Path: headlines/src/lib/auth/AuthProvider.js (REVISED)
'use client'

import React, { createContext, useState, useEffect } from 'react'
import { usePathname, useRouter } from 'next/navigation'
import { toast } from 'sonner'
import { LoadingOverlay } from '@/components/shared/LoadingOverlay'

export const AuthContext = createContext(null)

export function AuthProvider({ initialUser, children }) {
  // 1. Set state from the server-provided prop, not a client-side fetch.
  const [user, setUser] = useState(initialUser)
  const [isLoading, setIsLoading] = useState(false) // Not initially loading
  const router = useRouter()
  const pathname = usePathname()

  // 2. This effect now correctly handles redirects based on the initial state.
  useEffect(() => {
    if (isLoading) return // Don't redirect during login/logout actions
    const isAuthPage = pathname.startsWith('/login')
    const isAdminPage = pathname.startsWith('/admin')

    if (!user && !isAuthPage) {
      router.push('/login')
    } else if (user && isAuthPage) {
      router.push(user.role === 'admin' ? '/dashboard' : '/events')
    } else if (user && isAdminPage && user.role !== 'admin') {
      toast.error('Access Denied', {
        description: 'You do not have permission to view this page.',
      })
      router.push('/events')
    }
  }, [user, pathname, router, isLoading])

  const login = async (email, password) => {
    setIsLoading(true)
    const response = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
    })
    const data = await response.json()
    if (response.ok) {
      toast.success('Login successful!')
      setUser(data.user)
    } else {
      toast.error('Login Failed', { description: data.error })
    }
    setIsLoading(false)
  }

  const logout = async () => {
    await fetch('/api/auth/logout', { method: 'POST' })
    toast.info('You have been logged out.')
    setUser(null)
  }

  const value = { user, isLoading, login, logout }

  // We only show this during login/logout actions now.
  if (isLoading) {
    return <LoadingOverlay isLoading={true} text="Authorizing..." />
  }

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}

```

## 📄 src/lib/auth/client.js
*Lines: 16, Size: 383 Bytes*

```javascript
// Full Path: headlines/src/lib/auth/client.js
'use client'

import { useContext } from 'react'
import { AuthContext } from './AuthProvider'

export const useAuth = () => {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}

export { AuthProvider } from './AuthProvider'

```

## 📄 src/lib/auth/getCookies.js
*Lines: 36, Size: 791 Bytes*

```javascript
'use server'

/**
 * An environment-aware cookie accessor.
 */
export async function getCookies() {
  if (
    process.env.IS_PIPELINE_RUN === 'true' ||
    typeof window !== 'undefined' ||
    !process.env.NEXT_RUNTIME
  ) {
    // Return a mock for non-Next.js server environments or client-side
    return {
      get: () => undefined,
      getAll: () => [],
      has: () => false,
      set: () => {},
      delete: () => {},
    }
  }
  try {
    const { cookies } = await import('next/headers')
    return cookies()
  } catch (error) {
    console.error('Failed to import cookies from next/headers:', error.message)
    // Fallback mock
    return {
      get: () => undefined,
      getAll: () => [],
      has: () => false,
      set: () => {},
      delete: () => {},
    }
  }
}

```

## 📄 src/lib/auth/server.js
*Lines: 5, Size: 286 Bytes*

```javascript
// Full Path: headlines/src/lib/auth/server.js
// This file is the designated server-side entry point for auth utilities.
// It re-exports functions from other modules to create a clean API boundary.
export { verifySession, verifyAdmin, getUserIdFromSession } from './verifySession.js'

```

## 📄 src/lib/auth/verifySession.js
*Lines: 59, Size: 1.56 KB*

```javascript
'use server'

import { getCookies } from './getCookies.js'
import * as jose from 'jose'
import { env } from '@headlines/config'
import { seedDevUser } from '@headlines/data-access/seed/dev-user.js'

const JWT_COOKIE_NAME = 'headlines-jwt'

async function verifyToken(token) {
  if (!token) return { user: null, error: 'No token provided.' }
  try {
    const secret = new TextEncoder().encode(env.JWT_SECRET)
    const { payload } = await jose.jwtVerify(token, secret)
    return { user: payload, error: null }
  } catch (e) {
    return { user: null, error: 'Invalid or expired session token.' }
  }
}

export async function verifySession() {
  const cookieStore = await getCookies()
  const token = cookieStore.get(JWT_COOKIE_NAME)?.value
  return await verifyToken(token)
}

export async function getUserIdFromSession() {
  const { user } = await verifySession()
  return user ? user.userId : null
}

export async function verifyAdmin() {
  const { headers } = await import('next/headers')
  const headersList = headers()

  if (
    process.env.NODE_ENV === 'development' &&
    headersList.get('x-dev-mode') === 'true'
  ) {
    await seedDevUser()
    const devUser = {
      userId: '662f831abb28052123530a43',
      email: 'reconozco@gmail.com',
      role: 'admin',
    }
    return { isAdmin: true, user: devUser, error: null }
  }

  const { user, error } = await verifySession()
  if (error || user?.role !== 'admin') {
    return {
      isAdmin: false,
      error: error || 'Administrator access required.',
      user: null,
    }
  }
  return { isAdmin: true, user, error: null }
}

```

## 📄 src/lib/constants.js
*Lines: 23, Size: 1.03 KB*

```javascript
// apps/admin/src/lib/constants.js (NEW FILE)
// API Routes
export const API_ARTICLES = '/api/articles'
export const API_EVENTS = '/api/events'
export const API_OPPORTUNITIES = '/api/opportunities'
export const API_SUBSCRIBERS = '/api/subscribers'
export const API_COUNTRIES = '/api/countries'
export const API_SOURCES = '/api/sources'
export const API_WATCHLIST = '/api/watchlist'
export const API_WATCHLIST_SUGGESTIONS = '/api/watchlist/suggestions'
export const API_SUGGESTIONS = '/api/suggestions'
export const API_SETTINGS = '/api/settings'

// React Query Keys (used for client-side caching and invalidation)
export const QUERY_KEY_ARTICLES = 'adminArticles'
export const QUERY_KEY_EVENTS = 'adminEvents'
export const QUERY_KEY_OPPORTUNITIES = 'adminOpportunities'
export const QUERY_KEY_SUBSCRIBERS = 'adminSubscribers'
export const QUERY_KEY_COUNTRIES = 'adminCountries'
export const QUERY_KEY_SOURCES = 'adminSources'
export const QUERY_KEY_WATCHLIST = 'adminWatchlist'
export const QUERY_KEY_WATCHLIST_SUGGESTIONS = 'adminWatchlistSuggestions'

```

## 📄 src/lib/env.mjs
*Lines: 72, Size: 2.56 KB*

```
// src/lib/env.mjs (version 3.1)
import { z } from 'zod'

/**
 * Defines the schema for all required server-side environment variables.
 * This schema is used to parse `process.env` and ensures that all necessary
 * variables are present and correctly formatted at application startup.
 */
const envSchema = z.object({
  // Core Infrastructure
  MONGO_URI: z.string().url({ message: 'MONGO_URI must be a valid URL.' }),

  // Authentication
  COOKIE_SECRET: z
    .string()
    .min(10, { message: 'COOKIE_SECRET must be at least 10 characters long.' }), // Note: This will be deprecated
  JWT_SECRET: z
    .string()
    .min(32, { message: 'JWT_SECRET must be at least 32 characters long for security.' }),

  // Third-Party Services
  GROQ_API_KEY: z.string().min(1, { message: 'GROQ_API_KEY is required.' }),
  SERPAPI_API_KEY: z.string().min(1, { message: 'SERPAPI_API_KEY is required.' }),
  PINECONE_API_KEY: z.string().min(1, { message: 'PINECONE_API_KEY is required.' }),
  PINECONE_INDEX_NAME: z.string().min(1, { message: 'PINECONE_INDEX_NAME is required.' }),

  // Pusher (Real-time) - These are public, so they need the NEXT_PUBLIC_ prefix
  NEXT_PUBLIC_PUSHER_KEY: z
    .string()
    .min(1, { message: 'NEXT_PUBLIC_PUSHER_KEY is required.' }),
  NEXT_PUBLIC_PUSHER_CLUSTER: z
    .string()
    .min(1, { message: 'NEXT_PUBLIC_PUSHER_CLUSTER is required.' }),

  // Push Notifications (PWA)
  NEXT_PUBLIC_VAPID_PUBLIC_KEY: z
    .string()
    .min(1, { message: 'NEXT_PUBLIC_VAPID_PUBLIC_KEY is required.' }),
  VAPID_PRIVATE_KEY: z.string().min(1, { message: 'VAPID_PRIVATE_KEY is required.' }),
  VAPID_SUBJECT: z.preprocess(
    (val) => (typeof val === 'string' ? val.replace(/^mailto:/, '') : val),
    z.string().email({
      message: 'VAPID_SUBJECT must be a valid email address (e.g., contact@example.com).',
    })
  ),
})

let env

try {
  env = envSchema.parse(process.env)
} catch (error) {
  if (error instanceof z.ZodError) {
    let errorMessage =
      '\n\n\x1b[31mCRITICAL ERROR: Invalid or missing environment variables:\x1b[0m\n'
    error.errors.forEach((e) => {
      errorMessage += `  - \x1b[33m${e.path.join('.')}:\x1b[0m \x1b[31m${e.message}\x1b[0m\n`
    })
    errorMessage +=
      '\n\x1b[32mACTION REQUIRED: Please check your .env.local file and ensure all required variables are set correctly.\x1b[0m\n'

    // START: REPLACED process.exit WITH A THROWN ERROR
    // This stops the build/server start in a runtime-agnostic way.
    throw new Error(errorMessage)
    // END: REPLACED process.exit
  }
  // Re-throw other unexpected errors
  throw error
}

export { env }

```

## 📄 src/lib/init-shared-logic.js
*Lines: 23, Size: 628 Bytes*

```javascript
// apps/admin/src/lib/init-shared-logic.js (Corrected Import Path)
import * as appConfig from '@/../app.config.js'
// DEFINITIVE FIX: Import from the correct server-only entry point.
import { settings, initializeSettings } from '@headlines/config'
import { logger } from '@shared/utils-shared'
import dbConnect from '@headlines/data-access/dbConnect.js'

let isInitialized = false

export async function initializeSharedLogic() {
  if (isInitialized) {
    return
  }

  await dbConnect()

  await initializeSettings()

  configureScraperLogic({ ...appConfig, logger, settings, utilityFunctions: {} })

  isInitialized = true
}

```

## 📄 src/lib/mongodb.js
*Lines: 44, Size: 874 Bytes*

```javascript
// src/lib/mongodb.js
import mongoose from 'mongoose'
import { env } from '@/lib/env.mjs' // <-- Import the validated env object

const MONGO_URI = env.MONGO_URI

/**
 * Global is used here to maintain a cached connection across hot reloads
 * in development. This prevents connections from growing exponentially
 * during API Route usage.
 */
let cached = global.mongoose

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null }
}

async function dbConnect() {
  if (cached.conn) {
    return cached.conn
  }

  if (!cached.promise) {
    const opts = {
      bufferCommands: false,
    }

    cached.promise = mongoose.connect(MONGO_URI, opts).then((mongoose) => {
      return mongoose
    })
  }

  try {
    cached.conn = await cached.promise
  } catch (e) {
    cached.promise = null
    throw e
  }

  return cached.conn
}

export default dbConnect

```

## 📄 src/lib/monitoring.js
*Lines: 438, Size: 15.07 KB*

```javascript
// src/lib/monitoring.js - Monitoring and analytics for RAG performance
"use server";

// In-memory analytics store (use Redis/database in production)
const analyticsStore = {
    queries: [],
    performance: {},
    errors: []
};

/**
 * Logs a query and its performance metrics
 * @param {Object} queryData 
 */
export async function logQuery(queryData) {
    const timestamp = Date.now();
    const entry = {
        timestamp,
        query: queryData.query,
        entities: queryData.entities,
        ragResults: queryData.ragResults?.length || 0,
        wikiResults: queryData.wikiResults?.length || 0,
        maxSimilarity: queryData.maxSimilarity || 0,
        qualityScore: queryData.qualityScore || 0,
        responseTime: queryData.responseTime || 0,
        confidenceLevel: queryData.confidenceLevel || 'unknown',
        hadHallucinations: queryData.hadHallucinations || false,
        sourceConflicts: queryData.sourceConflicts || 0
    };
    
    analyticsStore.queries.push(entry);
    
    // Keep only last 1000 queries to prevent memory bloat
    if (analyticsStore.queries.length > 1000) {
        analyticsStore.queries = analyticsStore.queries.slice(-1000);
    }
    
    console.log(`[Analytics] Logged query: ${queryData.query.substring(0, 50)}...`);
}

/**
 * Logs performance metrics
 * @param {string} operation 
 * @param {number} duration 
 * @param {Object} metadata 
 */
export async function logPerformance(operation, duration, metadata = {}) {
    if (!analyticsStore.performance[operation]) {
        analyticsStore.performance[operation] = {
            count: 0,
            totalTime: 0,
            averageTime: 0,
            minTime: Infinity,
            maxTime: 0,
            errors: 0
        };
    }
    
    const perf = analyticsStore.performance[operation];
    perf.count++;
    perf.totalTime += duration;
    perf.averageTime = perf.totalTime / perf.count;
    perf.minTime = Math.min(perf.minTime, duration);
    perf.maxTime = Math.max(perf.maxTime, duration);
    
    if (metadata.error) {
        perf.errors++;
    }
}

/**
 * Gets analytics dashboard data
 * @returns {Promise<Object>} Analytics summary
 */
export async function getAnalyticsDashboard() {
    const recentQueries = analyticsStore.queries.slice(-100);
    const last24Hours = analyticsStore.queries.filter(q => 
        Date.now() - q.timestamp < 24 * 60 * 60 * 1000
    );
    
    return {
        overview: {
            totalQueries: analyticsStore.queries.length,
            queriesLast24h: last24Hours.length,
            averageQualityScore: calculateAverage(recentQueries, 'qualityScore'),
            averageResponseTime: calculateAverage(recentQueries, 'responseTime'),
            hallucinationRate: calculateRate(recentQueries, 'hadHallucinations'),
            highConfidenceRate: calculateRate(recentQueries, q => q.confidenceLevel === 'high')
        },
        qualityMetrics: {
            averageRAGResults: calculateAverage(recentQueries, 'ragResults'),
            averageWikiResults: calculateAverage(recentQueries, 'wikiResults'),
            averageSimilarity: calculateAverage(recentQueries, 'maxSimilarity'),
            sourceConflictRate: calculateRate(recentQueries, q => q.sourceConflicts > 0)
        },
        performance: analyticsStore.performance,
        trends: calculateTrends(analyticsStore.queries),
        commonIssues: identifyCommonIssues(recentQueries)
    };
}

/**
 * Identifies patterns that might indicate hallucination risks
 * @param {Array} queries 
 * @returns {Promise<Array>} Risk indicators
 */
export async function identifyHallucinationRisks(queries = analyticsStore.queries.slice(-100)) {
    const risks = [];
    
    // Low similarity threshold
    const lowSimilarityQueries = queries.filter(q => q.maxSimilarity < 0.3);
    if (lowSimilarityQueries.length / queries.length > 0.2) {
        risks.push({
            type: 'low_similarity',
            severity: 'medium',
            description: `${Math.round(lowSimilarityQueries.length / queries.length * 100)}% of queries have very low similarity scores`,
            recommendation: 'Consider improving embedding model or expanding knowledge base'
        });
    }
    
    // High hallucination rate
    const hallucinatedQueries = queries.filter(q => q.hadHallucinations);
    if (hallucinatedQueries.length / queries.length > 0.1) {
        risks.push({
            type: 'high_hallucination_rate',
            severity: 'high',
            description: `${Math.round(hallucinatedQueries.length / queries.length * 100)}% of queries had detected hallucinations`,
            recommendation: 'Review and strengthen hallucination detection system'
        });
    }
    
    // Frequent source conflicts
    const conflictQueries = queries.filter(q => q.sourceConflicts > 0);
    if (conflictQueries.length / queries.length > 0.15) {
        risks.push({
            type: 'source_conflicts',
            severity: 'medium',
            description: `${Math.round(conflictQueries.length / queries.length * 100)}% of queries had source conflicts`,
            recommendation: 'Review data sources for consistency and accuracy'
        });
    }
    
    return risks;
}

/**
 * Generates recommendations for system improvements
 * @returns {Promise<Array>} Improvement recommendations
 */
export async function generateSystemRecommendations() {
    const dashboard = await getAnalyticsDashboard();
    const risks = await identifyHallucinationRisks();
    const recommendations = [];
    
    // Performance recommendations
    if (dashboard.overview.averageResponseTime > 3000) {
        recommendations.push({
            category: 'performance',
            priority: 'high',
            title: 'Slow Response Times',
            description: `Average response time is ${(dashboard.overview.averageResponseTime / 1000).toFixed(1)}s`,
            actions: [
                'Implement embedding caching',
                'Optimize Pinecone query parameters',
                'Consider parallel processing improvements'
            ]
        });
    }
    
    // Quality recommendations
    if (dashboard.overview.averageQualityScore < 0.7) {
        recommendations.push({
            category: 'quality',
            priority: 'high',
            title: 'Low Quality Scores',
            description: `Average quality score is ${dashboard.overview.averageQualityScore.toFixed(2)}`,
            actions: [
                'Improve source material quality',
                'Enhance entity extraction',
                'Strengthen validation rules'
            ]
        });
    }
    
    // Coverage recommendations
    if (dashboard.qualityMetrics.averageRAGResults < 2) {
        recommendations.push({
            category: 'coverage',
            priority: 'medium',
            title: 'Low RAG Result Coverage',
            description: `Average RAG results per query: ${dashboard.qualityMetrics.averageRAGResults.toFixed(1)}`,
            actions: [
                'Expand knowledge base',
                'Implement query expansion',
                'Lower similarity threshold for broader matching'
            ]
        });
    }
    
    // Add risk-based recommendations
    risks.forEach(risk => {
        recommendations.push({
            category: 'risk_mitigation',
            priority: risk.severity,
            title: risk.type.replace('_', ' ').toUpperCase(),
            description: risk.description,
            actions: [risk.recommendation]
        });
    });
    
    return recommendations.sort((a, b) => {
        const priorityOrder = { high: 3, medium: 2, low: 1 };
        return priorityOrder[b.priority] - priorityOrder[a.priority];
    });
}

/**
 * Exports analytics data for external analysis
 * @param {string} format - 'json' or 'csv'
 * @returns {Promise<string>} Formatted data
 */
export async function exportAnalytics(format = 'json') {
    const data = {
        exportTime: new Date().toISOString(),
        dashboard: await getAnalyticsDashboard(),
        risks: await identifyHallucinationRisks(),
        recommendations: await generateSystemRecommendations(),
        rawQueries: analyticsStore.queries.slice(-500) // Last 500 queries
    };
    
    if (format === 'json') {
        return JSON.stringify(data, null, 2);
    }
    
    if (format === 'csv') {
        const csvRows = [
            'timestamp,query,ragResults,wikiResults,maxSimilarity,qualityScore,responseTime,confidenceLevel,hadHallucinations,sourceConflicts'
        ];
        
        data.rawQueries.forEach(query => {
            csvRows.push([
                new Date(query.timestamp).toISOString(),
                `"${query.query.replace(/"/g, '""')}"`,
                query.ragResults,
                query.wikiResults,
                query.maxSimilarity.toFixed(3),
                query.qualityScore.toFixed(3),
                query.responseTime,
                query.confidenceLevel,
                query.hadHallucinations,
                query.sourceConflicts
            ].join(','));
        });
        
        return csvRows.join('\n');
    }
    
    throw new Error(`Unsupported export format: ${format}`);
}

/**
 * Real-time monitoring for alert conditions
 * @returns {Promise<Array>} Active alerts
 */
export async function checkAlerts() {
    const alerts = [];
    const recentQueries = analyticsStore.queries.slice(-50); // Last 50 queries
    
    if (recentQueries.length === 0) return alerts;
    
    // High error rate alert
    const recentErrors = recentQueries.filter(q => q.qualityScore < 0.5).length;
    if (recentErrors / recentQueries.length > 0.3) {
        alerts.push({
            type: 'high_error_rate',
            severity: 'critical',
            message: `${Math.round(recentErrors / recentQueries.length * 100)}% of recent queries had low quality scores`,
            timestamp: Date.now()
        });
    }
    
    // Performance degradation alert
    const recentAvgTime = calculateAverage(recentQueries, 'responseTime');
    const historicalAvgTime = calculateAverage(analyticsStore.queries.slice(-200, -50), 'responseTime');
    
    if (recentAvgTime > historicalAvgTime * 1.5 && recentAvgTime > 2000) {
        alerts.push({
            type: 'performance_degradation',
            severity: 'warning',
            message: `Response time increased by ${Math.round((recentAvgTime / historicalAvgTime - 1) * 100)}%`,
            timestamp: Date.now()
        });
    }
    
    // Hallucination spike alert
    const recentHallucinations = recentQueries.filter(q => q.hadHallucinations).length;
    if (recentHallucinations > 5) {
        alerts.push({
            type: 'hallucination_spike',
            severity: 'critical',
            message: `${recentHallucinations} hallucinations detected in last 50 queries`,
            timestamp: Date.now()
        });
    }
    
    return alerts;
}

/**
 * Clears old analytics data
 * @param {number} daysToKeep 
 */
export async function cleanupAnalytics(daysToKeep = 30) {
    const cutoffTime = Date.now() - (daysToKeep * 24 * 60 * 60 * 1000);
    const initialCount = analyticsStore.queries.length;
    
    analyticsStore.queries = analyticsStore.queries.filter(q => q.timestamp > cutoffTime);
    analyticsStore.errors = analyticsStore.errors.filter(e => e.timestamp > cutoffTime);
    
    const removedCount = initialCount - analyticsStore.queries.length;
    console.log(`[Analytics Cleanup] Removed ${removedCount} old entries, keeping ${analyticsStore.queries.length} recent entries`);
    
    return { removed: removedCount, remaining: analyticsStore.queries.length };
}

// Helper functions

function calculateAverage(array, property) {
    if (array.length === 0) return 0;
    const sum = array.reduce((acc, item) => {
        const value = typeof property === 'string' ? item[property] : property(item);
        return acc + (value || 0);
    }, 0);
    return sum / array.length;
}

function calculateRate(array, condition) {
    if (array.length === 0) return 0;
    const matches = array.filter(item => 
        typeof condition === 'string' ? item[condition] : condition(item)
    ).length;
    return matches / array.length;
}

function calculateTrends(queries) {
    if (queries.length < 10) return {};
    
    const periods = [
        { name: 'last_hour', ms: 60 * 60 * 1000 },
        { name: 'last_day', ms: 24 * 60 * 60 * 1000 },
        { name: 'last_week', ms: 7 * 24 * 60 * 60 * 1000 }
    ];
    
    const trends = {};
    const now = Date.now();
    
    periods.forEach(period => {
        const periodQueries = queries.filter(q => now - q.timestamp <= period.ms);
        if (periodQueries.length > 0) {
            trends[period.name] = {
                count: periodQueries.length,
                avgQuality: calculateAverage(periodQueries, 'qualityScore'),
                avgSimilarity: calculateAverage(periodQueries, 'maxSimilarity'),
                hallucinationRate: calculateRate(periodQueries, 'hadHallucinations')
            };
        }
    });
    
    return trends;
}

function identifyCommonIssues(queries) {
    const issues = [];
    
    // Analyze query patterns
    const queryTypes = {};
    const entityCounts = {};
    
    queries.forEach(query => {
        // Categorize query types
        const queryText = query.query.toLowerCase();
        let category = 'general';
        
        if (queryText.includes('what is') || queryText.includes('who is')) {
            category = 'definition';
        } else if (queryText.includes('how much') || queryText.includes('worth') || queryText.includes('revenue')) {
            category = 'financial';
        } else if (queryText.includes('when') || queryText.includes('history')) {
            category = 'historical';
        }
        
        queryTypes[category] = (queryTypes[category] || 0) + 1;
        
        // Track entity extraction success
        if (query.entities && query.entities.length > 0) {
            entityCounts[query.entities.length] = (entityCounts[query.entities.length] || 0) + 1;
        }
    });
    
    // Identify problematic patterns
    const lowQualityQueries = queries.filter(q => q.qualityScore < 0.6);
    if (lowQualityQueries.length > queries.length * 0.2) {
        issues.push({
            type: 'quality',
            description: `${Math.round(lowQualityQueries.length / queries.length * 100)}% of queries have quality issues`,
            severity: 'medium',
            affectedQueries: lowQualityQueries.length
        });
    }
    
    const noRAGResults = queries.filter(q => q.ragResults === 0);
    if (noRAGResults.length > queries.length * 0.3) {
        issues.push({
            type: 'coverage',
            description: `${Math.round(noRAGResults.length / queries.length * 100)}% of queries found no RAG results`,
            severity: 'high',
            affectedQueries: noRAGResults.length
        });
    }
    
    return issues;
}

/**
 * Performance monitoring middleware
 * @param {string} operation 
 * @returns {Object} Timer object with end function
 */
export async function startTimer(operation) {
    const startTime = Date.now();
    return {
        end: async (metadata = {}) => {
            const duration = Date.now() - startTime;
            await logPerformance(operation, duration, metadata);
            return duration;
        }
    };
}
```

## 📄 src/lib/store/use-app-store.js
*Lines: 97, Size: 2.8 KB*

```javascript
// File: apps/client/src/lib/store/use-app-store.js (Simplified Hydration)
'use client'

import { create } from 'zustand'
import { persist, createJSONStorage } from 'zustand/middleware'
import { useState, useEffect } from 'react'

const useAppStore = create(
  persist(
    (set, get) => ({
      // ... (all your store state and actions remain the same)
      chats: [],
      activeChatId: null,
      chatContextPrompt: '',
      deletePreferences: {
        skipArticleConfirmation: false,
        skipOpportunityConfirmation: false,
      },
      setChatContextPrompt: (prompt) => set({ chatContextPrompt: prompt }),
      createChat: () => {
        const newChatId = `chat_${Date.now()}`
        const newChat = {
          id: newChatId,
          title: 'New Chat',
          createdAt: new Date().toISOString(),
          messages: [],
        }
        set((state) => ({ chats: [newChat, ...state.chats], activeChatId: newChatId }))
        return newChatId
      },
      selectChat: (id) => {
        const { chats } = get()
        if (chats.find((c) => c.id === id)) {
          set({ activeChatId: id })
        } else if (chats.length > 0) {
          set({ activeChatId: chats[0].id })
        } else {
          get().createChat()
        }
      },
      updateChatTitle: (id, newTitle) =>
        set((state) => ({
          chats: state.chats.map((chat) =>
            chat.id === id ? { ...chat, title: newTitle } : chat
          ),
        })),
      getMessagesForChat: (id) => {
        const chat = get().chats.find((c) => c.id === id)
        return chat ? chat.messages : []
      },
      setMessagesForChat: (id, messages) =>
        set((state) => ({
          chats: state.chats.map((chat) =>
            chat.id === id ? { ...chat, messages } : chat
          ),
        })),
      init: () => {
        if (useAppStore.getState().chats.length === 0) {
          get().createChat()
        } else {
          const { chats, activeChatId } = get()
          if (!activeChatId || !chats.find((c) => c.id === activeChatId)) {
            get().selectChat(chats[0].id)
          }
        }
      },
      setDeletePreference: (key, value) => {
        set((state) => ({
          deletePreferences: { ...state.deletePreferences, [key]: value },
        }))
      },
    }),
    {
      name: 'headlines-app-storage',
      storage: createJSONStorage(() => localStorage),
      partialize: (state) => ({
        chats: state.chats,
        activeChatId: state.activeChatId,
        deletePreferences: state.deletePreferences,
      }),
    }
  )
)

// A simple hook to prevent rendering until the client has mounted and the store is hydrated.
export const useHasHydrated = () => {
  const [hydrated, setHydrated] = useState(false)

  useEffect(() => {
    setHydrated(true)
  }, [])

  return hydrated
}

export default useAppStore

```

## 📄 src/lib/utils/apiCallTracker.js
*Lines: 49, Size: 1.02 KB*

```javascript
// packages/utils-shared/src/apiCallTracker.js (version 1.0.0)
import { logger } from './logger.js'

// Prices per 1000 calls in USD.
const servicePricing = {
  serper_news: 2.5,
  serper_search: 2.5,
  newsapi_search: 0, // Developer plan is free
  wikipedia: 0,
}

class ApiCallTracker {
  constructor() {
    this.usage = {}
    this.reset()
  }

  reset() {
    this.usage = {}
    Object.keys(servicePricing).forEach((service) => {
      this.usage[service] = { calls: 0, cost: 0 }
    })
  }

  recordCall(service) {
    if (!service) return

    if (!this.usage[service]) {
      logger.warn(
        `API call recorded for an un-priced service: ${service}. Calls will be tracked, but cost will be $0.`
      )
      this.usage[service] = { calls: 0, cost: 0 }
    }

    this.usage[service].calls += 1

    const pricePer1000 = servicePricing[service]
    if (pricePer1000) {
      this.usage[service].cost += pricePer1000 / 1000
    }
  }

  getStats() {
    return this.usage
  }
}

export const apiCallTracker = new ApiCallTracker()

```

## 📄 src/lib/utils/countries.js
*Lines: 30, Size: 994 Bytes*

```javascript
// packages/utils-shared/src/countries.js (NEW FILE)
import isoCountryFlags from './data/countries.json' with { type: 'json' }

const defaultFlag = '🌍'
const countryNameToIsoMap = new Map(Object.entries(isoCountryFlags))
const isoToFlagMap = new Map()

for (const [name, iso] of countryNameToIsoMap.entries()) {
  if (iso.length === 2) {
    const flag = iso
      .toUpperCase()
      .replace(/./g, (char) => String.fromCodePoint(char.charCodeAt(0) + 127397))
    isoToFlagMap.set(iso, flag)
  } else {
    const specialFlags = { Global: '🌐', Europe: '🇪🇺', Scandinavia: '❄️' }
    if (specialFlags[name]) isoToFlagMap.set(iso, specialFlags[name])
  }
}

export function getCountryFlag(countryName) {
  if (!countryName) return defaultFlag
  for (const [key, value] of countryNameToIsoMap.entries()) {
    if (key.toLowerCase() === countryName.trim().toLowerCase()) {
      const flag = isoToFlagMap.get(value)
      return flag || defaultFlag
    }
  }
  return defaultFlag
}

```

## 📄 src/lib/utils/data/countries.json
*Lines: 110, Size: 2.06 KB*

```json
{
  "Global": "XX",
  "Europe": "EU",
  "Scandinavia": "SC",
  "Afghanistan": "AF",
  "Albania": "AL",
  "Algeria": "DZ",
  "Andorra": "AD",
  "Angola": "AO",
  "Argentina": "AR",
  "Armenia": "AM",
  "Australia": "AU",
  "Austria": "AT",
  "Azerbaijan": "AZ",
  "Bahamas": "BS",
  "Bahrain": "BH",
  "Bangladesh": "BD",
  "Belarus": "BY",
  "Belgium": "BE",
  "Benin": "BJ",
  "Bhutan": "BT",
  "Bolivia": "BO",
  "Bosnia and Herzegovina": "BA",
  "Brazil": "BR",
  "Bulgaria": "BG",
  "Cambodia": "KH",
  "Canada": "CA",
  "Chile": "CL",
  "China": "CN",
  "Colombia": "CO",
  "Croatia": "HR",
  "Cuba": "CU",
  "Cyprus": "CY",
  "Czech Republic": "CZ",
  "Denmark": "DK",
  "Egypt": "EG",
  "Estonia": "EE",
  "Ethiopia": "ET",
  "Finland": "FI",
  "France": "FR",
  "Georgia": "GE",
  "Germany": "DE",
  "Ghana": "GH",
  "Greece": "GR",
  "Hungary": "HU",
  "Iceland": "IS",
  "India": "IN",
  "Indonesia": "ID",
  "Iran": "IR",
  "Iraq": "IQ",
  "Ireland": "IE",
  "Israel": "IL",
  "Italy": "IT",
  "Japan": "JP",
  "Jordan": "JO",
  "Kazakhstan": "KZ",
  "Kenya": "KE",
  "Kuwait": "KW",
  "Latvia": "LV",
  "Lebanon": "LB",
  "Liechtenstein": "LI",
  "Lithuania": "LT",
  "Luxembourg": "LU",
  "Malaysia": "MY",
  "Malta": "MT",
  "Mexico": "MX",
  "Monaco": "MC",
  "Mongolia": "MN",
  "Montenegro": "ME",
  "Morocco": "MA",
  "Nepal": "NP",
  "Netherlands": "NL",
  "New Zealand": "NZ",
  "Nigeria": "NG",
  "North Korea": "KP",
  "North Macedonia": "MK",
  "Norway": "NO",
  "Oman": "OM",
  "Pakistan": "PK",
  "Peru": "PE",
  "Philippines": "PH",
  "Poland": "PL",
  "Portugal": "PT",
  "Qatar": "QA",
  "Romania": "RO",
  "Russia": "RU",
  "Saudi Arabia": "SA",
  "Serbia": "RS",
  "Singapore": "SG",
  "Slovakia": "SK",
  "Slovenia": "SI",
  "South Africa": "ZA",
  "South Korea": "KR",
  "Spain": "ES",
  "Sri Lanka": "LK",
  "Sweden": "SE",
  "Switzerland": "CH",
  "Syria": "SY",
  "Taiwan": "TW",
  "Thailand": "TH",
  "Turkey": "TR",
  "Ukraine": "UA",
  "United Arab Emirates": "AE",
  "United Kingdom": "GB",
  "United States": "US",
  "Uzbekistan": "UZ",
  "Vietnam": "VN",
  "Yemen": "YE"
}

```

## 📄 src/lib/utils/data/languages.json
*Lines: 10, Size: 167 Bytes*

```json
{
    "English": "en",
    "Danish": "da",
    "Swedish": "sv",
    "Norwegian": "no",
    "German": "de",
    "French": "fr",
    "Spanish": "es",
    "Dutch": "nl"
}
```

## 📄 src/lib/utils/helpers.js
*Lines: 50, Size: 1.1 KB*

```javascript
// packages/utils-shared/src/helpers.js (Corrected)
import { clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs) {
  return twMerge(clsx(inputs))
}

export function truncateString(str, maxLength = 100) {
  if (typeof str !== 'string' || str.length <= maxLength) {
    return str
  }
  return str.substring(0, maxLength) + '...'
}

export function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms))
}

export function escapeHtml(str) {
  if (str === null || str === undefined) return ''
  return String(str).replace(/[<>&'"]/g, (c) => {
    switch (c) {
      case '<':
        return '&lt;'
      case '>':
        return '&gt;'
      case '&':
        return '&amp;'
      case "'":
        return '&apos;'
      case '"':
        return '&quot;'
    }
  })
}

// NEW FUNCTION ADDED
export function groupItemsByCountry(items, countryKey) {
  if (!items) return {}
  return items.reduce((acc, item) => {
    const country = item[countryKey] || 'Unknown'
    if (!acc[country]) {
      acc[country] = []
    }
    acc[country].push(item)
    return acc
  }, {})
}

```

## 📄 src/lib/utils/hooks.js
*Lines: 9, Size: 387 Bytes*

```javascript
// packages/utils-shared/src/hooks.js
'use client'

// DEFINITIVE FIX: Replace wildcard exports with explicit, named exports.
export { useDebounce } from '../../hooks/use-debounce.js'
export { useHasHydrated } from '../../hooks/use-has-hydrated.js'
export { usePushManager } from '../../hooks/use-push-manager.js'
export { useRealtimeUpdates } from '../../hooks/use-realtime-updates.js'

```

## 📄 src/lib/utils/index.js
*Lines: 10, Size: 377 Bytes*

```javascript
// packages/utils-shared/src/index.js
'use client'

// DEFINITIVE FIX: Replace wildcard exports with explicit, named exports.
export { cn, truncateString, sleep, escapeHtml, groupItemsByCountry } from './helpers.js'

export { getCountryFlag } from './countries.js'
export { languageList, languageMap } from './languages.js'
export { apiCallTracker } from './apiCallTracker.js'

```

## 📄 src/lib/utils/languages.js
*Lines: 6, Size: 251 Bytes*

```javascript
// packages/utils-shared/src/languages.js (NEW FILE)
import languageData from './data/languages.json' with { type: 'json' }

export const languageList = Object.keys(languageData).sort()
export const languageMap = new Map(Object.entries(languageData))

```

## 📄 src/lib/utils/logger.js
*Lines: 42, Size: 1.15 KB*

```javascript
let loggerInstance

const createSimpleLogger = () => {
  const simpleLogger = {}
  const levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal']
  levels.forEach((level) => {
    const consoleMethod = level === 'trace' || level === 'debug' ? 'log' : level
    simpleLogger[level] = (...args) => {
      console[consoleMethod](`[${level.toUpperCase()}]`, ...args)
    }
  })
  return simpleLogger
}
export function initializeLogger(logDirectory = null) {
  if (loggerInstance) {
    return loggerInstance
  }
  if (process.env.NEXT_RUNTIME) {
    console.log('Detected Next.js runtime. Initializing safe console logger.')
    loggerInstance = createSimpleLogger()
    return loggerInstance
  }
}
export const logger = new Proxy(
  {},
  {
    get(target, prop) {
      if (loggerInstance) {
        return loggerInstance[prop]
      }
      const defaultLogPath = path.resolve(process.cwd(), 'logs')
      initializeLogger(defaultLogPath)
      return loggerInstance[prop]
    },
  }
)
export function reinitializeLogger(logDirectory, extraStreams = []) {
  loggerInstance = null
  loggerInstance = initializeLogger(logDirectory, extraStreams)
  return loggerInstance
}

```

## 📄 src/middleware.js
*Lines: 12, Size: 392 Bytes*

```javascript
import { NextResponse } from 'next/server'
export function middleware(request) {
  const requestHeaders = new Headers(request.headers)
  if (process.env.NODE_ENV === 'development') {
    requestHeaders.set('x-dev-mode', 'true')
  }
  return NextResponse.next({ request: { headers: requestHeaders } });
}
export const config = {
  matcher: ['/((?!_next/static|_next/image|favicon.ico).*)'],
}

```

## 📄 tailwind.config.js
*Lines: 99, Size: 3.02 KB*

```javascript
// Full Path: headlines/tailwind.config.js
const { fontFamily } = require('tailwindcss/defaultTheme')

/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ['class'],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px',
      },
    },
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      fontFamily: {
        sans: ['var(--font-sans)', ...fontFamily.sans],
        serif: ['Merriweather', 'serif'],
      },
      keyframes: {
        'accordion-down': {
          from: { height: '0' },
          to: { height: 'var(--radix-accordion-content-height)' },
        },
        'accordion-up': {
          from: { height: 'var(--radix-accordion-content-height)' },
          to: { height: '0' },
        },
        'fade-in-up': {
          '0%': { opacity: '0', transform: 'translateY(10px)' },
          '100%': { opacity: '1', transform: 'translateY(0)' },
        },
        shake: {
          '0%, 100%': { transform: 'translateX(0)' },
          '20%, 60%': { transform: 'translateX(-5px)' },
          '40%, 80%': { transform: 'translateX(5px)' },
        },
        pulse: {
          '0%, 100%': { opacity: 1, transform: 'scale(1)' },
          '50%': { opacity: 0.7, transform: 'scale(0.95)' },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
        'fade-in-up': 'fade-in-up 0.5s ease-out forwards',
        shake: 'shake 0.5s ease-in-out',
        pulse: 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
      },
    },
  },
  plugins: [require('tailwindcss-animate'), require('@tailwindcss/typography')],
}

```


================================================================================

# 📦 PACKAGE: PIPELINE

# 📁 PROJECT DIRECTORY STRUCTURE

Total: 106 files, 31 directories

```
headlines/
├── 📁 .github/
│   └── 📁 workflows/
│       ├── 📄 fly-deploy.yml
│       └── 📄 run-pipeline.yml
├── 📁 scripts/
│   ├── 📁 infrastructure/
│   │   └── 📄 setFlySecrets.sh
│   ├── 📁 maintenance/
│   │   ├── 📄 backfill-event-article-countries.js
│   │   ├── 📄 backfill-event-classifications.js
│   │   ├── 📄 backfill-suggestion-terms.js
│   │   ├── 📄 clean-e24-headlines.js
│   │   ├── 📄 delete-today.js
│   │   ├── 📄 fix-event-countries.js
│   │   ├── 📄 pipeline-correct-countries.js
│   │   ├── 📄 recalculate-analytics.js
│   │   ├── 📄 reprocess-lost-articles.js
│   │   └── 📄 reset-source-analytics.js
│   ├── 📁 migrations/
│   │   ├── 📄 V1_Fix_Scraper_Selectors.js
│   │   ├── 📄 V2_Clean_Opportunity_Reasons.js
│   │   ├── 📄 V3_Fix_E24_Scraper.js
│   │   └── 📄 V4_Fix_E24_Scraper_Definitive.js
│   ├── 📁 push/
│   │   └── 📄 send-test-push.js
│   ├── 📁 results/
│   │   ├── 📄 list-events.js
│   │   └── 📄 send-last-events.js
│   ├── 📁 scripts/
│   │   └── 📄 list.js
│   ├── 📁 seed/
│   │   ├── 📁 data/
│   │   │   └── 📄 denmark.json
│   │   ├── 📁 lib/
│   │   │   ├── 📄 denmark-richlist-data-loader.js
│   │   │   ├── 📄 enrich-thin-profile.js
│   │   │   ├── 📄 event-chunker.js
│   │   │   ├── 📄 pipeline-injector.js
│   │   │   ├── 📄 richlist-data-loader.js
│   │   │   ├── 📄 script-init.js
│   │   │   ├── 📄 synthetic-article-builder.js
│   │   │   └── 📄 user-interact.js
│   │   ├── 📄 ingest-denmark-richlist.js
│   │   ├── 📄 ingest-richlist.js
│   │   ├── 📄 seed-admin-user.js
│   │   ├── 📄 seed-countries.js
│   │   ├── 📄 seed-settings.js
│   │   ├── 📄 seed-test-user.js
│   │   └── 📄 sync-test-user-subscriptions.js
│   ├── 📁 sources/
│   │   ├── 📄 analyze-sources.js
│   │   ├── 📄 browse.js
│   │   ├── 📄 check-danish-sources.js
│   │   ├── 📄 discover.js
│   │   ├── 📄 list-sources.js
│   │   ├── 📄 maintain.js
│   │   ├── 📄 scrape-many.js
│   │   ├── 📄 scrape-one.js
│   │   └── 📄 update.js
│   ├── 📁 subscribers/
│   │   ├── 📄 list.js
│   │   └── 📄 update.js
│   ├── 📁 test-pipeline/
│   │   └── 📄 test-payload.js
│   ├── 📁 tools/
│   │   ├── 📄 calculate-watchlist-hits.js
│   │   ├── 📄 diagnose-stuck-articles.js
│   │   └── 📄 get-db-stats.js
│   ├── 📁 watchlist/
│   │   └── 📄 list.js
│   ├── 📄 mongo-backup.sh
│   ├── 📄 mongo-restore.sh
│   ├── 📄 purge-opportunities.js
│   └── 📄 reset-admin-password.cjs
├── 📁 src/
│   ├── 📁 config/
│   │   ├── 📄 dynamicConfig.js
│   │   ├── 📄 index.js
│   │   └── 📄 PEFirms.json
│   ├── 📁 modules/
│   │   ├── 📁 dataStore/
│   │   │   └── 📄 index.js
│   │   ├── 📁 email/
│   │   │   ├── 📁 components/
│   │   │   │   ├── 📁 supervisor/
│   │   │   │   │   ├── 📄 costSummary.js
│   │   │   │   │   ├── 📄 databaseTables.js
│   │   │   │   │   ├── 📄 enrichmentFunnel.js
│   │   │   │   │   ├── 📄 judgeVerdict.js
│   │   │   │   │   ├── 📄 scraperHealth.js
│   │   │   │   │   └── 📄 supervisorEmailBodyBuilder.js
│   │   │   │   ├── 📄 articleFormatter.js
│   │   │   │   ├── 📄 emailBodyBuilder.js
│   │   │   │   └── 📄 eventFormatter.js
│   │   │   ├── 📁 templates/
│   │   │   │   └── 📄 supervisorWrapper.js
│   │   │   ├── 📄 constants.js
│   │   │   ├── 📄 emailDispatcher.js
│   │   │   └── 📄 index.js
│   │   ├── 📁 notifications/
│   │   │   ├── 📄 emailDispatcher.js
│   │   │   ├── 📄 index.js
│   │   │   └── 📄 pushService.js
│   │   └── 📁 statistics/
│   ├── 📁 pipeline/
│   │   ├── 📁 submodules/
│   │   │   ├── 📁 commit/
│   │   │   │   ├── 📄 1_judgeOutput.js
│   │   │   │   ├── 📄 2_saveResults.js
│   │   │   │   ├── 📄 3_triggerNotifications.js
│   │   │   │   └── 📄 4_updateSourceAnalytics.js
│   │   │   ├── 📄 opportunityUpserter.js
│   │   │   ├── 📄 processSingleArticle.js
│   │   │   └── 📄 triggerSelectorRepair.js
│   │   ├── 📄 1_preflight.js
│   │   ├── 📄 2_scrapeAndFilter.js
│   │   ├── 📄 3_assessAndEnrich.js
│   │   ├── 📄 4_clusterAndSynthesize.js
│   │   ├── 📄 5_commitAndNotify.js
│   │   ├── 📄 6_suggestNewWatchlistEntities.js
│   │   └── 📄 7_selfHealAndOptimize.js
│   ├── 📁 utils/
│   │   ├── 📄 auditLogger.js
│   │   ├── 📄 errorStream.js
│   │   ├── 📄 housekeeping.js
│   │   ├── 📄 pipelineLogger.js
│   │   ├── 📄 rag.js
│   │   └── 📄 reportSections.js
│   ├── 📄 app.js
│   └── 📄 orchestrator.js
├── 📄 .gitignore
├── 📄 .npmrc
├── 📄 headlines-monorepo@1.0.0
├── 📄 jest.config.js
├── 📄 npm
├── 📄 package.json
└── 📄 run.sh
```

# 📋 PROJECT METADATA

**Generated**: 2025-09-29T13:20:36.387Z
**Repository Path**: /home/mark/Repos/projects/headlines/apps/pipeline
**Total Files**: 106
**Package**: @headlines/pipeline@1.0.0




---


## 📄 .github/workflows/fly-deploy.yml
*Lines: 28, Size: 845 Bytes*

```yaml
# See https://fly.io/docs/app-guides/continuous-deployment-with-github-actions/

name: Fly Deploy
on:
  push:
    branches:
      - main
jobs:
  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    concurrency: deploy-group
    steps:
      - uses: actions/checkout@v4
      
      # Step 1: Install flyctl using the official installer.
      - name: Install flyctl
        run: |
          curl -L https://fly.io/install.sh | sh
          # Step 2: Add flyctl to the PATH for subsequent steps.
          # This is the officially recommended and robust method.
          echo "/home/runner/.fly/bin" >> $GITHUB_PATH

      - name: Deploy to Fly.io
        # Now 'flyctl' can be called directly because its location is in the PATH.
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
```

## 📄 .github/workflows/run-pipeline.yml
*Lines: 39, Size: 1.34 KB*

```yaml
name: Run Pipeline on Schedule

on:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab
  schedule:
    # IMPORTANT: GitHub schedules run on UTC time.
    # 10:00 Copenhagen (CEST, UTC+2) is 08:00 UTC
    # 16:30 Copenhagen (CEST, UTC+2) is 14:30 UTC
    - cron: '25 11 * * *'
    - cron: '25 12 * * *'
    - cron: '25 13 * * *'
    - cron: '25 16 * * *'

jobs:
  run-on-fly:
    name: Start a Fly Machine to Run the Pipeline
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out your repository's code
      - uses: actions/checkout@v4
      
      # Step 2: Install flyctl and add it to the PATH.
      - name: Install flyctl
        run: |
          curl -L https://fly.io/install.sh | sh
          echo "/home/runner/.fly/bin" >> $GITHUB_PATH
        
      # Step 3: Run the machine command.
      - name: Start a temporary machine and wait for completion
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          # 'flyctl' can now be called directly.
          # MODIFIED: Replaced --autodestroy with --rm, the original and more compatible flag.
          # This ensures the machine is automatically destroyed server-side upon completion.
          flyctl machine run . --region lhr --memory 2048 --rm
          
          echo "The machine has completed its run and has been destroyed."
```

## 📄 .gitignore
*Lines: 31, Size: 360 Bytes*

```
# Monorepo-level ignores
node_modules
future
logs
script.sh
.DS_Store
norway.json
norway.backup
debug_html
papers.json
workbox-*
*.pem
*.log*
.env*
!/.env.template

# Apps
apps/admin/.next
apps/admin/out
apps/admin/build
apps/admin/.vercel

# Pipeline
apps/pipeline/debug_html
apps/pipeline/logs

# Packages
packages/**/node_modules
packages/**/*.tsbuildinfo


```

## 📄 .npmrc
*Lines: 2, Size: 22 Bytes*

```
legacy-peer-deps=true

```

## 📄 headlines-monorepo@1.0.0
*Lines: 1, Size: 0 Bytes*

```

```

## 📄 jest.config.js
*Lines: 10, Size: 217 Bytes*

```javascript
// apps/pipeline/jest.config.js (version 1.0.0)
/** @type {import('jest').Config} */
const config = {
  verbose: true,
  // This is necessary to handle ES Modules correctly
  transform: {},
};

export default config;

```

## 📄 npm
*Lines: 1, Size: 0 Bytes*

```

```

## 📄 package.json
*Lines: 57, Size: 2.54 KB*

```json
{
  "name": "@headlines/pipeline",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "pipeline": "./run.sh src/app.js --",
    "cli:help": "./run.sh scripts/scripts/list.js",
    "test": "jest",
    "db:seed:all": "./run.sh scripts/seed/seed-settings.js && ./run.sh scripts/seed/seed-countries.js && ./run.sh scripts/seed/seed-admin-user.js",
    "db:seed:settings": "./run.sh scripts/seed/seed-settings.js",
    "db:seed:countries": "./run.sh scripts/seed/seed-countries.js",
    "db:seed:admin": "./run.sh scripts/seed/seed-admin-user.js",
    "maintenance:delete-today": "./run.sh scripts/maintenance/delete-today.js --",
    "maintenance:reprocess": "./run.sh scripts/maintenance/reprocess-lost-articles.js",
    "maintenance:fix-countries": "./run.sh scripts/maintenance/fix-event-countries.js",
    "maintenance:backfill-countries": "./run.sh scripts/maintenance/backfill-event-article-countries.js",
    "results:list-events": "./run.sh scripts/results/list-events.js",
    "results:send-last-events": "./run.sh scripts/results/send-last-events.js --",
    "subscribers:list": "./run.sh scripts/subscribers/list.js",
    "subscribers:update": "./run.sh scripts/subscribers/update.js --",
    "watchlist:list": "./run.sh scripts/watchlist/list.js --",
    "sources:list": "./run.sh scripts/sources/list.js --",
    "sources:scrape-one": "./run.sh scripts/sources/scrape-one.js --",
    "sources:scrape-many": "./run.sh scripts/sources/scrape-many.js --",
    "sources:discover": "./run.sh scripts/sources/discover.js --",
    "sources:maintain": "./run.sh scripts/sources/maintain.js",
    "sources:update": "./run.sh scripts/sources/update.js --",
    "sources:browse": "./run.sh scripts/sources/browse.js --",
    "tools:diagnose": "./run.sh scripts/tools/diagnose-stuck-articles.js"
  },
  "dependencies": {
    "@headlines/ai-services": "workspace:*",
    "@headlines/config": "workspace:*",
    "@headlines/data-access": "workspace:*",
    "@headlines/models": "workspace:*",
    "@headlines/prompts": "workspace:*",
    "@headlines/scraper-logic": "workspace:*",
    "@headlines/utils-server": "workspace:*",
    "@headlines/utils-shared": "workspace:*",
    "@pinecone-database/pinecone": "^6.1.2",
    "bcryptjs": "^2.4.3",
    "playwright": "^1.45.1",
    "ansi-colors": "^4.1.3",
    "dotenv": "^16.4.5",
    "cli-progress": "^3.12.0",
    "date-fns": "^3.6.0",
    "jest": "^29.7.0",
    "moment": "^2.30.1",
    "moment-duration-format": "^2.3.2",
    "mongoose": "^8.18.2",
    "p-limit": "^5.0.0",
    "pino": "^9.2.0",
    "yargs": "^17.7.2"
  }
}

```

## 📄 run.sh
*Lines: 41, Size: 1.58 KB*

```bash
#!/bin/bash
# This is the definitive, robust runner script for all pipeline tasks.
# It is designed to be called from the monorepo root (e.g., via `pnpm --filter`).
# It correctly sets up the environment and executes the target script with all arguments.

# Get the directory of this script to reliably find the monorepo root.
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
MONOREPO_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"

# The first argument ($1) is the target script path, relative to the pipeline app's root.
# Example: "src/app.js"
TARGET_SCRIPT_RELATIVE=$1

# The full, unambiguous path to the target script from the monorepo root.
# Example: "apps/pipeline/src/app.js"
TARGET_SCRIPT_FULL="apps/pipeline/${TARGET_SCRIPT_RELATIVE}"

# Remove the first argument (the script path) from the list of arguments.
shift

# --- START OF THE FIX ---
# This loop consumes all leading "--" arguments passed by pnpm or the package.json script.
# It ensures that only the user-provided flags are passed to the Node.js script.
while [[ "$1" == "--" ]]; do
  shift
done
# --- END OF THE FIX ---

# Immediately change to the monorepo root. This is critical for dotenv and node module resolution.
cd "$MONOREPO_ROOT"

echo "Executing script: ${TARGET_SCRIPT_FULL}"
echo "With arguments: $@"
echo "---"

# Set the environment variable that all scripts check for.
export IS_PIPELINE_RUN=true

# Use dotenv-cli to load the .env file from the root, then execute the target script
# with its full path, passing along all remaining arguments.
pnpm exec dotenv -e ./.env -- node "$TARGET_SCRIPT_FULL" "$@"
```

## 📄 scripts/infrastructure/setFlySecrets.sh
*Lines: 88, Size: 2.23 KB*

```bash
#!/bin/bash
# scripts/setFlySecrets.sh (version 1.0)

# A script to read a .env file and set the variables as Fly.io secrets.
# It builds a single command to set all secrets at once for efficiency.

# --- Configuration ---
ENV_FILE=".env"

# --- Pre-flight Checks ---

# Check for .env file
if [ ! -f "$ENV_FILE" ]; then
    echo "Error: .env file not found in the current directory."
    exit 1
fi

# Check for flyctl command
if ! command -v fly &> /dev/null
then
    echo "Error: 'fly' command-line tool not found."
    exit 1
fi

if [ ! -f "fly.toml" ]; then
    echo "Error: No fly.toml file found in this directory."
    echo "Please run 'fly launch' first."
    exit 1
fi

APP_NAME=$(grep '^app = ' fly.toml | cut -d "'" -f 2)
if [ -z "$APP_NAME" ]; then
    echo "Error: Could not determine app name from fly.toml."
    exit 1
fi

echo "Reading secrets from '$ENV_FILE' for app '$APP_NAME'..."

# --- Main Logic ---
secrets_args=()
while IFS= read -r line || [ -n "$line" ]; do
    # Skip comments and empty lines
    if [[ "$line" =~ ^#.* ]] || [[ -z "$line" ]]; then
        continue
    fi
    # Handle carriage return for Windows-edited .env files
    line=$(echo "$line" | tr -d '\r')
    key=$(echo "$line" | cut -d '=' -f 1)
    # Correctly extract value, even if it contains '='
    value=$(echo "$line" | sed -e "s/^$key=//")
    if [ -z "$key" ]; then
        continue
    fi
    # Use printf for robust quoting to handle special characters
    secrets_args+=("$(printf "%s=%s" "$key" "$value")")
    echo "  - Found secret: $key"
done < "$ENV_FILE"

if [ ${#secrets_args[@]} -eq 0 ]; then
    echo "No secrets to set were found in '$ENV_FILE'."
    exit 0
fi

echo ""
echo "The following secrets will be set for the app '$APP_NAME':"
for arg in "${secrets_args[@]}"; do
    key=$(echo "$arg" | cut -d '=' -f 1)
    echo "  - $key"
done
echo ""

read -p "Are you sure you want to proceed? (y/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    echo "Operation cancelled by user."
    exit 1
fi

echo "Setting secrets on Fly.io..."
fly secrets set --stage "${secrets_args[@]}"

if [ $? -eq 0 ]; then
    echo "✅ Successfully set ${#secrets_args[@]} secrets. A new release is being created."
else
    echo "❌ An error occurred while setting secrets."
    exit 1
fi
```

## 📄 scripts/maintenance/backfill-event-article-countries.js
*Lines: 85, Size: 2.49 KB*

```javascript
// apps/pipeline/scripts/maintenance/backfill-event-article-countries.js
'use server'

import mongoose from 'mongoose'
import { SynthesizedEvent, Article } from '@headlines/models'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-server'
import colors from 'ansi-colors'
import cliProgress from 'cli-progress'

async function main() {
  await initializeScriptEnv()
  logger.info('🚀 Starting backfill of `country` field for event source articles...')

  try {
    const eventsToFix = await SynthesizedEvent.find({
      'source_articles.country': { $exists: false },
    })
      .select('_id source_articles')
      .lean()

    if (eventsToFix.length === 0) {
      logger.info(
        '✅ No events found needing backfill. All source articles have country data.'
      )
      return
    }

    logger.info(
      colors.yellow(
        `Found ${eventsToFix.length} events to backfill. This may take a moment...`
      )
    )

    const progressBar = new cliProgress.SingleBar({
      format: `Backfilling | ${colors.cyan('{bar}')} | {percentage}% || {value}/{total} Events`,
      barCompleteChar: '\u2588',
      barIncompleteChar: '\u2591',
      hideCursor: true,
    })
    progressBar.start(eventsToFix.length, 0)

    const bulkOps = []
    for (const event of eventsToFix) {
      const links = event.source_articles.map((sa) => sa.link)
      const articles = await Article.find({ link: { $in: links } })
        .select('link country')
        .lean()
      const articleCountryMap = new Map(articles.map((a) => [a.link, a.country]))

      const updatedSourceArticles = event.source_articles.map((sa) => ({
        ...sa,
        country: articleCountryMap.get(sa.link) || null,
      }))

      bulkOps.push({
        updateOne: {
          filter: { _id: event._id },
          update: { $set: { source_articles: updatedSourceArticles } },
        },
      })
      progressBar.increment()
    }
    progressBar.stop()

    if (bulkOps.length > 0) {
      logger.info(`Applying ${bulkOps.length} updates to the database...`)
      const result = await SynthesizedEvent.bulkWrite(bulkOps)
      logger.info(
        colors.green(
          `✅ Backfill complete. Successfully updated ${result.modifiedCount} events.`
        )
      )
    }
  } catch (error) {
    logger.error({ err: error }, 'A critical error occurred during the backfill script.')
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
    }
  }
}

main()

```

## 📄 scripts/maintenance/backfill-event-classifications.js
*Lines: 130, Size: 4.83 KB*

```javascript
// apps/pipeline/scripts/maintenance/backfill-event-classifications.js
'use server'

import mongoose from 'mongoose'
import { SynthesizedEvent } from '../../../../packages/models/src/index.js'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '../../../../packages/utils-server'
import { callLanguageModel } from '../../../../packages/ai-services/src/index.js'
import colors from 'ansi-colors'
import cliProgress from 'cli-progress'
import pLimit from 'p-limit'

// Concurrency limit to avoid overwhelming the AI API
const CONCURRENCY_LIMIT = 5

const getClassificationPrompt =
  () => `You are a sharp, succinct financial analyst. Your sole task is to classify a synthesized news event into one of the predefined categories based on its headline and summary.

**Categories & Definitions:**
- **"New Wealth"**: A direct, confirmed liquidity event (e.g., company sale, M&A, exit).
- **"Future Wealth"**: A high-probability future liquidity event (e.g., confirmed IPO plans, seeking a buyer).
- **"Wealth Mentioned"**: A profile of existing significant wealth (e.g., "Rich List" feature, an article detailing a family's large fortune).
- **"Legal/Dispute"**: A significant legal or financial dispute involving a high-net-worth entity.
- **"Background"**: Important contextual information (e.g., philanthropic donation, succession changes, major personal investments).
- **"Other"**: Any relevant event that does not fit the above categories.

You will be given the event's headline and summary. You MUST respond ONLY with a valid JSON object with a single key "classification".

Example Input:
"Headline: EQT acquires Swedish AI firm Sana for $1.1 billion
Summary: The acquisition delivers a major liquidity event to the founders of Sana..."

Example JSON Response:
{ "classification": "New Wealth" }`

async function main() {
  await initializeScriptEnv()
  const startTime = Date.now()
  logger.info('🚀 Starting backfill of `eventClassification` for past events...')

  try {
    const eventsToUpdate = await SynthesizedEvent.find({
      eventClassification: { $exists: false },
    })
      .select('_id synthesized_headline synthesized_summary')
      .lean()

    if (eventsToUpdate.length === 0) {
      logger.info(
        '✅ No events found that need classification. All items are up to date.'
      )
      return
    }

    logger.info(
      `Found ${eventsToUpdate.length} events to classify. Processing in parallel (limit: ${CONCURRENCY_LIMIT})...`
    )
    const progressBar = new cliProgress.SingleBar({
      format: `Classifying | ${colors.cyan('{bar}')} | {percentage}% || {value}/{total} Events`,
      barCompleteChar: '\u2588',
      barIncompleteChar: '\u2591',
      hideCursor: true,
    })
    progressBar.start(eventsToUpdate.length, 0)

    const limit = pLimit(CONCURRENCY_LIMIT)
    const bulkOps = []

    const processingPromises = eventsToUpdate.map((event) =>
      limit(async () => {
        try {
          const userContent = `Headline: ${event.synthesized_headline}\nSummary: ${event.synthesized_summary}`
          const result = await callLanguageModel({
            modelName: process.env.LLM_MODEL_UTILITY || 'gpt-5-nano',
            systemPrompt: getClassificationPrompt(),
            userContent,
            isJson: true,
          })

          if (result && !result.error && result.classification) {
            bulkOps.push({
              updateOne: {
                filter: { _id: event._id },
                update: { $set: { eventClassification: result.classification } },
              },
            })
            logger.trace(
              `Classification for "${event.synthesized_headline.substring(0, 50)}...": ${result.classification}`
            )
          } else {
            logger.warn(`Failed to get a valid classification for event ID ${event._id}.`)
          }
        } catch (error) {
          logger.error({ err: error }, `Error processing event ID ${event._id}`)
        } finally {
          progressBar.increment()
        }
      })
    )

    await Promise.all(processingPromises)
    progressBar.stop()

    if (bulkOps.length > 0) {
      logger.info(
        `Applying ${bulkOps.length} updates to the database in a single bulk operation...`
      )
      const updateResult = await SynthesizedEvent.bulkWrite(bulkOps)
      const duration = ((Date.now() - startTime) / 1000).toFixed(2)
      logger.info(
        colors.green(
          `✅ Backfill complete in ${duration}s. Successfully updated ${updateResult.modifiedCount} events.`
        )
      )
    } else {
      logger.warn(
        'Backfill process finished, but no successful classifications were generated.'
      )
    }
  } catch (error) {
    logger.error({ err: error }, 'A critical error occurred during the backfill process.')
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
    }
  }
}

main()

```

## 📄 scripts/maintenance/backfill-suggestion-terms.js
*Lines: 113, Size: 4.36 KB*

```javascript
// apps/pipeline/scripts/maintenance/backfill-suggestion-terms.js
'use server'

import mongoose from 'mongoose'
import { WatchlistSuggestion } from '../../../../packages/models/src/index.js'
import dbConnect from '../../../../packages/data-access/src/dbConnect.js'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '../../../../packages/utils-server'
import { callLanguageModel } from '../../../../packages/ai-services/src/index.js'
import colors from 'ansi-colors'
import cliProgress from 'cli-progress'
import pLimit from 'p-limit'

const CONCURRENCY_LIMIT = 5

const getSearchTermPrompt = () => `
You are a search query generation expert for a financial intelligence firm. Your task is to analyze an entity's name, type, and context to generate a list of likely search terms (or "crums") that would identify this entity in news headlines.
**CRITICAL Instructions:**
1.  Analyze the Input: You will receive the entity's formal name, its type (person, family, company), and a brief rationale.
2.  Generate Aliases and Keywords: Think of common abbreviations, alternative spellings, key individuals, or related company names.
3.  Return a List: Your output MUST be an array of 2-4 lowercase strings.
4.  Simplicity is Key: The terms should be simple and likely to appear in text. Good examples: 'haugland', 'syversen', 'nordic capital'. Bad examples: 'the', 'capital', 'family'.
5.  Your response MUST be a valid JSON object with the following structure: { "searchTerms": ["term1", "term2"] }
`

async function main() {
  await initializeScriptEnv()
  logger.info('🚀 Starting one-off backfill of search terms for watchlist suggestions...')

  try {
    const suggestionsToUpdate = await WatchlistSuggestion.find({
      status: 'candidate',
      $or: [{ searchTerms: { $exists: false } }, { searchTerms: { $size: 0 } }],
    }).lean()

    if (suggestionsToUpdate.length === 0) {
      logger.info(
        '✅ No suggestions found that need backfilling. All items are up to date.'
      )
      return
    }

    logger.info(
      `Found ${suggestionsToUpdate.length} suggestions to update. Processing in parallel...`
    )
    const progressBar = new cliProgress.SingleBar({
      format: `Backfilling | ${colors.cyan('{bar}')} | {percentage}% || {value}/{total} Suggestions`,
      barCompleteChar: '\u2588',
      barIncompleteChar: '\u2591',
      hideCursor: true,
    })
    progressBar.start(suggestionsToUpdate.length, 0)

    const limit = pLimit(CONCURRENCY_LIMIT)
    const bulkOps = []

    const processingPromises = suggestionsToUpdate.map((suggestion) =>
      limit(async () => {
        try {
          const userContent = `Entity Name: ${suggestion.name}\nEntity Type: ${suggestion.type}\nRationale: ${suggestion.rationale}`
          const result = await callLanguageModel({
            modelName: process.env.LLM_MODEL_UTILITY || 'gpt-5-nano',
            systemPrompt: getSearchTermPrompt(),
            userContent,
            isJson: true,
          })

          if (result && !result.error && result.searchTerms) {
            bulkOps.push({
              updateOne: {
                filter: { _id: suggestion._id },
                update: { $set: { searchTerms: result.searchTerms } },
              },
            })
            logger.trace(
              `Generated terms for "${suggestion.name}": ${result.searchTerms.join(', ')}`
            )
          } else {
            logger.warn(`Failed to generate terms for "${suggestion.name}".`)
          }
        } catch (error) {
          logger.error({ err: error }, `Error processing suggestion ${suggestion.name}`)
        } finally {
          progressBar.increment()
        }
      })
    )

    await Promise.all(processingPromises)
    progressBar.stop()

    if (bulkOps.length > 0) {
      logger.info(`Applying ${bulkOps.length} updates to the database...`)
      const updateResult = await WatchlistSuggestion.bulkWrite(bulkOps)
      logger.info(
        colors.green(
          `✅ Backfill complete. Successfully updated ${updateResult.modifiedCount} suggestions.`
        )
      )
    } else {
      logger.warn('Backfill process finished, but no successful updates were generated.')
    }
  } catch (error) {
    logger.error({ err: error }, 'A critical error occurred during the backfill process.')
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
    }
  }
}

main()

```

## 📄 scripts/maintenance/clean-e24-headlines.js
*Lines: 58, Size: 1.82 KB*

```javascript
// apps/pipeline/scripts/maintenance/clean-e24-headlines.js
'use server'

import dbConnect from '../../../../packages/data-access/src/dbConnect.js'
import { Article } from '../../../../packages/models/src/index.js'
import { logger, reinitializeLogger } from '../../../../packages/utils-server'
import path from 'path'
import mongoose from 'mongoose'

reinitializeLogger(path.resolve(process.cwd(), 'apps/pipeline/logs'))

async function cleanE24Headlines() {
  await dbConnect()
  logger.info('🚀 Starting E24 headline cleanup...')

  try {
    // This regex is more robust and captures multiple patterns of CSS gibberish.
    const articlesToClean = await Article.find({
      newspaper: 'E24',
      headline: { $regex: /(#title-.*)|(span \{ font-weight)/ },
    })

    if (articlesToClean.length === 0) {
      logger.info('✅ No E24 articles with CSS gibberish found. Database is clean.')
      return
    }

    logger.info(
      `Found ${articlesToClean.length} E24 articles to clean. Preparing bulk update...`
    )

    const bulkOps = articlesToClean.map((article) => {
      // Use a more robust regex to remove the CSS part.
      const cleanedHeadline = article.headline
        .replace(/#title-.*?span \{.*?\}/g, '') // Removes the entire CSS block
        .replace(/#title-.*/, '') // Fallback for simpler cases
        .trim()
      return {
        updateOne: {
          filter: { _id: article._id },
          update: { $set: { headline: cleanedHeadline } },
        },
      }
    })

    const result = await Article.bulkWrite(bulkOps)
    logger.info(`✅ Cleanup complete. Modified ${result.modifiedCount} articles.`)
  } catch (error) {
    logger.error({ err: error }, '❌ E24 headline cleanup failed.')
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
    }
  }
}

cleanE24Headlines()

```

## 📄 scripts/maintenance/delete-today.js
*Lines: 74, Size: 2.19 KB*

```javascript
// apps/pipeline/scripts/maintenance/delete-today.js (version 2.2.0)
undefined
import { logger } from '@headlines/utils-server'
import mongoose from 'mongoose'
import {
  Article,
  SynthesizedEvent,
  Opportunity,
  RunVerdict,
} from '../../../../packages/models/src/index.js'
import dbConnect from '../../../../packages/data-access/src/dbConnect.js'

export async function deleteTodaysDocuments(confirm = false) {
  try {
    const today = new Date()
    today.setUTCHours(0, 0, 0, 0)
    const query = { createdAt: { $gte: today } }
    const modelsToDelete = {
      Articles: Article,
      'Synthesized Events': SynthesizedEvent,
      Opportunities: Opportunity,
      'Run Verdicts': RunVerdict,
    }
    let totalCount = 0

    // [[ Log All Deleted Documents ]] - First, count documents for each model
    const counts = {}
    for (const [modelName, model] of Object.entries(modelsToDelete)) {
      const count = await model.countDocuments(query)
      if (count > 0) {
        counts[modelName] = count
        totalCount += count
      }
    }

    if (totalCount === 0) {
      logger.info('✅ No documents created today were found to delete.')
      return
    }

    if (!confirm) {
      logger.warn(
        `${totalCount} documents found from today. Run with --delete-today or --yes to delete.`
      )
      return
    }

    logger.info(`Deleting ${totalCount} documents from today...`)
    for (const [modelName, model] of Object.entries(modelsToDelete)) {
      if (counts[modelName] > 0) {
        const { deletedCount } = await model.deleteMany(query)
        logger.info(`  ✅ Deleted ${deletedCount} ${modelName}.`)
      }
    }
  } catch (error) {
    logger.error({ err: error }, 'Deletion failed.')
    throw error
  }
}

// Allow script to be run standalone
if (import.meta.url.endsWith(process.argv[1])) {
  ;(async () => {
    const { initializeLogger } = await import('@headlines/utils-server')
    const path = await import('path')
    initializeLogger(path.resolve(process.cwd(), 'apps/pipeline/logs'))

    await dbConnect()
    const confirm = process.argv.includes('--yes')
    await deleteTodaysDocuments(confirm)
    if (mongoose.connection.readyState === 1) await mongoose.disconnect()
  })()
}

```

## 📄 scripts/maintenance/fix-event-countries.js
*Lines: 77, Size: 2.42 KB*

```javascript
// apps/pipeline/scripts/maintenance/fix-event-countries.js
'use server'

import mongoose from 'mongoose'
import { SynthesizedEvent } from '@headlines/models'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-server'
import colors from 'ansi-colors'

async function main() {
  await initializeScriptEnv()
  logger.info('🚀 Starting script to correct event countries based on source articles...')

  try {
    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000)
    const eventsToFix = await SynthesizedEvent.find({
      createdAt: { $gte: twentyFourHoursAgo },
      // Add any other filter if needed, e.g., to find events with non-Danish countries
    }).populate({
      path: 'source_articles',
      model: 'Article', // This assumes you have an 'Article' model linked
      select: 'country',
    })

    if (eventsToFix.length === 0) {
      logger.info('✅ No recent events found needing country correction.')
      return
    }

    logger.info(
      colors.yellow(
        `Found ${eventsToFix.length} events to check and potentially correct.`
      )
    )

    const bulkOps = []
    for (const event of eventsToFix) {
      if (event.source_articles && event.source_articles.length > 0) {
        const sourceCountry = event.source_articles[0].country
        if (sourceCountry && event.country !== sourceCountry) {
          logger.info(`Correction needed for event: "${event.synthesized_headline}"`)
          logger.info(
            `  Current Country: ${colors.red(event.country)} -> Correct Country: ${colors.green(sourceCountry)}`
          )
          bulkOps.push({
            updateOne: {
              filter: { _id: event._id },
              update: { $set: { country: sourceCountry } },
            },
          })
        }
      }
    }

    if (bulkOps.length > 0) {
      logger.info(`Applying ${bulkOps.length} country corrections to the database...`)
      const result = await SynthesizedEvent.bulkWrite(bulkOps)
      logger.info(
        colors.green(`✅ Successfully corrected ${result.modifiedCount} events.`)
      )
    } else {
      logger.info('✅ No corrections were necessary for the found events.')
    }
  } catch (error) {
    logger.error(
      { err: error },
      'A critical error occurred during the correction script.'
    )
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
    }
  }
}

main()

```

## 📄 scripts/maintenance/pipeline-correct-countries.js
*Lines: 98, Size: 3.11 KB*

```javascript
// apps/pipeline/scripts/maintenance/pipeline-correct-countries.js (version 1.0)
'use server'

import mongoose from 'mongoose'
import { Opportunity } from '../../../../packages/models/src/index.js'
import dbConnect from '../../../../packages/data-access/src/dbConnect.js'
import { logger, reinitializeLogger } from '../../../../packages/utils-server'
import { countryCorrectionChain } from '../../../../packages/ai-services/src/index.js'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import colors from 'ansi-colors'
import cliProgress from 'cli-progress'
import path from 'path'

reinitializeLogger(path.resolve(process.cwd(), 'apps/pipeline/logs'))

async function main() {
  await initializeScriptEnv()
  logger.info('🚀 Starting Retrospective Country Data Cleanup (Efficient Mode)...')

  try {
    const allBasedInValues = await Opportunity.distinct('basedIn')

    if (allBasedInValues.length === 0) {
      logger.info('✅ No opportunities with country data found to scan.')
      return
    }

    // Filter down to only values that look incorrect, to save on AI calls
    const invalidValues = allBasedInValues.filter(
      (v) =>
        v &&
        (v.includes('(') || v.includes('/') || v.length > 30 || !/^[a-zA-Z\s]+$/.test(v))
    )

    if (invalidValues.length === 0) {
      logger.info('✅ No invalid-looking country names found. Data appears clean.')
      return
    }

    logger.info(
      `Found ${invalidValues.length} unique potentially invalid 'basedIn' values to correct...`
    )

    const bulkOps = []
    const progressBar = new cliProgress.SingleBar({
      format: `Correcting | ${colors.cyan('{bar}')} | {percentage}% || {value}/{total} Unique Locations`,
      barCompleteChar: '\u2588',
      barIncompleteChar: '\u2591',
      hideCursor: true,
    })
    progressBar.start(invalidValues.length, 0)

    for (const originalCountry of invalidValues) {
      // DEFINITIVE FIX: Call the chain as an async function.
      const result = await countryCorrectionChain({ location_string: originalCountry })

      if (
        result &&
        !result.error &&
        result.country &&
        result.country !== originalCountry
      ) {
        logger.info(`Correction found: "${originalCountry}" -> "${result.country}"`)
        bulkOps.push({
          updateMany: {
            filter: { basedIn: originalCountry },
            update: { $set: { basedIn: result.country } },
          },
        })
      }
      progressBar.increment()
    }
    progressBar.stop()

    if (bulkOps.length > 0) {
      logger.info(
        `Found ${bulkOps.length} unique corrections to apply. Applying bulk update...`
      )
      const result = await Opportunity.bulkWrite(bulkOps)
      logger.info(
        colors.green(
          `✅ Cleanup complete. Modified ${result.modifiedCount} opportunity documents.`
        )
      )
    } else {
      logger.info('✅ No country corrections were needed.')
    }
  } catch (error) {
    logger.error({ err: error }, 'An error occurred during the country cleanup process.')
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
    }
  }
}

main()

```

## 📄 scripts/maintenance/recalculate-analytics.js
*Lines: 86, Size: 2.76 KB*

```javascript
// apps/pipeline/scripts/maintenance/recalculate-analytics.js (version 1.0.0)
import mongoose from 'mongoose'
import { Source } from '../../../../packages/models/src/index.js'
import dbConnect from '../../../../packages/data-access/src/dbConnect.js'
import { reinitializeLogger, logger } from '../../../../packages/utils-server'
import path from 'path'
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'

reinitializeLogger(path.resolve(process.cwd(), 'apps/pipeline/logs'))

async function recalculateAnalytics() {
  const argv = yargs(hideBin(process.argv))
    .option('yes', { type: 'boolean', description: 'Skip confirmation prompt.' })
    .help().argv

  logger.info('🚀 Starting Source Analytics Recalculation...')
  await dbConnect()

  try {
    const sources = await Source.find({}).select('analytics').lean()
    if (sources.length === 0) {
      logger.info('No sources found. Nothing to do.')
      return
    }

    const bulkOps = sources.map((source) => {
      const totalRelevant = source.analytics?.totalRelevant || 0
      return {
        updateOne: {
          filter: { _id: source._id },
          update: {
            $set: {
              'analytics.totalRuns': 0,
              'analytics.totalSuccesses': 0,
              'analytics.totalFailures': 0,
              // Set totalScraped to be at least the number of relevant articles.
              'analytics.totalScraped': Math.max(0, totalRelevant),
            },
          },
        },
      }
    })

    logger.warn(
      `This script will perform the following actions on ${sources.length} sources:`
    )
    logger.warn(
      `  1. Correct 'totalScraped' to equal 'totalRelevant' (ensuring no negative relevance %).`
    )
    logger.warn(`  2. Reset 'totalRuns', 'totalSuccesses', and 'totalFailures' to 0.`)
    logger.warn(
      'This will provide a clean slate for the new, more accurate analytics collection.'
    )

    if (!argv.yes) {
      const readline = require('readline').createInterface({
        input: process.stdin,
        output: process.stdout,
      })
      const answer = await new Promise((resolve) =>
        readline.question('Are you sure you want to proceed? (yes/no): ', resolve)
      )
      readline.close()
      if (answer.toLowerCase() !== 'yes') {
        logger.info('Operation cancelled by user.')
        return
      }
    }

    logger.info('Applying bulk update to the database...')
    const result = await Source.bulkWrite(bulkOps)
    logger.info(
      `✅ Analytics reset complete. Modified ${result.modifiedCount} source documents.`
    )
  } catch (error) {
    logger.fatal({ err: error }, '❌ Failed to recalculate source analytics.')
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
    }
  }
}

recalculateAnalytics()

```

## 📄 scripts/maintenance/reprocess-lost-articles.js
*Lines: 89, Size: 3.22 KB*

```javascript
// apps/pipeline/scripts/maintenance/reprocess-lost-articles.js
'use server'

import mongoose from 'mongoose'
import { Article } from '../../../../packages/models/src/index.js'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-server'
import { runAssessAndEnrich } from '../../src/pipeline/3_assessAndEnrich.js'
import { runClusterAndSynthesize } from '../../src/pipeline/4_clusterAndSynthesize.js'
import { runCommitAndNotify } from '../../src/pipeline/5_commitAndNotify.js'
import colors from 'ansi-colors'

async function main() {
  await initializeScriptEnv()
  logger.info('🚀 Starting reprocessing script for lost articles...')

  try {
    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000)

    // DEFINITIVE QUERY: Look for articles that were just scraped but never processed further.
    // The key indicators are `status: 'scraped'` and the absence of a `synthesizedEventId`.
    const articlesToReprocess = await Article.find({
      status: 'scraped', // This is the state they are in after Stage 2
      synthesizedEventId: { $exists: false },
      createdAt: { $gte: twentyFourHoursAgo },
    }).lean()

    if (articlesToReprocess.length === 0) {
      logger.info('✅ No articles found needing reprocessing.')
      return
    }

    logger.info(
      colors.yellow(`Found ${articlesToReprocess.length} articles to reprocess.`)
    )

    // Create a pipelinePayload to feed into the subsequent stages
    let pipelinePayload = {
      // Start the process with 'articlesForPipeline' so Stage 3 picks them up
      articlesForPipeline: articlesToReprocess,
      runStats: {
        errors: [],
        eventsSynthesized: 0,
        judgeVerdict: null,
        eventsEmailed: 0,
        enrichmentOutcomes: [],
        scraperHealth: [],
      },
      dbConnection: true,
      noCommitMode: false,
    }

    // Run Stage 3: Assess & Enrich
    logger.info('--- REPROCESSING STAGE 3: ASSESS & ENRICH ---')
    pipelinePayload = (await runAssessAndEnrich(pipelinePayload)).payload

    // Run Stage 4: Cluster & Synthesize
    if (pipelinePayload.enrichedArticles && pipelinePayload.enrichedArticles.length > 0) {
      logger.info('--- REPROCESSING STAGE 4: CLUSTER & SYNTHESIZE ---')
      pipelinePayload = (await runClusterAndSynthesize(pipelinePayload)).payload
    } else {
      logger.info('No articles survived the enrichment stage. Halting.')
    }

    // Run Stage 5: Commit & Notify
    if (
      pipelinePayload.synthesizedEvents &&
      pipelinePayload.synthesizedEvents.length > 0
    ) {
      logger.info('--- REPROCESSING STAGE 5: COMMIT & NOTIFY ---')
      pipelinePayload = (await runCommitAndNotify(pipelinePayload)).payload
    } else {
      logger.info('No events were synthesized from the reprocessed articles.')
    }

    logger.info(colors.green('✅ Reprocessing complete!'))
    logger.info(`  - Events created: ${pipelinePayload.runStats.eventsSynthesized}`)
    logger.info(`  - Notifications sent: ${pipelinePayload.runStats.eventsEmailed}`)
  } catch (error) {
    logger.error({ err: error }, 'A critical error occurred during reprocessing.')
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
    }
  }
}

main()

```

## 📄 scripts/maintenance/reset-source-analytics.js
*Lines: 37, Size: 1.09 KB*

```javascript
// scripts/database/maintenance/reset-source-analytics.js (version 1.0)
import 'dotenv/config'
import { connectDatabase, disconnectDatabase } from '../../../src/database.js'
import Source from '../../../models/Source.js'
import { logger } from '@headlines/utils-server'

async function resetAnalytics() {
  await connectDatabase()
  logger.info('🚀 Resetting all source analytics data...')
  try {
    const result = await Source.updateMany(
      {},
      {
        $set: {
          'analytics.totalRuns': 0,
          'analytics.totalSuccesses': 0,
          'analytics.totalFailures': 0,
          'analytics.totalScraped': 0,
          'analytics.totalRelevant': 0,
          'analytics.lastRunHeadlineCount': 0,
          'analytics.lastRunRelevantCount': 0,
          'analytics.lastRunContentSuccess': false,
        },
      }
    )
    logger.info(
      `✅ Analytics reset complete. Modified ${result.modifiedCount} source documents.`
    )
  } catch (error) {
    logger.fatal({ err: error }, '❌ Failed to reset source analytics.')
  } finally {
    await disconnectDatabase()
  }
}

resetAnalytics()

```

## 📄 scripts/migrations/V1_Fix_Scraper_Selectors.js
*Lines: 115, Size: 2.88 KB*

```javascript
// scripts/migrations/V1_Fix_Scraper_Selectors.js (version 1.0)
import 'dotenv/config'
import { connectDatabase, disconnectDatabase } from '../../src/database.js'
import Source from '../../models/Source.js'
import { logger } from '@headlines/utils-server'

const MIGRATION_NAME = 'V1_Fix_Scraper_Selectors'

const UPDATES = [
  // Fix Content Scraper Failures
  {
    name: 'Økonomisk Ugebrev',
    update: { articleSelector: 'div.elementor-widget-theme-post-content' },
  },
  { name: 'NRK', update: { articleSelector: 'div.article-body' } },
  {
    name: 'Dagens Næringsliv',
    update: { articleSelector: 'div[class*="content"] p, .dn-article-body' },
  },

  // Fix Headline Scraper Failures for PE Firms by switching to the enhanced dynamic extractor
  {
    name: 'Maj Invest',
    update: {
      extractionMethod: 'declarative',
      headlineSelector: 'div.news-item',
      linkSelector: 'a',
      headlineTextSelector: 'h3',
    },
  },
  {
    name: 'PAI Partners',
    update: {
      extractionMethod: 'declarative',
      headlineSelector: 'a.news-list__item',
      linkSelector: null, // Link is on the main element
      headlineTextSelector: 'h3',
    },
  },
  {
    name: 'IK Partners',
    update: {
      extractionMethod: 'declarative',
      headlineSelector: 'a.news-card',
      linkSelector: null,
      headlineTextSelector: 'h4',
    },
  },
  {
    name: 'Triton Partners',
    update: {
      extractionMethod: 'declarative',
      headlineSelector: 'div.news-card',
      linkSelector: 'a',
      headlineTextSelector: 'h3.news-card__title',
    },
  },
  {
    name: 'Hg Capital',
    update: {
      extractionMethod: 'declarative',
      headlineSelector: 'div.insights-card__content',
      linkSelector: 'a',
      headlineTextSelector: 'h3',
    },
  },
  {
    name: 'CVC Capital Partners',
    update: {
      extractionMethod: 'declarative',
      headlineSelector: 'a.news-listing-item__container',
      linkSelector: null,
      headlineTextSelector: 'h2',
    },
  },
  {
    name: 'Mergermarket',
    update: {
      extractionMethod: 'declarative',
      headlineSelector: 'div.teasers > a',
      linkSelector: null,
      headlineTextSelector: 'div.title',
    },
  },
]

async function runMigration() {
  logger.info(`🚀 Starting migration: ${MIGRATION_NAME}...`)
  await connectDatabase()

  try {
    const bulkOps = UPDATES.map(({ name, update }) => ({
      updateOne: {
        filter: { name },
        update: { $set: update },
      },
    }))

    if (bulkOps.length > 0) {
      const result = await Source.bulkWrite(bulkOps)
      logger.info(
        `Migration complete. Matched: ${result.matchedCount}, Modified: ${result.modifiedCount}.`
      )
    } else {
      logger.info('No updates to perform.')
    }
  } catch (error) {
    logger.fatal({ err: error }, `❌ Migration ${MIGRATION_NAME} failed!`)
  } finally {
    await disconnectDatabase()
  }
}

runMigration()

```

## 📄 scripts/migrations/V2_Clean_Opportunity_Reasons.js
*Lines: 60, Size: 2.03 KB*

```javascript
// apps/pipeline/scripts/migrations/V2_Clean_Opportunity_Reasons.js (version 1.1.0)
import mongoose from 'mongoose'
import { Opportunity } from '../../../../packages/models/src/index.js'
import dbConnect from '../../../../packages/data-access/src/dbConnect.js'
import { reinitializeLogger, logger } from '../../../../packages/utils-server'
import path from 'path'

reinitializeLogger(path.resolve(process.cwd(), 'apps/pipeline/logs'))

async function cleanOpportunityReasons() {
  logger.info('🚀 Starting V2 Migration: Clean Opportunity `whyContact` field...')
  await dbConnect()

  try {
    // Find documents where whyContact is a string OR is an array containing strings with the date pattern.
    const opportunitiesToMigrate = await Opportunity.find({
      $or: [
        { whyContact: { $type: 'string' } },
        { whyContact: { $regex: /\(as of.*\)$/ } },
      ],
    })

    if (opportunitiesToMigrate.length === 0) {
      logger.info('✅ No documents need migration. Schema is up to date.')
      return
    }

    logger.info(`Found ${opportunitiesToMigrate.length} opportunities to migrate...`)
    const bulkOps = []
    for (const opp of opportunitiesToMigrate) {
      let reasons = Array.isArray(opp.whyContact) ? opp.whyContact : [opp.whyContact]

      // Clean each reason in the array
      const cleanedReasons = reasons
        .filter((r) => typeof r === 'string') // Ensure we only process strings
        .map((r) => r.replace(/\s\(as of.*\)$/, ''))

      bulkOps.push({
        updateOne: {
          filter: { _id: opp._id },
          update: { $set: { whyContact: cleanedReasons } }, // Set the cleaned array
        },
      })
    }

    if (bulkOps.length > 0) {
      const result = await Opportunity.bulkWrite(bulkOps)
      logger.info(`✅ Migration successful. Modified ${result.modifiedCount} documents.`)
    }
  } catch (error) {
    logger.fatal({ err: error }, '❌ Migration V2 failed!')
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
    }
  }
}

cleanOpportunityReasons()

```

## 📄 scripts/migrations/V3_Fix_E24_Scraper.js
*Lines: 42, Size: 1.21 KB*

```javascript
// apps/pipeline/scripts/migrations/V3_Fix_E24_Scraper.js
'use server'

import dbConnect from '../../packages/data-access/src/dbConnect.js'
import { Source } from '@headlines/models'
import { logger, reinitializeLogger } from '@headlines/utils-server'
import path from 'path'

reinitializeLogger(path.resolve(process.cwd(), 'apps/pipeline/logs'))

async function runMigration() {
  await dbConnect()
  logger.info('🚀 Running migration V3: Fix E24 Scraper Selector...')

  try {
    const sourceToUpdate = await Source.findOne({ name: 'E24' })

    if (!sourceToUpdate) {
      logger.warn("Source 'E24' not found. Skipping migration.")
      return
    }

    // The old selector was too broad and picked up style tags.
    // This new selector specifically targets the headline text within the link.
    const newHeadlineTextSelector = 'h3[class^="css-"]'

    sourceToUpdate.headlineTextSelector = newHeadlineTextSelector
    await sourceToUpdate.save()

    logger.info(
      "✅ Successfully updated 'E24' source with new headlineTextSelector:",
      newHeadlineTextSelector
    )
  } catch (error) {
    logger.error({ err: error }, '❌ Migration V3 failed.')
  } finally {
    await mongoose.disconnect()
  }
}

runMigration()

```

## 📄 scripts/migrations/V4_Fix_E24_Scraper_Definitive.js
*Lines: 45, Size: 1.38 KB*

```javascript
// apps/pipeline/scripts/migrations/V4_Fix_E24_Scraper_Definitive.js
'use server'

import dbConnect from '../../../../packages/data-access/src/dbConnect.js'
import { Source } from '../../../../packages/models/src/index.js'
import { logger, reinitializeLogger } from '../../../../packages/utils-server'
import path from 'path'
import mongoose from 'mongoose'

reinitializeLogger(path.resolve(process.cwd(), 'apps/pipeline/logs'))

async function runMigration() {
  await dbConnect()
  logger.info('🚀 Running migration V4: Definitive Fix for E24 Scraper Selector...')

  try {
    const sourceToUpdate = await Source.findOne({ name: 'E24' })

    if (!sourceToUpdate) {
      logger.warn("Source 'E24' not found. Skipping migration.")
      return
    }

    // DEFINITIVE FIX: This selector targets the specific span inside the h3,
    // which contains the headline text, explicitly excluding the style information.
    const newHeadlineTextSelector = 'h3[id^="title-"] > span'

    sourceToUpdate.headlineTextSelector = newHeadlineTextSelector
    await sourceToUpdate.save()

    logger.info(
      "✅ Successfully updated 'E24' source with new headlineTextSelector:",
      newHeadlineTextSelector
    )
  } catch (error) {
    logger.error({ err: error }, '❌ Migration V4 failed.')
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
    }
  }
}

runMigration()

```

## 📄 scripts/mongo-backup.sh
*Lines: 56, Size: 1.31 KB*

```bash
#!/bin/bash
# mongo-backup.sh (version 1.0)
# This script dumps all relevant collections to a timestamped directory.

# --- Configuration ---
BACKUP_DIR="apps/pipeline/backup"
TIMESTAMP=$(date +"%Y-%m-%dT%H-%M-%S")
TARGET_DIR="$BACKUP_DIR/$TIMESTAMP"

# Load MONGO_URI from the root .env file
if [ -f "./.env" ]; then
    export $(grep -v '^#' .env | xargs)
else
    echo "❌ Error: .env file not found in the monorepo root."
    exit 1
fi

if [ -z "$MONGO_URI" ]; then
    echo "❌ Error: MONGO_URI is not set in your .env file."
    exit 1
fi

# --- Main Logic ---
echo "🚀 Starting MongoDB backup..."
echo "Target directory: $TARGET_DIR"

mkdir -p "$TARGET_DIR"

# List of collections to back up
COLLECTIONS=(
    "articles"
    "countries"
    "opportunities"
    "push_subscriptions"
    "run_verdicts"
    "settings"
    "sources"
    "source_suggestions"
    "subscribers"
    "synthesized_events"
    "watchlist_entities"
    "watchlist_suggestions"
)

for collection in "${COLLECTIONS[@]}"; do
    echo "  -> Backing up collection: $collection..."
    mongodump --uri="$MONGO_URI" --collection="$collection" --out="$TARGET_DIR" --gzip
    if [ $? -ne 0 ]; then
        echo "❌ Error backing up collection $collection. Aborting."
        exit 1
    fi
done

echo "✅ Backup complete. All collections saved to $TARGET_DIR"
exit 0

```

## 📄 scripts/mongo-restore.sh
*Lines: 61, Size: 1.53 KB*

```bash
#!/bin/bash
# mongo-restore.sh (version 1.0)
# This script restores all collections from a specified backup directory.

# --- Configuration ---
BACKUP_DIR="apps/pipeline/backup"

# Load MONGO_URI from the root .env file
if [ -f "./.env" ]; then
    export $(grep -v '^#' .env | xargs)
else
    echo "❌ Error: .env file not found in the monorepo root."
    exit 1
fi

if [ -z "$MONGO_URI" ]; then
    echo "❌ Error: MONGO_URI is not set in your .env file."
    exit 1
fi

# --- Main Logic ---
echo "🚀 Starting MongoDB restore..."

# Find the latest backup directory if none is specified
if [ -z "$1" ]; then
    LATEST_BACKUP=$(ls -td $BACKUP_DIR/*/ | head -1)
    if [ -z "$LATEST_BACKUP" ]; then
        echo "❌ No backup directories found in $BACKUP_DIR."
        exit 1
    fi
    echo "No directory specified. Using latest backup: $LATEST_BACKUP"
    SOURCE_DIR=$LATEST_BACKUP
else
    SOURCE_DIR="$BACKUP_DIR/$1"
fi

if [ ! -d "$SOURCE_DIR" ]; then
    echo "❌ Backup directory not found: $SOURCE_DIR"
    exit 1
fi

echo "⚠️ This will overwrite data in the target database."
read -p "Are you sure you want to restore from $SOURCE_DIR? (y/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Restore cancelled by user."
    exit 1
fi

echo "Restoring from $SOURCE_DIR..."
# Use --drop to ensure a clean restore of each collection
mongorestore --uri="$MONGO_URI" --dir="$SOURCE_DIR" --drop --gzip

if [ $? -eq 0 ]; then
    echo "✅ Restore complete."
else
    echo "❌ An error occurred during the restore process."
    exit 1
fi
exit 0

```

## 📄 scripts/purge-opportunities.js
*Lines: 47, Size: 1.39 KB*

```javascript
// scripts/purge-opportunities.js (version 1.0)
import 'dotenv/config'
import { connectDatabase, disconnectDatabase } from '../src/database.js'
import Opportunity from '../models/Opportunity.js'

const WEALTH_THRESHOLD = 20 // in millions USD

async function purgeLowValueOpportunities() {
  console.log('Connecting to database to purge low-value opportunities...')
  await connectDatabase()

  try {
    const filter = {
      $or: [
        { likelyMMDollarWealth: { $lt: WEALTH_THRESHOLD } },
        { likelyMMDollarWealth: { $exists: false } },
        { likelyMMDollarWealth: null },
      ],
    }

    console.log(
      `Searching for opportunities with less than $${WEALTH_THRESHOLD}M in estimated wealth or no wealth amount specified...`
    )

    const count = await Opportunity.countDocuments(filter)

    if (count === 0) {
      console.log('✅ No low-value opportunities found to purge. Database is clean.')
      return
    }

    console.log(`Found ${count} opportunities to purge. Proceeding with deletion...`)

    const result = await Opportunity.deleteMany(filter)

    console.log(`✅ Successfully purged ${result.deletedCount} low-value opportunities.`)
  } catch (error) {
    console.error('❌ An error occurred during the purge process:')
    console.error(error)
  } finally {
    await disconnectDatabase()
    console.log('Database connection closed.')
  }
}

purgeLowValueOpportunities()

```

## 📄 scripts/push/send-test-push.js
*Lines: 93, Size: 3 KB*

```javascript
// scripts/send-test-push.js (version 1.0)
/**
 * A utility script to send a test push notification to all subscribed users.
 * This is useful for debugging the push notification flow end-to-end.
 *
 * Usage:
 * 1. Ensure your .env file is populated with the correct VAPID keys and MONGO_URI.
 * 2. Run the script from the root of your backend project: `node scripts/send-test-push.js`
 */

import 'dotenv/config'
import webpush from 'web-push'
import mongoose from 'mongoose'
import PushSubscription from '../../models/PushSubscription.js'
import { logger } from '@headlines/utils-server'

const { VAPID_SUBJECT, VAPID_PUBLIC_KEY, VAPID_PRIVATE_KEY, MONGO_URI } = process.env

async function run() {
  // --- 1. Validate Configuration ---
  if (!VAPID_PUBLIC_KEY || !VAPID_PRIVATE_KEY || !VAPID_SUBJECT || !MONGO_URI) {
    logger.fatal(
      'Missing required environment variables (VAPID keys and MONGO_URI). Aborting.'
    )
    process.exit(1)
  }
  logger.info('VAPID and MongoDB configuration found.')

  webpush.setVapidDetails(VAPID_SUBJECT, VAPID_PUBLIC_KEY, VAPID_PRIVATE_KEY)

  // --- 2. Connect to Database ---
  try {
    await mongoose.connect(MONGO_URI)
    logger.info('✅ Successfully connected to MongoDB.')
  } catch (error) {
    logger.fatal({ err: error }, '❌ Failed to connect to MongoDB. Aborting.')
    process.exit(1)
  }

  // --- 3. Fetch Subscriptions ---
  const subscriptions = await PushSubscription.find().lean()
  if (subscriptions.length === 0) {
    logger.warn('No push subscriptions found in the database. Nothing to do.')
    await mongoose.disconnect()
    process.exit(0)
  }
  logger.info(`Found ${subscriptions.length} subscription(s) to notify.`)

  // --- 4. Prepare and Send Notifications ---
  const notificationPayload = JSON.stringify({
    title: 'Push Notification Test',
    body: `This is a test message sent at ${new Date().toLocaleTimeString('en-US')}.`,
    url: '/',
    icon: '/icons/icon-192x192.png',
  })

  const promises = subscriptions.map((subscription) =>
    webpush
      .sendNotification(subscription, notificationPayload)
      .then(() => {
        logger.info(
          `✅ Successfully sent notification to endpoint: ...${subscription.endpoint.slice(-20)}`
        )
      })
      .catch((error) => {
        if (error.statusCode === 410 || error.statusCode === 404) {
          logger.warn(
            `Subscription expired. Deleting: ...${subscription.endpoint.slice(-20)}`
          )
          return PushSubscription.deleteOne({ _id: subscription._id })
        } else {
          logger.error(
            { err: error },
            `❌ Failed to send notification to endpoint: ...${subscription.endpoint.slice(-20)}`
          )
        }
      })
  )

  await Promise.all(promises)
  logger.info('🚀 Test push notification process completed.')

  // --- 5. Disconnect ---
  await mongoose.disconnect()
  logger.info('MongoDB connection closed.')
  process.exit(0)
}

run().catch((err) => {
  logger.fatal({ err }, 'An unhandled error occurred in the script.')
  process.exit(1)
})

```

## 📄 scripts/reset-admin-password.cjs
*Lines: 74, Size: 2.41 KB*

```
// File: apps/pipeline/scripts/reset-admin-password.cjs (Final, Robust Version)

const dotenv = require('dotenv')
const path = require('path')
const mongoose = require('mongoose')
const bcrypt = require('bcryptjs') // <-- Explicitly require bcryptjs

dotenv.config({ path: path.resolve(__dirname, '../../../../.env') })

const { MONGO_URI, ADMIN_EMAIL, ADMIN_PASSWORD } = process.env
const SALT_WORK_FACTOR = 10

const { Schema } = mongoose
const SubscriberSchema = new Schema(
  {
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    firstName: { type: String, required: true },
    role: { type: String, default: 'user' },
    isActive: { type: Boolean, default: true },
  },
  { timestamps: true, collection: 'subscribers' }
)
const Subscriber =
  mongoose.models.Subscriber || mongoose.model('Subscriber', SubscriberSchema)

async function run() {
  if (!MONGO_URI || !ADMIN_EMAIL || !ADMIN_PASSWORD) {
    console.error(
      '❌ ERROR: MONGO_URI, ADMIN_EMAIL, and ADMIN_PASSWORD must be set in your .env file.'
    )
    process.exit(1)
  }

  const cleanPassword = ADMIN_PASSWORD.replace(/^"|"$/g, '')

  let connection
  try {
    console.log('Connecting to MongoDB...')
    connection = await mongoose.connect(MONGO_URI)
    console.log('✅ MongoDB connection successful.')

    await Subscriber.deleteOne({ email: ADMIN_EMAIL })
    console.log(`✓ Previous user record for ${ADMIN_EMAIL} deleted.`)

    console.log(`Hashing password "${cleanPassword}" for ${ADMIN_EMAIL} with bcryptjs...`)

    // --- THE CRITICAL FIX: HASH THE PASSWORD HERE ---
    const salt = await bcrypt.genSalt(SALT_WORK_FACTOR)
    const hashedPassword = await bcrypt.hash(cleanPassword, salt)
    console.log(`✓ Password hashed successfully.`)

    // Now, save the user with the already-hashed password
    const newUser = await Subscriber.create({
      _id: new mongoose.Types.ObjectId('68d5cb75f9b4fbab29f1e89b'), // Keep a stable ID for consistency
      email: ADMIN_EMAIL,
      password: hashedPassword, // <-- SAVE THE HASHED PASSWORD
      firstName: 'Admin',
      role: 'admin',
      isActive: true,
    })
    console.log(`✅ SUCCESS: Admin user has been created/reset with ID: ${newUser._id}`)
  } catch (error) {
    console.error('❌ CRITICAL FAILURE:', error)
  } finally {
    if (connection) {
      await mongoose.disconnect()
      console.log('Database connection closed.')
    }
  }
}

run()

```

## 📄 scripts/results/list-events.js
*Lines: 35, Size: 1.05 KB*

```javascript
// apps/pipeline/scripts/results/list-events.js (version 2.0)
import dbConnect from '../../packages/data-access/src/dbConnect.js'
import { SynthesizedEvent } from '@headlines/models'
import mongoose from 'mongoose'
import { formatDistanceToNow } from 'date-fns'

async function main() {
  await dbConnect()
  try {
    const events = await SynthesizedEvent.find({})
      .sort({ createdAt: -1 })
      .limit(10)
      .lean()
    if (events.length === 0) {
      console.log('No recent events found.')
    } else {
      console.log('\n--- Last 10 Synthesized Events ---')
      console.table(
        events.map((e) => ({
          Headline: e.synthesized_headline.substring(0, 80),
          Score: e.highest_relevance_score,
          Country: e.country,
          'Key Individuals': (e.key_individuals || []).map((k) => k.name).join(', '),
          Created: `${formatDistanceToNow(new Date(e.createdAt))} ago`,
        }))
      )
    }
  } catch (error) {
    console.error('Failed to list events:', error)
  } finally {
    await mongoose.disconnect()
  }
}
main()

```

## 📄 scripts/results/send-last-events.js
*Lines: 58, Size: 1.83 KB*

```javascript
// apps/pipeline/scripts/results/send-last-events.js (version 2.1.0)
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { initializeSettings } from '@headlines/config'
import { logger } from '@headlines/utils-server'
import { Subscriber, SynthesizedEvent } from '@headlines/models'
import { sendNotifications } from '../../src/modules/notifications/index.js'
import { refreshConfig } from '../../src/config/dynamicConfig.js'
import dbConnect from '@headlines/data-access/dbConnect.js'
import mongoose from 'mongoose'

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('limit', {
      alias: 'l',
      type: 'number',
      description: 'Number of recent, unsent events to dispatch.',
      default: 10,
    })
    .help().argv

  await dbConnect()
  logger.info('🚀 Starting Manual Event Dispatcher...')

  logger.info('Initializing dynamic configuration and settings...')
  await initializeSettings()
  await refreshConfig()
  logger.info('Configuration loaded.')

  try {
    const eventsToSend = await SynthesizedEvent.find({ emailed: false })
      .sort({ createdAt: -1 })
      .limit(argv.limit)
      .lean()

    if (eventsToSend.length === 0) {
      logger.info('✅ No un-emailed events found. All notifications are up to date.')
      return
    }
    logger.info(`Found ${eventsToSend.length} recent, un-emailed event(s) to dispatch.`)

    // The sendNotifications function is designed to handle dispatch to all relevant users
    // based on their country subscriptions. It's the perfect tool for the job.
    await sendNotifications(eventsToSend, [])
  } catch (error) {
    logger.fatal(
      { err: error },
      'A critical error occurred during the manual dispatch process.'
    )
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
    }
  }
}

main()

```

## 📄 scripts/scripts/list.js
*Lines: 52, Size: 2.95 KB*

```javascript
// apps/pipeline/scripts/scripts/list.js (version 3.1.0)
import fs from 'fs';
import path from 'path';
import colors from 'ansi-colors';

const packageJsonPath = path.resolve(process.cwd(), 'apps/pipeline/package.json');
const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
const scripts = packageJson.scripts;

const scriptDescriptions = {
    "start": "Run the main pipeline. Flags: --country, --source, --isRefreshMode, --deleteToday, --noCommitMode, --useTestPayload.",
    "test": "Run the Jest test suite for the pipeline.",
    "db:seed:all": "Run all seeding scripts (settings, countries, admin user).",
    "db:seed:settings": "Seed or update the pipeline settings in the database.",
    "db:seed:countries": "Seed or update the list of countries from the canonical JSON file.",
    "db:seed:admin": "Seed or update the primary admin user.",
    "sources:list": "List sources. Flags: --country, --status [failing|healthy], --json.",
    "sources:scrape-one": "Scrape a single source for debugging. Flags: --source <SourceName>.",
    "sources:scrape-many": "Scrape multiple sources. Flags: --country <CountryName>.",
    "sources:discover": "Crawl a domain to find new news sections. Flags: --url <BaseURL>.",
    "sources:optimize": "Analyze a URL to suggest optimal CSS selectors. Flags: --url <URL>.",
    "sources:update": "Update a field on a source document. Usage: --source <Name> --key <Field> --value <JSONValue>",
    "sources:browse": "Interactively browse a website to find sections and selectors. Usage: --url <URL>",
    "sources:maintain": "Run the autonomous agent to find, fix, and prune sources.",
    "subscribers:list": "List all subscribers in the database.",
    "subscribers:update": "Update a field for a subscriber. Usage: --email <Email> --key <Field> --value <JSONValue>",
    "watchlist:list": "List watchlist entities. Flags: --q <SearchQuery>",
    "watchlist:add-term": "Add a search term to a watchlist entity. Usage: --name <EntityName> --term <SearchTerm>",
    "results:list-events": "Show the 10 most recently created synthesized events.",
    "maintenance:delete-today": "Delete all data created today. Flags: --yes.",
};

console.log(colors.bold.cyan("\n📘 Headlines Pipeline CLI\n"));
console.log("Usage: npm run <command> -w @headlines/pipeline -- [flags]\n");

const groupedScripts = {};
Object.keys(scripts).forEach(key => {
    if (!scriptDescriptions[key] && !key.startsWith('scripts:')) return;
    const [topic] = key.split(':');
    if (!groupedScripts[topic]) groupedScripts[topic] = [];
    groupedScripts[topic].push(key);
});

for (const topic in groupedScripts) {
    const capitalizedTopic = topic.charAt(0).toUpperCase() + topic.slice(1);
    console.log(colors.bold.yellow(`--- ${topic.charAt(0).toUpperCase() + topic.slice(1)} ---`));
    groupedScripts[topic].sort().forEach(scriptName => {
        console.log(`  ${colors.green(scriptName.padEnd(25))} ${scriptDescriptions[scriptName] || ''}`);
    });
    console.log('');
}

```

## 📄 scripts/seed/data/denmark.json
*Lines: 2081, Size: 112.41 KB*

```json
[
  {
    "rank in rich list": "N/A",
    "full name": "Søren Vestergaard-Poulsen",
    "city": "London",
    "event": "A Senior Managing Partner at CVC Capital Partners, one of the world's largest private equity firms. As a key figure in CVC's global investment committee, the Danish executive has built an immense fortune from his share of the carried interest on dozens of multi-billion-euro buyouts over two decades.",
    "net worth": 650000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Joachim Spänner",
    "city": "London",
    "event": "A Danish Partner at Apollo Global Management, a global private equity behemoth. Based in London, he focuses on the Nordic region and has accumulated significant wealth through his senior role in executing major leveraged buyouts and his share in the firm's lucrative profit-sharing structure.",
    "net worth": 350000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Luv Singh",
    "city": "London",
    "event": "A Danish Partner at the global private equity giant KKR (Kohlberg Kravis Roberts & Co.). His wealth has been generated by leading major European technology and software investments and receiving a significant portion of the carried interest from KKR's highly successful European funds.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christoffer Møller",
    "city": "Copenhagen",
    "event": "A Managing Partner at CVC Capital Partners and head of the firm's Copenhagen office. He is one of the most powerful figures in Nordic private equity, and his personal fortune is a direct result of leading successful buyouts and sharing in the substantial profits generated for CVC's investors.",
    "net worth": 300000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Claus Bülow Christensen",
    "city": "London",
    "event": "A Danish executive who became a Partner at Goldman Sachs in London. Reaching the coveted 'Partner' level at Goldman Sachs is one of the most lucrative achievements in finance, entailing a multi-million dollar salary, substantial bonuses, and a share in the firm's exclusive investment pool, creating an immense personal fortune.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christian Frigast",
    "city": "Copenhagen",
    "event": "Co-founder and Senior Partner of Axcel, one of the most influential private equity firms in the Nordic region. He is a founding father of the Danish PE industry, and his DKK 550 million+ fortune comes from decades of successful fund-raising and profitable exits, including Pandora and Vestas.",
    "net worth": 550000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Viggo Mølholm",
    "city": "Copenhagen",
    "event": "Co-founder and was the long-time Managing Partner of Polaris Private Equity. A key figure in the Danish buyout scene, his DKK 400 million+ fortune was built through his share of the firm's carried interest from a long and successful track record of investments in Danish and Swedish mid-market companies.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Casper Breum",
    "city": "Frankfurt",
    "event": "A Danish Partner at the pan-European private equity firm Triton Partners. He has played a key role in the firm's industrial and business services investments. His wealth is a result of his senior position and share in the carried interest from Triton's successful funds.",
    "net worth": 225000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Niels de Coninck-Smith",
    "city": "Copenhagen",
    "event": "A Danish Partner at Verdane, a prominent Northern European growth equity firm. He specializes in technology and software investments, and his wealth has been built through his share of the profits from a portfolio of high-growth tech companies.",
    "net worth": 175000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Dan Rasmussen",
    "city": "Boston",
    "event": "A Danish-American investor who founded the asset management firm Verdad Advisers. He previously worked in private equity at Bain Capital. His wealth comes from his successful quantitative investment strategies and his family's prior business success.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Mads Ryum Larsen",
    "city": "London",
    "event": "A Danish Partner at the London-based international private equity firm 3i Group. He focuses on investments in the consumer sector, and his personal fortune has been generated through his senior role and share of the profits from successful buyouts and exits.",
    "net worth": 200000000
  },
    {
    "rank in rich list": "N/A",
    "full name": "Esben Østergaard",
    "city": "Odense",
    "event": "A co-founder and the key technical mind behind Universal Robots, the company that pioneered the collaborative robot (cobot) industry. He became exceptionally wealthy after the company was sold to the American firm Teradyne for $285 million in 2015. He is now a prominent investor and mentor in the Danish robotics cluster.",
    "net worth": 175000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christian Bason",
    "city": "Copenhagen",
    "event": "An influential figure in public sector innovation. While not a traditional industrialist, he built his wealth and influence as the long-serving CEO of the Danish Design Centre. He is a sought-after speaker and advisor, representing a modern form of wealth built on intellectual capital and global influence.",
    "net worth": 50000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "The Kann-Rasmussen Family Office",
    "city": "Copenhagen",
    "event": "While Lars Erik is the named individual, the broader VKR Group (VELUX) fortune is managed through a complex structure of foundations and a family office. Other descendants of founder Villum Kann Rasmussen hold significant, though less public, wealth and influence through their roles in the foundations that ensure the company's long-term continuity.",
    "net worth": 15800000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Thorvald Stauning",
    "city": "Copenhagen",
    "event": "While primarily known as a historic Prime Minister, his descendants have managed a quiet dynastic fortune. This 'old money' wealth, derived from early 20th-century industrial and political influence, represents one of Denmark's more discreet and long-standing affluent families.",
    "net worth": 120000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "The Founders of Momondo",
    "city": "Copenhagen",
    "event": "The group of founders behind the popular travel search engine Momondo became multi-millionaires after selling the company to the American travel technology giant Priceline Group (now Booking Holdings) for $550 million in 2017. This group includes figures like Thorvald Stigsen and other early partners.",
    "net worth": 250000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "The Due-Hansen Family",
    "city": "Farum",
    "event": "Heirs to the founder of A/S C.C. Jensen (CJC), a global leader in industrial oil filtration systems. This 'hidden champion' of Danish industry has been family-owned for generations, creating a quiet but substantial dynastic fortune.",
    "net worth": 300000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Mads Mikkelsen",
    "city": "Mallorca",
    "event": "Denmark's most successful international male actor. His wealth comes from a long career starring in major Hollywood franchises (James Bond, Star Wars, Marvel), European cinema, and lucrative global advertising campaigns for brands like Carlsberg.",
    "net worth": 95000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Dalgaard",
    "city": "Palo Alto",
    "event": "Founded the enterprise software company SuccessFactors in Denmark, later moving it to the US. He became exceptionally wealthy after selling the company to German software giant SAP for $3.4 billion in 2011. He is now a general partner at the venture capital firm Andreessen Horowitz (a16z).",
    "net worth": 600000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Fløe Nielsen",
    "city": "London",
    "event": "Co-founded the private equity firm Silverfleet Capital. His wealth was generated through carried interest and management fees from decades of successful mid-market buyouts across Europe. He is a prominent figure in the Danish community in London.",
    "net worth": 250000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christian Lanng",
    "city": "San Francisco",
    "event": "Co-founder and former CEO of the fintech unicorn Tradeshift, a global supply chain payments and marketplace platform. His significant on-paper wealth is derived from his large equity stake in the multi-billion dollar company.",
    "net worth": 300000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Michael Seifert",
    "city": "Aarhus",
    "event": "Founder of the e-commerce platform Salling Group (formerly Dansk Supermarked) and a prominent investor. His primary wealth comes from his early online ventures and the subsequent sale of his company, which powered many of Denmark's largest retailers.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "John V. H. Hansen",
    "city": "Copenhagen",
    "event": "Co-founder of the video surveillance software company Milestone Systems. He became a multi-millionaire after the company was acquired by Canon Inc. for a reported sum of over DKK 2 billion (approx. $300 million) in 2014.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Michael Jonathan Grønager",
    "city": "New York",
    "event": "Co-founder and CEO of Chainalysis, a blockchain analysis unicorn that provides data and software to governments and businesses. The company's multi-billion dollar valuation makes him one of the wealthiest Danes in the cryptocurrency space.",
    "net worth": 500000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Asger Aamund",
    "city": "Copenhagen",
    "event": "A prominent Danish businessman and investor who made his fortune in the biotech industry. He founded and later sold a significant stake in the company Bavarian Nordic, and is a well-known public commentator on business and economics.",
    "net worth": 225000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Ulrik Juul Christensen",
    "city": "Boston",
    "event": "Co-founder of Area9 Lyceum, a world leader in adaptive learning technology. His wealth comes from building and selling previous educational technology companies and his significant stake in the highly successful Area9, which serves major corporations and educational institutions globally.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Morten Strunge",
    "city": "Copenhagen",
    "event": "A serial tech entrepreneur who founded the e-book service Mofibo (sold to Storytel) and the mobile operator Onfone (sold to TDC). His fortune comes from these successful exits, and he continues to launch and invest in new ventures, including the podcast platform Podimo.",
    "net worth": 175000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Thrane",
    "city": "Copenhagen",
    "event": "Founder of Thrane & Thrane, a global leader in satellite communication equipment for the maritime industry. He made his fortune when the company was acquired by the British firm Cobham plc for $432 million in 2012.",
    "net worth": 275000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Michael Andersen",
    "city": "Copenhagen",
    "event": "Co-founder of the website content management system company Sitecore. The company was sold to the private equity firm EQT for €1 billion in 2016, a landmark deal that created substantial wealth for its five founders.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christian Kirk Rasmussen",
    "city": "Copenhagen",
    "event": "Founder of the cloud data backup service Keepit. The company has achieved a significant private valuation following major investment rounds from leading venture firms, creating a substantial on-paper fortune for the founder.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "René Rechtman",
    "city": "London",
    "event": "CEO of Moonbug Entertainment, the company behind the children's entertainment phenomenon CoComelon. He became exceptionally wealthy after leading the sale of the company to Blackstone-backed Candle Media for $3 billion in 2021.",
    "net worth": 400000000
  },
    {
    "rank in rich list": "N/A",
    "full name": "Christian Frigast",
    "city": "Copenhagen",
    "event": "A godfather of the Nordic private equity scene. He co-founded Axcel, one of Denmark's largest and most successful private equity firms, in 1994. His immense wealth was built over decades through management fees and, most importantly, the carried interest from dozens of successful buyouts and exits, including Pandora and Vestas.",
    "net worth": 550000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Viggo Mølholm",
    "city": "Copenhagen",
    "event": "Co-founder and was the long-time managing partner of Polaris Private Equity, another major Danish PE firm. Like his counterparts at Axcel, his fortune comes from a long and successful track record of acquiring, growing, and selling Nordic companies, generating significant carried interest.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Søren Vestergaard-Poulsen",
    "city": "London",
    "event": "One of the most successful Danes in international private equity. He built his fortune as a senior managing partner at the global buyout giant CVC Capital Partners in London, where he led numerous multi-billion-euro deals. His wealth is derived from his share of the firm's carried interest.",
    "net worth": 650000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Luv Singh",
    "city": "London",
    "event": "A Danish executive who reached the top tier of global finance as a Partner at KKR (Kohlberg Kravis Roberts & Co.) in London, one of the world's most powerful private equity firms. His wealth was built through his involvement in major European buyouts and his share of the firm's profits.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Mikkel Hippe Brun",
    "city": "San Francisco",
    "event": "A co-founder of the fintech unicorn Tradeshift, alongside Christian Lanng. As a key architect of the company's technology, his significant equity stake represents a substantial on-paper fortune based on the company's multi-billion dollar private valuation.",
    "net worth": 275000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Gert Sylvest",
    "city": "San Francisco",
    "event": "The third co-founder of the supply-chain fintech platform Tradeshift. His foundational role and equity position in the company contribute to a large personal fortune, reflecting the unicorn's success in attracting major venture capital and corporate clients.",
    "net worth": 275000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Niels Bjørn Christiansen",
    "city": "Nordborg",
    "event": "The current CEO of The LEGO Group, brought in as the first non-family member to hold the top post. His significant wealth comes from his previous role as CEO of Danfoss and is now being substantially augmented by one of the largest executive compensation and long-term incentive packages in corporate Denmark.",
    "net worth": 150000000
  },
  {
    "rank in rich list": 27,
    "full name": "Niels Due Jensen",
    "city": "Bjerringbro",
    "event": "Son of the founder and the man who globalized the pump manufacturer Grundfos, serving as its leader for decades. Although he passed control to his son Poul Due Jensen, he remains the family patriarch and holds a major part of the family's DKK 7.9 billion personal stake.",
    "net worth": 1106000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "The Heering Family",
    "city": "Copenhagen",
    "event": "Heirs to the iconic Cherry Heering liqueur brand, a company founded in 1818 that was 'Purveyor to the Royal Danish Court'. While the brand has been sold, the family retains a dynastic fortune built over nearly two centuries, now managed through family offices and other investments.",
    "net worth": 300000000
  },
  {
    "rank in rich list": 7,
    "full name": "André Kasprzak",
    "city": "Bredebro",
    "event": "Son of Hanni Toosbuy Kasprzak and heir to the ECCO footwear empire. As a member of the board and a professional golfer, he is part of the next generation poised to take over the DKK 24.3 billion family-owned global company.",
    "net worth": 3402000000
  },
  {
    "rank in rich list": 7,
    "full name": "Anna Toosbuy Rasch",
    "city": "Bredebro",
    "event": "Daughter of Hanni Toosbuy Kasprzak and designated heir to the ECCO fortune. She is active on the company's board, representing the family's next generation in the leadership of the DKK 24.3 billion global shoe manufacturer.",
    "net worth": 3402000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Heidi Rix",
    "city": "Aarhus",
    "event": "Co-founder of Plenti, a low-cost mobile operator. She and her co-founders became wealthy after selling the company to the telecom giant TDC for DKK 74 million just over a year after its launch, a notable Danish startup exit.",
    "net worth": 20000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "The Fisker & Nielsen Families",
    "city": "Copenhagen",
    "event": "Founding families of Nilfisk, a global leader in professional cleaning equipment founded in 1906. While the company is now publicly listed, the descendants of the founders retain a quiet dynastic fortune from their historical ownership.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "The Foss Widell Family",
    "city": "Copenhagen",
    "event": "Heirs to the founder of the global industrial conglomerate F.L. Smidth & Co., a leader in the cement and mining industries. Though the family's direct control has diminished, their dynastic wealth, built over more than a century, is managed through various foundations and investment vehicles.",
    "net worth": 750000000
  },
    {
    "rank in rich list": "N/A",
    "full name": "Michael Seifert",
    "city": "Copenhagen",
    "event": "Co-founder and was the long-time CEO of Sitecore, the content management system company. Alongside his four co-founders, he became exceptionally wealthy from the landmark €1 billion sale of the company to the private equity firm EQT in 2016.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Ole Vestergaard Rasmussen",
    "city": "Copenhagen",
    "event": "A key technical co-founder of Sitecore. As one of the five founders, he shared in the substantial proceeds from the €1 billion acquisition by EQT, securing a personal fortune in the hundreds of millions of DKK.",
    "net worth": 180000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Thomas Albert",
    "city": "Copenhagen",
    "event": "A co-founder of Sitecore. His foundational role in the company's development and his equity stake resulted in a major personal windfall from the 2016 sale to EQT, making him one of Denmark's quiet tech millionaires.",
    "net worth": 180000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jesper Balser",
    "city": "Copenhagen",
    "event": "A co-founder of PC&C, the company that merged with Damgaard Data to form Navision. He became immensely wealthy following the subsequent sale of Navision to Microsoft for $1.45 billion in 2002, one of the most significant exits in Danish tech history.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Torben Wind",
    "city": "Copenhagen",
    "event": "A co-founder of PC&C, the precursor to the enterprise software giant Navision. The $1.45 billion acquisition by Microsoft made him and his partners, Erik and Preben Damgaard, Jesper Balser, and Peter Bang, some of Denmark's most successful tech entrepreneurs.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Peter Bang (Navision)",
    "city": "Copenhagen",
    "event": "A co-founder of PC&C, which merged to create Navision. His share of the proceeds from the blockbuster $1.45 billion sale to Microsoft established his significant personal fortune. He is distinct from the B&O founder's heir of the same name.",
    "net worth": 400000000
  },
  {
    "rank in rich list": 8,
    "full name": "Jacob Kjær",
    "city": "Låsby",
    "event": "Son of Niels Aage Kjær and a key figure in the next generation of the AVK Group. He is a Group Director and co-owner of the DKK 18 billion valve and hydrant manufacturing empire, personally owning a significant estate transferred from his father.",
    "net worth": 2520000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jørgen Vig Knudstorp",
    "city": "Copenhagen",
    "event": "The former CEO credited with orchestrating the legendary turnaround of The LEGO Group from near-bankruptcy to record profitability. His wealth was built through substantial executive compensation and bonus packages and he now serves as Chairman of the LEGO Brand Group.",
    "net worth": 350000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Tvede",
    "city": "Zug",
    "event": "A well-known Danish investor, serial entrepreneur, and author based in Switzerland. He built his fortune over several decades through successful financial market trading, derivatives, and early-stage investments in technology and biotech companies.",
    "net worth": 200000000
  },
  {
    "rank in rich list": 43,
    "full name": "Steen Hessel",
    "city": "Brande",
    "event": "One of the four brothers who own and run the Ejner Hessel A/S car dealership group. The family shares in the DKK 4.6 billion fortune generated by one of Denmark's largest automotive retailers.",
    "net worth": 644000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Torkil Hviid",
    "city": "Zug",
    "event": "A Danish executive in the commodities sector. He became wealthy as a key partner and trader at the global oil trading giant Glencore, benefiting from the company's highly lucrative IPO. He now resides in Switzerland.",
    "net worth": 275000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Niels Zibrandtsen",
    "city": "Copenhagen",
    "event": "Founder of the global web hosting company Zibra. He made his fortune after selling the company and has since become a prominent investor in technology and a notable art collector, establishing the Zibrandtsen Collection.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Tue Mantoni",
    "city": "London",
    "event": "A Danish executive who built his fortune in the UK. He served as the CEO of the luxury motorcycle brand Triumph, leading it through a period of significant growth. He was previously a director at the private equity firm McKinsey and now invests in startups.",
    "net worth": 125000000
  },
    {
    "rank in rich list": "N/A",
    "full name": "Matthias Kamprad",
    "city": "London",
    "event": "Swedish son of IKEA founder Ingvar Kamprad, but grew up in Denmark and is a Danish speaker. His immense wealth derives from inheriting a major portion of the IKEA empire, specifically Ikano Group, the family's private DKK 100+ billion entity focused on finance, real estate, and retail, which he now chairs.",
    "net worth": 13500000000
  },
  {
    "rank in rich list": 2,
    "full name": "Niels Holch Povlsen",
    "city": "Aarhus",
    "event": "Brother of Anders Holch Povlsen. He holds a significant minority stake in the Bestseller fashion group, which underpins his personal fortune of DKK 0.6 billion (approx. $84 million) as detailed in the provided document.",
    "net worth": 84000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Rasmussen",
    "city": "Sydney",
    "event": "A key Danish figure in global tech. He co-founded Where 2 Technologies, the company that became Google Maps after its acquisition by Google in 2004. His fortune was built on the acquisition proceeds and a long, high-ranking tenure at Google, where he also co-created Google Wave. He is now a prominent angel investor.",
    "net worth": 450000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jesper Buch",
    "city": "Marbella",
    "event": "Founder of the online food delivery service Just Eat. After the company's multi-billion-pound success, he sold his stake and relocated to Spain. He is now one of Denmark's most high-profile angel investors, known for his role on the TV show 'Løvens Hule' (Dragons' Den).",
    "net worth": 350000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jens Bjørn Andersen",
    "city": "Copenhagen",
    "event": "Former Group CEO of the global transport and logistics giant DSV. He accumulated a very significant fortune through long-term incentive programs and exercising stock options during a period where DSV's market value grew exponentially under his leadership.",
    "net worth": 250000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Camilla Færch",
    "city": "Holstebro",
    "event": "An heir to the Færch dynasty (tobacco, plastics). While family infighting and strategic missteps caused the family to drop from the top of the rich lists, individual members like Camilla retain hundreds of millions of DKK from the original sale of Skandinavisk Tobakskompagni and Færch Plast.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Alexander Lacik",
    "city": "Copenhagen",
    "event": "While Swedish, he is a key figure in a major Danish company as the CEO of the jewelry giant Pandora. He has amassed a significant fortune through his executive compensation and substantial stock option packages tied to the company's successful turnaround and growth.",
    "net worth": 120000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Bo Kroll",
    "city": "San Francisco",
    "event": "A Danish technologist who became wealthy as an early and pivotal engineer at Salesforce during its formative years. His fortune was built on stock options that became extremely valuable as Salesforce grew into a global software-as-a-service behemoth.",
    "net worth": 100000000
  },
  {
    "rank in rich list": 14,
    "full name": "Søren Erik Westermann",
    "city": "Espergærde",
    "event": "Part of the family that owned the hearing aid manufacturer Widex. He shares in the family's significant stake in WS Audiology, formed after the merger with Sivantos, and owns a valuable portfolio of private real estate.",
    "net worth": 1988000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "The Due-Hansen Family",
    "city": "Farum",
    "event": "Heirs to the founder of A/S C.C. Jensen (CJC), a global leader in industrial oil filtration systems. This 'hidden champion' of Danish industry has been family-owned for generations, creating a quiet but substantial dynastic fortune.",
    "net worth": 300000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Mads Mikkelsen",
    "city": "Mallorca",
    "event": "Denmark's most successful international male actor. His wealth comes from a long career starring in major Hollywood franchises (James Bond, Star Wars, Marvel), European cinema, and lucrative global advertising campaigns for brands like Carlsberg.",
    "net worth": 95000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Dalgaard",
    "city": "Palo Alto",
    "event": "Founded the enterprise software company SuccessFactors in Denmark, later moving it to the US. He became exceptionally wealthy after selling the company to German software giant SAP for $3.4 billion in 2011. He is now a general partner at the venture capital firm Andreessen Horowitz (a16z).",
    "net worth": 600000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Fløe Nielsen",
    "city": "London",
    "event": "Co-founded the private equity firm Silverfleet Capital. His wealth was generated through carried interest and management fees from decades of successful mid-market buyouts across Europe. He is a prominent figure in the Danish community in London.",
    "net worth": 250000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christian Lanng",
    "city": "San Francisco",
    "event": "Co-founder and former CEO of the fintech unicorn Tradeshift, a global supply chain payments and marketplace platform. His significant on-paper wealth is derived from his large equity stake in the multi-billion dollar company.",
    "net worth": 300000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Michael Seifert",
    "city": "Aarhus",
    "event": "Founder of the e-commerce platform Salling Group (formerly Dansk Supermarked) and a prominent investor. His primary wealth comes from his early online ventures and the subsequent sale of his company, which powered many of Denmark's largest retailers.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "John V. H. Hansen",
    "city": "Copenhagen",
    "event": "Co-founder of the video surveillance software company Milestone Systems. He became a multi-millionaire after the company was acquired by Canon Inc. for a reported sum of over DKK 2 billion (approx. $300 million) in 2014.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Michael Jonathan Grønager",
    "city": "New York",
    "event": "Co-founder and CEO of Chainalysis, a blockchain analysis unicorn that provides data and software to governments and businesses. The company's multi-billion dollar valuation makes him one of the wealthiest Danes in the cryptocurrency space.",
    "net worth": 500000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Asger Aamund",
    "city": "Copenhagen",
    "event": "A prominent Danish businessman and investor who made his fortune in the biotech industry. He founded and later sold a significant stake in the company Bavarian Nordic, and is a well-known public commentator on business and economics.",
    "net worth": 225000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Ulrik Juul Christensen",
    "city": "Boston",
    "event": "Co-founder of Area9 Lyceum, a world leader in adaptive learning technology. His wealth comes from building and selling previous educational technology companies and his significant stake in the highly successful Area9, which serves major corporations and educational institutions globally.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Morten Strunge",
    "city": "Copenhagen",
    "event": "A serial tech entrepreneur who founded the e-book service Mofibo (sold to Storytel) and the mobile operator Onfone (sold to TDC). His fortune comes from these successful exits, and he continues to launch and invest in new ventures, including the podcast platform Podimo.",
    "net worth": 175000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Thrane",
    "city": "Copenhagen",
    "event": "Founder of Thrane & Thrane, a global leader in satellite communication equipment for the maritime industry. He made his fortune when the company was acquired by the British firm Cobham plc for $432 million in 2012.",
    "net worth": 275000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Michael Andersen",
    "city": "Copenhagen",
    "event": "Co-founder of the website content management system company Sitecore. The company was sold to the private equity firm EQT for €1 billion in 2016, a landmark deal that created substantial wealth for its five founders.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christian Kirk Rasmussen",
    "city": "Copenhagen",
    "event": "Founder of the cloud data backup service Keepit. The company has achieved a significant private valuation following major investment rounds from leading venture firms, creating a substantial on-paper fortune for the founder.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "René Rechtman",
    "city": "London",
    "event": "CEO of Moonbug Entertainment, the company behind the children's entertainment phenomenon CoComelon. He became exceptionally wealthy after leading the sale of the company to Blackstone-backed Candle Media for $3 billion in 2021.",
    "net worth": 400000000
  },
    {
    "rank in rich list": "N/A",
    "full name": "Lars Fjeldsoe-Nielsen",
    "city": "London",
    "event": "A key Danish figure in the global tech scene, often called 'Mr. Mobile'. He built his fortune as an early executive at unicorn startups, serving as Head of Mobile for both Dropbox and Uber during their critical hyper-growth phases leading up to their IPOs. He is now a General Partner at the London-based venture capital firm Balderton Capital, investing in the next wave of European tech companies.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Hans Christian Bødker Jensen",
    "city": "Copenhagen",
    "event": "A veteran of the Danish financial sector. He accumulated his significant wealth during his long and influential tenure as the CEO of FIH Erhvervsbank, one of Denmark's major corporate and investment banks. His fortune is the result of decades of top-tier executive compensation, bonuses, and pension schemes.",
    "net worth": 75000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Carsten Dilling",
    "city": "Copenhagen",
    "event": "A high-profile Danish corporate leader who has served as CEO for some of the country's largest companies. His wealth was primarily built during his time as CEO of the national telecom giant TDC (now Nuuday) and through other C-suite and board positions at major corporations like SAS, NNIT, and Telia.",
    "net worth": 90000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jim Hagemann Snabe",
    "city": "Copenhagen",
    "event": "A globally recognized business executive. He built his fortune as the co-CEO of the German software giant SAP. He has since held the prestigious dual chairmanships of Siemens AG in Germany and A.P. Moller-Maersk in Denmark, making him one of the most influential Danish figures in global business.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Morten Lund",
    "city": "Copenhagen",
    "event": "A prolific and often-controversial Danish angel investor and entrepreneur. He made his first major fortune as an early investor in Skype, which he exited before the eBay sale. He has since invested in over 100 startups, experiencing both huge successes and high-profile bankruptcies, but remains a very wealthy figure in the tech scene.",
    "net worth": 80000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Kasper Rørsted",
    "city": "Munich",
    "event": "A top-tier Danish executive who has led major German corporations. He built a substantial fortune as the CEO of the chemical giant Henkel and later as the CEO of the global sportswear brand Adidas, commanding multi-million euro annual compensation packages.",
    "net worth": 175000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Niklas Östberg",
    "city": "Berlin",
    "event": "While Swedish, his wealth is deeply connected to the Danish ecosystem as the co-founder and CEO of Delivery Hero, which acquired the major Danish food delivery service hungry.dk. As a billionaire founder of a major European tech company with a strong Danish presence, he is a relevant figure.",
    "net worth": 1100000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Peter Bang",
    "city": "Copenhagen",
    "event": "An heir to the Bang & Olufsen fortune, a company co-founded by his grandfather, Peter Boas Bang. While the family no longer controls the company, the inherited wealth from its golden era has sustained a significant fortune for the descendants.",
    "net worth": 100000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Erik Damgaard",
    "city": "Copenhagen",
    "event": "An IT entrepreneur who, with his brother Preben, founded Damgaard Data, which later became Navision. He became immensely wealthy after the company was sold to Microsoft for $1.45 billion in 2002. He has since been an active investor in tech, real estate, and restaurants.",
    "net worth": 450000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Preben Damgaard",
    "city": "Copenhagen",
    "event": "Co-founder of Damgaard Data (later Navision). The landmark sale of the company to Microsoft in 2002 for $1.45 billion cemented his place as one of Denmark's wealthiest tech entrepreneurs. He remained an influential board member and investor in the Danish tech scene until his passing in 2022.",
    "net worth": 450000000
  },
    {
    "rank in rich list": "N/A",
    "full name": "Lars Dalgaard",
    "city": "Palo Alto",
    "event": "Founded the enterprise software company SuccessFactors in Denmark, later moving it to the US. He became exceptionally wealthy after selling the company to German software giant SAP for $3.4 billion in 2011. He is now a general partner at the venture capital firm Andreessen Horowitz (a16z).",
    "net worth": 600000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Fløe Nielsen",
    "city": "London",
    "event": "Co-founded the private equity firm Silverfleet Capital. His wealth was generated through carried interest and management fees from decades of successful mid-market buyouts across Europe. He is a prominent figure in the Danish community in London.",
    "net worth": 250000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christian Lanng",
    "city": "San Francisco",
    "event": "Co-founder and former CEO of the fintech unicorn Tradeshift, a global supply chain payments and marketplace platform. His significant on-paper wealth is derived from his large equity stake in the multi-billion dollar company.",
    "net worth": 300000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Michael Seifert",
    "city": "Aarhus",
    "event": "Founder of the e-commerce platform Salling Group (formerly Dansk Supermarked) and a prominent investor. His primary wealth comes from his early online ventures and the subsequent sale of his company, which powered many of Denmark's largest retailers.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "John V. H. Hansen",
    "city": "Copenhagen",
    "event": "Co-founder of the video surveillance software company Milestone Systems. He became a multi-millionaire after the company was acquired by Canon Inc. for a reported sum of over DKK 2 billion (approx. $300 million) in 2014.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Michael Jonathan Grønager",
    "city": "New York",
    "event": "Co-founder and CEO of Chainalysis, a blockchain analysis unicorn that provides data and software to governments and businesses. The company's multi-billion dollar valuation makes him one of the wealthiest Danes in the cryptocurrency space.",
    "net worth": 500000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Asger Aamund",
    "city": "Copenhagen",
    "event": "A prominent Danish businessman and investor who made his fortune in the biotech industry. He founded and later sold a significant stake in the company Bavarian Nordic, and is a well-known public commentator on business and economics.",
    "net worth": 225000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Ulrik Juul Christensen",
    "city": "Boston",
    "event": "Co-founder of Area9 Lyceum, a world leader in adaptive learning technology. His wealth comes from building and selling previous educational technology companies and his significant stake in the highly successful Area9, which serves major corporations and educational institutions globally.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Morten Strunge",
    "city": "Copenhagen",
    "event": "A serial tech entrepreneur who founded the e-book service Mofibo (sold to Storytel) and the mobile operator Onfone (sold to TDC). His fortune comes from these successful exits, and he continues to launch and invest in new ventures, including the podcast platform Podimo.",
    "net worth": 175000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Thrane",
    "city": "Copenhagen",
    "event": "Founder of Thrane & Thrane, a global leader in satellite communication equipment for the maritime industry. He made his fortune when the company was acquired by the British firm Cobham plc for $432 million in 2012.",
    "net worth": 275000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Michael Andersen",
    "city": "Copenhagen",
    "event": "Co-founder of the website content management system company Sitecore. The company was sold to the private equity firm EQT for €1 billion in 2016, a landmark deal that created substantial wealth for its five founders.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christian Kirk Rasmussen",
    "city": "Copenhagen",
    "event": "Founder of the cloud data backup service Keepit. The company has achieved a significant private valuation following major investment rounds from leading venture firms, creating a substantial on-paper fortune for the founder.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "René Rechtman",
    "city": "London",
    "event": "CEO of Moonbug Entertainment, the company behind the children's entertainment phenomenon CoComelon. He became exceptionally wealthy after leading the sale of the company to Blackstone-backed Candle Media for $3 billion in 2021.",
    "net worth": 400000000
  },
    {
    "rank in rich list": "N/A",
    "full name": "Mads Faurholt-Jørgensen",
    "city": "Copenhagen",
    "event": "A serial entrepreneur and co-founder of Nova Founders Capital. He has built and sold numerous companies globally, including the e-commerce giant Lazada (sold to Alibaba). His wealth comes from a string of successful exits and ongoing venture capital activities.",
    "net worth": 300000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Bjarne Riis",
    "city": "Lugano",
    "event": "Former professional cyclist who won the 1996 Tour de France. He accumulated his wealth by founding and later selling the professional cycling team Riis Cycling (formerly Team CSC and Tinkoff-Saxo). He now resides in Switzerland.",
    "net worth": 90000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Claus Meyer",
    "city": "New York",
    "event": "Co-founder of the world-renowned restaurant Noma and a key figure in the New Nordic Cuisine movement. His fortune derives from a vast culinary empire that includes restaurants, bakeries, cookbooks, and the sale of his stake in the Meyer Group.",
    "net worth": 125000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Caroline Wozniacki",
    "city": "Monte Carlo",
    "event": "Former World No. 1 professional tennis player. She amassed a significant fortune through career prize money, lucrative endorsements with brands like Adidas and Rolex, and various business investments.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Henrik Fisker",
    "city": "Los Angeles",
    "event": "A luxury car designer and entrepreneur known for designing iconic cars like the BMW Z8 and Aston Martin DB9. His wealth is tied to his ventures in the electric vehicle space, most notably Fisker Inc., which went public via a SPAC merger.",
    "net worth": 200000000
  },
  {
    "rank in rich list": 10,
    "full name": "Leise Mærsk Mc-Kinney Møller",
    "city": "Copenhagen",
    "event": "Eldest daughter of shipping magnate Mærsk Mc-Kinney Møller and sister to Ane Uggla. She holds a significant, though less public, share in the family's vast fortune derived from the A.P. Moller-Maersk conglomerate.",
    "net worth": 2296000000
  },
  {
    "rank in rich list": 10,
    "full name": "Kirsten Mærsk Mc-Kinney Olufsen",
    "city": "Copenhagen",
    "event": "Youngest daughter of Mærsk Mc-Kinney Møller. Like her sisters, she inherited a substantial part of the Mærsk family's wealth, managed through the family's foundational and holding company structures.",
    "net worth": 2296000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Casper von Koskull",
    "city": "London",
    "event": "A prominent Danish executive in international finance. He served as the CEO of Nordea, the largest financial services group in the Nordic region, and previously held senior roles at Goldman Sachs, accumulating a significant personal fortune.",
    "net worth": 100000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Søren Skou",
    "city": "Copenhagen",
    "event": "Former CEO of A.P. Moller-Maersk. He led the company through its historic transformation from a diversified conglomerate into an integrated logistics company. His compensation and stock holdings during this period resulted in a very large personal fortune.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Stine Bjerregaard",
    "city": "London",
    "event": "Co-founder of the London-based private equity firm Nordic Capital's Copenhagen office and a key figure in European finance. Her successful career and carried interest from numerous major deals have made her one of Denmark's wealthiest female executives.",
    "net worth": 250000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Frederik Tuxen",
    "city": "Vedbæk",
    "event": "Co-founder and the original inventor behind the golf technology company Trackman. While the Eldrup-Jørgensen brothers are the majority owners, Tuxen retains a 15% stake in the company, valued at nearly DKK 1 billion (approx. $140 million).",
    "net worth": 140000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Niklas Zennström",
    "city": "London",
    "event": "While Swedish, he co-founded the Danish-born global success Skype with Janus Friis. The sale of Skype to eBay for $2.6 billion made both founders billionaires and pivotal figures in the Nordic tech scene. He now runs the venture capital firm Atomico.",
    "net worth": 1200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Janus Friis",
    "city": "London",
    "event": "A Danish entrepreneur who co-founded a series of disruptive tech companies, including KaZaA, Skype (sold to eBay), and Joost. His sale of Skype secured his status as a billionaire, and he continues to invest in technology startups.",
    "net worth": 1200000000
  },
    {
    "rank in rich list": "N/A",
    "full name": "David Helgason",
    "city": "Reykjavik",
    "event": "Co-founded the video game engine giant Unity Technologies in Copenhagen. His immense wealth was realized through the company's 2020 IPO, making him a central figure in Denmark's largest modern tech success story, though he is of Icelandic origin.",
    "net worth": 900000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Ulrich",
    "city": "San Francisco",
    "event": "Co-founder and drummer of the iconic heavy metal band Metallica. Born in Denmark, his substantial wealth comes from decades of record sales, global tours, and royalties from one of the most commercially successful bands in history.",
    "net worth": 350000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jan Bech Andersen",
    "city": "Monaco",
    "event": "An investor who made a significant fortune in asset management and private equity. He is well-known in Denmark for his past majority ownership and chairmanship of the football club Brøndby IF and now resides in Monaco.",
    "net worth": 450000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jeppe Rindom",
    "city": "Copenhagen",
    "event": "Co-founder and CEO of the fintech unicorn Pleo, a company that provides smart company cards and expense management solutions. The company's multi-billion dollar valuation has created a significant personal fortune for him on paper.",
    "net worth": 250000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Tommy Ahlers",
    "city": "Copenhagen",
    "event": "An entrepreneur and venture capitalist who made his first fortune selling his mobile social networking site ZYB to Vodafone. He has since been a prominent investor, a 'Dragon' on the Danish version of Dragons' Den ('Løvens Hule'), and served as a government minister.",
    "net worth": 1500000000
  },
  {
    "rank in rich list": 20,
    "full name": "Casper Kirk Johansen",
    "city": "Vejle",
    "event": "Grandson of the LEGO founder and brother of Anders Kirk Johansen. He co-manages the family's DKK 9.1 billion investment firm, Kirk Kapital, which was established from the family's 2007 spin-off from the main LEGO holding company.",
    "net worth": 1708000000
  },
  {
    "rank in rich list": 3,
    "full name": "Mads-Peter Clausen",
    "city": "Nordborg",
    "event": "Third-generation heir to the Danfoss fortune. As a member of the company's board of directors, he represents the family's continued strategic involvement in the DKK 211 billion industrial giant.",
    "net worth": 11858000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jacob Risgaard",
    "city": "Nørresundby",
    "event": "Co-founder of Coolshop, one of Denmark's largest online retailers. He gained national fame as an investor on 'Løvens Hule' and has built a significant fortune from his e-commerce and investment activities.",
    "net worth": 175000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Mia Wagner",
    "city": "Viborg",
    "event": "Co-founder of the Nordic Female Founders group and former investor on 'Løvens Hule'. Her wealth stems from her family's company, Wagner Holding, and her own successful career in law and venture capital.",
    "net worth": 120000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Malene Birger",
    "city": "London",
    "event": "A highly successful fashion designer who founded the eponymous brand By Malene Birger. She made her fortune after selling a majority stake in her company to the IC Group (now part of IC Companys), a transaction mentioned in the document in relation to the Martinsen family.",
    "net worth": 100000000
  },
  {
    "rank in rich list": 10,
    "full name": "Robert Mærsk Uggla",
    "city": "Copenhagen",
    "event": "Grandson of Mærsk Mc-Kinney Møller and current Chairman of A.P. Moller-Maersk. As the family's designated leader for the next generation, he oversees the strategic direction of the shipping and logistics giant.",
    "net worth": 2296000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lone Færch",
    "city": "Holstebro",
    "event": "A key figure in the Færch dynasty, which founded a major tobacco and plastics empire. Although the family has since dropped off the top lists due to internal disputes that eroded the fortune, she and other members remain individually wealthy from the original inheritance.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Nikolaj Coster-Waldau",
    "city": "Copenhagen",
    "event": "A globally recognized Danish actor who accumulated a significant personal fortune primarily from his leading role as Jaime Lannister in the immensely popular HBO series 'Game of Thrones', supplemented by numerous film roles and endorsements.",
    "net worth": 80000000
  },
    {
    "rank in rich list": 2,
    "full name": "Troels Holch Povlsen",
    "city": "Brande",
    "event": "Father of Anders Holch Povlsen and founder of the Bestseller fashion group. While Anders owns the majority, Troels retains a personal fortune valued at DKK 2.2 billion (approx. $308 million) through his own holding company.",
    "net worth": 308000000
  },
  {
    "rank in rich list": 4,
    "full name": "Benedicte Find",
    "city": "Humlebæk",
    "event": "Sister of Niels Peter Louis-Hansen and co-heir to the Coloplast fortune. She shares in the family's controlling stake of the medical device company.",
    "net worth": 10458000000
  },
  {
    "rank in rich list": 5,
    "full name": "Mette Brunsborg",
    "city": "Silkeborg",
    "event": "Daughter of Lars Larsen and sister of Jacob Brunsborg. She is a co-heir to the Lars Larsen Group (Jysk) and holds a 16.5% stake in the family's DKK 43.6 billion retail empire.",
    "net worth": 6104000000
  },
  {
    "rank in rich list": 6,
    "full name": "Nina Østergaard Borris",
    "city": "Middelfart",
    "event": "Daughter of Torben Østergaard-Nielsen and CEO of United Shipping & Trading Company (USTC). She is a designated heir and active leader in the family's DKK 43.6 billion global conglomerate.",
    "net worth": 6104000000
  },
  {
    "rank in rich list": 6,
    "full name": "Mia Østergaard Nielsen",
    "city": "Middelfart",
    "event": "Daughter of Torben Østergaard-Nielsen and Chief Governance Officer at USTC. She shares in the ownership and strategic leadership of the DKK 43.6 billion family business.",
    "net worth": 6104000000
  },
  {
    "rank in rich list": 30,
    "full name": "Susie Grosbøl",
    "city": "Tisvildeleje",
    "event": "Daughter of Mascot International founder John Grosbøl and sister of CEO Michael Grosbøl. She is a co-owner of the highly profitable workwear manufacturer.",
    "net worth": 896000000
  },
  {
    "rank in rich list": "N/A (Formerly 93)",
    "full name": "Kent Arentoft",
    "city": "Copenhagen",
    "event": "Co-owner of the investment firm DSVM Invest alongside Peter Korsholm. His personal fortune declined significantly from DKK 2.0 billion to DKK 750 million due to a downturn in the firm's core businesses, causing him to exit the top 100 list.",
    "net worth": 105000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Mikkel Svane",
    "city": "San Francisco",
    "event": "Co-founder and former CEO of the customer service software company Zendesk. He became a billionaire after leading the company through its IPO and subsequent $10.2 billion acquisition by a private equity consortium in 2022.",
    "net worth": 1300000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Morten Primdahl",
    "city": "Lisbon",
    "event": "Co-founder of Zendesk. He shared in the significant wealth creation from the company's public listing and eventual $10.2 billion sale, securing his status as a billionaire.",
    "net worth": 1100000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Alexander Aghassipour",
    "city": "San Francisco",
    "event": "Co-founder of Zendesk. His stake in the company, from its inception to its $10.2 billion take-private deal, resulted in a personal fortune well over the billion-dollar mark.",
    "net worth": 1100000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jan van de Winkel",
    "city": "Utrecht",
    "event": "Co-founder and CEO of the Danish biotech giant Genmab. While he is Dutch, he founded the company in Copenhagen, and his significant ownership stake in the highly successful antibody therapeutics firm makes him a billionaire figure central to the Danish biotech scene.",
    "net worth": 1400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jesper Buch",
    "city": "Copenhagen",
    "event": "Founder of the online food ordering service Just Eat. He made his fortune from the company's international expansion and eventual multi-billion-pound merger with Takeaway.com. He is now a prominent venture capitalist and media personality in Denmark.",
    "net worth": 350000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lennart Lajboschitz",
    "city": "Copenhagen",
    "event": "Founder of the popular variety store chain Flying Tiger Copenhagen. In 2012, he sold a 70% stake to the private equity firm EQT for a sum that made him a multi-millionaire, and has since invested heavily in real estate and social projects.",
    "net worth": 650000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Peter Holten Mühlmann",
    "city": "Copenhagen",
    "event": "Founder and CEO of the global consumer review platform Trustpilot. He retained a significant stake in the company after its IPO on the London Stock Exchange in 2021, creating a personal fortune valued in the hundreds of millions of dollars.",
    "net worth": 300000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christian Enevoldsen",
    "city": "Singapore",
    "event": "Son of Pandora co-founders Per Enevoldsen and Winnie Liljeborg. He is actively involved in managing the family's vast fortune through their Singapore-based family office, North-East Group.",
    "net worth": 1500000000
  },
    {
    "rank in rich list": 28,
    "full name": "Erling Daell",
    "city": "Copenhagen",
    "event": "Co-owner and heir to the Harald Nyborg and Jem & Fix retail empire. He shares control of the DKK 7.8 billion company with his father, Kurt Daell, and his brother, Njal Daell, and has taken over as chairman.",
    "net worth": 1092000000
  },
  {
    "rank in rich list": 28,
    "full name": "Njal Daell",
    "city": "Odense",
    "event": "Co-owner and heir to the Harald Nyborg and Jem & Fix retail empire. He is active in the family business, sharing ownership of the DKK 7.8 billion group with his father, Kurt, and brother, Erling.",
    "net worth": 1092000000
  },
  {
    "rank in rich list": 37,
    "full name": "Jacob Kunøe",
    "city": "Copenhagen",
    "event": "Son of investor Ib Kunøe and co-owner of the family's DKK 5.2 billion holding company, Consolidated Holdings, which has major stakes in IT firms Atea and Columbus.",
    "net worth": 728000000
  },
  {
    "rank in rich list": 48,
    "full name": "Camilla Barfoed",
    "city": "Odense",
    "event": "Co-owner of the Barfoed Group, a major real estate company in Odense with a portfolio valued at DKK 4.2 billion. She shares ownership and control with her brother, Frederik Barfoed.",
    "net worth": 588000000
  },
  {
    "rank in rich list": 67,
    "full name": "Alexandra Husted-Andersen",
    "city": "Copenhagen",
    "event": "One of three sisters who inherited a DKK 3.5 billion fortune from their father, Stig Husted-Andersen, comprising the medical device firm Codan Medical and a significant, debt-free portfolio of prime real estate.",
    "net worth": 490000000
  },
  {
    "rank in rich list": 67,
    "full name": "Deirdre Husted-Andersen",
    "city": "Copenhagen",
    "event": "The eldest of three sisters who inherited the DKK 3.5 billion Codan Medical and real estate empire from their father, Stig Husted-Andersen.",
    "net worth": 490000000
  },
  {
    "rank in rich list": 81,
    "full name": "Dorte Lund Kaack",
    "city": "Odense",
    "event": "Daughter of Bente Lis and the late Carl Christian Nielsen, co-founder of Micro Matic. She is a board member and co-inheritor of the family's 50% stake in the DKK 5 billion beverage-dispensing equipment company.",
    "net worth": 350000000
  },
  {
    "rank in rich list": 89,
    "full name": "Per Tollestrup Nielsen",
    "city": "Balling",
    "event": "Co-owner of N.C. Nielsen Gruppen, a leading Scandinavian supplier of gaffeltrucks and heavy machinery. He shares ownership of the DKK 2.4 billion company with his brother, Poul Byriel Nielsen.",
    "net worth": 336000000
  },
  {
    "rank in rich list": "N/A (Formerly 94)",
    "full name": "Hans-Bo Hyldig",
    "city": "Copenhagen",
    "event": "Owner of the property development firm FB Gruppen. He fell off the Top 100 list in 2024, with his fortune estimated just below the DKK 2.0 billion threshold, following a downturn in the real estate transaction market.",
    "net worth": 280000000
  },
  {
    "rank in rich list": "N/A (Formerly 89)",
    "full name": "Kaare Danielsen",
    "city": "Copenhagen",
    "event": "Founder and owner of the job portal Jobindex. He dropped off the Top 100 list in 2024 after taking the company private and seeing its valuation fall to DKK 1.9 billion.",
    "net worth": 266000000
  },
  {
    "rank in rich list": "N/A (Formerly 72)",
    "full name": "Morten K. Larsen",
    "city": "Copenhagen",
    "event": "Owner of the steel wholesaler Euro Steel. His family's fortune dropped from DKK 2.5 billion to DKK 1.4 billion due to falling steel prices and market uncertainty, causing him to fall off the Top 100 list.",
    "net worth": 196000000
  },
  {
    "rank in rich list": "N/A (Formerly 82)",
    "full name": "Peter Korsholm",
    "city": "Copenhagen",
    "event": "Co-owner of the investment firm DSVM Invest. His personal fortune fell sharply from DKK 2.3 billion to DKK 1.25 billion following a significant downturn in the firm's transport and raw materials businesses.",
    "net worth": 175000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Per Enevoldsen",
    "city": "Bangkok",
    "event": "Co-founded the global jewelry giant Pandora with his then-wife, Winnie Liljeborg. After the company's IPO, he relocated to Thailand and retains an immense fortune estimated to be in the billions of dollars.",
    "net worth": 1500000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Gunhild Kirk Johansen",
    "city": "Vejle",
    "event": "Sister of Kjeld Kirk Kristiansen and an heir to the LEGO fortune. She received a DKK 7.5 billion spin-off from the main family holding in 2007, which became the basis for the investment company Kirk Kapital, now run by her sons Anders and Casper.",
    "net worth": 1708000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Rebien Sørensen",
    "city": "Copenhagen",
    "event": "Former CEO of the pharmaceutical giant Novo Nordisk. During his tenure, he was frequently named one of the world's best-performing CEOs and accumulated a personal fortune estimated to be in the hundreds of millions of dollars through salary and stock options.",
    "net worth": 500000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Niels-Jørgen Nielsen",
    "city": "Aalborg",
    "event": "Co-founder of the successful retail chain Normal. After selling a majority stake to Bestseller owner Anders Holch Povlsen, he retained a significant minority share, making him a multi-millionaire.",
    "net worth": 400000000
  },
    {
    "rank in rich list": 1,
    "full name": "Kjeld Kirk Kristiansen",
    "city": "Billund",
    "event": "Third-generation owner of LEGO Group. His portion of the family's wealth is primarily held through Kirkbi A/S, the main investment and holding company of the Kirk Kristiansen family. While he has passed on operational control and chairmanship to his son Thomas, he retains a significant ownership stake.",
    "net worth": 11774000000
  },
  {
    "rank in rich list": 1,
    "full name": "Thomas Kirk Kristiansen",
    "city": "Ullerslev",
    "event": "Fourth-generation owner and Chairman of LEGO Group. He holds a 26.15% stake in the family's holding company, Kirkbi A/S, and is actively leading the brand's strategic direction and governance across all its entities, including the LEGO Foundation.",
    "net worth": 13468000000
  },
  {
    "rank in rich list": 1,
    "full name": "Agnete Kirk Thinggaard",
    "city": "Billund",
    "event": "Fourth-generation owner of LEGO Group, holding a 26.00% stake in Kirkbi A/S. She serves as the vice-chair of the holding company and is an accomplished dressage rider.",
    "net worth": 13412000000
  },
  {
    "rank in rich list": 1,
    "full name": "Sofie Kirk Kristiansen",
    "city": "Billund",
    "event": "Fourth-generation owner of LEGO Group. In 2023, she sold a 2% stake in Kirkbi A/S back to the company for DKK 6.3 billion (approx. $900 million) to fund her personal investments in nature conservation and rewilding projects, while retaining a 23.36% ownership stake.",
    "net worth": 12978000000
  },
  {
    "rank in rich list": 2,
    "full name": "Anders Holch Povlsen",
    "city": "Brande",
    "event": "Sole owner of the Bestseller fashion group (including brands like Jack & Jones, Vero Moda) and the Normal retail chain. He is also a major investor in companies like Zalando and ASOS, and is the largest private landowner in Scotland.",
    "net worth": 12026000000
  },
  {
    "rank in rich list": 3,
    "full name": "Jørgen Mads Clausen",
    "city": "Nordborg",
    "event": "Son of Mads Clausen, the founder of the global industrial giant Danfoss. The family retains approximately 40% ownership of the company, which specializes in climate and energy solutions. In 2022, he stepped down as chairman, passing leadership to an external successor.",
    "net worth": 11858000000
  },
  {
    "rank in rich list": 4,
    "full name": "Niels Peter Louis-Hansen",
    "city": "Vedbæk",
    "event": "Son of the founders of Coloplast, a global medical device company. His fortune, primarily derived from a controlling 31.4% stake in Coloplast and a significant holding in Ambu, increased by DKK 18 billion in the past year due to strong share price performance.",
    "net worth": 10458000000
  },
  {
    "rank in rich list": 5,
    "full name": "Jacob Brunsborg",
    "city": "Silkeborg",
    "event": "Inherited the Lars Larsen Group from his father, Lars Larsen, founder of the JYSK retail empire. As chairman, he oversees the group's diverse investments, which include retail, furniture, and a significant golf resort.",
    "net worth": 6104000000
  },
  {
    "rank in rich list": 6,
    "full name": "Torben Østergaard-Nielsen",
    "city": "Middelfart",
    "event": "Founder and owner of United Shipping & Trading Company (USTC), a global conglomerate primarily focused on bunker fuel trading (Bunker Holding), shipping, and logistics. His wealth has been impacted by a DKK 334 million write-down related to the controversial bankruptcy of his subsidiary, Nordic Waste.",
    "net worth": 6104000000
  },
  {
    "rank in rich list": 7,
    "full name": "Hanni Merete Toosbuy Kasprzak",
    "city": "Bredebro",
    "event": "Owner of the global footwear brand ECCO, which she inherited from her father, Karl Toosbuy. Despite public criticism, her decision to maintain operations in Russia following the 2022 invasion has contributed to stable financial performance.",
    "net worth": 3402000000
  },
  {
    "rank in rich list": 8,
    "full name": "Niels Aage Kjær",
    "city": "Galten",
    "event": "Founder of AVK Group, a leading international manufacturer of valves, hydrants, and industrial fittings. He has recently transferred the majority of ownership to his four children, who are all active in the family business.",
    "net worth": 2520000000
  },
  {
    "rank in rich list": 9,
    "full name": "Knud Erik Andersen",
    "city": "Søborg",
    "event": "Founder and majority shareholder of European Energy, a major developer of wind and solar power projects. In 2024, he sold a 20% stake in the company to Mitsubishi HC Capital for DKK 5.2 billion (approx. $740 million), crystallizing a significant portion of his wealth.",
    "net worth": 2380000000
  },
  {
    "rank in rich list": 10,
    "full name": "Ane Mærsk Mc-Kinney Uggla",
    "city": "Copenhagen",
    "event": "Daughter of shipping magnate Mærsk Mc-Kinney Møller and a key figure in the Mærsk family. She chairs the A.P. Møller Foundation, which controls the A.P. Moller-Maersk group. The family's fortune declined by DKK 2.2 billion due to a downturn in the container shipping market.",
    "net worth": 2296000000
  },
  {
    "rank in rich list": 11,
    "full name": "Tais Clausen",
    "city": "Copenhagen",
    "event": "Co-founder of 3Shape, a global leader in 3D scanners and software for the dental industry. A significant portion of his wealth comes from a partial sale of the company to private equity firm EQT and a DKK 753 million dividend distribution in 2024.",
    "net worth": 2254000000
  },
  {
    "rank in rich list": 12,
    "full name": "Ib Nymark Hegelund",
    "city": "Lugano",
    "event": "A reclusive billionaire who sold his enzyme technology company in 2010. He subsequently multiplied his fortune 16-fold through a highly successful, long-term investment in a listed company, widely believed to be Novo Nordisk.",
    "net worth": 2240000000
  },
  {
    "rank in rich list": 13,
    "full name": "Lars Erik Kann-Rasmussen",
    "city": "Holte",
    "event": "Heir to the VKR Group, the holding company for VELUX, the world's leading manufacturer of roof windows. The family's fortune is derived from its 18% ownership stake and diversified investments, including a venture fund for sustainable building technologies.",
    "net worth": 2212000000
  },
  {
    "rank in rich list": 14,
    "full name": "Adam Westermann",
    "city": "Holte",
    "event": "Part of the family that owned Widex, a major hearing aid manufacturer. His wealth stems from the 2019 merger of Widex with Sivantos to form WS Audiology, in which the family holds a significant stake. He serves as VP of Global Innovation in the company.",
    "net worth": 1988000000
  },
  {
    "rank in rich list": 15,
    "full name": "Jan Tøpholm",
    "city": "Hørsholm",
    "event": "Co-owner of WS Audiology, one of the world's largest hearing aid manufacturers. The company was formed by the merger of his family's company, Widex, and Sivantos. The family retains 51% ownership of the merged entity and has a large property portfolio.",
    "net worth": 1974000000
  },
  {
    "rank in rich list": 16,
    "full name": "Nikolaj Hoffmann Deichmann",
    "city": "Malmö",
    "event": "Co-founder of the successful dental technology company 3Shape. A resident of Sweden, he recently established DM Family Office to manage his DKK 14.1 billion fortune, which includes his stake in 3Shape and other investments.",
    "net worth": 1974000000
  },
  {
    "rank in rich list": 17,
    "full name": "Bent Jensen",
    "city": "Nordborg",
    "event": "Founder and owner of LINAK, a global leader in electric linear actuator systems used in healthcare, agriculture, and industry. He has placed 10% of the company in a foundation and is developing a DKK 1.5 billion holiday resort.",
    "net worth": 1904000000
  },
  {
    "rank in rich list": 18,
    "full name": "Thomas Kähler",
    "city": "Copenhagen",
    "event": "Part of the family controlling Rockwool International, a global leader in stone wool insulation products. The family's wealth surged by DKK 5.4 billion in the past year, driven by a 75% increase in Rockwool's share price amid demand for energy-efficient building solutions.",
    "net worth": 1778000000
  },
  {
    "rank in rich list": 19,
    "full name": "Peter Foss",
    "city": "Hillerød",
    "event": "Sole owner of FOSS A/S, a leading global provider of high-tech analytical solutions for the food and agricultural industries. The company's consistent growth, including a 7% rise in EBITDA in 2023, underpins his DKK 12.6 billion fortune.",
    "net worth": 1764000000
  },
  {
    "rank in rich list": 20,
    "full name": "Anders Kirk Johansen",
    "city": "Vejle",
    "event": "A descendant of the LEGO founder who received a DKK 7.5 billion spin-off from the family's main holding company in 2007. He now chairs Kirk Kapital, an investment firm that has grown its assets to DKK 9.1 billion by investing in 16 small and medium-sized enterprises.",
    "net worth": 1708000000
  },
  {
    "rank in rich list": 21,
    "full name": "Martin Mourier",
    "city": "Fredensborg",
    "event": "A key figure in the family-owned Semler Gruppen, Denmark's largest automobile importer, representing brands such as Volkswagen, Audi, and Porsche. His wealth grew in the past year following a 27% increase in revenue driven by strong sales.",
    "net worth": 1414000000
  },
  {
    "rank in rich list": 22,
    "full name": "Christian Peter Dyvig",
    "city": "Copenhagen",
    "event": "A former partner at the private equity firm Nordic Capital. His primary asset is his ownership of Kompan, the world's leading manufacturer of playground equipment, which saw its EBITDA grow by 21% in 2023. He sold a minority stake to Kirk Kapital.",
    "net worth": 1246000000
  },
  {
    "rank in rich list": 23,
    "full name": "Henrik Østenkjær Lind",
    "city": "Aarhus",
    "event": "Founder of the energy trading firm Danske Commodities, which he sold to Norway's Equinor in 2018 for approximately DKK 3 billion. He now manages his fortune through his investment company, Lind Invest, and holds a significant stake in the restructured airline SAS.",
    "net worth": 1204000000
  },
  {
    "rank in rich list": 24,
    "full name": "Christian Stadil",
    "city": "Copenhagen",
    "event": "Owner of the Thornico conglomerate, which has diverse interests including the sportswear brand Hummel, packaging company Brdr. Hartmann, and real estate. He recently streamlined the group by divesting its shipping activities.",
    "net worth": 1176000000
  },
  {
    "rank in rich list": 25,
    "full name": "Peter Hellerung Christiansen",
    "city": "Skodsborg",
    "event": "Second-generation owner of the Bygma Group, a leading supplier of timber and building materials in the Nordic region. The family's wealth saw a slight decline as a housing market slump caused a 31% drop in the company's EBITDA.",
    "net worth": 1162000000
  },
  {
    "rank in rich list": 26,
    "full name": "Jakob Haldor Topsøe",
    "city": "Copenhagen",
    "event": "Grandson of the founder and current chairman of Haldor Topsøe A/S, a world leader in catalysis and sustainable energy technologies. The family's fortune increased by DKK 2.6 billion, driven by a 42% surge in EBITDA due to high demand for its green-tech solutions.",
    "net worth": 1148000000
  },
  {
    "rank in rich list": 27,
    "full name": "Poul Due Jensen",
    "city": "Bjerringbro",
    "event": "Grandson of the founder and current CEO of Grundfos, one of the world's largest pump manufacturers. The family holds a 9.6% personal stake in the company, separate from the foundation that owns the majority.",
    "net worth": 1106000000
  },
  {
    "rank in rich list": 28,
    "full name": "Kurt Daell",
    "city": "Charlottenlund",
    "event": "Patriarch of the family that owns the successful retail chains Harald Nyborg (hardware) and Jem & Fix (DIY). He has passed the chairmanship to his son Erling but retains voting control and a 30% equity stake.",
    "net worth": 1092000000
  },
  {
    "rank in rich list": 29,
    "full name": "Martin Møller Nielsen",
    "city": "Lugano",
    "event": "Founder of Nordic Aviation Capital (NAC), once the world's largest regional aircraft lessor. His wealth stems from a timely partial sale of his stake for DKK 6.6 billion, years before the company faced financial collapse during the COVID-19 pandemic.",
    "net worth": 924000000
  },
  {
    "rank in rich list": 30,
    "full name": "Michael Grosbøl",
    "city": "Silkeborg",
    "event": "Owner of Mascot International, a leading European manufacturer of high-quality workwear. The family's wealth has doubled over the past two years, propelled by strong international sales and a 21% growth in EBITDA.",
    "net worth": 896000000
  },
  {
    "rank in rich list": 31,
    "full name": "Hans Carl Bøgh-Sørensen",
    "city": "Odense",
    "event": "Founder of Orifarm, one of Europe's largest parallel importers of pharmaceuticals. His wealth increased in the last year, driven by an 18% rise in EBITDA.",
    "net worth": 896000000
  },
  {
    "rank in rich list": 32,
    "full name": "Hans Frederiksen",
    "city": "Vejleby",
    "event": "Founder of the transport and logistics company HCS A/S. He has completed a generational transfer of ownership to his two sons, Jacob and Mads, who are now active co-owners of the business.",
    "net worth": 896000000
  },
  {
    "rank in rich list": 33,
    "full name": "Ole Fleggaard",
    "city": "Kollund",
    "event": "A key figure in the family-owned Fleggaard Group, a conglomerate best known for its extensive cross-border retail trade between Denmark and Germany. The group also has significant activities in leasing and wholesale.",
    "net worth": 882000000
  },
  {
    "rank in rich list": 34,
    "full name": "Simon Hesse Vangsted Hoffmann",
    "city": "Copenhagen",
    "event": "An heir to Holger Hesse, the co-founder of medical device company Ambu. The family's fortune, managed through various holding companies, surged by DKK 3.1 billion due to a 69% increase in Ambu's share price over the last year.",
    "net worth": 882000000
  },
  {
    "rank in rich list": 35,
    "full name": "Morten Hummelmose",
    "city": "Copenhagen",
    "event": "A partner at the leading global private equity firm EQT. His wealth is primarily tied to his 3.2% stake in the publicly listed firm, whose share price has seen significant appreciation. He recently established a philanthropic foundation with an initial endowment of DKK 50 million.",
    "net worth": 826000000
  },
  {
    "rank in rich list": 36,
    "full name": "Klaus Eldrup-Jørgensen",
    "city": "Rungsted",
    "event": "Co-founder of Trackman, a company that developed revolutionary radar technology for tracking golf ball flight, now widely used in sports analytics. The business has expanded into baseball and other sports.",
    "net worth": 770000000
  },
  {
    "rank in rich list": 37,
    "full name": "Ib Kunøe",
    "city": "Vedbæk",
    "event": "An investor who built his fortune through Consolidated Holdings, which owns a controlling 28% stake in Norwegian IT services company Atea and 60% of the Danish IT company Columbus. His wealth grew by DKK 0.4 billion in the last year due to share price increases.",
    "net worth": 728000000
  },
  {
    "rank in rich list": 38,
    "full name": "Olav de Linde",
    "city": "Risskov",
    "event": "A self-made real estate magnate with a property portfolio valued at DKK 5.2 billion, concentrated primarily in Aarhus. He is known for renovating old industrial buildings into modern commercial and residential spaces.",
    "net worth": 728000000
  },
  {
    "rank in rich list": 39,
    "full name": "Peter Just Karberg",
    "city": "Charlottenlund",
    "event": "Fifth-generation owner of the Hans Just Group, a leading importer and distributor of wine and spirits in the Nordic region. The family's fortune declined from DKK 6.5 billion to DKK 5.2 billion following a 23% drop in EBITDA.",
    "net worth": 728000000
  },
  {
    "rank in rich list": 40,
    "full name": "Jørgen Enggaard",
    "city": "Hals",
    "event": "Founder of A. Enggaard Holding A/S, a major Danish construction and development company. While his sons now run the business, he retains significant assets including the Hals Nørreskov estate.",
    "net worth": 714000000
  },
  {
    "rank in rich list": 41,
    "full name": "Peter Bohnsen",
    "city": "Højbjerg",
    "event": "His fortune originates from the sale of the shipping company Unifeeder in 2007. The DKK 4.9 billion is now managed through two entities: his personal investment vehicle, Webco, and Jabami, which is owned by his four daughters.",
    "net worth": 686000000
  },
  {
    "rank in rich list": 42,
    "full name": "Michael Holm",
    "city": "Risskov",
    "event": "Co-founder and majority owner (60%) of Systematic, an international IT software company that provides critical systems for the defense, healthcare, and public sectors. A 44% growth in EBITDA was tempered by lower valuation multiples in the tech sector.",
    "net worth": 672000000
  },
  {
    "rank in rich list": 43,
    "full name": "Bjarne Hessel",
    "city": "Brande",
    "event": "Part of the family that owns Ejner Hessel A/S, one of Denmark's largest car dealerships, specializing in brands like Mercedes-Benz. A challenging market with higher interest rates and inventory costs led to an 11% drop in EBITDA, reducing the family's net worth.",
    "net worth": 644000000
  },
  {
    "rank in rich list": 44,
    "full name": "Jens Poulsen",
    "city": "Ikast",
    "event": "Founder of DK Company, a major European fashion group that owns 26 brands. A 21% decline in EBITDA, attributed to a difficult retail market, resulted in his fortune decreasing from DKK 6.0 billion to DKK 4.5 billion.",
    "net worth": 630000000
  },
  {
    "rank in rich list": 45,
    "full name": "Claus Bagger-Sørensen",
    "city": "Vejle",
    "event": "His wealth originates from the family's successful sales of the chewing gum company Dandy (to Cadbury) and the pharmaceutical firm Fertin Pharma (to Philip Morris). The proceeds are now managed by a family office that invests in health-tech startups.",
    "net worth": 588000000
  },
  {
    "rank in rich list": 46,
    "full name": "Lars Sidelmann Christensen",
    "city": "Roskilde",
    "event": "His family controls Pharmacosmos, a pharmaceutical company specializing in treatments for iron deficiency. The company achieved a record profit of DKK 689 million last year, establishing the family as new entrants on the rich list with a valuation of DKK 4.3 billion.",
    "net worth": 602000000
  },
  {
    "rank in rich list": 47,
    "full name": "Winnie Liljeborg",
    "city": "Roskilde",
    "event": "Co-founder of the global jewelry brand Pandora. After selling her stake, she established the Liljeborg Group to manage her DKK 4.3 billion fortune, which includes significant investments and a philanthropic foundation focused on supporting vulnerable children and youth.",
    "net worth": 602000000
  },
  {
    "rank in rich list": 48,
    "full name": "Frederik Barfoed",
    "city": "Odense",
    "event": "A key figure in the family-owned Barfoed Group, a significant real estate company in Odense. The family's net worth saw a slight decrease to DKK 4.2 billion due to negative property revaluations in a higher interest rate environment.",
    "net worth": 588000000
  },
  {
    "rank in rich list": 49,
    "full name": "Anders Østergaard",
    "city": "Dubai",
    "event": "Founder and owner of Monjasa, a global leader in bunker fuel trading. His fortune fell from DKK 7.7 billion to DKK 4.2 billion as earnings normalized after a record-breaking year in 2022 driven by market volatility.",
    "net worth": 588000000
  },
  {
    "rank in rich list": 50,
    "full name": "Kim Fournais",
    "city": "Nærum",
    "event": "Co-founder and CEO of the online multi-asset trading and investment platform Saxo Bank. He holds a 28% stake in the company and is also developing a luxury apartment complex on a prime waterfront site in Charlottenlund.",
    "net worth": 588000000
  },
  {
    "rank in rich list": 51,
    "full name": "Sune Simonsen",
    "city": "Copenhagen",
    "event": "Heir to the Scan-Group shipping and logistics empire, founded by his late father, Arne Simonsen. The family's fortune plummeted from DKK 10.2 billion to DKK 4.2 billion as a sharp drop in global freight rates caused an 80% collapse in the company's EBITDA.",
    "net worth": 588000000
  },
  {
    "rank in rich list": 52,
    "full name": "Henrik Lindberg",
    "city": "Risskov",
    "event": "His family's wealth comes from the 2021 sale of their high-end eyewear brand, Lindberg Optik, to the French-Italian multinational EssilorLuxottica. The DKK 4.1 billion proceeds are now managed through a family office.",
    "net worth": 574000000
  },
  {
    "rank in rich list": 53,
    "full name": "Jørn Tækker",
    "city": "Aarhus",
    "event": "A property developer known for the ambitious urban development project 'Nye,' a new town being built north of Aarhus planned to house 13,500 residents. His DKK 4.0 billion fortune is anchored in his extensive land bank and low-cost financing.",
    "net worth": 560000000
  },
  {
    "rank in rich list": 54,
    "full name": "Peter Stubkjær Sørensen",
    "city": "Brande",
    "event": "Made his fortune from the sale of wind turbine manufacturer Bonus Energi to Siemens in 2004. He has since reinvested the proceeds into a diversified portfolio of securities and real estate, including a 230-hectare forest estate.",
    "net worth": 546000000
  },
  {
    "rank in rich list": 55,
    "full name": "Mikael Goldschmidt",
    "city": "Kokkedal",
    "event": "A prominent real estate investor and owner of the Imerco homeware retail chain and the historic Kokkedal Castle. Negative property revaluations in 2023 caused his net worth to decrease slightly to DKK 3.9 billion.",
    "net worth": 546000000
  },
  {
    "rank in rich list": 56,
    "full name": "Mogens de Linde",
    "city": "Hornslet",
    "event": "A major property owner in Aarhus and brother of fellow real estate billionaire Olav de Linde. He transferred his DKK 3.7 billion portfolio, including a 95-hectare estate, to his children while remaining as chairman.",
    "net worth": 518000000
  },
  {
    "rank in rich list": 57,
    "full name": "Birger Arp-Hansen",
    "city": "Hellerup",
    "event": "Co-owner of the Arp-Hansen Hotel Group, the largest hotel operator in Copenhagen with 12 hotels and over 5,000 rooms. The family's wealth increased to DKK 3.5 billion following a strong post-pandemic recovery in tourism.",
    "net worth": 490000000
  },
  {
    "rank in rich list": 58,
    "full name": "Johan Regin Jacobsen",
    "city": "Fuglafjørður",
    "event": "CEO of the Faroese salmon farming company Bakkafrost. The family's 15.6% stake in the publicly listed company underpins their DKK 3.4 billion fortune, which saw an increase in the last year due to a rebound in the share price.",
    "net worth": 476000000
  },
  {
    "rank in rich list": 59,
    "full name": "Thorkil Stæhr Andersen",
    "city": "Samsø",
    "event": "Owner of the transport company TA-Logistics. Despite a 12% drop in EBITDA, his family's fortune grew by DKK 0.8 billion to DKK 3.2 billion, as the valuation was lifted by a higher trading multiple for comparable companies in the sector.",
    "net worth": 448000000
  },
  {
    "rank in rich list": 60,
    "full name": "Torben Lind",
    "city": "Køge",
    "event": "Patriarch of the family that owns Lind & Risør, a major builder of single-family homes in Denmark. The company's valuation was significantly lifted by a re-rating of its EBITDA multiple from 6.9x to 14.8x, pushing the family's fortune up by over DKK 1 billion.",
    "net worth": 448000000
  },
  {
    "rank in rich list": 61,
    "full name": "Anders Eikemo Thorgaard",
    "city": "Faaborg",
    "event": "Co-owner of Kivi-Tex, one of Denmark's largest industrial laundry service providers. The family's DKK 3.2 billion fortune is also supported by ownership of the historic Steensgaard Herregård estate.",
    "net worth": 448000000
  },
  {
    "rank in rich list": 62,
    "full name": "Niels Fennet",
    "city": "Taarbæk",
    "event": "Founder of the successful budget hotel chain CABINN. His DKK 3.2 billion fortune is derived from his portfolio of 12 hotels and other real estate, including the historic Store Kro inn in Fredensborg.",
    "net worth": 448000000
  },
  {
    "rank in rich list": 63,
    "full name": "Bent Jensen",
    "city": "Fredericia",
    "event": "Founder of the retail chain tHansen, which specializes in auto parts, accessories, and scooters. A strong financial performance in 2023, with a 42% jump in EBITDA, restored his fortune to DKK 3.1 billion after a dip the previous year.",
    "net worth": 434000000
  },
  {
    "rank in rich list": 64,
    "full name": "Rolf Stuhr Petersen",
    "city": "Copenhagen",
    "event": "Inherited the City Apartment real estate group from his father, Svend. The DKK 3.1 billion portfolio comprises 469 properties, primarily in Copenhagen, and is expanding with a new 64-unit development in Helsinge.",
    "net worth": 434000000
  },
  {
    "rank in rich list": 65,
    "full name": "Preben Terp-Nielsen",
    "city": "Aabenraa",
    "event": "Patriarch of the family that owns Abena, a global manufacturer and wholesaler of healthcare products. The family's fortune was nearly halved, dropping from DKK 6.0 billion to DKK 3.1 billion, after the company posted a record loss due to soaring raw material costs.",
    "net worth": 434000000
  },
  {
    "rank in rich list": 66,
    "full name": "Svend Møller Hansen",
    "city": "Hobro",
    "event": "Founder of DS Gruppen, a leading supplier of steel and concrete solutions. His fortune was crystallized by the sale of a majority stake to the German company Goldbeck in 2023, leaving the family with DKK 3.1 billion in cash and real estate.",
    "net worth": 434000000
  },
  {
    "rank in rich list": 67,
    "full name": "Stefanie Husted-Andersen",
    "city": "Copenhagen",
    "event": "One of three sisters who inherited a significant fortune from their father, Stig Husted-Andersen. The DKK 3.5 billion estate includes the medical device company Codan Medical and a portfolio of prime, debt-free real estate in Copenhagen and North Zealand.",
    "net worth": 490000000
  },
  {
    "rank in rich list": 68,
    "full name": "Nicholas Peter Francis",
    "city": "Copenhagen",
    "event": "Co-founder of the video game software development company Unity Technologies. A significant portion of his wealth was realized from the company's 2020 IPO, with the proceeds now managed through a family fund that invests in private equity and real estate.",
    "net worth": 392000000
  },
  {
    "rank in rich list": 69,
    "full name": "Christian Georg Peter Moltke",
    "city": "Haslev",
    "event": "His family's fortune was created by the sale of their solar park developer, BeGreen, to the Norwegian energy giant Equinor for DKK 2.35 billion in late 2022. The proceeds were largely distributed, leaving DKK 2.8 billion in the family's holding company.",
    "net worth": 392000000
  },
  {
    "rank in rich list": 70,
    "full name": "Mikael Dystrup Pedersen",
    "city": "Køge",
    "event": "An early investor and co-owner of the renewable energy company European Energy. After the company sold a 20% stake to Mitsubishi, his remaining 10% stake is valued at DKK 2.7 billion.",
    "net worth": 378000000
  },
  {
    "rank in rich list": 71,
    "full name": "Alan Nissen",
    "city": "Juelsminde",
    "event": "His family's wealth stems from the 2021 sale of a majority stake in their company, Nissens Cooling Solutions, to A.P. Møller Holding. They retained a minority stake and now manage a DKK 1.9 billion portfolio of securities.",
    "net worth": 378000000
  },
  {
    "rank in rich list": 72,
    "full name": "Claus Hommelhoff",
    "city": "Aarhus",
    "event": "Founder of Formuepleje, one of Denmark's largest independent asset managers. The family sold a majority stake to the Lars Larsen Group but retains a significant minority interest and other investments valued at DKK 2.6 billion.",
    "net worth": 364000000
  },
  {
    "rank in rich list": 73,
    "full name": "Karsten Buchhave",
    "city": "Skanderborg",
    "event": "His fortune originates from the 2021 sale of a 49.9% stake in his biogas plant construction company, Bigadan, to an English private equity fund. A downturn in the biogas sector has since reduced the value of his remaining stake, cutting his fortune by DKK 1 billion.",
    "net worth": 364000000
  },
  {
    "rank in rich list": 74,
    "full name": "Svend-Aage Nielsen",
    "city": "Odense",
    "event": "Co-owner of Micro Matic, a global leader in beverage dispensing equipment, particularly for draft beer. The company, which he took over with a partner in the 1970s, is now being passed to the next generation.",
    "net worth": 364000000
  },
  {
    "rank in rich list": 75,
    "full name": "Christian Bach",
    "city": "Hinnerup",
    "event": "Co-founder of the energy trading powerhouse In Commodities. A normalization of the energy markets after the extreme volatility of 2022 led to lower, though still substantial, profits, with his share of the company's equity valued at DKK 2.5 billion.",
    "net worth": 364000000
  },
  {
    "rank in rich list": 76,
    "full name": "Jeppe Bülow Højgaard",
    "city": "Løgten",
    "event": "Co-founder of the energy trading company In Commodities. His DKK 2.5 billion fortune is his one-third share of the company's equity, which was built up significantly from record profits during the 2022 energy crisis.",
    "net worth": 350000000
  },
  {
    "rank in rich list": 77,
    "full name": "Morten Ebbesen",
    "city": "Copenhagen",
    "event": "His wealth was generated from the 2019 sale of a majority stake in his software company, Siteimprove, to the private equity firm Nordic Capital. He has reinvested the DKK 2.5 billion proceeds into a portfolio of tech stocks and startups.",
    "net worth": 350000000
  },
  {
    "rank in rich list": 78,
    "full name": "Jesper Severin Johanson",
    "city": "Zug",
    "event": "Co-founder of the energy trading firm In Commodities. Now a resident of Switzerland, his DKK 2.5 billion fortune represents his one-third ownership of the highly profitable company.",
    "net worth": 350000000
  },
  {
    "rank in rich list": 79,
    "full name": "Karsten Bill Rasmussen",
    "city": "Odense",
    "event": "A major real estate investor in Odense, with a DKK 2.5 billion fortune spread across a complex structure of seven different property companies. His portfolio includes commercial, residential, and industrial properties.",
    "net worth": 350000000
  },
  {
    "rank in rich list": 80,
    "full name": "Sophie Bensimon Rossing",
    "city": "Hellerup",
    "event": "Co-created her fortune from the sale of the Fitness World gym chain. She reinvested the proceeds into a successful new venture, the car wash chain World Wash, and a DKK 1.4 billion portfolio of listed stocks.",
    "net worth": 350000000
  },
  {
    "rank in rich list": 81,
    "full name": "Bente Lis Nielsen",
    "city": "Tommerup",
    "event": "Widow of Carl Christian Nielsen, co-owner of Micro Matic, a leading global supplier of draft beverage equipment. Her family inherited his 50% stake in the DKK 5 billion company.",
    "net worth": 350000000
  },
  {
    "rank in rich list": 82,
    "full name": "Bettina Antitsch Mortensen",
    "city": "Aarhus",
    "event": "Inherited the extensive property group M+ Invest and homebuilder Hybel from her late husband, Michael Antitsch Mortensen. She now runs the DKK 2.5 billion company, which has a significant portfolio of residential and commercial real estate.",
    "net worth": 350000000
  },
  {
    "rank in rich list": 83,
    "full name": "Anneli Gjørup",
    "city": "Roskilde",
    "event": "Her family's wealth originates from the toy retailer Fætter BR and the Top-Toy group. Following the group's sale and subsequent bankruptcy, the remaining DKK 2.5 billion fortune is managed through various family investment vehicles.",
    "net worth": 350000000
  },
  {
    "rank in rich list": 84,
    "full name": "Henning Kjeldsen",
    "city": "Skagen",
    "event": "Formerly known as Denmark's 'quota king' for his vast fishing rights. He sold the majority of his quotas and fleet in 2022 and has since reinvested the DKK 2.4 billion proceeds into acquiring four hotels and other properties in Skagen.",
    "net worth": 336000000
  },
  {
    "rank in rich list": 85,
    "full name": "Johan Ernst Wedell-Wedellsborg",
    "city": "Vedbæk",
    "event": "Owner of the Weco shipping group. His DKK 2.4 billion fortune was bolstered by record earnings in the product tanker market and his DKK 150 million purchase of a historic estate in Hørsholm for a new residence.",
    "net worth": 336000000
  },
  {
    "rank in rich list": 86,
    "full name": "Peter Rosholm",
    "city": "Copenhagen",
    "event": "A former executive at Novozymes. He made his fortune by leading a management buyout of its spin-off, Albumedix, and subsequently selling it to the German company Sartorius for nearly DKK 4 billion, netting him personally DKK 2.4 billion.",
    "net worth": 336000000
  },
  {
    "rank in rich list": 87,
    "full name": "Niels Thorborg",
    "city": "Odense",
    "event": "Founder of L'easy, a company specializing in the rental of consumer electronics and appliances. His 3C Groups holding company now has diverse interests, including property, the struggling Facit Bank, and the Odense Boldklub football team.",
    "net worth": 336000000
  },
  {
    "rank in rich list": 88,
    "full name": "Thomas Wilkens Andersen",
    "city": "Kerteminde",
    "event": "Third-generation owner of the Fayard shipyard in Munkebo, one of Northern Europe's largest ship repair and conversion facilities. His family's fortune grew by DKK 0.4 billion to DKK 2.4 billion, driven by a 23% increase in EBITDA.",
    "net worth": 336000000
  },
  {
    "rank in rich list": 89,
    "full name": "Poul Byriel Nielsen",
    "city": "Spøttrup",
    "event": "Co-owner of N.C. Nielsen Gruppen, a leading Scandinavian supplier of forklifts and heavy machinery. A 10% increase in EBITDA pushed the family's net worth to DKK 2.4 billion.",
    "net worth": 336000000
  },
  {
    "rank in rich list": 90,
    "full name": "Lars Seier Christensen",
    "city": "Zug",
    "event": "Co-founder of Saxo Bank. After selling his stake for a substantial sum, he moved to Switzerland and now manages his DKK 2.3 billion fortune through Seier Capital. His investments include a 22.5% stake in Parken Sport & Entertainment.",
    "net worth": 322000000
  },
  {
    "rank in rich list": 91,
    "full name": "Erik Bank Lauridsen",
    "city": "Esbjerg",
    "event": "His family holds a 25% stake in the IT company Systematic, a share valued at DKK 2.3 billion. The family firm, with roots dating back to 1886, also has investments in finance and property.",
    "net worth": 322000000
  },
  {
    "rank in rich list": 92,
    "full name": "Niels Erik Martinsen",
    "city": "Hørsholm",
    "event": "His family's wealth originates from the fashion conglomerate IC Companys (now IC Group). Their holding company, Friheden Invest, manages a DKK 2.2 billion portfolio that includes property and a large agricultural estate.",
    "net worth": 308000000
  },
  {
    "rank in rich list": 93,
    "full name": "Fleming Grunnet",
    "city": "Copenhagen",
    "event": "Patriarch of the family that owns Inter Primo, a global plastics extrusion company founded in 1959. A 36% drop in EBITDA reduced the family's net worth to DKK 2.2 billion.",
    "net worth": 308000000
  },
  {
    "rank in rich list": 94,
    "full name": "Claus Henrik Christiansen",
    "city": "Zug",
    "event": "His DKK 2.2 billion fortune is derived from the family's ownership of Nordic Bioscience, a biotech company. A significant drop in the company's valuation caused the family's wealth to fall from DKK 3.8 billion.",
    "net worth": 308000000
  },
  {
    "rank in rich list": 95,
    "full name": "Aage Søndergaard Nielsen",
    "city": "Kolding",
    "event": "Made his fortune from the 2016 sale of his industrial company, Sondex, to Danfoss for DKK 1.6 billion. A subsequent legal dispute over the final payment was resolved, and the family's wealth has since grown to DKK 2.2 billion through investments.",
    "net worth": 308000000
  },
  {
    "rank in rich list": 96,
    "full name": "Henrik Sørensen",
    "city": "Vadum",
    "event": "His family's wealth comes from selling a 64% stake in their pump manufacturing company, Desmi, to a private equity fund. They retained a 21% share, and the total family fortune from the deal and other assets is DKK 2.1 billion.",
    "net worth": 294000000
  },
  {
    "rank in rich list": 97,
    "full name": "Joachim Ante",
    "city": "Copenhagen",
    "event": "A co-founder of the video game software giant Unity Technologies. The sharp and sustained decline in Unity's share price on the Nasdaq has cut his fortune in half over the past year, from DKK 4.3 billion to DKK 2.1 billion.",
    "net worth": 294000000
  },
  {
    "rank in rich list": 98,
    "full name": "Hans Wilhelm Schur",
    "city": "Horsens",
    "event": "Fifth-generation owner of Schur International, one of the world's oldest family-owned packaging companies, founded in 1846. His DKK 2.1 billion fortune was boosted by a 59% rise in the share price of his listed investment, SP Group.",
    "net worth": 294000000
  },
  {
    "rank in rich list": 99,
    "full name": "Kim Dencher Johansen",
    "city": "Frederiksværk",
    "event": "A property developer who built a DKK 2.0 billion real estate empire, primarily in and around his hometown of Frederiksværk. His holding company's equity value crossed the DKK 2 billion mark in 2023.",
    "net worth": 280000000
  },
  {
    "rank in rich list": 100,
    "full name": "Birthe Marianne Christiansen",
    "city": "Kolding",
    "event": "Matriarch of the family that owns the Nic. Christiansen Gruppen, a major importer of cars including Hyundai, Jaguar, and Land Rover. Despite a 13% drop in EBITDA, the family's fortune is valued at DKK 2.0 billion.",
    "net worth": 280000000
  },
    {
    "rank in rich list": 60,
    "full name": "Rikke Lind",
    "city": "Køge",
    "event": "Daughter of Torben Lind and a key heir to the Lind & Risør construction fortune. She shares in the family's DKK 3.2 billion wealth and personally owns a summer house in the exclusive Tisvildeleje area, purchased for DKK 3.2 million.",
    "net worth": 448000000
  },
  {
    "rank in rich list": 60,
    "full name": "Jesper Lind",
    "city": "Køge",
    "event": "Son of Torben Lind and co-heir to the Lind & Risør house-building empire. As a part of the family ownership, he shares in the DKK 3.2 billion fortune, which saw a significant re-rating in its valuation in the past year.",
    "net worth": 448000000
  },
  {
    "rank in rich list": 60,
    "full name": "Carsten Lind",
    "city": "Lellinge",
    "event": "Son of Torben Lind and co-heir to the DKK 3.2 billion Lind & Risør family fortune. He personally owns a 21-hectare agricultural estate in Lellinge, near Køge, which is part of his share in the family's wealth.",
    "net worth": 448000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Pernille Lindberg",
    "city": "Beder",
    "event": "Co-owner of the proceeds from the 2021 sale of the eyewear brand Lindberg to EssilorLuxottica. She manages her share of the DKK 4.1 billion family fortune through the family office PAM and the Lindberg Optik retail chain.",
    "net worth": 574000000
  },
  {
    "rank in rich list": 14,
    "full name": "Anders Westermann",
    "city": "Holte",
    "event": "Brother of Søren Erik Westermann and part of the family that owned Widex. His personal fortune is tied to his significant stake in the merged hearing aid giant WS Audiology and an extensive private property portfolio.",
    "net worth": 1988000000
  },
    {
    "rank in rich list": "22 (in 2021)",
    "full name": "David Helgason",
    "city": "Copenhagen",
    "event": "A co-founder of the video game technology giant Unity Technologies. He became a billionaire following the company's highly successful IPO on the New York Stock Exchange in September 2020. His wealth in 2021 was based on his significant remaining stake in the multi-billion dollar company.",
    "net worth": 1270000000
  },
  {
    "rank in rich list": "35 (in 2021)",
    "full name": "Nicholas Peter Francis",
    "city": "Copenhagen",
    "event": "A co-founder of Unity Technologies alongside David Helgason and Joachim Ante. His fortune was crystallized by the 2020 IPO. As one of the three key founders, his equity stake in the company was valued at DKK 5.0 billion in 2021.",
    "net worth": 794000000
  },
  {
    "rank in rich list": "44 (in 2021)",
    "full name": "Kent Arentoft",
    "city": "Copenhagen",
    "event": "A former executive who, with his partner Peter Korsholm, acquired the environmental services company DSVM Invest for a nominal sum. They successfully turned the company around, creating a highly profitable business and a personal fortune valued at DKK 4.2 billion in 2021.",
    "net worth": 667000000
  },
  {
    "rank in rich list": "60 (in 2021)",
    "full name": "Per Tejs Knudsen",
    "city": "Copenhagen",
    "event": "Founder and majority owner of the software company cBrain. His fortune surged dramatically as the company's share price on the stock exchange increased seven-fold in 2020, driven by high demand for its F2 standard software platform for public administration.",
    "net worth": 476000000
  },
  {
    "rank in rich list": "66 (in 2021)",
    "full name": "Rolf Svend Petersen",
    "city": "Copenhagen",
    "event": "Heir to and CEO of the family-owned property group City Apartment. The company owns and rents out approximately 2,000 furnished apartments in Copenhagen. His DKK 2.8 billion fortune was significantly boosted by a major revaluation of the property portfolio in 2020.",
    "net worth": 444000000
  },
  {
    "rank in rich list": "67 (in 2021)",
    "full name": "Michael Antitsch Mortensen",
    "city": "Aarhus",
    "event": "A serial entrepreneur in the construction and real estate sector. He made his fortune by founding and selling successful companies like HusCompagniet and CASA A/S to private equity. In 2021, his wealth was valued at DKK 2.7 billion following a new investment in the paint company Flügger.",
    "net worth": 429000000
  },
  {
    "rank in rich list": "75 (in 2021)",
    "full name": "Gullak Arngrimsson Madsen",
    "city": "Hirtshals",
    "event": "Owner of the major fishing company GTM Holding and the super-trawler 'Ruth'. His DKK 2.6 billion fortune was built on highly profitable fishing operations in the North Atlantic and the strategic sale of valuable fishing quotas.",
    "net worth": 413000000
  },
  {
    "rank in rich list": "88 (in 2021)",
    "full name": "Jørgen Hansen",
    "city": "Copenhagen",
    "event": "Founder of Nordic Transport Group (NTG). He and his family retained a 17% stake in the logistics company after taking it public via a reverse takeover. The company's share price more than sextupled post-listing, creating the family's DKK 2.2 billion fortune.",
    "net worth": 349000000
  },
  {
    "rank in rich list": "90 (in 2021)",
    "full name": "Inge & Anders Blicher Petersen",
    "city": "Odense",
    "event": "The family owns Newtec, a successful Fyn-based company that manufactures high-tech sorting and packaging machinery for the global food industry. The DKK 2.1 billion fortune was built on consistent profitability and international expansion.",
    "net worth": 333000000
  },
  {
    "rank in rich list": "97 (in 2021)",
    "full name": "Familien Bylling (Bylling Family)",
    "city": "Christiansfeld",
    "event": "The family owns Aller Aqua, a leading global producer of environmentally friendly fish feed. Their DKK 1.8 billion fortune was built on successful expansion into emerging aquaculture markets in China, Africa, and the Balkans.",
    "net worth": 286000000
  },
  {
    "rank in rich list": "99 (in 2021)",
    "full name": "Familien efter Johan Schrøder (Heirs of Johan Schrøder)",
    "city": "Copenhagen",
    "event": "The family's DKK 1.7 billion fortune was created from the sale of the med-tech company Radiometer in 2003. The proceeds have since been managed through a family holding company, J.S.R., which primarily invests in securities and real estate like the Aggersvold estate.",
    "net worth": 270000000
  },
    {
    "rank in rich list": "3 (in 2017)",
    "full name": "Lars Larsen",
    "city": "Silkeborg",
    "event": "Founder of the JYSK retail empire, a global chain with several thousand stores. He built a DKK 28.8 billion fortune from scratch, starting with one store in Aarhus in 1979. Besides JYSK, his holdings included Bolia.com, Ilva, Idémøbler, and the furniture producer Actona. He passed away in 2019.",
    "net worth": 4299000000
  },
  {
    "rank in rich list": "4 (in 2017)",
    "full name": "Mads Clausen",
    "city": "Nordborg",
    "event": "Founder of the industrial giant Danfoss in 1933. While he passed away in 1966, his legacy is the foundation of the Clausen family's DKK 28.5 billion fortune. The family retains nearly half of the company's shares, with the rest held by a foundation and employees.",
    "net worth": 4254000000
  },
  {
    "rank in rich list": "5 (in 2017)",
    "full name": "Aage Louis-Hansen",
    "city": "Humlebæk",
    "event": "Co-founder of the global medical device company Coloplast. He and his wife, Johanne, established the company based on a nurse's idea for a disposable stomipose. The company's success is the origin of the Louis-Hansen family's DKK 27.8 billion fortune.",
    "net worth": 4149000000
  },
  {
    "rank in rich list": "5 (in 2017)",
    "full name": "Johanne Louis-Hansen",
    "city": "Humlebæk",
    "event": "Co-founder of Coloplast alongside her husband, Aage Louis-Hansen. As a nurse herself, she saw the potential in the initial product idea and was instrumental in persuading her husband to start the company, which led to the family's vast fortune.",
    "net worth": 4149000000
  },
  {
    "rank in rich list": "6 (in 2017)",
    "full name": "Dieter Kasprzak",
    "city": "Bredebro",
    "event": "Former CEO of the ECCO shoe company and husband of the owner, Hanni Toosbuy Kasprzak. He stepped down from the CEO role in 2017, passing the leadership to Steen Borgholm, after a long and successful tenure leading the company's global expansion.",
    "net worth": 1866000000
  },
  {
    "rank in rich list": "8 (in 2017)",
    "full name": "Nils Foss",
    "city": "Hillerød",
    "event": "Founder of FOSS A/S in 1959, a world-leading company in analytical instruments for the food and agricultural industries. The company remains in family ownership, with his son Peter Foss serving as chairman.",
    "net worth": 1612000000
  },
  {
    "rank in rich list": "9 (in 2017)",
    "full name": "Villum Kann-Rasmussen",
    "city": "Copenhagen",
    "event": "Founder of VELUX and the VKR Group. Although he passed away in 1993, his innovations in roof windows created a global industrial powerhouse and the foundation for the family's DKK 8.8 billion fortune, now managed by his grandson, Mads Kann-Rasmussen.",
    "net worth": 1313000000
  },
  {
    "rank in rich list": "11 (in 2017)",
    "full name": "Jeppe Christiansen",
    "city": "Copenhagen",
    "event": "CEO of the investment firm Maj Invest. He is a key external figure in a family-owned dynasty, serving as the Chairman of the Board for Haldor Topsøe A/S, helping to guide the strategic direction of the highly successful engineering company.",
    "net worth": 1284000000
  },
  {
    "rank in rich list": "15 (in 2017)",
    "full name": "Hans Frede Fleggaard",
    "city": "Padborg",
    "event": "Took over his family's small colonial goods store in 1960 and transformed it into the Fleggaard Group, a massive conglomerate best known for its cross-border retail. The DKK 5.2 billion fortune is now managed by his three children: Ole, Birgitte, and Susanne.",
    "net worth": 776000000
  },
  {
    "rank in rich list": "16 (in 2017)",
    "full name": "Christian Tøpholm",
    "city": "Nærum",
    "event": "Co-founder of the hearing aid manufacturer Widex in 1956. He and his partner, Erik Westermann, built the company from scratch, creating a global player and the foundation for the Tøpholm and Westermann families' multi-billion DKK fortunes.",
    "net worth": 776000000
  },
  {
    "rank in rich list": "16 (in 2017)",
    "full name": "Erik Westermann",
    "city": "Nærum",
    "event": "Co-founder of Widex. His partnership with Christian Tøpholm led to the creation of one of the world's leading hearing aid companies, securing vast wealth for both founding families, now in their third generation of leadership.",
    "net worth": 776000000
  },
  {
    "rank in rich list": "23 (in 2017)",
    "full name": "Tonny Dalhøj Paulsen",
    "city": "Aarhus",
    "event": "Co-founded the container feeder shipping company Unifeeder with his partner, Peter Bohnsen. They sold the company in 2007 for approximately DKK 2 billion, which formed the basis of his subsequent wealth, managed through his family holding company.",
    "net worth": 582000000
  },
  {
    "rank in rich list": "24 (in 2017)",
    "full name": "Mads Frederiksen",
    "city": "Glostrup",
    "event": "Fourth-generation leader and CEO of HCS A/S Transport & Spedition, a large family-owned logistics and environmental services company. He shares ownership of the DKK 3.8 billion business with his father, Hans, and brother, Jacob.",
    "net worth": 567000000
  },
  {
    "rank in rich list": "28 (in 2017)",
    "full name": "Merete Hay",
    "city": "Copenhagen",
    "event": "Co-founder of the Danish design powerhouse HAY, alongside her husband, Rolf Hay. The company's global success is a key part of the investment portfolio of Troels Holch Povlsen (Bestseller founder), who is the majority owner.",
    "net worth": 448000000
  },
  {
    "rank in rich list": "28 (in 2017)",
    "full name": "Rolf Hay",
    "city": "Copenhagen",
    "event": "Co-founder of the internationally acclaimed design company HAY. The firm is a significant holding for Troels Holch Povlsen, who has helped finance its growth into a billion-kroner business.",
    "net worth": 448000000
  },
  {
    "rank in rich list": "29 (in 2017)",
    "full name": "Lykke Martinsen",
    "city": "London",
    "event": "Wife of Niels Martinsen and co-heir to the IC Group fashion fortune. Their daughter, Emilie, is the primary inheritor, though Niels Martinsen retains voting control of the family's DKK 2.5 billion holding company, Friheden Invest.",
    "net worth": 373000000
  }
]
```

## 📄 scripts/seed/ingest-denmark-richlist.js
*Lines: 136, Size: 4.49 KB*

```javascript
// apps/pipeline/scripts/seed/ingest-denmark-richlist.js
import mongoose from 'mongoose'
import path from 'path'
import { reinitializeLogger, logger } from '@headlines/utils-server'
import { initializeScriptEnv } from './lib/script-init.js'
import { loadAndPrepareDenmarkRichlist } from './lib/denmark-richlist-data-loader.js'
import { Opportunity } from '@headlines/models'
import {
  contactFinderChain,
  performGoogleSearch,
} from '../../packages/ai-services/src/index.js'
import colors from 'ansi-colors'
import pLimit from 'p-limit'

const CONCURRENCY_LIMIT = 5

async function createOrUpdateOpportunity(person) {
  try {
    const updateResult = await Opportunity.updateOne(
      { reachOutTo: person.name },
      {
        $setOnInsert: {
          reachOutTo: person.name,
          basedIn: person.country,
          city: person.city,
          likelyMMDollarWealth: person.wealthMillionsUSD,
          // DEFINITIVE FIX: Always initialize contactDetails as an object on insert.
          contactDetails: {
            company: person.primaryCompany,
          },
        },
        $addToSet: { whyContact: { $each: person.whyContact } },
      },
      { upsert: true }
    )

    if (updateResult.upsertedCount > 0) {
      logger.info(colors.green(`  ✅ Created new Opportunity for: ${person.name}`))
    } else if (updateResult.modifiedCount > 0) {
      logger.info(colors.yellow(`  🔄 Updated existing Opportunity for: ${person.name}`))
    } else {
      logger.info(`  ⚪️ No changes for Opportunity: ${person.name}`)
    }
    return { success: true, name: person.name }
  } catch (error) {
    logger.error(
      { err: error },
      `❌ Failed to create/update opportunity for ${person.name}`
    )
    return { success: false }
  }
}

async function enrichOpportunityWithContact(name) {
  try {
    const opportunity = await Opportunity.findOne({ reachOutTo: name })
    if (!opportunity || opportunity.contactDetails?.email) {
      logger.trace(
        `  -> Skipping email search for ${name} (already exists or opp not found).`
      )
      return { success: true, found: false }
    }

    // DEFINITIVE FIX: If contactDetails somehow doesn't exist, create it.
    if (!opportunity.contactDetails) {
      opportunity.contactDetails = {}
    }

    logger.info(`  -> AI Contact Finder: Searching for email for ${name}...`)

    const searchQuery = `"${opportunity.reachOutTo}" "${opportunity.contactDetails?.company || ''}" email contact`
    const searchResult = await performGoogleSearch(searchQuery)

    if (!searchResult.success || !searchResult.snippets) {
      logger.warn(`  -> Web search failed for ${name}. Cannot find email.`)
      return { success: true, found: false }
    }

    const response = await contactFinderChain({ snippets: searchResult.snippets })

    if (response && !response.error && response.email) {
      opportunity.contactDetails.email = response.email
      await opportunity.save()
      logger.info(
        colors.green(`    ✅ Found and saved email for ${name}: ${response.email}`)
      )
      return { success: true, found: true }
    } else {
      logger.warn(`    -> AI could not find an email for ${name}.`)
      return { success: true, found: false }
    }
  } catch (error) {
    logger.error({ err: error }, `❌ Failed during contact enrichment for ${name}`)
    return { success: false }
  }
}

async function main() {
  reinitializeLogger(path.resolve(process.cwd(), 'apps/pipeline/logs'))
  await initializeScriptEnv()
  logger.info('🚀 Starting Denmark Direct-to-Opportunity Ingestion Script...')

  const { allIndividuals } = await loadAndPrepareDenmarkRichlist()

  logger.info(
    `🔥 Launching concurrent processing for ${allIndividuals.length} individuals with a limit of ${CONCURRENCY_LIMIT}...`
  )

  const limit = pLimit(CONCURRENCY_LIMIT)
  const processingPromises = allIndividuals.map((person) =>
    limit(async () => {
      logger.info(colors.cyan(`\n--- Processing: ${person.name} ---`))
      const createResult = await createOrUpdateOpportunity(person)
      if (createResult.success) {
        await enrichOpportunityWithContact(createResult.name)
      }
    })
  )

  await Promise.all(processingPromises)

  logger.info('\n--- Ingestion Summary ---')
  logger.info(colors.green('✅ Script finished. All individuals processed.'))
}

main()
  .catch((err) =>
    logger.fatal({ err }, 'A critical error occurred in the main script execution.')
  )
  .finally(() => {
    if (mongoose.connection.readyState === 1) {
      mongoose.disconnect()
    }
    process.exit(0)
  })

```

## 📄 scripts/seed/ingest-richlist.js
*Lines: 103, Size: 3.61 KB*

```javascript
// apps/pipeline/scripts/seed/ingest-richlist.js
import mongoose from 'mongoose'
import path from 'path'
import { reinitializeLogger, logger } from '../../../../packages/utils-server'
import { initializeScriptEnv } from './lib/script-init.js'
import { loadAndPrepareRichlist } from './lib/richlist-data-loader.js'
import { createSyntheticArticle } from './lib/synthetic-article-builder.js'
import { runInjectedPipeline } from './lib/pipeline-injector.js'
import { enrichThinProfile } from './lib/enrich-thin-profile.js'
import { chunkHistoryIntoEvents } from './lib/event-chunker.js'
import colors from 'ansi-colors'

async function main() {
  reinitializeLogger(path.resolve(process.cwd(), 'apps/pipeline/logs'))
  await initializeScriptEnv()
  logger.info('🚀 Starting Rich List Ingestion Script (Sequential, Verbose Mode)...')

  const { allIndividuals, rawIndividualData } = await loadAndPrepareRichlist()

  logger.info(
    `Preparing to process ${allIndividuals.length} individuals from the ${allIndividuals[0]?.year || 'latest'} rich list...`
  )

  let totalEventsCreated = 0
  let totalOppsCreated = 0

  // DEFINITIVE FIX: Revert to a sequential for...of loop to ensure logs appear in order.
  for (const person of allIndividuals) {
    logger.info(colors.cyan(`\n--- Analyzing: ${person.name} ---`))

    if (person.isThinProfile) {
      logger.info(
        colors.magenta(
          `  📝 Thin profile detected for ${person.name.toUpperCase()}. Triggering AI enrichment...`
        )
      )
      logger.info(
        { raw_data: rawIndividualData.find((p) => p.name === person.name) },
        `Raw JSON data for ${person.name}`
      )
      const enrichedData = await enrichThinProfile(person)
      person.background = enrichedData.generated_background
    }

    const eventChunks = await chunkHistoryIntoEvents(person)

    for (const [index, chunk] of eventChunks.entries()) {
      logger.info(
        colors.bold(
          `  └── Processing event chunk ${index + 1}/${eventChunks.length}: "${chunk.description}"`
        )
      )
      try {
        const syntheticArticle = createSyntheticArticle(person, chunk)

        // The call to this function will now display all its internal logs sequentially.
        const { savedEvents, savedOpportunities } =
          await runInjectedPipeline(syntheticArticle)

        if (savedEvents && savedEvents.length > 0) {
          totalEventsCreated += savedEvents.length
          savedEvents.forEach((event) => {
            logger.info(
              colors.green(`    ✅ Event Created: "${event.synthesized_headline}"`)
            )
          })
        }
        if (savedOpportunities && savedOpportunities.length > 0) {
          totalOppsCreated += savedOpportunities.length
          savedOpportunities.forEach((opp) => {
            logger.info(
              colors.green(
                `    ✅ Opportunity Created: "${opp.reachOutTo}" (~$${opp.likelyMMDollarWealth}M)`
              )
            )
          })
        }
      } catch (error) {
        logger.error(
          { err: error },
          `    ❌ Failed to process event chunk: "${chunk.description}"`
        )
      }
    }
  }

  logger.info('\n--- Ingestion Summary ---')
  logger.info(colors.green(`✅ Successfully created ${totalEventsCreated} events.`))
  logger.info(colors.green(`✅ Successfully created ${totalOppsCreated} opportunities.`))
  logger.info('✅ Script finished.')
}

main()
  .catch((err) =>
    logger.fatal({ err }, 'A critical error occurred in the main script execution.')
  )
  .finally(() => {
    if (mongoose.connection.readyState === 1) {
      mongoose.disconnect()
    }
    process.exit(0)
  })

```

## 📄 scripts/seed/lib/denmark-richlist-data-loader.js
*Lines: 89, Size: 2.86 KB*

```javascript
// apps/pipeline/scripts/seed/lib/denmark-richlist-data-loader.js
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'
import { Opportunity } from '@headlines/models'
import { logger } from '@headlines/utils-server'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const BASE_PATH = path.resolve(__dirname, '../../')
const DKK_TO_USD_RATE = 0.14 // Approximate conversion rate

// DEFINITIVE FIX: Expanded city-to-country mapping to be more comprehensive
const cityToCountryMap = {
  london: 'United Kingdom',
  geneva: 'Switzerland',
  zug: 'Switzerland',
  dubai: 'United Arab Emirates',
  boston: 'United States',
  'palo alto': 'United States',
  'san francisco': 'United States',
  'new york': 'United States',
  'los angeles': 'United States',
  frankfurt: 'Germany',
  munich: 'Germany',
  berlin: 'Germany',
  sydney: 'Australia',
  marbella: 'Spain',
  mallorca: 'Spain',
  'monte carlo': 'Monaco',
  lugano: 'Switzerland',
  utrecht: 'Netherlands',
  reykjavik: 'Iceland',
  copenhagen: 'Denmark',
  aarhus: 'Denmark',
  odense: 'Denmark',
  aalborg: 'Denmark',
  esbjerg: 'Denmark',
}

function getCountryFromCity(city) {
  if (!city) return 'Denmark'
  const lowerCity = city.toLowerCase()
  return cityToCountryMap[lowerCity] || 'Denmark'
}

export async function loadAndPrepareDenmarkRichlist() {
  const jsonPath = path.join(BASE_PATH, 'seed/data/denmark.json')
  const rawIndividuals = JSON.parse(fs.readFileSync(jsonPath, 'utf8'))

  const uniqueIndividuals = Array.from(
    new Map(rawIndividuals.map((item) => [item['full name'], item])).values()
  )
  logger.info(
    `Loaded ${rawIndividuals.length} total individuals from ${path.basename(jsonPath)}, filtered down to ${uniqueIndividuals.length} unique entries.`
  )

  const existingOppNames = (await Opportunity.find({}).select('reachOutTo').lean()).map(
    (o) => o.reachOutTo
  )
  const existingSet = new Set(existingOppNames)

  const preparedIndividuals = uniqueIndividuals.map((person) => {
    const wealthUSD = person['net worth'] * DKK_TO_USD_RATE
    const wealthMillionsUSD = Math.round(wealthUSD / 1000000)

    const background = `Based in: ${person.city}. Estimated Net Worth: $${wealthMillionsUSD}M USD. Event/History: ${person.event}`
    const isThinProfile = background.trim().length < 50

    const preparedPersonObject = {
      name: person['full name'],
      city: person.city,
      country: getCountryFromCity(person.city),
      industry: person.industry || 'Finance',
      wealthMillionsUSD: wealthMillionsUSD,
      background: background,
      wealthSummary: '',
      primaryCompany: 'Private Equity',
      year: new Date().getFullYear(),
      isExisting: existingSet.has(person['full name']),
      isThinProfile,
    }

    return preparedPersonObject
  })

  return { allIndividuals: preparedIndividuals, rawIndividualData: uniqueIndividuals }
}

```

## 📄 scripts/seed/lib/enrich-thin-profile.js
*Lines: 116, Size: 4.93 KB*

```javascript
// apps/pipeline/scripts/seed/lib/enrich-thin-profile.js
import { callLanguageModel } from '../../../../../packages/ai-services/src/index.js'
import { settings } from '../../../../../packages/config/src/server.js'
import { logger } from '../../../../../packages/utils-server'
import { z } from 'zod'

const verificationSchema = z.object({
  is_significant_figure: z
    .boolean()
    .describe(
      'True if the person is a known business figure (founder, CEO, major owner).'
    ),
  verification_summary: z
    .string()
    .describe(
      "A neutral, one-sentence summary of the person's primary role based on general knowledge."
    ),
})

const enrichmentSchema = z.object({
  summary: z.string().min(20).describe('The generated 2-3 sentence background summary.'),
})

const createFallbackText = (person) =>
  `This is a wealth profile for ${person.name}, a notable figure in the ${person.industry} sector, primarily associated with the company ${person.primaryCompany}. Their estimated wealth is approximately $${person.wealthMillionsUSD}M USD.`

/**
 * Uses a robust, two-step AI process to generate a background summary for an individual
 * when no pre-written text is available, minimizing hallucination risk.
 * @param {object} person - A person object from the rich list.
 * @returns {Promise<{generated_background: string}>} The AI-generated or fallback text.
 */
export async function enrichThinProfile(person) {
  logger.info(`  -> AI Enrichment (2-Step): Verifying significance of ${person.name}...`)

  // --- STEP 1: NEUTRAL VERIFICATION ---
  const verificationPrompt = `You are a neutral fact-checker. Based on your general knowledge, is the following person a significant business figure (founder, CEO, major owner, etc.)? Provide a boolean answer and a brief, neutral summary of their primary role.

Respond ONLY with a valid JSON object: {"is_significant_figure": boolean, "verification_summary": "One sentence summary."}`

  const verificationUserContent = `Person: ${person.name}\nCompany / Industry: ${person.primaryCompany}`

  try {
    const verificationResponse = await callLanguageModel({
      modelName: settings.LLM_MODEL_UTILITY,
      systemPrompt: verificationPrompt,
      userContent: verificationUserContent,
      isJson: true,
    })

    const validation = verificationSchema.safeParse(verificationResponse)
    if (!validation.success || !validation.data.is_significant_figure) {
      logger.warn(
        `  -> Verification FAILED for ${person.name}. The AI did not recognize them as a significant business figure. Using fallback text.`
      )
      if (!validation.success)
        logger.error(
          { err: validation.error.flatten(), raw_response: verificationResponse },
          'Verification response failed Zod validation.'
        )
      return { generated_background: createFallbackText(person) }
    }

    const verifiedSummary = validation.data.verification_summary
    logger.info(`  -> Verification PASSED for ${person.name}: "${verifiedSummary}"`)

    // --- STEP 2: CONDITIONAL ENRICHMENT ---
    logger.info(
      `  -> AI Enrichment: Generating full background for verified figure ${person.name}...`
    )
    const enrichmentPrompt = `You are a financial biographer. You have already verified the subject's identity. Now, synthesize the verified summary with the provided private financial data to write a concise, professional background summary (2-3 sentences) suitable for a rich list publication. Focus on their business history, key achievements, and the source of their wealth.

Respond ONLY with a valid JSON object: {"summary": "Your generated text."}`

    const enrichmentUserContent = `
        Verified Summary: "${verifiedSummary}"
        
        Private Financial Data:
        - Name: ${person.name}
        - Primary Company / Industry: ${person.primaryCompany} / ${person.industry}
        - Estimated Wealth: $${person.wealthMillionsUSD}M USD
        - Country: ${person.country}
    `

    const enrichmentResponse = await callLanguageModel({
      modelName: settings.LLM_MODEL_UTILITY,
      systemPrompt: enrichmentPrompt,
      userContent: enrichmentUserContent,
      isJson: true,
    })

    const enrichmentValidation = enrichmentSchema.safeParse(enrichmentResponse)

    if (!enrichmentValidation.success) {
      logger.error(
        { err: enrichmentValidation.error.flatten(), raw_response: enrichmentResponse },
        'Enrichment response failed Zod validation.'
      )
      throw new Error('AI enrichment response failed validation.')
    }

    // DEFINITIVE FIX: Log the final generated background.
    logger.info(
      { generated_background: enrichmentValidation.data.summary },
      `Generated background for ${person.name}`
    )
    return { generated_background: enrichmentValidation.data.summary }
  } catch (error) {
    logger.error(
      { err: error },
      `Full AI enrichment process failed for ${person.name}. Using fallback text.`
    )
    return { generated_background: createFallbackText(person) }
  }
}

```

## 📄 scripts/seed/lib/event-chunker.js
*Lines: 126, Size: 4.18 KB*

```javascript
// apps/pipeline/scripts/seed/lib/event-chunker.js
import { callLanguageModel } from '../../../../../packages/ai-services/src/index.js'
import { settings } from '../../../../../packages/config/src/server.js'
// DEFINITIVE FIX: Import loggers from the shared utils package
import { logger, auditLogger } from '../../../../../packages/utils-server'
import { z } from 'zod'

const eventChunkSchema = z.object({
  events: z.array(
    z.object({
      date: z.string().describe('Estimated date of the event in YYYY-MM-DD format.'),
      description: z
        .string()
        .describe('A concise, one-sentence summary of the specific event.'),
      participants: z
        .array(z.string())
        .optional()
        .describe('List of key individuals or companies involved.'),
      type: z
        .string()
        .describe("The type of event (e.g., 'Sale', 'IPO', 'Wealth Profile')."),
    })
  ),
})

// --- REINFORCED PROMPT ---
const PROMPT = `You are a financial historian AI. Your task is to read a long biography of a wealthy individual and break it down into a timeline of distinct, significant wealth events.

**CRITICAL INSTRUCTIONS:**
1.  Read the entire background text provided.
2.  Identify specific, discrete events that impacted the person's wealth (e.g., company sales, major investments, IPOs, inheritance).
3.  For each event, extract the estimated date, a concise description, a list of key participants, and a simple event type string.
4.  If the text is a general profile without specific past events, you MUST create a single "Wealth Profile" event for the current year.
5.  Ignore non-financial events.

**OUTPUT FORMAT (MANDATORY):**
You MUST respond ONLY with a valid JSON object. This object MUST contain a single key called "events".
The value of "events" MUST be an ARRAY of event objects.

**EXAMPLE 1 (Multiple Events):**
{
  "events": [
    {
      "date": "1986-01-01",
      "description": "Faced legal issues regarding oil freight charges, but the case was later dropped.",
      "participants": ["John Fredriksen"],
      "type": "Legal Dispute"
    },
    {
      "date": "2007-01-01",
      "description": "Donated 50 million kroner to the Radium hospital for cancer research.",
      "participants": ["John Fredriksen"],
      "type": "Philanthropy"
    }
  ]
}

**EXAMPLE 2 (Single Event):**
{
  "events": [
    {
      "date": "2024-09-15",
      "description": "General wealth profile for a prominent figure in the Shipping industry.",
      "participants": ["John Fredriksen"],
      "type": "Wealth Profile"
    }
  ]
}

Your entire response must be ONLY the JSON object.`

const createFallbackEvent = (person) => {
  return [
    {
      date: `${person.year}-09-15`,
      description: `Wealth profile for ${person.name}, a prominent figure in the ${person.industry} sector with an estimated fortune of $${person.wealthMillionsUSD}M USD.`,
      participants: [person.name],
      type: 'Wealth Profile',
    },
  ]
}

export async function chunkHistoryIntoEvents(person) {
  logger.info(`  -> AI Event Chunker: Analyzing history for ${person.name}...`)
  try {
    auditLogger.info(
      { context: { background_text: person.background } },
      `Event Chunker Input for ${person.name}`
    )
    const response = await callLanguageModel({
      modelName: settings.LLM_MODEL_UTILITY,
      systemPrompt: PROMPT,
      userContent: person.background,
      isJson: true,
    })
    auditLogger.info(
      { context: { llm_response: response } },
      `Event Chunker Raw Output for ${person.name}`
    )

    const validation = eventChunkSchema.safeParse(response)
    if (!validation.success) {
      logger.error(
        { err: validation.error.flatten(), raw_response: response },
        'AI response failed Zod validation.'
      )
      return createFallbackEvent(person)
    }

    if (validation.data.events.length === 0) {
      return createFallbackEvent(person)
    }

    logger.info(
      `  -> AI Event Chunker: Identified ${validation.data.events.length} distinct event(s).`
    )
    return validation.data.events
  } catch (error) {
    logger.error(
      { err: error },
      `Event chunking failed for ${person.name}. Creating a single fallback event.`
    )
    return createFallbackEvent(person)
  }
}

```

## 📄 scripts/seed/lib/pipeline-injector.js
*Lines: 84, Size: 2.77 KB*

```javascript
// apps/pipeline/scripts/seed/lib/pipeline-injector.js
import { runAssessAndEnrich } from '../../../src/pipeline/3_assessAndEnrich.js'
import { runClusterAndSynthesize } from '../../../src/pipeline/4_clusterAndSynthesize.js'
import { judgeAndFilterOutput } from '../../../src/pipeline/submodules/commit/1_judgeOutput.js'
import { saveResultsToDb } from '../../../src/pipeline/submodules/commit/2_saveResults.js'
import {
  tokenTracker,
  apiCallTracker,
  logger,
} from '../../../../../packages/utils-server'
import { settings } from '../../../../../packages/config/src/server.js'

const FATAL_JUDGEMENT_QUALITIES = ['Irrelevant', 'Poor']

/**
 * Injects a synthetic article into the pipeline from Stage 3 onwards.
 * @param {object} syntheticArticle - The article object to process.
 * @returns {Promise<{savedEvents: Array, savedOpportunities: Array}>} The final saved data.
 */
export async function runInjectedPipeline(syntheticArticle) {
  tokenTracker.reset()
  apiCallTracker.reset()

  tokenTracker.initializeModels([
    settings.LLM_MODEL_HEADLINE_ASSESSMENT,
    settings.LLM_MODEL_ARTICLE_ASSESSMENT,
    settings.LLM_MODEL_SYNTHESIS,
    settings.LLM_MODEL_UTILITY,
  ])

  let payload = {
    articlesForPipeline: [syntheticArticle],
    runStats: {
      errors: [],
      synthesizedEventsForReport: [],
      enrichmentOutcomes: [],
      headlinesScraped: 0,
      scraperHealth: [],
      validatedHeadlines: 0,
      freshHeadlinesFound: 1,
      headlinesAssessed: 0,
      relevantHeadlines: 0,
      articlesEnriched: 0,
      relevantArticles: 0,
      eventsClustered: 0,
      eventsSynthesized: 0,
      judgeVerdict: null,
      eventsEmailed: 0,
      tokenUsage: {},
      apiCalls: {},
    },
  }

  logger.info('  -> Injecting into Stage 3: Assess & Enrich...')
  payload = (await runAssessAndEnrich(payload)).payload

  if (payload.enrichedArticles?.length > 0) {
    logger.info('  -> Injecting into Stage 4: Cluster & Synthesize...')
    payload = (await runClusterAndSynthesize(payload)).payload
  } else {
    logger.warn('  -> Skipping Stage 4: No articles were successfully enriched.')
  }

  logger.info('  -> Injecting into Stage 5 (Commit): Judging output...')
  const { finalEvents, finalOpportunities } = await judgeAndFilterOutput(
    payload,
    FATAL_JUDGEMENT_QUALITIES
  )

  logger.info('  -> Injecting into Stage 5 (Commit): Saving results to database...')
  const { savedEvents, savedOpportunities } = await saveResultsToDb(
    payload,
    finalEvents,
    finalOpportunities
  )

  // DEFINITIVE FIX: Convert the Mongoose documents to plain JSON before returning.
  // This ensures the calling script can access properties directly.
  return {
    savedEvents: JSON.parse(JSON.stringify(savedEvents)),
    savedOpportunities: JSON.parse(JSON.stringify(savedOpportunities)),
  }
}

```

## 📄 scripts/seed/lib/richlist-data-loader.js
*Lines: 89, Size: 2.82 KB*

```javascript
// apps/pipeline/scripts/seed/lib/richlist-data-loader.js
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'
import { Opportunity } from '../../../../../packages/models/src/index.js'
import { logger } from '../../../../../packages/utils-server'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const BASE_PATH = path.resolve(__dirname, '../../')

const cityToCountryMap = {
  Sveits: 'Switzerland',
  USA: 'United States',
  Kypros: 'Cyprus',
  Storbritannia: 'United Kingdom',
  Belgia: 'Belgium',
  Danmark: 'Denmark',
  Brasil: 'Brazil',
  Italia: 'Italy',
  Monaco: 'Monaco',
  Portugal: 'Portugal',
  Spania: 'Spain',
  Singapore: 'Singapore',
  Østerrike: 'Austria',
}

function getCountry(city) {
  return cityToCountryMap[city] || 'Norway'
}

function parseWealth(wealthStr) {
  if (!wealthStr || typeof wealthStr !== 'string') return 0
  const match = wealthStr.match(/([\d,]+)\s*mrd/)
  if (!match) return 0
  const cleaned = match[1].replace(/,/g, '.')
  const value = parseFloat(cleaned)
  return Math.round(value * 94)
}

export async function loadAndPrepareRichlist() {
  const jsonPath = path.join(BASE_PATH, 'seed/data/norway.json')
  const jsonData = JSON.parse(fs.readFileSync(jsonPath, 'utf8'))
  const allIndividuals = jsonData.individuals
  logger.info(
    `Loaded ${allIndividuals.length} total individuals from ${path.basename(jsonPath)}.`
  )

  const existingOppNames = (await Opportunity.find({}).select('reachOutTo').lean()).map(
    (o) => o.reachOutTo
  )
  const existingSet = new Set(existingOppNames)

  const preparedIndividuals = await Promise.all(
    allIndividuals.map(async (person) => {
      const background = person.scraped_data.background_information
      const isThinProfile = !background || background.trim().length < 50

      if (isThinProfile) {
        let reason = !background
          ? 'is null/undefined'
          : `is too short (${background.trim().length} chars)`
        logger.trace(
          { person: person.name, reason },
          `Identified as thin profile because background_information ${reason}.`
        )
      }

      const preparedPersonObject = {
        name: person.name,
        city: person.scraped_data.city,
        country: getCountry(person.scraped_data.city),
        industry: person.industry,
        wealthMillionsUSD: parseWealth(person.scraped_data.current_wealth),
        background: isThinProfile ? null : background,
        wealthSummary: person.scraped_data.wealth_summary,
        primaryCompany: person.scraped_data.roles?.[0]?.company || person.industry,
        year: jsonData.list_metadata.year,
        isExisting: existingSet.has(person.name),
        isThinProfile,
      }

      return preparedPersonObject
    })
  )

  return { allIndividuals: preparedIndividuals, rawIndividualData: allIndividuals }
}

```

## 📄 scripts/seed/lib/script-init.js
*Lines: 35, Size: 1.28 KB*

```javascript
// apps/pipeline/scripts/lib/script-init.js
import { logger } from '@headlines/utils-server'
import { configure as configureScraperLogic } from '@headlines/scraper-logic/config.js'
import * as appConfig from '@headlines/config'
import { refreshConfig, configStore } from '../../../src/config/dynamicConfig.js'
import { initializeSettings, settings } from '@headlines/config'
import dbConnect from '@headlines/data-access/dbConnect.js'
import * as aiServices from '@headlines/ai-services'

let isInitialized = false

/**
 * Connects to DB, loads static and dynamic config, and configures shared packages.
 * This is the standard initialization routine for any standalone pipeline script.
 */
export async function initializeScriptEnv() {
  if (isInitialized) return

  await dbConnect()
  await initializeSettings()
  await refreshConfig()

  const utilityFunctions = {
    findAlternativeSources: aiServices.findAlternativeSources,
    findNewsApiArticlesForEvent: aiServices.findNewsApiArticlesForEvent,
    performGoogleSearch: aiServices.performGoogleSearch,
    fetchWikipediaSummary: aiServices.fetchWikipediaSummary,
  }

  configureScraperLogic({ ...appConfig, configStore, utilityFunctions, logger, settings })

  isInitialized = true
  logger.info('✅ Script environment initialized successfully.')
}

```

## 📄 scripts/seed/lib/synthetic-article-builder.js
*Lines: 39, Size: 1.51 KB*

```javascript
// apps/pipeline/scripts/seed/lib/synthetic-article-builder.js
import mongoose from 'mongoose'

/**
 * Creates a synthetic article object from a prepared rich list individual and a specific event chunk.
 * @param {object} person - A prepared individual object from the data loader.
 * @param {object} eventChunk - An event chunk from the AI event chunker.
 * @returns {object} A synthetic article object.
 */
export function createSyntheticArticle(person, eventChunk) {
  const headline = `Event Profile: ${eventChunk.type} involving ${eventChunk.participants.join(', ')}`
  // Combine the specific event description with the general background for rich context
  const content = `An analysis of a specific wealth event involving ${person.name}.
Event Type: ${eventChunk.type}
Event Date: ${eventChunk.date}
Event Description: ${eventChunk.description}

General Background Context:
${person.background}
${person.wealthSummary || ''}`

  // Create a unique link based on the person and a hash of the event description
  const eventHash = new mongoose.Types.ObjectId().toString().slice(-6)
  const link = `https://richlist.norway/${person.name.toLowerCase().replace(/\s+/g, '-')}-${eventChunk.date}-${eventHash}`

  return {
    _id: new mongoose.Types.ObjectId(),
    headline,
    link,
    newspaper: `Kapital Rich List ${person.year}`,
    source: 'Richlist Ingestion',
    country: person.country,
    createdAt: new Date(eventChunk.date),
    articleContent: { contents: [content] },
    relevance_headline: 100,
    status: 'scraped',
  }
}

```

## 📄 scripts/seed/lib/user-interact.js
*Lines: 44, Size: 1.23 KB*

```javascript
// apps/pipeline/scripts/seed/lib/user-interact.js
import readline from 'readline'

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

/**
 * Prompts the user for a y/n/a response.
 * @param {string} query - The question to ask the user.
 * @returns {Promise<string>} - A promise that resolves to 'y', 'n', or 'a'.
 */
export function promptUser(query) {
  return new Promise((resolve) => {
    const ask = () => {
      // Use a small timeout to allow any buffered logger output to flush first.
      setTimeout(() => {
        // Clear the current line and move cursor to the beginning before asking.
        readline.clearLine(process.stdout, 0)
        readline.cursorTo(process.stdout, 0)

        rl.question(query, (answer) => {
          const response = answer.trim().toLowerCase()
          if (['y', 'n', 'a'].includes(response)) {
            resolve(response)
          } else {
            console.log('Invalid input. Please enter "y", "n", or "a".')
            ask()
          }
        })
      }, 100) // 100ms delay is usually sufficient.
    }
    ask()
  })
}

/**
 * Closes the readline interface. Should be called when the script is finished.
 */
export function closeReader() {
  rl.close()
}

```

## 📄 scripts/seed/seed-admin-user.js
*Lines: 61, Size: 2.08 KB*

```javascript
// apps/pipeline/scripts/seed/seed-admin-user.js (version 4.0.0 - Model-driven)
import {
  reinitializeLogger as initializeLogger,
  logger,
} from '../../../../packages/utils-server'
import path from 'path'
import { Subscriber, Country } from '../../../../packages/models/src/index.js'
import dbConnect from '../../../../packages/data-access/src/dbConnect.js'
import mongoose from 'mongoose'

initializeLogger(path.resolve(process.cwd(), 'apps/pipeline/logs'))

const ADMIN_EMAIL = process.env.ADMIN_EMAIL
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD
const ADMIN_FIRST_NAME = process.env.ADMIN_FIRST_NAME || 'Admin'

async function seedAdminUser() {
  if (!ADMIN_EMAIL || !ADMIN_PASSWORD) {
    logger.fatal('❌ ADMIN_EMAIL and ADMIN_PASSWORD must be set in your .env file.')
    return
  }

  await dbConnect()
  logger.info(`🚀 Seeding Admin User: ${ADMIN_EMAIL}...`)
  try {
    const existingUser = await Subscriber.findOne({ email: ADMIN_EMAIL })
    const allCountries = await Country.find({ status: 'active' }).select('name').lean()
    const countrySubscriptions = allCountries.map((c) => ({ name: c.name, active: true }))

    if (existingUser) {
      logger.warn(
        'Admin user already exists. Overwriting password and ensuring settings are correct.'
      )
      existingUser.password = ADMIN_PASSWORD // The pre-save hook will hash this
      await existingUser.save()
      logger.info(`✅ Admin user password has been reset and saved.`)
    } else {
      const newUser = new Subscriber({
        email: ADMIN_EMAIL,
        password: ADMIN_PASSWORD, // The pre-save hook will hash this
        firstName: ADMIN_FIRST_NAME,
        role: 'admin',
        isActive: true,
        countries: countrySubscriptions,
        subscriptionTier: 'enterprise',
        isLifetimeFree: true,
      })
      await newUser.save()
      logger.info(`✅ Admin user created successfully.`)
    }
  } catch (error) {
    logger.fatal({ err: error }, '❌ Admin user seeding failed.')
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
    }
  }
}

seedAdminUser()

```

## 📄 scripts/seed/seed-countries.js
*Lines: 57, Size: 1.76 KB*

```javascript
// apps/pipeline/scripts/seed/seed-countries.js (version 2.3.0)
import {
  reinitializeLogger as initializeLogger,
  logger,
} from '../../../../packages/utils-server'
import path from 'path'
import fs from 'fs'
import { fileURLToPath } from 'url'
import { Country } from '../../../../packages/models/src/index.js'
import dbConnect from '../../../../packages/data-access/src/dbConnect.js'
import mongoose from 'mongoose'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
initializeLogger(path.resolve(process.cwd(), 'apps/pipeline/logs'))

function loadCountriesFromFile() {
  const filePath = path.resolve(
    __dirname,
    '../../../../packages/utils/src/data/countries.json'
  )
  const fileContent = fs.readFileSync(filePath, 'utf8')
  const countryData = JSON.parse(fileContent)
  return Object.entries(countryData).map(([name, isoCode]) => ({ name, isoCode }))
}

async function seedCountries() {
  await dbConnect()
  logger.info('🚀 Seeding Countries from canonical JSON file...')
  const countriesToSeed = loadCountriesFromFile()
  try {
    const bulkOps = countriesToSeed.map((country) => ({
      updateOne: {
        filter: { name: country.name },
        update: {
          $set: { isoCode: country.isoCode.substring(0, 2) },
          $setOnInsert: { name: country.name, status: 'active' },
        },
        upsert: true,
      },
    }))

    const result = await Country.bulkWrite(bulkOps)
    logger.info(
      `✅ Country seeding complete. ${result.upsertedCount} new countries added, ${result.modifiedCount} updated.`
    )
  } catch (error) {
    logger.fatal({ err: error }, '❌ Country seeding failed.')
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
    }
  }
}

seedCountries()

```

## 📄 scripts/seed/seed-settings.js
*Lines: 155, Size: 4.65 KB*

```javascript
// apps/pipeline/scripts/seed/seed-settings.js (version 1.8.0)
import { reinitializeLogger, logger } from '@headlines/utils-server'
import path from 'path'
import { Setting } from '@headlines/models'
import dbConnect from '../../../../packages/data-access/src/dbConnect.js'
import mongoose from 'mongoose'

// Initialize logger for this specific script run
reinitializeLogger(path.resolve(process.cwd(), 'apps/pipeline/logs'))

const SETTINGS = [
  {
    key: 'HEADLINES_RELEVANCE_THRESHOLD',
    // DEFINITIVE FIX: Lowered from 35 to 25 to widen the funnel and reduce missed articles.
    value: 25,
    description: 'Minimum score (0-100) for a headline to be considered for enrichment.',
    type: 'number',
  },
  {
    key: 'ARTICLES_RELEVANCE_THRESHOLD',
    // FUNNEL WIDENING: Lowered from 50 to 45 to investigate high drop-off rate.
    value: 45,
    description:
      'Minimum score (0-100) for an enriched article to be considered a valid event signal.',
    type: 'number',
  },
  {
    key: 'EVENT_RELEVANCE_THRESHOLD',
    // FUNNEL WIDENING: Lowered from 59 to 55 to capture more borderline events.
    value: 55,
    description:
      'Minimum score for a synthesized event to be saved and sent in notifications.',
    type: 'number',
  },
  {
    key: 'MINIMUM_EVENT_AMOUNT_USD_MILLIONS',
    value: 20,
    description: 'Events with a detected financial amount below this will be dropped.',
    type: 'number',
  },
  {
    key: 'HIGH_SIGNAL_HEADLINE_THRESHOLD',
    value: 90,
    description:
      'Headlines scoring above this are considered high-signal and trigger special processing if content scraping fails.',
    type: 'number',
  },
  {
    key: 'AGENT_DISAGREEMENT_THRESHOLD',
    value: 50,
    description:
      'If headline score and article score differ by more than this, it is flagged as a disagreement.',
    type: 'number',
  },
  {
    key: 'SINGLETON_RELEVANCE_THRESHOLD',
    value: 85,
    description:
      'An article that does not cluster with others must meet this score to be processed as a standalone event.',
    type: 'number',
  },
  {
    key: 'HIGH_VALUE_DEAL_USD_MM',
    value: 50,
    description:
      'AI Prompt: The dollar amount (in millions) that defines a "high value" M&A deal.',
    type: 'number',
  },
  {
    key: 'SIGNIFICANT_PRIVATE_BENEFICIARY_USD_MM',
    value: 30,
    description:
      'AI Prompt: The wealth threshold (in millions) for extracting an individual as a key contact.',
    type: 'number',
  },
  {
    key: 'WATCHLIST_SCORE_BOOST',
    value: 35,
    description:
      "The number of points to add to a headline's relevance score if it matches a watchlist entity.",
    type: 'number',
  },
  {
    key: 'SUGGESTION_GENERATION_THRESHOLD',
    value: 80,
    description:
      'The minimum event score required to trigger the AI to look for new watchlist suggestions.',
    type: 'number',
  },
  {
    key: 'MIN_ARTICLE_CHARS',
    value: 100,
    description:
      'The minimum number of characters required for scraped article content to be considered valid.',
    type: 'number',
  },
  {
    key: 'LLM_MODEL_HEADLINE_ASSESSMENT',
    value: 'gpt-5-mini',
    description: 'LLM model used for the initial, high-volume headline assessment stage.',
    type: 'string',
  },
  {
    key: 'LLM_MODEL_ARTICLE_ASSESSMENT',
    value: 'gpt-5-mini',
    description: 'LLM model used for full article analysis and enrichment.',
    type: 'string',
  },
  {
    key: 'LLM_MODEL_SYNTHESIS',
    value: 'gpt-5-mini',
    description:
      'LLM model used for clustering, synthesis, and other high-level reasoning tasks.',
    type: 'string',
  },
  {
    key: 'LLM_MODEL_UTILITY',
    value: 'gpt-5-nano',
    description:
      'A smaller, faster model for simple, utility-focused tasks like classification or extraction.',
    type: 'string',
  },
]

async function seedSettings() {
  await dbConnect()
  logger.info('🚀 Syncing Pipeline Settings from config file...')
  try {
    const bulkOps = SETTINGS.map((setting) => ({
      updateOne: {
        filter: { key: setting.key },
        // Use $set to overwrite existing settings with values from the file.
        // This ensures the file is always the source of truth.
        update: { $set: setting },
        upsert: true,
      },
    }))

    const result = await Setting.bulkWrite(bulkOps)

    // Improved log message to show both new and modified settings.
    logger.info(
      `✅ Settings sync complete. ${result.upsertedCount} new settings added, ${result.modifiedCount} settings updated.`
    )
  } catch (error) {
    logger.fatal({ err: error }, '❌ Settings sync failed.')
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
    }
  }
}

seedSettings()

```

## 📄 scripts/seed/seed-test-user.js
*Lines: 74, Size: 2.34 KB*

```javascript
// apps/pipeline/scripts/seed/seed-test-user.js
import mongoose from 'mongoose'
import bcrypt from 'bcrypt'
import { env } from '../../../../packages/config/src/server.js'
import dbConnect from '../../../../packages/data-access/src/dbConnect.js'
import { Subscriber } from '../../../../packages/models/src/index.js'
import { logger, reinitializeLogger } from '../../../../packages/utils-server'
import path from 'path'

reinitializeLogger(path.resolve(process.cwd(), 'apps/pipeline/logs'))

const TEST_USER_EMAIL = 'casagerardon@gmail.com'
const TEST_USER_PASSWORD = 'Stanley'

async function createTestUser() {
  await dbConnect()
  logger.info(`🚀 Seeding configured test user: ${TEST_USER_EMAIL}...`)

  try {
    const countriesForSubscription = [
      'Norway',
      'United States',
      'Italy',
      'Denmark',
      'Sweden',
      'Global',
      'Scandinavia',
    ]
    const existingUser = await Subscriber.findOne({ email: TEST_USER_EMAIL })

    if (existingUser) {
      logger.warn(
        '🔄 Test user already exists. Ensuring subscriptions and active status are correct...'
      )
      existingUser.isActive = true
      existingUser.emailNotificationsEnabled = true

      const existingCountries = new Set(existingUser.countries.map((c) => c.name))
      countriesForSubscription.forEach((country) => {
        if (!existingCountries.has(country)) {
          existingUser.countries.push({ name: country, active: true })
        }
      })
      await existingUser.save()
      logger.info(
        `✅ User '${TEST_USER_EMAIL}' updated and is subscribed to all necessary countries.`
      )
    } else {
      const newUser = new Subscriber({
        email: TEST_USER_EMAIL,
        password: TEST_USER_PASSWORD,
        firstName: 'Test',
        lastName: 'Recipient',
        isActive: true,
        emailNotificationsEnabled: true,
        countries: countriesForSubscription.map((name) => ({ name, active: true })),
      })
      await newUser.save()
      logger.info(
        `✅ New test user '${TEST_USER_EMAIL}' created and subscribed to necessary countries.`
      )
    }
  } catch (error) {
    logger.error({ err: error }, '❌ Failed to create or update test user.')
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
      logger.info('Disconnected from MongoDB.')
    }
  }
}

createTestUser()

```

## 📄 scripts/seed/sync-test-user-subscriptions.js
*Lines: 51, Size: 1.69 KB*

```javascript
// apps/pipeline/scripts/seed/sync-test-user-subscriptions.js
import mongoose from 'mongoose'
import { env } from '../../../../packages/config/src/server.js'
import dbConnect from '../../../../packages/data-access/src/dbConnect.js'
import { Subscriber, Country } from '../../../../packages/models/src/index.js'
import { logger, reinitializeLogger } from '../../../../packages/utils-server'
import path from 'path'

reinitializeLogger(path.resolve(process.cwd(), 'apps/pipeline/logs'))

const TEST_USER_EMAIL = 'casagerardon@gmail.com'

async function syncUserSubscriptions() {
  await dbConnect()
  logger.info(`🚀 Syncing subscriptions for test user: ${TEST_USER_EMAIL}...`)

  try {
    const user = await Subscriber.findOne({ email: TEST_USER_EMAIL })

    if (!user) {
      logger.error(
        `❌ User with email '${TEST_USER_EMAIL}' not found. Please run the 'db:seed:test-user' script first.`
      )
      return
    }

    const activeCountries = await Country.find({ status: 'active' }).select('name').lean()
    if (activeCountries.length === 0) {
      logger.warn('⚠️ No active countries found in the database.')
      return
    }

    const activeCountryNames = activeCountries.map((c) => c.name)
    user.countries = activeCountryNames.map((name) => ({ name, active: true }))

    await user.save()
    logger.info(
      `✅ User '${TEST_USER_EMAIL}' is now subscribed to all ${activeCountryNames.length} active countries.`
    )
  } catch (error) {
    logger.error({ err: error }, '❌ Failed to sync user subscriptions.')
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
      logger.info('Disconnected from MongoDB.')
    }
  }
}

syncUserSubscriptions()

```

## 📄 scripts/sources/analyze-sources.js
*Lines: 105, Size: 3.51 KB*

```javascript
// scripts/sources/analyze-sources.js (version 1.0)
import 'dotenv/config'
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { logger } from '@headlines/utils-server'
import { connectDatabase, disconnectDatabase } from '../../src/database.js'
import { scrapeSiteForHeadlines } from '../../src/modules/scraper/headlineScraper.js'
import { suggestNewSelector } from '../../src/modules/ai/agents/selectorRepairAgent.js'
import Source from '../../models/Source.js'

logger.level = 'warn' // Keep console clean for this focused tool

async function main() {
  const argv = yargs(hideBin(process.argv))
    .usage('Usage: $0 --source <SourceName> [--fix]')
    .option('source', {
      alias: 's',
      type: 'string',
      description: 'The name of the source to analyze and fix.',
      demandOption: true,
    })
    .option('fix', {
      alias: 'f',
      type: 'boolean',
      description: 'Attempt to automatically verify and apply the AI-suggested fix.',
      default: false,
    }).argv

  console.log(`\n🔎 Analyzing source: "${argv.source}"...`)

  try {
    await connectDatabase()
    const source = await Source.findOne({ name: new RegExp(`^${argv.source}$`, 'i') })
    if (!source) {
      console.error(`❌ Source "${argv.source}" not found.`)
      return
    }

    console.log(`- Current headline selector: "${source.headlineSelector}"`)
    const initialScrape = await scrapeSiteForHeadlines(source)

    if (initialScrape.success && initialScrape.resultCount > 0) {
      console.log(
        `✅ This source appears to be healthy. Found ${initialScrape.resultCount} headlines.`
      )
      return
    }

    console.log(`\n⚠️ Source is failing. Reason: ${initialScrape.error}`)
    if (!initialScrape.debugHtml) {
      console.error('❌ Cannot proceed with analysis: Failed to retrieve page HTML.')
      return
    }

    console.log('🤖 Asking AI agent to suggest a new selector...')
    const suggestion = await suggestNewSelector(
      source.sectionUrl,
      source.headlineSelector,
      initialScrape.debugHtml
    )

    if (!suggestion || !suggestion.suggested_selector) {
      console.error('❌ AI agent failed to provide a suggestion.')
      return
    }

    console.log(`\n💡 AI Suggestion:`)
    console.log(`   - New Selector: "${suggestion.suggested_selector}"`)
    console.log(`   - Reasoning: "${suggestion.reasoning}"`)

    if (argv.fix) {
      console.log('\n🔧 --fix flag enabled. Verifying and applying the fix...')
      const tempSource = {
        ...source.toObject(),
        headlineSelector: suggestion.suggested_selector,
      }
      const verificationScrape = await scrapeSiteForHeadlines(tempSource)

      if (verificationScrape.success && verificationScrape.resultCount > 0) {
        console.log(
          `   - ✅ Verification successful! Found ${verificationScrape.resultCount} headlines with the new selector.`
        )
        source.headlineSelector = suggestion.suggested_selector
        await source.save()
        console.log('   - 💾 New selector has been saved to the database.')
      } else {
        console.log(
          `   - ❌ Verification failed. The suggested selector did not return any headlines.`
        )
        console.log(`   - Reason: ${verificationScrape.error}`)
      }
    } else {
      console.log(
        '\nRun with the --fix flag to automatically apply and save the new selector.'
      )
    }
  } catch (error) {
    console.error(`💥 A critical error occurred: ${error.message}`)
  } finally {
    await disconnectDatabase()
  }
}

main()

```

## 📄 scripts/sources/browse.js
*Lines: 143, Size: 4.24 KB*

```javascript
// apps/pipeline/scripts/sources/browse.js (version 1.0)
import readline from 'readline'
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import * as cheerio from 'cheerio'
import { fetchPageWithPlaywright } from '@headlines/scraper-logic/src/browser.js'
import { heuristicallyFindSelectors } from '@headlines/scraper-logic/src/scraper/selectorOptimizer.js'
import { sectionClassifierAgent } from '@headlines/scraper-logic/src/ai/index.js'
import { logger } from '../../../../packages/utils-server'
undefined

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

const color = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  cyan: '\x1b[36m',
  yellow: '\x1b[33m',
  magenta: '\x1b[35m',
  gray: '\x1b[90m',
}

let currentUrl = ''
let currentLinks = []

async function listLinks(url) {
  logger.info(`Crawling ${url}...`)
  const html = await fetchPageWithPlaywright(url, 'SourceBrowser')
  if (!html) {
    logger.error('Failed to fetch page.')
    return
  }
  const $ = cheerio.load(html)
  const baseUrlObj = new URL(url)
  const linksToClassify = []
  $('a').each((_, el) => {
    const $el = $(el)
    const href = $el.attr('href')
    const text = $el.text().trim().replace(/\s+/g, ' ')
    if (href && text && !href.startsWith('#') && !href.startsWith('mailto:')) {
      try {
        const fullUrl = new URL(href, baseUrlObj.origin).href
        linksToClassify.push({ text, href: fullUrl })
      } catch (e) {
        /* ignore */
      }
    }
  })

  const uniqueLinks = [
    ...new Map(linksToClassify.map((item) => [item.href, item])).values(),
  ]
  logger.info(`Found ${uniqueLinks.length} links. Classifying with AI...`)
  const classifications = await sectionClassifierAgent(
    uniqueLinks.map((l) => ({ text: l.text, href: l.href }))
  )
  if (!classifications) {
    logger.error('AI classification failed.')
    currentLinks = []
    return
  }

  currentLinks = uniqueLinks.map((link, i) => ({
    ...link,
    type: classifications[i].classification,
  }))

  currentLinks.forEach((link, i) => {
    let typeColor = color.gray
    if (link.type === 'news_section') typeColor = color.yellow
    if (link.type === 'article_headline') typeColor = color.cyan
    console.log(
      `[${i.toString().padStart(2)}] ${typeColor}[${link.type.padEnd(16)}]${color.reset} ${link.text.substring(0, 80)}`
    )
    console.log(`    ${color.gray}${link.href}${color.reset}`)
  })
}

async function handleCommand(command) {
  const parts = command.trim().split(' ')
  const cmd = parts[0].toLowerCase()
  const arg = parts.slice(1).join(' ')

  switch (cmd) {
    case 'ls':
      await listLinks(currentUrl)
      break
    case 'cd':
      const newUrl =
        !isNaN(arg) && currentLinks[parseInt(arg, 10)]
          ? currentLinks[parseInt(arg, 10)].href
          : arg
      if (newUrl) {
        currentUrl = newUrl
        console.log(`Changed directory to: ${currentUrl}`)
        await listLinks(currentUrl)
      } else {
        console.log("Invalid argument. Use 'cd <url>' or 'cd <index>'.")
      }
      break
    case 'optimize':
      logger.info(`Optimizing selectors for ${currentUrl}...`)
      const html = await fetchPageWithPlaywright(currentUrl, 'SourceBrowser')
      const suggestions = heuristicallyFindSelectors(html)
      suggestions.forEach((cluster, i) => {
        console.log(`--- Suggestion #${i + 1} (Score: ${cluster.score}) ---`)
        console.log(`Selector: ${color.green}${cluster.selector}${color.reset}`)
        console.log(`Samples:`)
        cluster.samples.slice(0, 3).forEach((sample) => console.log(`  - "${sample}"`))
      })
      break
    case 'help':
      console.log('Commands: ls, cd <url|index>, optimize, exit, help')
      break
    case 'exit':
      rl.close()
      return
    default:
      console.log("Unknown command. Type 'help'.")
  }
  prompt()
}

function prompt() {
  const promptPath = new URL(currentUrl).pathname
  rl.question(`${color.magenta}${promptPath}>${color.reset} `, handleCommand)
}

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('url', { type: 'string', demandOption: true })
    .help().argv
  currentUrl = argv.url
  console.log("Welcome to the Interactive Source Browser. Type 'help' for commands.")
  await listLinks(currentUrl)
  prompt()
}

main()

```

## 📄 scripts/sources/check-danish-sources.js
*Lines: 252, Size: 7.16 KB*

```javascript
// scripts/check-danish-sources.js
import fs from 'fs'
import path from 'path'
import Papa from 'papaparse'
import cliProgress from 'cli-progress'
import colors from 'ansi-colors'

const DATA_DIRECTORY = '/mnt/ramdisk'

// GDELT GKG headers
const GKG_HEADERS = [
  'GKGRECORDID',
  'Date',
  'SourceCollectionIdentifier',
  'SourceCommonName',
  'DocumentIdentifier',
  'V1Themes',
  'V2Themes',
  'V1Locations',
  'V2Locations',
  'V1Persons',
  'V2Persons',
  'V1Organizations',
  'V2Organizations',
  'V1_5Tone',
  'V2Tone',
  'Dates',
  'GCAM',
  'SharingImage',
  'RelatedImages',
  'SocialImageEmbeds',
  'SocialVideoEmbeds',
  'Quotations',
  'AllNames',
  'Amounts',
  'TranslationInfo',
  'Extras',
]

// Specific Danish sources we're looking for
const TARGET_DANISH_SOURCES = [
  'detelegraaf',
  'berlingske.dk',
  'finans.dk',
  'politiken.dk',
  'dr.dk',
  'tv2.dk',
  'bt.dk',
  'eb.dk',
  'jyllands-posten.dk',
  'information.dk',
  'kristeligt-dagblad.dk',
  'weekendavisen.dk',
]

async function checkDanishSources() {
  const files = fs.readdirSync(DATA_DIRECTORY).filter((f) => f.endsWith('.csv'))

  if (files.length === 0) {
    console.log('No CSV files found in', DATA_DIRECTORY)
    return
  }

  console.log(`🔍 Checking ${files.length} GDELT files for specific Danish sources...`)
  console.log(`Target sources: ${TARGET_DANISH_SOURCES.join(', ')}`)
  console.log(`Data directory: ${DATA_DIRECTORY}\n`)

  let totalRows = 0
  let foundSources = new Map() // source -> count
  let sourceExamples = new Map() // source -> example URLs
  let fileHits = new Map() // file -> hits count

  const progressBar = new cliProgress.SingleBar({
    format: `  -> Processing | ${colors.cyan('{bar}')} | {percentage}% || {value}/{total} Files`,
    barCompleteChar: '\u2588',
    barIncompleteChar: '\u2591',
    hideCursor: true,
  })

  progressBar.start(files.length, 0)

  for (const file of files) {
    const filePath = path.join(DATA_DIRECTORY, file)
    let fileContent

    try {
      fileContent = fs.readFileSync(filePath, 'utf8')
    } catch (error) {
      console.log(`\nError reading file ${file}:`, error.message)
      progressBar.increment()
      continue
    }

    const result = Papa.parse(fileContent, {
      delimiter: '\t',
      header: false,
      skipEmptyLines: true,
      dynamicTyping: false,
    })

    let fileHitCount = 0

    for (const record of result.data) {
      if (!record || record.length < GKG_HEADERS.length) continue

      totalRows++

      // Map headers to row data
      const row = {}
      GKG_HEADERS.forEach((header, i) => {
        row[header] = record[i] || ''
      })

      // Check both SourceCommonName and DocumentIdentifier for Danish sources
      const sourceName = (row.SourceCommonName || '').toLowerCase()
      const documentUrl = (row.DocumentIdentifier || '').toLowerCase()

      for (const targetSource of TARGET_DANISH_SOURCES) {
        const targetLower = targetSource.toLowerCase()

        if (sourceName.includes(targetLower) || documentUrl.includes(targetLower)) {
          foundSources.set(targetSource, (foundSources.get(targetSource) || 0) + 1)
          fileHitCount++

          // Store example URL for this source
          if (!sourceExamples.has(targetSource) && documentUrl) {
            sourceExamples.set(targetSource, documentUrl)
          }
          break // Found a match, no need to check other sources
        }
      }
    }

    if (fileHitCount > 0) {
      fileHits.set(file, fileHitCount)
    }

    progressBar.increment()
  }

  progressBar.stop()

  console.log('\n📊 Results:')
  console.log(`Total articles processed: ${totalRows.toLocaleString()}`)
  console.log(`Files with Danish sources: ${fileHits.size}/${files.length}`)
  console.log('')

  // Display found sources
  if (foundSources.size === 0) {
    console.log('❌ No articles from the specified Danish sources found!')
    console.log('')
    console.log('Possible reasons:')
    console.log('1. The GDELT files might not contain these specific sources')
    console.log('2. The sources might use different domain patterns')
    console.log('3. The time period might not have coverage from these sources')
    console.log('4. There might be encoding/parsing issues')
  } else {
    console.log('✅ Found articles from these Danish sources:')
    console.log('')

    const sortedSources = Array.from(foundSources.entries()).sort((a, b) => b[1] - a[1])

    for (const [source, count] of sortedSources) {
      const exampleUrl = sourceExamples.get(source) || 'No URL example'
      console.log(`📰 ${source.padEnd(20)}: ${count.toString().padStart(4)} articles`)
      console.log(
        `   Example: ${exampleUrl.substring(0, 80)}${exampleUrl.length > 80 ? '...' : ''}`
      )
      console.log('')
    }

    // Show which files contained Danish sources
    console.log('📁 Files containing Danish sources:')
    const sortedFiles = Array.from(fileHits.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10) // Show top 10 files

    for (const [file, count] of sortedFiles) {
      console.log(`   ${file}: ${count} articles`)
    }

    if (fileHits.size > 10) {
      console.log(`   ... and ${fileHits.size - 10} more files`)
    }
  }

  // Additional diagnostic: Check for any .dk domains
  console.log('\n🔍 Scanning for ANY .dk domains (broader search)...')

  let dkDomainsFound = new Map()
  let sampleDkUrls = new Map()

  for (const file of files.slice(0, 105)) {
    // Check first 5 files for speed
    const filePath = path.join(DATA_DIRECTORY, file)
    try {
      const content = fs.readFileSync(filePath, 'utf8')
      const lines = content.split('\n')

      for (const line of lines.slice(0, 1000)) {
        // Check first 1000 lines
        const columns = line.split('\t')
        if (columns.length >= 5) {
          const source = (columns[3] || '').toLowerCase() // SourceCommonName
          const url = (columns[4] || '').toLowerCase() // DocumentIdentifier

          if (source.includes('.dk') || url.includes('.dk')) {
            // Extract domain
            let domain = null
            if (url.includes('.dk')) {
              const match = url.match(/([a-zA-Z0-9-]+\.dk)/)
              if (match) domain = match[1]
            }
            if (!domain && source.includes('.dk')) {
              const match = source.match(/([a-zA-Z0-9-]+\.dk)/)
              if (match) domain = match[1]
            }

            if (domain) {
              dkDomainsFound.set(domain, (dkDomainsFound.get(domain) || 0) + 1)
              if (!sampleDkUrls.has(domain)) {
                sampleDkUrls.set(domain, url)
              }
            }
          }
        }
      }
    } catch (error) {
      // Skip file errors
    }
  }

  if (dkDomainsFound.size > 0) {
    console.log('\n🌐 Found these .dk domains in the data:')
    const sortedDkDomains = Array.from(dkDomainsFound.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 15)

    for (const [domain, count] of sortedDkDomains) {
      console.log(`   ${domain.padEnd(25)}: ${count} occurrences`)
    }
  } else {
    console.log('   No .dk domains found in sample scan')
  }
}

// Run the analysis
checkDanishSources().catch((error) => {
  console.error('❌ Analysis failed:', error.message)
  process.exit(1)
})

```

## 📄 scripts/sources/discover.js
*Lines: 120, Size: 4.02 KB*

```javascript
// apps/pipeline/scripts/sources/discover-sections.js (version 2.0)
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import * as cheerio from 'cheerio'
import { fetchPageWithPlaywright } from '@headlines/scraper-logic/src/browser.js'
import { heuristicallyFindSelectors } from '@headlines/scraper-logic/src/scraper/selectorOptimizer.js'
import { sectionClassifierAgent } from '@headlines/scraper-logic/src/ai/index.js'
import { logger } from '../../../../packages/utils-server'
import pLimit from 'p-limit'

const CONCURRENCY = 3

async function main() {
  const argv = yargs(hideBin(process.argv)).usage('Usage: $0 --url <URL>').option('url', {
    alias: 'u',
    type: 'string',
    description: 'The base URL of the news site to discover sections from.',
    demandOption: true,
  }).argv

  const baseUrl = argv.url
  const baseUrlObj = new URL(baseUrl)
  logger.info(`🔎 Discovering news sections for: ${baseUrl} (AI-Powered)`)

  const html = await fetchPageWithPlaywright(baseUrl, 'SectionDiscoverer')
  if (!html) {
    logger.error('Failed to fetch base page content. Aborting.')
    return
  }

  const $ = cheerio.load(html)
  const allLinks = []
  $('a').each((_, el) => {
    const $el = $(el)
    const href = $el.attr('href')
    const text = $el.text().trim().replace(/\s+/g, ' ')

    if (href && text && !href.startsWith('#') && !href.startsWith('mailto:')) {
      try {
        const fullUrl = new URL(href, baseUrl).href
        if (new URL(fullUrl).hostname.endsWith(baseUrlObj.hostname)) {
          allLinks.push({ text, href: fullUrl })
        }
      } catch (e) {
        /* ignore invalid URLs */
      }
    }
  })

  const uniqueLinks = [...new Map(allLinks.map((item) => [item.href, item])).values()]
  logger.info(`Found ${uniqueLinks.length} unique internal links. Classifying with AI...`)

  const classifications = await sectionClassifierAgent(uniqueLinks)
  if (!classifications) {
    logger.error('AI link classification failed. Aborting.')
    return
  }

  const topCandidates = uniqueLinks
    .map((link, i) => ({ ...link, classification: classifications[i].classification }))
    .filter((link) => link.classification === 'news_section')

  if (topCandidates.length === 0) {
    logger.warn('AI analysis did not identify any promising "news_section" links.')
    return
  }

  logger.info(
    `AI identified ${topCandidates.length} promising sections. Verifying for headlines...`
  )

  const limit = pLimit(CONCURRENCY)
  const verificationPromises = topCandidates.map((section) =>
    limit(async () => {
      logger.info(`  ...verifying ${section.href}`)
      const sectionHtml = await fetchPageWithPlaywright(section.href, 'SectionVerifier')
      if (!sectionHtml) return null
      const suggestions = heuristicallyFindSelectors(sectionHtml)
      if (suggestions.length > 0) {
        return {
          url: section.href,
          title: section.text,
          headlineConfidence: suggestions[0].score.toFixed(2),
          suggestedSelector: suggestions[0].selector,
          sampleHeadlines: suggestions[0].samples.slice(0, 2),
        }
      }
      return null
    })
  )

  const verifiedSections = (await Promise.all(verificationPromises)).filter(Boolean)

  if (verifiedSections.length === 0) {
    logger.warn(
      'Could not verify any AI-suggested sections with a high confidence of headlines.'
    )
    return
  }

  logger.info(
    `\n✅ Discovery Complete. Found ${verifiedSections.length} potential new sources:\n`
  )

  verifiedSections
    .sort((a, b) => b.headlineConfidence - a.headlineConfidence)
    .forEach((section) => {
      console.log(
        `--- Section: \x1b[36m${section.title}\x1b[0m (Confidence: ${section.headlineConfidence}) ---`
      )
      console.log(`URL: \x1b[32m${section.url}\x1b[0m`)
      console.log(`Suggested Selector: \x1b[33m${section.suggestedSelector}\x1b[0m`)
      console.log(`Sample Headlines:`)
      section.sampleHeadlines.forEach((h) => console.log(`  - "${h}"`))
      console.log('\n')
    })
}

main().catch((err) => logger.error({ err }, 'Section discovery failed.'))

```

## 📄 scripts/sources/list-sources.js
*Lines: 60, Size: 1.92 KB*

```javascript
// apps/pipeline/scripts/sources/list-sources.js (version 3.0.0)
import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';
import mongoose from 'mongoose';
import { Source } from '../../../../packages/models/src/index.js';
import dbConnect from '../../../../packages/data-access/src/dbConnect.js';
import colors from 'ansi-colors';

async function listSources() {
  const argv = yargs(hideBin(process.argv))
    .option('country', { alias: 'c', type: 'string' })
    .option('status', { alias: 's', type: 'string', choices: ['failing', 'healthy'] })
    .option('json', { type: 'boolean', description: 'Output as JSON' })
    .help().argv;
  
  await dbConnect();
  try {
    const query = { status: 'active' };
    if (argv.country) query.country = new RegExp(`^${argv.country}$`, 'i');
    if (argv.status === 'failing') {
        query['analytics.lastRunHeadlineCount'] = 0;
        query['analytics.totalRuns'] = { $gt: 0 };
    } else if (argv.status === 'healthy') {
        query['analytics.lastRunHeadlineCount'] = { $gt: 0 };
    }

    const sources = await Source.find(query).sort({ country: 1, name: 1 }).lean();
    
    if (argv.json) {
        console.log(JSON.stringify(sources, null, 2));
        return;
    }

    if (sources.length === 0) {
      console.log('No sources found matching criteria.');
      return;
    }
    
    const tableData = sources.map(s => {
        const analytics = s.analytics || {};
        let health = colors.yellow('❓ New');
        if (analytics.totalRuns > 0) {
          health = analytics.lastRunHeadlineCount > 0 ? colors.green('✅ Healthy') : colors.red('❌ Failing');
        }
        return {
          Name: s.name,
          Health: health,
          'Last Count': analytics.lastRunHeadlineCount ?? 'N/A',
          Country: s.country,
          Method: s.extractionMethod,
        };
      });
    console.table(tableData);

  } finally {
    await mongoose.disconnect();
  }
}
listSources();

```

## 📄 scripts/sources/maintain.js
*Lines: 69, Size: 2.28 KB*

```javascript
// apps/pipeline/scripts/sources/maintain.js (version 2.0.0)
import dbConnect from '../../packages/data-access/src/dbConnect.js'
import { Source } from '@headlines/models'
import { logger } from '@headlines/utils-server'
import mongoose from 'mongoose'
import colors from 'ansi-colors'

const LOW_LEAD_RATE_THRESHOLD = 0.01 // 1%
const MIN_RUNS_FOR_PRUNING = 100

async function maintainSources() {
  await dbConnect()
  logger.info('🤖 Starting Autonomous Scraper Maintenance...')

  // --- 1. Report on Failing Sources (Self-Heal Disabled) ---
  logger.info('--- Phase 1: Identifying and Reporting Failing Scrapers ---')
  const failingSources = await Source.find({
    status: 'active',
    'analytics.totalRuns': { $gt: 0 },
    'analytics.lastRunHeadlineCount': 0,
  }).lean()

  if (failingSources.length === 0) {
    logger.info('✅ No failing sources detected.')
  } else {
    logger.warn(
      `Found ${failingSources.length} failing sources. Self-healing is disabled, reporting only:`
    )
    for (const source of failingSources) {
      logger.warn(
        colors.red(
          `  - FAILED: ${source.name} (Last scraped: ${source.lastScrapedAt?.toISOString() || 'N/A'})`
        )
      )
    }
  }

  // --- 2. Proactive Pruning of Low-Value Sources ---
  logger.info('\n--- Phase 2: Pruning Low-Value (High Noise) Sources ---')
  const candidatesForPruning = await Source.find({
    'analytics.totalRuns': { $gt: MIN_RUNS_FOR_PRUNING },
    scrapeFrequency: 'high',
  }).lean()

  let prunedCount = 0
  for (const source of candidatesForPruning) {
    const analytics = source.analytics
    const leadRate =
      analytics.totalScraped > 0 ? analytics.totalRelevant / analytics.totalScraped : 0
    if (leadRate < LOW_LEAD_RATE_THRESHOLD) {
      await Source.findByIdAndUpdate(source._id, { $set: { scrapeFrequency: 'low' } })
      logger.warn(
        `  - Downgraded "${source.name}" to 'low' frequency due to low lead rate (${(leadRate * 100).toFixed(2)}%).`
      )
      prunedCount++
    }
  }

  if (prunedCount > 0) {
    logger.info(`✅ Pruning complete. Downgraded ${prunedCount} noisy sources.`)
  } else {
    logger.info('✅ No sources met the criteria for pruning.')
  }

  logger.info('\n🤖 Autonomous Scraper Maintenance complete.')
}

maintainSources().finally(() => mongoose.disconnect())

```

## 📄 scripts/sources/scrape-many.js
*Lines: 110, Size: 3.09 KB*

```javascript
'use server'

import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import mongoose from 'mongoose'
import pLimit from 'p-limit'
import { initializeScriptEnv } from '../seed/lib/script-init.js' // The centralized initializer
import { logger } from '@headlines/utils-server/node'
import { Source } from '@headlines/models'
import {
  scrapeSiteForHeadlines,
  scrapeArticleContent,
} from '@headlines/scraper-logic/scraper/index.js'

const CONCURRENCY = 5

async function testSource(source) {
  logger.info(`\n▶️  Testing: ${source.name} (${source.country})`)
  const headlineResult = await scrapeSiteForHeadlines(source)

  if (!headlineResult.success || headlineResult.resultCount === 0) {
    logger.error(
      `❌ Headline scraping failed. Reason: ${headlineResult.error || 'No headlines found.'}`
    )
    return
  }

  logger.info(`✅ Found ${headlineResult.resultCount} headlines.`)
  const firstArticle = headlineResult.articles[0]

  const contentResult = await scrapeArticleContent(
    {
      ...firstArticle,
      source: source.name,
      newspaper: source.name,
      country: source.country,
    },
    source
  )

  if (contentResult.articleContent && contentResult.articleContent.contents.length > 0) {
    logger.info(
      `✅ Content scraping successful (${
        contentResult.articleContent.contents.join('').length
      } chars).`
    )
  } else {
    logger.error(`❌ Content scraping failed. Reason: ${contentResult.enrichment_error}`)
  }
}

async function scrapeMany() {
  const argv = yargs(hideBin(process.argv))
    .option('country', {
      alias: 'c',
      type: 'string',
      description: 'The country to scrape sources from.',
    })
    .option('include-inactive', {
      alias: 'i',
      type: 'boolean',
      description: 'Include sources marked as "paused" or "under_review".',
      default: false,
    })
    .help()
    .alias('help', 'h').argv

  try {
    // The initializeScriptEnv function handles db connection, config loading, and logger setup.
    await initializeScriptEnv()

    const query = {}
    if (argv.country) {
      query.country = new RegExp(`^${argv.country}$`, 'i')
      logger.info(`Filtering for country: "${argv.country}"`)
    }
    if (!argv.includeInactive) {
      query.status = 'active'
      logger.info('Including only "active" sources. Use --include-inactive to override.')
    }

    const sources = await Source.find(query).sort({ country: 1, name: 1 }).lean()

    if (sources.length === 0) {
      logger.warn('No sources found matching the criteria.')
      return
    }

    logger.info(
      `🚀 Found ${sources.length} source(s) to test. Starting with concurrency ${CONCURRENCY}...`
    )
    const limit = pLimit(CONCURRENCY)
    const promises = sources.map((source) => limit(() => testSource(source)))

    await Promise.all(promises)
    logger.info('\n✅ All scrape tests completed.')
  } catch (error) {
    logger.fatal(
      { err: error },
      'A critical error occurred during the scrape-many script.'
    )
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
    }
  }
}

scrapeMany()

```

## 📄 scripts/sources/scrape-one.js
*Lines: 102, Size: 3 KB*

```javascript
'use server'

import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import mongoose from 'mongoose'
import { initializeScriptEnv } from '../seed/lib/script-init.js' // The centralized initializer
import { logger } from '@headlines/utils-server/node'
import { truncateString } from '@headlines/utils-shared'
import { Source } from '@headlines/models'
import {
  scrapeSiteForHeadlines,
  scrapeArticleContent,
} from '@headlines/scraper-logic/scraper/index.js'

async function scrapeOne() {
  const argv = yargs(hideBin(process.argv))
    .option('source', {
      alias: 's',
      type: 'string',
      description: 'The name of the source to scrape.',
      demandOption: true,
    })
    .help()
    .alias('help', 'h').argv

  const sourceName = argv.source

  try {
    // The initializeScriptEnv function handles db connection, config loading, and logger setup.
    await initializeScriptEnv()

    logger.info(`🚀 Starting single source scrape for: "${sourceName}"`)

    const source = await Source.findOne({
      name: new RegExp(`^${sourceName}$`, 'i'),
    }).lean()
    if (!source) {
      logger.error(`❌ Source "${sourceName}" not found in the database.`)
      return
    }

    logger.info('🔬 Source Configuration:\n' + JSON.stringify(source, null, 2))

    logger.info('\n▶️  Phase 1: Scraping Headlines...')
    const headlineResult = await scrapeSiteForHeadlines(source)

    if (!headlineResult.success || headlineResult.resultCount === 0) {
      logger.error(
        `❌ Headline scraping failed. Reason: ${
          headlineResult.error || 'No headlines found.'
        }`
      )
      return
    }

    logger.info(`✅ Found ${headlineResult.resultCount} headlines.`)
    const firstArticle = headlineResult.articles[0]
    logger.info(
      `    - First Headline: "${firstArticle.headline}"\n    - Link: ${firstArticle.link}`
    )

    logger.info('\n▶️  Phase 2: Scraping Content for First Article...')
    const contentResult = await scrapeArticleContent(
      {
        ...firstArticle,
        source: source.name,
        newspaper: source.name,
        country: source.country,
      },
      source
    )

    if (
      contentResult.articleContent &&
      contentResult.articleContent.contents.length > 0
    ) {
      const content = contentResult.articleContent.contents.join('\n')
      logger.info(`✅ Content scraping successful! (${content.length} chars)`)
      logger.info(`    - Snippet: "${truncateString(content, 300)}..."`)
    } else {
      logger.error(
        `❌ Content scraping failed. Reason: ${contentResult.enrichment_error}`
      )
      if (contentResult.contentPreview) {
        logger.warn(`    - Scraped Preview: "${contentResult.contentPreview}..."`)
      }
    }
  } catch (error) {
    logger.fatal(
      { err: error },
      'A critical error occurred during the scrape-one script.'
    )
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
      logger.info('Database connection closed.')
    }
  }
}

scrapeOne()

```

## 📄 scripts/sources/update.js
*Lines: 75, Size: 2.44 KB*

```javascript
// apps/pipeline/scripts/sources/update.js (version 2.0)
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import mongoose from 'mongoose'
import { Source } from '../../../../packages/models/src/index.js'
import dbConnect from '../../../../packages/data-access/src/dbConnect.js'
import { logger } from '../../../../packages/utils-server'
undefined
import readline from 'readline'
import colors from 'ansi-colors'

const rl = readline.createInterface({ input: process.stdin, output: process.stdout })

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('source', { alias: 's', type: 'string', demandOption: true })
    .option('key', { alias: 'k', type: 'string', demandOption: true })
    .option('value', { alias: 'v', type: 'string', demandOption: true })
    .option('yes', {
      alias: 'y',
      type: 'boolean',
      description: 'Skip confirmation prompt',
    })
    .help().argv

  await dbConnect()
  try {
    const source = await Source.findOne({ name: new RegExp(`^${argv.source}$`, 'i') })
    if (!source) {
      logger.error(`Source "${argv.source}" not found.`)
      return
    }

    let parsedValue
    try {
      parsedValue = JSON.parse(argv.value)
    } catch (e) {
      parsedValue = argv.value === 'null' ? undefined : argv.value
    }

    console.log(`\n--- Change Summary for Source: ${colors.bold(source.name)} ---`)
    console.log(`Field:      ${colors.cyan(argv.key)}`)
    const oldValue = JSON.stringify(source.get(argv.key), null, 2) || 'undefined'
    console.log(`Old Value:  ${colors.red(oldValue)}`)
    console.log(`New Value:  ${colors.green(JSON.stringify(parsedValue, null, 2))}`)
    console.log('-----------------------------------------------------\n')

    if (!argv.yes) {
      const answer = await new Promise((resolve) =>
        rl.question('Apply this change? (yes/no): ', resolve)
      )
      if (answer.toLowerCase() !== 'yes') {
        logger.warn('Operation cancelled by user.')
        return
      }
    }

    const update =
      parsedValue === undefined
        ? { $unset: { [argv.key]: '' } }
        : { $set: { [argv.key]: parsedValue } }
    await Source.updateOne({ _id: source._id }, update)

    logger.info(
      `✅ Successfully updated field "${argv.key}" for source "${source.name}".`
    )
  } catch (error) {
    logger.error({ err: error }, 'An error occurred during the update process.')
  } finally {
    rl.close()
    await mongoose.disconnect()
  }
}
main()

```

## 📄 scripts/subscribers/list.js
*Lines: 40, Size: 1.11 KB*

```javascript
// apps/pipeline/scripts/subscribers/list.js (version 1.0)
import dbConnect from '../../../../packages/data-access/src/dbConnect.js'
import { Subscriber } from '../../../../packages/models/src/index.js'
import mongoose from 'mongoose'
import colors from 'ansi-colors'

async function listSubscribers() {
  await dbConnect()
  try {
    const subscribers = await Subscriber.find({}).sort({ email: 1 }).lean()

    if (subscribers.length === 0) {
      console.log('No subscribers found.')
      return
    }

    const tableData = subscribers.map((s) => {
      let status = s.isActive ? colors.green('Active') : colors.red('Inactive')
      if (s.role === 'admin') {
        status += ` / ${colors.yellow('Admin')}`
      }
      return {
        Email: s.email,
        Name: `${s.firstName} ${s.lastName || ''}`,
        Status: status,
        Tier: s.subscriptionTier,
        Countries: s.countries.length,
      }
    })
    console.log('\n--- All Subscribers ---')
    console.table(tableData)
  } catch (e) {
    console.error('Error listing subscribers:', e)
  } finally {
    await mongoose.disconnect()
  }
}

listSubscribers()

```

## 📄 scripts/subscribers/update.js
*Lines: 72, Size: 2.32 KB*

```javascript
// apps/pipeline/scripts/subscribers/update.js (version 1.0)
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import mongoose from 'mongoose'
import { Subscriber } from '@headlines/models'
import dbConnect from '../../packages/data-access/src/dbConnect.js'
import { logger } from '@headlines/utils-server'
import '@headlines/config'
import readline from 'readline'
import colors from 'ansi-colors'

const rl = readline.createInterface({ input: process.stdin, output: process.stdout })

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('email', { type: 'string', demandOption: true })
    .option('key', { alias: 'k', type: 'string', demandOption: true })
    .option('value', { alias: 'v', type: 'string', demandOption: true })
    .option('yes', { alias: 'y', type: 'boolean' })
    .help().argv

  await dbConnect()
  try {
    const subscriber = await Subscriber.findOne({ email: argv.email })
    if (!subscriber) {
      logger.error(`Subscriber with email "${argv.email}" not found.`)
      return
    }

    let parsedValue
    try {
      parsedValue = JSON.parse(argv.value)
    } catch (e) {
      parsedValue = argv.value === 'null' ? undefined : argv.value
    }

    console.log(
      `\n--- Change Summary for Subscriber: ${colors.bold(subscriber.email)} ---`
    )
    console.log(`Field:      ${colors.cyan(argv.key)}`)
    console.log(`Old Value:  ${colors.red(JSON.stringify(subscriber.get(argv.key)))}`)
    console.log(`New Value:  ${colors.green(JSON.stringify(parsedValue))}`)
    console.log('-----------------------------------------------------\n')

    if (!argv.yes) {
      const answer = await new Promise((resolve) =>
        rl.question('Apply this change? (yes/no): ', resolve)
      )
      if (answer.toLowerCase() !== 'yes') {
        logger.warn('Operation cancelled.')
        return
      }
    }

    const update =
      parsedValue === undefined
        ? { $unset: { [argv.key]: '' } }
        : { $set: { [argv.key]: parsedValue } }
    await Subscriber.updateOne({ _id: subscriber._id }, update)

    logger.info(
      `✅ Successfully updated field "${argv.key}" for subscriber "${subscriber.email}".`
    )
  } catch (error) {
    logger.error({ err: error }, 'An error occurred during the update process.')
  } finally {
    rl.close()
    await mongoose.disconnect()
  }
}
main()

```

## 📄 scripts/test-pipeline/test-payload.js
*Lines: 28, Size: 1.61 KB*

```javascript
// scripts/test-pipeline/test-payload.js (version 1.1)
/**
 * This file contains a "known good" test article payload.
 * The --dry-run mode injects this data directly into the pipeline,
 * bypassing the scraping and filtering stages. This ensures a consistent
 * and repeatable test case for the AI assessment, enrichment, clustering,
 * synthesis, and notification preparation stages.
 */
import mongoose from 'mongoose';

export const testArticles = [
  {
    _id: new mongoose.Types.ObjectId(), // DEFINITIVE FIX: Add a synthetic ID for test mode.
    headline:
      'Danish Møller family sells their shipping software company, NaviTech, for $500M to an American buyer.',
    link: 'https://example.com/moller-family-sells-navitech-for-500m',
    source: 'Test Source',
    newspaper: 'Test Source',
    country: 'Denmark',
    articleContent: {
      contents: [
        'COPENHAGEN -- In a landmark deal for the Danish tech sector, the prominent Møller family announced today the successful sale of their privately-held software company, NaviTech, for an estimated $500 million. The buyer is the US-based logistics giant, Global Transport Inc. NaviTech, founded by patriarch Jørgen Møller in 1998, has become a critical player in maritime logistics software. "This is a proud day for our family," said CEO and daughter, Christina Møller. "We built this from the ground up, and we are confident that Global Transport Inc. will take it to the next level. The family plans to focus on philanthropic endeavors through the Møller Foundation going forward."',
      ],
    },
  },
  // You can add more test articles here to test clustering
]

```

## 📄 scripts/tools/calculate-watchlist-hits.js
*Lines: 114, Size: 3.66 KB*

```javascript
// apps/pipeline/scripts/tools/calculate-watchlist-hits.js (version 1.0.0)
'use strict'
import mongoose from 'mongoose'
import cliProgress from 'cli-progress'
import colors from 'ansi-colors'
import { Article, WatchlistEntity } from '../../../../packages/models/src/index.js'
import dbConnect from '../../../../packages/data-access/src/dbConnect.js'
import { reinitializeLogger, logger } from '../../../../packages/utils-server'
import path from 'path'

// --- SCRIPT CONFIGURATION ---
const LOG_LEVEL = 'info' // Set to 'trace' for more detailed logs

// Initialize a dedicated logger for this script
reinitializeLogger(path.resolve(process.cwd(), 'apps/pipeline/logs'))
logger.level = LOG_LEVEL

async function calculateHits() {
  const startTime = Date.now()
  logger.info('🚀 Starting Watchlist Hit Count Calculation...')

  await dbConnect()

  // 1. Load all data into memory
  logger.info('Loading all articles and watchlist entities into memory...')
  const [allArticles, watchlistEntities] = await Promise.all([
    Article.find({}).select('headline').lean(),
    WatchlistEntity.find({}).select('name searchTerms').lean(),
  ])
  logger.info(
    `Loaded ${watchlistEntities.length} watchlist entities and ${allArticles.length.toLocaleString()} articles.`
  )

  if (watchlistEntities.length === 0 || allArticles.length === 0) {
    logger.warn('Nothing to process. Exiting.')
    return
  }

  // 2. Perform the hit calculation
  logger.info('Calculating hits... (This may take a while)')
  const progressBar = new cliProgress.SingleBar({
    format: `Processing | ${colors.cyan('{bar}')} | {percentage}% || {value}/{total} Entities`,
    barCompleteChar: '\u2588',
    barIncompleteChar: '\u2591',
    hideCursor: true,
  })
  progressBar.start(watchlistEntities.length, 0)

  const hitCounts = new Map()

  for (const entity of watchlistEntities) {
    let count = 0
    const allTerms = [entity.name, ...(entity.searchTerms || [])]
      .map((t) => t.toLowerCase().trim())
      .filter(Boolean)

    const uniqueTerms = [...new Set(allTerms)]
    const termRegexes = uniqueTerms.map(
      (term) => new RegExp(`\\b${term.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')}\\b`, 'i')
    )

    const countedHeadlines = new Set()

    for (const article of allArticles) {
      if (countedHeadlines.has(article._id.toString())) continue

      for (const regex of termRegexes) {
        if (regex.test(article.headline)) {
          count++
          countedHeadlines.add(article._id.toString())
          break // Move to the next article once a hit is found for this entity
        }
      }
    }
    hitCounts.set(entity._id.toString(), count)
    progressBar.increment()
  }
  progressBar.stop()
  logger.info('✅ Hit calculation complete.')

  // 3. Update the database in bulk
  logger.info('Preparing bulk update for the database...')
  const bulkOps = []
  for (const [entityId, count] of hitCounts.entries()) {
    bulkOps.push({
      updateOne: {
        filter: { _id: new mongoose.Types.ObjectId(entityId) },
        update: { $set: { hitCount: count } },
      },
    })
  }

  if (bulkOps.length > 0) {
    logger.info(`Sending ${bulkOps.length} updates to the database...`)
    const result = await WatchlistEntity.bulkWrite(bulkOps)
    logger.info(
      `✅ Database update complete. Modified ${result.modifiedCount} documents.`
    )
  } else {
    logger.info('No updates were necessary.')
  }

  const duration = (Date.now() - startTime) / 1000
  logger.info(`✨ Operation finished in ${duration.toFixed(2)} seconds.`)
}

calculateHits()
  .catch((err) => logger.fatal({ err }, 'A critical error occurred.'))
  .finally(() => {
    if (mongoose.connection.readyState === 1) {
      mongoose.disconnect()
    }
  })

```

## 📄 scripts/tools/diagnose-stuck-articles.js
*Lines: 64, Size: 1.87 KB*

```javascript
// apps/pipeline/scripts/tools/diagnose-stuck-articles.js
'use server'

import mongoose from 'mongoose'
import { Article } from '@headlines/models'
import dbConnect from '@headlines/data-access/dbConnect.js'
import { logger } from '@headlines/utils-server'
import colors from 'ansi-colors'

async function diagnose() {
  await dbConnect()
  logger.info('🔬 Running diagnostic script for stuck articles...')

  try {
    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000)

    const stuckArticles = await Article.find({
      synthesizedEventId: { $exists: false },
      createdAt: { $gte: twentyFourHoursAgo },
    })
      .sort({ createdAt: -1 })
      .limit(10) // Let's just look at the first 10 to see the pattern
      .lean()

    if (stuckArticles.length === 0) {
      logger.info(
        '❌ DIAGNOSTIC FAILED: Could not find any articles from the last 24 hours that are missing a `synthesizedEventId`. This is unexpected.'
      )
      return
    }

    logger.info(
      colors.green(
        `✅ Found ${stuckArticles.length} potentially stuck articles. Displaying their properties:`
      )
    )

    // Use console.log for clean table output that the logger might interfere with.
    console.log('\n--- Sample of Stuck Articles ---')
    console.table(
      stuckArticles.map((a) => ({
        _id: a._id.toString(),
        createdAt: a.createdAt.toISOString(),
        headline: a.headline.substring(0, 50) + '...',
        newspaper: a.newspaper,
        status: a.status, // THIS IS THE KEY FIELD TO CHECK
        relevance_headline: a.relevance_headline,
        relevance_article: a.relevance_article,
      }))
    )
  } catch (error) {
    logger.error(
      { err: error },
      'A critical error occurred during the diagnostic script.'
    )
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect()
    }
  }
}

diagnose()

```

## 📄 scripts/tools/get-db-stats.js
*Lines: 46, Size: 1.4 KB*

```javascript
// scripts/tools/get-db-stats.js (version 1.0)
import 'dotenv/config'
import { connectDatabase, disconnectDatabase } from '../../../src/database.js'
import Article from '../../../models/Article.js'
import SynthesizedEvent from '../../../models/SynthesizedEvent.js'
import Opportunity from '../../../models/Opportunity.js'
import WatchlistEntity from '../../../models/WatchlistEntity.js'
import Source from '../../../models/Source.js'
import Subscriber from '../../../models/Subscriber.js'

async function getStats() {
  await connectDatabase()
  try {
    console.log('\n--- 📊 Database Statistics ---')
    const [
      articles,
      events,
      opportunities,
      watchlist,
      sources,
      subscribers,
    ] = await Promise.all([
      Article.countDocuments(),
      SynthesizedEvent.countDocuments(),
      Opportunity.countDocuments(),
      WatchlistEntity.countDocuments({ status: 'active' }),
      Source.countDocuments({ status: 'active' }),
      Subscriber.countDocuments({ isActive: true }),
    ])

    console.table({
      'Active Sources': sources,
      'Active Watchlist Entities': watchlist,
      'Total Articles': articles,
      'Total Synthesized Events': events,
      'Total Opportunities': opportunities,
      'Active Subscribers': subscribers,
    })
  } catch (error) {
    console.error('Failed to fetch database stats:', error)
  } finally {
    await disconnectDatabase()
  }
}

getStats()
```

## 📄 scripts/watchlist/list.js
*Lines: 42, Size: 1.18 KB*

```javascript
// apps/pipeline/scripts/watchlist/list.js (version 1.0)
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import mongoose from 'mongoose'
import { WatchlistEntity } from '@headlines/models'
import dbConnect from '../../../../packages/data-access/src/dbConnect.js'
import colors from 'ansi-colors'

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('q', { type: 'string', description: 'Search query for entity name' })
    .help().argv

  await dbConnect()
  try {
    const query = {}
    if (argv.q) {
      query.name = new RegExp(argv.q, 'i')
    }

    const entities = await WatchlistEntity.find(query).sort({ name: 1 }).lean()

    if (entities.length === 0) {
      console.log('No watchlist entities found.')
      return
    }

    const tableData = entities.map((e) => ({
      Name: e.name,
      Type: e.type,
      Status: e.status === 'active' ? colors.green('Active') : colors.yellow(e.status),
      Country: e.country || 'N/A',
      'Search Terms': (e.searchTerms || []).join(', '),
    }))
    console.log(`\n--- Watchlist Entities (${entities.length}) ---`)
    console.table(tableData)
  } finally {
    await mongoose.disconnect()
  }
}
main()

```

## 📄 src/app.js
*Lines: 81, Size: 2.45 KB*

```javascript
// apps/pipeline/src/app.js
// import { env } from '@headlines/config'
import { reinitializeLogger } from '@headlines/utils-server'
import { initializeAuditLogger } from './utils/auditLogger.js'
import path from 'path'
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { runPipeline } from './orchestrator.js'
// DEFINITIVE FIX: The 'humanLogStream' import is no longer needed and is removed.
import fs from 'fs'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const PROJECT_ROOT = path.resolve(__dirname, '../../..')

const logDirectory = path.join(PROJECT_ROOT, 'apps/pipeline/logs')
if (!fs.existsSync(logDirectory)) fs.mkdirSync(logDirectory, { recursive: true })

// DEFINITIVE FIX: The logger initialization is simplified.
// reinitializeLogger now handles both console and file logging internally.
const logger = reinitializeLogger(logDirectory)
initializeAuditLogger(logDirectory)

async function start() {
  const argv = yargs(hideBin(process.argv))
    .option('source', {
      alias: 's',
      type: 'string',
      description: 'Run the pipeline for a single source by name.',
    })
    .option('country', {
      alias: 'c',
      type: 'string',
      description: 'Run the pipeline for all sources in a specific country.',
    })
    .option('deleteToday', {
      type: 'boolean',
      description: 'Delete all documents created today before running.',
    })
    .option('useTestPayload', {
      type: 'boolean',
      description: 'Use a predefined test payload instead of scraping.',
    })
    .help().argv

  const options = {
    ...argv,
    countryFilter: argv.country,
    sourceFilter: argv.source,
    projectRoot: PROJECT_ROOT,
  }

  logger.info('--- Pipeline Execution Flags ---')
  Object.entries(argv).forEach(([key, value]) => {
    if (key !== '_' && key !== '$0' && value) {
      logger.info(`- ${key.toUpperCase()}: ${value}`)
    }
  })
  logger.info('------------------------------------')

  let result
  try {
    result = await runPipeline(options)
  } catch (error) {
    logger.fatal({ err: error }, 'A top-level, unhandled exception occurred.')
    process.exit(1)
  }

  if (result && !result.success) {
    logger.warn(
      'Pipeline completed with one or more fatal errors. Exiting with status 1.'
    )
    process.exit(1)
  } else {
    logger.info('Pipeline completed successfully. Exiting with status 0.')
    process.exit(0)
  }
}
start()

```

## 📄 src/config/PEFirms.json
*Lines: 212, Size: 12.23 KB*

```json
[
  {
    "country": "Global PE",
    "flag_emoji": "🌐",
    "outlets": [
      {
        "name": "Apollo",
        "url": "https://www.apollo.com",
        "commentary": "Global alternative asset manager.",
        "labCheckPerformed": true,
        "analysis": {
          "urlDiscoveryMethod": "initial",
          "finalUrl": "https://www.apollo.com",
          "technology": "playwright + AI",
          "headlineSelectorMethod": "AI Structural Analysis",
          "headlineSelector": "a.cmp-insight-column-card__item__title--link, a.cmp-teaser__title-link, a.text-link-blck, a.cmp-navigation-featuredcontent__link",
          "headlinesFound": 21,
          "firstArticleUrl": "https://www.apollo.com/insights-news/insights/2025/06/mid-year-outlook-at-the-crossroads-of-stagflation-whats-next",
          "articleContentSelector": "main p",
          "sampleArticleLength": 8513,
          "aiInsights": {
            "pattern": "Headline links on this site share common traits: they usually use title-cased, descriptive text (often long) and live under /insights-news/ (either /insights/ or /pressreleases/) or the site’s feature/teaser areas. The CSS classes used for headlines include .cmp-insight-column-card__item__title--link (insight cards), .cmp-teaser__title-link (teasers/featured items), .text-link-blck (press releases/compact lists), and .cmp-navigation-featuredcontent__link (promoted featured content). Headlines often contain organization names, event names, or report titles and sometimes point to PDFs or IR pages.",
            "confidence": 0.9009523809523808
          },
          "notes": "Handled consent using persistent browser state."
        }
      },
      {
        "name": "KKR",
        "url": "https://www.kkr.com",
        "commentary": "Global investment company.",
        "labCheckPerformed": true,
        "analysis": {
          "urlDiscoveryMethod": "initial",
          "finalUrl": "https://www.kkr.com",
          "technology": "playwright + AI",
          "headlineSelectorMethod": "AI Structural Analysis",
          "headlineSelector": "a.article-teaser__link, a[href^=\"/insights/\"], a[href*=\"media.kkr.com/news-details\"]",
          "headlinesFound": 4,
          "firstArticleUrl": "https://www.kkr.com/insights/thoughts-from-the-road-asia-2025",
          "articleContentSelector": "article p",
          "sampleArticleLength": 2123,
          "aiInsights": {
            "pattern": "Headline links on this site appear in two primary patterns: 1) Insight/article teasers using the .article-teaser__link class with anchor text that begins with a content category (e.g., 'Macro Insights', 'Investment Insights'), followed by a concise headline and often a month/year and 'Learn More' suffix. These link URLs are under the /insights/ path with a readable slug. 2) Press releases use an external media subdomain (media.kkr.com) and a 'news-details' endpoint with a news_id GUID parameter. Navigation/utility links (about, invest, cookie policy, IR) use different selectors (generic a, cmp-button, .cmp-link) and shorter, non-article text.",
            "confidence": 0.9374999999999999
          },
          "notes": "Handled consent using persistent browser state."
        }
      },
      {
        "name": "PAI Partners",
        "url": "https://www.paipartners.com",
        "commentary": "European private equity firm.",
        "labCheckPerformed": true,
        "analysis": {
          "urlDiscoveryMethod": "initial",
          "finalUrl": "https://www.paipartners.com",
          "technology": "playwright + AI",
          "headlineSelectorMethod": "AI Structural Analysis",
          "headlineSelector": "a[href*=\"/mediaitem/\"]",
          "headlinesFound": 5,
          "firstArticleUrl": "https://www.paipartners.com/mediaitem/2025-annual-general-meetings/",
          "articleContentSelector": null,
          "sampleArticleLength": 0,
          "aiInsights": {
            "pattern": "Headline links share these characteristics: (1) URLs contain the segment '/mediaitem/' (site's press/news item pattern). (2) Anchor text is natural-language, headline-style (short-to-medium length, often starting with the organisation name or an active verb and containing proper nouns or numeric details). (3) The CSS selector for headline anchors is a plain 'a' within the news listing; navigation CTAs use distinct classes (e.g., 'a.btn') and case studies use different URL paths such as '/case-study/'.",
            "confidence": 0.95
          },
          "notes": "Handled consent using persistent browser state."
        }
      },
      {
        "name": "EQT Group",
        "url": "https://www.eqtgroup.com",
        "commentary": "Global investment organization.",
        "labCheckPerformed": true,
        "analysis": {
          "urlDiscoveryMethod": "initial",
          "finalUrl": "https://www.eqtgroup.com",
          "technology": "playwright + AI",
          "headlineSelectorMethod": "AI Structural Analysis",
          "headlineSelector": "Prefer URL-prefix + presentation-class combination to capture headlines while avoiding nav: \"a[href^='/thinq/'], a[href^='/news/']\". Optionally restrict to known article classes: \"a.p-6, a.bg-transparent, a.md\\:p-6, a[href^='/thinq/'], a[href^='/news/']\"",
          "headlinesFound": 18,
          "firstArticleUrl": "https://www.eqtgroup.com/thinq/private-markets/ipo-report-2025",
          "articleContentSelector": "main p",
          "sampleArticleLength": 2123,
          "aiInsights": {
            "pattern": "Headline links cluster under two main URL patterns: /thinq/ (editorial/insights, case-studies, education, opinion) and /news/ (press releases). Headlines tend to have: longer, descriptive anchor text (often >4 words), question or quoted formats, numeric values or company names, and appear with presentation classes such as a.p-6, a.bg-transparent, or a.md:p-6. Navigation and utility links are shorter (single words or short phrases like 'Private Capital', 'About') and often use a.w-full or a.bg-white selectors.",
            "confidence": 0.8833333333333332
          },
          "notes": "Handled consent using persistent browser state."
        }
      },
      {
        "name": "Egeria",
        "url": "https://egeriagroup.com",
        "commentary": "Dutch private equity firm."
      },
      {
        "name": "Rivean Capital (Gilde)",
        "url": "https://www.riveancapital.com",
        "commentary": "Formerly Gilde Equity Management (GEM)."
      },
      {
        "name": "IK Partners (News & Insights)",
        "url": "https://www.ikpartners.com",
        "commentary": "Main press releases and portfolio updates."
      },
      {
        "name": "IK Partners (Portfolio News)",
        "url": "https://www.ikpartners.com/portfolio-company-news",
        "commentary": "Specific news archive for portfolio companies."
      },
      {
        "name": "Triton Partners",
        "url": "https://www.triton-partners.com",
        "commentary": "European private equity investment firm."
      },
      {
        "name": "Bridgepoint (News & Insights)",
        "url": "https://www.bridgepoint.eu",
        "commentary": "Corporate news and insights."
      },
      {
        "name": "Bridgepoint (Regulatory News)",
        "url": "https://www.bridgepoint.eu/shareholder-centre/regulatory-news",
        "commentary": "Live LSE regulatory news feed."
      },
      {
        "name": "Hg Capital",
        "url": "https://hgcapital.com",
        "commentary": "Software and services investor.",
        "labCheckPerformed": true,
        "analysis": {
          "urlDiscoveryMethod": "initial",
          "finalUrl": "https://hgcapital.com",
          "technology": "playwright + AI",
          "headlineSelectorMethod": "AI Structural Analysis",
          "headlineSelector": "article h2 a, article h3 a, .card__link, .post-card a, a[href*=\"/insights/\"], a[href*=\"/news/\"], a[href*=\"/case-studies/\"]",
          "headlinesFound": 1,
          "firstArticleUrl": "https://hgcapital.com/portfolio/case-studies/visma",
          "articleContentSelector": "main p",
          "sampleArticleLength": 3547,
          "aiInsights": {
            "pattern": "In this sample, genuine content/headline links are characterized by: (1) non-generic, descriptive anchor text (not repeated section labels like 'News & Insights'); (2) URLs that contain content paths (e.g., /portfolio/case-studies/, /insights/, /news/ or similar slugs) rather than top-level section or utility domains; and (3) selectors that are not the generic 'a' used for utilities (cookie consent) or site-wide buttons. Note the provided CSS selector (a.index-style__ButtonMain-sc-207d00b9-2) appears used for header/CTA buttons and repeated navigation, so it is less reliable alone for distinguishing article headlines.",
            "confidence": 0.9
          },
          "notes": "Handled consent using persistent browser state."
        }
      },
      {
        "name": "3i Group (Press Releases)",
        "url": "https://www.3i.com/media/press-releases/",
        "commentary": "Main corporate press releases."
      },
      {
        "name": "3i Group (Regulatory News)",
        "url": "https://www.3i.com/investors/regulatory-news/",
        "commentary": "Investor relations and regulatory news."
      },
      {
        "name": "CVC Capital Partners",
        "url": "https://www.cvc.com",
        "commentary": "Global private equity and credit."
      },
      {
        "name": "Ardian (News & Insights)",
        "url": "https://www.ardian.com/news-insights",
        "commentary": "Thought leadership and news articles.",
        "labCheckPerformed": true,
        "analysis": {
          "urlDiscoveryMethod": "initial",
          "finalUrl": "https://www.ardian.com/news-insights",
          "technology": "playwright + AI",
          "headlineSelectorMethod": "AI Structural Analysis",
          "headlineSelector": "a[href^=\"/news-insights/\"]:not(.tag):not(.btn-outline), a[href*=\"-report\"], a[href*=\"-years\"], article h2 a, article h3 a",
          "headlinesFound": 4,
          "firstArticleUrl": "https://www.ardian.com/news-insights/responsible-finance?category=202",
          "articleContentSelector": "div[class*=\"content\"] p",
          "sampleArticleLength": 1528,
          "aiInsights": {
            "pattern": "True news/headline links in this sample mostly target the '/news-insights/' path or external microsites dedicated to reports/campaigns. Headline-like anchors tend to be simple 'a' elements or prominent CTAs (e.g., 'a.btn-outline'). Tag/filter links use a distinct class ('a.tag') and cookie/privacy/vendor links use cookie dialog-specific selectors—these are not headlines. Headlines and content CTAs use descriptive, content-focused text (topic names, report titles or campaign domains) rather than generic utility/legal phrasing.",
            "confidence": 0.65
          },
          "notes": "Handled consent using persistent browser state."
        }
      },
      {
        "name": "Ardian (Press Releases)",
        "url": "https://www.ardian.com/press-releases",
        "commentary": "Official press releases.",
        "labCheckPerformed": true,
        "analysis": {
          "urlDiscoveryMethod": "initial",
          "finalUrl": "https://www.ardian.com/press-releases",
          "technology": "playwright + AI",
          "headlineSelectorMethod": "AI Structural Analysis",
          "headlineSelector": "a[href^='/news-insights/press-releases/']",
          "headlinesFound": 7,
          "firstArticleUrl": "https://www.ardian.com/news-insights/press-releases/diot-siaci-announces-new-ownership-structure-ardian-burrus-group-and",
          "articleContentSelector": "div[class*=\"content\"] p",
          "sampleArticleLength": 7719,
          "aiInsights": {
            "pattern": "Headlines are sentence-style, descriptive strings (often starting with firm names or action verbs like 'announces', 'enters', 'launches', 'acquire', 'finalizes') and typically include company names, transaction or product details, and locations/numbers. Their URLs consistently live under the /news-insights/press-releases/ path. The selector in the provided data is a generic 'a', implying these headline links are simple anchor tags within a news/press listing.",
            "confidence": 0.9585714285714287
          },
          "notes": "Handled consent using persistent browser state."
        }
      }
    ]
  }
]
```

## 📄 src/config/dynamicConfig.js
*Lines: 68, Size: 2.17 KB*

```javascript
// apps/pipeline/src/config/dynamicConfig.js (version 3.2.0)
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'
import { Source, WatchlistEntity, Country } from '@headlines/models'
import { logger } from '@headlines/utils-server'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

export const configStore = {
  newspaperToCountryMap: new Map(),
  watchlistEntities: new Map(),
  activeCountries: new Set(),
  searchTermToEntityMap: new Map(),
}

async function loadConfigFromDB() {
  logger.info('Loading dynamic configuration from database...')
  Object.keys(configStore).forEach((key) => {
    const store = configStore[key]
    if (store instanceof Map || store instanceof Set) store.clear()
    if (Array.isArray(store)) store.length = 0
  })

  const [sources, watchlistItems, activeCountries] = await Promise.all([
    Source.find().lean(),
    WatchlistEntity.find({ status: 'active' }).lean(),
    Country.find({ status: 'active' }).select('name').lean(),
  ])

  for (const country of activeCountries) {
    configStore.activeCountries.add(country.name)
  }

  for (const source of sources) {
    configStore.newspaperToCountryMap.set(source.name, source.country)
  }

  for (const item of watchlistItems) {
    const nameKey = item.name.toLowerCase().trim()
    if (!configStore.watchlistEntities.has(nameKey)) {
      configStore.watchlistEntities.set(nameKey, item)
    }

    if (item.searchTerms && item.searchTerms.length > 0) {
      for (const term of item.searchTerms) {
        const termKey = term.toLowerCase().trim()
        if (!configStore.searchTermToEntityMap.has(termKey)) {
          configStore.searchTermToEntityMap.set(termKey, item)
        }
      }
    }
  }

  logger.info(
    `Dynamic config loaded:\n    - Sources: ${sources.length}\n    - Watchlist Items: ${configStore.watchlistEntities.size}\n    - Active Countries: ${configStore.activeCountries.size}\n    - Search Terms: ${configStore.searchTermToEntityMap.size}`
  )
}

export async function refreshConfig() {
  try {
    await loadConfigFromDB()
  } catch (error) {
    logger.error({ err: error }, 'Failed to refresh dynamic configuration from DB.')
  }
}

```

## 📄 src/config/index.js
*Lines: 50, Size: 1.49 KB*

```javascript
// apps/pipeline/src/config/index.js (version 6.0.0)
// Use the server-safe entrypoint for all config imports in the pipeline
import { env, settings } from '@headlines/config'

// --- Re-export all shared env and settings for local pipeline use ---
export * from '@headlines/config'

// --- App-Specific Static Constants (Not dynamically configurable) ---
export const IS_REFRESH_MODE = process.env.REFRESH_MODE === 'true'

// --- Static Thresholds (less likely to be changed by admin) ---
export const MAX_ARTICLE_CHARS = 30000
export const LLM_CONTEXT_MAX_CHARS = 25000
export const MIN_HEADLINE_CHARS = 5
export const MAX_HEADLINE_CHARS = 500
export const AI_BATCH_SIZE = 6

// --- Re-export SMTP and Email configs from env for convenience ---
export const SMTP_CONFIG = {
  host: env.SMTP_HOST,
  port: env.SMTP_PORT,
  secure: env.SMTP_SECURE,
  auth: {
    user: env.SMTP_USER,
    pass: env.SMTP_PASS,
  },
  fromAddress: env.SMTP_FROM_ADDRESS || env.SMTP_USER,
  fromName: env.SMTP_FROM_NAME,
  pool: true,
  maxConnections: 5,
  maxMessages: 100,
  rateLimit: 10,
}

export const EMAIL_CONFIG = {
  templateName: 'wealthEvents',
  subject: 'New Nordic Banking Opportunities Detected',
  language: 'en',
  brandName: 'Your Wealth Watch',
  companyAddress: 'Wealth Watch Inc., Paris, France',
  unsubscribeUrl: '#',
}

export const SUPERVISOR_EMAIL_CONFIG = {
  templateName: 'supervisorReport',
  subject: '⚙️ Hourly Headlines Processing Run Summary',
  language: 'en',
  brandName: 'Headlines Processing Bot',
}

```

## 📄 src/modules/dataStore/index.js
*Lines: 188, Size: 6.84 KB*

```javascript
// apps/pipeline/src/modules/dataStore/index.js (version 6.1.0)
import { Pinecone } from '@pinecone-database/pinecone'
import { logger } from '@headlines/utils-server'
import { generateEmbedding } from '@headlines/ai-services'
import { env } from '@headlines/config'
import { Opportunity } from '@headlines/models'
import {
  bulkWriteEvents,
  bulkWriteArticles,
  findEventsByKeys,
  findArticlesByLinks,
} from '@headlines/data-access'

const { PINECONE_API_KEY, PINECONE_INDEX_NAME } = env

if (!PINECONE_API_KEY) throw new Error('Pinecone API Key is missing!')
const pc = new Pinecone({ apiKey: PINECONE_API_KEY })
const pineconeIndex = pc.index(PINECONE_INDEX_NAME)

export async function savePipelineResults(
  articlesToSave,
  eventsToSave,
  savedOpportunities
) {
  logger.info(`Committing pipeline results to databases (MongoDB & Pinecone)...`)

  let savedEvents = []
  const pineconeVectors = []

  try {
    if (eventsToSave && eventsToSave.length > 0) {
      const eventOps = eventsToSave.map((event) => {
        const eventPayload = event.toObject ? event.toObject() : event
        delete eventPayload._id
        return {
          updateOne: {
            filter: { event_key: event.event_key },
            update: { $set: { ...eventPayload, emailed: false } },
            upsert: true,
          },
        }
      })
      const eventResult = await bulkWriteEvents(eventOps)
      if (!eventResult.success) throw new Error(eventResult.error)
      logger.info(
        `MongoDB Event commit complete. Upserted: ${eventResult.upsertedCount}, Modified: ${eventResult.modifiedCount}.`
      )

      const eventKeys = eventsToSave.map((e) => e.event_key)
      const findResult = await findEventsByKeys(eventKeys)
      if (!findResult.success) throw new Error(findResult.error)
      savedEvents = findResult.data

      for (const event of savedEvents) {
        const textToEmbed = `${event.synthesized_headline}\n${event.synthesized_summary}`
        const embedding = await generateEmbedding(textToEmbed)
        const eventDate = event.event_date ? new Date(event.event_date) : new Date() // Robust date handling
        pineconeVectors.push({
          id: `event_${event._id.toString()}`,
          values: embedding,
          metadata: {
            type: 'event',
            headline: event.synthesized_headline,
            summary: event.synthesized_summary,
            country: event.country,
            event_date: eventDate.toISOString(),
            key_individuals: (event.key_individuals || []).map((p) => p.name).join(', '),
          },
        })
      }
    }

    if (articlesToSave && articlesToSave.length > 0) {
      const articleOps = []
      const eventKeyToIdMap = new Map(savedEvents.map((e) => [e.event_key, e._id]))
      const articleIdToEventKeyMap = new Map()
      for (const event of eventsToSave) {
        for (const sourceArticle of event.source_articles) {
          const article = articlesToSave.find((a) => a.link === sourceArticle.link)
          if (article) articleIdToEventKeyMap.set(article._id.toString(), event.event_key)
        }
      }

      for (const article of articlesToSave) {
        // Embed the AI-generated summary, not the full text
        if (article.relevance_article && article.assessment_article) {
          const textToEmbed = `${article.headline}\n${article.assessment_article}`
          article.embedding = await generateEmbedding(textToEmbed)
        }
        const articleIdStr = article._id.toString()
        if (article.embedding) {
          pineconeVectors.push({
            id: `article_${articleIdStr}`,
            values: article.embedding,
            metadata: {
              type: 'article',
              headline: article.headline,
              summary: article.assessment_article || 'No summary.',
              newspaper: article.newspaper,
              country: article.country,
            },
          })
        }

        const eventKey = articleIdToEventKeyMap.get(articleIdStr)
        if (eventKey) article.synthesizedEventId = eventKeyToIdMap.get(eventKey)

        const { _id, ...dataToSet } = article
        // Delete articleContent before saving
        delete dataToSet.articleContent
        Object.keys(dataToSet).forEach(
          (key) => dataToSet[key] === undefined && delete dataToSet[key]
        )
        if (dataToSet.relevance_headline <= 25 && dataToSet.relevance_article <= 25)
          delete dataToSet.articleContent
        delete dataToSet.embedding
        articleOps.push({
          updateOne: {
            filter: { link: article.link },
            update: { $set: dataToSet },
            upsert: true,
          },
        })
      }
      await bulkWriteArticles(articleOps)
      logger.info(
        `MongoDB Article commit complete. Upserted/Modified: ${articleOps.length}.`
      )
    }

    const opportunityDocs =
      (await Opportunity.find({
        _id: { $in: (savedOpportunities || []).map((o) => o._id) },
      }).lean()) || []
    for (const opp of opportunityDocs) {
      if (opp.embedding && opp.embedding.length > 0) {
        pineconeVectors.push({
          id: `opportunity_${opp._id.toString()}`,
          values: opp.embedding,
          metadata: {
            type: 'opportunity',
            headline: opp.reachOutTo,
            summary: opp.whyContact.join(' '),
            country: opp.basedIn,
          },
        })
      }
    }
    if (pineconeVectors.length > 0) {
      await pineconeIndex.upsert(pineconeVectors)
      logger.info(`Pinecone commit complete. Upserted ${pineconeVectors.length} vectors.`)
    }

    return { success: true, savedEvents }
  } catch (error) {
    logger.fatal(
      { err: error },
      'CRITICAL: Failed to commit pipeline results to the databases.'
    )
    return { success: false, savedEvents: [] }
  }
}

export async function filterFreshArticles(articles, isRefreshMode = false) {
  if (!articles || articles.length === 0) return []
  const scrapedLinks = articles.map((a) => a.link)
  if (isRefreshMode) {
    logger.warn('REFRESH MODE: All scraped articles will be processed.')
    const result = await findArticlesByLinks(scrapedLinks)
    if (!result.success) throw new Error(result.error)
    const existingArticlesMap = new Map(result.data.map((a) => [a.link, a._id]))
    const articlesForReprocessing = articles.map((scrapedArticle) =>
      existingArticlesMap.get(scrapedArticle.link)
        ? { ...scrapedArticle, _id: existingArticlesMap.get(scrapedArticle.link) }
        : scrapedArticle
    )
    return articlesForReprocessing
  }
  const result = await findArticlesByLinks(scrapedLinks)
  if (!result.success) throw new Error(result.error)
  const existingLinks = new Set(result.data.map((a) => a.link))
  const freshArticles = articles.filter((a) => !existingLinks.has(a.link))
  logger.info(
    `Filtering complete. Found ${existingLinks.size} existing articles, ${freshArticles.length} are fresh.`
  )
  return freshArticles
}

```

## 📄 src/modules/email/components/articleFormatter.js
*Lines: 87, Size: 3.42 KB*

```javascript
// apps/pipeline/src/modules/email/components/articleFormatter.js (version 2.0.0)
import { logger } from '@headlines/utils-server'
import { truncateString } from '@headlines/utils-shared'

function createArticleCard(article) {
  const {
    link,
    headline,
    source,
    contacts,
    summary,
    assessmentText,
    relevanceScore,
    callToActionText,
  } = article

  const scoreColor =
    relevanceScore >= 80 ? '#27ae60' : relevanceScore >= 50 ? '#f39c12' : '#c0392b'

  const contactsHtml =
    contacts && contacts.length > 0
      ? `<p style="margin: 0 0 15px; font-size: 14px; color: #555;"><strong>Contacts:</strong> ${contacts.join(', ')}</p>`
      : ''

  return `
    <div style="border: 1px solid #e0e0e0; border-radius: 8px; margin-bottom: 20px; padding: 20px; background-color: #ffffff; box-shadow: 0 2px 4px rgba(0,0,0,0.05);">
        <h3 style="margin-top: 0; margin-bottom: 10px; font-size: 18px; color: #333;">
            <a href="${link}" style="color: #007bff; text-decoration: none;">${headline}</a>
        </h3>
        <p style="margin: 0 0 15px; font-size: 14px; color: #777;"><strong>Source:</strong> ${source}</p>
        ${contactsHtml}
        <p style="margin: 0 0 15px; font-size: 15px; color: #555; line-height: 1.6;">${summary}</p>
        <div style="background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 6px; padding: 15px; margin-bottom: 15px;">
            <p style="margin: 0; font-size: 14px; color: #333;">
                <strong>System Assessment:</strong> <span style="font-weight: bold; color: ${scoreColor};">[Score: ${relevanceScore}]</span> ${assessmentText}
            </p>
        </div>
        <a href="${link}" style="display: inline-block; background-color: #007bff; color: #ffffff; padding: 10px 15px; border-radius: 5px; text-decoration: none; font-weight: bold; font-size: 14px;">
            ${callToActionText}
        </a>
    </div>
    `
}

export function formatArticleForEmail(article) {
  if (!article || typeof article !== 'object' || !article.link || !article.headline) {
    logger.warn(`formatArticleForEmail: Invalid article object provided.`, {
      articlePreview: article,
    })
    return `<p style="color:red;">Error: Article data was invalid.</p>`
  }

  const genericArticleData = {
    link: article.link,
    headline: article.headline,
    source: article.source || article.newspaper || 'N/A',
    contacts: article.contacts || [],
    summary: 'No summary available.',
    assessmentText:
      article.assessment_article ||
      article.assessment_headline ||
      'Assessment not available.',
    relevanceScore: article.relevance_article ?? article.relevance_headline ?? 'N/A',
    callToActionText: 'Read Full Article →',
  }

  if (article.articleContent && typeof article.articleContent === 'object') {
    const { contents } = article.articleContent
    if (contents && Array.isArray(contents) && contents.length > 0) {
      genericArticleData.summary = truncateString(contents.join(' '), 250)
    }
  }

  if (genericArticleData.summary === 'No summary available.') {
    genericArticleData.summary = truncateString(genericArticleData.assessmentText, 250)
  }

  try {
    return createArticleCard(genericArticleData)
  } catch (error) {
    logger.error(`Error creating article card for email: "${article.headline}"`, {
      errorMessage: error.message,
    })
    return `<p style="color:red;">Error formatting article: ${truncateString(article.headline, 50)}</p>`
  }
}

```

## 📄 src/modules/email/components/emailBodyBuilder.js
*Lines: 126, Size: 5.84 KB*

```javascript
// apps/pipeline/src/modules/email/components/emailBodyBuilder.js (version 4.1.1 - Path Fix)
import { logger } from '@headlines/utils-server'
import { EMAIL_CONFIG } from '../../../config/index.js'
import { formatEventForEmail } from './eventFormatter.js'
import { getCountryFlag } from '@headlines/utils-shared'

function createEmailWrapper(bodyContent, subject) {
  // ... (wrapper remains the same)
  return `
    <!DOCTYPE html>
    <html lang="en">
        <head>
            <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
            <title>${subject}</title>
            <style type="text/css">
                body { margin: 0; padding: 0; background-color: #0d1117; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; }
                .content-table { width: 100%; max-width: 640px; }
                .main-heading { color: #EAEAEA; font-weight: 600; }
                .paragraph { color: #cccccc; line-height: 1.7; }
                .button { background-color: #238636; border-radius: 6px; }
                .button a { color: #ffffff; text-decoration: none; display: inline-block; width: 100%; text-align: center; }
                .footer-text { color: #888888; }
                @media only screen and (max-width: 600px) {
                    .content-table { width: 100% !important; }
                    .content-background { padding: 20px 15px !important; }
                }
            </style>
        </head>
        <body style="margin: 0; padding: 0; background-color: #0d1117;">
            <table role="presentation" border="0" cellpadding="0" cellspacing="0" width="100%">
                <tr>
                    <td align="center" style="padding: 20px 0;">
                        ${bodyContent}
                    </td>
                </tr>
            </table>
        </body>
    </html>
  `
}

export async function createPersonalizedEmailBody(
  user,
  eventsByCountry,
  subject,
  intro // Now a structured object
) {
  logger.info(
    { user: user.email, countries: Object.keys(eventsByCountry) },
    'Initiating email body generation.'
  )

  if (!user || !eventsByCountry || Object.keys(eventsByCountry).length === 0) {
    logger.warn('createPersonalizedEmailBody: Missing user or events data.')
    return null
  }

  // Format the new intro structure
  const bulletsHtml = intro.bullets
    .map((b) => `<li style="margin-bottom: 10px;">${b}</li>`)
    .join('')
  const introHtml = `
    <h1 class="main-heading" style="margin:0 0 20px 0; font-size: 24px; font-weight: bold;">${intro.greeting}</h1>
    <p class="paragraph" style="margin:0 0 25px 0; font-size: 15px;">${intro.body}</p>
    <ul class="paragraph" style="margin:0 0 25px 0; font-size: 15px; padding-left: 20px;">${bulletsHtml}</ul>
    <p class="paragraph" style="margin:0 0 25px 0; font-size: 15px;">${intro.signoff.replace(/\\n/g, '<br>')}</p>
  `

  let formattedEventsHtml = ''
  for (const [country, events] of Object.entries(eventsByCountry)) {
    const flag = getCountryFlag(country) // CORRECTED: Use utility function
    formattedEventsHtml += `<tr><td style="padding: 30px 0 10px 0;"><h2 style="margin:0; font-size: 24px; font-weight: 500; color: #EAEAEA;">${flag} ${country}</h2></td></tr>`

    const eventPromises = events.map((event) => formatEventForEmail(event))
    const results = await Promise.allSettled(eventPromises)

    results.forEach((result, index) => {
      if (result.status === 'fulfilled') {
        formattedEventsHtml += `<tr><td>${result.value}</td></tr>`
      } else {
        const failedEvent = events[index]
        logger.error(
          {
            err: result.reason,
            event: { _id: failedEvent._id, headline: failedEvent.synthesized_headline },
          },
          'A single event card failed to render. It will be skipped in the email.'
        )
        formattedEventsHtml += `<tr><td><p style="color:red;">Error: Could not render event: ${failedEvent.synthesized_headline}</p></td></tr>`
      }
    })
  }

  const mainContent = `
    <div class="content-table" style="margin:0 auto;">
      <table role="presentation" style="width:100%;border-collapse:collapse;border:0;border-spacing:0;">
          <tr>
              <td style="padding:36px 30px;" class="content-background">
                  <table role="presentation" style="width:100%;border-collapse:collapse;border:0;border-spacing:0;">
                      <tr>
                          <td>
                              ${introHtml}
                          </td>
                      </tr>
                      <tr>
                        <td align="center" style="padding: 10px 0 30px 0;">
                           <table role="presentation" border="0" cellspacing="0" cellpadding="0"><tr><td class="button" style="padding:14px 28px;"><a href="https://headlines-client.vercel.app" target="_blank" style="font-size: 16px;">View Full Dashboard</a></td></tr></table>
                        </td>
                      </tr>
                      ${formattedEventsHtml}
                  </table>
              </td>
          </tr>
          <tr>
              <td style="padding:30px;">
                  <table role="presentation" style="width:100%;border-collapse:collapse;border:0;border-spacing:0;"><tr><td align="center"><p class="footer-text" style="margin:0;font-size:12px;">${EMAIL_CONFIG.brandName} | ${EMAIL_CONFIG.companyAddress}</p><p class="footer-text" style="margin:10px 0 0 0;font-size:12px;"><a href="${EMAIL_CONFIG.unsubscribeUrl}" style="color:#888888;text-decoration:underline;">Unsubscribe</a></p></td></tr></table>
              </td>
          </tr>
      </table>
    </div>`

  logger.info(`Successfully generated email body for ${user.email}.`)
  return createEmailWrapper(mainContent, subject)
}

```

## 📄 src/modules/email/components/eventFormatter.js
*Lines: 181, Size: 6.22 KB*

```javascript
// apps/pipeline/src/modules/email/components/eventFormatter.js (version 5.1.0)
import { logger } from '@headlines/utils-server'
import { Opportunity } from '@headlines/models'

const sourceIcons = {
  rag_db: '🗄️',
  wikipedia: '🌐',
  news_api: '📰',
}

function formatEnrichmentSources(sources = []) {
  if (sources.length === 0) return ''
  const icons = sources.map((s) => sourceIcons[s] || '❓').join(' ')
  return `<span style="font-size: 14px; margin-left: 12px; vertical-align: middle;">${icons}</span>`
}

async function getOpportunitiesForEvent(eventId) {
  try {
    if (!eventId) return []
    return await Opportunity.find({ events: eventId }).lean()
  } catch (error) {
    logger.error(
      { err: error, eventId },
      'Failed to fetch opportunities for an event card.'
    )
    return []
  }
}

async function createEventBriefCard(event) {
  const {
    _id,
    synthesized_headline,
    synthesized_summary,
    ai_assessment_reason,
    source_articles,
    highest_relevance_score,
    enrichmentSources,
    eventClassification, // Get the new field
  } = event

  const opportunities = await getOpportunitiesForEvent(_id)

  const scoreColor =
    highest_relevance_score >= 80
      ? '#4CAF50'
      : highest_relevance_score >= 50
        ? '#FFC107'
        : '#F44336'
  const scoreTextShadow = `0 0 8px ${scoreColor}40`

  // NEW: HTML block for the classification badge
  const classificationHtml = eventClassification
    ? `
    <div style="margin-top: 8px; display: inline-block; padding: 3px 10px; background-color: rgba(212, 175, 55, 0.1); border: 1px solid rgba(212, 175, 55, 0.2); border-radius: 99px; font-size: 11px; font-weight: 600; color: #D4AF37; text-transform: uppercase; letter-spacing: 0.5px;">
        ${eventClassification}
    </div>
  `
    : ''

  const opportunitiesHtml =
    opportunities && opportunities.length > 0
      ? `
    <tr>
        <td style="padding: 16px 0 8px; border-top: 1px solid #444444;">
            <p style="margin:0; font-size: 14px; color: #D4AF37; font-weight: 600;">Related Opportunities</p>
        </td>
    </tr>
    <tr>
        <td>
            ${opportunities
              .map(
                (opp) => `
                <div style="font-size: 14px; color: #cccccc; line-height: 1.6; margin-bottom: 8px;">
                    <strong>${opp.reachOutTo}</strong> (~$${
                      opp.likelyMMDollarWealth
                    }M) - <em>${opp.contactDetails?.role || 'Role not specified'}</em>
                </div>`
              )
              .join('')}
        </td>
    </tr>
  `
      : ''

  const reasoningHtml = ai_assessment_reason
    ? `
    <tr>
        <td style="padding: 16px 0 0; border-top: 1px solid #444444;">
            <p style="margin:0; font-size: 12px; color: #a0a0a0; font-style: italic;">
                <strong>AI Assessment:</strong> ${ai_assessment_reason}
            </p>
        </td>
    </tr>
  `
    : ''

  const sourcesHtml = (source_articles || [])
    .map(
      (article) => `
    <tr>
        <td style="padding: 4px 0;">
            <a href="${article.link}" style="color: #a0a0a0; text-decoration: none; font-size: 13px;">
                ${article.newspaper}: ${article.headline}
            </a>
        </td>
    </tr>
  `
    )
    .join('')

  return `
    <div style="background-color: #1E1E1E; border-radius: 12px; margin-bottom: 25px; padding: 25px; border: 1px solid #333333; box-shadow: 0 10px 25px rgba(0,0,0,0.3);">
        <table role="presentation" style="width:100%;border-collapse:collapse;border:0;border-spacing:0;">
            <!-- Score & Headline -->
            <tr>
                <td style="padding-bottom: 15px;">
                    <table role="presentation" style="width:100%;border-collapse:collapse;border:0;border-spacing:0;">
                        <tr>
                            <td style="width: 60px; vertical-align: top;" valign="top">
                                <p style="font-size: 28px; font-weight: 700; color: ${scoreColor}; margin: 0; text-shadow: ${scoreTextShadow};">${highest_relevance_score}</p>
                                <p style="font-size: 12px; color: #a0a0a0; margin: 0;">Score</p>
                                ${classificationHtml}
                            </td>
                            <td style="padding-left: 20px;">
                                <h2 style="margin:0; font-size: 20px; font-weight: 600; color: #EAEAEA; line-height: 1.4;">${synthesized_headline}${formatEnrichmentSources(enrichmentSources)}</h2>
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
            <!-- Summary -->
            <tr>
                <td style="padding-bottom: 20px;">
                    <p style="margin:0; font-size: 16px; color: #cccccc; line-height: 1.7;">${synthesized_summary}</p>
                </td>
            </tr>
            
            ${opportunitiesHtml}
            
            <!-- Sources -->
            <tr>
                <td style="padding: 16px 0 8px; border-top: 1px solid #444444;">
                    <p style="margin:0; font-size: 14px; color: #D4AF37; font-weight: 600;">Source Articles</p>
                </td>
            </tr>
            <tr>
              <td>
                <table role="presentation" style="width:100%;border-collapse:collapse;border:0;border-spacing:0;">${sourcesHtml}</table>
              </td>
            </tr>
            ${reasoningHtml}
        </table>
    </div>
    `
}

export async function formatEventForEmail(event) {
  logger.info(
    { event: { _id: event._id, headline: event.synthesized_headline } },
    'Formatting event card for email.'
  )
  if (!event || typeof event !== 'object' || !event.synthesized_headline) {
    logger.warn(`formatEventForEmail: Invalid event object provided.`, {
      eventPreview: event,
    })
    throw new Error('Invalid event object provided to formatEventForEmail.')
  }
  try {
    const cardHtml = await createEventBriefCard(event)
    logger.info({ eventId: event._id }, 'Successfully formatted event card.')
    return cardHtml
  } catch (error) {
    logger.error(`Error creating event card for email: "${event.synthesized_headline}"`, {
      errorMessage: error.message,
      stack: error.stack,
    })
    throw error
  }
}

```

## 📄 src/modules/email/components/supervisor/costSummary.js
*Lines: 85, Size: 2.57 KB*

```javascript
// apps/pipeline/src/modules/email/components/supervisor/costSummary.js (version 2.0.0)
import { escapeHtml } from '@headlines/utils-shared'

function formatCost(cost) {
  return `$${cost.toFixed(4)}`
}

export function createCostSummaryHtml(runStats) {
  if (!runStats || (!runStats.tokenUsage && !runStats.apiCalls)) {
    return ''
  }

  let totalTokenCost = 0
  let totalApiCost = 0
  let tokenHtml = ''
  let apiHtml = ''

  if (runStats.tokenUsage) {
    const modelsWithUsage = Object.keys(runStats.tokenUsage).filter(
      (model) =>
        runStats.tokenUsage[model].inputTokens > 0 ||
        runStats.tokenUsage[model].outputTokens > 0
    )
    if (modelsWithUsage.length > 0) {
      const tokenRows = modelsWithUsage
        .map((model) => {
          const stats = runStats.tokenUsage[model]
          totalTokenCost += stats.cost
          return `
            <tr>
                <td>${escapeHtml(model)}</td>
                <td>${stats.inputTokens.toLocaleString()}</td>
                <td>${stats.outputTokens.toLocaleString()}</td>
                <td>${formatCost(stats.cost)}</td>
            </tr>`
        })
        .join('')
      tokenHtml = `
        <h3>LLM Token Usage</h3>
        <table>
            <thead><tr><th>Model</th><th>Input Tokens</th><th>Output Tokens</th><th>Est. Cost</th></tr></thead>
            <tbody>${tokenRows}</tbody>
        </table>`
    }
  }

  if (runStats.apiCalls) {
    const servicesWithUsage = Object.keys(runStats.apiCalls).filter(
      (service) => runStats.apiCalls[service].calls > 0
    )
    if (servicesWithUsage.length > 0) {
      const apiRows = servicesWithUsage
        .map((service) => {
          const stats = runStats.apiCalls[service]
          totalApiCost += stats.cost
          return `
            <tr>
                <td>${escapeHtml(service)}</td>
                <td>${stats.calls.toLocaleString()}</td>
                <td>${stats.cost > 0 ? formatCost(stats.cost) : '(Free)'}</td>
            </tr>`
        })
        .join('')
      apiHtml = `
        <h3 style="margin-top: 30px;">Third-Party API Usage</h3>
        <table>
            <thead><tr><th>Service</th><th>Calls</th><th>Est. Cost</th></tr></thead>
            <tbody>${apiRows}</tbody>
        </table>`
    }
  }

  const grandTotalCost = totalTokenCost + totalApiCost

  return `
    <h2>Cost Summary</h2>
    ${tokenHtml}
    ${apiHtml}
    <p style="text-align: right; font-size: 16px; font-weight: bold; margin-top: 20px;">
        Total Estimated Run Cost: <span style="color: #0056b3;">${formatCost(
          grandTotalCost
        )}</span>
    </p>`
}

```

## 📄 src/modules/email/components/supervisor/databaseTables.js
*Lines: 84, Size: 3.4 KB*

```javascript
// apps/pipeline/src/modules/email/components/supervisor/databaseTables.js (Corrected)
import { SynthesizedEvent } from '@headlines/models'
import { settings } from '@headlines/config'
import { truncateString, escapeHtml } from '@headlines/utils-shared' // <-- CORRECTED IMPORT

const sourceIcons = {
  // ... rest of the file is unchanged ...
  rag_db: '🗄️',
  wikipedia: '🌐',
  news_api: '📰',
}

function formatEnrichmentSources(sources = []) {
  if (sources.length === 0) return 'N/A'
  return sources.map((s) => sourceIcons[s] || '❓').join(' ')
}

export async function createEventsTableHtml(runStartDate) {
  const recentEvents = await SynthesizedEvent.find({ createdAt: { $gte: runStartDate } })
    .sort({ createdAt: -1 })
    .limit(50)
    .lean()
  if (recentEvents.length === 0)
    return `<h2>Synthesized Events from this Run</h2><p>No events were synthesized in this run.</p>`
  let tableRows = recentEvents
    .map(
      (event) =>
        `<tr>
            <td>${truncateString(escapeHtml(event.synthesized_headline), 70)}</td>
            <td>${event.highest_relevance_score}</td>
            <td>${formatEnrichmentSources(event.enrichmentSources)}</td>
            <td>${escapeHtml((event.key_individuals || []).map((p) => p.name).join(', ') || 'N/A')}</td>
            <td>${event.emailed ? 'Yes' : 'No'}</td>
        </tr>`
    )
    .join('')
  return `<h2>Synthesized Events (${recentEvents.length})</h2>
    <table>
        <thead><tr><th>Synthesized Headline</th><th>Score</th><th>Enrichment</th><th>Key Individuals</th><th>Emailed?</th></tr></thead>
        <tbody>${tableRows}</tbody>
    </table>`
}

export async function createArticlesTableHtml(runStats) {
  // DEFINITIVE FIX: Use enrichmentOutcomes as the source of truth
  const allArticles = runStats.enrichmentOutcomes || []

  if (allArticles.length === 0)
    return `<h2>All Fresh Articles Processed</h2><p>No new raw articles were processed in the enrichment stage.</p>`

  const relevantArticles = allArticles.filter(
    (a) => a.headlineScore >= settings.HEADLINES_RELEVANCE_THRESHOLD
  )
  const irrelevantCount = runStats.freshHeadlinesFound - relevantArticles.length

  if (relevantArticles.length === 0) {
    return `<h2>All Fresh Articles Processed (${runStats.freshHeadlinesFound})</h2><p>No headlines were deemed relevant (all scored < ${settings.HEADLINES_RELEVANCE_THRESHOLD}).</p>`
  }

  relevantArticles.sort(
    (a, b) => (b.finalScore || b.headlineScore) - (a.finalScore || a.headlineScore)
  )

  let tableRows = relevantArticles
    .map((article) => {
      const status = article.outcome
      const finalScore = article.finalScore ?? 'N/A'
      return `<tr><td><a href="${article.link}" target="_blank">${truncateString(escapeHtml(article.headline), 80)}</a></td><td>${escapeHtml(article.newspaper)}</td><td>${article.headlineScore}</td><td>${finalScore}</td><td>${status}</td></tr>`
    })
    .join('')

  let footer = ''
  if (irrelevantCount > 0) {
    footer = `<p style="margin-top: 15px; font-size: 13px; color: #6c757d;">... plus ${irrelevantCount} other headlines that were deemed irrelevant (score < ${settings.HEADLINES_RELEVANCE_THRESHOLD}).</p>`
  }

  return `<h2>All Fresh Articles Processed (${runStats.freshHeadlinesFound})</h2>
    <table>
        <thead><tr><th>Headline</th><th>Source</th><th>HL Score</th><th>Final Score</th><th>Enrichment Status</th></tr></thead>
        <tbody>${tableRows}</tbody>
    </table>
    ${footer}`
}

```

## 📄 src/modules/email/components/supervisor/enrichmentFunnel.js
*Lines: 64, Size: 2.97 KB*

```javascript
// apps/pipeline/src/modules/email/components/supervisor/enrichmentFunnel.js (Corrected)
import { settings } from '@headlines/config'
import { escapeHtml, truncateString } from '@headlines/utils-shared' // <-- CORRECTED IMPORT

export function createEnrichmentFunnelHtml(runStats) {
  // ... rest of the file is unchanged ...
  const enrichmentOutcomes = runStats.enrichmentOutcomes || []

  if (runStats.relevantHeadlines === 0) {
    return `<h2>Enrichment Funnel</h2><p>No headlines met the relevance threshold (scored &lt; ${settings.HEADLINES_RELEVANCE_THRESHOLD}).</p>`
  }

  const cardsHtml = enrichmentOutcomes
    .sort((a, b) => (b.headlineScore || 0) - (a.headlineScore || 0))
    .map((item) => {
      const isSuccess = item.outcome.toLowerCase() === 'success'
      const statusClass = isSuccess
        ? 'status-success'
        : item.outcome === 'High-Signal Failure'
          ? 'status-failure'
          : 'status-dropped'
      const statusIcon = isSuccess ? '✅' : '❌'

      let finalScoreText = `Final Score [${item.finalScore ?? 'N/A'}]`
      if (item.agent_disagreement) {
        finalScoreText += ` <strong style="color: #d97706;">(Disagreement)</strong>`
      }

      // DEFINITIVE FIX: Use the actual assessment text and content snippets
      const headlineAssessment = item.assessment_headline || 'N/A'
      const articleAssessment = item.assessment_article || 'N/A'
      const contentSnippet = item.content_snippet
        ? `${escapeHtml(item.content_snippet)}...`
        : 'N/A'

      return `
        <div class="card">
            <div class="card-header">
                <h4 style="margin:0; font-size: 16px;">
                    <a href="${item.link}" target="_blank">${escapeHtml(item.headline)}</a>
                </h4>
                <p style="margin: 5px 0 0; font-size: 12px; color: #6c757d;">Source: ${escapeHtml(item.newspaper)}</p>
            </div>
            <div class="card-body">
                <p style="margin: 0 0 10px;"><strong>${statusIcon} Final Outcome:</strong> <span class="${statusClass}">${item.outcome}</span></p>
                <div class="step">
                    <p class="step-title"><strong>Stage 1: Headline Assessment</strong></p>
                    <p class="step-detail">Score [${item.headlineScore}] - <i>${escapeHtml(truncateString(headlineAssessment, 150))}</i></p>
                </div>
                <div class="step">
                    <p class="step-title"><strong>Stage 2: Content Enrichment & Assessment</strong></p>
                    <p class="step-detail">${finalScoreText} - <i>${escapeHtml(truncateString(articleAssessment, 200))}</i></p>
                </div>
                <div class="snippet">
                    <strong>Article Snippet:</strong>
                    <p class="snippet-text">${contentSnippet}</p>
                </div>
            </div>
        </div>`
    })
    .join('')
  return `<h2>Enrichment Funnel Audit Trail (Lifecycle of ${runStats.relevantHeadlines} relevant headlines)</h2>${cardsHtml}`
}

```

## 📄 src/modules/email/components/supervisor/judgeVerdict.js
*Lines: 53, Size: 1.82 KB*

```javascript
// apps/pipeline/src/modules/email/components/supervisor/judgeVerdict.js (version 2.0.0)
import { escapeHtml } from '@headlines/utils-shared'

function getVerdictClass(quality) {
  if (!quality) return 'verdict-neutral'
  const q = quality.toLowerCase()
  if (q === 'excellent' || q === 'good') {
    return 'verdict-positive'
  }
  if (q === 'poor' || q === 'irrelevant') {
    return 'verdict-negative'
  }
  return 'verdict-neutral' // For Acceptable, Marginal
}

export function createJudgeVerdictHtml(judgeVerdict) {
  if (!judgeVerdict) return ''

  let html = '<h2>⚖️ Judge & Arbitrator Verdict</h2>'
  html +=
    '<p>The following is a quality control review of the items generated in this run, intended to provide feedback for prompt engineering and system improvements.</p>'

  const renderJudgements = (judgements) => {
    let content = ''
    if (judgements && judgements.length > 0) {
      judgements.forEach((item) => {
        const verdictClass = getVerdictClass(item.quality)
        content += `
            <div class="card">
                <div class="card-header"><h4 style="margin:0; font-size: 15px;">${escapeHtml(item.identifier)}</h4></div>
                <div class="card-body">
                    <p class="judge-verdict" style="margin:0;">
                        <strong class="${verdictClass}">[${escapeHtml(item.quality)}]</strong> 
                        ${escapeHtml(item.commentary)}
                    </p>
                </div>
            </div>`
      })
    }
    return content
  }

  html += '<h3>Event Judgements</h3>'
  html += renderJudgements(judgeVerdict.event_judgements) || '<p>No events to judge.</p>'

  html += '<h3 style="margin-top: 30px;">Opportunity Judgements</h3>'
  html +=
    renderJudgements(judgeVerdict.opportunity_judgements) ||
    '<p>No opportunities to judge.</p>'

  return html
}

```

## 📄 src/modules/email/components/supervisor/scraperHealth.js
*Lines: 66, Size: 2.48 KB*

```javascript
// apps/pipeline/src/modules/email/components/supervisor/scraperHealth.js (Corrected)
import { escapeHtml } from '@headlines/utils-shared'

export function createScraperFailureAlertHtml(enrichmentOutcomes) {
  if (!enrichmentOutcomes || enrichmentOutcomes.length === 0) return ''

  // Filter for high-signal headlines where content scraping failed.
  const scraperFailures = enrichmentOutcomes.filter(
    (item) =>
      item.outcome === 'High-Signal Failure' ||
      (item.outcome === 'Dropped' &&
        // DEFENSIVE FIX: Check for assessment_article existence before calling .includes()
        (item.assessment_article || '').includes('Enrichment Failed'))
  )

  if (scraperFailures.length === 0) return ''

  let listItems = scraperFailures
    .map((item) => {
      // Differentiate the reason in the email for clarity.
      const reason =
        item.outcome === 'High-Signal Failure'
          ? 'High-Signal Headline - Content Scraping Failed'
          : item.assessment_article

      return `
        <li style="margin-bottom: 12px;">
            <strong>${escapeHtml(item.newspaper)}:</strong> 
            <a href="${item.link}" target="_blank">${escapeHtml(item.headline)}</a><br>
            <em style="font-size:13px; color: #555;">${escapeHtml(reason)}</em>
        </li>`
    })
    .join('')

  return `
    <div class="alert-box alert-danger">
        <h2 style="margin-top:0;">⚠️ Scraper Action Required</h2>
        <p>The following relevant headlines failed the enrichment stage, likely due to an outdated or incorrect article text selector.</p>
        <ul style="padding-left: 20px; margin-top: 15px; font-size: 14px;">${listItems}</ul>
    </div>`
}

export function createScraperHealthTable(healthStats) {
  if (!healthStats || healthStats.length === 0)
    return '<h2>Scraper Health Check</h2><p>No health stats available.</p>'
  let tableRows = healthStats
    .sort((a, b) => a.source.localeCompare(b.source))
    .map((stat) => {
      const status = stat.success ? '✅ OK' : '❌ FAILED'
      const statusColor = stat.success ? '#28a745' : '#dc3545'
      return `
            <tr>
                <td>${escapeHtml(stat.source)}</td>
                <td style="color: ${statusColor}; font-weight: bold;">${status}</td>
                <td>${stat.count}</td>
            </tr>`
    })
    .join('')
  return `
    <h2>Scraper Health Check</h2>
    <table>
        <thead><tr><th>Source</th><th>Status</th><th>Articles Found</th></tr></thead>
        <tbody>${tableRows}</tbody>
    </table>`
}

```

## 📄 src/modules/email/components/supervisor/supervisorEmailBodyBuilder.js
*Lines: 134, Size: 4.71 KB*

```javascript
// apps/pipeline/src/modules/email/components/supervisor/supervisorEmailBodyBuilder.js (version 5.2.2 - Path Fix)
import { SUPERVISOR_EMAIL_CONFIG } from '@headlines/config'
import { createSupervisorEmailWrapper } from '../../templates/supervisorWrapper.js'
import {
  createScraperHealthTable,
  createScraperFailureAlertHtml,
} from './scraperHealth.js'
import { createEnrichmentFunnelHtml } from './enrichmentFunnel.js'
import { createEventsTableHtml, createArticlesTableHtml } from './databaseTables.js'
import { createJudgeVerdictHtml } from './judgeVerdict.js'
import { createCostSummaryHtml } from './costSummary.js'
import { SynthesizedEvent, Opportunity } from '@headlines/models'
import { executiveSummaryChain } from '@headlines/ai-services'
import { logger } from '@headlines/utils-server'

function createPerformanceDashboardHtml(runStats, newEventCount, newOpportunityCount) {
  const funnel = `${runStats.headlinesScraped} Scraped ➔ ${runStats.relevantHeadlines} Relevant ➔ ${runStats.eventsSynthesized} Events ➔ ${newOpportunityCount} Opps`
  const totalCost =
    (runStats.tokenUsage
      ? Object.values(runStats.tokenUsage).reduce((acc, model) => acc + model.cost, 0)
      : 0) +
    (runStats.apiCalls
      ? Object.values(runStats.apiCalls).reduce((acc, service) => acc + service.cost, 0)
      : 0)

  return `
        <h2>Performance Dashboard</h2>
        <table class="dashboard">
            <tr>
                <th>Funnel</th>
                <td>${funnel}</td>
            </tr>
            <tr>
                <th>New Events Created</th>
                <td>${newEventCount}</td>
            </tr>
            <tr>
                <th>Est. Run Cost</th>
                <td>$${totalCost.toFixed(4)}</td>
            </tr>
             <tr>
                <th>Errors</th>
                <td style="color: ${runStats.errors?.length > 0 ? '#dc3545' : '#28a745'}; font-weight: bold;">${runStats.errors?.length || 0}</td>
            </tr>
        </table>
    `
}

export async function createSupervisorEmailBody(runStats) {
  const runTimestamp = new Date().toLocaleString('en-GB', {
    timeZone: 'Europe/Copenhagen',
  })
  const runStartDate = new Date(Date.now() - 20 * 60 * 1000)

  const [newEventCount, newOpportunityCount] = await Promise.all([
    SynthesizedEvent.countDocuments({ createdAt: { $gte: runStartDate } }),
    Opportunity.countDocuments({ createdAt: { $gte: runStartDate } }),
  ])

  const executiveSummaryPayload = {
    freshHeadlinesFound: runStats.freshHeadlinesFound,
    judgeVerdict: runStats.judgeVerdict || {
      event_judgements: [],
      opportunity_judgements: [],
    },
  }

  const executiveSummaryResult = await executiveSummaryChain({
    payload_json_string: JSON.stringify(executiveSummaryPayload),
  })
  const executiveSummary =
    executiveSummaryResult.summary || 'AI failed to generate a summary for this run.'

  const scraperFailureAlertHtml = createScraperFailureAlertHtml(
    runStats.enrichmentOutcomes
  )

  const executiveSummaryHtml = executiveSummary
    ? `<div class="alert-box alert-info">
          <h2 style="margin-top:0;">🤖 Executive Summary</h2>
          <p style="font-style: italic; font-size: 15px;">"${executiveSummary}"</p>
      </div>`
    : ''

  const dashboardHtml = createPerformanceDashboardHtml(
    runStats,
    newEventCount,
    newOpportunityCount
  )

  const [
    scraperHealthHtml,
    enrichmentFunnelHtml,
    judgeVerdictHtml,
    eventsTableHtml,
    articlesTableHtml,
    costSummaryHtml,
  ] = await Promise.all([
    createScraperHealthTable(runStats.scraperHealth),
    createEnrichmentFunnelHtml(runStats),
    createJudgeVerdictHtml(runStats.judgeVerdict),
    createEventsTableHtml(runStartDate),
    createArticlesTableHtml(runStats),
    createCostSummaryHtml(runStats),
  ])

  const bodyContent = `
        <div style="text-align:center; margin-bottom: 30px;">
            <h1>${SUPERVISOR_EMAIL_CONFIG.subject}</h1>
            <p style="font-size: 16px; color: #6c757d;">Run completed: ${runTimestamp}</p>
        </div>
        
        <!-- BLUF SECTION -->
        ${executiveSummaryHtml}
        ${scraperFailureAlertHtml} 
        ${dashboardHtml}
        ${costSummaryHtml}

        <!-- APPENDICES -->
        <div class="appendix-section">
            ${judgeVerdictHtml}
            ${enrichmentFunnelHtml}
            ${eventsTableHtml}
            ${articlesTableHtml}
            ${scraperHealthHtml}
        </div>

        <div style="text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #dee2e6; font-size: 12px; color: #6c757d;">
            <p>This is an automated report from the ${SUPERVISOR_EMAIL_CONFIG.brandName}.</p>
        </div>`

  return createSupervisorEmailWrapper(bodyContent, SUPERVISOR_EMAIL_CONFIG.subject)
}

```

## 📄 src/modules/email/constants.js
*Lines: 9, Size: 337 Bytes*

```javascript
// src/modules/email/constants.js (version 2.1)
// src/modules/email/constants.js

// Define the Content-ID (CID) for the embedded logo.
// This acts as an internal URL within the email itself.
export const LOGO_CID = 'logo@wealthevents.email';

// Define the local path to the logo file.
export const LOGO_PATH = './public/bullion.png';
```

## 📄 src/modules/email/emailDispatcher.js
*Lines: 131, Size: 4.32 KB*

```javascript
// apps/pipeline/src/modules/notifications/emailDispatcher.js (version 4.0.1)
import { groupItemsByCountry, getCountryFlag } from '@headlines/utils-shared'
import { logger } from '@headlines/utils-server'
import { createPersonalizedEmailBody } from '../email/components/emailBodyBuilder.js'
import { sendWealthEventsEmail } from '@headlines/utils-server'
import {
  emailSubjectChain,
  emailIntroChain,
  translateChain,
} from '@headlines/ai-services'

export async function sendBulkEmails(emailQueue) {
  if (emailQueue.length === 0) return 0

  const isDryRun = process.env.DRY_RUN === 'true'
  if (isDryRun) {
    logger.warn(
      'DRY RUN MODE: Email dispatch is being simulated. No actual emails will be sent.'
    )
    let simulatedSuccessCount = 0
    for (const { user, events } of emailQueue) {
      if (events && events.length > 0) {
        logger.info(
          `[DRY RUN] Would have sent ${user.language} email to ${user.email} with ${events.length} events.`
        )
        simulatedSuccessCount++
      }
    }
    return simulatedSuccessCount
  }

  logger.info(
    `Dispatching ${emailQueue.length} personalized emails with AI-powered copy...`
  )
  let successCount = 0

  for (const { user, events, opportunities } of emailQueue) {
    try {
      if (!events || events.length === 0) {
        logger.info(`Skipping email for ${user.email} as it contained no valid events.`)
        continue
      }

      // --- AI-Powered Subject and Intro Generation ---
      const eventsByCountry = groupItemsByCountry(events, 'country')
      const primaryCountry = Object.keys(eventsByCountry)[0]
      const countryFlag = getCountryFlag(primaryCountry)

      const eventPayloadForAI = events.map((e) => ({
        headline: e.synthesized_headline,
        summary: e.synthesized_summary,
      }))

      // DEFINITIVE FIX: Use direct await calls instead of
      const [subjectResult, introResult] = await Promise.all([
        emailSubjectChain({
          events_json_string: JSON.stringify(eventPayloadForAI),
        }),
        emailIntroChain({
          payload_json_string: JSON.stringify({
            firstName: user.firstName,
            events: eventPayloadForAI,
          }),
        }),
      ])

      const aiSubject = subjectResult.subject_headline || 'Key Developments'

      const aiIntro = introResult.error
        ? {
            greeting: `Dear ${user.firstName},`,
            body: 'Here are the latest relevant wealth events we have identified for your review.',
            bullets: events
              .slice(0, 2)
              .map(
                (e) =>
                  `A key development regarding ${e.synthesized_headline.substring(0, 40)}...`
              ),
            signoff: 'We wish you a fruitful day!\\n\\nThe team at Wealth Watch',
          }
        : introResult

      const subject = `${countryFlag} Wealth News (${events.length}): ${aiSubject}`

      const htmlBody = await createPersonalizedEmailBody(
        user,
        eventsByCountry,
        subject,
        aiIntro
      )

      if (!htmlBody) {
        logger.error(`Failed to generate email body for ${user.email}. Skipping.`)
        continue
      }

      let finalHtmlBody = htmlBody
      const targetLanguage = user.language || 'English'

      if (targetLanguage !== 'English') {
        logger.info(`Translating email for ${user.email} into ${targetLanguage}...`)
        // DEFINITIVE FIX: Use direct await calls instead of
        const translationResult = await translateChain({
          language: targetLanguage,
          html_content: htmlBody,
        })
        if (translationResult.error) {
          logger.error(
            { err: translationResult.error, user: user.email },
            `AI translation to ${targetLanguage} failed. Sending in English as a fallback.`
          )
        } else {
          finalHtmlBody = translationResult.translated_html
          logger.info(`Successfully translated email for ${user.email}.`)
        }
      }

      const mailOptions = { to: user.email, subject, html: finalHtmlBody }
      const wasSent = await sendWealthEventsEmail(mailOptions)
      if (wasSent) successCount++
    } catch (error) {
      logger.error(
        { err: error, user: user.email },
        'A critical, unhandled error occurred during the email dispatch loop for a user. Skipping this user.'
      )
    }
  }

  return successCount
}

```

## 📄 src/modules/email/index.js
*Lines: 51, Size: 1.56 KB*

```javascript
// AFTER
// apps/pipeline/src/modules/email/index.js (Corrected)
import { logger } from '@headlines/utils-server'
import { sendGenericEmail } from '@headlines/utils-server' // <-- CORRECT IMPORT
import { Subscriber } from '@headlines/models'
import { createSupervisorEmailBody } from './components/supervisor/supervisorEmailBodyBuilder.js'

/**
 * Coordinates sending the supervisor report email.
 * @param {Object} runStats - Statistics about the current pipeline run.
 */
export async function sendSupervisorReportEmail(runStats) {
  if (!runStats) {
    logger.error('No runStats provided for supervisor report. Skipping email.')
    return
  }

  logger.info('Preparing supervisor report email...')

  try {
    const superUsers = await Subscriber.find({
      isActive: true,
      role: 'admin',
    })
      .select('email')
      .lean()

    const superUserEmails = superUsers.map((user) => user.email)

    if (superUserEmails.length === 0) {
      logger.warn('No admin users found. Skipping supervisor report.')
      return
    }

    // Generate the complex HTML body
    const emailBody = await createSupervisorEmailBody(runStats)

    // Send the email using the shared mailer
    await sendGenericEmail({
      to: superUserEmails.join(','),
      subject: '⚙️ Hourly Headlines Processing Run Summary',
      html: emailBody,
      emailType: 'SupervisorReport',
    })

    logger.info('✅ Supervisor report email successfully sent/queued to all superusers.')
  } catch (error) {
    logger.error({ err: error }, '💥 CRITICAL: Failed to send supervisor report email.')
  }
}

```

## 📄 src/modules/email/templates/supervisorWrapper.js
*Lines: 49, Size: 2.87 KB*

```javascript
// apps/pipeline/src/modules/email/templates/supervisorWrapper.js (version 2.0)
/**
 * Provides the HTML shell and CSS for the supervisor report email.
 * @param {string} bodyContent - The pre-compiled HTML content of the report.
 * @param {string} subject - The email subject.
 * @returns {string} The full HTML document for the email.
 */
export function createSupervisorEmailWrapper(bodyContent, subject) {
  return `
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${subject}</title>
        <style>
            body { margin: 0; padding: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; background-color: #f8f9fa; color: #212529; }
            .container { max-width: 1200px; margin: 20px auto; background-color: #ffffff; padding: 40px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.05); }
            h1, h2, h3, h4 { margin-top: 0; margin-bottom: 1rem; font-weight: 600; color: #343a40; }
            h1 { font-size: 28px; }
            h2 { font-size: 22px; border-bottom: 1px solid #dee2e6; padding-bottom: 10px; margin-top: 40px; }
            p { margin-top: 0; margin-bottom: 1rem; line-height: 1.6; }
            table { width: 100%; border-collapse: collapse; font-size: 14px; margin-bottom: 20px; }
            th, td { padding: 12px 15px; text-align: left; border-bottom: 1px solid #dee2e6; }
            th { background-color: #f1f3f5; font-weight: 600; }
            tr:nth-child(even) { background-color: #f8f9fa; }
            a { color: #007bff; text-decoration: none; }
            .alert-box { border-left-width: 4px; border-radius: 4px; padding: 20px; margin: 20px 0; }
            .alert-danger { background-color: #f8d7da; border-left-color: #f5c6cb; color: #721c24; }
            .alert-danger h2 { color: #721c24; }
            .alert-info { background-color: #cce5ff; border-left-color: #b8daff; color: #004085; }
            .alert-info h2 { color: #004085; }
            .card { border: 1px solid #dee2e6; border-radius: 8px; margin-bottom: 20px; background-color: #ffffff; }
            .card-header { padding: 15px; border-bottom: 1px solid #dee2e6; background-color: #f8f9fa; }
            .card-body { padding: 20px; }
            .judge-verdict { border-left: 4px solid #17a2b8; padding-left: 15px; font-style: italic; color: #495057; }
            .verdict-positive { color: #28a745; font-weight: 600; }
            .verdict-negative { color: #dc3545; font-weight: 600; }
            .dashboard { table-layout: fixed; }
            .dashboard th { width: 30%; background-color: #f8f9fa; }
            .appendix-section { margin-top: 50px; padding-top: 30px; border-top: 2px solid #adb5bd;}
        </style>
    </head>
    <body>
        <div class="container">${bodyContent}</div>
    </body>
    </html>`
}

```

## 📄 src/modules/notifications/emailDispatcher.js
*Lines: 135, Size: 4.31 KB*

```javascript
// apps/pipeline/src/modules/notifications/emailDispatcher.js
import { groupItemsByCountry, getCountryFlag } from '@headlines/utils-shared'
import { logger, auditLogger } from '@headlines/utils-server'
import { createPersonalizedEmailBody } from '../email/components/emailBodyBuilder.js'
import { sendGenericEmail as sendWealthEventsEmail } from '@headlines/utils-server'
import {
  emailSubjectChain,
  emailIntroChain,
  translateChain,
} from '@headlines/ai-services'

export async function sendBulkEmails(emailQueue) {
  if (emailQueue.length === 0) return 0

  const isDryRun = process.env.DRY_RUN === 'true'
  if (isDryRun) {
    logger.warn(
      'DRY RUN MODE: Email dispatch is being simulated. No actual emails will be sent.'
    )
    let simulatedSuccessCount = 0
    for (const { user, events } of emailQueue) {
      if (events && events.length > 0) {
        logger.info(
          `[DRY RUN] Would have sent ${user.language} email to ${user.email} with ${events.length} events.`
        )
        simulatedSuccessCount++
      }
    }
    return simulatedSuccessCount
  }

  logger.info(
    `Dispatching ${emailQueue.length} personalized emails with AI-powered copy...`
  )
  let successCount = 0

  for (const { user, events, opportunities } of emailQueue) {
    try {
      if (!events || events.length === 0) {
        logger.info(`Skipping email for ${user.email} as it contained no valid events.`)
        continue
      }

      const eventsByCountry = groupItemsByCountry(events, 'country')
      const primaryCountry = Object.keys(eventsByCountry)[0]
      const countryFlag = getCountryFlag(primaryCountry)

      const eventPayloadForAI = events.map((e) => ({
        headline: e.synthesized_headline,
        summary: e.synthesized_summary,
      }))

      const [subjectResult, introResult] = await Promise.all([
        emailSubjectChain({
          events_json_string: JSON.stringify(eventPayloadForAI),
        }),
        emailIntroChain({
          payload_json_string: JSON.stringify({
            firstName: user.firstName,
            events: eventPayloadForAI,
          }),
        }),
      ])

      const aiSubject = subjectResult.subject_headline || 'Key Developments'

      const aiIntro = introResult.error
        ? {
            greeting: `Dear ${user.firstName},`,
            body: 'Here are the latest relevant wealth events we have identified for your review.',
            bullets: events
              .slice(0, 2)
              .map(
                (e) =>
                  `A key development regarding ${e.synthesized_headline.substring(0, 40)}...`
              ),
            signoff: 'We wish you a fruitful day!\\n\\nThe team at Wealth Watch',
          }
        : introResult

      const subject = `${countryFlag} Wealth News (${events.length}): ${aiSubject}`

      const htmlBody = await createPersonalizedEmailBody(
        user,
        eventsByCountry,
        subject,
        aiIntro
      )

      if (!htmlBody) {
        logger.error(`Failed to generate email body for ${user.email}. Skipping.`)
        continue
      }

      let finalHtmlBody = htmlBody
      const targetLanguage = user.language || 'English'

      if (targetLanguage !== 'English') {
        logger.info(`Translating email for ${user.email} into ${targetLanguage}...`)
        const translationResult = await translateChain({
          language: targetLanguage,
          html_content: htmlBody,
        })
        if (translationResult.error) {
          logger.error(
            { err: translationResult.error, user: user.email },
            `AI translation to ${targetLanguage} failed. Sending in English as a fallback.`
          )
        } else {
          finalHtmlBody = translationResult.translated_html
          logger.info(`Successfully translated email for ${user.email}.`)
        }
      }

      auditLogger.info(
        { context: { recipient: user.email, subject, event_count: events.length } },
        'Preparing to Send User Email'
      )
      const wasSent = await sendWealthEventsEmail({
        to: user.email,
        subject,
        html: finalHtmlBody,
      })
      if (wasSent) successCount++
    } catch (error) {
      logger.error(
        { err: error, user: user.email },
        'A critical, unhandled error occurred during the email dispatch loop for a user. Skipping this user.'
      )
    }
  }

  return successCount
}

```

## 📄 src/modules/notifications/index.js
*Lines: 127, Size: 4.12 KB*

```javascript
// File: apps/pipeline/src/modules/notifications/index.js

import { groupItemsByCountry } from '@headlines/utils-shared'
import { logger } from '@headlines/utils-server/node'
import { Subscriber, PushSubscription } from '@headlines/models'
import { sendBulkEmails } from './emailDispatcher.js'
import { sendBulkPushNotifications } from './pushService.js'

export async function sendNotifications(newEvents, newOpportunities = []) {
  logger.info(
    `📧 Starting personalized notification dispatch for ${newEvents.length} events and ${newOpportunities.length} opportunities.`
  )

  const [activeSubscribers, allPushSubscriptions] = await Promise.all([
    Subscriber.find({ isActive: true }).lean(),
    PushSubscription.find().lean(),
  ])

  if (activeSubscribers.length === 0) {
    logger.info('No active subscribers found. Skipping notification dispatch.')
    return { emailSentCount: 0, pushSentCount: 0 }
  }

  const pushSubsByUserId = allPushSubscriptions.reduce((acc, sub) => {
    if (!sub.subscriberId) return acc
    const userId = sub.subscriberId.toString()
    if (!acc[userId]) acc[userId] = []
    acc[userId].push(sub)
    return acc
  }, {})

  const eventsByCountry = groupItemsByCountry(newEvents, 'country')
  const opportunitiesByCountry = groupItemsByCountry(newOpportunities, 'basedIn')

  const emailQueue = []
  const pushQueue = []

  for (const user of activeSubscribers) {
    let userEvents = []
    let userOpportunities = []

    // --- START OF THE FIX ---
    if (user.role === 'admin') {
      // If the user is an admin, they get all events and opportunities.
      userEvents = newEvents
      userOpportunities = newOpportunities
      logger.trace(`Admin user ${user.email} is subscribed to all items.`)
    } else {
      // For regular users, filter based on their country subscriptions.
      const userCountries = new Set(
        (user.countries || []).filter((c) => c.active).map((c) => c.name)
      )

      // The original bug was here: this would skip admins. Now it only skips users with no subscriptions.
      if (userCountries.size === 0) continue

      userEvents = filterItemsForUser(eventsByCountry, userCountries)
      userOpportunities = filterItemsForUser(opportunitiesByCountry, userCountries)
    }
    // --- END OF THE FIX ---

    if (userEvents.length === 0 && userOpportunities.length === 0) continue

    if (user.emailNotificationsEnabled && userEvents.length > 0) {
      emailQueue.push({ user, events: userEvents, opportunities: userOpportunities })
    }

    const userPushSubs = pushSubsByUserId[user._id.toString()] || []
    if (user.pushNotificationsEnabled && userPushSubs.length > 0) {
      pushQueue.push({
        subscriptions: userPushSubs,
        events: userEvents,
        opportunities: userOpportunities,
      })
    }
  }

  if (emailQueue.length === 0 && pushQueue.length === 0) {
    logger.warn(
      'No users were subscribed to the countries of the generated events. No notifications will be sent.'
    )
    return { emailSentCount: 0, pushSentCount: 0 }
  }

  const [emailSentCount, pushSentCount] = await Promise.all([
    sendBulkEmails(emailQueue),
    sendBulkPushNotifications(pushQueue),
  ])

  if (emailSentCount > 0) {
    const bulkOps = emailQueue.map(({ user, events }) => ({
      updateOne: {
        filter: { _id: user._id },
        update: {
          $inc: {
            emailSentCount: 1,
            eventsReceivedCount: events.length,
          },
        },
      },
    }))
    try {
      await Subscriber.bulkWrite(bulkOps)
      logger.info(
        `Successfully updated engagement counters for ${bulkOps.length} subscribers.`
      )
    } catch (error) {
      logger.error({ err: error }, 'Failed to update subscriber engagement counters.')
    }
  }

  logger.info(
    `✅ Notification dispatch complete. Emails Sent: ${emailSentCount}, Push Notifications Sent: ${pushSentCount}.`
  )
  return { emailSentCount, pushSentCount }
}

function filterItemsForUser(itemsByCountry, userCountries) {
  const userItems = []
  for (const country of userCountries) {
    if (itemsByCountry[country]) {
      userItems.push(...itemsByCountry[country])
    }
  }
  return userItems
}

```

## 📄 src/modules/notifications/pushService.js
*Lines: 77, Size: 2.48 KB*

```javascript
// apps/pipeline/src/modules/notifications/pushService.js (version 3.0.0)
import { logger } from '@headlines/utils-server'
import { PushSubscription } from '@headlines/models'
import { webpush, isPushConfigured } from '@headlines/scraper-logic/push/client.js'

function createPushPayload(events, opportunities) {
  let title = 'New Intelligence Alert'
  let body = ''
  let url = '/events' // Default URL

  const eventCount = events.length
  const oppCount = opportunities.length

  if (eventCount > 0 && oppCount > 0) {
    title = `${eventCount} New Event(s), ${oppCount} New Opportunity/ies`
    body = `Primary Event: ${events[0].synthesized_headline}`
    url = `/events`
  } else if (eventCount > 0) {
    title = `${eventCount} New Wealth Event(s) Detected`
    body = events[0].synthesized_headline
    url = `/events`
  } else if (oppCount > 0) {
    title = `${oppCount} New Opportunity/ies Identified`
    body = `New contact: ${opportunities[0].reachOutTo} (~$${opportunities[0].likelyMMDollarWealth}M)`
    url = `/opportunities`
  }

  return {
    title,
    body,
    url,
    icon: '/icons/icon-192x192.png',
  }
}

export async function sendBulkPushNotifications(pushQueue) {
  if (!isPushConfigured || pushQueue.length === 0) {
    return 0
  }

  logger.info(`Dispatching push notifications to ${pushQueue.length} user group(s)...`)
  let successCount = 0

  const allPromises = []

  for (const { subscriptions, events, opportunities } of pushQueue) {
    const payload = createPushPayload(events, opportunities)
    const notificationPayload = JSON.stringify(payload)

    for (const subscription of subscriptions) {
      const pushPromise = webpush
        .sendNotification(subscription, notificationPayload)
        .then(() => {
          successCount++
          logger.info(`✅ Pushed to endpoint for user ${subscription.subscriberId}`)
        })
        .catch((error) => {
          if (error.statusCode === 410 || error.statusCode === 404) {
            logger.info(
              `Subscription expired or invalid for endpoint. Deleting: ${subscription.endpoint}`
            )
            return PushSubscription.deleteOne({ _id: subscription._id })
          } else {
            logger.error(
              { err: { message: error.message, statusCode: error.statusCode } },
              `Failed to send push notification to user ${subscription.subscriberId}`
            )
          }
        })
      allPromises.push(pushPromise)
    }
  }

  await Promise.all(allPromises)
  return successCount
}

```

## 📄 src/orchestrator.js
*Lines: 149, Size: 5.3 KB*

```javascript
// apps/pipeline/src/orchestrator.js
import { logger } from '@headlines/utils-server'
import { tokenTracker, apiCallTracker } from '@headlines/utils-server'
import { logFinalReport } from './utils/pipelineLogger.js'
import { runPreFlightChecks } from './pipeline/1_preflight.js'
import { runScrapeAndFilter } from './pipeline/2_scrapeAndFilter.js'
import { runAssessAndEnrich } from './pipeline/3_assessAndEnrich.js'
import { runClusterAndSynthesize } from './pipeline/4_clusterAndSynthesize.js'
import { runCommitAndNotify } from './pipeline/5_commitAndNotify.js'
import { suggestNewWatchlistEntities } from './pipeline/6_suggestNewWatchlistEntities.js'
import { runSelfHealAndOptimize } from './pipeline/7_selfHealAndOptimize.js'
import { updateSourceAnalytics } from './pipeline/submodules/commit/4_updateSourceAnalytics.js'
import { settings } from '@headlines/config'
import { RunVerdict } from '@headlines/models'

async function saveRunVerdict(payload, duration) {
  if (payload.dbConnection && !payload.noCommitMode && !payload.useTestPayload) {
    try {
      const runVerdict = new RunVerdict({
        runStats: payload.runStats,
        judgeVerdict: payload.runStats.judgeVerdict || {},
        generatedEvents: (payload.savedEvents || []).map((e) => e._id),
        generatedOpportunities: (payload.savedOpportunities || []).map((o) => o._id),
        duration_seconds: duration,
        cost_summary: {
          tokens: payload.runStats.tokenUsage,
          apis: payload.runStats.apiCalls,
        },
      })
      await runVerdict.save()
    } catch (error) {
      logger.error({ err: error }, 'Failed to save the run verdict.')
      payload.runStats.errors.push('VERDICT_SAVE_FAILED: ' + error.message)
    }
  }
}

export async function runPipeline(options) {
  const runStartTime = Date.now()
  let success = true

  apiCallTracker.reset()

  let currentPayload = {
    ...options,
    runStats: {
      headlinesScraped: 0,
      scraperHealth: [],
      validatedHeadlines: 0,
      freshHeadlinesFound: 0,
      headlinesAssessed: 0,
      relevantHeadlines: 0,
      articlesEnriched: 0,
      relevantArticles: 0,
      eventsClustered: 0,
      eventsSynthesized: 0,
      synthesizedEventsForReport: [],
      enrichmentOutcomes: [],
      judgeVerdict: null,
      eventsEmailed: 0,
      errors: [],
      tokenUsage: {},
      apiCalls: {},
    },
    dbConnection: false,
  }

  try {
    // DEFINITIVE FIX: Add the log message for Stage 1 here.
    logger.info('--- STAGE 1: PRE-FLIGHT CHECKS ---')
    const preflight = await runPreFlightChecks(currentPayload)
    if (!preflight.success) {
      success = false
      currentPayload.runStats.errors.push('Preflight checks failed.')
      return { success, payload: currentPayload }
    }
    currentPayload = preflight.payload

    tokenTracker.initializeModels([
      settings.LLM_MODEL_HEADLINE_ASSESSMENT,
      settings.LLM_MODEL_ARTICLE_ASSESSMENT,
      settings.LLM_MODEL_SYNTHESIS,
      settings.LLM_MODEL_UTILITY,
    ])

    if (options.useTestPayload) {
      logger.warn('--- USING TEST PAYLOAD ---')
      const { testArticles } = await import('../scripts/test-pipeline/test-payload.js')
      currentPayload.articlesForPipeline = testArticles
      currentPayload.runStats.freshHeadlinesFound = testArticles.length
    } else {
      const scrape = await runScrapeAndFilter(currentPayload)
      currentPayload = scrape.payload
    }

    if (
      currentPayload.articlesForPipeline &&
      currentPayload.articlesForPipeline.length > 0
    ) {
      const assess = await runAssessAndEnrich(currentPayload)
      currentPayload = assess.payload
      if (currentPayload.enrichedArticles && currentPayload.enrichedArticles.length > 0) {
        const synthesize = await runClusterAndSynthesize(currentPayload)
        currentPayload = synthesize.payload
      }
    } else {
      logger.info('No fresh articles to process. Skipping AI analysis stages.')
    }

    currentPayload.runStats.tokenUsage = tokenTracker.getStats()
    currentPayload.runStats.apiCalls = apiCallTracker.getStats()

    if (!options.useTestPayload) {
      await updateSourceAnalytics(currentPayload)

      if (
        currentPayload.synthesizedEvents &&
        currentPayload.synthesizedEvents.length > 0
      ) {
        const commit = await runCommitAndNotify(currentPayload)
        currentPayload = commit.payload
        await suggestNewWatchlistEntities(currentPayload)
      } else {
        logger.info(
          'No new events were synthesized. Skipping commit and notification stages, but sending a supervisor report.'
        )
        const { sendSupervisorReportEmail } = await import('./modules/email/index.js')
        await sendSupervisorReportEmail(currentPayload.runStats)
      }
    }
  } catch (error) {
    success = false
    logger.fatal(
      { err: error },
      'A critical, unhandled error occurred in the orchestrator.'
    )
    currentPayload.runStats.errors.push(`ORCHESTRATOR_FATAL: ${error.message}`)
  } finally {
    const runEndTime = Date.now()
    const durationInSeconds = (runEndTime - runStartTime) / 1000
    currentPayload.runStats.tokenUsage = tokenTracker.getStats()
    currentPayload.runStats.apiCalls = apiCallTracker.getStats()

    await saveRunVerdict(currentPayload, durationInSeconds)
    await logFinalReport(currentPayload.runStats, durationInSeconds)
  }
  return { success }
}

```

## 📄 src/pipeline/1_preflight.js
*Lines: 53, Size: 1.91 KB*

```javascript
// apps/pipeline/src/pipeline/1_preflight.js
import { logger } from '@headlines/utils-server'
import { configure as configureScraperLogic } from '@headlines/scraper-logic/config.js'
import { env, initializeSettings, settings } from '@headlines/config'
import { refreshConfig, configStore } from '../config/dynamicConfig.js'
import dbConnect from '@headlines/data-access/dbConnect.js'
import { deleteTodaysDocuments } from '../../scripts/maintenance/delete-today.js'
import * as aiServices from '@headlines/ai-services'
import { performDatabaseHousekeeping } from '../utils/housekeeping.js'
import { configurePush } from '@headlines/scraper-logic/push/client.js'
import { configurePusher } from '@headlines/utils-server'
import { testRedisConnection } from '@headlines/utils-server'

export async function runPreFlightChecks(pipelinePayload) {
  logger.info('--- STAGE 1: PRE-FLIGHT CHECKS ---')
  await dbConnect()
  pipelinePayload.dbConnection = true

  if (pipelinePayload.deleteToday) {
    logger.warn('--- DELETE TODAY MODE ENABLED ---')
    await deleteTodaysDocuments(true)
  }

  await initializeSettings()
  await refreshConfig()

  configurePush()
  configurePusher()

  if (!(await testRedisConnection(env))) {
    logger.fatal('Redis pre-flight check failed. Aborting pipeline.')
    return { success: false }
  }

  const utilityFunctions = {
    findAlternativeSources: aiServices.findAlternativeSources,
    findNewsApiArticlesForEvent: aiServices.findNewsApiArticlesForEvent,
    performGoogleSearch: aiServices.performGoogleSearch,
    fetchWikipediaSummary: aiServices.fetchWikipediaSummary,
  }

  configureScraperLogic({ ...env, configStore, utilityFunctions, logger, settings })

  if (!(await aiServices.performAiSanityCheck(settings))) {
    logger.fatal('AI service checks failed. Aborting pipeline.')
    return { success: false }
  }

  await performDatabaseHousekeeping()

  return { success: true, payload: pipelinePayload }
}

```

## 📄 src/pipeline/2_scrapeAndFilter.js
*Lines: 239, Size: 7.53 KB*

```javascript
// apps/pipeline/src/pipeline/2_scrapeAndFilter.js
import { logger, auditLogger } from '@headlines/utils-server'
import { filterFreshArticles } from '../modules/dataStore/index.js'
import { Source, Article } from '@headlines/models'
import {
  scrapeSiteForHeadlines,
  scrapeArticleContent,
} from '@headlines/scraper-logic/scraper/index.js'
import mongoose from 'mongoose'
import { env, settings } from '@headlines/config'
import pLimit from 'p-limit'

async function performContentPreflight(source, articles) {
  if (!articles || articles.length === 0)
    return { success: false, reason: 'No headlines to test' }

  const firstArticle = {
    ...articles[0],
    source: source.name,
    newspaper: source.name,
    country: source.country,
  }
  const contentResult = await scrapeArticleContent(firstArticle, source)
  const content = contentResult.articleContent?.contents?.join('')

  if (!content || content.length < settings.MIN_ARTICLE_CHARS) {
    const reason = !content
      ? contentResult.enrichment_error
      : `Content too short (${content.length} < ${settings.MIN_ARTICLE_CHARS} chars).`
    logger.warn(`[Content Pre-flight] ❌ FAILED for "${source.name}". Reason: ${reason}`)
    return { success: false, reason }
  }

  logger.info(`✅ Content pre-flight check PASSED for "${source.name}".`)
  return { success: true }
}

async function performStandardScraping(sourcesToScrape) {
  if (sourcesToScrape.length === 0) {
    return { allArticles: [], scraperHealth: [] }
  }

  const limit = pLimit(env.CONCURRENCY_LIMIT || 3)
  logger.info(
    `Pipeline will now scrape ${sourcesToScrape.length} active standard sources.`
  )

  const allArticles = []
  const scraperHealth = []

  const promises = sourcesToScrape.map((source) =>
    limit(async () => {
      logger.info(`[Scraping] -> Starting scrape for "${source.name}"...`)
      const result = await scrapeSiteForHeadlines(source)
      const foundCount = result.resultCount !== undefined ? result.resultCount : 0
      logger.info(
        `[Scraping] <- Finished scrape for "${source.name}". Success: ${result.success}, Found: ${foundCount}`
      )

      const healthReport = {
        source: source.name,
        success: result.success && result.resultCount > 0,
        count: result.resultCount || 0,
        error: result.error,
      }
      scraperHealth.push(healthReport)

      if (healthReport.success) {
        const articlesWithMetadata = result.articles.map((a) => ({
          ...a,
          source: source.name,
          newspaper: source.name,
          country: source.country,
        }))
        allArticles.push(...articlesWithMetadata)
      } else {
        logger.warn(
          `[Scraping] ❌ FAILED for "${source.name}": ${result.error || 'Extracted 0 headlines.'}.`
        )
      }
    })
  )

  await Promise.all(promises)
  return { allArticles, scraperHealth }
}

export async function runScrapeAndFilter(pipelinePayload) {
  logger.info('--- STAGE 2: SCRAPE & FILTER ---')
  const { runStats } = pipelinePayload

  const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000)

  const baseQuery = {
    status: 'active',
    $or: [
      { scrapeFrequency: 'high' },
      { scrapeFrequency: 'low', lastScrapedAt: { $lt: twentyFourHoursAgo } },
      { scrapeFrequency: 'low', lastScrapedAt: { $exists: false } },
    ],
  }

  const queryCriteria = { ...baseQuery }

  if (pipelinePayload.countryFilter) {
    queryCriteria.country = new RegExp(`^${pipelinePayload.countryFilter}$`, 'i')
    delete queryCriteria.$or
  }
  // --- DEFINITIVE FIX: Change the source filter from an exact match to a "contains" match ---
  if (pipelinePayload.sourceFilter) {
    // This allows you to run "--source Berlingske" and it will match "Berlingske Business"
    queryCriteria.name = new RegExp(pipelinePayload.sourceFilter, 'i')
    delete queryCriteria.$or
  }
  // --- END FIX ---

  const sourcesToScrape = await Source.find(queryCriteria).lean()
  if (sourcesToScrape.length === 0) {
    logger.warn(
      `No active sources found matching filter: ${JSON.stringify(queryCriteria)}. Ending run.`
    )
    return { success: true, payload: { ...pipelinePayload, articlesForPipeline: [] } }
  }

  const { allArticles, scraperHealth } = await performStandardScraping(sourcesToScrape)
  runStats.scraperHealth = scraperHealth
  auditLogger.info(
    {
      context: {
        all_scraped_headlines: allArticles.map((a) => ({
          headline: a.headline,
          source: a.newspaper,
        })),
      },
    },
    'All Scraped Headlines'
  )

  const freshArticles = await filterFreshArticles(
    allArticles,
    pipelinePayload.isRefreshMode
  )
  auditLogger.info(
    { context: { fresh_headlines: freshArticles.map((a) => a.headline) } },
    'Fresh Headlines After Filtering'
  )

  const freshArticlesBySource = freshArticles.reduce((acc, article) => {
    if (!acc[article.source]) acc[article.source] = []
    acc[article.source].push(article)
    return acc
  }, {})

  const sourcesWithFreshContent = new Set(Object.keys(freshArticlesBySource))
  logger.info(
    `Found ${sourcesWithFreshContent.size} sources with fresh content that require a content pre-flight check.`
  )

  let validatedArticles = []
  const analyticsUpdateOps = []

  for (const sourceName of sourcesWithFreshContent) {
    const source = sourcesToScrape.find((s) => s.name === sourceName)
    const healthReport = scraperHealth.find((h) => h.source === sourceName)

    if (source && healthReport && healthReport.success) {
      const contentCheck = await performContentPreflight(
        source,
        freshArticlesBySource[sourceName]
      )
      if (contentCheck.success) {
        validatedArticles.push(...freshArticlesBySource[sourceName])
        analyticsUpdateOps.push({
          updateOne: {
            filter: { _id: source._id },
            update: { $set: { 'analytics.lastRunContentSuccess': true } },
          },
        })
      } else {
        analyticsUpdateOps.push({
          updateOne: {
            filter: { _id: source._id },
            update: { $set: { 'analytics.lastRunContentSuccess': false } },
          },
        })
      }
    }
  }

  if (analyticsUpdateOps.length > 0) {
    await Source.bulkWrite(analyticsUpdateOps)
  }

  runStats.headlinesScraped = allArticles.length
  runStats.validatedHeadlines = validatedArticles.length
  runStats.freshHeadlinesFound = validatedArticles.length

  if (validatedArticles.length > 0) {
    const bulkOps = validatedArticles.map((article) => ({
      updateOne: {
        filter: { link: article.link },
        update: {
          $setOnInsert: {
            _id: new mongoose.Types.ObjectId(),
            headline: article.headline,
            newspaper: article.newspaper,
            source: article.source,
            country: article.country,
            status: 'scraped',
          },
        },
        upsert: true,
      },
    }))

    const result = await Article.bulkWrite(bulkOps, { ordered: false })
    if (result.hasWriteErrors()) {
      logger.warn(
        { details: result.getWriteErrors() },
        'Non-fatal errors occurred during bulk article save.'
      )
    }

    logger.info(
      `Successfully saved/upserted ${validatedArticles.length} fresh & validated articles to the database.`
    )

    const savedArticleLinks = validatedArticles.map((a) => a.link)
    pipelinePayload.articlesForPipeline = await Article.find({
      link: { $in: savedArticleLinks },
    }).lean()
  } else {
    logger.info('No new, validated articles to process. Ending run early.')
    pipelinePayload.articlesForPipeline = []
  }

  return { success: true, payload: pipelinePayload }
}

```

## 📄 src/pipeline/3_assessAndEnrich.js
*Lines: 280, Size: 9.48 KB*

```javascript
import { truncateString, sleep } from '@headlines/utils-shared'
import { logger } from '@headlines/utils-server/node'
import { settings } from '@headlines/config/node'
import { Article, WatchlistEntity } from '@headlines/models'
import { batchHeadlineChain } from '@headlines/ai-services/node'
import { processSingleArticle } from './submodules/processSingleArticle.js'
import pLimit from 'p-limit'
import { env } from '@headlines/config/node'

const BATCH_SIZE = 8
const MAX_RETRIES = 1

async function withRetry(fn, retries = MAX_RETRIES) {
  for (let i = 0; i <= retries; i++) {
    try {
      return await fn()
    } catch (error) {
      if (i === retries) {
        throw error
      }
      logger.warn(
        `Operation failed. Retrying in 2 seconds... (Attempt ${i + 1}/${retries})`
      )
      await sleep(2000)
    }
  }
}

function findWatchlistHits(text, country, watchlistEntities) {
  const hits = new Map()
  const lowerText = text.toLowerCase()

  const createSearchRegex = (term) =>
    new RegExp(`\\b${term.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')}\\b`, 'i')

  const relevantEntities = watchlistEntities.filter(
    (entity) =>
      !entity.country ||
      entity.country === country ||
      entity.country === 'Global PE' ||
      entity.country === 'M&A Aggregators'
  )

  for (const entity of relevantEntities) {
    const terms = [entity.name.toLowerCase(), ...(entity.searchTerms || [])]
      .map((t) => t.trim())
      .filter(Boolean)
    for (const term of terms) {
      if (term.length > 3 && createSearchRegex(term).test(lowerText)) {
        if (!hits.has(entity.name)) hits.set(entity.name, { entity, matchedTerm: term })
      }
    }
  }
  return Array.from(hits.values())
}

export async function runAssessAndEnrich(pipelinePayload) {
  logger.info('--- STAGE 3: ASSESS & ENRICH ---')
  const { runStats, articlesForPipeline } = pipelinePayload

  if (!articlesForPipeline || articlesForPipeline.length === 0) {
    pipelinePayload.enrichedArticles = []
    return { success: true, payload: pipelinePayload }
  }

  const watchlistEntities = await WatchlistEntity.find({ status: 'active' }).lean()

  const syntheticArticles = articlesForPipeline.filter(
    (a) => a.source === 'Richlist Ingestion'
  )
  const realArticles = articlesForPipeline.filter(
    (a) => a.source !== 'Richlist Ingestion'
  )

  logger.info(
    `Processing ${realArticles.length} real articles and ${syntheticArticles.length} synthetic articles.`
  )

  let assessedCandidates = []

  if (realArticles.length > 0) {
    logger.info(
      `Assessing ${realArticles.length} real headlines in batches of ${BATCH_SIZE}...`
    )
    const batches = []
    for (let i = 0; i < realArticles.length; i += BATCH_SIZE) {
      batches.push(realArticles.slice(i, i + BATCH_SIZE))
    }

    for (const [index, batch] of batches.entries()) {
      logger.info(`Assessing batch ${index + 1} of ${batches.length}...`)
      try {
        const batchProcessor = async () => {
          const batchWithContext = batch.map((article) => {
            const hits = findWatchlistHits(
              article.headline,
              article.country,
              watchlistEntities
            )
            let headlineWithContext = `[COUNTRY CONTEXT: ${article.country}] ${article.headline}`
            if (hits.length > 0) {
              const hitStrings = hits
                .map(
                  (hit) =>
                    `[WATCHLIST HIT: ${hit.entity.name} (matched on '${hit.matchedTerm}')]`
                )
                .join(' ')
              headlineWithContext = `${hitStrings} ${headlineWithContext}`
            }
            return { ...article, headlineWithContext, hits } // Pass hits through
          })

          const response = await batchHeadlineChain({
            headlines_json_string: JSON.stringify(
              batchWithContext.map((a) => a.headlineWithContext)
            ),
          })

          if (
            response.error ||
            !response.assessments ||
            response.assessments.length !== batch.length
          ) {
            throw new Error('Batch assessment failed or returned mismatched count.')
          }

          const batchResults = batchWithContext.map((originalArticle, i) => {
            const assessment = response.assessments[i]
            if (originalArticle.hits.length > 0) {
              let score = assessment.relevance_headline
              score = Math.min(100, score + settings.WATCHLIST_SCORE_BOOST)
              assessment.assessment_headline = `Watchlist boost (+${settings.WATCHLIST_SCORE_BOOST}). ${assessment.assessment_headline}`
              assessment.relevance_headline = score
            }
            return { ...originalArticle, ...assessment }
          })
          return batchResults
        }

        const results = await withRetry(batchProcessor)
        assessedCandidates.push(...results)
      } catch (batchError) {
        logger.error(
          { err: batchError },
          `Batch ${index + 1} failed after all retries. FALLING BACK to single-article assessment.`
        )
        const fallbackPromises = batch.map((article) => {
          const hits = findWatchlistHits(
            article.headline,
            article.country,
            watchlistEntities
          )
          return processSingleArticle(article, hits)
        })
        const fallbackResults = await Promise.all(fallbackPromises)

        fallbackResults.forEach((result, i) => {
          const originalArticle = batch[i]
          if (result.article) {
            assessedCandidates.push({ ...originalArticle, ...result.article })
          } else {
            assessedCandidates.push({
              ...originalArticle,
              relevance_headline: 0,
              assessment_headline: result.lifecycleEvent.reason,
            })
          }
        })
      }
    }
  }

  runStats.headlinesAssessed = assessedCandidates.length

  logger.info('--- Headline Assessment Complete ---')
  assessedCandidates.forEach((article) => {
    const status =
      article.relevance_headline >= settings.HEADLINES_RELEVANCE_THRESHOLD
        ? 'PASSED'
        : 'DROPPED'
    const color = status === 'PASSED' ? '\x1b[32m' : '\x1b[90m'
    logger.info(
      `${color}[${status.padEnd(7)}] [Score: ${String(article.relevance_headline).padStart(3)}] "${truncateString(article.headline, 60)}" (${article.assessment_headline})\x1b[0m`
    )
  })

  const relevantCandidates = assessedCandidates.filter(
    (a) => a.relevance_headline >= settings.HEADLINES_RELEVANCE_THRESHOLD
  )
  runStats.relevantHeadlines = relevantCandidates.length

  const enrichmentQueue = [...relevantCandidates, ...syntheticArticles]

  logger.info(
    `Found ${relevantCandidates.length} relevant headlines. Total for full enrichment (including synthetic): ${enrichmentQueue.length}.`
  )
  if (enrichmentQueue.length === 0) {
    pipelinePayload.enrichedArticles = []
    return { success: true, payload: pipelinePayload }
  }

  const limit = pLimit(env.CONCURRENCY_LIMIT)
  const processingPromises = enrichmentQueue.map((article) =>
    limit(() => {
      // Pass the hits we already calculated in the batch stage (or calculate if synthetic)
      const hits =
        article.hits ||
        findWatchlistHits(article.headline, article.country, watchlistEntities)
      return processSingleArticle(article, hits)
    })
  )
  const results = await Promise.all(processingPromises)

  const enrichedArticles = []
  const articleUpdates = []
  runStats.enrichmentOutcomes = []

  logger.info('--- Full Article Enrichment Results ---')
  results.forEach((result, index) => {
    const originalArticle = enrichmentQueue[index]
    const finalArticleState = {
      ...originalArticle,
      ...(result.article || {}),
      pipeline_lifecycle: [
        ...(originalArticle.pipeline_lifecycle || []),
        result.lifecycleEvent,
      ],
    }
    const outcome = result.lifecycleEvent.status

    runStats.enrichmentOutcomes.push({
      link: finalArticleState.link,
      headline: finalArticleState.headline,
      newspaper: finalArticleState.newspaper,
      headlineScore: finalArticleState.relevance_headline,
      assessment_headline: finalArticleState.assessment_headline,
      finalScore: finalArticleState.relevance_article,
      assessment_article: finalArticleState.assessment_article,
      content_snippet: truncateString(result.contentPreview, 200),
      outcome: outcome,
      reason: result.lifecycleEvent.reason,
    })

    if (outcome === 'success') {
      enrichedArticles.push(finalArticleState)
      logger.info(
        `✅ [SUCCESS] "${truncateString(originalArticle.headline, 60)}" - Final Score: ${finalArticleState.relevance_article}`
      )
    } else {
      logger.warn(
        `❌ [${outcome.toUpperCase()}] "${truncateString(originalArticle.headline, 60)}" - Reason: ${result.lifecycleEvent.reason}`
      )
    }

    if (result.article || result.lifecycleEvent) {
      articleUpdates.push({
        updateOne: {
          filter: { _id: originalArticle._id },
          update: { $set: finalArticleState },
        },
      })
    }
  })

  if (articleUpdates.length > 0) {
    await Article.bulkWrite(articleUpdates, { ordered: false })
  }

  runStats.articlesEnriched = enrichedArticles.length
  runStats.relevantArticles = enrichedArticles.length

  logger.info(
    `Enrichment complete. Successfully enriched ${enrichedArticles.length} of ${enrichmentQueue.length} candidates.`
  )
  pipelinePayload.enrichedArticles = enrichedArticles
  pipelinePayload.assessedCandidates = assessedCandidates

  return { success: true, payload: pipelinePayload }
}

```

## 📄 src/pipeline/4_clusterAndSynthesize.js
*Lines: 217, Size: 7.75 KB*

```javascript
// apps/pipeline/src/pipeline/4_clusterAndSynthesize.js
import { truncateString } from '@headlines/utils-shared'
import { logger, auditLogger } from '@headlines/utils-server'
import {
  clusteringChain,
  synthesisChain,
  entityExtractorChain,
  opportunityChain,
  findSimilarArticles,
} from '@headlines/ai-services'
import { settings } from '@headlines/config'
import { getConfig } from '@headlines/scraper-logic/config.js'

async function synthesizeEventsFromCluster(articlesInCluster, clusterKey, runStats) {
  const config = getConfig()
  const primaryHeadline = articlesInCluster[0]?.headline || clusterKey
  const primaryCountry = articlesInCluster[0]?.country || 'Unknown'
  logger.info(
    `--- [ Synthesizing from Cluster: "${truncateString(primaryHeadline, 60)}" ] ---`
  )

  const uniqueArticlesInCluster = Array.from(
    new Map(articlesInCluster.map((a) => [a.link, a])).values()
  )
  const combinedText = uniqueArticlesInCluster
    .map((a) => `${a.headline}\n${a.assessment_article}`)
    .join('\n\n')

  const entityResult = await entityExtractorChain({ article_text: combinedText })
  const entities = entityResult.entities || []

  const historicalContext = await findSimilarArticles(entities.join(', '))
  const [wikiResults, newsApiResult] = await Promise.all([
    entities.length > 0
      ? Promise.all(entities.map((e) => config.utilityFunctions.fetchWikipediaSummary(e)))
      : Promise.resolve([]),
    config.utilityFunctions.findNewsApiArticlesForEvent(primaryHeadline),
  ])

  const enrichmentSources = []
  if (historicalContext.length > 0) enrichmentSources.push('rag_db')
  if (wikiResults.some((r) => r.success)) enrichmentSources.push('wikipedia')
  if (newsApiResult.success) enrichmentSources.push('news_api')

  const wikipediaContext =
    wikiResults
      .filter((r) => r.success)
      .map((r) => r.summary)
      .join('\n---\n') || 'Not available.'
  const newsApiContext = newsApiResult.snippets

  const synthesisInput = {
    SOURCE_COUNTRY_CONTEXT: `The source newspaper for this event is from ${primaryCountry}. Prioritize this as the event's country unless the text explicitly states otherwise.`,
    "[ TODAY'S NEWS ]": uniqueArticlesInCluster.map((a) => ({
      headline: a.headline,
      source: a.newspaper,
      full_text: a.assessment_article,
      key_individuals: a.key_individuals || [],
    })),
    '[ HISTORICAL CONTEXT (Internal Database) ]': historicalContext,
    '[ PUBLIC WIKIPEDIA CONTEXT ]': wikipediaContext,
    '[ LATEST NEWS CONTEXT (NewsAPI) ]': newsApiContext,
  }

  auditLogger.info(
    { context: { synthesis_input: synthesisInput } },
    `Synthesis Context for: "${primaryHeadline}"`
  )
  const synthesisResult = await synthesisChain({
    context_json_string: JSON.stringify(synthesisInput),
  })
  auditLogger.info(
    { context: { llm_output: synthesisResult } },
    `Synthesis Verdict for: "${primaryHeadline}"`
  )

  if (!synthesisResult || synthesisResult.error || !synthesisResult.events) {
    logger.warn({ details: synthesisResult?.error }, 'Synthesis failed for cluster.')
    return []
  }

  const highestScoreInCluster = Math.max(
    ...uniqueArticlesInCluster.map((a) => a.relevance_article || 0)
  )

  const finalEventsAndOpps = []

  for (const [index, eventData] of synthesisResult.events.entries()) {
    if (highestScoreInCluster < settings.EVENT_RELEVANCE_THRESHOLD) {
      logger.warn(
        {
          score: highestScoreInCluster,
          threshold: settings.EVENT_RELEVANCE_THRESHOLD,
          headline: eventData.headline,
        },
        'Event failed final quality gate. Discarding.'
      )
      continue
    }

    runStats.eventsSynthesized++
    const eventObject = {
      ...eventData,
      event_key: `${clusterKey}-${index}`,
      synthesized_headline: eventData.headline,
      synthesized_summary: eventData.summary,
      ai_assessment_reason: uniqueArticlesInCluster[0].assessment_article,
      highest_relevance_score: highestScoreInCluster,
      source_articles: uniqueArticlesInCluster.map((a) => ({
        headline: a.headline,
        link: a.link,
        newspaper: a.newspaper,
        imageUrl: a.imageUrl,
        country: a.country,
      })),
      enrichmentSources,
    }

    // --- DEFINITIVE FIX: Replace the incorrect variable 'x' with 'eventObject' ---
    const opportunityInput = {
      context_text: `Event Key: ${eventObject.event_key}\nSynthesized Event Headline: ${eventObject.synthesized_headline}\nSynthesized Event Summary: ${eventObject.synthesized_summary}\nKey Individuals already identified: ${JSON.stringify(eventObject.key_individuals)}\nSource Article Snippets: ${truncateString(combinedText, settings.LLM_CONTEXT_MAX_CHARS)}`,
    }
    const opportunityResult = await opportunityChain(opportunityInput)

    runStats.synthesizedEventsForReport.push({
      synthesized_headline: eventObject.synthesized_headline,
      highest_relevance_score: eventObject.highest_relevance_score,
    })

    finalEventsAndOpps.push({
      event: eventObject,
      opportunities: opportunityResult.opportunities || [],
    })
  }

  return finalEventsAndOpps
}

export async function runClusterAndSynthesize(pipelinePayload) {
  logger.info('--- STAGE 4: CLUSTER & SYNTHESIZE ---')
  const { runStats, enrichedArticles } = pipelinePayload

  const articlesForProcessing = enrichedArticles.filter(
    (a) => a.relevance_article >= settings.ARTICLES_RELEVANCE_THRESHOLD
  )
  if (articlesForProcessing.length === 0) {
    logger.info('No relevant articles were promoted for synthesis stage.')
    pipelinePayload.synthesizedEvents = []
    pipelinePayload.opportunitiesToSave = []
    return { success: true, payload: pipelinePayload }
  }

  const fullArticleMap = new Map(articlesForProcessing.map((a) => [a._id.toString(), a]))
  const articlePayload = articlesForProcessing.map((a) => ({
    id: a._id.toString(),
    headline: a.headline,
    source: a.newspaper,
    summary: a.assessment_article || '',
  }))
  const clusterResult = await clusteringChain({
    articles_json_string: JSON.stringify(articlePayload),
  })

  const eventClusters = clusterResult.events || []
  runStats.eventsClustered = eventClusters.length
  logger.info(
    { details: eventClusters },
    `Clustered ${articlesForProcessing.length} articles into ${eventClusters.length} unique events.`
  )

  const clusteredArticleIds = new Set(eventClusters.flatMap((c) => c.article_ids))
  let synthesizedEvents = []
  let opportunitiesToSave = []

  const synthesisPromises = []

  for (const cluster of eventClusters) {
    const articlesInCluster = cluster.article_ids
      .map((id) => fullArticleMap.get(id))
      .filter(Boolean)
    if (articlesInCluster.length > 0) {
      synthesisPromises.push(
        synthesizeEventsFromCluster(articlesInCluster, cluster.event_key, runStats)
      )
    }
  }

  const singletonArticles = articlesForProcessing.filter(
    (a) =>
      !clusteredArticleIds.has(a._id.toString()) &&
      a.relevance_article >= settings.SINGLETON_RELEVANCE_THRESHOLD
  )
  if (singletonArticles.length > 0) {
    logger.info(
      `Found ${singletonArticles.length} high-quality singleton articles to process as individual events.`
    )
    for (const article of singletonArticles) {
      const event_key = `singleton-${article.newspaper.toLowerCase().replace(/[^a-z0-9]/g, '')}-${article._id.toString()}`
      synthesisPromises.push(synthesizeEventsFromCluster([article], event_key, runStats))
    }
  }

  const results = await Promise.all(synthesisPromises)
  const flattenedResults = results.flat()

  flattenedResults.forEach((result) => {
    if (result) {
      synthesizedEvents.push(result.event)
      opportunitiesToSave.push(...result.opportunities)
    }
  })

  pipelinePayload.synthesizedEvents = synthesizedEvents
  pipelinePayload.opportunitiesToSave = opportunitiesToSave
  return { success: true, payload: pipelinePayload }
}

```

## 📄 src/pipeline/5_commitAndNotify.js
*Lines: 57, Size: 2.2 KB*

```javascript
// apps/pipeline/src/pipeline/5_commitAndNotify.js
import { logger, auditLogger } from '@headlines/utils-server'
import { sendSupervisorReportEmail } from '../modules/email/index.js'
import { judgeAndFilterOutput } from './submodules/commit/1_judgeOutput.js'
import { saveResultsToDb } from './submodules/commit/2_saveResults.js'
import { triggerNotifications } from './submodules/commit/3_triggerNotifications.js'

const FATAL_JUDGEMENT_QUALITIES = ['Irrelevant', 'Poor']

export async function runCommitAndNotify(pipelinePayload) {
  logger.info('--- STAGE 5: COMMIT & NOTIFY ---')
  const { noCommitMode, runStats, isDryRun, dbConnection } = pipelinePayload

  if (noCommitMode || isDryRun) {
    logger.warn(
      'COMMIT/NOTIFY: Skipping database commits and user notifications due to run flags.'
    )
    if (!isDryRun) await sendSupervisorReportEmail(runStats)
    return { success: true, payload: pipelinePayload }
  }

  if (dbConnection && (!runStats.errors || runStats.errors.length === 0)) {
    const { finalEvents, finalOpportunities } = await judgeAndFilterOutput(
      pipelinePayload,
      FATAL_JUDGEMENT_QUALITIES
    )

    const { savedEvents, savedOpportunities, articlesSavedCount } = await saveResultsToDb(
      pipelinePayload,
      finalEvents,
      finalOpportunities
    )

    pipelinePayload.savedEvents = savedEvents
    pipelinePayload.savedOpportunities = savedOpportunities

    logger.info(
      `Database Save Summary: ${articlesSavedCount} articles processed, ${savedEvents.length} events committed, ${savedOpportunities.length} opportunities committed.`
    )

    if (savedEvents.length > 0 || savedOpportunities.length > 0) {
      logger.info(
        `Triggering notifications for ${savedEvents.length} committed events and ${savedOpportunities.length} committed opportunities.`
      )
      await triggerNotifications(pipelinePayload, savedEvents, savedOpportunities)
    } else {
      logger.info(
        'No new items were successfully committed to the database. Skipping user notifications.'
      )
    }
  }

  auditLogger.info({ context: { run_stats: runStats } }, 'Final Run Statistics')
  await sendSupervisorReportEmail(runStats)
  return { success: true, payload: pipelinePayload }
}

```

## 📄 src/pipeline/6_suggestNewWatchlistEntities.js
*Lines: 81, Size: 2.53 KB*

```javascript
// apps/pipeline/src/pipeline/6_suggestNewWatchlistEntities.js (version 4.1)
import { logger } from '@headlines/utils-server'
import { watchlistSuggestionChain } from '@headlines/ai-services'
import {
  getActiveWatchlistEntityNames,
  bulkWriteWatchlistSuggestions,
} from '@headlines/data-access'
import { settings } from '@headlines/config'

export async function suggestNewWatchlistEntities(pipelinePayload) {
  logger.info('--- STAGE 6: WATCHLIST SUGGESTION ---')

  const { savedEvents } = pipelinePayload
  if (!savedEvents || savedEvents.length === 0) {
    logger.info('No new events saved. Skipping watchlist suggestion.')
    return
  }

  const highQualityEvents = savedEvents.filter(
    (e) => e.highest_relevance_score >= settings.SUGGESTION_GENERATION_THRESHOLD
  )
  if (highQualityEvents.length === 0) {
    logger.info(
      `No events met quality threshold (${settings.SUGGESTION_GENERATION_THRESHOLD}) for suggestions.`
    )
    return
  }

  logger.info(
    `Analyzing ${highQualityEvents.length} high-quality events for new watchlist candidates...`
  )

  const existingEntitiesResult = await getActiveWatchlistEntityNames()
  if (!existingEntitiesResult.success) {
    logger.error(
      { err: existingEntitiesResult.error },
      'Failed to fetch existing watchlist entities.'
    )
    return
  }
  const existingNames = new Set(
    existingEntitiesResult.data.map((e) => e.name.toLowerCase())
  )

  const result = await watchlistSuggestionChain({
    events_json_string: JSON.stringify(highQualityEvents),
  })

  if (result.error || !result.suggestions) {
    logger.warn('AI failed to generate watchlist suggestions.', result)
    return
  }

  // Post-filter to ensure we don't suggest entities that already exist
  const newSuggestions = result.suggestions.filter(
    (s) => !existingNames.has(s.name.toLowerCase())
  )

  if (newSuggestions.length > 0) {
    logger.info(`AI generated ${newSuggestions.length} new watchlist suggestions.`)
    const bulkOps = newSuggestions.map((suggestion) => ({
      updateOne: {
        filter: { name: suggestion.name },
        update: { $setOnInsert: suggestion },
        upsert: true,
      },
    }))

    const dbResult = await bulkWriteWatchlistSuggestions(bulkOps)
    if (dbResult.success) {
      logger.info(
        `Successfully saved ${newSuggestions.length} new suggestions to the database.`
      )
    } else {
      logger.error({ err: dbResult.error }, 'Failed to save new watchlist suggestions.')
    }
  } else {
    logger.info('AI analysis did not yield any new watchlist suggestions.')
  }
}

```

## 📄 src/pipeline/7_selfHealAndOptimize.js
*Lines: 10, Size: 453 Bytes*

```javascript
// apps/pipeline/src/pipeline/7_selfHealAndOptimize.js (version 2.0.0)
import { logger } from '@headlines/utils-server'

export async function runSelfHealAndOptimize(pipelinePayload) {
  logger.warn('--- STAGE 7: SELF-HEAL & OPTIMIZE (DISABLED) ---')
  logger.warn('Self-healing functionality has been disabled by configuration.')
  // The function now does nothing and simply returns the payload.
  return { success: true, payload: pipelinePayload }
}

```

## 📄 src/pipeline/submodules/commit/1_judgeOutput.js
*Lines: 79, Size: 2.52 KB*

```javascript
// apps/pipeline/src/pipeline/submodules/commit/1_judgeOutput.js (version 2.4.1)
import { logger } from '@headlines/utils-server'
import { judgeChain } from '@headlines/ai-services'

export async function judgeAndFilterOutput(pipelinePayload, fatalQualities) {
  const {
    synthesizedEvents: initialEvents = [],
    opportunitiesToSave: initialOpportunities = [],
    runStats,
  } = pipelinePayload

  logger.info(
    `[Judge Agent] Received ${initialEvents.length} events and ${initialOpportunities.length} opportunities for final review.`
  )

  const lightweightEvents = initialEvents.map((e) => ({
    identifier: `Event: ${e.synthesized_headline}`,
    summary: e.synthesized_summary,
    assessment: e.ai_assessment_reason,
    score: e.highest_relevance_score,
  }))
  const lightweightOpportunities = initialOpportunities.map((o) => ({
    identifier: `Opportunity: ${o.reachOutTo}`,
    reason: o.whyContact,
    wealth_estimate_mm: o.likelyMMDollarWealth,
  }))

  const payloadForJudge = {
    events: lightweightEvents,
    opportunities: lightweightOpportunities,
  }
  // DEFINITIVE FIX: Changed from .invoke to direct await
  const judgeVerdict = await judgeChain({
    payload_json_string: JSON.stringify(payloadForJudge),
  })

  runStats.judgeVerdict = judgeVerdict

  if (judgeVerdict.error) {
    logger.error(
      'Judge agent returned an error. Allowing all items to pass as a failsafe.',
      { details: judgeVerdict.error }
    )
    return { finalEvents: initialEvents, finalOpportunities: initialOpportunities }
  }

  const fatalQualitiesSet = new Set(fatalQualities)

  const approvedEventIdentifiers = new Set(
    (judgeVerdict?.event_judgements || [])
      .filter((j) => !fatalQualitiesSet.has(j.quality))
      .map((j) => j.identifier)
  )

  const finalEvents = initialEvents.filter((event) => {
    const identifier = `Event: ${event.synthesized_headline}`
    const wasApproved = approvedEventIdentifiers.has(identifier)
    if (!wasApproved) {
      const verdict = judgeVerdict.event_judgements.find(
        (j) => j.identifier === identifier
      )
      logger.warn(
        { event: event.synthesized_headline, verdict: verdict },
        `Event discarded by Judge's final verdict.`
      )
    }
    return wasApproved
  })

  logger.info(
    `[Judge Agent] Verdict complete. Approved ${finalEvents.length} out of ${initialEvents.length} events.`
  )

  // For now, we are not filtering opportunities, but the framework is here.
  const finalOpportunities = initialOpportunities

  return { finalEvents, finalOpportunities }
}

```

## 📄 src/pipeline/submodules/commit/2_saveResults.js
*Lines: 61, Size: 2.15 KB*

```javascript
// apps/pipeline/src/pipeline/submodules/commit/2_saveResults.js (version 2.1.1)
import mongoose from 'mongoose'
import { savePipelineResults } from '../../../modules/dataStore/index.js'
import { enrichAndLinkOpportunities } from '../opportunityUpserter.js'
import { logger } from '@headlines/utils-server'

export async function saveResultsToDb(
  pipelinePayload,
  finalEventsToSave,
  finalOpportunitiesToSave
) {
  const { assessedCandidates, isDryRun, runStats } = pipelinePayload
  const articlesToSave = assessedCandidates || []

  if (isDryRun) {
    logger.warn('DRY RUN: Simulating database save.')
    const savedEvents = finalEventsToSave.map((event) => ({
      ...event,
      _id: new mongoose.Types.ObjectId(),
    }))
    return {
      savedEvents,
      savedOpportunities: finalOpportunitiesToSave,
      articlesSavedCount: articlesToSave.length,
    }
  }

  const commitResult = await savePipelineResults(articlesToSave, finalEventsToSave)

  if (commitResult.success) {
    const savedEvents = commitResult.savedEvents
    try {
      const savedOpportunities = await enrichAndLinkOpportunities(
        finalOpportunitiesToSave,
        savedEvents
      )
      // DEFINITIVE FIX: Ensure the returned objects are plain JS objects (.lean())
      // The `savePipelineResults` already returns lean objects, so this is a confirmation of that contract.
      return {
        savedEvents: JSON.parse(JSON.stringify(savedEvents)),
        savedOpportunities: JSON.parse(JSON.stringify(savedOpportunities)),
        articlesSavedCount: articlesToSave.length,
      }
    } catch (error) {
      logger.error(
        { err: error },
        'CRITICAL: Failed during opportunity enrichment and linking. Opportunities will not be saved or sent.'
      )
      runStats.errors.push('CRITICAL: Opportunity processing failed: ' + error.message)
      return {
        savedEvents: JSON.parse(JSON.stringify(savedEvents)),
        savedOpportunities: [],
        articlesSavedCount: articlesToSave.length,
      }
    }
  } else {
    runStats.errors.push('CRITICAL: Failed to commit pipeline results.')
    return { savedEvents: [], savedOpportunities: [], articlesSavedCount: 0 }
  }
}

```

## 📄 src/pipeline/submodules/commit/3_triggerNotifications.js
*Lines: 69, Size: 2.05 KB*

```javascript
// AFTER
// apps/pipeline/src/pipeline/submodules/commit/3_triggerNotifications.js (Corrected)
import { logger } from '@headlines/utils-server'
import { triggerRealtimeEvent } from '@headlines/utils-server' // <-- CORRECT IMPORT from the shared utility package
import { SynthesizedEvent, Article } from '@headlines/models'
import { settings } from '@headlines/config'
import { sendNotifications } from '../../../modules/notifications/index.js'

export async function triggerNotifications(
  pipelinePayload,
  savedEvents,
  savedOpportunities
) {
  const { assessedCandidates, isDryRun, runStats } = pipelinePayload

  const eventIds = savedEvents.map((e) => e._id)

  if (!isDryRun) {
    if (assessedCandidates?.length > 0) {
      const relevantArticleLinks = assessedCandidates
        .filter((a) => a.relevance_article >= settings.ARTICLES_RELEVANCE_THRESHOLD)
        .map((a) => a.link)

      if (relevantArticleLinks.length > 0) {
        const relevantArticleDocs = await Article.find({
          link: { $in: relevantArticleLinks },
        })
        for (const articleDoc of relevantArticleDocs) {
          await triggerRealtimeEvent(
            'articles-channel',
            'new-article',
            articleDoc.toRealtimePayload()
          )
        }
      }
    }

    if (eventIds.length > 0) {
      const eventDocsForStreaming = await SynthesizedEvent.find({
        _id: { $in: eventIds },
      })
      for (const eventDoc of eventDocsForStreaming) {
        await triggerRealtimeEvent(
          'events-channel',
          'new-event',
          eventDoc.toRealtimePayload()
        )
      }
    }
  }

  const eventsForNotification = isDryRun
    ? savedEvents
    : await SynthesizedEvent.find({ _id: { $in: eventIds } }).lean()

  const { emailSentCount } = await sendNotifications(
    eventsForNotification,
    savedOpportunities
  )
  runStats.eventsEmailed = emailSentCount

  if (emailSentCount > 0 && !isDryRun) {
    await SynthesizedEvent.updateMany(
      { _id: { $in: eventIds } },
      { $set: { emailed: true, email_sent_at: new Date() } }
    )
  }
}

```

## 📄 src/pipeline/submodules/commit/4_updateSourceAnalytics.js
*Lines: 89, Size: 3.09 KB*

```javascript
// apps/pipeline/src/pipeline/submodules/commit/4_updateSourceAnalytics.js (version 3.2.0)
import { logger } from '@headlines/utils-server'
import { settings } from '@headlines/config'
import { updateSourceAnalyticsBatch } from '@headlines/data-access'

export async function updateSourceAnalytics(pipelinePayload) {
  const { runStats, assessedCandidates, articlesForPipeline } = pipelinePayload
  if (!runStats || !runStats.scraperHealth) {
    logger.warn(
      '[Analytics] Missing scraperHealth data. Skipping source analytics update.'
    )
    return
  }

  logger.info('📊 Updating source performance analytics...')

  const analyticsMap = new Map()

  // Step 1: Initialize analytics based on scrape success and total headlines found.
  for (const health of runStats.scraperHealth) {
    analyticsMap.set(health.source, {
      $inc: {
        'analytics.totalRuns': 1,
        'analytics.totalSuccesses': health.success ? 1 : 0,
        'analytics.totalFailures': health.success ? 0 : 1,
        'analytics.totalScraped': 0, // Will be incremented by fresh count
        'analytics.totalRelevant': 0, // Will be incremented by relevant count
      },
      $set: {
        'analytics.lastRunHeadlineCount': health.count,
        'analytics.lastRunRelevantCount': 0,
      },
    })
  }

  // Step 2: Calculate FRESH headlines per source to correctly increment totalScraped.
  const freshHeadlinesBySource = (articlesForPipeline || []).reduce((acc, article) => {
    acc[article.source] = (acc[article.source] || 0) + 1
    return acc
  }, {})

  for (const [sourceName, freshCount] of Object.entries(freshHeadlinesBySource)) {
    if (analyticsMap.has(sourceName)) {
      const data = analyticsMap.get(sourceName)
      data.$inc['analytics.totalScraped'] = freshCount
    }
  }

  // Step 3: Calculate RELEVANT headlines per source.
  if (assessedCandidates && assessedCandidates.length > 0) {
    const relevanceBySource = new Map()
    for (const article of assessedCandidates) {
      if (article.relevance_headline >= settings.HEADLINES_RELEVANCE_THRESHOLD) {
        const currentCount = relevanceBySource.get(article.source) || 0
        relevanceBySource.set(article.source, currentCount + 1)
      }
    }

    for (const [sourceName, relevantCount] of relevanceBySource.entries()) {
      if (analyticsMap.has(sourceName)) {
        const data = analyticsMap.get(sourceName)
        data.$inc['analytics.totalRelevant'] = relevantCount
        data.$set['analytics.lastRunRelevantCount'] = relevantCount
      }
    }
  }

  const bulkOps = []
  for (const [name, update] of analyticsMap.entries()) {
    bulkOps.push({ updateOne: { filter: { name }, update } })
  }

  if (bulkOps.length > 0) {
    const result = await updateSourceAnalyticsBatch(bulkOps)
    if (result.success) {
      logger.info(
        `[Analytics] Successfully updated analytics for ${result.modifiedCount} sources.`
      )
    } else {
      logger.error(
        { err: result.error },
        '[Analytics] Failed to bulk update source analytics.'
      )
    }
  } else {
    logger.info('[Analytics] No sources required analytics updates for this run.')
  }
}

```

## 📄 src/pipeline/submodules/opportunityUpserter.js
*Lines: 185, Size: 5.83 KB*

```javascript
// apps/pipeline/src/pipeline/submodules/opportunityUpserter.js (version 7.1.0)
import { Opportunity, SynthesizedEvent, WatchlistEntity } from '@headlines/models'
import { logger } from '@headlines/utils-server'
import {
  contactFinderChain,
  entityCanonicalizerChain,
  generateEmbedding,
} from '@headlines/ai-services'
import { getConfig } from '@headlines/scraper-logic/config.js'

async function selfCorrectWatchlist(opportunityName, canonicalName) {
  if (opportunityName.toLowerCase() === canonicalName.toLowerCase()) return

  const watchlistEntity = await WatchlistEntity.findOne({ name: canonicalName })
  if (watchlistEntity) {
    const newSearchTerm = opportunityName.toLowerCase().trim()
    if (!watchlistEntity.searchTerms.includes(newSearchTerm)) {
      watchlistEntity.searchTerms.push(newSearchTerm)
      await watchlistEntity.save()
      logger.info(
        `[Self-Correct] Added search term '${newSearchTerm}' to watchlist entity '${canonicalName}'.`
      )
    }
  }
}

async function findContactEmail(person) {
  const config = getConfig()
  logger.info(`[Contact Research] Initiated for: ${person.reachOutTo}`)
  const queries = [
    `"${person.reachOutTo}" ${person.contactDetails.company} email address`,
    `"${person.reachOutTo}" contact information`,
  ]

  let combinedSnippets = ''
  for (const query of queries) {
    const searchResult = await config.utilityFunctions.performGoogleSearch(query)
    if (searchResult.success && searchResult.snippets) {
      combinedSnippets += `\n--- Results for query: "${query}" ---\n${searchResult.snippets}`
    }
  }

  if (!combinedSnippets) {
    logger.warn(`[Contact Research] No search results for "${person.reachOutTo}".`)
    return null
  }

  const response = await contactFinderChain({ snippets: combinedSnippets })

  if (response.error || !response.email) {
    logger.warn(
      `[Contact Research] LLM failed to extract email for "${person.reachOutTo}".`
    )
    return null
  }

  logger.info(
    { email: response.email },
    `[Contact Research] Found email for "${person.reachOutTo}".`
  )
  return response.email
}

export async function enrichAndLinkOpportunities(potentialOpportunities, savedEvents) {
  if (!potentialOpportunities || potentialOpportunities.length === 0) {
    return []
  }

  logger.info(
    `--- Opportunity Enrichment & Linking: Processing ${potentialOpportunities.length} potential opportunities... ---`
  )

  const canonicalizedOpportunities = await Promise.all(
    potentialOpportunities.map(async (opp) => {
      const originalName = opp.reachOutTo
      // DEFINITIVE FIX: Changed from .invoke to direct await
      const response = await entityCanonicalizerChain({
        entity_name: originalName,
      })
      if (response && !response.error && response.canonical_name) {
        opp.reachOutTo = response.canonical_name
        await selfCorrectWatchlist(originalName, response.canonical_name)
      }
      return opp
    })
  )

  const enrichedOpportunities = await Promise.all(
    canonicalizedOpportunities.map(async (opp) => {
      if (!opp.contactDetails.email) {
        const email = await findContactEmail(opp)
        if (email) {
          opp.contactDetails.email = email
        }
      }
      return opp
    })
  )

  const enrichedOpportunitiesWithEmbeddings = await Promise.all(
    enrichedOpportunities.map(async (opp) => {
      const textToEmbed = [
        opp.reachOutTo,
        ...(Array.isArray(opp.whyContact) ? opp.whyContact : [opp.whyContact]),
        opp.contactDetails?.company,
      ]
        .filter(Boolean)
        .join('; ')

      const embedding = await generateEmbedding(textToEmbed)
      return { ...opp, embedding }
    })
  )

  const findOrCreateOps = enrichedOpportunitiesWithEmbeddings.map((opp) => {
    const whyContactArray = Array.isArray(opp.whyContact)
      ? opp.whyContact
      : [opp.whyContact]
    return {
      updateOne: {
        filter: { reachOutTo: opp.reachOutTo },
        update: {
          $setOnInsert: {
            reachOutTo: opp.reachOutTo,
            basedIn: opp.basedIn,
            likelyMMDollarWealth: opp.likelyMMDollarWealth,
            contactDetails: opp.contactDetails,
          },
          $set: {
            embedding: opp.embedding,
          },
          $addToSet: { whyContact: { $each: whyContactArray } },
        },
        upsert: true,
      },
    }
  })

  if (findOrCreateOps.length > 0) {
    await Opportunity.bulkWrite(findOrCreateOps, { ordered: false })
  }

  const allOppNames = enrichedOpportunitiesWithEmbeddings.map((o) => o.reachOutTo)
  const allOpportunityDocs = await Opportunity.find({ reachOutTo: { $in: allOppNames } })
  const oppMap = new Map(allOpportunityDocs.map((o) => [o.reachOutTo, o]))
  const eventMap = new Map(savedEvents.map((e) => [e.event_key, e]))

  const oppLinkOps = []
  const eventLinkOps = []

  for (const enrichedOpp of enrichedOpportunitiesWithEmbeddings) {
    const opportunityDoc = oppMap.get(enrichedOpp.reachOutTo)
    const eventDoc = eventMap.get(enrichedOpp.event_key)
    if (opportunityDoc && eventDoc) {
      eventLinkOps.push({
        updateOne: {
          filter: { _id: eventDoc._id },
          update: { $addToSet: { relatedOpportunities: opportunityDoc._id } },
        },
      })
      oppLinkOps.push({
        updateOne: {
          filter: { _id: opportunityDoc._id },
          update: {
            $addToSet: { events: eventDoc._id },
            $max: { likelyMMDollarWealth: enrichedOpp.likelyMMDollarWealth },
          },
        },
      })
    }
  }

  if (oppLinkOps.length > 0) {
    await Promise.all([
      Opportunity.bulkWrite(oppLinkOps, { ordered: false }),
      SynthesizedEvent.bulkWrite(eventLinkOps, { ordered: false }),
    ])
    logger.info(
      `Successfully linked ${oppLinkOps.length} opportunity-event relationships.`
    )
  }

  return Opportunity.find({ _id: { $in: allOpportunityDocs.map((o) => o._id) } }).lean()
}

```

## 📄 src/pipeline/submodules/processSingleArticle.js
*Lines: 171, Size: 5.36 KB*

```javascript
import { logger } from '@headlines/utils-server/node'
import {
  articleChain,
  articlePreAssessmentChain,
  assessArticleContent,
  findAlternativeSources,
} from '@headlines/ai-services/node'
import { scrapeArticleContent } from '@headlines/scraper-logic/scraper/index.js'
import { settings } from '@headlines/config/node'
import { Source } from '@headlines/models'

function createLifecycleEvent(stage, status, reason) {
  return { stage, status, reason, timestamp: new Date() }
}

async function salvageHighSignalArticle(article, hits) {
  logger.warn(
    { headline: article.headline },
    `SALVAGE MODE: Attempting to find alternative sources for high-signal headline.`
  )

  const searchResult = await findAlternativeSources(article.headline)

  if (!searchResult.success || searchResult.results.length === 0) {
    logger.error(
      { headline: article.headline },
      'SALVAGE FAILED: No alternative sources found.'
    )
    return {
      article: null,
      lifecycleEvent: createLifecycleEvent(
        'salvage',
        'failed',
        'No alternative sources found'
      ),
    }
  }

  for (const altSource of searchResult.results.slice(0, 2)) {
    const tempSourceConfig = { name: altSource.source, articleSelector: 'body' }
    const tempArticle = { ...article, link: altSource.link }
    const contentResult = await scrapeArticleContent(tempArticle, tempSourceConfig)

    if (contentResult.articleContent) {
      const finalAssessment = await assessArticleContent(contentResult, hits, true)
      if (
        finalAssessment &&
        !finalAssessment.error &&
        finalAssessment.relevance_article >= settings.ARTICLES_RELEVANCE_THRESHOLD
      ) {
        logger.info(
          { headline: article.headline },
          'SALVAGE SUCCESS: Successfully enriched from alternative source.'
        )
        const salvagedArticle = {
          ...finalAssessment,
          assessment_article: `[SALVAGED] ${finalAssessment.assessment_article}`,
        }
        return {
          article: salvagedArticle,
          lifecycleEvent: createLifecycleEvent(
            'salvage',
            'success',
            `Used alternative source: ${altSource.link}`
          ),
        }
      }
    }
  }
  return {
    article: null,
    lifecycleEvent: createLifecycleEvent(
      'salvage',
      'failed',
      'All alternatives failed enrichment'
    ),
  }
}

export async function processSingleArticle(article, hits) {
  let transientArticle
  try {
    let source
    if (article.source === 'Richlist Ingestion') {
      logger.trace('Using mock source config for synthetic rich list article.')
      source = {
        name: 'Richlist Ingestion',
        articleSelector: ['body'],
      }
      transientArticle = article
    } else {
      source = await Source.findOne({ name: article.source }).lean()
      if (!source)
        throw new Error(`Could not find source document for "${article.source}"`)
      transientArticle = await scrapeArticleContent(article, source)
    }

    if (transientArticle.articleContent) {
      const articleText = transientArticle.articleContent.contents.join('\n')
      const triageResult = await articlePreAssessmentChain({ input: articleText })

      if (triageResult.error || triageResult.classification !== 'private') {
        return {
          article: null,
          lifecycleEvent: createLifecycleEvent(
            'enrichment',
            'dropped',
            `Failed AI Triage (classified as ${triageResult.classification})`
          ),
          contentPreview: transientArticle.contentPreview,
        }
      }

      const finalAssessment = await assessArticleContent(transientArticle, hits)

      if (finalAssessment.error) {
        throw new Error(finalAssessment.error)
      }

      if (finalAssessment.relevance_article >= settings.ARTICLES_RELEVANCE_THRESHOLD) {
        return {
          article: finalAssessment,
          lifecycleEvent: createLifecycleEvent(
            'enrichment',
            'success',
            `Final score: ${finalAssessment.relevance_article}`
          ),
          contentPreview: transientArticle.contentPreview,
        }
      } else {
        return {
          article: { ...finalAssessment },
          lifecycleEvent: createLifecycleEvent(
            'enrichment',
            'dropped',
            `Content score ${finalAssessment.relevance_article} < threshold ${settings.ARTICLES_RELEVANCE_THRESHOLD}`
          ),
          contentPreview: transientArticle.contentPreview,
        }
      }
    } else {
      if (article.relevance_headline >= settings.HIGH_SIGNAL_HEADLINE_THRESHOLD) {
        return {
          ...(await salvageHighSignalArticle(article, hits)),
          contentPreview: transientArticle.contentPreview,
        }
      } else {
        return {
          article: null,
          lifecycleEvent: createLifecycleEvent(
            'enrichment',
            'dropped',
            `Content scrape failed and headline score ${article.relevance_headline} was not high-signal`
          ),
          contentPreview: transientArticle.contentPreview,
        }
      }
    }
  } catch (error) {
    logger.error(
      { err: error, articleLink: article.link },
      'Critical error during single article processing.'
    )
    return {
      article: null,
      lifecycleEvent: createLifecycleEvent('enrichment', 'error', error.message),
      contentPreview: transientArticle?.contentPreview,
    }
  }
}

```

## 📄 src/pipeline/submodules/triggerSelectorRepair.js
*Lines: 11, Size: 362 Bytes*

```javascript
// apps/pipeline/src/pipeline/submodules/triggerSelectorRepair.js (version 4.0)
import { logger } from '@headlines/utils-server'

export async function triggerSelectorRepair(source, htmlContent, failedSelector) {
  logger.warn(
    `[Repair Orchestrator] SKIPPED for "${source.name}". Self-healing is disabled.`
  )
  // This function is now a no-op.
  return
}

```

## 📄 src/utils/auditLogger.js
*Lines: 89, Size: 2.37 KB*

```javascript
// apps/pipeline/src/utils/auditLogger.js
import pino from 'pino'
import fs from 'fs'
import path from 'path'
import { Transform } from 'stream'
import { EOL } from 'os'
import moment from 'moment'
import { format } from 'util'

const COLORS = {
  reset: '\x1b[0m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m',
  yellow: '\x1b[33m',
  grey: '\x1b[90m',
}

const humanAuditStream = new Transform({
  transform(chunk, enc, cb) {
    try {
      const logObject = JSON.parse(chunk)
      const { time, msg, context } = logObject
      const timestamp = moment(time).format('HH:mm:ss.SSS')
      let output = `${COLORS.cyan}--- [${timestamp}] ${msg} ---${COLORS.reset}${EOL}`

      if (context) {
        for (const [key, value] of Object.entries(context)) {
          const formattedKey = key
            .replace(/_/g, ' ')
            .replace(/\b\w/g, (l) => l.toUpperCase())
          output += `  ${COLORS.yellow}${formattedKey}:${COLORS.reset}${EOL}`
          output += `${COLORS.grey}${format(value, { depth: null }).replace(/^/gm, '    > ')}${COLORS.reset}${EOL}${EOL}`
        }
      }
      this.push(output)
    } catch (e) {
      this.push(chunk) // Pass through non-JSON
    }
    cb()
  },
})

let auditLoggerInstance

export function initializeAuditLogger(logDirectory) {
  if (auditLoggerInstance) return auditLoggerInstance

  if (!logDirectory) {
    throw new Error('[AuditLogger] Initialization failed: logDirectory must be provided.')
  }

  if (!fs.existsSync(logDirectory)) fs.mkdirSync(logDirectory, { recursive: true })

  const auditLogFile = path.join(logDirectory, 'run_audit.log')
  try {
    fs.unlinkSync(auditLogFile)
  } catch (e) {
    if (e.code !== 'ENOENT') console.error('Could not clear old audit log file:', e)
  }

  const fileWriteStream = fs.createWriteStream(auditLogFile, { flags: 'a' })
  humanAuditStream.pipe(fileWriteStream)

  auditLoggerInstance = pino({ level: 'info' }, humanAuditStream)
  return auditLoggerInstance
}

export const auditLogger = new Proxy(
  {},
  {
    get(target, prop) {
      if (auditLoggerInstance) {
        return auditLoggerInstance[prop]
      }
      if (
        prop === 'info' ||
        prop === 'warn' ||
        prop === 'error' ||
        prop === 'fatal' ||
        prop === 'debug' ||
        prop === 'trace'
      ) {
        return () => {} // Return a no-op function to prevent crashes
      }
      return undefined
    },
  }
)

```

## 📄 src/utils/errorStream.js
*Lines: 40, Size: 902 Bytes*

```javascript
// apps/pipeline/src/utils/errorStream.js (version 3.0.0)
import pino from 'pino'
import fs from 'fs'
import path from 'path'

const logDir = path.join(process.cwd(), 'apps/pipeline/logs')
const errorLogFile = path.join(logDir, 'error.log')

if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir, { recursive: true })
}
try {
  fs.unlinkSync(errorLogFile)
} catch (error) {
  if (error.code !== 'ENOENT') {
    console.error('Could not clear old error log file:', error)
  }
}

const errorFileTransport = pino.transport({
  target: 'pino-pretty',
  options: {
    colorize: false,
    translateTime: 'SYS:yyyy-mm-dd HH:MM:ss.l',
    ignore: 'pid,hostname',
    singleLine: false,
    destination: errorLogFile,
    mkdir: true,
    append: true,
  },
})

// This stream only logs levels 'warn' and above.
const errorStream = {
  level: 'warn',
  stream: errorFileTransport,
}

export default errorStream

```

## 📄 src/utils/housekeeping.js
*Lines: 57, Size: 1.76 KB*

```javascript
// apps/pipeline/src/utils/housekeeping.js (version 3.0.0)
import { logger } from '@headlines/utils-server'
import { findSourcesForScraping, performHousekeeping } from '@headlines/data-access'

const ARTICLE_RETENTION_DAYS = 14

export async function performDatabaseHousekeeping() {
  logger.info('🧹 Performing database housekeeping...')

  try {
    const dynamicSourcesResult = await findSourcesForScraping({ isDynamicContent: true })
    if (!dynamicSourcesResult.success) throw new Error(dynamicSourcesResult.error)

    const dynamicNewspaperNames = dynamicSourcesResult.data.map((s) => s.name)
    if (dynamicNewspaperNames.length === 0) {
      logger.info(
        'Housekeeping: No sources marked for dynamic content cleanup. Skipping.'
      )
      return
    }

    const cutoffDate = new Date()
    cutoffDate.setDate(cutoffDate.getDate() - ARTICLE_RETENTION_DAYS)
    const deletionCriteria = {
      newspaper: { $in: dynamicNewspaperNames },
      createdAt: { $lt: cutoffDate },
      $and: [
        {
          $or: [
            { relevance_headline: { $lt: 25 } },
            { relevance_headline: { $exists: false } },
          ],
        },
        {
          $or: [
            { relevance_article: { $lt: 25 } },
            { relevance_article: { $exists: false } },
          ],
        },
      ],
    }

    const result = await performHousekeeping(deletionCriteria)
    if (!result.success) throw new Error(result.error)

    if (result.deletedCount > 0) {
      logger.info(
        `Housekeeping complete. Deleted ${result.deletedCount} old, irrelevant articles.`
      )
    } else {
      logger.info('Housekeeping complete. No old, irrelevant articles to delete.')
    }
  } catch (error) {
    logger.error({ err: error }, 'Database housekeeping failed.')
  }
}

```

## 📄 src/utils/pipelineLogger.js
*Lines: 46, Size: 1.59 KB*

```javascript
// apps/pipeline/src/utils/pipelineLogger.js (version 4.1.0)
import { logger } from '@headlines/utils-server'
import moment from 'moment'
import 'moment-duration-format'
import {
  formatRunFunnel,
  formatTopEvents,
  formatStrugglingSources,
  formatTokenUsage,
  formatApiUsage,
  formatContentScrapingFailures,
} from './reportSections.js'

const colors = {
  reset: '\x1b[0m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m',
}

/**
 * The main function to log the final, comprehensive report for a pipeline run.
 * @param {Object} runStats - The statistics collected during the pipeline run.
 * @param {number} duration - The duration of the pipeline run in seconds.
 */
export async function logFinalReport(runStats, duration) {
  const formattedDuration = moment
    .duration(Math.round(duration), 'seconds')
    .format('h [hrs], m [min], s [sec]')

  let report = `\n\n${colors.cyan}=============================================================${colors.reset}\n`
  report += `${colors.cyan} 🚀 PIPELINE RUN SUMMARY${colors.reset}\n`
  report += `${colors.cyan}=============================================================${colors.reset}\n\n`
  report += `  ${colors.magenta}Duration:${colors.reset} ${formattedDuration}\n\n`

  report += formatTokenUsage(runStats)
  report += formatApiUsage(runStats)
  report += formatContentScrapingFailures(runStats)
  report += formatTopEvents(runStats)
  report += await formatStrugglingSources(runStats)

  report += '\n' + formatRunFunnel(runStats)
  report += `${colors.cyan}=============================================================${colors.reset}\n`

  logger.info(report)
}

```

## 📄 src/utils/rag.js
*Lines: 65, Size: 2.24 KB*

```javascript
// apps/pipeline/src/utils/rag.js (version 2.0.0)
import { Pinecone } from '@pinecone-database/pinecone'
import { logger } from './logger.js'
import { generateEmbedding } from '@headlines/ai-services'
import { env } from '@headlines/config'

const { PINECONE_API_KEY, PINECONE_INDEX_NAME } = env

const SIMILARITY_THRESHOLD = 0.65
const MAX_CONTEXT_ARTICLES = 3

if (!PINECONE_API_KEY) {
  throw new Error('Pinecone API Key must be defined in .env file for RAG module.')
}
const pc = new Pinecone({ apiKey: PINECONE_API_KEY })
const pineconeIndex = pc.index(PINECONE_INDEX_NAME)

/**
 * Finds historical articles similar to a given set of new articles by querying Pinecone.
 * @param {Array<Object>} articlesInCluster - The new articles forming an event.
 * @returns {Promise<Array<Object>>} A promise that resolves to an array of relevant historical articles.
 */
export async function findSimilarArticles(articlesInCluster) {
  logger.info('RAG: Searching for historical context in Pinecone...')
  if (!articlesInCluster || articlesInCluster.length === 0) return []

  const queryText = articlesInCluster.map((a) => a.headline).join('\n')

  try {
    const queryEmbedding = await generateEmbedding(queryText)

    const queryResponse = await pineconeIndex.query({
      topK: MAX_CONTEXT_ARTICLES,
      vector: queryEmbedding,
      includeMetadata: true,
    })

    const relevantMatches = queryResponse.matches.filter(
      (match) => match.score >= SIMILARITY_THRESHOLD
    )

    if (relevantMatches.length > 0) {
      const retrievedArticlesForLogging = relevantMatches
        .map(
          (match) => `  - [Score: ${match.score.toFixed(3)}] "${match.metadata.headline}"`
        )
        .join('\n')
      logger.info(
        `RAG: Found ${relevantMatches.length} relevant historical articles:\n${retrievedArticlesForLogging}`
      )
      return relevantMatches.map((match) => ({
        headline: match.metadata.headline,
        newspaper: match.metadata.newspaper,
        assessment_article: match.metadata.summary,
      }))
    } else {
      logger.info('RAG: Found no relevant historical articles in Pinecone.')
      return []
    }
  } catch (error) {
    logger.error({ err: error }, 'RAG: Pinecone query or embedding generation failed.')
    return []
  }
}

```

## 📄 src/utils/reportSections.js
*Lines: 215, Size: 7.63 KB*

```javascript
// apps/pipeline/src/utils/reportSections.js (Corrected)
import { truncateString } from '@headlines/utils-shared'
import { logger } from '@headlines/utils-server'
import moment from 'moment'
import 'moment-duration-format'

const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m',
  grey: '\x1b[90m',
}

function calculateRate(numerator, denominator) {
  if (denominator === 0) return '0.00%'
  return ((numerator / denominator) * 100).toFixed(2) + '%'
}

function truncateSourceName(name) {
  if (!name) return 'N/A'
  const stopIndex = name.indexOf('(')
  return (stopIndex !== -1 ? name.substring(0, stopIndex) : name).trim()
}

function formatJudgeVerdictSummary(judgeVerdict) {
  if (!judgeVerdict) return ''
  const eventCount = judgeVerdict.event_judgements?.length || 0
  const oppCount = judgeVerdict.opportunity_judgements?.length || 0
  if (eventCount === 0 && oppCount === 0) return ''
  const getQualityCounts = (judgements) => {
    const counts = { positive: 0, negative: 0 }
    ;(judgements || []).forEach((j) => {
      const q = j.quality?.toLowerCase()
      if (q === 'excellent' || q === 'good') counts.positive++
      if (q === 'poor' || q === 'irrelevant') counts.negative++
    })
    return counts
  }
  const eventCounts = getQualityCounts(judgeVerdict.event_judgements)
  let summary = `  ${colors.magenta}Judge Verdict Summary:${colors.reset} ${eventCount} Events (${colors.green}${eventCounts.positive} OK${colors.reset}, ${colors.red}${eventCounts.negative} Bad${colors.reset})`
  return summary + '\n'
}

export function formatRunFunnel(runStats) {
  let section = `  ${colors.yellow}--- Funnel & Conversion (This Run) ---${colors.reset}\n`
  const headlineToEnrichRate = calculateRate(
    runStats.relevantHeadlines,
    runStats.freshHeadlinesFound
  )
  const enrichToEventRate = calculateRate(
    runStats.relevantArticles,
    runStats.relevantHeadlines
  )
  const signalToNoiseRatio = calculateRate(
    runStats.eventsSynthesized,
    runStats.freshHeadlinesFound
  )

  section += `  ${'Headlines Scraped:'.padEnd(30)} ${runStats.headlinesScraped}\n`
  section += `  ${'Fresh/Refreshed Articles:'.padEnd(30)} ${
    runStats.freshHeadlinesFound
  }\n`
  section += `  ${'Headlines Assessed:'.padEnd(30)} ${runStats.headlinesAssessed}\n`
  section += `  ${'  > Relevant for Enrichment:'.padEnd(30)} ${
    runStats.relevantHeadlines
  } (${colors.cyan}${headlineToEnrichRate}${colors.reset})\n`
  section += `  ${'Articles Enriched:'.padEnd(30)} ${
    runStats.enrichmentOutcomes?.length || 0
  }\n`
  section += `  ${'  > Relevant for Event:'.padEnd(30)} ${
    runStats.relevantArticles
  } (${colors.cyan}${enrichToEventRate}${colors.reset})\n`
  section += `  ${'Events Synthesized:'.padEnd(30)} ${runStats.eventsSynthesized}\n`
  section += `  ${colors.green}${'Notifications Sent:'.padEnd(30)} ${
    runStats.eventsEmailed
  }${colors.reset}\n`
  if (runStats.errors?.length > 0) {
    section += `  ${colors.red}${'Errors Encountered:'.padEnd(30)} ${
      runStats.errors.length
    }${colors.reset}\n`
  }
  section += `  ${colors.yellow}${'Overall Signal/Noise Ratio:'.padEnd(30)} ${signalToNoiseRatio}${
    colors.reset
  }\n`
  section += formatJudgeVerdictSummary(runStats.judgeVerdict)
  return section
}

export function formatTopEvents(runStats) {
  if (
    !runStats.synthesizedEventsForReport ||
    runStats.synthesizedEventsForReport.length === 0
  )
    return ''
  let section = `  ${colors.yellow}--- Top Synthesized Events (This Run) ---${colors.reset}\n`
  runStats.synthesizedEventsForReport.slice(0, 5).forEach((event) => {
    section += `  ${colors.green}[${String(event.highest_relevance_score).padStart(
      3
    )}]${colors.reset} "${truncateString(event.synthesized_headline, 70)}"\n`
  })
  return section + '\n'
}

export function formatTokenUsage(runStats) {
  if (!runStats.tokenUsage) return ''
  let section = `  ${colors.yellow}--- Token Usage & Cost (Estimate) ---${colors.reset}\n`
  let totalCost = 0
  const usage = runStats.tokenUsage
  const modelsWithUsage = Object.keys(usage).filter(
    (model) => usage[model].inputTokens > 0 || usage[model].outputTokens > 0
  )
  if (modelsWithUsage.length === 0) {
    section += `  No token usage recorded for this run.\n`
    return section
  }
  modelsWithUsage.forEach((model) => {
    const stats = usage[model]
    section += `  ${`Model: ${model}`.padEnd(40)}\n`
    section += `  ${'  Input Tokens:'.padEnd(25)} ${stats.inputTokens.toLocaleString()}\n`
    section += `  ${'  Output Tokens:'.padEnd(25)} ${stats.outputTokens.toLocaleString()}\n`
    section += `  ${'  Est. Cost:'.padEnd(25)} $${stats.cost.toFixed(4)}\n`
    totalCost += stats.cost
  })
  section += `  ------------------------------------------------\n`
  section += `  ${colors.green}${'Total Estimated Cost:'.padEnd(
    25
  )} $${totalCost.toFixed(4)}${colors.reset}\n`
  return section + '\n'
}

export function formatApiUsage(runStats) {
  if (!runStats.apiCalls) return ''
  let section = `  ${colors.yellow}--- Third-Party API Usage (Estimate) ---${colors.reset}\n`
  let totalCost = 0
  const usage = runStats.apiCalls
  const servicesWithUsage = Object.keys(usage).filter(
    (service) => usage[service].calls > 0
  )
  if (servicesWithUsage.length === 0) {
    section += `  No third-party API calls recorded for this run.\n`
    return section
  }
  servicesWithUsage.forEach((service) => {
    const stats = usage[service]
    const costString = stats.cost > 0 ? `$${stats.cost.toFixed(4)}` : '(Free)'
    section += `  ${`${service}:`.padEnd(25)} ${`${stats.calls.toLocaleString()} calls`.padEnd(
      15
    )} ${costString}\n`
    totalCost += stats.cost
  })
  section += `  ------------------------------------------------\n`
  section += `  ${colors.green}${'Total Estimated Cost:'.padEnd(
    25
  )} $${totalCost.toFixed(4)}${colors.reset}\n`
  return section + '\n'
}

export function formatContentScrapingFailures(runStats) {
  if (!runStats.enrichmentOutcomes || runStats.enrichmentOutcomes.length === 0) {
    return ''
  }

  const contentFailures = runStats.enrichmentOutcomes.filter(
    (outcome) =>
      outcome.outcome === 'High-Signal Failure' ||
      (outcome.outcome === 'Dropped' &&
        (outcome.assessment_article || '').includes('Enrichment Failed'))
  )

  if (contentFailures.length === 0) {
    return ''
  }

  const sources = [...new Set(contentFailures.map((f) => f.newspaper))]

  let section = `  ${colors.red}--- ACTION REQUIRED: Content Scraping Failures ---${colors.reset}\n`
  section += `  The following sources successfully scraped headlines but failed to extract article content for high-relevance items.\n`
  section += `  Their 'articleSelector' likely needs to be updated:\n`
  sources.forEach((sourceName) => {
    section += `  - ${sourceName}\n`
  })
  return section + '\n'
}

export async function formatStrugglingSources(runStats, dbStats) {
  const headlineFailures = (runStats.scraperHealth || []).filter((h) => !h.success)
  const strugglingSources = new Map()

  headlineFailures.forEach((failure) => {
    strugglingSources.set(
      failure.source,
      'Scraped 0 headlines (Immediate Action Required)'
    )
  })

  let section = `  ${colors.magenta}Actionable Source Health Alerts:${colors.reset}\n`
  if (strugglingSources.size > 0) {
    strugglingSources.forEach((reason, sourceName) => {
      section += `  ${colors.red}${`- ${truncateSourceName(sourceName)}:`.padEnd(
        25
      )}${reason}${colors.reset}\n`
    })
  } else {
    section += `  ${colors.green}  All sources are performing within expected parameters.${colors.reset}\n`
  }
  return section + '\n'
}

export function formatTopSources(dbStats) {
  return ''
}

```


================================================================================

# 📦 PACKAGE: AI-SERVICES

# 📁 PROJECT DIRECTORY STRUCTURE

Total: 78 files, 8 directories

```
headlines/
├── 📁 src/
│   ├── 📁 agents/
│   │   ├── 📄 articleAgent.js
│   │   ├── 📄 articlePreAssessmentAgent.js
│   │   ├── 📄 batchArticleAgent.js
│   │   ├── 📄 clusteringAgent.js
│   │   ├── 📄 contactAgent.js
│   │   ├── 📄 emailAgents.js
│   │   ├── 📄 entityAgent.js
│   │   ├── 📄 executiveSummaryAgent.js
│   │   ├── 📄 headlineAgent.js
│   │   ├── 📄 judgeAgent.js
│   │   ├── 📄 opportunityAgent.js
│   │   ├── 📄 sectionClassifierAgent.js
│   │   ├── 📄 selectorRepairAgent.js
│   │   ├── 📄 synthesisAgent.js
│   │   └── 📄 watchlistAgent.js
│   ├── 📁 chains/
│   │   ├── 📄 articleChain.js
│   │   ├── 📄 articlePreAssessmentChain.js
│   │   ├── 📄 batchHeadlineChain.js
│   │   ├── 📄 clusteringChain.js
│   │   ├── 📄 contactFinderChain.js
│   │   ├── 📄 contactResolverChain.js
│   │   ├── 📄 countryCorrectionChain.js
│   │   ├── 📄 disambiguationChain.js
│   │   ├── 📄 emailIntroChain.js
│   │   ├── 📄 emailSubjectChain.js
│   │   ├── 📄 entityCanonicalizerChain.js
│   │   ├── 📄 entityExtractorChain.js
│   │   ├── 📄 executiveSummaryChain.js
│   │   ├── 📄 headlineChain.js
│   │   ├── 📄 index.js
│   │   ├── 📄 judgeChain.js
│   │   ├── 📄 opportunityChain.js
│   │   ├── 📄 sectionClassifierChain.js
│   │   ├── 📄 selectorRepairChain.js
│   │   ├── 📄 synthesisChain.js
│   │   ├── 📄 translateChain.js
│   │   └── 📄 watchlistSuggestionChain.js
│   ├── 📁 embeddings/
│   │   ├── 📄 embeddings.js
│   │   └── 📄 vectorSearch.js
│   ├── 📁 lib/
│   │   ├── 📄 AIAgent.js
│   │   ├── 📄 langchain.js
│   │   └── 📄 safeInvoke.js
│   ├── 📁 rag/
│   │   ├── 📄 generation.js
│   │   ├── 📄 orchestrator.js
│   │   ├── 📄 planner.js
│   │   ├── 📄 prompts.js
│   │   ├── 📄 retrieval.js
│   │   └── 📄 validation.js
│   ├── 📁 schemas/
│   │   ├── 📄 articleAssessmentSchema.js
│   │   ├── 📄 articlePreAssessmentSchema.js
│   │   ├── 📄 batchArticleAssessmentSchema.js
│   │   ├── 📄 batchHeadlineAssessmentSchema.js
│   │   ├── 📄 canonicalizerSchema.js
│   │   ├── 📄 clusterSchema.js
│   │   ├── 📄 countryCorrectionSchema.js
│   │   ├── 📄 disambiguationSchema.js
│   │   ├── 📄 emailIntroSchema.js
│   │   ├── 📄 emailSubjectSchema.js
│   │   ├── 📄 enrichContactSchema.js
│   │   ├── 📄 entitySchema.js
│   │   ├── 📄 executiveSummarySchema.js
│   │   ├── 📄 findContactSchema.js
│   │   ├── 📄 headlineAssessmentSchema.js
│   │   ├── 📄 index.js
│   │   ├── 📄 judgeSchema.js
│   │   ├── 📄 opportunitySchema.js
│   │   ├── 📄 sectionClassifierSchema.js
│   │   ├── 📄 selectorRepairSchema.js
│   │   ├── 📄 synthesisSchema.js
│   │   ├── 📄 translateSchema.js
│   │   └── 📄 watchlistSuggestionSchema.js
│   ├── 📁 search/
│   │   ├── 📄 search.js
│   │   ├── 📄 serpapi.js
│   │   └── 📄 wikipedia.js
│   ├── 📄 core.js
│   ├── 📄 index.js
│   └── 📄 next.js
└── 📄 package.json
```

# 📋 PROJECT METADATA

**Generated**: 2025-09-29T13:20:36.398Z
**Repository Path**: /home/mark/Repos/projects/headlines/packages/ai-services
**Total Files**: 78
**Package**: @headlines/ai-services@1.0.0
**Description**: Centralized, LangChain-powered AI and external service logic.



---


## 📄 package.json
*Lines: 35, Size: 946 Bytes*

```json
{
  "name": "@headlines/ai-services",
  "version": "1.0.0",
  "description": "Centralized, LangChain-powered AI and external service logic.",
  "main": "src/index.js",
  "type": "module",
  "license": "ISC",
  "exports": {
    ".": "./src/index.js",
    "./node": "./src/index.js",
    "./next": "./src/next.js"
  },
  "dependencies": {
    "@headlines/config": "workspace:*",
    "@headlines/models": "workspace:*",
    "@headlines/prompts": "workspace:*",
    "@headlines/utils-shared": "workspace:*",
    "@headlines/utils-server": "workspace:*",
    "@langchain/community": "*",
    "@langchain/core": "*",
    "@langchain/openai": "*",
    "@langchain/pinecone": "*",
    "@pinecone-database/pinecone": "^2.2.2",
    "@xenova/transformers": "^2.17.2",
    "axios": "^1.7.2",
    "langchain": "*",
    "newsapi": "^2.4.1",
    "openai": "^5.22.0",
    "p-limit": "^5.0.0",
    "serpapi": "^2.1.0",
    "sharp": "0.33.4",
    "zod": "*"
  }
}

```

## 📄 src/agents/articleAgent.js
*Lines: 76, Size: 2.64 KB*

```javascript
'use server'

import { truncateString } from '@headlines/utils-shared'
import { logger } from '@headlines/utils-server/node'
import { AIAgent } from '../lib/AIAgent.js'
import { articleAssessmentSchema } from '../schemas/articleAssessmentSchema.js'
import { settings } from '@headlines/config/node'
import {
  getInstructionArticle,
  shotsInputArticle,
  shotsOutputArticle,
} from '@headlines/prompts'

const getAgent = () =>
  new AIAgent({
    model: settings.LLM_MODEL_ARTICLE_ASSESSMENT,
    systemPrompt: getInstructionArticle,
    fewShotInputs: shotsInputArticle,
    fewShotOutputs: shotsOutputArticle,
    zodSchema: articleAssessmentSchema,
  })

// The agent now accepts `hits` as a parameter, breaking the circular dependency.
// It is no longer responsible for fetching data.
export async function assessArticleContent(article, hits = [], isSalvaged = false) {
  const articleAssessmentAgent = getAgent()
  const fullContent = (article.articleContent?.contents || []).join('\n')
  const truncatedContent = truncateString(fullContent, settings.LLM_CONTEXT_MAX_CHARS)

  if (fullContent.length > settings.LLM_CONTEXT_MAX_CHARS) {
    logger.warn(
      {
        originalLength: fullContent.length,
        truncatedLength: truncatedContent.length,
        limit: settings.LLM_CONTEXT_MAX_CHARS,
      },
      `Article content for LLM was truncated to prevent context overload.`
    )
  }

  let articleText = `HEADLINE: ${article.headline}\n\nBODY:\n${truncatedContent}`

  if (hits.length > 0) {
    const hitStrings = hits.map(
      (hit) => `[WATCHLIST HIT: ${hit.name} | CONTEXT: ${hit.context || 'N/A'}]`
    )
    const hitPrefix = hitStrings.join(' ')
    articleText = `${hitPrefix} ${articleText}`
    logger.info({ hits: hits.map((h) => h.name) }, 'Watchlist entities found in article.')
  }

  if (isSalvaged) {
    articleText = `[SALVAGE CONTEXT: The original source for this headline failed to scrape. This content is from an alternative source. Please assess based on this new context.]\n\n${articleText}`
  }

  const response = await articleAssessmentAgent.execute(articleText)

  if (response.error) {
    logger.error(
      { article: { link: article.link }, details: response },
      `Article assessment failed for ${article.link}.`
    )
    return { ...article, error: `AI Error: ${response.error}` }
  }

  if (
    response.amount > 0 &&
    response.amount < settings.MINIMUM_EVENT_AMOUNT_USD_MILLIONS
  ) {
    response.relevance_article = 10
    response.assessment_article = `Dropped: Amount ($${response.amount}M) is below the financial threshold of $${settings.MINIMUM_EVENT_AMOUNT_USD_MILLIONS}M.`
  }

  return { ...article, ...response, error: null }
}

```

## 📄 src/agents/articlePreAssessmentAgent.js
*Lines: 24, Size: 829 Bytes*

```javascript
// This file is a standard server-side JavaScript module.
// It does NOT contain environment-specific directives.

import { AIAgent } from '../lib/AIAgent.js'
import { articlePreAssessmentSchema } from '../schemas/articlePreAssessmentSchema.js'
import { settings } from '@headlines/config/node'
import { instructionArticlePreAssessment } from '@headlines/prompts'

const getAgent = () =>
  new AIAgent({
    model: settings.LLM_MODEL_UTILITY,
    systemPrompt: instructionArticlePreAssessment,
    zodSchema: articlePreAssessmentSchema,
  })

export async function preAssessArticle(articleContent) {
  const articlePreAssessmentAgent = getAgent()
  const response = await articlePreAssessmentAgent.execute(articleContent)
  if (response.error) {
    return { classification: null, error: response.error }
  }
  return response
}

```

## 📄 src/agents/batchArticleAgent.js
*Lines: 67, Size: 2.2 KB*

```javascript
// This is a standard server-side module, do not add environment-specific directives.

import { logger } from '@headlines/utils-server/node'
import { AIAgent } from '../lib/AIAgent.js'
import { batchArticleAssessmentSchema } from '../schemas/batchArticleAssessmentSchema.js'
import { settings, AI_BATCH_SIZE } from '@headlines/config/node'
import { getInstructionBatchArticleAssessment } from '@headlines/prompts'
import { assessArticleContent } from './articleAgent.js' // The fallback single-article agent

const getAgent = () =>
  new AIAgent({
    model: settings.LLM_MODEL_ARTICLE_ASSESSMENT,
    systemPrompt: getInstructionBatchArticleAssessment,
    zodSchema: batchArticleAssessmentSchema,
  })

export async function batchAssessArticles(articles) {
  if (!articles || articles.length === 0) return []

  const batchAgent = getAgent()
  const articleBatches = []
  // Use the centralized batch size from config
  for (let i = 0; i < articles.length; i += AI_BATCH_SIZE) {
    articleBatches.push(articles.slice(i, i + AI_BATCH_SIZE))
  }

  const allResults = []

  for (const batch of articleBatches) {
    const payload = batch.map((article) => ({
      headline: article.headline,
      content: (article.articleContent?.contents || []).join('\n'),
    }))

    const response = await batchAgent.execute(JSON.stringify(payload))

    if (
      response.error ||
      !response.assessments ||
      response.assessments.length !== batch.length
    ) {
      logger.error(
        {
          details: response,
          expectedCount: batch.length,
          receivedCount: response.assessments?.length,
        },
        'Batch assessment failed or returned mismatched count. Falling back to single-article processing for this batch.'
      )

      // The fallback now correctly calls the refactored single-article agent
      const fallbackPromises = batch.map((article) => assessArticleContent(article))
      const fallbackResults = await Promise.all(fallbackPromises)
      allResults.push(...fallbackResults)
      continue
    }

    const mergedResults = batch.map((originalArticle, index) => ({
      ...originalArticle,
      ...response.assessments[index],
    }))
    allResults.push(...mergedResults)
  }

  return allResults
}

```

## 📄 src/agents/clusteringAgent.js
*Lines: 77, Size: 2.6 KB*

```javascript
import { logger } from '@headlines/utils-server/node'
import { AIAgent } from '../lib/AIAgent.js'
import { clusterSchema } from '../schemas/clusterSchema.js'
import { settings, LLM_CONTEXT_MAX_CHARS } from '@headlines/config/node'
import { instructionCluster } from '@headlines/prompts'

const CLUSTER_BATCH_SIZE = 25 // This is a processing batch, not a model limit, so it can be defined locally.

const getAgent = () =>
  new AIAgent({
    // Correct: Use the settings object for the model name
    model: settings.LLM_MODEL_SYNTHESIS, // Clustering is a high-level synthesis task
    systemPrompt: instructionCluster,
    zodSchema: clusterSchema,
  })

export async function clusterArticlesIntoEvents(articles) {
  const articleClusterAgent = getAgent()
  logger.info(`Clustering ${articles.length} articles into unique events...`)

  if (!articles || articles.length === 0) {
    return []
  }

  const batches = []
  for (let i = 0; i < articles.length; i += CLUSTER_BATCH_SIZE) {
    batches.push(articles.slice(i, i + CLUSTER_BATCH_SIZE))
  }
  logger.info(`Processing clusters in ${batches.length} batches.`)

  const allClusters = []
  for (const [index, batch] of batches.entries()) {
    logger.info(`Clustering batch ${index + 1} of ${batches.length}...`)
    const articlePayload = batch.map((a) => ({
      id: a._id.toString(),
      headline: a.headline,
      source: a.newspaper,
      // Use a more robust summary, preferring the AI's assessment
      summary: (a.assessment_article || a.assessment_headline || '').substring(0, 400),
    }))
    const userContent = JSON.stringify(articlePayload)
    const response = await articleClusterAgent.execute(userContent)

    if (response.error || !response.events) {
      logger.error(`Failed to cluster articles in batch ${index + 1}.`, {
        response,
      })
      continue
    }
    allClusters.push(...response.events)
  }

  if (allClusters.length === 0) {
    logger.warn('Failed to cluster any articles across all batches.')
    return []
  }

  // De-duplicate clusters that might have been created across batches with the same key
  const finalEventMap = new Map()
  allClusters.forEach((event) => {
    if (finalEventMap.has(event.event_key)) {
      const existing = finalEventMap.get(event.event_key)
      event.article_ids.forEach((id) => existing.article_ids.add(id))
    } else {
      finalEventMap.set(event.event_key, {
        event_key: event.event_key,
        article_ids: new Set(event.article_ids),
      })
    }
  })

  return Array.from(finalEventMap.values()).map((event) => ({
    event_key: event.event_key,
    article_ids: Array.from(event.article_ids),
  }))
}

```

## 📄 src/agents/contactAgent.js
*Lines: 61, Size: 2.09 KB*

```javascript
import { logger } from '@headlines/utils-server/node';
import { AIAgent } from '../lib/AIAgent.js';
import { findContactSchema } from '../schemas/findContactSchema.js';
import { settings } from '@headlines/config/node';
import { instructionContacts } from '@headlines/prompts';
import { performGoogleSearch } from '../search/search.js'; // Import search function directly

const getFinderAgent = () =>
  new AIAgent({
    model: settings.LLM_MODEL_ARTICLE_ASSESSMENT,
    systemPrompt: instructionContacts,
    zodSchema: findContactSchema,
  });

/**
 * Uses Google search and an AI agent to find a contact email for a given person.
 * @param {object} person - An object representing the person to research.
 *  - {string} reachOutTo - The person's full name.
 *  - {object} contactDetails - An object with a `company` property.
 * @returns {Promise<{email: string|null}>} An object containing the found email or null.
 */
export async function findContactDetails(person) {
  const contactFinderAgent = getFinderAgent();
  logger.info(`[Contact Research Agent] Initiated for: ${person.reachOutTo}`);
  
  const company = person.contactDetails?.company || '';
  const queries = [
    `"${person.reachOutTo}" ${company} email address`,
    `"${person.reachOutTo}" contact information`,
  ];

  let combinedSnippets = '';
  for (const query of queries) {
    const searchResult = await performGoogleSearch(query);
    if (searchResult.success && searchResult.snippets) {
      combinedSnippets += `\n--- Results for query: "${query}" ---\n${searchResult.snippets}`;
    }
  }

  if (!combinedSnippets) {
    logger.warn(
      `[Contact Research Agent] No search results for "${person.reachOutTo}".`
    );
    return { email: null };
  }

  const response = await contactFinderAgent.execute(combinedSnippets);

  if (response.error || !response.email) {
    logger.warn(
      `[Contact Research Agent] LLM failed to extract details for "${person.reachOutTo}".`
    );
    return { email: null };
  }

  logger.info(
    { details: response },
    `[Contact Research Agent] Found details for "${person.reachOutTo}".`
  );
  return response;
}
```

## 📄 src/agents/emailAgents.js
*Lines: 80, Size: 2.92 KB*

```javascript
import { logger } from '@headlines/utils-server/node'
import { AIAgent } from '../lib/AIAgent.js'
import { emailSubjectSchema } from '../schemas/emailSubjectSchema.js'
import { emailIntroSchema } from '../schemas/emailIntroSchema.js'
import { settings } from '@headlines/config/node'
import { instructionEmailSubject, instructionEmailIntro } from '@headlines/prompts'

const getAgent = (systemPrompt, zodSchema) =>
  new AIAgent({
    model: settings.LLM_MODEL_SYNTHESIS,
    systemPrompt,
    zodSchema,
  })

export async function generateEmailSubjectLine(events) {
  const subjectLineAgent = getAgent(instructionEmailSubject, emailSubjectSchema)
  try {
    const eventPayload = events.map((e) => ({
      headline: e.synthesized_headline,
      summary: e.synthesized_summary,
    }))
    const response = await subjectLineAgent.execute(JSON.stringify(eventPayload))
    if (response.error || !response.subject_headline) {
      logger.warn('AI failed to generate a custom email subject line.', response)
      return 'Key Developments' // Fallback
    }
    return response.subject_headline
  } catch (error) {
    logger.error({ err: error }, 'Error in generateEmailSubjectLine')
    return 'Key Developments' // Fallback
  }
}

export async function generatePersonalizedIntro(user, events) {
  const introAgent = getAgent(instructionEmailIntro, emailIntroSchema)
  try {
    const eventPayload = events.map((e) => ({
      headline: e.synthesized_headline,
      summary: e.synthesized_summary,
    }))
    const payload = {
      firstName: user.firstName,
      events: eventPayload,
    }
    const response = await introAgent.execute(JSON.stringify(payload))

    // The schema returns a structured object, not a simple string.
    if (response.error || !response.greeting) {
      logger.warn('AI failed to generate a personalized intro.', response)
      // Return a fallback object that matches the schema's structure
      return {
        greeting: `Dear ${user.firstName},`,
        body: 'Here are the latest relevant wealth events we have identified for your review.',
        bullets: events
          .slice(0, 2)
          .map(
            (e) =>
              `A key development regarding ${e.synthesized_headline.substring(0, 40)}...`
          ),
        signoff: 'We wish you a fruitful day!\\n\\nThe team at Wealth Watch',
      }
    }
    return response // Return the full structured object
  } catch (error) {
    logger.error({ err: error }, 'Error in generatePersonalizedIntro')
    // Return a fallback object that matches the schema's structure
    return {
      greeting: `Dear ${user.firstName},`,
      body: 'Here are the latest relevant wealth events we have identified for your review.',
      bullets: events
        .slice(0, 2)
        .map(
          (e) =>
            `A key development regarding ${e.synthesized_headline.substring(0, 40)}...`
        ),
      signoff: 'We wish you a fruitful day!\\n\\nThe team at Wealth Watch',
    }
  }
}

```

## 📄 src/agents/entityAgent.js
*Lines: 65, Size: 2.22 KB*

```javascript
import { logger } from '@headlines/utils-server/node'
import { AIAgent } from '../lib/AIAgent.js'
import { entitySchema } from '../schemas/entitySchema.js'
import { canonicalizerSchema } from '../schemas/canonicalizerSchema.js'
import { settings } from '@headlines/config/node'
import { instructionEntity, instructionCanonicalizer } from '@headlines/prompts'

const getEntityExtractorAgent = () =>
  new AIAgent({
    model: settings.LLM_MODEL_UTILITY,
    systemPrompt: instructionEntity,
    zodSchema: entitySchema,
  })

const getEntityCanonicalizerAgent = () =>
  new AIAgent({
    model: settings.LLM_MODEL_UTILITY,
    systemPrompt: instructionCanonicalizer,
    zodSchema: canonicalizerSchema,
  })

// Export the agent instance directly for potential reuse
export const entityCanonicalizerAgent = getEntityCanonicalizerAgent()

export async function extractEntities(text) {
  const entityExtractorAgent = getEntityExtractorAgent()
  // Use the exported agent instance
  const canonicalizer = entityCanonicalizerAgent

  if (!text) return []

  try {
    const response = await entityExtractorAgent.execute(`Article Text:\n${text}`)

    if (response.error) {
      throw new Error(response.error)
    }

    const { reasoning, entities } = response
    logger.info(`[Query Planner Agent] Reasoning: ${reasoning}`)
    if (!entities || !Array.isArray(entities)) return []

    const canonicalizationPromises = entities
      .map((entity) => entity.replace(/\s*\(.*\)\s*/g, '').trim())
      .filter(Boolean)
      .map(async (entity) => {
        const canonResponse = await canonicalizer.execute(entity)
        if (canonResponse && !canonResponse.error && canonResponse.canonical_name) {
          logger.trace(`Canonicalized "${entity}" -> "${canonResponse.canonical_name}"`)
          return canonResponse.canonical_name
        }
        return null
      })

    const canonicalEntities = await Promise.all(canonicalizationPromises)
    const uniqueEntities = [...new Set(canonicalEntities.filter(Boolean))]

    logger.info({ entities: uniqueEntities }, `Final list of canonical entities for RAG.`)
    return uniqueEntities
  } catch (error) {
    logger.warn({ err: error }, 'Wikipedia query planning (entity extraction) failed.')
    return []
  }
}

```

## 📄 src/agents/executiveSummaryAgent.js
*Lines: 36, Size: 1.24 KB*

```javascript
import { logger } from '@headlines/utils-server/node'
import { AIAgent } from '../lib/AIAgent.js'
import { executiveSummarySchema } from '../schemas/executiveSummarySchema.js'
import { settings } from '@headlines/config/node'
import { instructionExecutiveSummary } from '@headlines/prompts'

const getAgent = () =>
  new AIAgent({
    model: settings.LLM_MODEL_SYNTHESIS,
    systemPrompt: instructionExecutiveSummary,
    zodSchema: executiveSummarySchema,
  })

export async function generateExecutiveSummary(judgeVerdict, runStats) {
  const agent = getAgent()
  try {
    // Create a payload with the crucial context for the AI
    const payload = {
      freshHeadlinesFound: runStats.freshHeadlinesFound,
      judgeVerdict: judgeVerdict || { event_judgements: [], opportunity_judgements: [] },
    }

    const response = await agent.execute(JSON.stringify(payload))

    if (response.error || !response.summary) {
      logger.warn('AI failed to generate an executive summary.', response)
      return 'AI failed to generate a summary for this run.'
    }

    return response.summary
  } catch (error) {
    logger.error({ err: error }, 'Error in generateExecutiveSummary')
    return 'An unexpected error occurred while generating the executive summary.'
  }
}

```

## 📄 src/agents/headlineAgent.js
*Lines: 69, Size: 2.26 KB*

```javascript
import { logger } from '@headlines/utils-server/node'
import { AIAgent } from '../lib/AIAgent.js'
import { headlineAssessmentSchema } from '../schemas/headlineAssessmentSchema.js'
import { settings } from '@headlines/config/node'
import {
  instructionHeadlines,
  shotsInputHeadlines,
  shotsOutputHeadlines,
} from '@headlines/prompts'

const getAgent = () =>
  new AIAgent({
    model: settings.LLM_MODEL_HEADLINE_ASSESSMENT,
    systemPrompt: instructionHeadlines,
    fewShotInputs: shotsInputHeadlines,
    fewShotOutputs: shotsOutputHeadlines,
    zodSchema: headlineAssessmentSchema,
  })

// This agent now accepts pre-calculated hits. It no longer fetches data.
async function assessSingleHeadline(article, hits = []) {
  const headlineAssessmentAgent = getAgent()
  let headlineWithContext = `[COUNTRY CONTEXT: ${article.country}] ${article.headline}`

  if (hits.length > 0) {
    const hitStrings = hits
      .map(
        (hit) => `[WATCHLIST HIT: ${hit.entity.name} (matched on '${hit.matchedTerm}')]`
      )
      .join(' ')
    headlineWithContext = `${hitStrings} ${headlineWithContext}`
  }

  const response = await headlineAssessmentAgent.execute(headlineWithContext)

  // Define a default assessment object for fallback
  let assessment = {
    relevance_headline: 0,
    assessment_headline: 'AI assessment failed.',
    headline_en: article.headline,
  }

  if (response && response.assessment && response.assessment.length > 0) {
    assessment = response.assessment[0]
    let score = assessment.relevance_headline
    const boost = settings.WATCHLIST_SCORE_BOOST

    if (hits.length > 0 && boost > 0) {
      score = Math.min(100, score + boost)
      assessment.assessment_headline = `Watchlist boost (+${boost}). ${assessment.assessment_headline}`
    }
    assessment.relevance_headline = score
  }

  return { ...article, ...assessment }
}

// The batching function now needs to accept hits for each article.
// We'll pass an array of `hits` arrays.
export async function assessHeadlinesInBatches(articles, articlesHits) {
  const assessmentPromises = articles.map((article, index) => {
    const hitsForArticle = articlesHits[index] || []
    return assessSingleHeadline(article, hitsForArticle)
  })

  const results = await Promise.all(assessmentPromises)
  return results
}

```

## 📄 src/agents/judgeAgent.js
*Lines: 62, Size: 1.76 KB*

```javascript
import { logger } from '@headlines/utils-server/node'
import { AIAgent } from '../lib/AIAgent.js'
import { judgeSchema } from '../schemas/judgeSchema.js'
import { settings } from '@headlines/config/node'
import { instructionJudge } from '@headlines/prompts'

const getAgent = () =>
  new AIAgent({
    model: settings.LLM_MODEL_SYNTHESIS,
    systemPrompt: instructionJudge,
    zodSchema: judgeSchema,
  })

export async function judgePipelineOutput(events, opportunities) {
  const judgeAgent = getAgent()
  if (
    (!events || events.length === 0) &&
    (!opportunities || opportunities.length === 0)
  ) {
    return {
      event_judgements: [],
      opportunity_judgements: [],
    }
  }
  logger.info('⚖️ [Judge Agent] Reviewing final pipeline output for quality control...')

  const lightweightEvents = (events || []).map((e) => ({
    identifier: `Event: ${e.synthesized_headline}`,
    summary: e.synthesized_summary,
    assessment: e.ai_assessment_reason,
    score: e.highest_relevance_score,
  }))

  const lightweightOpportunities = (opportunities || []).map((o) => ({
    identifier: `Opportunity: ${o.reachOutTo}`,
    reason: o.whyContact,
    wealth_estimate_mm: o.likelyMMDollarWealth,
  }))

  const inputText = JSON.stringify({
    events: lightweightEvents,
    opportunities: lightweightOpportunities,
  })

  const response = await judgeAgent.execute(inputText)

  if (response.error) {
    logger.error({ details: response }, 'Judge Agent failed to produce a verdict.')
    // Return a default "empty" verdict on failure to avoid crashing the pipeline
    return {
      event_judgements: [],
      opportunity_judgements: [],
    }
  }

  logger.info(
    { details: response },
    '[Judge Agent] Successfully produced quality control verdicts.'
  )
  return response
}

```

## 📄 src/agents/opportunityAgent.js
*Lines: 69, Size: 2.28 KB*

```javascript
import { truncateString } from '@headlines/utils-shared'
import { logger } from '@headlines/utils-server/node'
import { AIAgent } from '../lib/AIAgent.js'
import { opportunitySchema } from '../schemas/opportunitySchema.js'
import { settings, LLM_CONTEXT_MAX_CHARS } from '@headlines/config/node'
import { getInstructionOpportunities } from '@headlines/prompts'

const getOppAgent = () =>
  new AIAgent({
    model: settings.LLM_MODEL_ARTICLE_ASSESSMENT,
    systemPrompt: getInstructionOpportunities,
    zodSchema: opportunitySchema,
  })

export async function generateOpportunitiesFromEvent(
  synthesizedEvent,
  articlesInCluster
) {
  const opportunityGeneratorAgent = getOppAgent()

  const highestRelevanceArticle = articlesInCluster.reduce((max, current) =>
    (current.relevance_article || 0) > (max.relevance_article || 0) ? current : max
  )

  const fullText = articlesInCluster
    .map((a) => (a.articleContent?.contents || []).join('\n'))
    .join('\n\n')

  const inputText = `
        Synthesized Event Headline: ${synthesizedEvent.synthesized_headline}
        Synthesized Event Summary: ${synthesizedEvent.synthesized_summary}
        Key Individuals already identified: ${JSON.stringify(synthesizedEvent.key_individuals)}
        Source Article Snippets: ${truncateString(fullText, LLM_CONTEXT_MAX_CHARS)}
    `

  const response = await opportunityGeneratorAgent.execute(inputText)

  if (response.error || !response.opportunities) {
    logger.warn(
      { event: synthesizedEvent.synthesized_headline, details: response },
      `Opportunity generation failed.`
    )
    return []
  }

  const validOpportunities = (response.opportunities || []).filter(
    (opp) =>
      opp.likelyMMDollarWealth === null || // Keep opportunities where wealth is unknown
      opp.likelyMMDollarWealth >= settings.MINIMUM_EVENT_AMOUNT_USD_MILLIONS
  )

  const opportunitiesWithSource = validOpportunities.map((opp) => ({
    ...opp,
    event_key: synthesizedEvent.event_key,
    sourceArticleId: highestRelevanceArticle._id,
  }))

  logger.info(
    { details: opportunitiesWithSource },
    `[Opportunity Agent] Generated ${
      opportunitiesWithSource.length
    } opportunity/ies from event "${truncateString(
      synthesizedEvent.synthesized_headline,
      50
    )}"`
  )
  return opportunitiesWithSource
}

```

## 📄 src/agents/sectionClassifierAgent.js
*Lines: 41, Size: 1.21 KB*

```javascript
import { logger } from '@headlines/utils-server/node'
import { AIAgent } from '../lib/AIAgent.js'
import { sectionClassifierSchema } from '../schemas/sectionClassifierSchema.js'
import { settings } from '@headlines/config/node'
import { instructionSectionClassifier } from '@headlines/prompts'

const getAgent = () =>
  new AIAgent({
    model: settings.LLM_MODEL_UTILITY, // Using the cheap and fast model
    systemPrompt: [
      instructionSectionClassifier.whoYouAre,
      instructionSectionClassifier.whatYouDo,
      ...instructionSectionClassifier.guidelines,
      instructionSectionClassifier.outputFormatDescription,
    ].join('\n\n'),
    zodSchema: sectionClassifierSchema,
  })

export async function classifyLinks(links) {
  if (!links || links.length === 0) {
    return []
  }

  const agent = getAgent()
  const response = await agent.execute(JSON.stringify(links))

  if (
    response.error ||
    !response.classifications ||
    response.classifications.length !== links.length
  ) {
    logger.error(
      { response, expectedCount: links.length },
      'Section classifier agent failed or returned mismatched count.'
    )
    return null // Return null to indicate failure
  }

  return response.classifications
}

```

## 📄 src/agents/selectorRepairAgent.js
*Lines: 54, Size: 1.58 KB*

```javascript
import { truncateString } from '@headlines/utils-shared'
import { logger } from '@headlines/utils-server/node'
import { AIAgent } from '../lib/AIAgent.js'
import { selectorRepairSchema } from '../schemas/selectorRepairSchema.js'
import { settings, LLM_CONTEXT_MAX_CHARS } from '@headlines/config/node'
import { instructionSelectorRepair } from '@headlines/prompts'

const getAgent = () =>
  new AIAgent({
    model: settings.LLM_MODEL_UTILITY,
    systemPrompt: [
      instructionSelectorRepair.whoYouAre,
      instructionSelectorRepair.whatYouDo,
      ...instructionSelectorRepair.guidelines,
      instructionSelectorRepair.outputFormatDescription,
      instructionSelectorRepair.reiteration,
    ].join('\n\n'),
    zodSchema: selectorRepairSchema,
  })

export async function suggestNewSelector(
  url,
  failedSelector,
  htmlContent,
  heuristicSuggestions = []
) {
  const selectorRepairAgent = getAgent()
  try {
    const payload = {
      url,
      failed_selector: failedSelector,
      heuristic_suggestions: heuristicSuggestions.map((s) => ({
        selector: s.selector,
        samples: s.samples.slice(0, 3),
      })),
      html_content: truncateString(htmlContent, LLM_CONTEXT_MAX_CHARS),
    }

    const response = await selectorRepairAgent.execute(JSON.stringify(payload))

    if (response.error || !response.suggested_selectors) {
      logger.error('Selector repair agent failed to produce a valid suggestion.', {
        response,
      })
      return null
    }

    return response
  } catch (error) {
    logger.error({ err: error }, 'Error in suggestNewSelector')
    return null
  }
}

```

## 📄 src/agents/synthesisAgent.js
*Lines: 99, Size: 3.04 KB*

```javascript
import { truncateString } from '@headlines/utils-shared'
import { logger } from '@headlines/utils-server/node'
import { AIAgent } from '../lib/AIAgent.js'
import { synthesisSchema } from '../schemas/synthesisSchema.js'
import { settings, LLM_CONTEXT_MAX_CHARS } from '@headlines/config/node'
import { instructionSynthesize } from '@headlines/prompts'

const getAgent = () =>
  new AIAgent({
    model: settings.LLM_MODEL_SYNTHESIS,
    systemPrompt: [
      instructionSynthesize.whoYouAre,
      instructionSynthesize.whatYouDo,
      ...instructionSynthesize.guidelines,
      instructionSynthesize.outputFormatDescription,
    ].join('\n\n'),
    zodSchema: synthesisSchema,
  })

export async function synthesizeEvent(
  articlesInCluster,
  historicalContext,
  wikipediaContext,
  newsApiContext
  // gdeltContext is no longer used, so it's removed.
) {
  const eventSynthesizerAgent = getAgent()

  const todayPayload = articlesInCluster.map((a) => ({
    headline: a.headline,
    source: a.newspaper,
    full_text: truncateString(
      (a.articleContent?.contents || []).join('\n'),
      // Use a safe division, prevent division by zero.
      LLM_CONTEXT_MAX_CHARS / (articlesInCluster.length || 1)
    ),
    key_individuals: a.key_individuals || [],
  }))

  const historyPayload = (historicalContext || []).map((h) => ({
    headline: h.headline,
    source: h.newspaper,
    published: h.createdAt,
    summary: h.assessment_article || '',
  }))

  const userContent = {
    "[ TODAY'S NEWS ]": todayPayload,
    '[ HISTORICAL CONTEXT (Internal Database) ]': historyPayload,
    '[ PUBLIC WIKIPEDIA CONTEXT ]': wikipediaContext || 'Not available.',
    '[ LATEST NEWS CONTEXT (NewsAPI) ]': newsApiContext || 'Not available.',
  }

  logger.trace({ synthesis_context: userContent }, '--- SYNTHESIS CONTEXT ---')

  const response = await eventSynthesizerAgent.execute(JSON.stringify(userContent))

  if (response.error) {
    logger.error('Failed to synthesize event.', { response })
    return { error: 'Synthesis failed' }
  }
  return response
}

export async function synthesizeFromHeadline(article) {
  const eventSynthesizerAgent = getAgent()
  logger.warn(
    { headline: article.headline },
    `Salvaging high-signal headline with failed enrichment...`
  )

  const todayPayload = [
    {
      headline: article.headline,
      source: article.newspaper,
      full_text:
        "NOTE: Full article text could not be retrieved. Synthesize based on the headline's explicit claims and your general knowledge.",
      key_individuals: article.key_individuals || [],
    },
  ]

  const userContent = {
    "[ TODAY'S NEWS ]": todayPayload,
    '[ HISTORICAL CONTEXT ]': [],
    '[ PUBLIC WIKIPEDIA CONTEXT ]': 'Not available.',
    '[ LATEST NEWS CONTEXT (NewsAPI) ]': 'Not available.',
  }

  logger.trace({ synthesis_context: userContent }, '--- SALVAGE SYNTHESIS CONTEXT ---')

  const response = await eventSynthesizerAgent.execute(JSON.stringify(userContent))

  if (response.error) {
    logger.error('Failed to salvage headline.', { response })
    return null
  }
  return response
}

```

## 📄 src/agents/watchlistAgent.js
*Lines: 48, Size: 1.77 KB*

```javascript
import { logger } from '@headlines/utils-server/node'
import { AIAgent } from '../lib/AIAgent.js'
import { watchlistSuggestionSchema } from '../schemas/watchlistSuggestionSchema.js'
import { settings } from '@headlines/config/node'
import { instructionWatchlistSuggestion } from '@headlines/prompts'

const getAgent = () =>
  new AIAgent({
    model: settings.LLM_MODEL_SYNTHESIS,
    systemPrompt: [
      instructionWatchlistSuggestion.whoYouAre,
      instructionWatchlistSuggestion.whatYouDo,
      ...instructionWatchlistSuggestion.guidelines,
      instructionWatchlistSuggestion.outputFormatDescription,
      instructionWatchlistSuggestion.reiteration,
    ].join('\n\n'),
    zodSchema: watchlistSuggestionSchema,
  })

/**
 * Analyzes events to generate new watchlist suggestions.
 * @param {Array<object>} events - High-quality synthesized events.
 * @param {Set<string>} existingWatchlistNames - A set of lowercase names already on the watchlist.
 * @returns {Promise<Array<object>>} An array of new WatchlistSuggestion documents.
 */
export async function generateWatchlistSuggestions(events, existingWatchlistNames) {
  const watchlistSuggestionAgent = getAgent()
  try {
    const payload = { events }
    const response = await watchlistSuggestionAgent.execute(JSON.stringify(payload))

    if (response.error || !Array.isArray(response.suggestions)) {
      logger.warn('AI failed to generate watchlist suggestions.', response)
      return []
    }

    // Post-filter to ensure we don't suggest entities that already exist
    const newSuggestions = response.suggestions.filter(
      (s) => !existingWatchlistNames.has(s.name.toLowerCase())
    )

    return newSuggestions
  } catch (error) {
    logger.error({ err: error }, 'Error in generateWatchlistSuggestions')
    return []
  }
}

```

## 📄 src/chains/articleChain.js
*Lines: 63, Size: 2.08 KB*

```javascript
import {
  ChatPromptTemplate,
  HumanMessagePromptTemplate,
  SystemMessagePromptTemplate,
} from '@langchain/core/prompts'
import { AIMessage, HumanMessage } from '@langchain/core/messages'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { settings } from '@headlines/config'
import {
  getInstructionArticle,
  shotsInputArticle,
  shotsOutputArticle,
} from '@headlines/prompts'
import { getHighPowerModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { logger } from '@headlines/utils-server/logger'
import { articleAssessmentSchema } from '../schemas/index.js'

const instructions = getInstructionArticle(settings)
const systemPrompt = [
  instructions.whoYouAre,
  instructions.whatYouDo,
  instructions.primaryMandate,
  instructions.analyticalFramework,
  instructions.scoring,
  instructions.outputFormatDescription,
  instructions.reiteration,
].join('\n\n')

const messages = [
  SystemMessagePromptTemplate.fromTemplate(systemPrompt),
  ...shotsInputArticle.flatMap((input, i) => [
    new HumanMessage(input),
    new AIMessage(shotsOutputArticle[i]),
  ]),
  HumanMessagePromptTemplate.fromTemplate('{article_text}'),
]

const prompt = ChatPromptTemplate.fromMessages(messages)
const chain = RunnableSequence.from([prompt, getHighPowerModel(), new JsonOutputParser()])

async function invoke(input) {
  const result = await safeInvoke(chain, input, 'articleChain', articleAssessmentSchema)
  if (result.error) return result
  if (result.key_individuals?.length > 0) {
    const articleTextLower = input.article_text.toLowerCase()
    result.key_individuals = result.key_individuals.filter((ind) => {
      if (!ind.name) return false
      const isPresent = ind.name
        .split(' ')
        .filter((p) => p.length > 2)
        .some((p) => articleTextLower.includes(p.toLowerCase()))
      if (!isPresent)
        logger.warn({ individual: ind.name }, 'Discarding hallucinated key individual.')
      return isPresent
    })
  }
  return result
}

export const articleChain = { invoke }

```

## 📄 src/chains/articlePreAssessmentChain.js
*Lines: 29, Size: 1.13 KB*

```javascript
// packages/ai-services/src/chains/articlePreAssessmentChain.js (version 2.3 - Final)
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { instructionArticlePreAssessment } from '@headlines/prompts'
import { getUtilityModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { articlePreAssessmentSchema } from '../schemas/index.js'

const systemPrompt = [
  instructionArticlePreAssessment.whoYouAre,
  instructionArticlePreAssessment.whatYouDo,
  instructionArticlePreAssessment.classificationFramework,
  instructionArticlePreAssessment.outputFormatDescription,
  instructionArticlePreAssessment.reiteration,
].join('\n\n')

const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', '{input}'],
])

const chain = RunnableSequence.from([prompt, getUtilityModel(), new JsonOutputParser()])

export const articlePreAssessmentChain = {
  invoke: (input) =>
    safeInvoke(chain, input, 'articlePreAssessmentChain', articlePreAssessmentSchema),
}

```

## 📄 src/chains/batchHeadlineChain.js
*Lines: 30, Size: 1.23 KB*

```javascript
// packages/ai-services/src/chains/batchHeadlineChain.js (version 1.0)
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { instructionBatchHeadlineAssessment } from '@headlines/prompts'
import { getHeadlineModel } from '../lib/langchain.js' // Use the specific model for headlines
import { safeInvoke } from '../lib/safeInvoke.js'
import { batchHeadlineAssessmentSchema } from '../schemas/index.js'

const systemPrompt = [
  instructionBatchHeadlineAssessment.whoYouAre,
  instructionBatchHeadlineAssessment.whatYouDo,
  instructionBatchHeadlineAssessment.primaryMandate,
  instructionBatchHeadlineAssessment.analyticalFramework,
  instructionBatchHeadlineAssessment.outputFormatDescription,
  instructionBatchHeadlineAssessment.reiteration,
].join('\n\n')

const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', '{headlines_json_string}'],
])

const chain = RunnableSequence.from([prompt, getHeadlineModel(), new JsonOutputParser()])

export const batchHeadlineChain = {
  invoke: (input) =>
    safeInvoke(chain, input, 'batchHeadlineChain', batchHeadlineAssessmentSchema),
}

```

## 📄 src/chains/clusteringChain.js
*Lines: 28, Size: 1 KB*

```javascript
// packages/ai-services/src/chains/clusteringChain.js (version 3.2 - Final)
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { instructionCluster } from '@headlines/prompts'
import { getHighPowerModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { clusterSchema } from '../schemas/index.js'

const systemPrompt = [
  instructionCluster.whoYouAre,
  instructionCluster.whatYouDo,
  ...instructionCluster.guidelines,
  instructionCluster.outputFormatDescription,
  instructionCluster.reiteration,
].join('\n\n')

const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', '{articles_json_string}'],
])

const chain = RunnableSequence.from([prompt, getHighPowerModel(), new JsonOutputParser()])

export const clusteringChain = {
  invoke: (input) => safeInvoke(chain, input, 'clusteringChain', clusterSchema),
}

```

## 📄 src/chains/contactFinderChain.js
*Lines: 28, Size: 1.01 KB*

```javascript
// packages/ai-services/src/chains/contactFinderChain.js (version 2.3 - Final)
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { instructionContacts } from '@headlines/prompts'
import { getHighPowerModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { findContactSchema } from '../schemas/index.js'

const systemPrompt = [
  instructionContacts.whoYouAre,
  instructionContacts.whatYouDo,
  ...instructionContacts.guidelines,
  instructionContacts.outputFormatDescription,
  instructionContacts.reiteration,
].join('\n\n')

const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', '{snippets}'],
])

const chain = RunnableSequence.from([prompt, getHighPowerModel(), new JsonOutputParser()])

export const contactFinderChain = {
  invoke: (input) => safeInvoke(chain, input, 'contactFinderChain', findContactSchema),
}

```

## 📄 src/chains/contactResolverChain.js
*Lines: 28, Size: 1.02 KB*

```javascript
// packages/ai-services/src/chains/contactResolverChain.js (version 2.3 - Final)
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { instructionEnrichContact } from '@headlines/prompts'
import { getHighPowerModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { enrichContactSchema } from '../schemas/index.js'

const systemPrompt = [
  instructionEnrichContact.whoYouAre,
  instructionEnrichContact.whatYouDo,
  ...instructionEnrichContact.guidelines,
  instructionEnrichContact.outputFormatDescription,
].join('\n\n')

const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', '{context}'],
])

const chain = RunnableSequence.from([prompt, getHighPowerModel(), new JsonOutputParser()])

export const contactResolverChain = {
  invoke: (input) =>
    safeInvoke(chain, input, 'contactResolverChain', enrichContactSchema),
}

```

## 📄 src/chains/countryCorrectionChain.js
*Lines: 40, Size: 2.07 KB*

```javascript
// packages/ai-services/src/chains/countryCorrectionChain.js
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { getUtilityModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { countryCorrectionSchema } from '../schemas/index.js'

const systemPrompt = `You are a data cleaning expert. Your sole task is to analyze a given text string that is supposed to represent a country and extract the single, correct, UN-recognized sovereign country name from it.

**CRITICAL INSTRUCTIONS:**
1.  Analyze the input string.
2.  Identify the most likely country. For example, "Denmark (Aarhus)" should be "Denmark". "London" should be "United Kingdom".
4.  Anything starting with "Central Europe" should be "Europe".
5.  "Denmark & Sweden" should be "Scandinavia"
6.  "International" should be "Global"
7. "Nordic Region" should be "Scandinavia" (also if followed by something between brackets)
8. "Pan-Europe" should be "Europe"
9. "Sweden & Norway" should be "Scandinavia"
10. "United States" should be "United States of America"
11. "UK" should be "United Kingdom"
12. anything starting with "Unknown" should simply be "Unknown"
13.  If a valid country name can be determined, return it.
14.  If the input is ambiguous or does not contain a clear country, you MUST return null.
15.  You MUST respond ONLY with a valid JSON object in this format: {{"country": "Correct Country Name"}} or {{"country": null}}`;

// DEFINITIVE FIX: The template variable must match the key used in the input object.
// Langchain expects the input variable to be directly in the template string.
const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', 'Location String: "{location_string}"'],
])

const chain = RunnableSequence.from([prompt, getUtilityModel(), new JsonOutputParser()])

export const countryCorrectionChain = {
  invoke: (input) =>
    safeInvoke(chain, input, 'countryCorrectionChain', countryCorrectionSchema),
}

```

## 📄 src/chains/disambiguationChain.js
*Lines: 28, Size: 1.02 KB*

```javascript
// packages/ai-services/src/chains/disambiguationChain.js (version 2.3 - Final)
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { instructionDisambiguation } from '@headlines/prompts'
import { getUtilityModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { disambiguationSchema } from '../schemas/index.js'

const systemPrompt = [
  instructionDisambiguation.whoYouAre,
  instructionDisambiguation.whatYouDo,
  ...instructionDisambiguation.guidelines,
  instructionDisambiguation.outputFormatDescription,
].join('\n\n')

const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', '{inputText}'],
])

const chain = RunnableSequence.from([prompt, getUtilityModel(), new JsonOutputParser()])

export const disambiguationChain = {
  invoke: (input) =>
    safeInvoke(chain, input, 'disambiguationChain', disambiguationSchema),
}

```

## 📄 src/chains/emailIntroChain.js
*Lines: 28, Size: 1.05 KB*

```javascript
// packages/ai-services/src/chains/emailIntroChain.js (version 2.3 - Final)
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { instructionEmailIntro } from '@headlines/prompts'
import { getHighPowerModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { emailIntroSchema } from '../schemas/index.js'

const systemPrompt = [
  instructionEmailIntro.whoYouAre,
  instructionEmailIntro.whatYouDo,
  ...instructionEmailIntro.guidelines,
  instructionEmailIntro.outputFormatDescription,
  instructionEmailIntro.reiteration,
].join('\n\n')

const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', 'Client and Event Data: {payload_json_string}'],
])

const chain = RunnableSequence.from([prompt, getHighPowerModel(), new JsonOutputParser()])

export const emailIntroChain = {
  invoke: (input) => safeInvoke(chain, input, 'emailIntroChain', emailIntroSchema),
}

```

## 📄 src/chains/emailSubjectChain.js
*Lines: 28, Size: 1.06 KB*

```javascript
// packages/ai-services/src/chains/emailSubjectChain.js (version 2.3 - Final)
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { instructionEmailSubject } from '@headlines/prompts'
import { getHighPowerModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { emailSubjectSchema } from '../schemas/index.js'

const systemPrompt = [
  instructionEmailSubject.whoYouAre,
  instructionEmailSubject.whatYouDo,
  ...instructionEmailSubject.guidelines,
  instructionEmailSubject.outputFormatDescription,
  instructionEmailSubject.reiteration,
].join('\n\n')

const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', 'Events Data: {events_json_string}'],
])

const chain = RunnableSequence.from([prompt, getHighPowerModel(), new JsonOutputParser()])

export const emailSubjectChain = {
  invoke: (input) => safeInvoke(chain, input, 'emailSubjectChain', emailSubjectSchema),
}

```

## 📄 src/chains/entityCanonicalizerChain.js
*Lines: 28, Size: 1.03 KB*

```javascript
// packages/ai-services/src/chains/entityCanonicalizerChain.js (version 2.3 - Final)
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { instructionCanonicalizer } from '@headlines/prompts'
import { getUtilityModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { canonicalizerSchema } from '../schemas/index.js'

const systemPrompt = [
  instructionCanonicalizer.whoYouAre,
  instructionCanonicalizer.whatYouDo,
  ...instructionCanonicalizer.guidelines,
  instructionCanonicalizer.outputFormatDescription,
].join('\n\n')

const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', '{entity_name}'],
])

const chain = RunnableSequence.from([prompt, getUtilityModel(), new JsonOutputParser()])

export const entityCanonicalizerChain = {
  invoke: (input) =>
    safeInvoke(chain, input, 'entityCanonicalizerChain', canonicalizerSchema),
}

```

## 📄 src/chains/entityExtractorChain.js
*Lines: 27, Size: 988 Bytes*

```javascript
// packages/ai-services/src/chains/entityExtractorChain.js (version 2.3 - Final)
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { instructionEntity } from '@headlines/prompts'
import { getUtilityModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { entitySchema } from '../schemas/index.js'

const systemPrompt = [
  instructionEntity.whoYouAre,
  instructionEntity.whatYouDo,
  ...instructionEntity.guidelines,
  instructionEntity.outputFormatDescription,
].join('\n\n')

const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', '{article_text}'],
])

const chain = RunnableSequence.from([prompt, getUtilityModel(), new JsonOutputParser()])

export const entityExtractorChain = {
  invoke: (input) => safeInvoke(chain, input, 'entityExtractorChain', entitySchema),
}

```

## 📄 src/chains/executiveSummaryChain.js
*Lines: 29, Size: 1.1 KB*

```javascript
// packages/ai-services/src/chains/executiveSummaryChain.js (version 2.3 - Final)
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { instructionExecutiveSummary } from '@headlines/prompts'
import { getHighPowerModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { executiveSummarySchema } from '../schemas/index.js'

const systemPrompt = [
  instructionExecutiveSummary.whoYouAre,
  instructionExecutiveSummary.whatYouDo,
  ...instructionExecutiveSummary.guidelines,
  instructionExecutiveSummary.outputFormatDescription,
  instructionExecutiveSummary.reiteration,
].join('\n\n')

const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', 'Run Data: {payload_json_string}'],
])

const chain = RunnableSequence.from([prompt, getHighPowerModel(), new JsonOutputParser()])

export const executiveSummaryChain = {
  invoke: (input) =>
    safeInvoke(chain, input, 'executiveSummaryChain', executiveSummarySchema),
}

```

## 📄 src/chains/headlineChain.js
*Lines: 84, Size: 2.72 KB*

```javascript
import {
  ChatPromptTemplate,
  HumanMessagePromptTemplate,
  SystemMessagePromptTemplate,
} from '@langchain/core/prompts'
import { AIMessage, HumanMessage } from '@langchain/core/messages'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import {
  instructionHeadlines,
  shotsInputHeadlines,
  shotsOutputHeadlines,
} from '@headlines/prompts' // Correct: Import from the monorepo package
import { getHighPowerModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { headlineAssessmentSchema } from '../schemas/index.js'
import { settings } from '@headlines/config/node' // Correct: Import from the /node entry point

const systemPrompt = [
  instructionHeadlines.whoYouAre,
  instructionHeadlines.whatYouDo,
  instructionHeadlines.primaryMandate,
  instructionHeadlines.analyticalFramework,
  instructionHeadlines.outputFormatDescription,
].join('\n\n')

const messages = [
  SystemMessagePromptTemplate.fromTemplate(systemPrompt),
  ...shotsInputHeadlines.flatMap((input, i) => [
    new HumanMessage(input),
    new AIMessage(shotsOutputHeadlines[i]),
  ]),
  HumanMessagePromptTemplate.fromTemplate('{headlineWithContext}'),
]

const prompt = ChatPromptTemplate.fromMessages(messages)
const chain = RunnableSequence.from([prompt, getHighPowerModel(), new JsonOutputParser()])

function prepareInput({ article, hits }) {
  let headlineWithContext = `[COUNTRY CONTEXT: ${article.country}] ${article.headline}`
  if (hits.length > 0) {
    const hitStrings = hits
      .map(
        (hit) => `[WATCHLIST HIT: ${hit.entity.name} (matched on '${hit.matchedTerm}')]`
      )
      .join(' ')
    headlineWithContext = `${hitStrings} ${headlineWithContext}`
  }
  return { headlineWithContext }
}

async function invoke({ article, hits }) {
  const input = prepareInput({ article, hits })
  const result = await safeInvoke(chain, input, 'headlineChain', headlineAssessmentSchema)

  if (result.error) {
    return {
      relevance_headline: 0,
      assessment_headline: 'AI assessment failed.',
      headline_en: article.headline,
    }
  }

  const assessment = result.assessment?.[0]
  if (assessment && hits.length > 0) {
    let score = assessment.relevance_headline
    if (settings.WATCHLIST_SCORE_BOOST > 0) {
      score = Math.min(100, score + settings.WATCHLIST_SCORE_BOOST)
      assessment.assessment_headline = `Watchlist boost (+${settings.WATCHLIST_SCORE_BOOST}). ${assessment.assessment_headline}`
    }
    assessment.relevance_headline = score
  }

  return (
    assessment || {
      relevance_headline: 0,
      assessment_headline: 'AI assessment failed.',
      headline_en: article.headline,
    }
  )
}

export const headlineChain = { invoke }

```

## 📄 src/chains/index.js
*Lines: 47, Size: 2.99 KB*

```javascript
// packages/ai-services/src/chains/index.js (version 3.1 - Final)
import { articleChain as ac } from './articleChain.js'
import { articlePreAssessmentChain as apac } from './articlePreAssessmentChain.js'
import { clusteringChain as cc } from './clusteringChain.js'
import { contactFinderChain as cfc } from './contactFinderChain.js'
import { contactResolverChain as crc } from './contactResolverChain.js'
import { disambiguationChain as dc } from './disambiguationChain.js'
import { emailIntroChain as eic } from './emailIntroChain.js'
import { emailSubjectChain as esc } from './emailSubjectChain.js'
import { entityCanonicalizerChain as ecc } from './entityCanonicalizerChain.js'
import { entityExtractorChain as eec } from './entityExtractorChain.js'
import { executiveSummaryChain as exsc } from './executiveSummaryChain.js'
import { headlineChain as hc } from './headlineChain.js'
import { judgeChain as jc } from './judgeChain.js'
import { opportunityChain as oc } from './opportunityChain.js'
import { sectionClassifierChain as scc } from './sectionClassifierChain.js'
import { selectorRepairChain as src } from './selectorRepairChain.js'
import { synthesisChain as sc } from './synthesisChain.js'
import { watchlistSuggestionChain as wsc } from './watchlistSuggestionChain.js'
import { batchHeadlineChain as bhc } from './batchHeadlineChain.js'
import { translateChain as tc } from './translateChain.js'
import { countryCorrectionChain as ccc } from './countryCorrectionChain.js'

// DEFINITIVE FIX: Export each chain's invoke method as a standalone async function
// to comply with "use server" constraints.
export const articleChain = async (input) => ac.invoke(input)
export const articlePreAssessmentChain = async (input) => apac.invoke(input)
export const clusteringChain = async (input) => cc.invoke(input)
export const contactFinderChain = async (input) => cfc.invoke(input)
export const contactResolverChain = async (input) => crc.invoke(input)
export const disambiguationChain = async (input) => dc.invoke(input)
export const emailIntroChain = async (input) => eic.invoke(input)
export const emailSubjectChain = async (input) => esc.invoke(input)
export const entityCanonicalizerChain = async (input) => ecc.invoke(input)
export const entityExtractorChain = async (input) => eec.invoke(input)
export const executiveSummaryChain = async (input) => exsc.invoke(input)
export const headlineChain = async (input) => hc.invoke(input)
export const judgeChain = async (input) => jc.invoke(input)
export const opportunityChain = async (input) => oc.invoke(input)
export const sectionClassifierChain = async (input) => scc.invoke(input)
export const selectorRepairChain = async (input) => src.invoke(input)
export const synthesisChain = async (input) => sc.invoke(input)
export const watchlistSuggestionChain = async (input) => wsc.invoke(input)
export const batchHeadlineChain = async (input) => bhc.invoke(input)
export const translateChain = async (input) => tc.invoke(input)
export const countryCorrectionChain = async (input) => ccc.invoke(input)

```

## 📄 src/chains/judgeChain.js
*Lines: 28, Size: 1011 Bytes*

```javascript
// packages/ai-services/src/chains/judgeChain.js (version 2.3 - Final)
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { instructionJudge } from '@headlines/prompts'
import { getHighPowerModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { judgeSchema } from '../schemas/index.js'

const systemPrompt = [
  instructionJudge.whoYouAre,
  instructionJudge.whatYouDo,
  ...instructionJudge.guidelines,
  instructionJudge.outputFormatDescription,
  instructionJudge.reiteration,
].join('\n\n')

const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', 'Data for review: {payload_json_string}'],
])

const chain = RunnableSequence.from([prompt, getHighPowerModel(), new JsonOutputParser()])

export const judgeChain = {
  invoke: (input) => safeInvoke(chain, input, 'judgeChain', judgeSchema),
}

```

## 📄 src/chains/opportunityChain.js
*Lines: 29, Size: 1.07 KB*

```javascript
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { getInstructionOpportunities } from '@headlines/prompts'
import { getHighPowerModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { opportunitySchema } from '../schemas/index.js'
// Correct: Import from the /node entry point for the pipeline/Node.js environment
import { settings } from '@headlines/config/node'

const instructions = getInstructionOpportunities(settings)
const systemPrompt = [
  instructions.whoYouAre,
  instructions.whatYouDo,
  ...instructions.guidelines,
  instructions.outputFormatDescription,
].join('\n\n')

const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', '{context_text}'],
])

const chain = RunnableSequence.from([prompt, getHighPowerModel(), new JsonOutputParser()])

export const opportunityChain = {
  invoke: (input) => safeInvoke(chain, input, 'opportunityChain', opportunitySchema),
}

```

## 📄 src/chains/sectionClassifierChain.js
*Lines: 34, Size: 1.95 KB*

```javascript
// packages/ai-services/src/chains/sectionClassifierChain.js (version 2.3.0)
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { getUtilityModel } from '../lib/langchain.js' // Correctly import the getter function
import { safeInvoke } from '../lib/safeInvoke.js'
import { sectionClassifierSchema } from '../schemas/index.js'

const INSTRUCTION = {
  whoYouAre:
    'You are a master website navigation analyst. Your task is to analyze a list of hyperlinks (anchor text and href) from a webpage and classify each one into one of four categories.',
  guidelines: [
    '**Categories:**',
    '1.  **"news_section"**: A link to a major category or section of news (e.g., "Business", "Technology", "World News", "/erhverv", "/økonomi").',
    '2.  **"article_headline"**: A link to a specific news article or story. The text is usually a full sentence or a descriptive title.',
    '3.  **"navigation"**: A link to a functional page on the site (e.g., "About Us", "Contact", "Login").',
    '4.  **"other"**: Any other type of link (advertisements, privacy policies, etc.).',
    '**Instructions:**',
    '-   You will receive a JSON array of link objects.',
    '-   You MUST return a JSON object with a single key, "classifications".',
    '-   The "classifications" array MUST contain one classification object for EACH link in the input, in the EXACT SAME ORDER.',
  ],
}

const systemPrompt = [INSTRUCTION.whoYouAre, ...INSTRUCTION.guidelines].join('\n\n')
const fullPrompt = `${systemPrompt}\n\nUser Input:\n{links_json_string}`
const prompt = ChatPromptTemplate.fromTemplate(fullPrompt)
const chain = RunnableSequence.from([prompt, getUtilityModel(), new JsonOutputParser()]) // Call the getter function

export const sectionClassifierChain = {
  invoke: (input) =>
    safeInvoke(chain, input, 'sectionClassifierChain', sectionClassifierSchema),
}

```

## 📄 src/chains/selectorRepairChain.js
*Lines: 29, Size: 1.07 KB*

```javascript
// packages/ai-services/src/chains/selectorRepairChain.js (version 2.3 - Final)
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { instructionSelectorRepair } from '@headlines/prompts'
import { getUtilityModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { selectorRepairSchema } from '../schemas/index.js'

const systemPrompt = [
  instructionSelectorRepair.whoYouAre,
  instructionSelectorRepair.whatYouDo,
  ...instructionSelectorRepair.guidelines,
  instructionSelectorRepair.outputFormatDescription,
  instructionSelectorRepair.reiteration,
].join('\n\n')

const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', '{payload_json_string}'],
])

const chain = RunnableSequence.from([prompt, getUtilityModel(), new JsonOutputParser()])

export const selectorRepairChain = {
  invoke: (input) =>
    safeInvoke(chain, input, 'selectorRepairChain', selectorRepairSchema),
}

```

## 📄 src/chains/synthesisChain.js
*Lines: 27, Size: 1007 Bytes*

```javascript
// packages/ai-services/src/chains/synthesisChain.js (version 2.3 - Final)
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { instructionSynthesize } from '@headlines/prompts'
import { getHighPowerModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { synthesisSchema } from '../schemas/index.js'

const systemPrompt = [
  instructionSynthesize.whoYouAre,
  instructionSynthesize.whatYouDo,
  ...instructionSynthesize.guidelines,
  instructionSynthesize.outputFormatDescription,
].join('\n\n')

const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', '{context_json_string}'],
])

const chain = RunnableSequence.from([prompt, getHighPowerModel(), new JsonOutputParser()])

export const synthesisChain = {
  invoke: (input) => safeInvoke(chain, input, 'synthesisChain', synthesisSchema),
}

```

## 📄 src/chains/translateChain.js
*Lines: 28, Size: 1.05 KB*

```javascript
// packages/ai-services/src/chains/translateChain.js (version 1.0.0)
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { instructionTranslate } from '@headlines/prompts'
import { getUtilityModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { translateSchema } from '../schemas/index.js'

const systemPrompt = [
  instructionTranslate.whoYouAre,
  instructionTranslate.whatYouDo,
  ...instructionTranslate.guidelines,
  instructionTranslate.outputFormatDescription,
  instructionTranslate.reiteration,
].join('\\n\\n')

const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', 'Target Language: {language}\\n\\nHTML Content:\\n```{html_content}```'],
])

const chain = RunnableSequence.from([prompt, getUtilityModel(), new JsonOutputParser()])

export const translateChain = {
  invoke: (input) => safeInvoke(chain, input, 'translateChain', translateSchema),
}

```

## 📄 src/chains/watchlistSuggestionChain.js
*Lines: 29, Size: 1.14 KB*

```javascript
// packages/ai-services/src/chains/watchlistSuggestionChain.js (version 2.3 - Final)
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { instructionWatchlistSuggestion } from '@headlines/prompts'
import { getHighPowerModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { watchlistSuggestionSchema } from '../schemas/index.js'

const systemPrompt = [
  instructionWatchlistSuggestion.whoYouAre,
  instructionWatchlistSuggestion.whatYouDo,
  ...instructionWatchlistSuggestion.guidelines,
  instructionWatchlistSuggestion.outputFormatDescription,
  instructionWatchlistSuggestion.reiteration,
].join('\n\n')

const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', 'Events Data: {events_json_string}'],
])

const chain = RunnableSequence.from([prompt, getHighPowerModel(), new JsonOutputParser()])

export const watchlistSuggestionChain = {
  invoke: (input) =>
    safeInvoke(chain, input, 'watchlistSuggestionChain', watchlistSuggestionSchema),
}

```

## 📄 src/core.js
*Lines: 132, Size: 4.58 KB*

```javascript
// This is the core, shared module for the ai-services package.
// It exports all AI chains, agents, and utility functions.

// --- Low-Level LangChain Primitives & Helpers ---
import { callLanguageModel } from './lib/langchain.js'
import * as chains from './chains/index.js'
import * as search from './search/search.js'
import * as wikipedia from './search/wikipedia.js'
import * as embeddings from './embeddings/embeddings.js'
import * as vectorSearch from './embeddings/vectorSearch.js'
import { processChatRequest } from './rag/orchestrator.js'
import { logger } from '@headlines/utils-server/node' // Use the node-safe entry point
import { settings } from '@headlines/config/node' // Use the node-safe entry point

// --- High-Level Agents (Moved from scraper-logic) ---
// Note: You will need to ensure the agent files themselves are moved into `packages/ai-services/src/agents/`
// and their internal imports are updated to be relative to their new location.
import { assessArticleContent } from './agents/articleAgent.js';
import { preAssessArticle } from './agents/articlePreAssessmentAgent.js';
import { batchAssessArticles } from './agents/batchArticleAgent.js';
import { clusterArticlesIntoEvents } from './agents/clusteringAgent.js';
import { findContactDetails } from './agents/contactAgent.js';
import { generateEmailSubjectLine, generatePersonalizedIntro } from './agents/emailAgents.js';
import { extractEntities, entityCanonicalizerAgent } from './agents/entityAgent.js';
import { generateExecutiveSummary } from './agents/executiveSummaryAgent.js';
import { assessHeadlinesInBatches } from './agents/headlineAgent.js';
import { judgePipelineOutput } from './agents/judgeAgent.js';
import { generateOpportunitiesFromEvent } from './agents/opportunityAgent.js';
import { classifyLinks as sectionClassifierAgent } from './agents/sectionClassifierAgent.js'; // aliased to match old export
import { suggestNewSelector } from './agents/selectorRepairAgent.js';
import { synthesizeEvent, synthesizeFromHeadline } from './agents/synthesisAgent.js';
import { generateWatchlistSuggestions } from './agents/watchlistAgent.js';

// --- Sanity Check Function ---
export async function performAiSanityCheck() {
  try {
    logger.info('🔬 Performing AI service sanity check (OpenAI)...')
    const answer = await callLanguageModel({
      modelName: settings.LLM_MODEL_UTILITY,
      prompt: 'What is in one word the name of the capital of France',
      isJson: false,
    })
    if (
      answer &&
      typeof answer === 'string' &&
      answer.trim().toLowerCase().includes('paris')
    ) {
      logger.info('✅ AI service sanity check passed.')
      return true
    } else {
      logger.fatal(
        { details: { expected: 'paris', received: answer } },
        `OpenAI sanity check failed.`
      )
      return false
    }
  } catch (error) {
    if (error.status === 401 || error.message?.includes('Incorrect API key')) {
      logger.fatal(`OpenAI sanity check failed due to INVALID API KEY (401).`)
    } else {
      logger.fatal(
        { err: error },
        'OpenAI sanity check failed with an unexpected API error.'
      )
    }
    return false
  }
}

// --- EXPORT ALL FUNCTIONALITY ---

// Foundational exports
export { processChatRequest, callLanguageModel }

// Low-level chains (re-exported from chains/index.js)
export const {
  articleChain,
  articlePreAssessmentChain,
  clusteringChain,
  contactFinderChain,
  contactResolverChain,
  disambiguationChain,
  emailIntroChain,
  emailSubjectChain,
  entityCanonicalizerChain,
  entityExtractorChain,
  executiveSummaryChain,
  headlineChain,
  batchHeadlineChain,
  judgeChain,
  opportunityChain,
  sectionClassifierChain,
  selectorRepairChain,
  synthesisChain,
  watchlistSuggestionChain,
  translateChain,
  countryCorrectionChain,
} = chains

// External search and data retrieval services
export const {
  findAlternativeSources,
  performGoogleSearch,
  findNewsApiArticlesForEvent,
} = search
export const { fetchWikipediaSummary } = wikipedia

// Vector embedding and search services
export const { generateEmbedding } = embeddings
export const { findSimilarArticles } = vectorSearch

// High-level agent functions
export {
  assessArticleContent,
  preAssessArticle,
  batchAssessArticles,
  clusterArticlesIntoEvents,
  findContactDetails,
  generateEmailSubjectLine,
  generatePersonalizedIntro,
  extractEntities,
  entityCanonicalizerAgent,
  assessHeadlinesInBatches,
  judgePipelineOutput,
  generateOpportunitiesFromEvent,
  sectionClassifierAgent,
  suggestNewSelector,
  synthesizeEvent,
  synthesizeFromHeadline,
  generateWatchlistSuggestions,
  generateExecutiveSummary,
}
```

## 📄 src/embeddings/embeddings.js
*Lines: 235, Size: 7.98 KB*

```javascript
// src/lib/embeddings.js (Enhanced version with query expansion and caching)
"use server";
import { pipeline } from '@xenova/transformers';

// In-memory cache for embeddings (consider Redis for production)
const embeddingCache = new Map();
const MAX_CACHE_SIZE = 1000;

// Singleton pattern to ensure we only load the model once per server instance
class EmbeddingPipeline {
    static task = 'feature-extraction';
    static model = 'Xenova/all-MiniLM-L6-v2';
    static instance = null;
    
    static async getInstance() {
        if (this.instance === null) {
            const { pipeline } = await import('@xenova/transformers');
            this.instance = await pipeline(this.task, this.model);
        }
        return this.instance;
    }
}

/**
 * Creates a cache key from text
 * @param {string} text 
 * @returns {string}
 */
function createCacheKey(text) {
    return `embed_${text.toLowerCase().trim().replace(/\s+/g, '_')}`;
}

/**
 * Manages cache size to prevent memory bloat
 */
function manageCacheSize() {
    if (embeddingCache.size >= MAX_CACHE_SIZE) {
        // Remove oldest 20% of entries (FIFO-ish)
        const keysToRemove = Array.from(embeddingCache.keys()).slice(0, Math.floor(MAX_CACHE_SIZE * 0.2));
        keysToRemove.forEach(key => embeddingCache.delete(key));
        console.log(`[Embedding Cache] Cleaned ${keysToRemove.length} entries`);
    }
}

/**
 * Generates an embedding for a given text with caching
 * @param {string} text The text to embed
 * @returns {Promise<Array<number>>} A promise that resolves to the embedding vector
 */
export async function generateEmbedding(text) {
    if (!text || text.trim().length === 0) {
        throw new Error('Text cannot be empty for embedding generation');
    }
    
    const cleanText = text.trim();
    const cacheKey = createCacheKey(cleanText);
    
    // Check cache first
    if (embeddingCache.has(cacheKey)) {
        console.log(`[Embedding Cache] Hit for text: "${cleanText.substring(0, 50)}..."`);
        return embeddingCache.get(cacheKey);
    }
    
    try {
        const extractor = await EmbeddingPipeline.getInstance();
        const output = await extractor(cleanText, { pooling: 'mean', normalize: true });
        const embedding = Array.from(output.data);
        
        // Cache the result
        manageCacheSize();
        embeddingCache.set(cacheKey, embedding);
        
        console.log(`[Embedding] Generated embedding for text: "${cleanText.substring(0, 50)}..." (${embedding.length} dimensions)`);
        return embedding;
        
    } catch (error) {
        console.error(`[Embedding Error] Failed to generate embedding: ${error.message}`);
        throw new Error(`Failed to generate embedding: ${error.message}`);
    }
}

/**
 * Generates multiple query variations to improve RAG recall
 * @param {string} originalQuery 
 * @returns {Promise<Array<Array<number>>>} Array of embeddings for different query variations
 */
export async function generateQueryEmbeddings(originalQuery) {
    const variations = generateQueryVariations(originalQuery);
    const embeddingPromises = variations.map(query => generateEmbedding(query));
    
    try {
        const embeddings = await Promise.all(embeddingPromises);
        console.log(`[Query Expansion] Generated ${embeddings.length} query variations for: "${originalQuery}" ->`, variations);
        return embeddings;
    } catch (error) {
        console.error(`[Query Expansion Error] ${error.message}`);
        // Fallback to original query only
        return [await generateEmbedding(originalQuery)];
    }
}

/**
 * Creates query variations to improve semantic search recall
 * @param {string} query 
 * @returns {Array<string>}
 */
function generateQueryVariations(query) {
    const originalQuery = query.trim();
    const variations = new Set([originalQuery]);

    // CORRECTED: Smartly strip disambiguation tags for broader searches
    const coreEntity = originalQuery.replace(/\s*\((company|person)\)$/, '').trim();
    if (coreEntity !== originalQuery) {
        variations.add(coreEntity);
    }

    // Pattern for "Who founded X?"
    const हूंFounderMatch = coreEntity.toLowerCase().match(/^(?:who|what)\s+(?:is|was|founded|created)\s+(.+)/);
    if ( हूंFounderMatch) {
        let subject = हूंFounderMatch[1].replace(/\?/g, '').replace(/^(the|a|an)\s/,'').trim();
        variations.add(subject);
        variations.add(`${subject} founder`);
        variations.add(`founder of ${subject}`);
        variations.add(`${subject} history`);
    } else {
        // General question pattern
        const questionMatch = coreEntity.toLowerCase().match(/^(who|what|when|where|why|how)\s(is|are|was|were|did|does|do)\s(.+)/);
        if (questionMatch) {
            let subject = questionMatch[3].replace(/\?/g, '').trim();
            variations.add(subject);
            
            const simplified = subject.replace(/^(the|a|an)\s/,'').split(' of ');
            if (simplified.length > 1) {
                variations.add(`${simplified[1].trim()} ${simplified[0].trim()}`);
            }
        }
    }
    
    // Add generic variations for the core entity
    if (hasProperNouns(coreEntity)) {
        variations.add(`${coreEntity} background details`);
        variations.add(`Information about ${coreEntity}`);
    }
    
    // Return the top 4 most distinct variations
    return Array.from(variations).slice(0, 4);
}


/**
 * Simple check for proper nouns (capitalized words not at the start of a sentence)
 * @param {string} text 
 * @returns {boolean}
 */
function hasProperNouns(text) {
    // Looks for words starting with an uppercase letter
    return /\b[A-Z][a-z]+/.test(text);
}

/**
 * Batch embedding generation for efficiency
 * @param {Array<string>} texts 
 * @returns {Promise<Array<Array<number>>>}
 */
export async function generateBatchEmbeddings(texts) {
    if (!texts || texts.length === 0) {
        return [];
    }
    
    const embeddings = [];
    const extractor = await EmbeddingPipeline.getInstance();
    
    // Process in batches to avoid memory issues
    const BATCH_SIZE = 10;
    for (let i = 0; i < texts.length; i += BATCH_SIZE) {
        const batch = texts.slice(i, i + BATCH_SIZE);
        const batchPromises = batch.map(text => {
            const cacheKey = createCacheKey(text);
            if (embeddingCache.has(cacheKey)) {
                return Promise.resolve(embeddingCache.get(cacheKey));
            }
            return extractor(text, { pooling: 'mean', normalize: true })
                .then(output => {
                    const embedding = Array.from(output.data);
                    embeddingCache.set(cacheKey, embedding);
                    return embedding;
                });
        });
        
        const batchEmbeddings = await Promise.all(batchPromises);
        embeddings.push(...batchEmbeddings);
        
        console.log(`[Batch Embedding] Processed batch ${Math.floor(i/BATCH_SIZE) + 1}/${Math.ceil(texts.length/BATCH_SIZE)}`);
    }
    
    return embeddings;
}

/**
 * Calculate cosine similarity between two embeddings
 * @param {Array<number>} embedding1 
 * @param {Array<number>} embedding2 
 * @returns {Promise<number>} Similarity score between 0 and 1
 */
export async function calculateSimilarity(embedding1, embedding2) {
    if (embedding1.length !== embedding2.length) {
        throw new Error('Embeddings must have the same dimensions');
    }
    
    let dotProduct = 0;
    let norm1 = 0;
    let norm2 = 0;
    
    for (let i = 0; i < embedding1.length; i++) {
        dotProduct += embedding1[i] * embedding2[i];
        norm1 += embedding1[i] * embedding1[i];
        norm2 += embedding2[i] * embedding2[i];
    }
    
    if (norm1 === 0 || norm2 === 0) return 0;
    
    return dotProduct / (Math.sqrt(norm1) * Math.sqrt(norm2));
}

/**
 * Get cache statistics for monitoring
 * @returns {Promise<Object>}
 */
export async function getCacheStats() {
    return {
        size: embeddingCache.size,
        maxSize: MAX_CACHE_SIZE,
        utilizationPercent: Math.round((embeddingCache.size / MAX_CACHE_SIZE) * 100)
    };
}
```

## 📄 src/embeddings/vectorSearch.js
*Lines: 77, Size: 2.49 KB*

```javascript
// packages/ai-services/src/embeddings/vectorSearch.js
'use server'
import { Pinecone } from '@pinecone-database/pinecone'
import { logger } from '@headlines/utils-server'
import { generateEmbedding } from './embeddings.js'
import { env } from '@headlines/config'

const { PINECONE_API_KEY, PINECONE_INDEX_NAME } = env

const SIMILARITY_THRESHOLD = 0.65
const MAX_CONTEXT_ARTICLES = 3
const MAX_RETRIES = 2 // Add retry configuration

let pineconeIndex
if (PINECONE_API_KEY) {
  const pc = new Pinecone({ apiKey: PINECONE_API_KEY })
  pineconeIndex = pc.index(PINECONE_INDEX_NAME)
} else {
  logger.warn(
    'Pinecone API Key not found. RAG/vector search functionality will be disabled.'
  )
}

export async function findSimilarArticles(queryText) {
  if (!pineconeIndex) return []
  logger.info('RAG: Searching for historical context in Pinecone...')
  if (!queryText || typeof queryText !== 'string' || queryText.trim().length === 0)
    return []

  for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
    try {
      const queryEmbedding = await generateEmbedding(queryText)

      const queryResponse = await pineconeIndex.query({
        topK: MAX_CONTEXT_ARTICLES,
        vector: queryEmbedding,
        includeMetadata: true,
      })

      const relevantMatches = queryResponse.matches.filter(
        (match) => match.score >= SIMILARITY_THRESHOLD
      )

      if (relevantMatches.length > 0) {
        const retrievedArticlesForLogging = relevantMatches
          .map(
            (match) =>
              `  - [Score: ${match.score.toFixed(3)}] "${match.metadata.headline}"`
          )
          .join('\n')
        logger.info(
          `RAG: Found ${relevantMatches.length} relevant historical articles:\n${retrievedArticlesForLogging}`
        )
        return relevantMatches.map((match) => ({
          headline: match.metadata.headline,
          newspaper: match.metadata.newspaper,
          assessment_article: match.metadata.summary,
        }))
      } else {
        logger.info('RAG: Found no relevant historical articles in Pinecone.')
        return []
      }
    } catch (error) {
      logger.error({ err: error }, `RAG: Pinecone query attempt ${attempt} failed.`)
      if (attempt === MAX_RETRIES) {
        logger.error(
          { err: error },
          'RAG: Pinecone query or embedding generation failed after all retries.'
        )
        return []
      }
      await new Promise((res) => setTimeout(res, 1000 * attempt)) // Exponential backoff
    }
  }
  return [] // Should be unreachable
}

```

## 📄 src/index.js
*Lines: 3, Size: 76 Bytes*

```javascript
// This is the default, Node.js-safe entry point.
export * from './core.js'

```

## 📄 src/lib/AIAgent.js
*Lines: 64, Size: 1.77 KB*

```javascript
import { callLanguageModel } from './langchain.js'
import { logger } from '@headlines/utils-server/node'

export class AIAgent {
  constructor({
    model,
    systemPrompt,
    isJson = true,
    fewShotInputs = [],
    fewShotOutputs = [],
    zodSchema,
  }) {
    if (!model || !systemPrompt) {
      throw new Error('AIAgent requires a model and systemPrompt.')
    }
    this.model = model
    this.systemPrompt = systemPrompt
    this.isJson = isJson
    this.fewShotInputs = fewShotInputs
    this.fewShotOutputs = fewShotOutputs
    this.zodSchema = zodSchema

    logger.trace(
      { agentConfig: { model, isJson, hasSchema: !!zodSchema } },
      'Initialized new AIAgent.'
    )
  }

  async execute(userContent) {
    let systemPromptContent = this.systemPrompt
    // If the provided prompt is a function (for dynamic settings), execute it.
    if (typeof systemPromptContent === 'function') {
      systemPromptContent = systemPromptContent()
    }

    const response = await callLanguageModel({
      modelName: this.model,
      systemPrompt: systemPromptContent,
      userContent,
      isJson: this.isJson,
      fewShotInputs: this.fewShotInputs,
      fewShotOutputs: this.fewShotOutputs,
    })

    if (this.isJson && this.zodSchema && !response.error) {
      const validationResult = this.zodSchema.safeParse(response)
      if (!validationResult.success) {
        logger.error(
          {
            details: validationResult.error.flatten(),
            model: this.model,
            rawResponse: response, // Log the raw response for debugging
          },
          `AI response failed Zod validation.`
        )
        return { error: 'Zod validation failed', details: validationResult.error }
      }
      return validationResult.data
    }

    return response
  }
}

```

## 📄 src/lib/langchain.js
*Lines: 92, Size: 2.97 KB*

```javascript
'use server';

import { ChatOpenAI } from '@langchain/openai';
import { env, settings } from '@headlines/config/node';
import { logger } from '@headlines/utils-server/node';
import { tokenTracker } from '@headlines/utils-server/node';
import { safeExecute } from '@headlines/utils-server/helpers';
import OpenAI from 'openai';

const modelConfig = { response_format: { type: 'json_object' } };

// Temperature parameters have been removed to rely on provider defaults, which is more robust.
export const getHeadlineModel = () =>
  new ChatOpenAI({ modelName: settings.LLM_MODEL_HEADLINE_ASSESSMENT }).bind(modelConfig);
export const getHighPowerModel = () =>
  new ChatOpenAI({ modelName: settings.LLM_MODEL_SYNTHESIS }).bind(modelConfig);
export const getUtilityModel = () =>
  new ChatOpenAI({ modelName: settings.LLM_MODEL_UTILITY }).bind(modelConfig);

const baseClient = new OpenAI({
  apiKey: env.OPENAI_API_KEY,
  timeout: 120 * 1000, // This is a TCP-level timeout, good to have.
  maxRetries: 3,
});

export async function callLanguageModel({
  modelName,
  prompt,
  systemPrompt,
  userContent,
  isJson = true,
  fewShotInputs = [],
  fewShotOutputs = [],
}) {
  const messages = [];
  if (systemPrompt) {
    const systemContent =
      typeof systemPrompt === 'object' ? JSON.stringify(systemPrompt) : systemPrompt;
    messages.push({ role: 'system', content: systemContent });
  }
  fewShotInputs.forEach((input, i) => {
    const shotContent = typeof input === 'string' ? input : JSON.stringify(input);
    if (shotContent) {
      messages.push({ role: 'user', content: shotContent });
      messages.push({ role: 'assistant', content: fewShotOutputs[i] });
    }
  });
  const finalUserContent = userContent || prompt;
  messages.push({ role: 'user', content: finalUserContent });
  logger.trace(
    { payload: { model: modelName, messages_count: messages.length } },
    'Sending payload to LLM.'
  );

  const apiPayload = {
    model: modelName,
    messages: messages,
  };
  if (isJson) {
    apiPayload.response_format = { type: 'json_object' };
  }

  // Use the robust safeExecute with its built-in timeout race.
  // We'll give it an 85-second timeout, slightly less than the safeExecute default.
  const result = await safeExecute(() => baseClient.chat.completions.create(apiPayload), {
    timeout: 85000,
  });

  if (!result) {
    // safeExecute will have already logged the error (timeout or otherwise).
    return { error: 'API call failed or timed out' };
  }

  if (result.usage) {
    tokenTracker.recordUsage(modelName, result.usage);
  }
  const responseContent = result.choices[0].message.content;
  logger.trace({ chars: responseContent.length }, 'Received LLM response.');

  if (isJson) {
    try {
      return JSON.parse(responseContent);
    } catch (parseError) {
      logger.error(
        { err: parseError, details: responseContent },
        `LLM response JSON Parse Error for model ${modelName}`
      );
      return { error: 'JSON Parsing Error' };
    }
  }
  return responseContent;
}
```

## 📄 src/lib/safeInvoke.js
*Lines: 94, Size: 2.96 KB*

```javascript
// File: packages/ai-services/src/lib/safeInvoke.js

'use server'
import { logger } from '@headlines/utils-server/logger'
import { getRedisClient } from '@headlines/utils-server/redisClient'
import { createHash } from 'crypto'
// REMOVED: StringOutputParser is no longer needed.

const MAX_RETRIES = 1
const CACHE_TTL_SECONDS = 60 * 60 * 24
const inMemoryCache = new Map()

function createCacheKey(agentName, input) {
  const hash = createHash('sha256') // FIX 1: Corrected hashing algorithm from 'sha269' to 'sha256'
  hash.update(JSON.stringify(input))
  return `ai_cache:${agentName}:${hash.digest('hex')}`
}

export async function safeInvoke(chain, input, agentName, zodSchema) {
  const redis = await getRedisClient()
  const cacheKey = createCacheKey(agentName, input)

  if (redis) {
    try {
      const cachedResult = await redis.get(cacheKey)
      if (typeof cachedResult === 'string' && cachedResult.length > 0) {
        logger.trace({ agent: agentName }, `[Redis Cache HIT] for ${agentName}.`)
        return JSON.parse(cachedResult)
      }
    } catch (err) {
      logger.error(
        { err, agent: agentName, key: cacheKey },
        `Redis GET or PARSE failed for ${agentName}.`
      )
    }
  } else if (inMemoryCache.has(cacheKey)) {
    logger.trace({ agent: agentName }, `[In-Memory Cache HIT] for ${agentName}.`)
    return inMemoryCache.get(cacheKey)
  }

  for (let attempt = 0; attempt <= MAX_RETRIES; attempt++) {
    try {
      // FIX 2: Invoke the chain directly. It already has a JsonOutputParser.
      // This eliminates the TypeError by not piping a JS object into a StringOutputParser.
      const result = await chain.invoke(input)

      const validation = zodSchema.safeParse(result)
      if (!validation.success) {
        logger.error(
          {
            details: validation.error.flatten(),
            agent: agentName,
            input,
            output: result,
          },
          `Zod validation failed for ${agentName}.`
        )
        throw new Error('Zod validation failed')
      }
      const dataToCache = validation.data

      if (redis) {
        try {
          await redis.set(cacheKey, JSON.stringify(dataToCache), {
            EX: CACHE_TTL_SECONDS,
          })
        } catch (err) {
          logger.error({ err, agent: agentName }, `Redis SET failed for ${agentName}.`)
        }
      } else {
        inMemoryCache.set(cacheKey, dataToCache)
      }
      return dataToCache
    } catch (error) {
      if (
        (error.message.includes('JSON') ||
          error.message.includes('Zod validation failed')) &&
        attempt < MAX_RETRIES
      ) {
        logger.warn(
          { agent: agentName, attempt: attempt + 1 },
          `LLM output validation failed for ${agentName}. Retrying...`
        )
        continue
      }
      logger.error(
        { err: error, agent: agentName },
        `LangChain invocation failed for ${agentName}.`
      )
      return { error: `Agent ${agentName} failed: ${error.message}` }
    }
  }
}

```

## 📄 src/next.js
*Lines: 65, Size: 1.46 KB*

```javascript
import 'server-only'

// Explicitly re-export all functions and services from the core module
// for the Next.js server runtime.
export {
  // Foundational exports
  performAiSanityCheck,
  processChatRequest,
  callLanguageModel,

  // Low-level chains
  articleChain,
  articlePreAssessmentChain,
  clusteringChain,
  contactFinderChain,
  contactResolverChain,
  disambiguationChain,
  emailIntroChain,
  emailSubjectChain,
  entityCanonicalizerChain,
  entityExtractorChain,
  executiveSummaryChain,
  headlineChain,
  batchHeadlineChain,
  judgeChain,
  opportunityChain,
  sectionClassifierChain,
  selectorRepairChain,
  synthesisChain,
  watchlistSuggestionChain,
  translateChain,
  countryCorrectionChain,

  // External search and data retrieval services
  findAlternativeSources,
  performGoogleSearch,
  findNewsApiArticlesForEvent,
  fetchWikipediaSummary,

  // Vector embedding and search services
  generateEmbedding,
  findSimilarArticles,

  // High-level agent functions
  assessArticleContent,
  preAssessArticle,
  batchAssessArticles,
  clusterArticlesIntoEvents,
  resolveVagueContact,
  findContactDetails,
  generateEmailSubjectLine,
  generatePersonalizedIntro,
  extractEntities,
  entityCanonicalizerAgent,
  assessHeadlinesInBatches,
  judgePipelineOutput,
  generateOpportunitiesFromEvent,
  sectionClassifierAgent,
  suggestNewSelector,
  synthesizeEvent,
  synthesizeFromHeadline,
  generateWatchlistSuggestions,
  generateExecutiveSummary,
} from './core.js'

```

## 📄 src/rag/generation.js
*Lines: 129, Size: 4.17 KB*

```javascript
// File: packages/ai-services/src/rag/generation.js (Unabridged, Final Fix)

'use server'

import { getSynthesizerPrompt } from './prompts.js'
import { checkGroundedness } from './validation.js'
import { callLanguageModel } from '../lib/langchain.js'
import { settings } from '@headlines/config'

const SYNTHESIZER_MODEL = settings.LLM_MODEL_SYNTHESIS

function assembleContext(ragResults, wikiResults, searchResults) {
  const dbContext =
    ragResults.length > 0
      ? ragResults
          .map(
            (match) =>
              `- [Similarity: ${match.score.toFixed(3)}] ${match.metadata.headline}: ${match.metadata.summary}`
          )
          .join('\n')
      : 'None'

  const wikiContext =
    wikiResults.length > 0
      ? wikiResults
          .map(
            (res) => `- [Quality: ${res.validation.quality}] ${res.title}: ${res.summary}`
          )
          .join('\n')
      : 'None'

  const searchContext =
    searchResults.length > 0
      ? searchResults
          .map((res) => `- [${res.title}](${res.link}): ${res.snippet}`)
          .join('\n')
      : 'None'

  return `---
Internal Database Context:
${dbContext}
---
Wikipedia Context:
${wikiContext}
---
Search Results Context:
${searchContext}
---`
}

function formatThoughts(plan, context, groundednessResult) {
  const thoughts = `
**THOUGHT PROCESS: THE PLAN**
${plan.plan.map((step) => `- ${step}`).join('\n')}

**REASONING:**
${plan.reasoning}

**RETRIEVED CONTEXT:**
- **Internal RAG Search:** ${context.ragResults.length} item(s) found.
${context.ragResults.map((r) => `  - [Score: ${r.score.toFixed(2)}] ${r.metadata.headline}`).join('\n')}

- **Wikipedia Search:** ${context.wikiResults.length} article(s) found.
${context.wikiResults.map((w) => `  - **Query:** "${w.query}"\n    - **Result:** ${w.title}: ${w.summary.substring(0, 100)}...`).join('\n')}

- **Web Search:** ${context.searchResults.length} result(s) found.
${context.searchResults.map((s) => `  - **Query:** "${plan.user_query}"\n    - **Result:** ${s.title}: ${s.snippet.substring(0, 100)}...`).join('\n')}

**FINAL CHECK:**
- **Groundedness Passed:** ${groundednessResult.is_grounded ? 'CONFIRMED' : 'FAILED'}
`
  return thoughts.trim().replace(/\n\n+/g, '\n\n')
}

export async function generateFinalResponse({ plan, context }) {
  const fullContextString = assembleContext(
    context.ragResults,
    context.wikiResults,
    context.searchResults
  )

  console.log(`[RAG Generation] Calling Synthesizer Agent with ${SYNTHESIZER_MODEL}...`)
  const synthesizerResponse = await callLanguageModel({
    modelName: SYNTHESIZER_MODEL,
    systemPrompt: getSynthesizerPrompt(),
    userContent: `CONTEXT:\n${fullContextString}\n\nPLAN:\n${JSON.stringify(
      plan.plan,
      null,
      2
    )}\n\nUSER'S QUESTION: "${plan.user_query}"`,
    isJson: false,
    // temperature: 0.1, // <-- THIS LINE IS NOW REMOVED
  })

  const rawResponse = synthesizerResponse
  if (typeof rawResponse !== 'string') {
    console.error(
      '[RAG Generation] Synthesizer Agent failed to return a valid string response.',
      rawResponse
    )
    return {
      answer: 'The AI synthesizer failed to generate a response.',
      thoughts: 'An error occurred during the final synthesis step.',
    }
  }

  const groundednessResult = await checkGroundedness(rawResponse, fullContextString)
  const thoughts = formatThoughts(plan, context, groundednessResult)

  let finalAnswer
  if (groundednessResult.is_grounded) {
    let responseWithSpans = rawResponse.replace(/<rag>/g, '<span class="rag-source">')
    responseWithSpans = responseWithSpans.replace(/<\/rag>/g, '</span>')
    responseWithSpans = responseWithSpans.replace(/<wiki>/g, '<span class="wiki-source">')
    responseWithSpans = responseWithSpans.replace(/<\/wiki>/g, '</span>')
    responseWithSpans = responseWithSpans.replace(
      /<search>/g,
      '<span class="llm-source">'
    )
    finalAnswer = responseWithSpans.replace(/<\/search>/g, '</span>')
  } else {
    console.warn('[RAG Pipeline] Groundedness check failed. Returning safe response.')
    finalAnswer =
      'I was unable to construct a reliable answer from the available sources. The context may be insufficient or conflicting.'
  }

  return { answer: finalAnswer, thoughts }
}

```

## 📄 src/rag/orchestrator.js
*Lines: 49, Size: 1.79 KB*

```javascript
'use server';

// src/lib/rag/orchestrator.js (version 4.2)
import { retrieveContextForQuery } from './retrieval.js'
import { assessContextQuality } from './validation.js'
import { generateFinalResponse } from './generation.js'
import { runPlannerAgent } from './planner.js'

/**
 * Main orchestrator for the Agentic RAG chat pipeline.
 * @param {Array<object>} messages - The chat messages from the client.
 * @returns {Promise<string>} The final, validated text response.
 */
export async function processChatRequest(messages) {
  console.log('--- [RAG Pipeline Start] ---')

  // 1. Planning Phase
  console.log('[RAG Pipeline] Step 1: Planning Phase Started...')
  const plan = await runPlannerAgent(messages)
  console.log('[RAG Pipeline] Step 1: Planning Phase Completed.')

  // 2. Retrieval & Validation Phase
  console.log('[RAG Pipeline] Step 2: Retrieval Phase Started...')
  const initialContext = await retrieveContextForQuery(plan, messages, 'ragOnly')
  const initialQuality = assessContextQuality(initialContext.ragResults, [], [])

  let finalContext = initialContext

  if (initialQuality.hasHighConfidenceRAG) {
    console.log('[RAG Pipeline] High confidence RAG hit. Short-circuiting retrieval.')
  } else {
    console.log('[RAG Pipeline] RAG context insufficient. Proceeding to full retrieval.')
    // Perform the remaining retrieval steps
    finalContext = await retrieveContextForQuery(plan, messages, 'full')
  }
  console.log('[RAG Pipeline] Step 2: Retrieval Phase Completed.')

  // 3. Synthesis Phase
  console.log('[RAG Pipeline] Step 3: Synthesis Phase Started...')
  const finalResponse = await generateFinalResponse({
    plan,
    context: finalContext,
  })
  console.log('[RAG Pipeline] Step 3: Synthesis Phase Completed.')

  console.log('--- [RAG Pipeline End] ---')
  return finalResponse
}

```

## 📄 src/rag/planner.js
*Lines: 40, Size: 1.1 KB*

```javascript
// File: packages/ai-services/src/rag/planner.js (Unabridged and Corrected)

'use server'

import { callLanguageModel } from '../lib/langchain.js'
import { PLANNER_PROMPT } from './prompts.js'
import { settings } from '@headlines/config'

const PLANNER_MODEL = settings.LLM_MODEL_UTILITY

export async function runPlannerAgent(messages) {
  const conversationText = messages
    .map((m) => `${m.role.toUpperCase()}: ${m.content}`)
    .join('\n\n')

  console.log(`[Planner Agent] Generating plan with ${PLANNER_MODEL}...`)

  const response = await callLanguageModel({
    modelName: PLANNER_MODEL,
    systemPrompt: PLANNER_PROMPT,
    userContent: conversationText,
    isJson: true,
  })

  if (response.error) {
    throw new Error(`Planner Agent failed: ${response.error}`)
  }

  const planObject = response

  console.groupCollapsed('[Planner Agent] Plan Generated')
  console.log('User Query:', planObject.user_query)
  console.log('Reasoning:', planObject.reasoning)
  console.log('Plan Steps:', planObject.plan)
  console.log('Search Queries:', planObject.search_queries)
  console.groupEnd()

  return planObject
}

```

## 📄 src/rag/prompts.js
*Lines: 103, Size: 6.08 KB*

```javascript
// File: packages/ai-services/src/rag/prompts.js (Unabridged and Corrected)

export const PLANNER_PROMPT = `You are an expert AI Planner. Your job is to analyze the user's query and conversation history to create a step-by-step plan for an AI Synthesizer Agent to follow. You also create a list of optimized search queries for a Retrieval Agent.

**Conversation History:**
{CONVERSATION_HISTORY}

**Latest User Query:**
"{USER_QUERY}"

**Your Task:**
1.  **Analyze the User's Intent:** Understand what the user is truly asking for.
2.  **Formulate a Plan:** Create a clear, step-by-step plan for the Synthesizer Agent.
3.  **Generate Search Queries:** Create an array of 1-3 optimized, self-contained search queries. **CRITICAL JSON RULE:** If a query within the 'search_queries' array requires double quotes, you MUST escape them with a backslash. For example: ["\\"Troels Holch Povlsen\\" sons", "Bestseller founder"].

**Example 1:**
User Query: "Which Danish Rich List person is involved in Technology?"
History: (empty)
Your JSON Output:
{
  "user_query": "Which Danish Rich List person is involved in Technology?",
  "reasoning": "The user wants a list of wealthy Danes involved in technology. I need to identify these individuals from the context and then filter them based on their tech involvement.",
  "plan": [
    "Scan all context to identify every unique individual mentioned who is on the Danish Rich List.",
    "For each person, look for evidence of direct involvement in the technology sector.",
    "Filter out individuals with no clear connection to technology.",
    "Synthesize the findings into a helpful list of names, citing their connection to technology.",
    "If no one is found, state that clearly."
  ],
  "search_queries": ["Danish Rich List technology involvement", "Wealthy Danish tech investors", "Danish tech company founders"]
}

**Example 2:**
User Query: "Does Troels Holch Povlsen have sons?"
History: (assistant previously mentioned Bestseller's founder)
Your JSON Output:
{
  "user_query": "Does Troels Holch Povlsen have sons?",
  "reasoning": "The user is asking a direct factual question about a specific person's family. The search queries must be precise.",
  "plan": [
      "Scan context for any mention of 'Troels Holch Povlsen' and his family, specifically children or sons.",
      "Extract the names of his sons if mentioned.",
      "Synthesize a complete and helpful answer, stating the names of the sons and any additional relevant context provided."
  ],
  "search_queries": ["\\"Troels Holch Povlsen\\" sons", "\\"Troels Holch Povlsen\\" children", "\\"Bestseller\\" founder family"]
}

Respond ONLY with a valid JSON object with the specified structure.
`

export const getSynthesizerPrompt =
  () => `You are an elite, fact-based intelligence analyst. Your SOLE task is to execute the provided "PLAN" using only the "CONTEXT" to answer the "USER'S QUESTION". You operate under a strict "ZERO HALLUCINATION" protocol. Your response must be confident, direct, and sound like a human expert.

**PRIMARY DIRECTIVE:**
Synthesize information from all sources in the "CONTEXT" into a single, cohesive, and well-written answer. Directly address the user's question and enrich it with relevant surrounding details found in the context.

**EXAMPLE TONE:**
-   **Bad:** "According to the context, Bestseller was founded by Troels Holch Povlsen."
-   **Good:** "Bestseller was founded in 1975 by Troels Holch Povlsen and his wife, Merete Bech Povlsen. The company is now run by their son, Anders Holch Povlsen."

**CRITICAL RULES OF ENGAGEMENT:**
1.  **NO OUTSIDE KNOWLEDGE:** You are forbidden from using any information not present in the provided "CONTEXT".
2.  **DIRECT ATTRIBUTION:** You MUST still cite your sources inline for the UI. Wrap facts from the Internal DB with <rag>tags</rag>, from Wikipedia with <wiki>tags</wiki>, and from Search Results with <search>tags</search>. The user will not see these tags, but they are essential for the system.
3.  **BE CONFIDENT AND DIRECT:** Present the synthesized facts as a definitive answer.
4.  **INSUFFICIENT DATA:** If the context is insufficient to answer the question at all, respond with EXACTLY: "I do not have sufficient information in my sources to answer that question."
5.  **DO NOT OFFER HELP (CRITICAL):** You MUST NOT end your response by offering to search for more information, provide more details, or ask follow-up questions. Your answer should be a complete, self-contained statement of facts.

**DO NOT:**
-   Use phrases like "According to the context provided...", "The sources state...", or "Based on the information...".
-   Apologize for not knowing or mention your limitations.
-   Talk about your process in the final answer.
-   Speculate or infer beyond what is explicitly stated in the context.

Answer the question directly and authoritatively, as if you are a world-class analyst presenting your verified findings.`

export const GROUNDEDNESS_CHECK_PROMPT = `You are a meticulous fact-checker AI. Your task is to determine if the "Proposed Response" is strictly grounded in the "Provided Context". A response is grounded if and only if ALL of its claims can be directly verified from the context.

**Provided Context:**
---
{CONTEXT}
---

**Proposed Response:**
---
{RESPONSE}
---

Analyze the "Proposed Response" sentence by sentence.

**Respond ONLY with a valid JSON object with the following structure:**
{
  "is_grounded": boolean, // true if ALL claims in the response are supported by the context, otherwise false.
  "unsupported_claims": [
    // List any specific claims from the response that are NOT supported by the context.
    "Claim 1 that is not supported.",
    "Claim 2 that is not supported."
  ]
}

If the response is fully supported, "unsupported_claims" should be an empty array. If the "Proposed Response" states that it cannot answer the question, consider it grounded.`

export const FAILED_GROUNDEDNESS_PROMPT = `I could not form a reliable answer based on the available information. The initial response I generated may have contained information not supported by the sources. For accuracy, please ask a more specific question or try rephrasing your request.`

```

## 📄 src/rag/retrieval.js
*Lines: 183, Size: 5.46 KB*

```javascript
// File: packages/ai-services/src/rag/retrieval.js (Unabridged and Corrected)

'use server'

import { OpenAI } from 'openai'
import { Pinecone } from '@pinecone-database/pinecone'
import { generateQueryEmbeddings } from '../embeddings/embeddings.js'
import {
  fetchBatchWikipediaSummaries,
  validateWikipediaContent,
} from '../search/wikipedia.js'
import { getGoogleSearchResults } from '../search/serpapi.js'
import { env } from '@headlines/config'

let openAIClient, pineconeIndex
function initializeClients() {
  if (!openAIClient) {
    openAIClient = new OpenAI({ apiKey: env.OPENAI_API_KEY })
    const pc = new Pinecone({ apiKey: env.PINECONE_API_KEY })
    pineconeIndex = pc.index(env.PINECONE_INDEX_NAME)
  }
}

const ENTITY_EXTRACTOR_MODEL = 'gpt-5-mini'
const SIMILARITY_THRESHOLD = 0.38
const ENTITY_EXTRACTOR_PROMPT_FOR_HISTORY = `You are an entity extractor. Your job is to identify all specific people and companies mentioned in a given text.
Respond ONLY with a valid JSON object with the following structure:
{ "entities": ["Entity Name 1", "Entity Name 2"] }
`

// This function is no longer called by the main orchestrator but is kept for potential future use.
async function extractEntitiesFromHistory(messages) {
  if (messages.length < 2) {
    return []
  }
  const historyText = messages
    .slice(-4)
    .map((m) => m.content)
    .join('\n')

  initializeClients()
  try {
    const entityResponse = await openAIClient.chat.completions.create({
      model: ENTITY_EXTRACTOR_MODEL,
      messages: [
        { role: 'system', content: ENTITY_EXTRACTOR_PROMPT_FOR_HISTORY },
        {
          role: 'user',
          content: `Extract all key people and companies from this text:\n"${historyText}"`,
        },
      ],
      response_format: { type: 'json_object' },
    })

    const { entities } = JSON.parse(entityResponse.choices[0].message.content)
    const cleanEntities = entities.map((e) =>
      e.replace(/\s*\((person|company)\)$/, '').trim()
    )
    if (cleanEntities.length > 0) {
      console.log(
        `[RAG Retrieval] Entities from history for exclusion: ${cleanEntities.join(', ')}`
      )
    }
    return cleanEntities
  } catch (error) {
    console.error('Could not extract entities from history:', error)
    return []
  }
}

async function fetchPineconeContext(queries, exclude_entities = []) {
  initializeClients()
  const queryEmbeddings = await Promise.all(
    queries.map((q) => generateQueryEmbeddings(q))
  )
  const allQueryEmbeddings = queryEmbeddings.flat()

  const filter =
    exclude_entities.length > 0
      ? { 'metadata.entities': { $nin: exclude_entities } }
      : undefined

  if (filter) {
    console.log('[RAG Retrieval] Applying Pinecone filter to exclude:', exclude_entities)
  }

  const pineconePromises = allQueryEmbeddings.map((embedding) =>
    pineconeIndex.query({
      topK: 5,
      vector: embedding,
      includeMetadata: true,
      filter: filter,
    })
  )
  const pineconeResponses = await Promise.all(pineconePromises)

  const uniqueMatches = new Map()
  pineconeResponses.forEach((response) => {
    response?.matches?.forEach((match) => {
      if (
        !uniqueMatches.has(match.id) ||
        match.score > uniqueMatches.get(match.id).score
      ) {
        uniqueMatches.set(match.id, match)
      }
    })
  })

  const results = Array.from(uniqueMatches.values())
    .filter((match) => match.score >= SIMILARITY_THRESHOLD)
    .sort((a, b) => b.score - a.score)
    .slice(0, 5)

  console.groupCollapsed(`[RAG Retrieval] Pinecone Results (${results.length})`)
  results.forEach((match) => {
    console.log(`- Score: ${match.score.toFixed(4)} | ID: ${match.id}`)
    console.log(`  Headline: ${match.metadata.headline}`)
  })
  console.groupEnd()

  return results
}

async function fetchValidatedWikipediaContext(entities) {
  const wikiResults = await fetchBatchWikipediaSummaries(entities)
  const validWikiResults = []
  for (const res of wikiResults.filter((r) => r.success)) {
    const validation = await validateWikipediaContent(res.summary)
    if (validation.valid) {
      validWikiResults.push({ ...res, validation })
    }
  }

  console.groupCollapsed(`[RAG Retrieval] Wikipedia Results (${validWikiResults.length})`)
  validWikiResults.forEach((res) => {
    console.log(`- Title: ${res.title}`)
    console.log(`  Summary: ${res.summary.substring(0, 200)}...`)
  })
  console.groupEnd()

  return validWikiResults
}

export async function retrieveContextForQuery(plan, messages, mode = 'full') {
  const { search_queries, user_query } = plan

  const entitiesToExclude = []
  console.log('[RAG Retrieval] History-based entity exclusion is temporarily disabled.')

  const pineconeResults = await fetchPineconeContext(search_queries, entitiesToExclude)

  if (mode === 'ragOnly') {
    return {
      ragResults: pineconeResults,
      wikiResults: [],
      searchResults: [],
    }
  }

  const [wikipediaResults, searchResultsObj] = await Promise.all([
    fetchValidatedWikipediaContext(search_queries),
    getGoogleSearchResults(user_query),
  ])

  const searchResults = searchResultsObj.success ? searchResultsObj.results : []

  console.groupCollapsed(
    `[RAG Retrieval] SerpAPI Google Search Results (${searchResults.length})`
  )
  searchResults.forEach((res) => {
    console.log(`- Title: ${res.title}`)
    console.log(`  Link: ${res.link}`)
    console.log(`  Snippet: ${res.snippet}`)
  })
  console.groupEnd()

  return {
    ragResults: pineconeResults,
    wikiResults: wikipediaResults,
    searchResults: searchResults,
  }
}

```

## 📄 src/rag/validation.js
*Lines: 142, Size: 4.79 KB*

```javascript
// packages/ai-services/src/rag/validation.js (Corrected)
import { settings } from '@headlines/config'
import { callLanguageModel } from '../lib/langchain.js'
import { GROUNDEDNESS_CHECK_PROMPT } from './prompts.js'

// --- Constants ---
const HIGH_CONFIDENCE_THRESHOLD = 0.75
const SIMILARITY_THRESHOLD = 0.38

// --- Internal Helper Functions ---
function simpleEntityExtractor(text, sourceIdentifier) {
  const match = text.match(/([A-Z][a-z]+(?:\s[A-Z][a-z]+)*)/)
  if (match) return [{ name: match[0], facts: [text] }]
  return [{ name: sourceIdentifier, facts: [text] }]
}

function extractEntitiesFromRAG(ragResults) {
  if (!ragResults) return []
  return ragResults.flatMap((r) =>
    simpleEntityExtractor(r.metadata?.summary || '', r.metadata?.headline || 'RAG Source')
  )
}

function extractEntitiesFromWiki(wikiResults) {
  if (!wikiResults) return []
  return wikiResults.flatMap((w) =>
    simpleEntityExtractor(w.summary || '', w.title || 'Wiki Source')
  )
}

function entitySimilarity(entityA, entityB) {
  const nameA = entityA.name.toLowerCase()
  const nameB = entityB.name.toLowerCase()
  if (nameA.includes(nameB) || nameB.includes(nameA)) return 0.9
  return 0
}

function factsConflict(factsA, factsB) {
  // Placeholder for a future NLI model implementation.
  return false
}

// --- Exported Validation Functions ---

export function assessContextQuality(ragResults, wikiResults, searchResults) {
  const ragScore = ragResults.length > 0 ? Math.max(...ragResults.map((r) => r.score)) : 0
  const highQualityWiki = wikiResults.filter(
    (r) => r.validation?.quality === 'high'
  ).length
  const mediumQualityWiki = wikiResults.filter(
    (r) => r.validation?.quality === 'medium'
  ).length
  const wikiScore = highQualityWiki > 0 ? 0.7 : mediumQualityWiki > 0 ? 0.5 : 0
  const searchScore = searchResults.length > 0 ? 0.6 : 0 // Assign a moderate score if search results exist

  const combinedScore = Math.max(ragScore, wikiScore, searchScore)

  return {
    hasHighConfidenceRAG: ragScore >= HIGH_CONFIDENCE_THRESHOLD,
    hasSufficientContext: combinedScore >= SIMILARITY_THRESHOLD,
    ragResultCount: ragResults.length,
    wikiResultCount: wikiResults.length,
    searchResultCount: searchResults.length,
    highQualityWikiCount: highQualityWiki,
    maxSimilarity: ragScore,
    combinedConfidence: combinedScore,
    hasMultipleSources:
      (ragResults.length > 0 ? 1 : 0) +
        (wikiResults.length > 0 ? 1 : 0) +
        (searchResults.length > 0 ? 1 : 0) >
      1,
    hasHighQualityContent: ragScore >= HIGH_CONFIDENCE_THRESHOLD || highQualityWiki > 0,
  }
}

export function crossValidateSources(ragResults, wikiResults) {
  // This function is becoming less critical with the strict generation prompt,
  // but we'll keep its structure.
  const validation = { conflicts: [], confirmations: [], reliability: 'unknown' }

  if (
    (!ragResults || ragResults.length === 0) &&
    (!wikiResults || wikiResults.length === 0)
  ) {
    validation.reliability = 'single_source' // or 'no_source'
    return validation
  }

  // Simplified logic for now
  if (ragResults.length > 0 && wikiResults.length > 0) {
    validation.reliability = 'confirmed' // Assume confirmation if both exist
  } else {
    validation.reliability = 'single_source'
  }

  return validation
}

export async function checkGroundedness(responseText, contextString) {
  console.log('[RAG Validation] Performing Groundedness Check...')
  if (
    responseText.trim() ===
    'I do not have sufficient information in my sources to answer that question.'
  ) {
    console.log('[RAG Validation] PASSED: Bot correctly stated insufficient info.')
    return { is_grounded: true, unsupported_claims: [] }
  }

  try {
    const prompt = GROUNDEDNESS_CHECK_PROMPT.replace('{CONTEXT}', contextString).replace(
      '{RESPONSE}',
      responseText
    )

    // CORRECTED: Use the project's standard AI call function and configured model
    const result = await callLanguageModel({
      modelName: settings.LLM_MODEL_UTILITY,
      systemPrompt: prompt,
      userContent: 'Perform the groundedness check based on the system prompt.',
      isJson: true,
    })

    if (result.error) {
      throw new Error(result.error)
    }

    if (result.is_grounded) {
      console.log('[RAG Validation] PASSED: Response is grounded in sources.')
    } else {
      console.warn('[RAG Validation] FAILED: Response contains unsupported claims.')
      console.groupCollapsed('Unsupported Claims Details')
      result.unsupported_claims.forEach((claim) => console.warn(`- ${claim}`))
      console.groupEnd()
    }
    return result
  } catch (error) {
    console.error('[RAG Validation] Error during verification:', error)
    // Fail safe: if the check fails, assume the response is not grounded.
    return { is_grounded: false, unsupported_claims: ['Fact-checking system failed.'] }
  }
}

```

## 📄 src/schemas/articleAssessmentSchema.js
*Lines: 24, Size: 753 Bytes*

```javascript
// packages/ai-services/src/schemas/articleAssessmentSchema.js (version 1.1)
import { z } from 'zod'

export const articleAssessmentSchema = z.object({
  reasoning: z.object({
    event_type: z.string(),
    is_liquidity_event: z.boolean(),
    beneficiary: z.string(),
  }),
  // NEW FIELD: Added classification to the schema.
  classification: z.enum(['New wealth', 'Wealth detection', 'Interview', 'IPO', 'Other']),
  relevance_article: z.number().min(0).max(100),
  assessment_article: z.string().min(1),
  amount: z.number().nullable().optional(),
  key_individuals: z.array(
    z.object({
      name: z.string(),
      role_in_event: z.string(),
      company: z.string().nullable(),
      email_suggestion: z.string().nullable(),
    })
  ),
})

```

## 📄 src/schemas/articlePreAssessmentSchema.js
*Lines: 7, Size: 223 Bytes*

```javascript
// packages/ai-services/src/schemas/articlePreAssessmentSchema.js (version 1.0)
import { z } from 'zod'

export const articlePreAssessmentSchema = z.object({
  classification: z.enum(['private', 'public', 'corporate']),
})

```

## 📄 src/schemas/batchArticleAssessmentSchema.js
*Lines: 8, Size: 285 Bytes*

```javascript
// packages/ai-services/src/schemas/batchArticleAssessmentSchema.js (version 1.0)
import { z } from 'zod'
import { articleAssessmentSchema } from './articleAssessmentSchema.js'

export const batchArticleAssessmentSchema = z.object({
  assessments: z.array(articleAssessmentSchema),
})

```

## 📄 src/schemas/batchHeadlineAssessmentSchema.js
*Lines: 9, Size: 371 Bytes*

```javascript
// packages/ai-services/src/schemas/batchHeadlineAssessmentSchema.js (version 1.0)
import { z } from 'zod'
import { headlineAssessmentSchema } from './headlineAssessmentSchema.js'

// The batch schema reuses the single assessment schema
export const batchHeadlineAssessmentSchema = z.object({
  assessments: z.array(headlineAssessmentSchema.shape.assessment.element),
})

```

## 📄 src/schemas/canonicalizerSchema.js
*Lines: 7, Size: 188 Bytes*

```javascript
// packages/ai-services/src/schemas/canonicalizerSchema.js (version 1.0)
import { z } from 'zod'

export const canonicalizerSchema = z.object({
  canonical_name: z.string().nullable(),
})

```

## 📄 src/schemas/clusterSchema.js
*Lines: 12, Size: 250 Bytes*

```javascript
// packages/ai-services/src/schemas/clusterSchema.js (version 1.0)
import { z } from 'zod'

export const clusterSchema = z.object({
  events: z.array(
    z.object({
      event_key: z.string(),
      article_ids: z.array(z.string()),
    })
  ),
})

```

## 📄 src/schemas/countryCorrectionSchema.js
*Lines: 7, Size: 269 Bytes*

```javascript
// packages/ai-services/src/schemas/countryCorrectionSchema.js
import { z } from 'zod';

export const countryCorrectionSchema = z.object({
  country: z.string().nullable().describe("The single, corrected, UN-recognized country name, or null if not determinable."),
});

```

## 📄 src/schemas/disambiguationSchema.js
*Lines: 7, Size: 186 Bytes*

```javascript
// packages/ai-services/src/schemas/disambiguationSchema.js (version 1.0)
import { z } from 'zod'

export const disambiguationSchema = z.object({
  best_title: z.string().nullable(),
})

```

## 📄 src/schemas/emailIntroSchema.js
*Lines: 10, Size: 240 Bytes*

```javascript
// packages/ai-services/src/schemas/emailIntroSchema.js (version 2.0)
import { z } from 'zod'

export const emailIntroSchema = z.object({
  greeting: z.string(),
  body: z.string(),
  bullets: z.array(z.string()),
  signoff: z.string(),
})

```

## 📄 src/schemas/emailSubjectSchema.js
*Lines: 7, Size: 184 Bytes*

```javascript
// packages/ai-services/src/schemas/emailSubjectSchema.js (version 1.0)
import { z } from 'zod'

export const emailSubjectSchema = z.object({
  subject_headline: z.string().min(1),
})

```

## 📄 src/schemas/enrichContactSchema.js
*Lines: 14, Size: 335 Bytes*

```javascript
// packages/ai-services/src/schemas/enrichContactSchema.js (version 1.0)
import { z } from 'zod'

export const enrichContactSchema = z.object({
  enriched_contacts: z.array(
    z.object({
      name: z.string(),
      role_in_event: z.string(),
      company: z.string(),
      email_suggestion: z.string().nullable(),
    })
  ),
})

```

## 📄 src/schemas/entitySchema.js
*Lines: 8, Size: 191 Bytes*

```javascript
// packages/ai-services/src/schemas/entitySchema.js (version 1.0)
import { z } from 'zod'

export const entitySchema = z.object({
  reasoning: z.string(),
  entities: z.array(z.string()),
})

```

## 📄 src/schemas/executiveSummarySchema.js
*Lines: 7, Size: 176 Bytes*

```javascript
// packages/ai-services/src/schemas/executiveSummarySchema.js (version 1.0)
import { z } from 'zod'

export const executiveSummarySchema = z.object({
  summary: z.string(),
})

```

## 📄 src/schemas/findContactSchema.js
*Lines: 7, Size: 183 Bytes*

```javascript
// packages/ai-services/src/schemas/findContactSchema.js (version 1.0)
import { z } from 'zod'

export const findContactSchema = z.object({
  email: z.string().email().nullable(),
})

```

## 📄 src/schemas/headlineAssessmentSchema.js
*Lines: 13, Size: 362 Bytes*

```javascript
// packages/ai-services/src/schemas/headlineAssessmentSchema.js (version 1.0)
import { z } from 'zod'

const singleAssessmentSchema = z.object({
  headline_en: z.string(),
  relevance_headline: z.number().min(0).max(100),
  assessment_headline: z.string(),
})

export const headlineAssessmentSchema = z.object({
  assessment: z.array(singleAssessmentSchema),
})

```

## 📄 src/schemas/index.js
*Lines: 25, Size: 1.02 KB*

```javascript
// packages/ai-services/src/schemas/index.js (version 2.1)
export * from './articleAssessmentSchema.js'
export * from './articlePreAssessmentSchema.js'
export * from './batchArticleAssessmentSchema.js'
export * from './canonicalizerSchema.js'
export * from './clusterSchema.js'
export * from './disambiguationSchema.js'
export * from './emailIntroSchema.js'
export * from './emailSubjectSchema.js'
export * from './enrichContactSchema.js'
export * from './entitySchema.js'
export * from './executiveSummarySchema.js'
export * from './findContactSchema.js'
export * from './headlineAssessmentSchema.js'
export * from './judgeSchema.js'
export * from './opportunitySchema.js'
export * from './selectorRepairSchema.js'
export * from './synthesisSchema.js'
export * from './watchlistSuggestionSchema.js'
export * from './sectionClassifierSchema.js'
export * from './batchHeadlineAssessmentSchema.js'
export * from './translateSchema.js'
// DEFINITIVE FIX: Add the missing export for the new schema.
export * from './countryCorrectionSchema.js'

```

## 📄 src/schemas/judgeSchema.js
*Lines: 14, Size: 404 Bytes*

```javascript
// packages/ai-services/src/schemas/judgeSchema.js (version 1.0)
import { z } from 'zod'

const verdictSchema = z.object({
  identifier: z.string(),
  quality: z.enum(['Excellent', 'Good', 'Acceptable', 'Marginal', 'Poor', 'Irrelevant']),
  commentary: z.string(),
})

export const judgeSchema = z.object({
  event_judgements: z.array(verdictSchema),
  opportunity_judgements: z.array(verdictSchema),
})

```

## 📄 src/schemas/opportunitySchema.js
*Lines: 22, Size: 929 Bytes*

```javascript
// packages/ai-services/src/schemas/opportunitySchema.js (version 2.1)
import { z } from 'zod'

export const opportunitySchema = z.object({
  opportunities: z.array(
    // DEFINITIVE FIX: Use .passthrough() to allow the AI to include extra fields
    // without causing a validation error. We will only use the fields we define.
    z.object({
      reachOutTo: z.string().describe("The full name of the individual or family to contact."),
      contactDetails: z.object({
        email: z.string().email().nullable(),
        role: z.string().nullable(),
        company: z.string().nullable(),
      }),
      basedIn: z.string().nullable(),
      whyContact: z.array(z.string()).describe("An array of concise, one-sentence reasons for contact."),
      likelyMMDollarWealth: z.number().nullable(),
      event_key: z.string().describe("The unique key of the source event for this opportunity."),
    }).passthrough()
  ),
})

```

## 📄 src/schemas/sectionClassifierSchema.js
*Lines: 14, Size: 411 Bytes*

```javascript
// packages/ai-services/src/schemas/sectionClassifierSchema.js (version 1.0)
import { z } from 'zod'

export const sectionClassifierSchema = z.object({
  classifications: z.array(
    z.object({
      classification: z.enum(['news_section', 'article_headline', 'navigation', 'other']),
      reasoning: z
        .string()
        .describe('A brief explanation for the classification choice.'),
    })
  ),
})

```

## 📄 src/schemas/selectorRepairSchema.js
*Lines: 13, Size: 415 Bytes*

```javascript
// packages/ai-services/src/schemas/selectorRepairSchema.js (version 1.0)
import { z } from 'zod'

export const selectorRepairSchema = z.object({
  reasoning: z.string(),
  suggested_selectors: z.object({
    headlineSelector: z.string().optional(),
    linkSelector: z.string().optional().nullable(),
    headlineTextSelector: z.string().optional().nullable(),
    articleSelector: z.string().optional(),
  }),
})

```

## 📄 src/schemas/synthesisSchema.js
*Lines: 27, Size: 819 Bytes*

```javascript
// packages/ai-services/src/schemas/synthesisSchema.js (version 1.1)
import { z } from 'zod'

export const synthesisSchema = z.object({
  events: z.array(
    z.object({
      headline: z.string().min(1),
      summary: z.string().min(1),
      advisor_summary: z
        .string()
        .min(1)
        .describe('The one-sentence actionable summary for wealth advisors.'),
      // DEFINITIVE FIX: Add the new classification field to the schema.
      eventClassification: z.string().min(1).describe("The event's classification type."),
      country: z.string().min(1),
      key_individuals: z.array(
        z.object({
          name: z.string(),
          role_in_event: z.string(),
          company: z.string().nullable(),
          email_suggestion: z.string().nullable(),
        })
      ),
    })
  ),
})

```

## 📄 src/schemas/translateSchema.js
*Lines: 7, Size: 179 Bytes*

```javascript
// packages/ai-services/src/schemas/translateSchema.js (version 1.0.0)
import { z } from 'zod'

export const translateSchema = z.object({
  translated_html: z.string().min(1),
})

```

## 📄 src/schemas/watchlistSuggestionSchema.js
*Lines: 16, Size: 496 Bytes*

```javascript
// packages/ai-services/src/schemas/watchlistSuggestionSchema.js (version 2.0.0 - With Search Terms)
import { z } from 'zod'

export const watchlistSuggestionSchema = z.object({
  suggestions: z.array(
    z.object({
      name: z.string(),
      type: z.enum(['person', 'family', 'company']),
      country: z.string(),
      rationale: z.string(),
      sourceEvent: z.string(),
      searchTerms: z.array(z.string()).describe("An array of 2-4 unique, lowercase search terms."),
    })
  ),
})

```

## 📄 src/search/search.js
*Lines: 86, Size: 3.1 KB*

```javascript
'use server'
import axios from 'axios'
import NewsAPI from 'newsapi'
import { env } from '@headlines/config'
import { logger, apiCallTracker } from '@headlines/utils-server'

const { SERPER_API_KEY, NEWSAPI_API_KEY } = env
const serperClient = SERPER_API_KEY
  ? axios.create({
      baseURL: 'https://google.serper.dev',
      headers: { 'X-API-KEY': SERPER_API_KEY, 'Content-Type': 'application/json' },
    })
  : null
const newsapi = NEWSAPI_API_KEY ? new NewsAPI(NEWSAPI_API_KEY) : null

if (!serperClient)
  logger.warn(
    'SERPER_API_KEY not found. Google Search dependent functions will be disabled.'
  )
if (!newsapi)
  logger.warn('NEWSAPI_API_KEY not found. NewsAPI dependent functions will be disabled.')

async function withRetry(apiCall, serviceName, maxRetries = 2) {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await apiCall()
    } catch (error) {
      const isRetryable = error.response && error.response.status >= 500
      if (!isRetryable || attempt === maxRetries) {
        logger.error(
          { err: error?.response?.data || error },
          `${serviceName} search failed.`
        )
        return { success: false, error: error.message, results: [] }
      }
      const delay = 1000 * Math.pow(2, attempt - 1)
      logger.warn(`[${serviceName}] Attempt ${attempt} failed. Retrying in ${delay}ms...`)
      await new Promise((res) => setTimeout(res, delay))
    }
  }
}

export async function findAlternativeSources(headline) {
  if (!serperClient) return { success: false, results: [] }
  return withRetry(async () => {
    apiCallTracker.recordCall('serper_news')
    const response = await serperClient.post('/news', { q: headline })
    return { success: true, results: response.data.news || [] }
  }, 'Serper News')
}
export async function performGoogleSearch(query) {
  if (!serperClient) return { success: false, snippets: 'SERPER_API_KEY not configured.' }
  return withRetry(async () => {
    apiCallTracker.recordCall('serper_search')
    const response = await serperClient.post('/search', { q: query })
    const organicResults = response.data.organic || []
    if (organicResults.length > 0) {
      const snippets = organicResults
        .slice(0, 5)
        .map((res) => `- ${res.title}: ${res.snippet}`)
        .join('\n')
      return { success: true, snippets }
    }
    return { success: false, snippets: 'No search results found.' }
  }, 'Serper Search')
}
export async function findNewsApiArticlesForEvent(headline) {
  if (!newsapi) return { success: false, snippets: 'NewsAPI key not configured.' }
  return withRetry(async () => {
    apiCallTracker.recordCall('newsapi_search')
    const response = await newsapi.v2.everything({
      q: `"${headline}"`,
      pageSize: 5,
      sortBy: 'relevancy',
      language: 'en,da,sv,no',
    })
    if (response.articles && response.articles.length > 0) {
      const snippets = response.articles
        .map((a) => `- ${a.title} (${a.source.name}): ${a.description || ''}`)
        .join('\n')
      return { success: true, snippets }
    }
    return { success: false, snippets: 'No related articles found.' }
  }, 'NewsAPI')
}

```

## 📄 src/search/serpapi.js
*Lines: 63, Size: 1.78 KB*

```javascript
// File: packages/ai-services/src/search/serpapi.js (Unabridged)

'use server'

import { getJson } from 'serpapi'
import { env } from '@headlines/config'

const searchCache = new Map()
const CACHE_TTL = 1000 * 60 * 60 // 1 hour

export async function getGoogleSearchResults(query) {
  if (!env.SERPAPI_API_KEY) {
    console.warn('[SerpAPI] SERPAPI_API_KEY is not configured. Skipping web search.')
    return { success: true, results: [] }
  }

  if (!query) {
    return { success: false, error: 'Query is required.' }
  }

  const cacheKey = `serpapi_${query.toLowerCase().trim()}`
  if (searchCache.has(cacheKey)) {
    const cached = searchCache.get(cacheKey)
    if (Date.now() - cached.timestamp < CACHE_TTL) {
      console.log(`[SerpAPI Cache] Hit for query: "${query}"`)
      return cached.data
    }
  }

  console.log(`[SerpAPI] Performing live search for: "${query}"`)

  try {
    const response = await getJson({
      api_key: env.SERPAPI_API_KEY,
      engine: 'google',
      q: query,
      location: 'United States',
      gl: 'us',
      hl: 'en',
    })

    const organicResults = response.organic_results || []
    const answerBox = response.answer_box ? [response.answer_box] : []

    const formattedResults = [...answerBox, ...organicResults]
      .map((item) => ({
        title: item.title,
        link: item.link,
        snippet: item.snippet || item.answer || item.result,
        source: 'Google Search',
      }))
      .filter((item) => item.snippet)
      .slice(0, 5)

    const result = { success: true, results: formattedResults }
    searchCache.set(cacheKey, { data: result, timestamp: Date.now() })
    return result
  } catch (error) {
    console.error('[SerpAPI Error]', error)
    return { success: false, error: `Failed to fetch search results: ${error.message}` }
  }
}

```

## 📄 src/search/wikipedia.js
*Lines: 154, Size: 4.98 KB*

```javascript
// File: packages/ai-services/src/search/wikipedia.js (Unabridged and Corrected)

'use server'
import { logger, apiCallTracker } from '@headlines/utils-server'
import { settings } from '@headlines/config'
import { ChatPromptTemplate } from '@langchain/core/prompts'
import { JsonOutputParser } from '@langchain/core/output_parsers'
import { RunnableSequence } from '@langchain/core/runnables'
import { getUtilityModel } from '../lib/langchain.js'
import { safeInvoke } from '../lib/safeInvoke.js'
import { disambiguationSchema } from '../schemas/index.js'
import { instructionDisambiguation } from '@headlines/prompts'

const WIKI_API_ENDPOINT = 'https://en.wikipedia.org/w/api.php'
const WIKI_SUMMARY_LENGTH = 750

// --- START: DEFINITIVE FIX FOR WIKIPEDIA CHAIN ---
const systemPrompt = [
  instructionDisambiguation.whoYouAre,
  instructionDisambiguation.whatYouDo,
  ...instructionDisambiguation.guidelines,
  instructionDisambiguation.outputFormatDescription,
].join('\n\n')

const prompt = ChatPromptTemplate.fromMessages([
  ['system', systemPrompt],
  ['human', '{inputText}'],
])

// Revert to the simpler, more direct chain. Our safeInvoke function will handle errors.
const disambiguationChain = RunnableSequence.from([
  prompt,
  getUtilityModel(),
  new JsonOutputParser(),
])
// --- END: DEFINITIVE FIX ---

async function fetchWithRetry(url, options, maxRetries = 2) {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const response = await fetch(url, options)
      if (!response.ok) throw new Error(`API returned status ${response.status}`)
      return response
    } catch (error) {
      if (attempt === maxRetries) throw error
      const delay = 1000 * Math.pow(2, attempt - 1)
      logger.warn(
        `[Wikipedia Fetch] Attempt ${attempt} failed for ${url}. Retrying in ${delay}ms...`
      )
      await new Promise((res) => setTimeout(res, delay))
    }
  }
}

export async function fetchWikipediaSummary(query) {
  if (!query) return { success: false, error: 'Query cannot be empty.' }
  try {
    apiCallTracker.recordCall('wikipedia')
    const searchParams = new URLSearchParams({
      action: 'query',
      list: 'search',
      srsearch: query,
      srlimit: '5',
      format: 'json',
    })
    const searchResponse = await fetchWithRetry(
      `${WIKI_API_ENDPOINT}?${searchParams.toString()}`
    )
    const searchData = await searchResponse.json()
    const searchResults = searchData.query.search
    if (!searchResults || searchResults.length === 0)
      throw new Error(`No search results for "${query}".`)

    let best_title = null
    try {
      const userContent = `Original Query: "${query}"\n\nSearch Results:\n${JSON.stringify(searchResults.map((r) => ({ title: r.title, snippet: r.snippet })))}`

      const disambiguationResponse = await safeInvoke(
        disambiguationChain,
        { inputText: userContent },
        'disambiguationChain',
        disambiguationSchema
      )

      if (
        disambiguationResponse &&
        !disambiguationResponse.error &&
        disambiguationResponse.best_title
      ) {
        best_title = disambiguationResponse.best_title
      }
    } catch (e) {
      logger.warn({ err: e }, `Disambiguation chain failed for query "${query}".`)
    }

    if (!best_title) {
      best_title = searchResults[0].title
      logger.info(
        `[Wikipedia] AI disambiguation failed or returned null. Falling back to top search result: "${best_title}"`
      )
    }

    const summaryParams = new URLSearchParams({
      action: 'query',
      prop: 'extracts',
      exintro: 'true',
      explaintext: 'true',
      titles: best_title,
      format: 'json',
      redirects: '1',
    })
    const summaryResponse = await fetchWithRetry(
      `${WIKI_API_ENDPOINT}?${summaryParams.toString()}`
    )
    const summaryData = await summaryResponse.json()
    const pages = summaryData.query.pages
    const pageId = Object.keys(pages)[0]
    const summary = pages[pageId]?.extract
    if (!summary) throw new Error(`Could not extract summary for page "${best_title}".`)

    const conciseSummary =
      summary.length > WIKI_SUMMARY_LENGTH
        ? summary.substring(0, WIKI_SUMMARY_LENGTH) + '...'
        : summary
    return { success: true, summary: conciseSummary, title: best_title, query }
  } catch (error) {
    logger.warn(`Wikipedia lookup for "${query}" failed: ${error.message}`)
    return { success: false, error: error.message, query }
  }
}

export async function fetchBatchWikipediaSummaries(queries) {
  const promises = queries.map((q) => fetchWikipediaSummary(q))
  return Promise.all(promises)
}

export async function validateWikipediaContent(text) {
  const lowerText = text.toLowerCase()
  const isDisambiguation =
    lowerText.includes('may refer to:') || lowerText.includes('is a list of')
  if (isDisambiguation) {
    return {
      valid: false,
      quality: 'low',
      reason: 'Disambiguation page content detected.',
    }
  }
  return {
    valid: true,
    quality: 'high',
    reason: 'Content appears to be a valid summary.',
  }
}

```


================================================================================

# 📦 PACKAGE: CONFIG

# 📁 PROJECT DIRECTORY STRUCTURE

Total: 6 files, 1 directories

```
headlines/
├── 📁 src/
│   ├── 📄 envSchema.js
│   ├── 📄 index.js
│   ├── 📄 next.js
│   ├── 📄 node.js
│   └── 📄 settings.js
└── 📄 package.json
```

# 📋 PROJECT METADATA

**Generated**: 2025-09-29T13:20:36.403Z
**Repository Path**: /home/mark/Repos/projects/headlines/packages/config
**Total Files**: 6
**Package**: @headlines/config@3.0.0




---


## 📄 package.json
*Lines: 21, Size: 402 Bytes*

```json
{
  "name": "@headlines/config",
  "version": "3.0.0",
  "main": "src/index.js",
  "type": "module",
  "license": "ISC",
  "exports": {
    ".": "./src/index.js",
    "./node": "./src/node.js",
    "./next": "./src/next.js"
  },
  "dependencies": {
    "client-only": "^0.0.1",
    "server-only": "^0.0.1",
    "zod": "^3.23.8"
  },
  "peerDependencies": {
    "@headlines/models": "workspace:*"
  }
}

```

## 📄 src/envSchema.js
*Lines: 39, Size: 1.5 KB*

```javascript
import { z } from 'zod'

const stringToBoolean = z
  .string()
  .transform((val) => val === 'true')
  .or(z.boolean())
const stringToNumber = z.string().transform((val) => parseInt(val, 10))

export const envSchema = z.object({
  NODE_ENV: z.enum(['development', 'production']).default('development'),
  MONGO_URI: z.string().url(),
  JWT_SECRET: z.string().min(32),
  LOG_LEVEL: z.enum(['debug', 'info', 'warn', 'error']).default('info'),
  CONCURRENCY_LIMIT: stringToNumber.default('3'),
  OPENAI_API_KEY: z.string().startsWith('sk-'),
  PINECONE_API_KEY: z.string().min(1),
  PINECONE_INDEX_NAME: z.string().min(1).default('headlines'),
  UPSTASH_REDIS_REST_URL: z.string().url().optional(),
  UPSTASH_REDIS_REST_TOKEN: z.string().min(1).optional(),
  SMTP_HOST: z.string().min(1),
  SMTP_PORT: stringToNumber,
  SMTP_SECURE: stringToBoolean,
  SMTP_USER: z.string().email(),
  SMTP_PASS: z.string().min(1),
  SMTP_FROM_ADDRESS: z.string().email(),
  SMTP_FROM_NAME: z.string().min(1).default('Headlines AI'),
  NEXT_PUBLIC_VAPID_PUBLIC_KEY: z.string().min(1),
  VAPID_PRIVATE_KEY: z.string().min(1),
  VAPID_SUBJECT: z.string().startsWith('mailto:'),
  NEXT_PUBLIC_PUSHER_KEY: z.string().min(1),
  NEXT_PUBLIC_PUSHER_CLUSTER: z.string().min(1),
  PUSHER_APP_ID: z.string().min(1),
  PUSHER_KEY: z.string().min(1),
  PUSHER_SECRET: z.string().min(1),
  PUSHER_CLUSTER: z.string().min(1),
  GROQ_API_KEY: z.string().startsWith('gsk_').optional(),
  SERPER_API_KEY: z.string().min(1).optional(),
  NEWSAPI_API_KEY: z.string().min(1),
})
```

## 📄 src/index.js
*Lines: 103, Size: 3.45 KB*

```javascript
// packages/config/src/pipeline.js (NEW FILE)
// This file is IDENTICAL to server.js but WITHOUT the 'server-only' import.
// It is intended ONLY for use by the pipeline script.

import { z } from 'zod'
import { settings, initializeSettings } from './settings.js'

// --- Environment Schema and Validation ---
const stringToBoolean = z
  .string()
  .transform((val) => val === 'true')
  .or(z.boolean())
const stringToNumber = z.string().transform((val) => parseInt(val, 10))

const envSchema = z.object({
  NODE_ENV: z.enum(['development', 'production']).default('development'),
  MONGO_URI: z.string().url(),
  JWT_SECRET: z.string().min(32),
  LOG_LEVEL: z.enum(['debug', 'info', 'warn', 'error']).default('info'),
  CONCURRENCY_LIMIT: stringToNumber.default('3'),
  OPENAI_API_KEY: z.string().startsWith('sk-'),
  PINECONE_API_KEY: z.string().min(1),
  PINECONE_INDEX_NAME: z.string().min(1).default('headlines'),
  UPSTASH_REDIS_REST_URL: z.string().url().optional(),
  UPSTASH_REDIS_REST_TOKEN: z.string().min(1).optional(),
  SMTP_HOST: z.string().min(1),
  SMTP_PORT: stringToNumber,
  SMTP_SECURE: stringToBoolean,
  SMTP_USER: z.string().email(),
  SMTP_PASS: z.string().min(1),
  SMTP_FROM_ADDRESS: z.string().email(),
  SMTP_FROM_NAME: z.string().min(1).default('Headlines AI'),
  NEXT_PUBLIC_VAPID_PUBLIC_KEY: z.string().min(1),
  VAPID_PRIVATE_KEY: z.string().min(1),
  VAPID_SUBJECT: z.string().startsWith('mailto:'),
  NEXT_PUBLIC_PUSHER_KEY: z.string().min(1),
  NEXT_PUBLIC_PUSHER_CLUSTER: z.string().min(1),
  PUSHER_APP_ID: z.string().min(1),
  PUSHER_KEY: z.string().min(1),
  PUSHER_SECRET: z.string().min(1),
  PUSHER_CLUSTER: z.string().min(1),
  GROQ_API_KEY: z.string().startsWith('gsk_').optional(),
  SERPER_API_KEY: z.string().min(1).optional(),
  NEWSAPI_API_KEY: z.string().min(1),
})

let validatedEnv = null
function validateAndExportEnv() {
  if (validatedEnv) return validatedEnv
  try {
    validatedEnv = envSchema.parse(process.env)
    return validatedEnv
  } catch (error) {
    console.error('\n❌ CRITICAL: Invalid environment variables found!\n')
    console.error(JSON.stringify(error.flatten().fieldErrors, null, 2))
    console.error('\nHalting application. Please update your .env file.\n')
    if (typeof process !== 'undefined' && process.exit) {
      process.exit(1)
    }
    throw new Error('Invalid environment variables')
  }
}
export const env = validateAndExportEnv()

// --- Static and Derived Configs ---
export const IS_REFRESH_MODE = process.env.REFRESH_MODE === 'true'
export const MAX_ARTICLE_CHARS = 30000
export const LLM_CONTEXT_MAX_CHARS = 25000
export const MIN_HEADLINE_CHARS = 5
export const MAX_HEADLINE_CHARS = 500
export const AI_BATCH_SIZE = 6

export const SMTP_CONFIG = {
  host: env.SMTP_HOST,
  port: env.SMTP_PORT,
  secure: env.SMTP_SECURE,
  auth: { user: env.SMTP_USER, pass: env.SMTP_PASS },
  fromAddress: env.SMTP_FROM_ADDRESS || env.SMTP_USER,
  fromName: env.SMTP_FROM_NAME,
  pool: true,
  maxConnections: 5,
  maxMessages: 100,
  rateLimit: 10,
}

export const EMAIL_CONFIG = {
  templateName: 'wealthEvents',
  subject: 'New Nordic Banking Opportunities Detected',
  language: 'en',
  brandName: 'Your Wealth Watch',
  companyAddress: 'Wealth Watch Inc., Paris, France',
  unsubscribeUrl: '#',
}

export const SUPERVISOR_EMAIL_CONFIG = {
  templateName: 'supervisorReport',
  subject: '⚙️ Hourly Headlines Processing Run Summary',
  language: 'en',
  brandName: 'Headlines Processing Bot',
}

export { settings, initializeSettings }

```

## 📄 src/next.js
*Lines: 20, Size: 492 Bytes*

```javascript
import 'server-only'

// Explicitly re-export every constant and function from the shared core file.
// This is the most robust way to ensure Next.js's bundler correctly handles
// the module while respecting the 'server-only' directive.
export {
  env,
  settings,
  initializeSettings,
  IS_REFRESH_MODE,
  MAX_ARTICLE_CHARS,
  LLM_CONTEXT_MAX_CHARS,
  MIN_HEADLINE_CHARS,
  MAX_HEADLINE_CHARS,
  AI_BATCH_SIZE,
  SMTP_CONFIG,
  EMAIL_CONFIG,
  SUPERVISOR_EMAIL_CONFIG,
} from './index.js'

```

## 📄 src/node.js
*Lines: 2, Size: 27 Bytes*

```javascript
export * from './index.js'

```

## 📄 src/settings.js
*Lines: 55, Size: 1.61 KB*

```javascript
// packages/config/src/settings.js
import { Setting } from '@headlines/models'
// This file must have ZERO workspace dependencies.
// We will use console.log for this critical, low-level module.

const DEFAULTS = {
  HEADLINES_RELEVANCE_THRESHOLD: 25,
  ARTICLES_RELEVANCE_THRESHOLD: 45,
  EVENT_RELEVANCE_THRESHOLD: 50,
  MINIMUM_EVENT_AMOUNT_USD_MILLIONS: 20,
  HIGH_SIGNAL_HEADLINE_THRESHOLD: 90,
  AGENT_DISAGREEMENT_THRESHOLD: 50,
  SINGLETON_RELEVANCE_THRESHOLD: 85,
  HIGH_VALUE_DEAL_USD_MM: 50,
  SIGNIFICANT_PRIVATE_BENEFICIARY_USD_MM: 30,
  WATCHLIST_SCORE_BOOST: 35,
  SUGGESTION_GENERATION_THRESHOLD: 80,
  MIN_ARTICLE_CHARS: 100,
  LLM_MODEL_HEADLINE_ASSESSMENT: 'gpt-5-mini',
  LLM_MODEL_ARTICLE_ASSESSMENT: 'gpt-5-mini',
  LLM_MODEL_SYNTHESIS: 'gpt-5-mini',
  LLM_MODEL_UTILITY: 'gpt-5-nano',
}

export const settings = { ...DEFAULTS }

let isInitialized = false

export async function initializeSettings() {
  if (isInitialized) return
  console.log('[Config] Loading pipeline settings from database...')
  try {
    const dbSettings = await Setting.find({}).lean()
    if (dbSettings.length === 0) {
      console.warn(
        '[Config] No settings found in the database. The pipeline will run on default values.'
      )
    } else {
      dbSettings.forEach((setting) => {
        settings[setting.key] = setting.value
      })
      console.log(
        `[Config] Successfully loaded ${dbSettings.length} settings from the database.`
      )
    }
    isInitialized = true
  } catch (error) {
    console.error(
      '[Config] CRITICAL: Failed to load settings from database. Halting.',
      error
    )
    throw error
  }
}

```


================================================================================

# 📦 PACKAGE: DATA-ACCESS

# 📁 PROJECT DIRECTORY STRUCTURE

Total: 25 files, 3 directories

```
headlines/
├── 📁 src/
│   ├── 📁 core/
│   │   ├── 📄 admin.js
│   │   ├── 📄 aiSourceDiscovery.js
│   │   ├── 📄 articles.js
│   │   ├── 📄 auth.js
│   │   ├── 📄 chat.js
│   │   ├── 📄 dashboard.js
│   │   ├── 📄 email.js
│   │   ├── 📄 events.js
│   │   ├── 📄 export.js
│   │   ├── 📄 knowledge.js
│   │   ├── 📄 opportunities.js
│   │   ├── 📄 pipeline.js
│   │   ├── 📄 relationships.js
│   │   ├── 📄 settings.js
│   │   ├── 📄 subscriber.js
│   │   ├── 📄 upload.js
│   │   ├── 📄 userSettings.js
│   │   ├── 📄 verdicts.js
│   │   └── 📄 watchlist.js
│   ├── 📁 seed/
│   │   └── 📄 dev-user.js
│   ├── 📄 dbConnect.js
│   ├── 📄 index.js
│   ├── 📄 queryBuilder.js
│   └── 📄 revalidate.js
└── 📄 package.json
```

# 📋 PROJECT METADATA

**Generated**: 2025-09-29T13:20:36.405Z
**Repository Path**: /home/mark/Repos/projects/headlines/packages/data-access
**Total Files**: 25
**Package**: @headlines/data-access@1.0.0
**Description**: Shared, server-only data access logic for the Headlines monorepo.



---


## 📄 package.json
*Lines: 23, Size: 627 Bytes*

```json
{
  "name": "@headlines/data-access",
  "version": "1.0.0",
  "description": "Shared, server-only data access logic for the Headlines monorepo.",
  "main": "src/index.js",
  "type": "module",
  "license": "ISC",
  "exports": {
    ".": "./src/index.js",
    "./dbConnect.js": "./src/dbConnect.js",
    "./seed/dev-user.js": "./src/seed/dev-user.js"
  },
  "dependencies": {
    "@headlines/ai-services": "workspace:*",
    "@headlines/config": "workspace:*",
    "@headlines/models": "workspace:*",
    "@pinecone-database/pinecone": "^6.1.2",
    "bcryptjs": "^3.0.2",
    "mongoose": "^8.18.1",
    "openai": "^5.22.0"
  }
}

```

## 📄 src/core/admin.js
*Lines: 232, Size: 6.72 KB*

```javascript
'use server'

import {
  Subscriber,
  Country,
  Source,
  WatchlistEntity,
  WatchlistSuggestion,
  SourceSuggestion,
} from '@headlines/models'
import { buildQuery } from '../queryBuilder.js'

export async function createSubscriber(userData) {
  try {
    await dbConnect();
    const newUser = new Subscriber(userData)
    await newUser.save()
    return { success: true, subscriber: JSON.parse(JSON.stringify(newUser)) }
  } catch (e) {
    if (e.code === 11000)
      return { success: false, error: 'A user with this email already exists.' }
    return { success: false, error: 'Failed to create subscriber.' }
  }
}

export async function updateSubscriber(userId, updateData) {
  try {
    await dbConnect();
    if (updateData.password === '') delete updateData.password
    const user = await Subscriber.findByIdAndUpdate(
      userId,
      { $set: updateData },
      { new: true, runValidators: true }
    ).lean()
    if (!user) return { success: false, error: 'User not found.' }
    return { success: true, subscriber: JSON.parse(JSON.stringify(user)) }
  } catch (e) {
    console.error('[updateSubscriber Error]', e)
    return { success: false, error: 'Failed to update subscriber.' }
  }
}

export async function deleteSubscriber(userId) {
  try {
    await dbConnect();
    const result = await Subscriber.findByIdAndDelete(userId)
    if (!result) return { success: false, error: 'User not found.' }
    return { success: true }
  } catch (e) {
    console.error('[deleteSubscriber Error]', e)
    return { success: false, error: 'Failed to delete subscriber.' }
  }
}

export async function createCountry(countryData) {
  try {
    await dbConnect();
    const newCountry = new Country(countryData)
    await newCountry.save()
    return { success: true, country: JSON.parse(JSON.stringify(newCountry)) }
  } catch (e) {
    if (e.code === 11000) return { success: false, error: 'Country already exists.' }
    return { success: false, error: 'Failed to create country.' }
  }
}

export async function updateCountry(countryId, updateData) {
  try {
    await dbConnect();
    const country = await Country.findByIdAndUpdate(
      countryId,
      { $set: updateData },
      { new: true }
    ).lean()
    if (!country) return { success: false, error: 'Country not found.' }
    return { success: true, country: JSON.parse(JSON.stringify(country)) }
  } catch (e) {
    return { success: false, error: 'Failed to update country.' }
  }
}

export async function createSource(sourceData) {
  try {
    await dbConnect();
    const newSource = new Source(sourceData)
    await newSource.save()
    return { success: true, source: JSON.parse(JSON.stringify(newSource)) }
  } catch (e) {
    if (e.code === 11000)
      return { success: false, error: 'A source with this name already exists.' }
    return { success: false, error: 'Failed to create source.' }
  }
}

export async function updateSource(sourceId, updateData) {
  try {
    await dbConnect();
    const updatedSource = await Source.findByIdAndUpdate(
      sourceId,
      { $set: updateData },
      { new: true }
    ).lean()
    if (!updatedSource) return { success: false, error: 'Source not found.' }
    return { success: true, source: JSON.parse(JSON.stringify(updatedSource)) }
  } catch (e) {
    return { success: false, error: 'Failed to update source.' }
  }
}

export const getAllCountries = async () => {
  try {
    await dbConnect();
    const countries = await Country.aggregate([
      { $match: {} },
      {
        $lookup: {
          from: 'synthesized_events',
          localField: 'name',
          foreignField: 'country',
          as: 'events',
        },
      },
      {
        $lookup: {
          from: 'sources',
          localField: 'name',
          foreignField: 'country',
          as: 'sources',
        },
      },
      {
        $project: {
          name: 1,
          isoCode: 1,
          status: 1,
          eventCount: { $size: '$events' },
          sourceCount: { $size: '$sources' },
          activeSourceCount: {
            $size: {
              $filter: {
                input: '$sources',
                as: 'source',
                cond: { $eq: ['$$source.status', 'active'] },
              },
            },
          },
        },
      },
    ])
    return { success: true, data: JSON.parse(JSON.stringify(countries)) }
  } catch (e) {
    return { success: false, error: 'Failed to fetch countries.' }
  }
}

export const getAllSubscribers = async ({
  page = 1,
  filters = {},
  sort = 'createdAt_desc',
}) => {
  try {
    await dbConnect();
    const { queryFilter, sortOptions } = await buildQuery(Subscriber, { filters, sort })
    const SUBSCRIBERS_PER_PAGE = 50
    const skipAmount = (page - 1) * SUBSCRIBERS_PER_PAGE
    const [subscribers, total] = await Promise.all([
      Subscriber.find(queryFilter)
        .sort(sortOptions)
        .skip(skipAmount)
        .limit(SUBSCRIBERS_PER_PAGE)
        .lean(),
      Subscriber.countDocuments(queryFilter),
    ])
    return { success: true, data: JSON.parse(JSON.stringify(subscribers)), total }
  } catch (e) {
    console.error('[getAllSubscribers Error]', e)
    return { success: false, error: 'Failed to fetch subscribers.' }
  }
}

export const getAllSources = async () => {
  try {
    await dbConnect();
    const sources = await Source.find({}).sort({ country: 1, name: 1 }).lean()
    return { success: true, data: JSON.parse(JSON.stringify(sources)) }
  } catch (e) {
    return { success: false, error: 'Failed to fetch sources.' }
  }
}

export const getAllWatchlistEntities = async ({
  page = 1,
  filters = {},
  sort = 'name_asc',
} = {}) => {
  try {
    const { queryFilter, sortOptions } = await buildQuery(WatchlistEntity, {
      filters,
      sort,
    })
    const ITEMS_PER_PAGE = 50 // A reasonable default
    const skipAmount = (page - 1) * ITEMS_PER_PAGE

    const [entities, total] = await Promise.all([
      WatchlistEntity.find(queryFilter)
        .sort(sortOptions)
        .skip(skipAmount)
        .limit(ITEMS_PER_PAGE)
        .lean(),
      WatchlistEntity.countDocuments(queryFilter),
    ])

    return { success: true, data: JSON.parse(JSON.stringify(entities)), total }
  } catch (e) {
    console.error('[getAllWatchlistEntities Error]', e)
    return { success: false, error: 'Failed to fetch watchlist entities.' }
  }
}

export const getSuggestions = async () => {
  try {
    await dbConnect();
    const [watchlistSuggestions, sourceSuggestions] = await Promise.all([
      WatchlistSuggestion.find({ status: 'candidate' }).sort({ createdAt: -1 }).lean(),
      SourceSuggestion.find({ status: 'pending' }).sort({ createdAt: -1 }).lean(),
    ])
    return { success: true, data: { watchlistSuggestions, sourceSuggestions } }
  } catch (e) {
    return { success: false, error: 'Failed to fetch suggestions.' }
  }
}

```

## 📄 src/core/aiSourceDiscovery.js
*Lines: 35, Size: 1.1 KB*

```javascript
// packages/data-access/src/actions/aiSourceDiscovery.js
import { testSourceConfig as scrapeUrl } from './scrape.js'
import { callLanguageModel } from '@headlines/ai-services'
import { instructionSourceDiscovery } from '@headlines/prompts'
// DEFINITIVE FIX: Import from the server-only entry point of the config package.
import { settings } from '@headlines/config'

const AI_AGENT_MODEL = settings.LLM_MODEL_UTILITY

export async function suggestSections(url) {
  const scrapeResult = {
    success: true,
    content: '<div>Mock Content</div>',
  }

  try {
    const data = await callLanguageModel({
      modelName: AI_AGENT_MODEL,
      systemPrompt: instructionSourceDiscovery,
      userContent: `Analyze the HTML from ${url}:\n\n${scrapeResult.content}`,
      isJson: true,
    })
    return { success: true, data: data.suggestions }
  } catch (e) {
    return { success: false, error: 'AI agent failed to suggest sections.' }
  }
}

export async function suggestSelector(url, targetType) {
  return {
    success: true,
    data: { selector: `div.${targetType}`, confidence: 0.9, sample: 'Sample Text' },
  }
}

```

## 📄 src/core/articles.js
*Lines: 71, Size: 2.14 KB*

```javascript
'use server'

import { Article } from '@headlines/models'
import { buildQuery } from '../queryBuilder.js'
import dbConnect from '../dbConnect.js' // Make sure this is imported
import mongoose from 'mongoose'

const ARTICLES_PER_PAGE = 50

export async function getArticles({
  page = 1,
  filters = {},
  sort = 'date_desc',
  userId = null,
}) {
  await dbConnect() // <-- ADD THIS BACK
  let { queryFilter, sortOptions } = await buildQuery(Article, {
    filters,
    sort,
    userId,
  })
  // ... rest of the function is the same
  const [articles, total] = await Promise.all([
    Article.find(queryFilter)
      .sort(sortOptions)
      .skip((page - 1) * ARTICLES_PER_PAGE)
      .limit(ARTICLES_PER_PAGE)
      .lean(),
    Article.countDocuments(queryFilter),
  ])
  // ...
  return { success: true, data: JSON.parse(JSON.stringify(articles)), total }
}

export async function getTotalArticleCount({ filters = {}, userId = null }) {
  await dbConnect() // <-- ADD THIS BACK
  const { queryFilter } = await buildQuery(Article, { filters, userId })
  const total = await Article.countDocuments(queryFilter)
  return { success: true, total }
}

export async function updateArticle(articleId, updateData) {
  await dbConnect() // <-- ADD THIS BACK
  const article = await Article.findByIdAndUpdate(
    articleId,
    { $set: updateData },
    { new: true }
  ).lean()
  if (!article) return { success: false, error: 'Article not found.' }
  return { success: true, data: JSON.parse(JSON.stringify(article)) }
}

export async function deleteArticle(articleId) {
  await dbConnect() // <-- ADD THIS BACK
  const result = await Article.findByIdAndDelete(articleId)
  if (!result) return { success: false, error: 'Article not found.' }
  return { success: true }
}

export async function getArticleDetails(articleId) {
  await dbConnect() // <-- ADD THIS BACK
  if (!mongoose.Types.ObjectId.isValid(articleId)) {
    return { success: false, error: 'Invalid ID format.' }
  }
  const article = await Article.findById(articleId).lean()
  if (!article) {
    return { success: false, error: 'Article not found.' }
  }
  return { success: true, data: JSON.parse(JSON.stringify(article)) }
}

```

## 📄 src/core/auth.js
*Lines: 36, Size: 1.04 KB*

```javascript
// File: packages/data-access/src/actions/auth.js (version 2.1 - Connection Centralized)
import { Subscriber } from '@headlines/models'
import bcrypt from 'bcryptjs'

export async function loginUser({ email, password }) {
  if (!email || !password) {
    return { success: false, error: 'Email and password are required.' }
  }

  try {
    await dbConnect();
    const user = await Subscriber.findOne({
      email: email.toLowerCase().trim(),
      isActive: true,
    })
      .select('+password')
      .lean()

    if (!user) {
      return { success: false, error: 'Invalid credentials or inactive account.' }
    }

    const isPasswordMatch = await bcrypt.compare(password, user.password)

    if (!isPasswordMatch) {
      return { success: false, error: 'Invalid credentials or inactive account.' }
    }

    const { password: _, ...userPayload } = user
    return { success: true, user: userPayload }
  } catch (error) {
    console.error('[loginUser Action Error]', error)
    return { success: false, error: 'An internal server error occurred.' }
  }
}

```

## 📄 src/core/chat.js
*Lines: 27, Size: 1.1 KB*

```javascript
// packages/data-access/src/actions/chat.js (version 2.0.0)
import { callLanguageModel } from '@headlines/ai-services'
import { settings } from '@headlines/config'

const TITLE_GENERATOR_MODEL = settings.LLM_MODEL_UTILITY

const TITLE_GENERATOR_PROMPT = `You are a title generation AI. Your task is to read a conversation and create a concise, 5-word-or-less title that accurately summarizes the main topic. Example Title: "Anders Holch Povlsen's Bestseller"`

export async function generateChatTitle(messages) {
  if (!messages || messages.length < 2) {
    return { success: false, error: 'Not enough messages to generate a title.' }
  }
  try {
    const conversationText = messages.map((m) => `${m.role}: ${m.content}`).join('\n')
    const title = await callLanguageModel({
      modelName: TITLE_GENERATOR_MODEL,
      systemPrompt: TITLE_GENERATOR_PROMPT,
      userContent: conversationText,
      isJson: false,
    })
    const cleanedTitle = title.trim().replace(/"/g, '')
    return { success: true, title: cleanedTitle }
  } catch (error) {
    return { success: false, error: 'Failed to generate title.' }
  }
}

```

## 📄 src/core/dashboard.js
*Lines: 105, Size: 2.77 KB*

```javascript
// File: packages/data-access/src/actions/dashboard.js
import {
  Source,
  Subscriber,
  WatchlistEntity,
  Article,
  SynthesizedEvent,
  Opportunity,
  Country,
} from '@headlines/models'
import dbConnect from '../dbConnect.js'

export async function getDashboardStats() {
  try {
    await dbConnect()
    const [
      sourceStats,
      userStats,
      watchlistStats,
      articleStats,
      eventStats,
      opportunityStats,
    ] = await Promise.all([
      Source.aggregate([
        {
          $group: {
            _id: null,
            total: { $sum: 1 },
            active: { $sum: { $cond: [{ $eq: ['$status', 'active'] }, 1, 0] } },
          },
        },
      ]),
      Subscriber.aggregate([
        {
          $group: {
            _id: null,
            total: { $sum: 1 },
            active: { $sum: { $cond: ['$isActive', 1, 0] } },
          },
        },
      ]),
      WatchlistEntity.aggregate([{ $group: { _id: null, total: { $sum: 1 } } }]),
      Article.aggregate([{ $group: { _id: null, total: { $sum: 1 } } }]),
      SynthesizedEvent.aggregate([{ $group: { _id: null, total: { $sum: 1 } } }]),
      Opportunity.aggregate([{ $group: { _id: null, total: { $sum: 1 } } }]),
    ])

    const stats = {
      sources: sourceStats[0] || { total: 0, active: 0 },
      users: userStats[0] || { total: 0, active: 0 },
      watchlist: watchlistStats[0] || { total: 0 },
      articles: articleStats[0] || { total: 0 },
      events: eventStats[0] || { total: 0 },
      opportunities: opportunityStats[0] || { total: 0 },
    }

    delete stats.sources._id // Clean up aggregation artifact
    delete stats.users._id
    delete stats.watchlist._id
    delete stats.articles._id
    delete stats.events._id
    delete stats.opportunities._id

    return { success: true, data: stats }
  } catch (e) {
    return { success: false, error: 'Failed to fetch dashboard stats.' }
  }
}

// This is the missing function
export async function getGlobalCountries() {
  try {
    await dbConnect()
    const countries = await Country.aggregate([
      { $match: { status: 'active' } },
      {
        $lookup: {
          from: 'synthesized_events',
          localField: 'name',
          foreignField: 'country',
          as: 'events',
        },
      },
      {
        $project: {
          name: 1,
          isoCode: 1,
          count: { $size: '$events' },
        },
      },
      // --- ADD THIS STAGE TO FILTER OUT ZERO-COUNT COUNTRIES ---
      {
        $match: {
          count: { $gt: 0 },
        },
      },
      // ---------------------------------------------------------
      { $sort: { name: 1 } },
    ])
    return { success: true, data: JSON.parse(JSON.stringify(countries)) }
  } catch (e) {
    return { success: false, error: 'Failed to fetch global countries.' }
  }
}

```

## 📄 src/core/email.js
*Lines: 46, Size: 1.57 KB*

```javascript
// packages/data-access/src/actions/email.js (version 1.0)
import { SynthesizedEvent, Opportunity, Article } from '@headlines/models'
import dbConnect from '../dbConnect.js'
// This import will need a proper mailer service setup, for now we mock it.
// import { sendSingleItemEmail } from '@/lib/mailer';

async function sendItemByEmail(itemId, itemType) {
  try {
    await dbConnect()

    let item
    const modelMap = {
      event: SynthesizedEvent,
      opportunity: Opportunity,
      article: Article,
    }

    const Model = modelMap[itemType]
    if (!Model) return { success: false, error: 'Invalid item type.' }

    item = await Model.findById(itemId).lean()
    if (!item) return { success: false, error: 'Item not found.' }

    // In a real implementation, you would format this into a nice HTML email.
    const emailContent = `
            <h1>Item Reminder</h1>
            <p><strong>Type:</strong> ${itemType}</p>
            <p><strong>ID:</strong> ${itemId}</p>
            <pre>${JSON.stringify(item, null, 2)}</pre>
        `

    console.log(`--- SIMULATING EMAIL ---`)
    console.log(`TO: User ${userId}`)
    console.log(`SUBJECT: Your Requested Item: ${item.headline || item.reachOutTo}`)
    console.log(emailContent)
    // await sendSingleItemEmail(userId, `Your Requested Item: ${item.headline || item.reachOutTo}`, emailContent);

    return { success: true, message: 'Item has been sent to your email.' }
  } catch (e) {
    console.error('[sendItemByEmail Error]:', e)
    return { success: false, error: 'Failed to send item by email.' }
  }
}

export { sendItemByEmail }

```

## 📄 src/core/events.js
*Lines: 75, Size: 2.41 KB*

```javascript
'use server'

import dbConnect from '../dbConnect.js'
import { SynthesizedEvent, Article, Opportunity } from '@headlines/models'
import { buildQuery } from '../queryBuilder.js'
import mongoose from 'mongoose'

const EVENTS_PER_PAGE = 50

export async function getEvents({
  page = 1,
  filters = {},
  sort = 'createdAt_desc',
  userId = null,
}) {
  await dbConnect() // <-- ADD THIS LINE
  const { queryFilter, sortOptions } = await buildQuery(SynthesizedEvent, {
    filters,
    sort,
    userId,
  })
  const skipAmount = (page - 1) * EVENTS_PER_PAGE

  const [events, total] = await Promise.all([
    SynthesizedEvent.find(queryFilter)
      .select('-synthesized_summary')
      .sort(sortOptions)
      .skip(skipAmount)
      .limit(EVENTS_PER_PAGE)
      .lean(),
    SynthesizedEvent.countDocuments(queryFilter),
  ])
  return { success: true, data: JSON.parse(JSON.stringify(events)), total }
}

export async function getEventDetails(eventId) {
  await dbConnect() // <-- ADD THIS LINE
  if (!mongoose.Types.ObjectId.isValid(eventId))
    return { success: false, error: 'Invalid event ID' }
  const event = await SynthesizedEvent.findById(eventId)
    .populate({ path: 'relatedOpportunities', model: Opportunity, select: 'reachOutTo' })
    .lean()
  if (!event) return { success: false, error: 'Event not found' }
  return { success: true, data: JSON.parse(JSON.stringify(event)) }
}

export async function updateEvent(eventId, updateData) {
  await dbConnect() // <-- ADD THIS LINE
  if (!mongoose.Types.ObjectId.isValid(eventId))
    return { success: false, error: 'Invalid event ID' }
  const event = await SynthesizedEvent.findByIdAndUpdate(
    eventId,
    { $set: updateData },
    { new: true, runValidators: true }
  ).lean()
  if (!event) return { success: false, error: 'Event not found.' }
  return { success: true, data: JSON.parse(JSON.stringify(event)) }
}

export async function deleteEvent(eventId) {
  await dbConnect() // <-- ADD THIS LINE
  if (!mongoose.Types.ObjectId.isValid(eventId))
    return { success: false, error: 'Invalid event ID' }
  const result = await SynthesizedEvent.findByIdAndDelete(eventId)
  if (!result) return { success: false, error: 'Event not found.' }
  await Promise.all([
    Opportunity.updateMany({ events: eventId }, { $pull: { events: eventId } }),
    Article.updateMany(
      { synthesizedEventId: eventId },
      { $unset: { synthesizedEventId: '' } }
    ),
  ])
  return { success: true }
}

```

## 📄 src/core/export.js
*Lines: 262, Size: 8.07 KB*

```javascript
// packages/data-access/src/actions/export.js
import { Opportunity, Subscriber, SynthesizedEvent, Article } from '@headlines/models'
import { buildQuery } from '../queryBuilder.js'
import dbConnect from '../dbConnect.js'

// --- Helper Functions ---

function escapeXml(str) {
  if (str === null || str === undefined) return ''
  return String(str).replace(/[<>&'"]/g, (c) => {
    switch (c) {
      case '<':
        return '&lt;'
      case '>':
        return '&gt;'
      case '&':
        return '&amp;'
      case "'":
        return '&apos;'
      case '"':
        return '&quot;'
    }
  })
}

function convertToCSV(data, columns) {
  if (!data || data.length === 0) return ''
  const headers = columns.map((c) => c.header)
  const csvRows = [headers.join(',')]
  for (const row of data) {
    const values = headers.map((header) => {
      const column = columns.find((c) => c.header === header)
      let value = column ? row[column.key] : ''
      if (column && column.key.includes('.')) {
        value = column.key.split('.').reduce((o, i) => (o ? o[i] : ''), row)
      }
      if (value === null || value === undefined) value = ''
      if (Array.isArray(value)) value = value.join('; ')
      const stringValue = String(value)
      const escaped = stringValue.replace(/"/g, '""')
      if (escaped.includes(',')) return `"${escaped}"`
      return escaped
    })
    csvRows.push(values.join(','))
  }
  return csvRows.join('\n')
}

function convertToExcelXML(data, columns) {
  let xml = `<?xml version="1.0"?>
    <?mso-application progid="Excel.Sheet"?>
    <Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet"
     xmlns:o="urn:schemas-microsoft-com:office:office"
     xmlns:x="urn:schemas-microsoft-com:office:excel"
     xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet"
     xmlns:html="http://www.w3.org/TR/REC-html40">
     <Worksheet ss:Name="Export">
      <Table>`

  xml += '<Row>'
  columns.forEach((col) => {
    xml += `<Cell ss:StyleID="s1"><Data ss:Type="String">${escapeXml(col.header)}</Data></Cell>`
  })
  xml += '</Row>'

  data.forEach((row) => {
    xml += '<Row>'
    columns.forEach((col) => {
      let value = col.key.split('.').reduce((o, i) => (o ? o[i] : ''), row)
      if (value === null || value === undefined) value = ''
      if (Array.isArray(value)) value = value.join('; ')

      let type = typeof value === 'number' ? 'Number' : 'String'
      if (value instanceof Date) {
        type = 'DateTime'
        value = value.toISOString()
      }

      xml += `<Cell><Data ss:Type="${type}">${escapeXml(value)}</Data></Cell>`
    })
    xml += '</Row>'
  })

  xml += `</Table><Styles><Style ss:ID="s1"><Font ss:Bold="1"/></Style></Styles></Worksheet></Workbook>`
  return xml
}

// --- Generic Exporter ---
async function genericExporter({ model, columns, filters, sort, fileType }) {
  try {
    await dbConnect()
    const { queryFilter, sortOptions } = await buildQuery(model, {
      filters,
      sort,
      baseQuery: {},
    })
    const dataToExport = await model.find(queryFilter).sort(sortOptions).lean()

    if (fileType === 'csv') {
      const csv = convertToCSV(dataToExport, columns)
      return { success: true, data: csv, contentType: 'text/csv' }
    } else if (fileType === 'xlsx') {
      const xml = convertToExcelXML(dataToExport, columns)
      return { success: true, data: xml, contentType: 'application/vnd.ms-excel' }
    }
    return { success: false, error: 'Invalid file type.' }
  } catch (e) {
    return { success: false, error: `Failed to generate export: ${e.message}` }
  }
}

// --- Specific Implementations ---

export const exportOpportunitiesToCSV = async (params) =>
  genericExporter({
    ...params,
    model: Opportunity,
    columns: [
      { header: 'Country', key: 'basedIn' },
      { header: 'City', key: 'city' },
      { header: 'Contact', key: 'reachOutTo' },
      { header: 'Wealth ($M)', key: 'likelyMMDollarWealth' },
      { header: 'Email', key: 'contactDetails.email' },
      { header: 'Reason', key: 'whyContact' },
      { header: 'Created', key: 'createdAt' },
    ],
    fileType: 'csv',
  })

export const exportOpportunitiesToXLSX = async (params) =>
  genericExporter({
    ...params,
    model: Opportunity,
    columns: [
      { header: 'Country', key: 'basedIn' },
      { header: 'City', key: 'city' },
      { header: 'Contact', key: 'reachOutTo' },
      { header: 'Wealth ($M)', key: 'likelyMMDollarWealth' },
      { header: 'Email', key: 'contactDetails.email' },
      { header: 'Reason', key: 'whyContact' },
      { header: 'Created', key: 'createdAt' },
    ],
    fileType: 'xlsx',
  })

export const exportUsersToCSV = async (params) =>
  genericExporter({
    ...params,
    model: Subscriber,
    columns: [
      { header: 'Email', key: 'email' },
      { header: 'FirstName', key: 'firstName' },
      { header: 'LastName', key: 'lastName' },
      { header: 'IsActive', key: 'isActive' },
      { header: 'Role', key: 'role' },
      { header: 'Tier', key: 'subscriptionTier' },
      { header: 'Created', key: 'createdAt' },
    ],
    fileType: 'csv',
  })

export const exportUsersToXLSX = async (params) =>
  genericExporter({
    ...params,
    model: Subscriber,
    columns: [
      { header: 'Email', key: 'email' },
      { header: 'FirstName', key: 'firstName' },
      { header: 'LastName', key: 'lastName' },
      { header: 'IsActive', key: 'isActive' },
      { header: 'Role', key: 'role' },
      { header: 'Tier', key: 'subscriptionTier' },
      { header: 'Created', key: 'createdAt' },
    ],
    fileType: 'xlsx',
  })

export const exportEventsToCSV = async (params) =>
  genericExporter({
    ...params,
    model: SynthesizedEvent,
    columns: [
      { header: 'Headline', key: 'synthesized_headline' },
      { header: 'Summary', key: 'synthesized_summary' },
      { header: 'Score', key: 'highest_relevance_score' },
      { header: 'Country', key: 'country' },
      { header: 'Created', key: 'createdAt' },
    ],
    fileType: 'csv',
  })

export const exportEventsToXLSX = async (params) =>
  genericExporter({
    ...params,
    model: SynthesizedEvent,
    columns: [
      { header: 'Headline', key: 'synthesized_headline' },
      { header: 'Summary', key: 'synthesized_summary' },
      { header: 'Score', key: 'highest_relevance_score' },
      { header: 'Country', key: 'country' },
      { header: 'Created', key: 'createdAt' },
    ],
    fileType: 'xlsx',
  })

export const exportArticlesToCSV = async (params) =>
  genericExporter({
    ...params,
    model: Article,
    columns: [
      { header: 'Headline', key: 'headline' },
      { header: 'Newspaper', key: 'newspaper' },
      { header: 'Country', key: 'country' },
      { header: 'Headline Score', key: 'relevance_headline' },
      { header: 'Article Score', key: 'relevance_article' },
      { header: 'Link', key: 'link' },
      { header: 'Created', key: 'createdAt' },
    ],
    fileType: 'csv',
  })

export const exportArticlesToXLSX = async (params) =>
  genericExporter({
    ...params,
    model: Article,
    columns: [
      { header: 'Headline', key: 'headline' },
      { header: 'Newspaper', key: 'newspaper' },
      { header: 'Country', key: 'country' },
      { header: 'Headline Score', key: 'relevance_headline' },
      { header: 'Article Score', key: 'relevance_article' },
      { header: 'Link', key: 'link' },
      { header: 'Created', key: 'createdAt' },
    ],
    fileType: 'xlsx',
  })

// --- Generic Exporter ---
export async function generateExport({ model, columns, filters, sort, fileType }) {
  await dbConnect()
  const { queryFilter, sortOptions } = await buildQuery(model, {
    filters,
    sort,
    baseQuery: {},
  })
  const dataToExport = await model.find(queryFilter).sort(sortOptions).lean()

  if (fileType === 'csv') {
    const csv = convertToCSV(dataToExport, columns)
    return { success: true, data: csv, contentType: 'text/csv', extension: 'csv' }
  } else if (fileType === 'xlsx') {
    const xml = convertToExcelXML(dataToExport, columns)
    return {
      success: true,
      data: xml,
      contentType: 'application/vnd.ms-excel',
      extension: 'xls',
    }
  }
  throw new Error('Invalid file type specified for export.')
}

```

## 📄 src/core/knowledge.js
*Lines: 81, Size: 2.63 KB*

```javascript
// src/actions/knowledge.js (Corrected)
import { Pinecone } from '@pinecone-database/pinecone'
import mongoose from 'mongoose'
import dbConnect from '../dbConnect.js'
import { Article } from '@headlines/models'
import { generateEmbedding } from '@headlines/ai-services'
import { env } from '@headlines/config'

let pineconeIndex
function getPineconeIndex() {
  if (!pineconeIndex) {
    const pc = new Pinecone({ apiKey: env.PINECONE_API_KEY })
    pineconeIndex = pc.index(env.PINECONE_INDEX_NAME)
  }
  return pineconeIndex
}

export async function addKnowledge(data) {
  const { headline, business_summary, source, country, link } = data
  console.log(`[Add Knowledge] Attempting to add new knowledge: "${headline}"`)

  if (!headline || !business_summary || !source || !country || !link) {
    console.error('[Add Knowledge] Validation failed: Missing required fields.')
    return { success: false, message: 'All fields are required.' }
  }

  try {
    const index = getPineconeIndex()
    await dbConnect()
    console.log('[Add Knowledge] Database connected.')

    console.log('[Add Knowledge] Generating embedding...')
    const textToEmbed = `${headline}\n${business_summary}`
    const embedding = await generateEmbedding(textToEmbed)
    console.log('[Add Knowledge] Embedding generated successfully.')

    const newArticle = new Article({
      _id: new mongoose.Types.ObjectId(),
      headline,
      link,
      newspaper: source,
      source: 'Manual Upload',
      country,
      relevance_headline: 100,
      assessment_headline: 'Manually uploaded by user.',
      relevance_article: 100,
      assessment_article: business_summary,
      embedding: embedding,
      key_individuals: [],
    })
    console.log('[Add Knowledge] MongoDB document created.')

    await newArticle.save()
    console.log('[Add Knowledge] Saved to MongoDB.')

    const key_individual_names = (newArticle.key_individuals || []).map((p) => p.name)

    await index.upsert([
      {
        id: newArticle._id.toString(),
        values: embedding,
        metadata: {
          headline: newArticle.headline,
          summary: newArticle.assessment_article,
          newspaper: newArticle.newspaper,
          country: newArticle.country,
          key_individuals: key_individual_names,
        },
      },
    ])
    console.log('[Add Knowledge] Upserted to Pinecone.')

    console.log('[Add Knowledge] Revalidation responsibility moved to API routes.')

    return { success: true, message: 'Knowledge successfully added and embedded.' }
  } catch (error) {
    console.error('[Add Knowledge Error]', error)
    return { success: false, message: 'Failed to add knowledge.' }
  }
}

```

## 📄 src/core/opportunities.js
*Lines: 86, Size: 2.89 KB*

```javascript
// File: packages/data-access/src/actions/opportunities.js (Corrected Sorting)

import dbConnect from '../dbConnect.js'
import { Opportunity } from '@headlines/models'
import { buildQuery } from '../queryBuilder.js'
import mongoose from 'mongoose'

const OPPORTUNITIES_PER_PAGE = 50

export async function getTotalOpportunitiesCount({ filters = {}, userId = null }) {
  await dbConnect()
  const { queryFilter } = await buildQuery(Opportunity, { filters, userId })
  const total = await Opportunity.countDocuments(queryFilter)
  return { success: true, total }
}

export async function getOpportunities({
  page = 1,
  filters = {},
  sort = 'date_desc',
  userId = null,
}) {
  await dbConnect()
  let { queryFilter, sortOptions } = await buildQuery(Opportunity, {
    filters,
    sort,
    userId,
  })

  // --- START: OPPORTUNITY-SPECIFIC SORTING FIX ---
  // If we are sorting by size, we MUST exclude documents where the
  // wealth is null, undefined, or 0, as they would otherwise sort first.
  if (sort === 'size_desc') {
    if (queryFilter.$and) {
      queryFilter.$and.push({ likelyMMDollarWealth: { $gt: 0 } })
    } else if (Object.keys(queryFilter).length > 0) {
      queryFilter = { $and: [queryFilter, { likelyMMDollarWealth: { $gt: 0 } }] }
    } else {
      queryFilter = { likelyMMDollarWealth: { $gt: 0 } }
    }
  }
  // --- END: OPPORTUNITY-SPECIFIC SORTING FIX ---

  const skipAmount = (page - 1) * OPPORTUNITIES_PER_PAGE
  const [opportunities, total] = await Promise.all([
    Opportunity.find(queryFilter)
      .populate({ path: 'events', select: 'synthesized_headline', options: { limit: 1 } })
      .sort(sortOptions)
      .skip(skipAmount)
      .limit(OPPORTUNITIES_PER_PAGE)
      .lean(),
    Opportunity.countDocuments(queryFilter),
  ])
  return { success: true, data: JSON.parse(JSON.stringify(opportunities)), total }
}

export async function getOpportunityDetails(opportunityId) {
  if (!mongoose.Types.ObjectId.isValid(opportunityId)) {
    return { success: false, error: 'Invalid ID format.' }
  }
  await dbConnect()
  const opportunity = await Opportunity.findById(opportunityId)
    .populate({ path: 'events', options: { sort: { createdAt: -1 } } })
    .lean()
  if (!opportunity) return { success: false, error: 'Opportunity not found.' }
  return { success: true, data: JSON.parse(JSON.stringify(opportunity)) }
}

export async function updateOpportunity(oppId, updateData) {
  await dbConnect()
  const opp = await Opportunity.findByIdAndUpdate(
    oppId,
    { $set: updateData },
    { new: true, runValidators: true }
  ).lean()
  if (!opp) return { success: false, error: 'Opportunity not found.' }
  return { success: true, data: JSON.parse(JSON.stringify(opp)) }
}

export async function deleteOpportunity(oppId) {
  await dbConnect()
  const result = await Opportunity.findByIdAndDelete(oppId)
  if (!result) return { success: false, error: 'Opportunity not found.' }
  return { success: true }
}

```

## 📄 src/core/pipeline.js
*Lines: 116, Size: 3.37 KB*

```javascript
// packages/data-access/src/actions/pipeline.js (version 1.0.0)
import {
  Source,
  Article,
  SynthesizedEvent,
  Opportunity,
  WatchlistEntity,
  WatchlistSuggestion,
} from '@headlines/models'
import dbConnect from '../dbConnect.js'

// --- Source Analytics & Status ---
export async function updateSourceAnalyticsBatch(bulkOps) {
  if (!bulkOps || bulkOps.length === 0) return { success: true, modifiedCount: 0 }
  try {
    await dbConnect()
    const result = await Source.bulkWrite(bulkOps)
    return { success: true, modifiedCount: result.modifiedCount }
  } catch (error) {
    return { success: false, error: error.message }
  }
}

export async function findSourcesForScraping(queryCriteria) {
  try {
    await dbConnect()
    const sources = await Source.find(queryCriteria).lean()
    return { success: true, data: JSON.parse(JSON.stringify(sources)) }
  } catch (error) {
    return { success: false, error: error.message }
  }
}

// --- Housekeeping ---
export async function performHousekeeping(deletionCriteria) {
  try {
    await dbConnect()
    const result = await Article.deleteMany(deletionCriteria)
    return { success: true, deletedCount: result.deletedCount }
  } catch (error) {
    return { success: false, error: error.message }
  }
}

// --- Data Commits ---
export async function bulkWriteEvents(eventOps) {
  if (!eventOps || eventOps.length === 0)
    return { success: true, upsertedCount: 0, modifiedCount: 0 }
  try {
    await dbConnect()
    const result = await SynthesizedEvent.bulkWrite(eventOps, { ordered: false })
    return {
      success: true,
      upsertedCount: result.upsertedCount,
      modifiedCount: result.modifiedCount,
    }
  } catch (error) {
    return { success: false, error: error.message }
  }
}

export async function bulkWriteArticles(articleOps) {
  if (!articleOps || articleOps.length === 0) return { success: true, result: null }
  try {
    await dbConnect()
    const result = await Article.bulkWrite(articleOps, { ordered: false })
    return { success: true, result }
  } catch (error) {
    return { success: false, error: error.message }
  }
}

export async function findEventsByKeys(eventKeys) {
  try {
    await dbConnect()
    const events = await SynthesizedEvent.find({ event_key: { $in: eventKeys } }).lean()
    return { success: true, data: JSON.parse(JSON.stringify(events)) }
  } catch (error) {
    return { success: false, error: error.message }
  }
}

export async function findArticlesByLinks(links) {
  try {
    await dbConnect()
    const articles = await Article.find({ link: { $in: links } })
      .select('link _id')
      .lean()
    return { success: true, data: JSON.parse(JSON.stringify(articles)) }
  } catch (error) {
    return { success: false, error: error.message }
  }
}

// --- Watchlist Suggestions ---
export async function getActiveWatchlistEntityNames() {
  try {
    await dbConnect()
    const entities = await WatchlistEntity.find({}).select('name').lean()
    return { success: true, data: entities }
  } catch (error) {
    return { success: false, error: error.message }
  }
}

export async function bulkWriteWatchlistSuggestions(bulkOps) {
  if (!bulkOps || bulkOps.length === 0) return { success: true, result: null }
  try {
    await dbConnect()
    const result = await WatchlistSuggestion.bulkWrite(bulkOps)
    return { success: true, result }
  } catch (error) {
    return { success: false, error: error.message }
  }
}

```

## 📄 src/core/relationships.js
*Lines: 52, Size: 1.74 KB*

```javascript
// packages/data-access/src/actions/relationships.js (version 2.0.0)
import { SynthesizedEvent, Opportunity } from '@headlines/models'
import dbConnect from '../dbConnect.js'
import { revalidatePath } from '../revalidate.js'
import mongoose from 'mongoose'

export async function linkOpportunityToEvent(eventId, opportunityId) {
  if (
    !mongoose.Types.ObjectId.isValid(eventId) ||
    !mongoose.Types.ObjectId.isValid(opportunityId)
  ) {
    return { success: false, error: 'Invalid ID format.' }
  }
  try {
    await dbConnect()
    await Promise.all([
      SynthesizedEvent.findByIdAndUpdate(eventId, {
        $addToSet: { relatedOpportunities: opportunityId },
      }),
      Opportunity.findByIdAndUpdate(opportunityId, { $addToSet: { events: eventId } }),
    ])
    await revalidatePath('/admin/events')
    await revalidatePath('/admin/opportunities')
    return { success: true, message: 'Relationship linked.' }
  } catch (e) {
    return { success: false, error: 'Database operation failed.' }
  }
}

export async function unlinkOpportunityFromEvent(eventId, opportunityId) {
  if (
    !mongoose.Types.ObjectId.isValid(eventId) ||
    !mongoose.Types.ObjectId.isValid(opportunityId)
  ) {
    return { success: false, error: 'Invalid ID format.' }
  }
  try {
    await dbConnect()
    await Promise.all([
      SynthesizedEvent.findByIdAndUpdate(eventId, {
        $pull: { relatedOpportunities: opportunityId },
      }),
      Opportunity.findByIdAndUpdate(opportunityId, { $pull: { events: eventId } }),
    ])
    await revalidatePath('/admin/events')
    await revalidatePath('/admin/opportunities')
    return { success: true, message: 'Relationship unlinked.' }
  } catch (e) {
    return { success: false, error: 'Database operation failed.' }
  }
}

```

## 📄 src/core/settings.js
*Lines: 39, Size: 1.22 KB*

```javascript
// packages/data-access/src/actions/settings.js (version 2.0.1)
import { Setting } from '@headlines/models'
import dbConnect from '../dbConnect.js'
import { revalidatePath } from '../revalidate.js'

export async function getSettings() {
  try {
    await dbConnect()
    const settings = await Setting.find({}).sort({ key: 1 }).lean()
    return { success: true, data: JSON.parse(JSON.stringify(settings)) }
  } catch (e) {
    return { success: false, error: 'Failed to fetch settings.' }
  }
}

export async function updateSettings(settingsData) {
  try {
    await dbConnect()
    const bulkOps = settingsData.map((setting) => {
      let castValue = setting.value
      if (setting.type === 'number') castValue = Number(setting.value)
      if (setting.type === 'boolean') castValue = Boolean(setting.value)
      return {
        updateOne: {
          filter: { _id: setting._id },
          update: { $set: { value: castValue } },
        },
      }
    })
    if (bulkOps.length > 0) {
      await Setting.bulkWrite(bulkOps)
    }
    await revalidatePath('/admin/settings')
    return { success: true, message: `${bulkOps.length} settings updated.` }
  } catch (e) {
    return { success: false, error: 'Failed to update settings.' }
  }
}

```

## 📄 src/core/subscriber.js
*Lines: 53, Size: 1.82 KB*

```javascript
// packages/data-access/src/actions/subscriber.js (Corrected)
import { Subscriber, PushSubscription } from '@headlines/models'
import dbConnect from '../dbConnect.js'

export async function getCurrentSubscriber(userId) {
  if (!userId) return { success: false, error: 'User ID is required' }
  try {
    await dbConnect()
    const user = await Subscriber.findById(userId).lean()
    if (!user) return { success: false, error: 'User not found' }
    return { success: true, data: JSON.parse(JSON.stringify(user)) }
  } catch (e) {
    return { success: false, error: 'Database error.' }
  }
}

export async function savePushSubscription(subscription, userId) {
  if (!userId) return { success: false, error: 'Authentication required' }
  if (!subscription || !subscription.endpoint)
    return { success: false, error: 'Invalid subscription object.' }
  try {
    await dbConnect()
    await PushSubscription.updateOne(
      { endpoint: subscription.endpoint },
      { $set: { ...subscription, subscriberId: userId } },
      { upsert: true }
    )
    return { success: true, message: 'Subscription saved.' }
  } catch (e) {
    return { success: false, error: 'Failed to save subscription.' }
  }
}

export async function updateUserProfile({ userId, updateData }) {
  if (!userId) return { success: false, error: 'User ID is required.' }
  if (!updateData) return { success: false, error: 'No update data provided.' }

  try {
    await dbConnect()
    const updatedUser = await Subscriber.findByIdAndUpdate(
      userId,
      { $set: updateData },
      { new: true }
    )
      .select('-password')
      .lean()
    if (!updatedUser) return { success: false, error: 'User not found.' }
    return { success: true, user: JSON.parse(JSON.stringify(updatedUser)) }
  } catch (error) {
    return { success: false, error: 'Failed to update profile.' }
  }
}

```

## 📄 src/core/upload.js
*Lines: 55, Size: 1.66 KB*

```javascript
// packages/data-access/src/actions/upload.js (version 2.0.0)
import { revalidatePath } from '../revalidate.js'
import { SynthesizedEvent, Opportunity } from '@headlines/models'

export async function processUploadedArticle(item, userId) {
  if (!userId) {
    return { success: false, error: 'Authentication required' }
  }

  try {
    const enrichedArticle = {
      ...item,
      relevance_article: 100,
      assessment_article: item.article,
      articleContent: { contents: [item.article] },
      newspaper: 'Manual Upload',
      country: 'Denmark',
      key_individuals: [],
    }

    const synthesizedResult = await synthesizeEvent([enrichedArticle], [], '', '')
    if (!synthesizedResult || !synthesizedResult.headline) {
      throw new Error('AI failed to synthesize an event from the provided text.')
    }

    const eventToSave = new SynthesizedEvent({
      ...synthesizedResult,
      event_key: `manual-${new Date().toISOString()}`,
      highest_relevance_score: 100,
      source_articles: [
        { headline: item.headline, link: '#manual', newspaper: 'Manual Upload' },
      ],
    })

    const opportunitiesToSave = await generateOpportunitiesFromEvent(eventToSave, [
      enrichedArticle,
    ])

    await eventToSave.save()
    if (opportunitiesToSave.length > 0) {
      await Opportunity.insertMany(
        opportunitiesToSave.map((opp) => ({ ...opp, events: [eventToSave._id] }))
      )
    }

    await revalidatePath('/events')
    await revalidatePath('/opportunities')

    return { success: true, event: eventToSave.synthesized_headline }
  } catch (e) {
    console.error('[Upload Action Error]:', e)
    return { success: false, error: e.message }
  }
}

```

## 📄 src/core/userSettings.js
*Lines: 25, Size: 745 Bytes*

```javascript
// packages/data-access/src/actions/userSettings.js (Corrected)
import { Subscriber } from '@headlines/models'
import dbConnect from '../dbConnect.js'

export async function clearDiscardedItems(userId) {
  if (!userId) {
    return { success: false, error: 'User ID is required.' }
  }
  try {
    await dbConnect()
    await Subscriber.findByIdAndUpdate(userId, {
      $set: {
        'discardedItems.articles': [],
        'discardedItems.events': [],
        'discardedItems.opportunities': [],
      },
    })

    return { success: true, message: 'Your discarded items have been cleared.' }
  } catch (e) {
    console.error('[clearDiscardedItems Error]:', e)
    return { success: false, error: 'Failed to clear discarded items.' }
  }
}

```

## 📄 src/core/verdicts.js
*Lines: 38, Size: 1.4 KB*

```javascript
// packages/data-access/src/actions/verdicts.js (version 1.1.0)
import { RunVerdict, SynthesizedEvent, Opportunity } from '@headlines/models'
import dbConnect from '../dbConnect.js'

export async function getRecentRunVerdicts() {
  try {
    await dbConnect()
    // MODIFICATION: Select the entire 'runStats' object instead of individual fields.
    // This provides the detailed data needed for the new dashboard view, including
    // relevantHeadlines and enrichmentOutcomes for funnel analysis.
    const verdicts = await RunVerdict.find({})
      .sort({ createdAt: -1 })
      .limit(5)
      .select('runStats createdAt')
      .lean()
    return { success: true, data: JSON.parse(JSON.stringify(verdicts)) }
  } catch (e) {
    return { success: false, error: 'Failed to fetch run verdicts.' }
  }
}

export async function getRunVerdictById(runId) {
  const { isAdmin, error } = await verifyAdmin()
  if (!isAdmin) return { success: false, error }

  try {
    await dbConnect()
    const verdict = await RunVerdict.findById(runId)
      .populate({ path: 'generatedEvents', model: SynthesizedEvent })
      .populate({ path: 'generatedOpportunities', model: Opportunity })
      .lean()
    if (!verdict) return { success: false, error: 'Verdict not found.' }
    return { success: true, data: JSON.parse(JSON.stringify(verdict)) }
  } catch (e) {
    return { success: false, error: 'Failed to fetch verdict details.' }
  }
}

```

## 📄 src/core/watchlist.js
*Lines: 113, Size: 3.69 KB*

```javascript
// packages/data-access/src/actions/watchlist.js (Corrected)
import { WatchlistEntity, Article, WatchlistSuggestion } from '@headlines/models'
import dbConnect from '../dbConnect.js'

export async function createWatchlistEntity(entityData) {
  try {
    await dbConnect()
    const newEntity = new WatchlistEntity(entityData)
    await newEntity.save()
    return { success: true, entity: JSON.parse(JSON.stringify(newEntity)) }
  } catch (e) {
    if (e.code === 11000)
      return { success: false, error: 'An entity with this name already exists.' }
    return { success: false, error: 'Failed to create entity.' }
  }
}

export async function updateWatchlistEntity(entityId, updateData) {
  try {
    await dbConnect()
    if (updateData.searchTerms && Array.isArray(updateData.searchTerms)) {
      updateData.searchTerms = [
        ...new Set(
          updateData.searchTerms.map((t) => t.toLowerCase().trim()).filter(Boolean)
        ),
      ]
      const entity = await WatchlistEntity.findById(entityId).select('name').lean()
      const allTerms = [entity.name, ...updateData.searchTerms]
        .map((t) => t.toLowerCase().trim())
        .filter(Boolean)
      const uniqueTerms = [...new Set(allTerms)]
      if (uniqueTerms.length > 0) {
        const termRegexes = uniqueTerms.map(
          (term) =>
            new RegExp(`\\b${term.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')}\\b`, 'i')
        )
        updateData.hitCount = await Article.countDocuments({
          headline: { $in: termRegexes },
        })
      } else {
        updateData.hitCount = 0
      }
    }
    const entity = await WatchlistEntity.findByIdAndUpdate(
      entityId,
      { $set: updateData },
      { new: true }
    ).lean()
    if (!entity) return { success: false, error: 'Entity not found.' }
    return { success: true, entity: JSON.parse(JSON.stringify(entity)) }
  } catch (e) {
    return { success: false, error: 'Failed to update entity.' }
  }
}

export async function deleteWatchlistEntity(entityId) {
  try {
    await dbConnect()
    const result = await WatchlistEntity.findByIdAndDelete(entityId)
    if (!result) return { success: false, error: 'Entity not found.' }
    return { success: true }
  } catch (e) {
    return { success: false, error: 'Failed to delete entity.' }
  }
}

export async function updateWatchlistSuggestion(suggestionId, updateData) {
  try {
    await dbConnect()
    const suggestion = await WatchlistSuggestion.findByIdAndUpdate(
      suggestionId,
      { $set: updateData },
      { new: true }
    ).lean()
    if (!suggestion) return { success: false, error: 'Suggestion not found.' }
    return { success: true, data: JSON.parse(JSON.stringify(suggestion)) }
  } catch (e) {
    return { success: false, error: 'Failed to update suggestion.' }
  }
}

export async function processWatchlistSuggestion({ suggestionId, action }) {
  try {
    await dbConnect()
    const suggestion = await WatchlistSuggestion.findById(suggestionId)
    if (!suggestion) return { success: false, error: 'Suggestion not found.' }
    suggestion.status = action
    await suggestion.save()
    if (action === 'approved') {
      await WatchlistEntity.updateOne(
        { name: suggestion.name },
        {
          $setOnInsert: {
            name: suggestion.name,
            type: suggestion.type,
            country: suggestion.country,
            context: suggestion.rationale,
            searchTerms: suggestion.searchTerms,
            status: 'active',
          },
        },
        { upsert: true }
      )
    }
    return {
      success: true,
      message: `Watchlist suggestion for "${suggestion.name}" was ${action}.`,
    }
  } catch (e) {
    return { success: false, error: 'Failed to process suggestion.' }
  }
}

```

## 📄 src/dbConnect.js
*Lines: 38, Size: 1.26 KB*

```javascript
// File: packages/data-access/src/dbConnect.js (Final, Robust Version)
import mongoose from 'mongoose'
import { env } from '@headlines/config/next' // Use the Next.js entry point

const MONGO_URI = env.MONGO_URI

if (!MONGO_URI) {
  throw new Error('Please define the MONGO_URI environment variable inside .env.local')
}

/**
 * An idempotent function to connect to MongoDB.
 * It relies on Mongoose's built-in connection management to avoid creating multiple connections.
 * If a connection is already established or pending, Mongoose will reuse it.
 */
async function dbConnect() {
  // Check if we have a connection to the database
  // readyState 1 means connected.
  if (mongoose.connection.readyState >= 1) {
    return
  }

  // If no connection is active, create one. Mongoose handles pooling and prevents duplicates.
  // This will return a promise that resolves on successful connection.
  try {
    console.log('[dbConnect] No active connection. Attempting to connect...')
    await mongoose.connect(MONGO_URI, {
      bufferCommands: false, // Recommended for serverless environments
    })
    console.log('[dbConnect] MongoDB connection successful.')
  } catch (e) {
    console.error('[dbConnect] MongoDB connection failed:', e)
    throw e
  }
}

export default dbConnect

```

## 📄 src/index.js
*Lines: 25, Size: 815 Bytes*

```javascript
// This file is the default, Node.js-safe entry point.
// It should only contain re-exports from the /core directory.

export * from './core/admin.js'
export * from './core/articles.js'
export * from './core/auth.js'
export * from './core/chat.js'
export * from './core/dashboard.js'
export * from './core/email.js'
export * from './core/events.js'
export * from './core/export.js'
export * from './core/knowledge.js'
export * from './core/opportunities.js'
export * from './core/pipeline.js'
export * from './core/relationships.js'
export * from './core/settings.js'
export * from './core/subscriber.js'
export * from './core/upload.js'
export * from './core/userSettings.js'
export * from './core/verdicts.js'
export * from './core/watchlist.js'

export * from './queryBuilder.js'
export * from './revalidate.js'

```

## 📄 src/queryBuilder.js
*Lines: 98, Size: 2.96 KB*

```javascript
'use server'

import { Subscriber } from '@headlines/models'
import dbConnect from './dbConnect.js' // Import dbConnect

export async function buildQuery(
  model,
  { filters = {}, sort = 'date_desc', baseQuery = {}, userId = null }
) {
  await dbConnect()
  const andConditions = [{ ...baseQuery }]
  let user = null

  // --- START OF THE FIX ---
  // Only attempt to fetch the user if a valid userId is provided.
  if (userId) {
    user = await Subscriber.findById(userId)
      .select('discardedItems favoritedItems countries role')
      .lean()
  }
  // --- END OF THE FIX ---

  const countryField = model.schema.paths.basedIn ? 'basedIn' : 'country'

  // --- HIERARCHICAL FILTERING LOGIC ---
  if (user) {
    if (user.role === 'admin') {
      if (filters.country) {
        andConditions.push({ [countryField]: { $in: filters.country.split(',') } })
      }
    } else {
      const subscribedCountries = (user.countries || [])
        .filter((c) => c.active)
        .map((c) => c.name)
      if (subscribedCountries.length > 0) {
        andConditions.push({ [countryField]: { $in: subscribedCountries } })
      } else {
        andConditions.push({ [countryField]: { $in: [] } }) // See nothing
      }
    }

    if (user?.discardedItems) {
      const modelName = model.modelName.toLowerCase()
      const discardedIds = user.discardedItems[`${modelName}s`]
      if (discardedIds && discardedIds.length > 0) {
        andConditions.push({ _id: { $nin: discardedIds } })
      }
    }
  } else if (filters.country) {
    andConditions.push({ [countryField]: { $in: filters.country.split(',') } })
  }

  // --- Other Filters ---
  if (filters.q) {
    const searchRegex = { $regex: filters.q, $options: 'i' }
    const orConditions = [
      { headline: searchRegex },
      { synthesized_headline: searchRegex },
      { reachOutTo: searchRegex },
    ].filter((cond) => model.schema.paths[Object.keys(cond)[0]])

    if (orConditions.length > 0) andConditions.push({ $or: orConditions })
  }

  if (filters.category) andConditions.push({ eventClassification: filters.category })
  if (filters.withEmail)
    andConditions.push({ 'contactDetails.email': { $exists: true, $ne: null, $ne: '' } })

  if (user?.favoritedItems && filters.favoritesOnly) {
    const modelName = model.modelName.toLowerCase()
    const favoritedIds = user.favoritedItems[`${modelName}s`] || []
    andConditions.push({ _id: { $in: favoritedIds } })
  }

  const queryFilter =
    andConditions.length > 1 ? { $and: andConditions } : andConditions[0] || {}

  const sortOptions = {}
  if (sort) {
    let [key, direction] = sort.split('_')
    const sortKeyMap = {
      date: 'createdAt',
      relevance: 'highest_relevance_score',
      size: 'likelyMMDollarWealth',
    }
    key = sortKeyMap[key] || key
    if (key && direction) {
      sortOptions[key] = direction === 'desc' ? -1 : 1
    } else {
      sortOptions.createdAt = -1
    }
  } else {
    sortOptions.createdAt = -1
  }

  return { queryFilter, sortOptions }
}

```

## 📄 src/revalidate.js
*Lines: 24, Size: 929 Bytes*

```javascript
// packages/data-access/src/revalidate.js (version 2.0.0)
/**
 * An environment-aware revalidation function.
 * This function is now async to handle the dynamic import safely.
 * @param {string} path - The path to revalidate.
 * @param {('layout'|'page')} [type] - The type of revalidation.
 */
export async function revalidatePath(path, type) {
  // In the pipeline environment, this function is a no-op.
  if (process.env.IS_PIPELINE_RUN === 'true') {
    return
  }

  try {
    // This dynamic import will only succeed in a Next.js environment.
    // By placing it inside an async function, we avoid top-level await issues.
    const { revalidatePath: nextRevalidate } = await import('next/cache')
    return nextRevalidate(path, type)
  } catch (e) {
    // This catch block handles cases where it might be run in an unexpected env.
    console.log('[data-access] Failed to import next/cache. Revalidation skipped.')
  }
}

```

## 📄 src/seed/dev-user.js
*Lines: 59, Size: 1.91 KB*

```javascript
// packages/data-access/src/seed/dev-user.js (version 2.0.0 - Standalone Safe)
import { Subscriber } from '../../../models/src/index.js'
import dbConnect from '../dbConnect.js'
import mongoose from 'mongoose'
// We cannot use a logger here as this might be called before initialization
// import { logger } from '../../../utils/src/server.js';

const DEV_USER_ID = '662f831abb28052123530a43'
const DEV_USER_EMAIL = 'dev@headlines.dev'

export async function seedDevUser() {
  console.log(`[Seed] Seeding development user: ${DEV_USER_EMAIL}...`)
  try {
    await dbConnect()

    const devUser = {
      _id: new mongoose.Types.ObjectId(DEV_USER_ID),
      email: DEV_USER_EMAIL,
      password: 'devpassword', // This will be hashed by the pre-save hook
      firstName: 'Dev',
      lastName: 'User',
      role: 'admin',
      isActive: true,
      countries: [],
      subscriptionTier: 'enterprise',
      isLifetimeFree: true,
    }

    const result = await Subscriber.updateOne(
      { _id: devUser._id },
      { $set: devUser },
      { upsert: true }
    )

    if (result.upsertedCount > 0) {
      console.log(`[Seed] ✅ Successfully created development user.`)
    } else {
      console.log(`[Seed] ✅ Development user is already up-to-date.`)
    }
    return { success: true }
  } catch (error) {
    console.error('[Seed] ❌ Failed to seed development user:', error)
    // Close connection on error if it's open and this is a standalone script run
    if (mongoose.connection.readyState === 1 && import.meta.url.startsWith('file:')) {
        await mongoose.disconnect();
    }
    return { success: false, error: error.message }
  }
}

// Allow script to be run directly from the command line
if (import.meta.url.startsWith('file://') && process.argv[1] === import.meta.url.substring(7)) {
    seedDevUser().finally(() => {
        if (mongoose.connection.readyState === 1) {
            mongoose.disconnect();
        }
    });
}

```


================================================================================

# 📦 PACKAGE: MODELS

# 📁 PROJECT DIRECTORY STRUCTURE

Total: 18 files, 1 directories

```
headlines/
├── 📁 src/
│   ├── 📄 Article.js
│   ├── 📄 client.js
│   ├── 📄 constants.js
│   ├── 📄 Country.js
│   ├── 📄 index.js
│   ├── 📄 next.js
│   ├── 📄 node.js
│   ├── 📄 Opportunity.js
│   ├── 📄 PushSubscription.js
│   ├── 📄 RunVerdict.js
│   ├── 📄 Setting.js
│   ├── 📄 Source.js
│   ├── 📄 SourceSuggestion.js
│   ├── 📄 Subscriber.js
│   ├── 📄 SynthesizedEvent.js
│   ├── 📄 WatchlistEntity.js
│   └── 📄 WatchlistSuggestion.js
└── 📄 package.json
```

# 📋 PROJECT METADATA

**Generated**: 2025-09-29T13:20:36.408Z
**Repository Path**: /home/mark/Repos/projects/headlines/packages/models
**Total Files**: 18
**Package**: @headlines/models@1.0.0
**Description**: Shared Mongoose models for the Headlines monorepo.



---


## 📄 package.json
*Lines: 19, Size: 412 Bytes*

```json
{
  "name": "@headlines/models",
  "version": "1.0.0",
  "description": "Shared Mongoose models for the Headlines monorepo.",
  "main": "src/index.js",
  "type": "module",
  "license": "ISC",
  "exports": {
    ".": "./src/index.js",
    "./node": "./src/node.js",
    "./next": "./src/next.js",
    "./client": "./src/client.js"
  },
  "dependencies": {
    "bcryptjs": "^3.0.2",
    "mongoose": "^8.4.1"
  }
}

```

## 📄 src/Article.js
*Lines: 79, Size: 2.44 KB*

```javascript
// packages/models/src/Article.js (version 2.0.2)
import mongoose from 'mongoose'
import { ARTICLE_STATUSES } from './constants.js'

const { Schema, model, models } = mongoose

const LifecycleEventSchema = new Schema(
  {
    stage: { type: String, required: true },
    status: { type: String, required: true },
    reason: { type: String },
    timestamp: { type: Date, default: Date.now },
  },
  { _id: false }
)

const ArticleSchema = new Schema(
  {
    headline: { type: String, required: true, trim: true, minlength: 5, maxlength: 500 },
    headline_en: { type: String, trim: true },
    link: { type: String, required: true, unique: true, trim: true },
    newspaper: { type: String, required: true, trim: true },
    source: { type: String, required: true, trim: true },
    country: { type: String, trim: true, index: true },
    imageUrl: { type: String, trim: true },
    relevance_headline: { type: Number, required: true, min: 0, max: 100 },
    assessment_headline: { type: String, required: true, trim: true },
    articleContent: {
      type: { contents: { type: [String], default: [] } },
      required: false,
      select: false,
    },
    relevance_article: { type: Number, min: 0, max: 100 },
    assessment_article: { type: String, trim: true },
    key_individuals: [
      {
        _id: false,
        name: String,
        role_in_event: String,
        company: String,
        email_suggestion: String,
      },
    ],
    enrichment_error: { type: String, trim: true },
    emailed: { type: Boolean, default: false },
    embedding: { type: [Number], select: false },
    synthesizedEventId: {
      type: Schema.Types.ObjectId,
      ref: 'SynthesizedEvent',
      index: true,
      required: false,
    },
    status: { type: String, enum: ARTICLE_STATUSES, default: 'scraped', index: true },
    pipeline_lifecycle: { type: [LifecycleEventSchema], default: [] },
  },
  {
    timestamps: true,
    collection: 'articles',
    methods: {
      toRealtimePayload() {
        return {
          _id: this._id,
          headline: this.headline,
          headline_en: this.headline_en,
          link: this.link,
          newspaper: this.newspaper,
          country: this.country,
          relevance_article: this.relevance_article,
          createdAt: this.createdAt,
        }
      },
    },
  }
)

ArticleSchema.index({ headline: 'text', headline_en: 'text', assessment_article: 'text' })

export default models.Article || model('Article', ArticleSchema)

```

## 📄 src/Country.js
*Lines: 29, Size: 663 Bytes*

```javascript
// packages/models/src/Country.js (version 5.0.0)
import mongoose from 'mongoose'
const { Schema, model, models } = mongoose

const CountrySchema = new Schema(
  {
    name: { type: String, required: true, unique: true, trim: true },
    isoCode: {
      type: String,
      required: true,
      unique: true,
      trim: true,
      uppercase: true,
      minlength: 2,
      maxlength: 2,
    },
    status: {
      type: String,
      enum: ['active', 'inactive'],
      default: 'active',
      required: true,
      index: true,
    },
  },
  { timestamps: true, collection: 'countries' }
)

export default models.Country || model('Country', CountrySchema)

```

## 📄 src/Opportunity.js
*Lines: 30, Size: 1.06 KB*

```javascript
// packages/models/src/Opportunity.js (version 9.0.0)
import mongoose from 'mongoose'
const { Schema, model, models } = mongoose

const ContactDetailsSchema = new Schema(
  {
    email: { type: String, trim: true },
    role: { type: String, trim: true },
    company: { type: String, trim: true },
  },
  { _id: false }
)

const OpportunitySchema = new Schema(
  {
    reachOutTo: { type: String, required: true, trim: true, unique: true, index: true },
    contactDetails: { type: ContactDetailsSchema },
    basedIn: { type: String, trim: true, index: true },
    city: { type: String, trim: true, required: false },
    whyContact: { type: [String], required: true },
    likelyMMDollarWealth: { type: Number, required: true, default: 0 },
    embedding: { type: [Number] },
    events: [{ type: Schema.Types.ObjectId, ref: 'SynthesizedEvent', index: true }],
    relatedOpportunities: [{ type: Schema.Types.ObjectId, ref: 'Opportunity' }],
  },
  { timestamps: true, collection: 'opportunities' }
)

export default models.Opportunity || model('Opportunity', OpportunitySchema)

```

## 📄 src/PushSubscription.js
*Lines: 24, Size: 644 Bytes*

```javascript
// packages/models/src/PushSubscription.js (version 5.0.0)
import mongoose from 'mongoose'
const { Schema, model, models } = mongoose

const PushSubscriptionSchema = new Schema(
  {
    subscriberId: {
      type: Schema.Types.ObjectId,
      ref: 'Subscriber',
      required: true,
      index: true,
    },
    endpoint: { type: String, required: true, unique: true },
    keys: {
      p256dh: { type: String, required: true },
      auth: { type: String, required: true },
    },
  },
  { timestamps: true, collection: 'push_subscriptions' }
)

export default models.PushSubscription ||
  model('PushSubscription', PushSubscriptionSchema)

```

## 📄 src/RunVerdict.js
*Lines: 20, Size: 769 Bytes*

```javascript
// packages/models/src/RunVerdict.js (version 5.0.0)
import mongoose from 'mongoose'
const { Schema, model, models } = mongoose

const RunVerdictSchema = new Schema(
  {
    runStats: { type: Schema.Types.Mixed, required: true },
    judgeVerdict: { type: Schema.Types.Mixed, required: false, default: {} },
    generatedEvents: [{ type: Schema.Types.ObjectId, ref: 'SynthesizedEvent' }],
    generatedOpportunities: [{ type: Schema.Types.ObjectId, ref: 'Opportunity' }],
    duration_seconds: { type: Number, required: true },
    cost_summary: { type: Schema.Types.Mixed, required: false },
  },
  { timestamps: true, collection: 'run_verdicts' }
)

RunVerdictSchema.index({ createdAt: -1 })

export default models.RunVerdict || model('RunVerdict', RunVerdictSchema)

```

## 📄 src/Setting.js
*Lines: 40, Size: 1.14 KB*

```javascript
// packages/models/src/Setting.js (version 5.0.0)
import mongoose from 'mongoose'
const { Schema, model, models } = mongoose

const SETTING_KEYS = [
  'HEADLINES_RELEVANCE_THRESHOLD',
  'ARTICLES_RELEVANCE_THRESHOLD',
  'EVENT_RELEVANCE_THRESHOLD',
  'MINIMUM_EVENT_AMOUNT_USD_MILLIONS',
  'HIGH_SIGNAL_HEADLINE_THRESHOLD',
  'AGENT_DISAGREEMENT_THRESHOLD',
  'SINGLETON_RELEVANCE_THRESHOLD',
  'HIGH_VALUE_DEAL_USD_MM',
  'SIGNIFICANT_PRIVATE_BENEFICIARY_USD_MM',
  'WATCHLIST_SCORE_BOOST',
  'SUGGESTION_GENERATION_THRESHOLD',
  'MIN_ARTICLE_CHARS',
  'LLM_MODEL_HEADLINE_ASSESSMENT',
  'LLM_MODEL_ARTICLE_ASSESSMENT',
  'LLM_MODEL_SYNTHESIS',
  'LLM_MODEL_UTILITY',
]

const SettingSchema = new Schema(
  {
    key: { type: String, required: true, unique: true, index: true, enum: SETTING_KEYS },
    value: { type: Schema.Types.Mixed, required: true },
    description: { type: String, required: false, trim: true },
    type: {
      type: String,
      required: true,
      enum: ['number', 'boolean', 'string'],
      default: 'number',
    },
  },
  { timestamps: true, collection: 'settings' }
)

export default models.Setting || model('Setting', SettingSchema)

```

## 📄 src/Source.js
*Lines: 61, Size: 2.14 KB*

```javascript
// packages/models/src/Source.js (version 7.0.0)
import mongoose from 'mongoose'
import { SOURCE_STATUSES, SOURCE_FREQUENCIES, EXTRACTION_METHODS } from './constants.js'
const { Schema, model, models } = mongoose

const SourceAnalyticsSchema = new Schema(
  {
    totalRuns: { type: Number, default: 0 },
    totalSuccesses: { type: Number, default: 0 },
    totalFailures: { type: Number, default: 0 },
    totalScraped: { type: Number, default: 0 },
    totalRelevant: { type: Number, default: 0 },
    lastRunHeadlineCount: { type: Number, default: 0 },
    lastRunRelevantCount: { type: Number, default: 0 },
    lastRunContentSuccess: { type: Boolean, default: false },
  },
  { _id: false }
)

const SourceSchema = new Schema(
  {
    name: { type: String, required: true, unique: true, trim: true },
    baseUrl: { type: String, required: true, trim: true },
    sectionUrl: { type: String, required: true, trim: true },
    country: { type: String, required: true, trim: true, index: true },
    language: { type: String, required: true, trim: true, default: 'en' },
    status: {
      type: String,
      enum: SOURCE_STATUSES,
      default: 'active',
      required: true,
      index: true,
    },
    scrapeFrequency: {
      type: String,
      enum: SOURCE_FREQUENCIES,
      default: 'high',
      required: true,
    },
    extractionMethod: {
      type: String,
      enum: EXTRACTION_METHODS,
      required: true,
      default: 'declarative',
    },
    headlineSelector: { type: [String], required: false, default: [] },
    linkSelector: { type: String, required: false, trim: true },
    headlineTextSelector: { type: String, required: false, trim: true },
    articleSelector: { type: [String], required: false, default: [] },
    lastScrapedAt: { type: Date, required: false, index: true },
    lastSuccessAt: { type: Date, required: false },
    notes: { type: String, required: false, trim: true },
    analytics: { type: SourceAnalyticsSchema, default: () => ({}) },
  },
  { timestamps: true, collection: 'sources' }
)

SourceSchema.index({ status: 1, scrapeFrequency: 1, lastScrapedAt: 1 })

export default models.Source || model('Source', SourceSchema)

```

## 📄 src/SourceSuggestion.js
*Lines: 31, Size: 975 Bytes*

```javascript
// packages/models/src/SourceSuggestion.js (version 5.0.0)
import mongoose from 'mongoose'
import { SUGGESTION_STATUSES } from './constants.js'
const { Schema, model, models } = mongoose

const SourceSuggestionSchema = new Schema(
  {
    sourceId: { type: Schema.Types.ObjectId, ref: 'Source', required: true, index: true },
    sourceName: { type: String, required: true, trim: true },
    failedSelector: { type: String, required: true, trim: true },
    suggestedSelectors: {
      headlineSelector: String,
      linkSelector: String,
      headlineTextSelector: String,
      articleSelector: String,
    },
    reasoning: { type: String, required: true, trim: true },
    status: {
      type: String,
      enum: SUGGESTION_STATUSES,
      default: 'pending',
      required: true,
      index: true,
    },
  },
  { timestamps: true, collection: 'source_suggestions' }
)

export default models.SourceSuggestion ||
  model('SourceSuggestion', SourceSuggestionSchema)

```

## 📄 src/Subscriber.js
*Lines: 104, Size: 3.38 KB*

```javascript
// packages/models/src/Subscriber.js (version 5.0.1 - Complete)
import mongoose from 'mongoose'
import bcrypt from 'bcryptjs'
import { SUBSCRIBER_ROLES, SUBSCRIPTION_TIERS } from './constants.js'
const { Schema, model, models } = mongoose
const SALT_WORK_FACTOR = 10

const CountrySubscriptionSchema = new Schema(
  {
    name: { type: String, required: true },
    active: { type: Boolean, default: true, required: true },
  },
  { _id: false }
)

const InteractionSchema = new Schema(
  {
    articles: [{ type: Schema.Types.ObjectId, ref: 'Article' }],
    events: [{ type: Schema.Types.ObjectId, ref: 'SynthesizedEvent' }],
    opportunities: [{ type: Schema.Types.ObjectId, ref: 'Opportunity' }],
  },
  { _id: false }
)

const FilterPreferencesSchema = new Schema(
  {
    globalCountryFilter: { type: [String], default: [] },
  },
  { _id: false }
)

const SubscriberSchema = new Schema(
  {
    email: {
      type: String,
      required: true,
      unique: true,
      trim: true,
      lowercase: true,
      index: true,
    },
    password: { type: String, required: true, select: false },
    firstName: { type: String, required: true, trim: true },
    lastName: { type: String, required: false, trim: true },
    language: { type: String, required: true, default: 'English' },
    countries: { type: [CountrySubscriptionSchema], default: [] },
    role: { type: String, enum: SUBSCRIBER_ROLES, default: 'user', required: true },
    emailNotificationsEnabled: { type: Boolean, default: true },
    pushNotificationsEnabled: { type: Boolean, default: true },
    subscriptionTier: { type: String, enum: SUBSCRIPTION_TIERS, default: 'free' },
    subscriptionExpiresAt: { type: Date, default: null },
    isLifetimeFree: { type: Boolean, default: false },
    isActive: { type: Boolean, default: true, index: true },
    lastLoginAt: { type: Date, default: null },
    discardedItems: { type: InteractionSchema, default: () => ({}) },
    favoritedItems: { type: InteractionSchema, default: () => ({}) },
    filterPreferences: { type: FilterPreferencesSchema, default: () => ({}) },
    emailSentCount: { type: Number, default: 0 },
    eventsReceivedCount: { type: Number, default: 0 },
  },
  { timestamps: true, collection: 'subscribers' }
)

SubscriberSchema.pre('save', function (next) {
  const user = this
  console.log('[Subscriber Model] pre-save hook triggered.')

  if (!user.isModified('password')) {
    console.log('[Subscriber Model] Password not modified. Skipping hash.')
    return next()
  }

  console.log('[Subscriber Model] Password has been modified. Proceeding to hash.')
  console.log(
    '[Subscriber Model]   - Plain text password received:',
    `"${user.password}"`
  )

  bcrypt.genSalt(SALT_WORK_FACTOR, function (err, salt) {
    if (err) {
      console.error('[Subscriber Model] Error generating salt:', err)
      return next(err)
    }
    bcrypt.hash(user.password, salt, function (err, hash) {
      if (err) {
        console.error('[Subscriber Model] Error hashing password:', err)
        return next(err)
      }
      user.password = hash
      console.log(
        '[Subscriber Model]   - Hashing successful. New hash:',
        `"${user.password}"`
      )
      next()
    })
  })
})

SubscriberSchema.methods.comparePassword = function (candidatePassword) {
  return bcrypt.compare(candidatePassword, this.password)
}

export default models.Subscriber || model('Subscriber', SubscriberSchema)

```

## 📄 src/SynthesizedEvent.js
*Lines: 74, Size: 2.33 KB*

```javascript
// packages/models/src/SynthesizedEvent.js (version 8.0.2)
import mongoose from 'mongoose'
const { Schema, model, models } = mongoose

const SourceArticleSchema = new Schema(
  {
    headline: { type: String, required: true, trim: true },
    link: { type: String, required: true, trim: true },
    newspaper: { type: String, required: true, trim: true },
    imageUrl: { type: String, trim: true },
    country: { type: String, trim: true }
  },
  { _id: false }
)

const KeyIndividualSchema = new Schema(
  {
    name: { type: String, trim: true },
    role_in_event: { type: String, trim: true },
    company: { type: String, trim: true },
    email_suggestion: { type: String, trim: true },
  },
  { _id: false }
)

const SynthesizedEventSchema = new Schema(
  {
    event_key: { type: String, required: true, unique: true, trim: true, index: true },
    synthesized_headline: { type: String, required: true, trim: true },
    synthesized_summary: { type: String, required: true, trim: true },
    advisorSummary: { type: String, trim: true },
    ai_assessment_reason: { type: String, trim: true },
    eventClassification: { type: String, trim: true },
    country: { type: String, required: true, index: true },
    source_articles: { type: [SourceArticleSchema], required: true },
    highest_relevance_score: { type: Number, required: true, min: 0, max: 100 },
    key_individuals: { type: [KeyIndividualSchema], default: [] },
    relatedOpportunities: [
      { type: Schema.Types.ObjectId, ref: 'Opportunity', index: true },
    ],
    enrichmentSources: {
      type: [String],
      enum: ['rag_db', 'wikipedia', 'news_api'],
      default: [],
    },
    emailed: { type: Boolean, default: false },
    email_sent_at: { type: Date },
  },
  {
    timestamps: true,
    collection: 'synthesized_events',
    methods: {
      toRealtimePayload() {
        return {
          _id: this._id,
          synthesized_headline: this.synthesized_headline,
          country: this.country,
          highest_relevance_score: this.highest_relevance_score,
          createdAt: this.createdAt,
        }
      },
    },
  }
)

SynthesizedEventSchema.index({
  synthesized_headline: 'text',
  synthesized_summary: 'text',
})
SynthesizedEventSchema.index({ country: 1, createdAt: -1 })

export default models.SynthesizedEvent ||
  model('SynthesizedEvent', SynthesizedEventSchema)

```

## 📄 src/WatchlistEntity.js
*Lines: 33, Size: 1.12 KB*

```javascript
// packages/models/src/WatchlistEntity.js (version 2.1.0)
import mongoose from 'mongoose'
import { ENTITY_TYPES, ENTITY_STATUSES } from './constants.js'

const { Schema, model, models } = mongoose

const WatchlistEntitySchema = new Schema(
  {
    name: { type: String, required: true, unique: true, trim: true, index: true },
    type: { type: String, enum: ENTITY_TYPES, required: true, index: true },
    status: {
      type: String,
      enum: ENTITY_STATUSES,
      default: 'candidate',
      required: true,
      index: true,
    },
    context: { type: String, trim: true, required: false },
    searchTerms: { type: [String], default: [], index: true },
    country: { type: String, trim: true, required: false, index: true },
    hitCount: { type: Number, default: 0, index: true },
    estimatedNetWorthUSD_MM: { type: Number, required: false },
    primaryCompany: { type: String, trim: true, required: false },
    notes: { type: String, trim: true, required: false },
  },
  {
    timestamps: true,
    collection: 'watchlist_entities',
  }
)

export default models.WatchlistEntity || model('WatchlistEntity', WatchlistEntitySchema)

```

## 📄 src/WatchlistSuggestion.js
*Lines: 29, Size: 1014 Bytes*

```javascript
// packages/models/src/WatchlistSuggestion.js (version 3.0.0 - With Search Terms)
import mongoose from 'mongoose'
import { WATCHLIST_SUGGESTION_STATUSES, ENTITY_TYPES } from './constants.js'
const { Schema, model, models } = mongoose;

const WatchlistSuggestionSchema = new Schema(
  {
    name: { type: String, required: true, unique: true, trim: true, index: true },
    type: { type: String, enum: ENTITY_TYPES, required: true, index: true },
    rationale: { type: String, trim: true, required: true },
    sourceEvent: { type: String, required: true },
    country: { type: String, trim: true, required: false },
    searchTerms: { type: [String], default: [] }, // NEW FIELD
    status: {
      type: String,
      enum: WATCHLIST_SUGGESTION_STATUSES,
      default: 'candidate',
      required: true,
      index: true,
    },
  },
  {
    timestamps: true,
    collection: 'watchlist_suggestions',
  }
)

export default models.WatchlistSuggestion || model('WatchlistSuggestion', WatchlistSuggestionSchema)

```

## 📄 src/client.js
*Lines: 20, Size: 528 Bytes*

```javascript
// File: packages/models/src/client.js (version 1.0 - New File)
'use client'

// This file is the designated "client-safe" entry point for the models package.
// It ONLY exports constants and contains NO server-side code (like Mongoose).
import * as constants from './constants.js'

export const {
  ENTITY_TYPES,
  ENTITY_STATUSES,
  SOURCE_STATUSES,
  SOURCE_FREQUENCIES,
  EXTRACTION_METHODS,
  ARTICLE_STATUSES,
  SUGGESTION_STATUSES,
  WATCHLIST_SUGGESTION_STATUSES,
  SUBSCRIBER_ROLES,
  SUBSCRIPTION_TIERS,
} = constants

```

## 📄 src/constants.js
*Lines: 11, Size: 688 Bytes*

```javascript
export const ENTITY_TYPES = ['person', 'family', 'company'];
export const ENTITY_STATUSES = ['active', 'inactive', 'candidate'];
export const SOURCE_STATUSES = ['active', 'paused', 'under_review'];
export const SOURCE_FREQUENCIES = ['high', 'low'];
export const EXTRACTION_METHODS = ['custom', 'declarative', 'json-ld'];
export const ARTICLE_STATUSES = ['scraped', 'assessed', 'enriched', 'failed_enrichment'];
export const SUGGESTION_STATUSES = ['pending', 'approved', 'rejected'];
export const WATCHLIST_SUGGESTION_STATUSES = ['candidate', 'approved', 'dismissed'];
export const SUBSCRIBER_ROLES = ['user', 'admin'];
export const SUBSCRIPTION_TIERS = ['free', 'premium', 'enterprise'];

```

## 📄 src/index.js
*Lines: 31, Size: 860 Bytes*

```javascript
// This file is the core, shared module for the models package.
// It exports all Mongoose models and is environment-agnostic.

import Article from './Article.js'
import Country from './Country.js'
import Opportunity from './Opportunity.js'
import PushSubscription from './PushSubscription.js'
import RunVerdict from './RunVerdict.js'
import Setting from './Setting.js'
import Source from './Source.js'
import SourceSuggestion from './SourceSuggestion.js'
import Subscriber from './Subscriber.js'
import SynthesizedEvent from './SynthesizedEvent.js'
import WatchlistEntity from './WatchlistEntity.js'
import WatchlistSuggestion from './WatchlistSuggestion.js'

export {
  Article,
  Country,
  Opportunity,
  PushSubscription,
  RunVerdict,
  Setting,
  Source,
  SourceSuggestion,
  Subscriber,
  SynthesizedEvent,
  WatchlistEntity,
  WatchlistSuggestion,
}

```

## 📄 src/next.js
*Lines: 5, Size: 108 Bytes*

```javascript
import 'server-only'

// Re-export all models for the Next.js server environment
export * from './index.js'

```

## 📄 src/node.js
*Lines: 3, Size: 84 Bytes*

```javascript
// Re-export all models for the pure Node.js environment
export * from './index.js'

```


================================================================================

# 📦 PACKAGE: PROMPTS

# 📁 PROJECT DIRECTORY STRUCTURE

Total: 30 files, 2 directories

```
headlines/
├── 📁 src/
│   ├── 📁 examples/
│   │   ├── 📄 shotsInputArticle.js
│   │   ├── 📄 shotsInputHeadlines.js
│   │   ├── 📄 shotsOutputArticle.js
│   │   └── 📄 shotsOutputHeadlines.js
│   ├── 📄 index.js
│   ├── 📄 instructionArticle.js
│   ├── 📄 instructionArticlePreAssessment.js
│   ├── 📄 instructionBatchArticleAssessment.js
│   ├── 📄 instructionBatchHeadlineAssessment.js
│   ├── 📄 instructionCanonicalizer.js
│   ├── 📄 instructionCluster.js
│   ├── 📄 instructionContacts.js
│   ├── 📄 instructionDisambiguation.js
│   ├── 📄 instructionEmailIntro.js
│   ├── 📄 instructionEmailSubject.js
│   ├── 📄 instructionEnrichContact.js
│   ├── 📄 instructionEntity.js
│   ├── 📄 instructionExecutiveSummary.js
│   ├── 📄 instructionHeadlines.js
│   ├── 📄 instructionJudge.js
│   ├── 📄 instructionOpportunities.js
│   ├── 📄 instructionSectionClassifier.js
│   ├── 📄 instructionSelectorRepair.js
│   ├── 📄 instructionSourceDiscovery.js
│   ├── 📄 instructionSourceName.js
│   ├── 📄 instructionSynthesize.js
│   ├── 📄 instructionTranslate.js
│   ├── 📄 instructionWatchlistSuggestion.js
│   └── 📄 sourceDiscoveryPrompts.js
└── 📄 package.json
```

# 📋 PROJECT METADATA

**Generated**: 2025-09-29T13:20:36.410Z
**Repository Path**: /home/mark/Repos/projects/headlines/packages/prompts
**Total Files**: 30
**Package**: @headlines/prompts@1.0.0
**Description**: Shared AI prompts for the Headlines monorepo.



---


## 📄 package.json
*Lines: 17, Size: 367 Bytes*

```json
{
  "name": "@headlines/prompts",
  "version": "1.0.0",
  "description": "Shared AI prompts for the Headlines monorepo.",
  "main": "src/index.js",
  "type": "module",
  "license": "ISC",
  "exports": {
    ".": "./src/index.js",
    "./node": "./src/index.js",
    "./next": "./src/index.js"
  },
  "peerDependencies": {
    "@headlines/config": "workspace:*"
  }
}

```

## 📄 src/examples/shotsInputArticle.js
*Lines: 13, Size: 1006 Bytes*

```javascript
// packages/prompts/src/examples/shotsInputArticle.js (version 4.0)
export const shotsInputArticle = [
  'Nyt anlæg ved Esbjerg skal producere klimavenlig brint. Direktør Jens Hansen udtaler...',
  'Aarstiderne, stiftet af Søren Ejlersen, er blevet solgt til en international fødevaregigant for et trecifret millionbeløb.',
  'Many homeowners will see lower property taxes in 2025 and 2026',
  'The Møller family has sold their shipping software company, NaviTech, for $500M.',
  'Stellantis, the multinational car company, has reported that it stands to lose over 300 million kroner due to new US tariffs.',
  'The family-owned conglomerate USTC, owned by the Østergaard-Nielsen family, is disputing a multimillion-krone claim from the Nordic Waste bankruptcy trustee.',
  'CEO of family-owned Scandinavian tech firm, Anna Schmidt, sells for $120M',
  'Optheras, a Danish startup, raises DKK 38 million in a new funding round to accelerate growth.',
  'Rockwool plans massive global expansions',
]

```

## 📄 src/examples/shotsInputHeadlines.js
*Lines: 41, Size: 2.2 KB*

```javascript
// packages/prompts/src/examples/shotsInputHeadlines.js (version 4.0)
export const shotsInputHeadlines = [
  [
    'Rockwool står foran massive udvidelser over hele kloden', // Operational News
    'Boeing henter 145 mia. kr.', // Corporate Fundraising
    'Boligejere med for stor grundskyldsregning har udsigt til hjælp', // Noise
    'Aarstiderne solgt til gigant', // Private Company Sale
    'Scandinavian family sells company for $500M', // Private Company Sale
    'Familien Danielsens formue nærmer sig to mia. kroner', // Family Wealth Profile
  ].join('\n- '),

  [
    'Egeria raises €1.25 billion with new private equity fund', // Corporate Fundraising
    'Egeria enters new partnership with Junge Die Bäckerei.', // PE Transaction
    'FSN Capital VI acquires a majority stake in ilionx', // PE Transaction
    'Egeria divests Dutch Bakery after a period of strong growth', // PE Transaction
    'Axcel closes its seventh fund at EUR 1.3 billion', // Corporate Fundraising
  ].join('\n- '),

  [
    'A.P. Moller Foundation donates $100 million to charity', // Noise (Foundation, not private)
    'LEGO family (KIRKBI A/S) in acquisition talks for rival toy company for DKK 5 billion', // Future Liquidity Event / M&A
    'Danfoss heir (Bitten & Mads Clausen Foundation) announces succession plan for family business leadership', // Operational News
    'Widex and Demant plan to merge operations', // M&A involving private family (Widex)
    '3Shape (privately owned) is working on an IPO', // Future Liquidity Event
  ].join('\n- '),

  [
    'Nå|Spår milliard-smell fra toll', // Noise
    'Familieejet koncern bestrider millionkrav efter Nordic Waste', // Legal/Financial Dispute
    'Fynske bankers fusionsplaner skydes ned af storaktionær', // Public Market Noise
  ].join('\n- '),

  [
    'Grundfos owner (Poul Due Jensen Foundation) announces DKK 300 million dividend distribution to family members', // Family Wealth Event
    'Bestseller owner Anders Holch Povlsen personally acquires Scottish estate for DKK 150 million', // Individual Wealth Event
    "Martin Thorborg's AI Startup Secures Funding", // Corporate Fundraising
    'Martin Thorborg giver et foredrag om iværksætteri', // Noise
  ].join('\n- '),
]

```

## 📄 src/examples/shotsOutputArticle.js
*Lines: 136, Size: 3.79 KB*

```javascript
// packages/prompts/src/examples/shotsOutputArticle.js (version 4.0)
export const shotsOutputArticle = [
  JSON.stringify({
    reasoning: {
      event_type: 'Operational News',
      is_liquidity_event: false,
      beneficiary: 'Public/Corporate',
    },
    relevance_article: 10,
    assessment_article: 'Infrastructure project with no direct personal wealth transfer.',
    amount: null,
    key_individuals: [],
  }),
  JSON.stringify({
    reasoning: {
      event_type: 'M&A / Sale of private company',
      is_liquidity_event: true,
      beneficiary: 'Søren Ejlersen',
    },
    relevance_article: 95,
    assessment_article: 'Clear private wealth event for Scandinavian founder.',
    amount: 150,
    key_individuals: [
      {
        name: 'Søren Ejlersen',
        role_in_event: 'Founder & Seller',
        company: 'Aarstiderne',
        email_suggestion: 'soren.ejlersen@aarstiderne.com',
      },
    ],
  }),
  JSON.stringify({
    reasoning: {
      event_type: 'Other',
      is_liquidity_event: false,
      beneficiary: 'General Public',
    },
    relevance_article: 15,
    assessment_article: 'General tax relief is not a substantial direct wealth event.',
    amount: null,
    key_individuals: [],
  }),
  JSON.stringify({
    reasoning: {
      event_type: 'M&A / Sale of private company',
      is_liquidity_event: true,
      beneficiary: 'The Møller family',
    },
    relevance_article: 100,
    assessment_article:
      'Substantial wealth event clearly benefiting a Scandinavian family.',
    amount: 500,
    key_individuals: [
      {
        name: 'The Møller family',
        role_in_event: 'Owner & Seller',
        company: 'NaviTech',
        email_suggestion: null,
      },
    ],
  }),
  JSON.stringify({
    reasoning: {
      event_type: 'Public Market Transaction',
      is_liquidity_event: false,
      beneficiary: 'Public Shareholders (negatively)',
    },
    relevance_article: 5,
    assessment_article:
      'Irrelevant. Article describes financial losses for a foreign multinational corporation.',
    amount: -43,
    key_individuals: [],
  }),
  JSON.stringify({
    reasoning: {
      event_type: 'Legal / Financial Dispute',
      is_liquidity_event: false,
      beneficiary: 'The Østergaard-Nielsen family (USTC)',
    },
    relevance_article: 85,
    assessment_article:
      'High relevance. Confirms a major Rich List family is involved in a significant financial and legal dispute.',
    amount: null,
    key_individuals: [
      {
        name: 'The Østergaard-Nielsen family',
        role_in_event: 'Owner of USTC',
        company: 'USTC',
        email_suggestion: null,
      },
    ],
  }),
  JSON.stringify({
    reasoning: {
      event_type: 'M&A / Sale of private company',
      is_liquidity_event: true,
      beneficiary: 'Anna Schmidt',
    },
    relevance_article: 95,
    assessment_article: 'Substantial wealth event for private Scandinavian individual.',
    amount: 120,
    key_individuals: [
      {
        name: 'Anna Schmidt',
        role_in_event: 'CEO & Seller',
        company: 'Scandinavian tech firm',
        email_suggestion: 'anna.schmidt@scantech.com',
      },
    ],
  }),
  JSON.stringify({
    reasoning: {
      event_type: 'Corporate Funding Round',
      is_liquidity_event: false,
      beneficiary: 'The company (Optheras)',
    },
    relevance_article: 5,
    assessment_article:
      'Irrelevant. A company raising capital is not a liquidity event for the owners.',
    amount: 6,
    key_individuals: [],
  }),
  JSON.stringify({
    reasoning: {
      event_type: 'Operational News',
      is_liquidity_event: false,
      beneficiary: 'Public Shareholders',
    },
    relevance_article: 10,
    assessment_article:
      'Corporate strategy of a public company, no individual wealth generation.',
    amount: null,
    key_individuals: [],
  }),
]

```

## 📄 src/examples/shotsOutputHeadlines.js
*Lines: 145, Size: 4.57 KB*

```javascript
// packages/prompts/src/examples/shotsOutputHeadlines.js (version 4.0)
export const shotsOutputHeadlines = [
  JSON.stringify({
    assessment: [
      {
        headline_en: 'Rockwool faces massive expansions across the globe',
        relevance_headline: 10,
        assessment_headline: 'Operational news.',
      },
      {
        headline_en: 'Boeing raises DKK 145 billion',
        relevance_headline: 5,
        assessment_headline: 'Corporate fundraising.',
      },
      {
        headline_en: 'Homeowners with excessive property tax bills can expect help',
        relevance_headline: 0,
        assessment_headline: 'Noise.',
      },
      {
        headline_en: 'Aarstiderne sold to giant',
        relevance_headline: 95,
        assessment_headline: 'Private company sale.',
      },
      {
        headline_en: 'Scandinavian family sells company for $500M',
        relevance_headline: 100,
        assessment_headline: 'Private company sale.',
      },
      {
        headline_en: "The Danielsen family's fortune approaches DKK 2 billion",
        relevance_headline: 95,
        assessment_headline: 'Family wealth profile.',
      },
    ],
  }),
  JSON.stringify({
    assessment: [
      {
        headline_en: 'Egeria raises €1.25 billion with new private equity fund',
        relevance_headline: 0,
        assessment_headline: 'Corporate fundraising.',
      },
      {
        headline_en: 'Egeria enters new partnership with Junge Die Bäckerei.',
        relevance_headline: 90,
        assessment_headline: 'PE acquisition.',
      },
      {
        headline_en: 'FSN Capital VI acquires a majority stake in ilionx',
        relevance_headline: 95,
        assessment_headline: 'PE acquisition.',
      },
      {
        headline_en: 'Egeria divests Dutch Bakery after a period of strong growth',
        relevance_headline: 95,
        assessment_headline: 'PE exit.',
      },
      {
        headline_en: 'Axcel closes its seventh fund at EUR 1.3 billion',
        relevance_headline: 0,
        assessment_headline: 'Corporate fundraising.',
      },
    ],
  }),
  JSON.stringify({
    assessment: [
      {
        headline_en: 'A.P. Moller Foundation donates $100 million to charity',
        relevance_headline: 0,
        assessment_headline: 'Noise.',
      },
      {
        headline_en:
          'LEGO family (KIRKBI A/S) in acquisition talks for rival toy company for DKK 5 billion',
        relevance_headline: 95,
        assessment_headline: 'Future liquidity event.',
      },
      {
        headline_en:
          'Danfoss heir (Bitten & Mads Clausen Foundation) announces succession plan for family business leadership',
        relevance_headline: 30,
        assessment_headline: 'Operational news.',
      },
      {
        headline_en: 'Widex and Demant plan to merge operations',
        relevance_headline: 70,
        assessment_headline: 'M&A involving private family.',
      },
      {
        headline_en: '3Shape (privately owned) is working on an IPO',
        relevance_headline: 80,
        assessment_headline: 'Future liquidity event.',
      },
    ],
  }),
  JSON.stringify({
    assessment: [
      {
        headline_en: 'Now | Predicts billion-krone blow from tariffs',
        relevance_headline: 5,
        assessment_headline: 'Noise.',
      },
      {
        headline_en:
          'Family-owned conglomerate disputes million-krone claim after Nordic Waste',
        relevance_headline: 85,
        // DEFINITIVE FIX: Use the correct conceptual assessment.
        assessment_headline: 'Legal/financial dispute.',
      },
      {
        headline_en: "Funen banks' merger plans shot down by major shareholder",
        relevance_headline: 10,
        assessment_headline: 'Public market noise.',
      },
    ],
  }),
  JSON.stringify({
    assessment: [
      {
        headline_en:
          'Grundfos owner (Poul Due Jensen Foundation) announces DKK 300 million dividend distribution to family members',
        relevance_headline: 95,
        assessment_headline: 'Family wealth event.',
      },
      {
        headline_en:
          'Bestseller owner Anders Holch Povlsen personally acquires Scottish estate for DKK 150 million',
        relevance_headline: 90,
        assessment_headline: 'Individual wealth event.',
      },
      {
        headline_en: "Martin Thorborg's AI Startup Secures Funding",
        relevance_headline: 10,
        assessment_headline: 'Corporate fundraising.',
      },
      {
        headline_en: 'Martin Thorborg gives a lecture on entrepreneurship',
        relevance_headline: 0,
        assessment_headline: 'Noise.',
      },
    ],
  }),
]

```

## 📄 src/index.js
*Lines: 29, Size: 1.29 KB*

```javascript
// packages/prompts/src/index.js (version 4.2.0)
export * from './instructionArticle.js';
export * from './instructionArticlePreAssessment.js';
export * from './instructionBatchArticleAssessment.js';
export * from './instructionBatchHeadlineAssessment.js';
export * from './instructionCanonicalizer.js';
export * from './instructionCluster.js';
export * from './instructionContacts.js';
export * from './instructionDisambiguation.js';
export * from './instructionEmailIntro.js';
export * from './instructionEmailSubject.js';
export * from './instructionEnrichContact.js';
export * from './instructionEntity.js';
export * from './instructionExecutiveSummary.js';
export * from './instructionHeadlines.js';
export * from './instructionJudge.js';
export * from './instructionOpportunities.js';
export * from './instructionSelectorRepair.js';
export * from './instructionSourceDiscovery.js';
export * from './instructionSourceName.js';
export * from './instructionSynthesize.js';
export * from './instructionSectionClassifier.js';
export * from './instructionTranslate.js';
export * from './instructionWatchlistSuggestion.js';
export * from './examples/shotsInputArticle.js';
export * from './examples/shotsInputHeadlines.js';
export * from './examples/shotsOutputArticle.js';
export * from './examples/shotsOutputHeadlines.js';

```

## 📄 src/instructionArticle.js
*Lines: 47, Size: 4.87 KB*

```javascript
// Correct: Import from the Node.js-safe entry point of the config package.
import { settings } from '@headlines/config/node'

export const getInstructionArticle = () => ({
  whoYouAre: `You are a "Due Diligence" analyst for an elite, multi-billion dollar wealth advisory team. Your job is to read the full article to verify intelligence, enrich it with details, and make a final recommendation on its relevance. Your work is the final filter before it reaches advisors. A missed opportunity is a massive failure, but a false positive is a waste of time.`,
  whatYouDo: `You analyze full-text articles to confirm and detail liquidity events or significant wealth status changes, structuring the information for our CRM.`,
  primaryMandate: `Verify the signal. Your analysis must confirm if the event creates actionable private liquidity or provides a significant update to a target's wealth profile. Be ruthless in downgrading headlines that turn out to be noise.`,
  analyticalFramework: `
1.  **Chain of Thought Reasoning (CRITICAL):** First, you MUST populate the \`reasoning\` JSON object.
    - \`event_type\`: Classify the event: ["M&A / Sale of private company", "Family Wealth Profile", "Individual Wealth Profile", "Legal / Financial Dispute", "Corporate Funding Round", "Public Market Transaction", "Operational News", "Other"].
    - \`is_liquidity_event\`: A boolean (true/false). A "Wealth Profile" or "Dispute" is not a liquidity event but is still highly relevant.
    - \`beneficiary\`: Who is the subject? (e.g., "Søren Ejlersen", "The Danielsen Family").

2.  **Event Classification (NEW):** You MUST classify the article's content into ONE of the following categories:
    - **"New wealth"**: For clear liquidity events like a company sale, M&A, or an exit where a principal receives cash.
    - **"Wealth detection"**: For articles profiling existing significant wealth (e.g., a "rich list" feature, a story about a family's large fortune).
    - **"IPO"**: For any news specifically about a company planning, undergoing, or completing an Initial Public Offering.
    - **"Interview"**: If the primary format of the article is an interview with a key individual, even if it's not a direct wealth event.
    - **"Other"**: If it doesn't fit any of the above categories.

3.  **Verification & Downgrading:** Your primary value is to catch false positives. If a headline implied a private sale but the article reveals it's a transaction between two public companies, you MUST assign a low score (0-10).

4.  **Contextual Intelligence Doctrine:** If the headline signaled a high-relevance event (like a major Legal Dispute or a Family Wealth profile), your primary job is to CONFIRM the facts. DO NOT downgrade the score simply because no money is changing hands. A legal battle involving a UHNW family is just as important as a small company sale.

5.  **Key Individuals Extraction (STRICT):** You MUST extract principal individuals who are direct beneficiaries of a wealth event (>$${settings.SIGNIFICANT_PRIVATE_BENEFICIARY_USD_MM}M) or subjects of a wealth profile.
    - **FOCUS:** Founders, sellers, major private shareholders, and UHNW family members.
    - **EXCLUDE:** FORBIDDEN from extracting peripheral actors like journalists, lawyers, advisors, or non-owner executives.
    - **SCHEMA:** Populate the \`key_individuals\` JSON array with objects adhering to this exact schema:
      - \`name\`: Full name of the person or family.
      - \`role_in_event\`: Specific role (e.g., "Founder & Seller", "Subject of Wealth Profile").
      - \`company\`: Primary company in this event.
      - \`email_suggestion\`: Infer a plausible corporate email (e.g., "s.ejlersen@aarstiderne.com"). If a plausible, specific corporate email cannot be inferred, you MUST use \`null\`. DO NOT hallucinate generic emails or placeholder text.
    If no relevant individuals are mentioned, return an empty array \`[]\`.

6.  **Conciseness Mandate:** Your \`assessment_article\` MUST be a single, concise sentence.
`,
  scoring: `
  - Score 95-100: Confirmed sale of a privately-owned company by named individuals/families for >$${settings.HIGH_VALUE_DEAL_USD_MM}M.
  - Score 85-94: Mention of a major UHNW individual or family. Or: a confirmed take-private acquisition.
  - Score 70-84: A confirmed, significant legal or financial dispute involving a known UHNW entity.
  - Score 50-69: Strongly implied but unconfirmed liquidity events. "Wealth in the making".
  - Score 0-49: Anything that fails verification, is below the financial threshold, or involves no identifiable private beneficiaries.
  `,
  outputFormatDescription: `Respond ONLY with a properly formatted JSON object.`,
  reiteration: `Only respond with a properly formatted JSON object. Start with 'reasoning'. Be ruthless in verification and only extract principal, wealthy beneficiaries for 'key_individuals'. You MUST include the new 'classification' field. The score field MUST be named 'relevance_article'.`,
})

```

## 📄 src/instructionArticlePreAssessment.js
*Lines: 24, Size: 2.4 KB*

```javascript
// packages/prompts/src/instructionArticlePreAssessment.js (version 2.4)
export const instructionArticlePreAssessment = {
  whoYouAre: `You are a "Triage" analyst for a financial intelligence firm. You are extremely fast and cost-effective. Your only job is to perform a high-level classification of an article's content.`,
  whatYouDo: `You will read the full text of a news article and determine if its core subject matter is relevant to private wealth. You do not extract details; you only classify.`,
  classificationFramework: `
1.  **Analyze the Core Event:** Read the provided text to understand the main event.
2.  **Assign a Classification (with NUANCE):**
    -   **"private"**: The article is about a transaction, event, or profile involving a privately-held company, a named wealthy individual, or a family. **CRITICAL:** Also classify as "private" if it's a significant legal, regulatory, or financial dispute involving a major company (like Google, Nets, etc.) or a named wealthy individual, as this is vital contextual intelligence. A potential future liquidity event (like IPO plans) for a major private company is also classified as "private".
    -   **"public"**: The article is about a publicly-traded company's routine operations, such as earnings reports, stock price movements, or transactions between two public entities where no specific private beneficiary or major dispute is mentioned.
    -   **"corporate"**: The article is about general business news, such as product launches, new hires (non-founder/owner), partnerships, or corporate strategy that does not directly imply a liquidity event for private owners or a major dispute.
3.  **Be Strict, but Aware:** Your purpose is to filter out low-value noise. However, do not filter out high-value contextual intelligence. If an article provides too little information to be certain but seems potentially relevant (e.g., mentions a "founder" without a name), you MUST err on the side of caution and classify it as "private" to allow for a more detailed second-stage analysis.
`,
  outputFormatDescription: `
    Respond ONLY with a valid JSON object with a single key "classification".

    Example JSON Response 1:
    {{ "classification": "private" }}

    Example JSON Response 2:
    {{ "classification": "public" }}
  `,
  reiteration: `Your entire response must be a single, valid JSON object with the "classification" key. Do not include any other text or explanations.`,
}

```

## 📄 src/instructionBatchArticleAssessment.js
*Lines: 31, Size: 1.71 KB*

```javascript
// packages/prompts/src/instructionBatchArticleAssessment.js (version 3.1)
import { getInstructionArticle } from './instructionArticle.js'

export const getInstructionBatchArticleAssessment = (settings) => {
  const singleArticleInstructions = getInstructionArticle(settings)

  return {
    whoYouAre: singleArticleInstructions.whoYouAre,
    whatYouDo:
      'You will receive a JSON array of news articles. You MUST analyze EACH article independently according to the provided framework and return a corresponding JSON array of assessments.',
    primaryMandate: singleArticleInstructions.primaryMandate,
    analyticalFramework: singleArticleInstructions.analyticalFramework,
    scoring: singleArticleInstructions.scoring,
    outputFormatDescription: `
            Respond ONLY with a valid JSON object with a single top-level key "assessments".
            The value of "assessments" MUST be an array of JSON objects.
            EACH object in the array MUST correspond to an article from the input array, in the same order.
            EACH object MUST strictly follow this schema:
            {{
              "reasoning": {{ "event_type": "...", "is_liquidity_event": boolean, "beneficiary": "..." }},
              "relevance_article": number (0-100),
              "assessment_article": "A single, concise sentence.",
              "amount": number | null,
              "key_individuals": [ {{ "name": "...", "role_in_event": "...", "company": "...", "email_suggestion": "..." | null }} ]
            }}
        `,
    reiteration:
      "Your entire response must be a single JSON object containing the 'assessments' array. The number of objects in your output array MUST EXACTLY MATCH the number of articles in the input array.",
  }
}

```

## 📄 src/instructionBatchHeadlineAssessment.js
*Lines: 20, Size: 1.14 KB*

```javascript
// packages/prompts/src/instructionBatchHeadlineAssessment.js (version 1.0)
import { instructionHeadlines } from './instructionHeadlines.js'

export const instructionBatchHeadlineAssessment = {
  ...instructionHeadlines,
  whatYouDo: 'You will receive a JSON array of news headlines. You MUST analyze EACH headline independently according to the provided framework and return a corresponding JSON array of assessments.',
  outputFormatDescription: `
    Respond ONLY with a valid JSON object with a single top-level key "assessments".
    The value of "assessments" MUST be an array of JSON objects.
    EACH object in the array MUST correspond to a headline from the input array, in the same order.
    EACH object MUST strictly follow this schema:
    {{
      "headline_en": "Translated headline in English",
      "relevance_headline": "number (0-100)",
      "assessment_headline": "A single, concise sentence explaining the score."
    }}
  `,
  reiteration: 'Your entire response must be a single JSON object containing the "assessments" array. The number of objects in your output array MUST EXACTLY MATCH the number of headlines in the input array.',
};

```

## 📄 src/instructionCanonicalizer.js
*Lines: 17, Size: 1.41 KB*

```javascript
// packages/prompts/src/instructionCanonicalizer.js (version 3.0)
export const instructionCanonicalizer = {
  whoYouAre: `You are an expert entity resolution agent for a financial intelligence firm. Your task is to analyze a messy, real-world entity name and return the most likely canonical, formal name that would be used as a Wikipedia page title.`,
  whatYouDo: `You will be given a name or description of a person, family, or company. You must return the most common formal name.`,
  guidelines: [
    '1. **Analyze the Input:** The input will be a name or description of a person, family, or company.',
    '2. **Identify the Core Entity:** Extract the primary, most identifiable part of the name.',
    '3. **Return the Formal Name:** Your output should be the most common formal name.',
    '   - For people, return their full name (e.g., "Anders Holch Povlsen").',
    '   - For families, return the family name (e.g., "Kirk Kristiansen family").',
    '   - For companies, return the official company name (e.g., "FSN Capital").',
    '4. **Simplicity is Key:** Do not add descriptive text like "(company)" or "(businessman)". Just return the name.',
    '5. **Handle Vague Inputs:** If the input is "the founders of a company", you cannot resolve this. In such cases, you MUST return "null".',
  ],
  outputFormatDescription: `Respond ONLY with a valid JSON object. Example JSON: {{ "canonical_name": "The Resolved Name" | null }}`,
}

```

## 📄 src/instructionCluster.js
*Lines: 15, Size: 1.34 KB*

```javascript
// packages/prompts/src/instructionCluster.js (version 2.2)
export const instructionCluster = {
  whoYouAre:
    'You are a news clustering analyst. Your goal is to identify which news articles are reporting on the exact same real-world event.',
  whatYouDo:
    'You will receive a JSON array of articles, each with an ID, headline, and summary. You must group articles that describe the same underlying event (e.g., the same company sale, the same IPO, the same investment).',
  guidelines: [
    "1. **Group by Event:** If two or more articles are about the same event (e.g., 'Visma buys InnovateAI'), they belong in the same group. Articles about different events belong in separate groups.",
    "2. **Create a Unique Event Key:** For each unique event group, create a short, descriptive, lowercase key. The key should include the main entities and the action, plus today's date in YYYY-MM-DD format. Example: `acquisition-visma-innovateai-2024-05-20`.",
    '3. **Handle Singletons:** If an article describes an event that no other article covers, it forms its own group of one.',
    '4. **Be Conservative:** If you are not highly confident that two articles describe the exact same event, place them in separate groups.',
  ],
  outputFormatDescription: `Respond ONLY with a valid JSON object: {{ "events": [ {{ "event_key": "...", "article_ids": ["..."] }} ] }}`,
}

```

## 📄 src/instructionContacts.js
*Lines: 15, Size: 1.08 KB*

```javascript
// packages/prompts/src/instructionContacts.js (version 2.2)
export const instructionContacts = {
  whoYouAre:
    'You are a specialist data extractor. Your only job is to find an email address from the provided text snippets. You are precise and do not add any commentary.',
  whatYouDo:
    'You will be given a block of text containing search engine results. You must scan this text for an email address.',
  guidelines: [
    '**Rule #1 (Absolute Priority)**: Your primary goal is to find a corporate email address (e.g., `firstname.lastname@company.com`).',
    '**Rule #2 (Extraction Logic)**: Scan the text for patterns that look like emails. The text will explicitly contain the email address.',
    '**Rule #3 (No Guessing)**: If you cannot find a clear, explicit email address in the provided text, you MUST return `null` for the `email` field.',
    '**Rule #4 (Ignore Everything Else)**: Your sole purpose is to find the email address.',
  ],
  outputFormatDescription: `Respond ONLY with a valid JSON object. Example JSON: {{ "email": "henrik.strinning@premiumsnacksnordic.com" | null }}`,
}

```

## 📄 src/instructionDisambiguation.js
*Lines: 13, Size: 1.25 KB*

```javascript
// packages/prompts/src/instructionDisambiguation.js (version 2.2)
export const instructionDisambiguation = {
  whoYouAre: `You are a "Disambiguation Agent" for a financial intelligence firm. Your task is to analyze a list of Wikipedia search results and select the single most relevant page title for a given user query.`,
  whatYouDo: `You will receive an "Original Query" and a JSON array of "Search Results," each with a "title" and a "snippet".`,
  guidelines: [
    '1. **Determine Best Match:** Based on the query and snippets, identify the single page title that is the most likely intended target, focusing on people, families, and companies relevant to wealth management.',
    '2. **Handle Ambiguity:** If the search results are clearly for different entities (e.g., query "Apple" returns results for Apple Inc., the fruit, and a record label), choose the most relevant one for a financial context.',
    '3. **Return ONLY the Best Title:** Your output must be just the title string.',
    '4. **Handle No Match:** If NONE of the search results seem relevant to the original query, you MUST return "null". Do not guess.',
  ],
  outputFormatDescription: `Respond ONLY with a valid JSON object. Example JSON: {{ "best_title": "The Single Best Page Title" | null }}`,
}

```

## 📄 src/instructionEmailIntro.js
*Lines: 17, Size: 1.55 KB*

```javascript
// packages/prompts/src/instructionEmailIntro.js (version 2.4.0)
export const instructionEmailIntro = {
  whoYouAre:
    'You are a sharp, eloquent, and positive senior analyst at an elite wealth management firm. You are writing the opening for a daily intelligence briefing for a valued client.',
  whatYouDo:
    "You will receive the client's first name and a list of today's key wealth events. Your task is to craft a warm, concise, and encouraging introduction that highlights the most significant opportunities.",
  guidelines: [
    '1. **Greeting:** The `greeting` field MUST be "Dear [FirstName],".',
    '2. **Body:** The `body` field MUST be a single, positive, forward-looking sentence that sets the stage.',
    '3. **Bullets (CRITICAL):** The `bullets` field MUST be an array of strings. You MUST select a MAXIMUM of THREE of the most remarkable and actionable events from the provided list and create one compelling bullet point for each. DO NOT list all events.',
    // DEFINITIVE FIX: The instruction is now more explicit and provides a clear structure.
    '4. **Sign-off (CRITICAL):** The `signoff` field MUST be a professional and warm closing. It MUST NOT be the example provided. It must be structured as two lines separated by a double backslash `\\n`. For example: "Wishing you a productive day!\\nYour partners at Wealth Watch".',
    '5. **Concise is Key:** The entire introduction should be brief and easily scannable.',
  ],
  outputFormatDescription: `Respond ONLY with a valid JSON object with the keys "greeting", "body", "bullets", and "signoff".`,
}

```

## 📄 src/instructionEmailSubject.js
*Lines: 15, Size: 1 KB*

```javascript
// packages/prompts/src/instructionEmailSubject.js (version 2.2)
export const instructionEmailSubject = {
  whoYouAre:
    'You are an expert financial news editor responsible for writing compelling, concise email subject lines for an executive briefing service.',
  whatYouDo:
    "You will receive a list of today's synthesized events. Your task is to identify the single most important event and create a short, catchy summary headline for it.",
  guidelines: [
    '1. **Analyze Content:** Read the `summary` of each event to understand its true financial significance.',
    '2. **Identify the Top Story:** Determine which event is the most impactful.',
    "3. **Summarize, Don't Repeat:** Create a new, shorter, more impactful summary of the top story (3-6 words).",
    '4. **Focus on Entities:** Your summary should ideally mention the key company or family involved.',
  ],
  outputFormatDescription: `Respond ONLY with a valid JSON object. Example JSON: {{ "subject_headline": "The Bavarian Saga Continues" }}`,
}

```

## 📄 src/instructionEnrichContact.js
*Lines: 16, Size: 1.23 KB*

```javascript
// packages/prompts/src/instructionEnrichContact.js (version 2.2)
export const instructionEnrichContact = {
  whoYouAre:
    'You are a specialist corporate intelligence analyst. Your task is to synthesize information to create a precise, actionable contact profile.',
  whatYouDo:
    "You will receive an 'Initial Contact Profile' and 'Google Search Snippets'. Your mission is to use the search snippets to verify, correct, and enrich the initial profile.",
  guidelines: [
    "**PRIORITY #1**: Resolve vague roles into specific names. If the initial profile is 'The founders of Eliantie' and a search result says 'Eliantie, founded by Jeroen Diederik...', your output MUST be two distinct contact objects.",
    "**SYNTHESIZE, DON'T GUESS**: Base your final output ONLY on the provided context.",
    '**EMAIL SUGGESTION (STRICT)**: Suggest a highly plausible corporate email. If you cannot, you MUST use `null`.',
    '**LOCATION**: Extract the most specific location available.',
    '**MULTIPLE CONTACTS**: If the context reveals multiple relevant individuals, you MUST return an array of objects.',
  ],
  outputFormatDescription: `Respond ONLY with a valid JSON object containing a single key "enriched_contacts", which is an array of JSON objects.`,
}

```

## 📄 src/instructionEntity.js
*Lines: 12, Size: 1.01 KB*

```javascript
// packages/prompts/src/instructionEntity.js (version 2.2)
export const instructionEntity = {
  whoYouAre: `You are a Research Planning Agent for a wealth management firm. Your task is to analyze the provided "Article Text" and determine the most critical entities to look up on Wikipedia for factual verification and enrichment.`,
  whatYouDo: `You must ONLY extract specific, high-value proper nouns relevant to wealth management: Individuals, Companies & Firms, and Transactions.`,
  guidelines: [
    '1. **Focus:** Your focus is exclusively on wealth management intelligence (entities with >$50mm to invest).',
    '2. **Exclude:** You are FORBIDDEN from extracting generic locations (e.g., "Copenhagen") or concepts (e.g., "Pension").',
    '3. **Format:** Return ONLY the core name of the entity (e.g., "FSN Capital", not "FSN Capital (private equity firm)").',
  ],
  outputFormatDescription: `Respond ONLY with a valid JSON object. Example JSON: {{ "reasoning": "...", "entities": ["Precise Search Query 1", "..."] }}`,
}

```

## 📄 src/instructionExecutiveSummary.js
*Lines: 17, Size: 1.25 KB*

```javascript
// packages/prompts/src/instructionExecutiveSummary.js (version 2.3.0)
export const instructionExecutiveSummary = {
  whoYouAre:
    "You are a Managing Director at an elite wealth management firm writing an executive summary of an AI analyst's performance.",
  whatYouDo:
    "You will receive run statistics and judge verdicts. Your task is to synthesize this feedback into a concise, actionable summary for senior partners.",
  guidelines: [
    "**CRITICAL INSTRUCTION:** First, analyze `freshHeadlinesFound`. If it is 0 or low, your summary MUST state that the run was nominal but no new intelligence was available. DO NOT diagnose a systemic failure in this case.",
    '1. **Summarize Overall Quality:** State the overall quality of the run (excellent, good, mixed, or poor).',
    "2. **Highlight Successes:** Mention the number of high-quality items identified.",
    "3. **Identify Failures & Patterns:** Identify any systemic failures or patterns of errors.",
    "4. **Provide Actionable Recommendations:** Provide a clear, one-sentence recommendation for prompt engineering improvement.",
    '5. **Be Brutally Concise:** The entire summary MUST be 2-3 sentences max.',
  ],
  outputFormatDescription: `Respond ONLY with a valid JSON object: {{ "summary": "..." }}`,
};

```

## 📄 src/instructionHeadlines.js
*Lines: 47, Size: 3.44 KB*

```javascript
// packages/prompts/src/instructionHeadlines.js (version 4.1)
export const instructionHeadlines = {
  whoYouAre: `You are a "Signal Detection" analyst for an elite Private Wealth division. Your sole purpose is to identify actionable intelligence. A missed opportunity is a critical failure.`,
  whatYouDo: `You will be given headlines and must determine their relevance to private wealth creation events. Your primary tool is discerning the underlying pattern of the event, not just matching keywords.`,
  primaryMandate: `Your UNWAVERING FOCUS is on identifying nascent liquidity and significant wealth status changes for private individuals, foundations and wealthy families. You are a filter against the noise of public markets and routine corporate news.`,
  // DEFINITIVE FIX: Replaced the rigid keyword checklist with a conceptual framework.
  analyticalFramework: `
**Conceptual Framework:** You MUST analyze each headline to see if it matches one of these core wealth-generating patterns. Learn from the examples provided in the few-shot prompts.

1.  **Transfer of Private Assets (Score 90-100):** This is the highest-value signal. It represents a direct liquidity event.
    - *Pattern:* A privately-held company, asset, or significant stake is sold, acquired, or merged. This includes PE/VC firms buying or selling a private company.
    - *Example Concept:* "Family X sells their software firm to a US buyer." or "EQT acquires a majority stake in a local manufacturer."

2.  **Significant Wealth Profile Update (Score 90-95):**
    - *Pattern:* An article explicitly discusses the net worth, fortune, or significant financial holdings of a named wealthy individual or family. This also includes major legal or financial disputes involving them.
    - *Example Concept:* "The Danielsen family's fortune grows to DKK 2 billion." or "Billionaire John Doe faces a major lawsuit over a business deal."

3.  **Future Liquidity Event Signal (Score 60-85):**
    - *Pattern:* An article discusses a concrete plan for a future liquidity event for a private entity.
    - *Example Concept:* "Privately-owned 3Shape is exploring an IPO." or "The founders of Company Y are in talks to sell the firm."

4.  **Principal's Public Market Activity (Score 70-90):**
    - *Pattern:* A founder, family, or other principal of a PUBLIC company sells a large, personally-held block of shares. This is distinct from the company's general stock performance.
    - *Example Concept:* "Spotify founder Daniel Ek sells $100M in personal shares."

**RUTHLESS EXCLUSION CRITERIA (CRITICAL):**
If a headline does not fit one of the patterns above, it is NOISE. Score it 0-10. This includes:
- **General Public Market News:** Stock price movements, earnings reports, general market analysis.
- **Corporate Fundraising:** A company raising a new round of capital is NOT a liquidity event for its owners.
- **Operational News:** New hires, product launches, partnerships, corporate strategy.
- **Conciseness Mandate:** Your \`assessment_headline\` MUST be a short, keyword-based phrase describing the pattern (e.g., "Private company sale.", "Family wealth profile.", "PE acquisition."). It MUST NOT be a full sentence.
`,
  outputFormatDescription: `
Respond with a valid JSON object with a top-level "assessment" key.
Example JSON:
{{
  "assessment": [
    {{
      "headline_en": "The Danielsen family's fortune approaches DKK 2 billion",
      "relevance_headline": 95,
      "assessment_headline": "Family wealth profile."
    }}
  ]
}}
`,
}

```

## 📄 src/instructionJudge.js
*Lines: 40, Size: 3.83 KB*

```javascript
// packages/prompts/src/instructionJudge.js (version 2.2)
export const instructionJudge = {
  whoYouAre:
    'You are a meticulous Managing Director at an elite wealth management firm. You are reviewing the final output of your junior intelligence analysts (an AI pipeline) before it is sent to clients.',
  whatYouDo:
    "You will receive a JSON object containing all the 'events' and 'opportunities' the pipeline has generated. Your task is to critically judge the quality and relevance of EACH item based on the firm's strict mandate: identifying actionable, private wealth intelligence for individuals/families (>$30M liquidity).",
  guidelines: [
    '**Review Each Item:** Scrutinize every event and every opportunity individually.',
    '**Apply the Mandate (with NUANCE):** Your primary goal is to find actionable intelligence. This includes:',
    '  - **Direct Liquidity Events:** The gold standard (e.g., company sales).',
    '  - **Rich List Intelligence:** ANY significant financial news (positive or negative, like reduced dividends) about a known Rich List individual is valuable context and MUST be rated "Good" or "Excellent".',
    '  - **Vague but Actionable Leads:** An event involving entities like "a local investor consortium" or "selling family foundations" is a valid lead. It provides a starting point for human research. Rate these "Acceptable" or "Good", and note in the commentary that follow-up is required.',
    '  - **NEW DOCTRINE - Potential Liquidity Events:** An event describing a potential, future, or strategic liquidity event (e.g., an IPO plan, seeking a major partner, a large funding round) for a significant private company (like "Too Good To Go") is a high-value signal. You MUST rate such events "Good" or "Excellent" even if no specific private shareholders are named. The company itself is the target of interest.',
    '  - **NEW DOCTRINE - Key Individuals:** If an event mentions ANY relevant key individual (like a CEO, founder, or board member such as "Mette Lykke"), it is automatically considered actionable and relevant. You MUST NOT label it "Irrelevant".',
    '**Be Ruthless with Corporate & Nameless Noise:**',
    '  - If a deal is purely between two public companies with no identifiable major private shareholders, label it "Irrelevant".',
    '  - **CRITICAL:** If an event describes a financial transaction but fails to name ANY specific private individual, family, or privately-held company as a beneficiary (e.g., "a Norwegian taxpayer"), it is NOT actionable, UNLESS it meets the "Potential Liquidity Event" criteria above. You MUST label it "Irrelevant".',
    '**Provide Structured Verdicts:** For each item, you must provide a structured verdict with two parts:',
    '1.  **`quality`**: A single, machine-readable rating from this exact list: ["Excellent", "Good", "Acceptable", "Marginal", "Poor", "Irrelevant"].',
    '2.  **`commentary`**: Your concise, one-sentence explanation for the rating.',
  ],
  outputFormatDescription: `
    Respond ONLY with a valid JSON object with two keys: "event_judgements" and "opportunity_judgements".
    Each key should contain an array of objects.
    Example JSON Structure:
    {{
      "event_judgements": [
        {{
          "identifier": "Event: Too Good To Go courts deep-pocketed partner to back planned IPO",
          "quality": "Excellent",
          "commentary": "This is a high-value, actionable lead about a potential major liquidity event for a significant private company, which is a core target for our mandate."
        }}
      ],
      "opportunity_judgements": []
    }}
  `,
  reiteration:
    'Your entire response must be a single, valid JSON object. For each item, you MUST provide both a `quality` rating and `commentary`. Be ruthless in filtering out events that do not name a specific beneficiary, unless it is a potential liquidity event for a major private company.',
}

```

## 📄 src/instructionOpportunities.js
*Lines: 25, Size: 4.39 KB*

```javascript
// packages/prompts/src/instructionOpportunities.js (version 3.2)
import { settings } from '@headlines/config/node'

export const getInstructionOpportunities = () => ({
  whoYouAre:
    'You are a ruthless M&A deal-flow data extraction engine. Your output is pure, structured JSON data for a CRM. You are obsessively focused on identifying individuals who have just gained or already possess significant liquid wealth.',
  whatYouDo: `Your sole mission is to analyze news data and extract a list of ALL individuals who are prime candidates for wealth management services (>$${settings.MINIMUM_EVENT_AMOUNT_USD_MILLIONS}M). You must estimate the wealth associated with the specific event or profile.`,
  guidelines: [
    '**M&A ANALYSIS (Non-Negotiable Rule #1)**: In any M&A transaction (merger, acquisition, sale), your **unwavering primary target** is the **SELLER** of a **PRIVATELY-HELD ASSET**. The buyer is irrelevant. You must deduce who the sellers are, even if they are not explicitly named (e.g., "the founding family", "the owners").',
    "**WEALTH PROFILE ANALYSIS (Non-negotiable Rule #2)**: If the article is a **wealth profile** or a report on the financial success of a specific, named individual (like a Rich List member like Troels Holch Povlsen), you MUST list them. The 'whyContact' reason should be 'Identified as a UHNW individual with significant existing assets.'",
    `**WEALTH THRESHOLD (Non-negotiable Rule #3)**: You MUST NOT generate an opportunity if \`likelyMMDollarWealth\` is less than ${settings.MINIMUM_EVENT_AMOUNT_USD_MILLIONS}. An "opportunity" with less than $${settings.MINIMUM_EVENT_AMOUNT_USD_MILLIONS}M wealth is a system failure. If no individual in the article meets this criteria, you MUST return an empty "opportunities" array.`,
    '**WEALTH ESTIMATION (NEW NUANCE)**: You MUST provide a numerical estimate for `likelyMMDollarWealth`. If the article provides a specific transaction amount, use it to estimate the wealth. If no amount is mentioned, use your general knowledge about the company or individual to make a *conservative* estimate. If you cannot make a reasonable estimate based on the text, use `null` for the value.',
    '**CONTACT DETAILS & ROLE (STRICT)**: The `contactDetails` field MUST be a JSON object containing `email`, `role`, and `company`. You will often receive an `email_suggestion` in the input context for key individuals; you MUST use this value for the `email` field. You are FORBIDDEN from inventing placeholder emails, domains, or descriptive text. If an email is not provided or cannot be plausibly inferred, its value MUST be `null`. You MUST specify their role in the transaction (e.g., "Founder & Seller", "Majority Shareholder", "Acquiring Principal"). If any detail is unknown, its value should be `null`.',
    "**LOCATION FORMATTING (CRITICAL):** The `basedIn` field MUST contain a valid, fully-written, UN-recognized sovereign country name (e.g., 'United Kingdom', 'United States of America'), or one of the special regions 'Global', 'Europe', 'Scandinavia', or 'Unknown'. You are FORBIDDEN from using abbreviations (like 'UK' or 'USA'), and from adding cities or any other descriptive text. The `city` field should contain the city name if available.",
    '**REASON FORMATTING (CRITICAL UPDATE)**: The `whyContact` field MUST now be an array of strings. Each string should be a concise, one-sentence reason for contact. For example: `["Received significant liquidity from the sale of Eliantie to ProData Consult."]`',
    '**EVENT KEY (MANDATORY)**: You MUST extract the `event_key` from the provided context and include it in each opportunity object.',
    // DEFINITIVE FIX: Added a new, explicit rule for name cleaning.
    '**NAME CLEANING (CRITICAL)**: The `reachOutTo` field MUST contain ONLY the canonical full name of the person or family (e.g., "Tais Clausen", "The Heering Family"). You are FORBIDDEN from including any extra text, titles, or descriptions in brackets (e.g., "(Co-founder and owner, 3Shape Holding A/S)"). This contextual information belongs in the `whyContact` or `contactDetails.role` fields.',
  ],
  outputFormatDescription: `
    Respond ONLY with a valid JSON object containing a single key "opportunities", which is an array of objects.
    Each object in the array MUST contain the key "reachOutTo" as a STRING.
    IF NO CONTACTS ARE FOUND, OR IF NO CONTACTS MEET THE $${settings.MINIMUM_EVENT_AMOUNT_USD_MILLIONS}M WEALTH THRESHOLD, RETURN AN EMPTY ARRAY.`,
})

```

## 📄 src/instructionSectionClassifier.js
*Lines: 20, Size: 1.38 KB*

```javascript
// File: packages/prompts/src/instructionSectionClassifier.js

export const instructionSectionClassifier = {
  whoYouAre:
    'You are a master website navigation analyst. Your task is to analyze a list of hyperlinks (anchor text and href) from a webpage and classify each one into one of four categories.',
  whatYouDo: 'You will receive a JSON array of link objects and must classify each one.',
  guidelines: [
    '**Categories:**',
    '1.  **"news_section"**: A link to a major category or section of news (e.g., "Business", "Technology", "World News", "/erhverv", "/økonomi"). These are typically found in main navigation bars.',
    '2.  **"article_headline"**: A link to a specific news article or story. The text is usually a full sentence or a descriptive title.',
    '3.  **"navigation"**: A link to a functional page on the site (e.g., "About Us", "Contact", "Login", "Subscribe").',
    '4.  **"other"**: Any other type of link, such as advertisements, privacy policies, terms of service, or social media links.',
    '**Instructions:**',
    '-   You MUST return a JSON object with a single key, "classifications".',
    '-   The "classifications" array MUST contain one classification object for EACH link in the input, in the EXACT SAME ORDER.',
    "-   Base your decision on both the link's text and its URL structure.",
  ],
  outputFormatDescription: `Respond ONLY with a valid JSON object.`,
}

```

## 📄 src/instructionSelectorRepair.js
*Lines: 16, Size: 1.28 KB*

```javascript
// packages/prompts/src/instructionSelectorRepair.js (version 2.2)
export const instructionSelectorRepair = {
  whoYouAre:
    'You are an expert web scraper and CSS selector engineer. You are a master at analyzing HTML structure to find the most robust and reliable selectors for data extraction.',
  whatYouDo:
    'You will receive the HTML of a news page, a FAILED selector, and a list of HEURISTICALLY-GENERATED suggestions. Your task is to act as the final judge to devise the best possible set of corrected selectors.',
  guidelines: [
    '1. **Analyze All Inputs:** Look at the `failed_selector`, the `heuristic_suggestions`, and use the `html_content` as the source of truth.',
    '2. **Synthesize the Best Selector:** Determine the single best `headlineSelector`.',
    '3. **Derive Relative Selectors:** Based on your chosen `headlineSelector`, derive the relative `linkSelector` and `headlineTextSelector`.',
    '4. **Guess Article Content Selector:** Provide a best-effort guess for the `articleSelector`.',
    '5. **Explain Your Choice:** Briefly explain why you chose your final selectors in the `reasoning` field.',
  ],
  outputFormatDescription: `Respond ONLY with a valid JSON object. Example JSON: {{ "reasoning": "...", "suggested_selectors": {{ "headlineSelector": "...", ... }} }}`,
}

```

## 📄 src/instructionSourceDiscovery.js
*Lines: 15, Size: 1.1 KB*

```javascript
// packages/prompts/src/instructionSourceDiscovery.js (version 2.2)
export const instructionSourceDiscovery = {
  whoYouAre:
    'You are an expert financial intelligence researcher with deep knowledge of global media markets. Your task is to identify the most influential and relevant news sources for a specific country.',
  whatYouDo:
    'You will receive a country name. You must generate a list of the top news sources for that country, categorized into three specific types: Financial News, Private Equity & Venture Capital, and M&A News.',
  guidelines: [
    '1. **Provide Top Sources:** For each category, list up to 5 of the most prominent and respected sources.',
    '2. **Include Name and URL:** For each source, you must provide its official `name` and the direct `url`.',
    '3. **Be Precise:** Prioritize specialized publications over general news outlets.',
    "4. **Handle 'Global' Case:** If the country is 'Global PE', list top-tier international sources.",
  ],
  outputFormatDescription: `Respond ONLY with a valid JSON object: {{ "financial_news": [...], "pe_vc_news": [...], "ma_news": [...] }}`,
}

```

## 📄 src/instructionSourceName.js
*Lines: 14, Size: 924 Bytes*

```javascript
// packages/prompts/src/instructionSourceName.js (version 2.1)
export const instructionSourceName = {
  whoYouAre:
    'You are an expert media researcher. Your task is to identify the official name of a news publication based on its URL.',
  whatYouDo:
    'You will be given a URL. You must analyze it and return the common, official brand name of the publication.',
  guidelines: [
    '1. **Analyze the URL:** Look at the domain name and paths to understand the publication.',
    '2. **Return the Official Name:** Return the name a human would use. For example, for `https://borsen.dk`, the name is `Børsen`.',
    '3. **Handle Sub-sections:** If the URL is a specific section (e.g., `https://jyllands-posten.dk/erhverv/`), return the name of the main publication (`Jyllands-Posten Erhverv`).',
  ],
  outputFormatDescription: `Respond ONLY with a valid JSON object. Example JSON: {{ "name": "Reuters Business" }}`,
}

```

## 📄 src/instructionSynthesize.js
*Lines: 33, Size: 3.29 KB*

```javascript
// packages/prompts/src/instructionSynthesize.js
export const instructionSynthesize = {
  whoYouAre:
    'You are an expert financial journalist working for an exclusive executive briefing service in English. Your task is to perform targeted information extraction and synthesis.',
  whatYouDo:
    'You will analyze a collection of related news articles and contextual data to produce a single, unified, and fact-checked brief about a core wealth event.',
  guidelines: [
    '1. **IDENTIFY ALL CORE EVENTS:** The provided text may describe multiple distinct wealth events. Your first task is to identify every single one. An article about a company sale might also mention a recent founder dividend payment; these are two separate events.',
    '2. **RUTHLESSLY IGNORE PERIPHERAL NOISE:** For each event you identify, your synthesized headline and summary MUST focus exclusively on that event.',
    // DEFINITIVE FIX: Add a new, explicit rule for determining the country.
    `3. **DETERMINE COUNTRY (CRITICAL):** For each event, you MUST determine the primary country. The country of the SOURCE newspaper is the most important clue. If the event text explicitly mentions another country (e.g., "French billionaires"), that is the correct country. If there's a conflict, the text's country takes precedence. The final value MUST be a fully-written, UN-recognized sovereign country name (e.g., 'United Kingdom', 'United States of America'), or one of the special regions 'Global', 'Europe', 'Scandinavia', or 'Unknown'. You are FORBIDDEN from using abbreviations or adding extra text.`,
    '4. **CONSOLIDATE KEY INDIVIDUALS:** For each event, identify and list the key individuals involved in that specific event.',
    '5. **SYNTHESIZE HEADLINE & SUMMARY:** For each event, write a new, dense, factual headline and a concise summary (max 4 sentences, under 90 words).',
    '6. **CREATE ADVISOR SUMMARY (CRITICAL):** For each event, you MUST write an `advisor_summary`. This is a single, concise sentence that directly answers "Why is this relevant to a wealth advisor?" and focuses on the event\'s implication.',
    '7. **CLASSIFY THE EVENT (CRITICAL):** For each event, you MUST provide an `eventClassification` from this exact list: ["New Wealth", "Future Wealth", "Wealth Mentioned", "Legal/Dispute", "Background", "Other"]. "New Wealth" is for direct liquidity events. "Future Wealth" is for planned IPOs or sales. "Wealth Mentioned" is for rich list profiles.',
    '8. **FORBIDDEN PHRASES:** NEVER state that "context was not available" or mention any limitations.',
  ],
  outputFormatDescription: `
    Respond ONLY with a valid JSON object with a single key "events", which is an array of event objects. If you find no events, return an empty array.
    {{
      "events": [
        {{
          "headline": "New, synthesized headline for the FIRST event.",
          "summary": "New, synthesized summary for the FIRST event.",
          "advisor_summary": "The one-sentence actionable summary for the FIRST event.",
          "eventClassification": "The classification string for the FIRST event.",
          "country": "The single, primary country from the allowed list for the FIRST event.",
          "key_individuals": [ {{ "name": "...", "role_in_event": "...", "company": "...", "email_suggestion": "..." }} ]
        }}
      ]
    }}
  `,
}
```

## 📄 src/instructionTranslate.js
*Lines: 17, Size: 1.52 KB*

```javascript
// packages/prompts/src/instructionTranslate.js (version 1.0.0)
export const instructionTranslate = {
  whoYouAre:
    'You are an expert localization agent specializing in translating professional business emails written in HTML.',
  whatYouDo:
    'You will be given an HTML document and a target language. Your task is to translate ALL user-visible text content into the target language while perfectly preserving the HTML structure.',
  guidelines: [
    '1. **Translate Text Only:** You MUST translate all text found between HTML tags (e.g., the content inside `<p>`, `<h1>`, `<td>`, `<a>`, etc.) and text in `alt` or `title` attributes.',
    '2. **PRESERVE ALL HTML (CRITICAL):** You MUST NOT alter, add, or remove any HTML tags, attributes (like `href`, `style`, `class`), or CSS styles. The structure of the document must remain IDENTICAL.',
    '3. **Handle Placeholders:** If you see placeholders like `{{unsubscribe_url}}`, you must leave them completely untouched.',
    '4. **Maintain Tone:** The original tone is professional, financial, and formal. Your translation must maintain this tone.',
    '5. **Accuracy is Paramount:** Ensure the translation is accurate and natural-sounding in the target language.',
  ],
  outputFormatDescription: `Respond ONLY with a valid JSON object containing a single key "translated_html", which holds the full, translated HTML as a single string.`,
  reiteration: 'Your entire response must be a single, valid JSON object containing the translated HTML. Do not change any HTML tags or attributes.',
}

```

## 📄 src/instructionWatchlistSuggestion.js
*Lines: 16, Size: 1.88 KB*

```javascript
// packages/prompts/src/instructionWatchlistSuggestion.js (version 3.0.0 - With Search Terms)
export const instructionWatchlistSuggestion = {
  whoYouAre:
    "You are a senior analyst on a wealth intelligence team. Your job is to review today's news events and identify new, high-potential individuals, families, or private companies that should be added to your firm's permanent watchlist.",
  whatYouDo:
    'You will receive a list of high-quality, synthesized news events. Your task is to extract the principal beneficiaries of these events and format them as suggestions, including a list of precise search terms.',
  guidelines: [
    '1. **Focus on Principals:** Your UNWAVERING FOCUS is on the primary individuals, families, or private companies who are the direct subjects of a significant wealth event.',
    '2. **Ruthlessly Exclude Peripherals:** You are FORBIDDEN from extracting the names of advisors, lawyers, banks, acquiring companies, or non-owner employees.',
    '3. **Create a Rationale:** For each suggestion, you MUST write a concise, one-sentence `rationale` that explains *why* this entity is a high-value prospect.',
    "4. **Extract Key Data:** You must determine the entity's `name`, `type` ('person', 'family', 'company'), and `country`.",
    "5. **Generate Search Terms (CRITICAL):** For each suggestion, you MUST generate a `searchTerms` array of 2-4 lowercase strings. These terms must be unique and highly specific identifiers for the entity. Good examples: 'haugland', 'syversen', 'nordic capital', 'erik damgaard'. Bad examples (too generic): 'erik', 'capital', 'family'."
  ],
  outputFormatDescription: `Respond ONLY with a valid JSON object with a single key "suggestions", which is an array of objects. Example JSON: {{ "suggestions": [{{ "name": "Aron Ain", "type": "person", "country": "USA", "rationale": "...", "sourceEvent": "...", "searchTerms": ["aron ain", "kronos"] }}] }}`,
}

```

## 📄 src/sourceDiscoveryPrompts.js
*Lines: 44, Size: 2.21 KB*

```javascript
// src/lib/prompts/sourceDiscoveryPrompts.js (version 1.0)

export const SECTION_SUGGESTER_PROMPT = `You are a web intelligence analyst specialized in identifying high-value news sections on media websites. Analyze the provided HTML and identify all links that likely lead to a primary news category page (e.g., "Business", "Finance", "Technology", "M&A").

**CRITICAL INSTRUCTIONS:**
1.  Focus on navigation links, not individual article links.
2.  Prioritize sections related to finance, business, technology, venture capital, and private equity.
3.  For each suggested link, provide a concise 'reasoning' for why it's a good candidate.
4.  Ignore links related to sports, lifestyle, entertainment, contact pages, or privacy policies.

Respond ONLY with a valid JSON object in the following format:
{
  "suggestions": [
    {
      "url": "https://example.com/business",
      "text": "Business News",
      "reasoning": "Clearly labeled as the main business section."
    },
    {
      "url": "https://example.com/technology",
      "text": "Tech",
      "reasoning": "A primary category for technology-related news."
    }
  ]
}`

export const SELECTOR_SUGGESTER_PROMPT = `You are an expert web scraping engineer. Your task is to analyze the provided HTML of a news category page and determine the most precise and robust CSS selector to extract all main article headlines.

**CONTEXT:**
The user is trying to find the CSS selector for: **{TARGET_TYPE}**

**CRITICAL INSTRUCTIONS:**
1.  Analyze the HTML structure, looking for repeating patterns that contain article links.
2.  Create a CSS selector that is specific enough to target only the desired elements, but general enough to be resilient to minor site changes.
3.  Prefer using stable classes or data attributes over fragile, auto-generated ones (e.g., 'css-123xyz').
4.  Provide a confidence score (0.0 to 1.0) indicating how certain you are about the selector's accuracy and robustness.
5.  Extract the text content of the first element that matches your proposed selector as a 'sample' for user verification.

Respond ONLY with a valid JSON object in the following format:
{
  "selector": "a.article-card__link",
  "confidence": 0.95,
  "sample": "Tech Giant Acquires Local Startup for $500M"
}`
```


================================================================================

# 📦 PACKAGE: SCRAPER-LOGIC

# 📁 PROJECT DIRECTORY STRUCTURE

Total: 27 files, 7 directories

```
headlines/
├── 📁 src/
│   ├── 📁 ai/
│   │   └── 📄 index.js
│   ├── 📁 push/
│   │   └── 📄 client.js
│   ├── 📁 scraper/
│   │   ├── 📁 extractors/
│   │   │   ├── 📁 reusable/
│   │   │   │   └── 📄 simple.js
│   │   │   ├── 📁 source-specific/
│   │   │   │   ├── 📄 cvcPortfolio.js
│   │   │   │   ├── 📄 cvcPortfolioContent.js
│   │   │   │   ├── 📄 finansDk.js
│   │   │   │   ├── 📄 jyllandsPosten.js
│   │   │   │   ├── 📄 okonomiskUgebrev.js
│   │   │   │   ├── 📄 politiken.js
│   │   │   │   └── 📄 verdane.js
│   │   │   └── 📄 index.js
│   │   ├── 📄 constants.js
│   │   ├── 📄 contentScraper.js
│   │   ├── 📄 dynamicExtractor.js
│   │   ├── 📄 headlineScraper.js
│   │   ├── 📄 index.js
│   │   ├── 📄 newsApiScraper.js
│   │   ├── 📄 orchestrator.js
│   │   ├── 📄 selectorOptimizer.js
│   │   └── 📄 test-helpers.js
│   ├── 📄 browser.js
│   ├── 📄 config.js
│   ├── 📄 core.js
│   ├── 📄 index.js
│   ├── 📄 next.js
│   └── 📄 test-orchestrator.js
└── 📄 package.json
```

# 📋 PROJECT METADATA

**Generated**: 2025-09-29T13:20:36.414Z
**Repository Path**: /home/mark/Repos/projects/headlines/packages/scraper-logic
**Total Files**: 27
**Package**: @headlines/scraper-logic@1.0.0




---


## 📄 package.json
*Lines: 41, Size: 1.11 KB*

```json
{
  "name": "@headlines/scraper-logic",
  "version": "1.0.0",
  "main": "src/index.js",
  "type": "module",
  "license": "ISC",
  "exports": {
    ".": "./src/index.js",
    "./node": "./src/index.js",
    "./next": "./src/next.js",
    "./config.js": "./src/config.js",
    "./browser.js": "./src/browser.js",
    "./scraper/index.js": "./src/scraper/index.js",
    "./scraper/selectorOptimizer.js": "./src/scraper/selectorOptimizer.js",
    "./push/client.js": "./src/push/client.js",
    "./ai/index.js": "./src/ai/index.js"
  },
  "dependencies": {
    "@headlines/ai-services": "workspace:*",
    "@headlines/config": "workspace:*",
    "@headlines/models": "workspace:*",
    "@headlines/prompts": "workspace:*",
    "@headlines/utils-shared": "workspace:*",
    "@mozilla/readability": "^0.6.0",
    "axios": "^1.7.2",
    "cheerio": "^1.0.0-rc.12",
    "date-fns": "*",
    "jsdom": "^24.1.1",
    "lodash": "*",
    "newsapi": "^2.4.1",
    "p-limit": "^5.0.0",
    "pusher": "^5.2.0",
    "rss-parser": "^3.13.0",
    "web-push": "^3.6.7",
    "zod": "^3.23.8"
  },
  "peerDependencies": {
    "playwright": "^1.45.1"
  }
}

```

## 📄 src/ai/index.js
*Lines: 136, Size: 5.32 KB*

```javascript
// packages/scraper-logic/src/ai/index.js (version 6.1.0)
import { getConfig } from '../config.js'
import { callLanguageModel } from '../../../ai-services/src/index.js'
import { AIAgent } from './AIAgent.js'
import { assessArticleContent } from './agents/articleAgent.js'
import { articleAssessmentSchema } from './schemas/articleAssessmentSchema.js'
import { preAssessArticle } from './agents/articlePreAssessmentAgent.js'
import { articlePreAssessmentSchema } from './schemas/articlePreAssessmentSchema.js'
import { clusterArticlesIntoEvents } from './agents/clusteringAgent.js'
import { clusterSchema } from './schemas/clusterSchema.js'
import { resolveVagueContact, findContactDetails } from './agents/contactAgent.js'
import { enrichContactSchema } from './schemas/enrichContactSchema.js'
import { findContactSchema } from './schemas/findContactSchema.js'
import {
  generateEmailSubjectLine,
  generatePersonalizedIntro,
} from './agents/emailAgents.js'
import { emailSubjectSchema } from './schemas/emailSubjectSchema.js'
import { emailIntroSchema } from './schemas/emailIntroSchema.js'
import {
  extractEntities,
  entityCanonicalizerAgent as getEntityCanonicalizerAgent,
} from './agents/entityAgent.js'
import { entitySchema } from './schemas/entitySchema.js'
import { canonicalizerSchema } from './schemas/canonicalizerSchema.js'
import { assessHeadlinesInBatches } from './agents/headlineAgent.js'
import { headlineAssessmentSchema } from './schemas/headlineAssessmentSchema.js'
import { judgePipelineOutput } from './agents/judgeAgent.js'
import { judgeSchema } from './schemas/judgeSchema.js'
import { generateOpportunitiesFromEvent } from './agents/opportunityAgent.js'
import { opportunitySchema } from './schemas/opportunitySchema.js'
import { suggestNewSelector } from './agents/selectorRepairAgent.js'
import { selectorRepairSchema } from './schemas/selectorRepairSchema.js'
import { synthesizeEvent, synthesizeFromHeadline } from './agents/synthesisAgent.js'
import { synthesisSchema } from './schemas/synthesisSchema.js'
import { generateWatchlistSuggestions } from './agents/watchlistAgent.js'
import { watchlistSuggestionSchema } from './schemas/watchlistSuggestionSchema.js'
import { disambiguationSchema } from './schemas/disambiguationSchema.js'
import { batchAssessArticles } from './agents/batchArticleAgent.js'
import { batchArticleAssessmentSchema } from './schemas/batchArticleAssessmentSchema.js'
import { classifyLinks as sectionClassifierAgent } from './agents/sectionClassifierAgent.js'
import { generateExecutiveSummary } from './agents/executiveSummaryAgent.js'

let isApiKeyInvalid = false
export async function performAiSanityCheck() {
  try {
    getConfig().logger.info('🔬 Performing AI service sanity check (OpenAI)...')
    const answer = await callLanguageModel({
      modelName: 'gpt-3.5-turbo', // Use a standard, widely available model for the check
      prompt: 'What is in one word the name of the capital of France',
      isJson: false,
    })
    if (
      answer &&
      typeof answer === 'string' &&
      answer.trim().toLowerCase().includes('paris')
    ) {
      getConfig().logger.info('✅ AI service sanity check passed.')
      return true
    } else {
      getConfig().logger.fatal(
        { details: { expected: 'paris', received: answer } },
        `OpenAI sanity check failed.`
      )
      return false
    }
  } catch (error) {
    if (error.status === 401 || error.message?.includes('Incorrect API key')) {
      getConfig().logger.fatal(`OpenAI sanity check failed due to INVALID API KEY (401).`)
    } else {
      getConfig().logger.fatal(
        { err: error },
        'OpenAI sanity check failed with an unexpected API error.'
      )
    }
    isApiKeyInvalid = true
    return false
  }
}
export async function checkModelPermissions(requiredModels) {
  getConfig().logger.info('🔬 Verifying permissions for configured OpenAI models...')
  try {
    // DEFINITIVE FIX: The OpenAI client for checking models is part of the ai-services package, not here.
    // This function is also not strictly necessary for the app to run, so we can simplify.
    // For now, we will assume permissions are correct if the sanity check passes.
    getConfig().logger.warn(
      'Model permission check is currently a no-op, relying on sanity check.'
    )
    return true
  } catch (error) {
    getConfig().logger.fatal({ err: error }, 'Failed to verify model permissions.')
    isApiKeyInvalid = true
    return false
  }
}
export {
  AIAgent,
  callLanguageModel,
  assessArticleContent,
  articleAssessmentSchema,
  preAssessArticle,
  articlePreAssessmentSchema,
  clusterArticlesIntoEvents,
  clusterSchema,
  resolveVagueContact,
  findContactDetails,
  enrichContactSchema,
  findContactSchema,
  generateEmailSubjectLine,
  generatePersonalizedIntro,
  emailSubjectSchema,
  emailIntroSchema,
  extractEntities,
  getEntityCanonicalizerAgent as entityCanonicalizerAgent,
  entitySchema,
  canonicalizerSchema,
  assessHeadlinesInBatches,
  headlineAssessmentSchema,
  judgePipelineOutput,
  judgeSchema,
  generateOpportunitiesFromEvent,
  opportunitySchema,
  suggestNewSelector,
  selectorRepairSchema,
  synthesizeEvent,
  synthesizeFromHeadline,
  synthesisSchema,
  generateWatchlistSuggestions,
  watchlistSuggestionSchema,
  disambiguationSchema,
  batchAssessArticles,
  batchArticleAssessmentSchema,
  sectionClassifierAgent,
  generateExecutiveSummary,
}

```

## 📄 src/browser.js
*Lines: 208, Size: 6.38 KB*

```javascript
// packages/scraper-logic/src/browser.js (version 4.1.0)
import playwright from 'playwright'
import fs from 'fs/promises'
import path from 'path'
import { getConfig } from './config.js'

const BROWSER_HEADERS = {
  Accept:
    'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
  'Accept-Encoding': 'gzip, deflate, br',
  'Accept-Language': 'en-US,en;q=0.9,nl-NL;q=0.8,nl;q=0.7',
  'User-Agent':
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
}

const CONSENT_SELECTORS = [
  'button:has-text("Accepteer alles")',
  'button:has-text("Alles accepteren")',
  'button:has-text("Toestemming geven")',
  'button:has-text("Akkoord")',
  'button:has-text("Accept all")',
  'button:has-text("Accept All")',
  'button:has-text("I accept")',
  'button:has-text("Accept")',
  'button:has-text("Godkend alle")',
  'button:has-text("Tillad alle")',
]

async function ensureDebugDirectory() {
  const config = getConfig()
  const debugDir = config.paths?.debugHtmlDir
  if (!debugDir) {
    getConfig().logger.warn('Debug HTML directory not configured. Saving disabled.')
    return null
  }
  try {
    await fs.mkdir(debugDir, { recursive: true })
    return debugDir
  } catch (error) {
    getConfig().logger.warn('Failed to create debug directory: ' + error.message)
    return null
  }
}

async function saveDebugHtml(page, caller, prefix, url) {
  const debugDir = await ensureDebugDirectory()
  if (!debugDir) return null
  try {
    const html = await page.content()
    const urlPart = new URL(url).hostname.replace(/[^a-z0-9]/gi, '_')
    const filename = prefix + '_' + caller + '_' + urlPart + '.html'
    const filePath = path.join(debugDir, filename)
    await fs.writeFile(filePath, html)
    getConfig().logger.warn('[Playwright:' + caller + '] Saved debug HTML to ' + filePath)
    return filePath
  } catch (error) {
    getConfig().logger.error(
      '[Playwright:' + caller + '] Failed to save debug HTML: ' + error.message
    )
    return null
  }
}

async function handleConsent(page, caller) {
  for (const selector of CONSENT_SELECTORS) {
    try {
      const button = page.locator(selector).first()
      if (await button.isVisible({ timeout: 1500 })) {
        await button.click({ timeout: 2000 })
        getConfig().logger.info(
          '[Playwright:' +
            caller +
            '] Clicked consent button with selector: "' +
            selector +
            '"'
        )
        await page.waitForTimeout(1500)
        return true
      }
    } catch (e) {
      // Selector not found, continue
    }
  }
  getConfig().logger.trace(
    '[Playwright:' + caller + '] No actionable consent modal found.'
  )
  return false
}

export async function fetchPageWithPlaywright(url, caller = 'Unknown', options = {}) {
  const { timeout = 60000, waitForSelector } = options

  let browser = null
  let page = null
  try {
    getConfig().logger.trace(
      '[Playwright:' +
        caller +
        '] Launching browser for: ' +
        url +
        ' (Timeout: ' +
        timeout +
        'ms)'
    )
    browser = await playwright.chromium.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage'],
    })
    const context = await browser.newContext({
      userAgent: BROWSER_HEADERS['User-Agent'],
      extraHTTPHeaders: BROWSER_HEADERS,
      viewport: { width: 1920, height: 1080 },
    })
    page = await context.newPage()

    await page.goto(url, { waitUntil: 'domcontentloaded', timeout })

    await handleConsent(page, caller)

    if (waitForSelector) {
      getConfig().logger.info(
        '[Playwright:' + caller + '] Waiting for selector "' + waitForSelector + '"...'
      )
      await page.waitForSelector(waitForSelector, { timeout: timeout - 5000 })
      getConfig().logger.info(
        '[Playwright:' + caller + '] Selector found. Page is ready.'
      )
    } else {
      await page
        .waitForLoadState('networkidle', { timeout: 5000 })
        .catch(() =>
          getConfig().logger.trace(
            '[Playwright:' + caller + '] Network idle timeout reached, proceeding anyway.'
          )
        )
    }

    return await page.content()
  } catch (error) {
    // ENHANCED ERROR LOGGING: Provide more specific reasons for failures.
    let reason = error.message.split('\n')[0]
    if (error.message.includes('net::ERR')) {
      reason = `Network Error: ${reason}`
    } else if (error.name === 'TimeoutError') {
      reason = `Timeout after ${timeout / 1000}s. The page may be too slow or blocked.`
    } else if (page) {
      const pageContent = await page.content()
      if (pageContent.includes('captcha') || pageContent.includes('challenge-platform')) {
        reason = 'Potential CAPTCHA or bot detection wall encountered.'
      }
    }

    getConfig().logger.error(
      '[Playwright:' +
        caller +
        '] Critical failure during fetch for ' +
        url +
        ': ' +
        reason
    )
    if (page) {
      await saveDebugHtml(page, caller, 'CRITICAL_FAIL', url)
    }
    return null
  } finally {
    if (browser) {
      await browser.close()
      getConfig().logger.trace('[Playwright:' + caller + '] Browser closed for: ' + url)
    }
  }
}

export async function fetchPageContentFromPopup(pageUrl, buttonSelector) {
  let browser = null
  try {
    browser = await playwright.chromium.launch({ headless: true })
    const context = await browser.newContext({ userAgent: BROWSER_HEADERS['User-Agent'] })
    const page = await context.newPage()
    await page.goto(pageUrl, { waitUntil: 'networkidle' })
    await handleConsent(page, 'PopupFetcher')

    await page.waitForSelector(buttonSelector, { timeout: 10000 })
    const button = page.locator(buttonSelector).first()
    await button.click()

    // Wait for the popup overlay to become visible
    await page.waitForSelector('.popup-overlay--opened', {
      state: 'visible',
      timeout: 5000,
    })

    // Extract the HTML of the now-visible popup
    const popupElement = await page.locator('.popup__box')
    const popupHtml = await popupElement.innerHTML()
    return popupHtml
  } catch (error) {
    getConfig().logger.error(
      { err: error, url: pageUrl, selector: buttonSelector },
      'Failed to fetch content from popup.'
    )
    return null
  } finally {
    if (browser) {
      await browser.close()
    }
  }
}

```

## 📄 src/config.js
*Lines: 23, Size: 567 Bytes*

```javascript
// packages/scraper-logic/src/config.js (version 1.0.0)
// This module holds the shared configuration for the scraper logic,
// which will be injected by the consuming application (pipeline or admin).

let _config = {
  // A simple console logger as a fallback.
  logger: console,
  paths: {
    debugHtmlDir: null,
  },
  configStore: null,
  utilityFunctions: null,
};

export function configure(appConfig) {
  // Merge the provided app config with the existing config.
  _config = { ..._config, ...appConfig };
}

export function getConfig() {
  return _config;
}

```

## 📄 src/core.js
*Lines: 11, Size: 514 Bytes*

```javascript
// This file serves as the core, shared module for the scraper-logic package.
// It is environment-agnostic. Environment-specific entry points (next.js, node.js)
// will re-export from this file and add any necessary guards.

// Currently, all exports are handled via subpaths (e.g., /browser, /scraper/index.js).
// If you add a function that should be available from the root of the package,
// export it from here.

// Example of a future export:
// export { someSharedScraperUtil } from './some-util-file.js';

```

## 📄 src/index.js
*Lines: 3, Size: 76 Bytes*

```javascript
// This is the default, Node.js-safe entry point.
export * from './core.js'

```

## 📄 src/next.js
*Lines: 9, Size: 384 Bytes*

```javascript
import 'server-only'

// Explicitly re-export everything from the core module
// Since this package's index doesn't export much, we list them here.
// Note: The main value is guarding the side-effects of importing its dependencies.
// If core.js exports functions, they would be listed here.
// For now, it might be empty if core.js is empty, which is fine.
export * from './core.js'

```

## 📄 src/push/client.js
*Lines: 26, Size: 940 Bytes*

```javascript
// packages/scraper-logic/src/push/client.js (version 2.0.0)
import webpush from 'web-push'
import { getConfig } from '../config.js';
import { env } from '../../../config/src/index.js'

let isPushConfigured = false

function configurePush() {
    if (isPushConfigured) return;

    const { VAPID_SUBJECT, VAPID_PUBLIC_KEY, VAPID_PRIVATE_KEY } = env
    if (VAPID_PUBLIC_KEY && VAPID_PRIVATE_KEY && VAPID_SUBJECT) {
      try {
        webpush.setVapidDetails(VAPID_SUBJECT, VAPID_PUBLIC_KEY, VAPID_PRIVATE_KEY)
        isPushConfigured = true
        getConfig().logger.info('✅ Centralized push notification service (VAPID) configured.')
      } catch (error) {
        getConfig().logger.error({ err: error }, '❌ Failed to configure VAPID details.')
      }
    } else {
      getConfig().logger.warn('VAPID keys not fully configured. Push notifications will be disabled.')
    }
}

export { webpush, isPushConfigured, configurePush }

```

## 📄 src/scraper/constants.js
*Lines: 10, Size: 454 Bytes*

```javascript
// src/modules/scraper/constants.js (version 1.0)
export const BROWSER_HEADERS = {
  Accept:
    'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
  'Accept-Encoding': 'gzip, deflate, br',
  'Accept-Language': 'en-US,en;q=0.9',
  'User-Agent':
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36',
}

```

## 📄 src/scraper/contentScraper.js
*Lines: 102, Size: 3.52 KB*

```javascript
// packages/scraper-logic/src/scraper/contentScraper.js (version 4.5.0)
import * as cheerio from 'cheerio'
import fs from 'fs/promises'
import path from 'path'
import { JSDOM, VirtualConsole } from 'jsdom'
import { Readability } from '@mozilla/readability'

import { getConfig } from '../config.js'
import { fetchPageWithPlaywright } from '../browser.js'
import { contentExtractorRegistry } from './extractors/index.js'

async function saveDebugHtml(filename, html) {
  const config = getConfig()
  const debugDir = config.paths?.debugHtmlDir
  if (!debugDir) return null
  try {
    await fs.mkdir(debugDir, { recursive: true })
    const filePath = path.join(debugDir, filename)
    await fs.writeFile(filePath, html)
    return filePath
  } catch (error) {
    getConfig().logger.error({ err: error, file: filename }, 'Failed to save debug HTML.')
    return null
  }
}

function extractWithReadability(url, html) {
  try {
    const virtualConsole = new VirtualConsole();
    virtualConsole.on('cssParseError', () => {}); 

    const doc = new JSDOM(html, { url, virtualConsole });
    const reader = new Readability(doc.window.document);
    const article = reader.parse();
    return article?.textContent || null;
  } catch (e) {
    getConfig().logger.warn({ err: e, url }, 'Readability.js failed to parse article.');
    return null;
  }
}

export async function scrapeArticleContent(article, source) {
  if (source.extractionMethod === 'custom' && contentExtractorRegistry[source.extractorKey]) {
    const customContentExtractor = contentExtractorRegistry[source.extractorKey];
    return await customContentExtractor(article, source);
  }

  if (article.rssContent && article.rssContent.length >= getConfig().settings.MIN_ARTICLE_CHARS) {
    article.articleContent = { contents: [article.rssContent] }
    return article
  }

  const html = await fetchPageWithPlaywright(article.link, 'ContentScraper')
  if (!html) {
    return { ...article, enrichment_error: 'Playwright failed to fetch page HTML' }
  }

  let contentText = extractWithReadability(article.link, html)
  let extractionMethod = 'Readability.js'

  if (!contentText || contentText.length < getConfig().settings.MIN_ARTICLE_CHARS) {
    const $ = cheerio.load(html)
    const selectors = Array.isArray(source.articleSelector)
      ? source.articleSelector
      : [source.articleSelector].filter(Boolean)
    if (selectors.length > 0) {
      const contentParts = []
      for (const selector of selectors) {
        const extractedText = $(selector).text().replace(/\s+/g, ' ').trim()
        if (extractedText) contentParts.push(extractedText)
      }
      if (contentParts.length > 0) {
        contentText = contentParts.join('\n\n')
        extractionMethod = 'Cheerio Selector'
      }
    }
  }

  if (contentText && contentText.length >= getConfig().settings.MIN_ARTICLE_CHARS) {
    article.articleContent = { contents: [contentText] }
    getConfig().logger.trace(
      {
        article: {
          headline: article.headline,
          chars: contentText.length,
          method: extractionMethod,
        },
      },
      `✅ Content enrichment successful.`
    )
  } else {
    const reason = !contentText
      ? `All extraction methods failed.`
      : `Content too short (` + (contentText ? contentText.length : 0) + ` chars).`
    article.enrichment_error = reason
    article.contentPreview = contentText ? contentText.substring(0, 100) : ''
    const filename = source.name.replace(/[^a-z0-9]/gi, '_').toLowerCase() + '_content_fail.html'
    await saveDebugHtml(filename, html)
  }
  return article
}

```

## 📄 src/scraper/dynamicExtractor.js
*Lines: 51, Size: 1.83 KB*

```javascript
// packages/scraper-logic/src/scraper/dynamicExtractor.js (version 2.0.1)
import { getConfig } from '../config.js';

/**
 * A generic, data-driven extractor that uses declarative fields from a Source document
 * to extract headline and link information from a Cheerio element.
 * @param {import('cheerio').CheerioAPI} $ - The Cheerio instance.
 * @param {import('cheerio').Element} el - The current DOM element matching the headlineSelector.
 * @param {object} source - The full Source document from the database.
 * @returns {{headline: string, link: string}|null} The extracted article data or null if invalid.
 */
export function dynamicExtractor($, el, source) {
  try {
    const mainElement = $(el)

    // 1. Find the link element and extract the href.
    // If linkSelector is null, the mainElement itself is the link.
    const linkElement = source.linkSelector
      ? mainElement.find(source.linkSelector).first()
      : mainElement
    const link = linkElement.attr('href')

    if (!link) {
      return null // A link is mandatory
    }

    // 2. Find the headline text element and extract the text.
    // If headlineTextSelector is null, the mainElement contains the text.
    const textElement = source.headlineTextSelector
      ? mainElement.find(source.headlineTextSelector).first()
      : mainElement

    // 3. Extract the text and clean it by removing any nested HTML tags.
    let headline = textElement.text().trim().replace(/\s+/g, ' ')

    if (!headline) {
      return null // A headline is mandatory
    }

    // 4. Apply the headline template if it exists
    if (source.headlineTemplate) {
      headline = source.headlineTemplate.replace('{{TEXT}}', headline)
    }

    return { headline, link }
  } catch (error) {
    getConfig().logger.error({ err: error, source: source.name }, 'Error during dynamic extraction.')
    return null
  }
}

```

## 📄 src/scraper/extractors/index.js
*Lines: 45, Size: 1.66 KB*

```javascript
// packages/scraper-logic/src/scraper/extractors/index.js (version 2.0.0)
// This file uses static imports to be compatible with both Node.js (pipeline) and Webpack (Next.js apps).

// Reusable Extractors
import { simpleExtractor } from './reusable/simple.js';

// Source-Specific Headline Extractors
import { cvcPortfolioExtractor } from './source-specific/cvcPortfolio.js';
import { finansDkExtractor } from './source-specific/finansDk.js';
import { jyllandsPostenExtractor } from './source-specific/jyllandsPosten.js';
import { okonomiskUgebrevExtractor } from './source-specific/okonomiskUgebrev.js';
import { politikenExtractor } from './source-specific/politiken.js';
import { verdaneExtractor } from './source-specific/verdane.js';

// Source-Specific Content Extractors
import { cvcPortfolioContentExtractor } from './source-specific/cvcPortfolioContent.js';

// --- Build Registries ---

export const extractorRegistry = {
  // Reusable
  simple: simpleExtractor,

  // Source-specific
  cvc_portfolio: cvcPortfolioExtractor,
  finans_dk: finansDkExtractor,
  jyllands_posten: jyllandsPostenExtractor,
  okonomisk_ugebrev: okonomiskUgebrevExtractor,
  politiken: politikenExtractor,
  verdane: verdaneExtractor,

  // Manual mapping for legacy keys
  gro_capital: simpleExtractor,
  eifo_dk: simpleExtractor,
  clearwater_dk: simpleExtractor,
  e24: simpleExtractor,
  quotenet_nl: simpleExtractor,
};

export const contentExtractorRegistry = {
  cvc_portfolio_content: cvcPortfolioContentExtractor,
};

console.log(`[Extractor Registry] Statically loaded ${Object.keys(extractorRegistry).length} headline extractors and ${Object.keys(contentExtractorRegistry).length} content extractors.`);

```

## 📄 src/scraper/extractors/reusable/simple.js
*Lines: 11, Size: 374 Bytes*

```javascript
// packages/scraper-logic/src/scraper/extractors/reusable/simple.js (version 1.0.0)
export const simpleExtractor = ($, el, site) => {
  const element = $(el);
  const headline = element.text().trim().replace(/\s+/g, ' ')
  const link = element.attr('href')
  if (headline && link) {
    return { headline, link, source: site.name, newspaper: site.name }
  }
  return null
}

```

## 📄 src/scraper/extractors/source-specific/cvcPortfolio.js
*Lines: 22, Size: 734 Bytes*

```javascript
// packages/scraper-logic/src/scraper/extractors/source-specific/cvcPortfolio.js (version 1.0.0)
export const cvcPortfolioExtractor = ($, el, site) => {
  const element = $(el);
  if (element.hasClass('portfolio__card-holder--spotlight')) {
    return null;
  }
  const headingElement = element.find('h2.portfolio__card-heading');
  const companyName = headingElement.text().trim();
  const button = element.find('button.js-portfolio-card');
  
  if (companyName && button.length) {
    return { 
        headline: 'CVC Portfolio Company: ' + companyName, 
        link: site.sectionUrl, 
        source: site.name, 
        newspaper: site.name,
        customData: { dataKey: button.attr('data-key') } 
    };
  }
  return null;
};

```

## 📄 src/scraper/extractors/source-specific/cvcPortfolioContent.js
*Lines: 30, Size: 1.17 KB*

```javascript
// packages/scraper-logic/src/scraper/extractors/source-specific/cvcPortfolioContent.js (version 1.0.0)
import { fetchPageContentFromPopup } from '../../../browser.js';
import { getConfig } from '../../../config.js';
import * as cheerio from 'cheerio';

export const cvcPortfolioContentExtractor = async (article, source) => {
    if (!article.customData?.dataKey) {
        return { ...article, enrichment_error: 'Missing data-key for popup interaction.' };
    }

    const buttonSelector = 'button[data-key="' + article.customData.dataKey + '"]';
    const popupHtml = await fetchPageContentFromPopup(source.sectionUrl, buttonSelector);

    if (!popupHtml) {
        return { ...article, enrichment_error: 'Failed to fetch popup HTML for content.' };
    }

    const $ = cheerio.load(popupHtml);
    const content = $('.rte').text().trim().replace(/\s+/g, ' ');

    if (content) {
        article.articleContent = { contents: [content] };
        getConfig().logger.trace({ article: { headline: article.headline } }, '✅ CVC custom content extraction successful.');
    } else {
        article.enrichment_error = 'Could not find content in the CVC popup.';
    }

    return article;
}

```

## 📄 src/scraper/extractors/source-specific/finansDk.js
*Lines: 8, Size: 268 Bytes*

```javascript
// packages/scraper-logic/src/scraper/extractors/source-specific/finansDk.js (version 1.0.0)
export const finansDkExtractor = ($, el, site) => ({
  headline: $(el).text().trim(),
  link: $(el).closest('a').attr('href'),
  source: site.name,
  newspaper: site.name,
})

```

## 📄 src/scraper/extractors/source-specific/jyllandsPosten.js
*Lines: 11, Size: 397 Bytes*

```javascript
// packages/scraper-logic/src/scraper/extractors/source-specific/jyllandsPosten.js (version 1.0.0)
export const jyllandsPostenExtractor = ($, el, site) => {
  const element = $(el);
  const headline = element.find('h3').text().trim()
  const link = element.find('a').attr('href')
  if (headline && link) {
    return { headline, link, source: site.name, newspaper: site.name }
  }
  return null
}

```

## 📄 src/scraper/extractors/source-specific/okonomiskUgebrev.js
*Lines: 12, Size: 444 Bytes*

```javascript
// packages/scraper-logic/src/scraper/extractors/source-specific/okonomiskUgebrev.js (version 1.0.0)
export const okonomiskUgebrevExtractor = ($, el, site) => {
  const element = $(el);
  const headline = element.find('h5.elementor-heading-title').text().trim().replace(/\s+/g, ' ');
  const link = element.attr('href');
  
  if (headline && link) {
    return { headline, link, source: site.name, newspaper: site.name };
  }
  return null;
};

```

## 📄 src/scraper/extractors/source-specific/politiken.js
*Lines: 8, Size: 391 Bytes*

```javascript
// packages/scraper-logic/src/scraper/extractors/source-specific/politiken.js (version 1.0.0)
export const politikenExtractor = ($, el, site) => {
  const element = $(el);
  const h = element.find('h2, h3, h4').first().text().trim()
  const a = element.find('a[href*="/art"]').first().attr('href')
  return h && a ? { headline: h, link: a, source: site.name, newspaper: site.name } : null
}

```

## 📄 src/scraper/extractors/source-specific/verdane.js
*Lines: 16, Size: 516 Bytes*

```javascript
// packages/scraper-logic/src/scraper/extractors/source-specific/verdane.js (version 1.0.0)
export const verdaneExtractor = ($, el, site) => {
  const element = $(el);
  const linkEl = element.find('a.wp-block-klingit-the-product-block-link')
  const companyName = linkEl.find('h3.wp-block-post-title').text().trim()
  if (companyName) {
    return {
      headline: 'Verdane invests in ' + companyName,
      link: linkEl.attr('href'),
      source: site.name,
      newspaper: site.name,
    }
  }
  return null
}

```

## 📄 src/scraper/headlineScraper.js
*Lines: 158, Size: 6.15 KB*

```javascript
// packages/scraper-logic/src/scraper/headlineScraper.js (version 5.2.0)
import * as cheerio from 'cheerio'
import axios from 'axios'
import fs from 'fs/promises'
import path from 'path'
import Parser from 'rss-parser'
import { Source } from '../../../models/src/index.js'
import { BROWSER_HEADERS } from './constants.js'
import { fetchPageWithPlaywright } from '../browser.js'
import { getConfig } from '../config.js'
import { extractorRegistry } from './extractors/index.js'
import { dynamicExtractor } from './dynamicExtractor.js'

const rssParser = new Parser({
  customFields: {
    item: [['content:encoded', 'contentEncoded']],
  },
})

async function saveDebugHtml(filename, html) {
  const config = getConfig();
  const DEBUG_HTML_DIR = config.paths?.debugHtmlDir;
  if (!DEBUG_HTML_DIR) return;
  try {
    await fs.mkdir(DEBUG_HTML_DIR, { recursive: true })
    const filePath = path.join(DEBUG_HTML_DIR, filename)
    await fs.writeFile(filePath, html)
  } catch (error) {
    getConfig().logger.error({ err: error, file: filename }, 'Failed to save debug HTML.')
  }
}

async function fetchHeadlinesViaRss(source) {
  try {
    const feed = await rssParser.parseURL(source.rssUrl);
    if (!feed.items || feed.items.length === 0) {
      throw new Error('RSS feed was empty or invalid.');
    }
    const articles = feed.items
      .map((item) => {
        const rssContentHtml = item.contentEncoded || item.contentSnippet || item.content || '';
        const rssContent = cheerio.load(rssContentHtml).text().replace(/\s+/g, ' ').trim();
        return { headline: item.title?.trim(), link: item.link, rssContent: rssContent || null };
      })
      .filter((item) => item.headline && item.link);
    return { articles, error: null };
  } catch (error) {
    const failureReason = error.message || 'Unknown RSS error.';
    getConfig().logger.warn({ url: source.rssUrl, reason: failureReason }, `[RSS] Feed parsing failed for "${source.name}". Auto-disabling.`);
    
    try {
      await Source.updateOne(
        { _id: source._id },
        { 
          $set: { 
            rssUrl: null,
            notes: `${source.notes || ''}\n[${new Date().toISOString()}] RSS URL disabled due to error: ${failureReason}`.trim(),
          } 
        }
      );
    } catch (dbError) {
      getConfig().logger.error({ err: dbError }, 'Failed to auto-disable RSS URL in database.');
    }
    return { articles: [], error: failureReason };
  }
}

async function fetchPageStatic(url) {
  try {
    const { data } = await axios.get(url, { headers: BROWSER_HEADERS, timeout: 25000 })
    return { html: data, error: null }
  } catch (error) {
    getConfig().logger.warn({ url, err: { message: error.message } }, `[Axios] Static fetch failed`)
    return { html: null, error: error.message }
  }
}

async function fetchWithPlaywrightWrapped(source) {
  const html = await fetchPageWithPlaywright(source.sectionUrl, 'HeadlineScraper', {
    timeout: source.playwrightTimeoutMs,
    waitForSelector: source.waitForSelector,
  })
  if (html) {
    return { html, error: null }
  }
  return {
    html: null,
    error: `Playwright failed to fetch content from ${source.sectionUrl}`,
  }
}

export async function scrapeSiteForHeadlines(source) {
  if (source.rssUrl) {
    getConfig().logger.info(`[Scraping] Attempting RSS scrape for "${source.name}"...`);
    const rssResult = await fetchHeadlinesViaRss(source);
    if (rssResult.articles.length > 0) {
      return { articles: rssResult.articles, success: true, resultCount: rssResult.articles.length, error: null };
    }
    getConfig().logger.warn(`RSS scrape failed for "${source.name}". Falling back to HTML scraping.`);
  }

  const fetcher = source.isStatic ? () => fetchPageStatic(source.sectionUrl) : () => fetchWithPlaywrightWrapped(source);
  const fetcherName = source.isStatic ? 'STATIC (fast)' : 'PLAYWRIGHT (full-browser)';
  getConfig().logger.info(`[Scraping] Initiating HTML scrape for "${source.name}" using ${fetcherName}...`);

  const { html, error } = await fetcher();
  if (!html) return { articles: [], success: false, error, debugHtml: null };

  const $ = cheerio.load(html);
  const articles = [];
  
  if (source.extractionMethod === 'json-ld') {
      $('script[type="application/ld+json"]').each((_, el) => {
        try {
          const jsonData = JSON.parse($(el).html())
          const potentialLists = [jsonData, ...(jsonData['@graph'] || [])]
          potentialLists.forEach((list) => {
            const items = list?.itemListElement
            if (items && Array.isArray(items)) {
              items.forEach((item) => {
                const headline = item.name || item.item?.name
                const url = item.url || item.item?.url
                if (headline && url) {
                  articles.push({ headline: headline.trim(), link: new URL(url, source.baseUrl).href });
                }
              })
            }
          })
        } catch (e) { /* Ignore parsing errors */ }
      })
  } else { // 'declarative' or 'custom'
      const selectors = Array.isArray(source.headlineSelector) ? source.headlineSelector : [source.headlineSelector].filter(Boolean);
      const extractorFn = source.extractionMethod === 'custom' ? extractorRegistry[source.extractorKey] : dynamicExtractor;
      if (!extractorFn) {
          return { articles: [], success: false, error: `No valid extractor for method: ${source.extractionMethod}` };
      }
      for (const selector of selectors) {
        $(selector).each((_, el) => {
            const articleData = extractorFn($, el, source);
            if (articleData?.headline && articleData?.link) {
                articleData.link = new URL(articleData.link, source.baseUrl).href;
                articles.push(articleData);
            }
        });
      }
  }

  const uniqueArticles = Array.from(new Map(articles.map((a) => [a.link, a])).values());

  if (uniqueArticles.length === 0) {
    const filename = `${source.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_headline_fail.html`;
    await saveDebugHtml(filename, html);
    return { articles: [], success: false, error: 'Extracted 0 headlines.', debugHtml: html };
  }

  return { articles: uniqueArticles, success: true, resultCount: uniqueArticles.length, error: null };
}

```

## 📄 src/scraper/index.js
*Lines: 12, Size: 395 Bytes*

```javascript
// packages/scraper-logic/src/scraper/index.js (Corrected Exports)
import { scrapeSiteForHeadlines } from './headlineScraper.js'
import { scrapeArticleContent } from './contentScraper.js'
import { testHeadlineExtraction, scrapeArticleContentForTest } from './test-helpers.js'

export {
  scrapeSiteForHeadlines,
  scrapeArticleContent,
  testHeadlineExtraction,
  scrapeArticleContentForTest,
}

```

## 📄 src/scraper/newsApiScraper.js
*Lines: 133, Size: 4.06 KB*

```javascript
// packages/scraper-logic/src/scraper/newsApiScraper.js (version 2.3.0)
import NewsAPI from 'newsapi'
import { getConfig } from '../config.js';
import { Source, WatchlistEntity } from '../../../models/src/index.js'
import { env } from '../../../config/src/index.js'
import colors from 'ansi-colors';

async function getWatchlist() {
  const [sources, richListTargets] = await Promise.all([
    Source.find({
      status: 'active',
      country: { $in: ['Denmark', 'Global PE', 'M&A Aggregators'] },
    })
      .select('name')
      .lean(),
    WatchlistEntity.find({ status: 'active' }).select('name').lean(),
  ])

  const sourceNames = sources.map((s) => s.name.split('(')[0].trim())
  const richListNames = richListTargets.map((t) => t.name.split('(')[0].trim())
  const watchlist = [...new Set([...sourceNames, ...richListNames])]
  getConfig().logger.trace({ details: watchlist }, 'Full NewsAPI watchlist keywords.')
  return watchlist
}

function buildQueryBatches(watchlist) {
  const MAX_QUERY_LENGTH = 490
  const queries = []
  let currentBatch = []

  for (const keyword of watchlist) {
    const sanitizedKeyword = keyword.replace(/&/g, ' ').replace(/[()]/g, '').trim()
    if (!sanitizedKeyword) continue
    const quotedKeyword = `"${sanitizedKeyword}"`
    const potentialQuery = [...currentBatch, quotedKeyword].join(' OR ')
    if (potentialQuery.length > MAX_QUERY_LENGTH) {
      if (currentBatch.length > 0) {
        queries.push(currentBatch.join(' OR '))
      }
      currentBatch = [quotedKeyword]
    } else {
      currentBatch.push(quotedKeyword)
    }
  }

  if (currentBatch.length > 0) {
    queries.push(currentBatch.join(' OR '))
  }

  const queriesToUse = queries.slice(0, 4);

  if (queries.length > 4) {
    getConfig().logger.warn(
      `[NewsAPI] Watchlist generated ${queries.length} queries, but will only use the first 4 to avoid rate limits.`
    );
    let logMessage = '[NewsAPI] Generated Queries:\n';
    queries.forEach((q, i) => {
        const inUse = i < 4;
        logMessage += inUse ? colors.green(`  [IN USE] Query ${i+1}: ${q}\n`) : colors.gray(`  [SKIPPED] Query ${i+1}: ${q}\n`);
    });
    getConfig().logger.info(logMessage);
  }

  return queriesToUse;
}

export async function scrapeNewsAPI() {
  const newsapi = new NewsAPI(env.NEWSAPI_API_KEY)
  try {
    const watchlist = await getWatchlist()
    const queryBatches = buildQueryBatches(watchlist)

    getConfig().logger.info(
      `📰 [NewsAPI] Dispatching ${queryBatches.length} batched queries to cover the watchlist.`
    )

    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()

    const allPromises = queryBatches.map((query) =>
      newsapi.v2.everything({
        q: query,
        language: 'en,da,sv,no',
        sortBy: 'publishedAt',
        from: twentyFourHoursAgo,
        pageSize: 100,
      })
    )

    const allResponses = await Promise.all(allPromises)
    let allArticles = []

    for (const response of allResponses) {
      if (response.status !== 'ok') {
        getConfig().logger.error(
          `[NewsAPI] Error in a batch query: ${response.code} - ${response.message}`
        )
        continue
      }
      allArticles.push(...response.articles)
    }

    if (allArticles.length === 0) {
      getConfig().logger.info('[NewsAPI] Found no new articles matching the watchlist.')
      return []
    }

    getConfig().logger.info(
      `[NewsAPI] Found a total of ${allArticles.length} potential articles across all batches.`
    )

    const articles = allArticles.map((a) => ({
      headline: a.title,
      link: a.url,
      source: a.source.name,
      newspaper: a.source.name,
    }))

    return Array.from(new Map(articles.map((a) => [a.link, a])).values())
  } catch (error) {
    if (error.name?.includes('rateLimited')) {
      getConfig().logger.warn(
        '[NewsAPI] Rate limit hit, as expected on developer plan. Some watchlist items may have been missed.'
      )
    } else {
      getConfig().logger.error(
        { err: error },
        '[NewsAPI] A critical error occurred during batched scraping.'
      )
    }
    return []
  }
}

```

## 📄 src/scraper/orchestrator.js
*Lines: 105, Size: 3.46 KB*

```javascript
// packages/scraper-logic/src/scraper/orchestrator.js (version 5.0.0)
import pLimit from 'p-limit'
import { sleep } from '@shared/utils-shared'
import { getConfig } from '../config.js'
import { scrapeSiteForHeadlines } from './headlineScraper.js'
// NEWSAPI REWORK: The direct import of scrapeNewsAPI is removed as it's no longer used for proactive scraping.
// import { scrapeNewsAPI } from './newsApiScraper.js'
import { updateSourceAnalyticsBatch } from '../../../data-access/src/index.js'
import { env } from '../../../config/src/index.js'

async function performStandardScraping(sourcesToScrape) {
  if (sourcesToScrape.length === 0) {
    return { scrapedArticles: [], scraperHealth: [] }
  }

  const limit = pLimit(env.CONCURRENCY_LIMIT || 3)
  getConfig().logger.info(
    `Pipeline will now scrape ${sourcesToScrape.length} active standard sources.`
  )

  let allArticles = []
  const scraperHealthMap = new Map()

  const promises = sourcesToScrape.map((source) =>
    limit(async () => {
      getConfig().logger.info(`[Scraping] -> Starting scrape for "${source.name}"...`)
      const result = await scrapeSiteForHeadlines(source)
      const foundCount = result.resultCount !== undefined ? result.resultCount : 0
      getConfig().logger.info(
        `[Scraping] <- Finished scrape for "${source.name}". Success: ${result.success}, Found: ${foundCount}`
      )
      return { source, result }
    })
  )
  const results = await Promise.all(promises)

  const bulkUpdateOps = []

  for (const { source, result } of results) {
    const healthReport = {
      source: source.name,
      success: result.success && result.resultCount > 0,
      count: result.resultCount || 0,
      error: result.error,
      debugHtml: result.debugHtml,
      failedSelector: result.success ? null : source.headlineSelector,
    }
    scraperHealthMap.set(source.name, healthReport)

    if (healthReport.success) {
      allArticles.push(
        ...result.articles.map((a) => ({
          ...a,
          source: source.name,
          newspaper: source.name,
          country: source.country,
        }))
      )
      bulkUpdateOps.push({
        updateOne: {
          filter: { _id: source._id },
          update: { $set: { lastScrapedAt: new Date(), lastSuccessAt: new Date() } },
        },
      })
    } else {
      getConfig().logger.warn(
        `[Scraping] ❌ FAILED for "${source.name}": ${result.error || 'Extracted 0 headlines.'}.`
      )
      bulkUpdateOps.push({
        updateOne: {
          filter: { _id: source._id },
          update: { $set: { lastScrapedAt: new Date() } },
        },
      })
    }
  }

  if (bulkUpdateOps.length > 0) {
    await updateSourceAnalyticsBatch(bulkUpdateOps)
  }

  return {
    scrapedArticles: allArticles,
    scraperHealth: Array.from(scraperHealthMap.values()),
  }
}

// NEWSAPI REWORK: The main orchestrator is simplified. It no longer calls scrapeNewsAPI.
// Its sole responsibility is now to manage the standard scraping process. This aligns
// with the new strategy of using external APIs only for enrichment, not discovery.
export async function scrapeAllHeadlines(sourcesToScrape) {
  const { scrapedArticles, scraperHealth } =
    await performStandardScraping(sourcesToScrape)

  const uniqueArticles = Array.from(
    new Map(scrapedArticles.map((a) => [a.link, a])).values()
  )

  getConfig().logger.info(
    `Scraping complete. Found ${uniqueArticles.length} unique articles from standard sources.`
  )

  return { allArticles: uniqueArticles, scraperHealth }
}

```

## 📄 src/scraper/selectorOptimizer.js
*Lines: 98, Size: 3.19 KB*

```javascript
// packages/scraper-logic/src/scraper/selectorOptimizer.js (version 4.2)
import * as cheerio from 'cheerio';

const NEGATIVE_TAGS = ['nav', 'footer', 'aside', 'header', 'form', '.popup-overlay'];

/**
 * Finds clusters of repeated elements by analyzing class name frequency.
 * CRITICALLY, it filters out Tailwind-style classes with colons.
 */
function findRepeatingClassSelectors($) {
    const classCounts = {};
    $('*').each((_, el) => {
        const classes = $(el).attr('class');
        if (classes) {
            classes.trim().split(/\s+/).forEach(cls => {
                // DEFINITIVE FIX: Ignore any class containing a colon to prevent pseudo-class errors.
                if (cls.length > 5 && !cls.includes(':') && !cls.startsWith('js-')) {
                    classCounts[cls] = (classCounts[cls] || 0) + 1;
                }
            });
        }
    });

    return Object.entries(classCounts)
        .filter(([_, count]) => count > 3 && count < 100)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 15) // Widen the search slightly
        .map(([cls]) => `.${cls}`);
}

/**
 * For a given container element, finds the most likely headline text.
 */
function analyzeContainer($container) {
    const headlineEl = $container.find('h1, h2, h3, h4, h5').first();
    let text = headlineEl.text().trim().replace(/\s+/g, ' ');

    if (!text) {
        // Fallback for non-heading elements
        text = $container.text().trim().replace(/\s+/g, ' ');
    }

    // Ensure it's a clickable container
    const isClickable = $container.is('a[href]') || $container.find('a[href]').length > 0 || $container.find('button[data-key]').length > 0;

    if (text && isClickable) {
        return { text };
    }
    return null;
}

export function heuristicallyFindSelectors(html) {
    const $ = cheerio.load(html);
    $(NEGATIVE_TAGS.join(',')).remove();

    const potentialListSelectors = findRepeatingClassSelectors($);
    const clusters = [];

    // Add the CVC-specific selector as a high-priority candidate, as it is a known good pattern.
    potentialListSelectors.unshift('.portfolio__card-holder');

    for (const selector of potentialListSelectors) {
        try {
            const elements = $(selector);
            if (elements.length < 3) continue;

            const samples = [];
            let validItems = 0;

            elements.each((_, el) => {
                const containerData = analyzeContainer($(el));
                if (containerData) {
                    samples.push(containerData.text);
                    validItems++;
                }
            });

            if (validItems > 2 && (validItems / elements.length) > 0.5) {
                clusters.push({
                    selector: selector,
                    score: validItems * (validItems / elements.length),
                    samples: samples,
                });
            }
        } catch (e) {
            // Silently ignore errors from invalid selectors that might still slip through
        }
    }

    if (clusters.length === 0) {
        return [];
    }
    
    const uniqueClusters = [...new Map(clusters.map(item => [item.selector, item])).values()];

    return uniqueClusters.sort((a, b) => b.score - a.score).slice(0, 5);
}

```

## 📄 src/scraper/test-helpers.js
*Lines: 93, Size: 3.56 KB*

```javascript
// packages/scraper-logic/src/scraper/test-helpers.js (version 2.0)
import * as cheerio from 'cheerio'
import { dynamicExtractor } from './dynamicExtractor.js'
import { extractorRegistry } from './extractors/index.js'
import { fetchPageWithPlaywright } from '../browser.js'

export async function scrapeArticleContentForTest(articleUrl, articleSelectors) {
  if (!articleUrl || !articleSelectors || articleSelectors.length === 0) return ''
  try {
    const html = await fetchPageWithPlaywright(articleUrl, 'TestContentScraper')
    if (!html) return 'Error: Failed to fetch page HTML.';
    
    const $ = cheerio.load(html)
    const selectors = Array.isArray(articleSelectors) ? articleSelectors : [articleSelectors];
    let contentParts = [];
    
    for (const selector of selectors) {
        $(selector).each((_, el) => {
            contentParts.push($(el).text().trim());
        });
    }

    if(contentParts.length > 0) {
        const content = contentParts.join('\\n\\n').replace(/\\s\\s+/g, ' ');
        return content.substring(0, 1000) + (content.length > 1000 ? '...' : '');
    }
    return 'No content found with the provided selectors.';

  } catch (error) {
    console.error(`[Content Scrape Test Error] for ${articleUrl}: ${error.message}`)
    return `Error scraping content: ${error.message}`
  }
}

export async function testHeadlineExtraction(sourceConfig, html) {
  let pageHtml = html
  if (!pageHtml) {
    pageHtml = await fetchPageWithPlaywright(sourceConfig.sectionUrl, 'TestHeadlineScraper')
  }
  const $ = cheerio.load(pageHtml)
  const articles = []
  const selectors = Array.isArray(sourceConfig.headlineSelector) ? sourceConfig.headlineSelector : [sourceConfig.headlineSelector].filter(Boolean);

  for (const selector of selectors) {
    switch (sourceConfig.extractionMethod) {
      case 'json-ld':
        $('script[type="application/ld+json"]').each((_, el) => {
          try {
            const jsonData = JSON.parse($(el).html())
            const potentialLists = [jsonData, ...(jsonData['@graph'] || [])]
            potentialLists.forEach((list) => {
              const items = list?.itemListElement
              if (Array.isArray(items)) {
                items.forEach((item) => {
                  const headline = item.name || item.item?.name
                  const url = item.url || item.item?.url
                  if (headline && url) {
                    articles.push({ headline: headline.trim(), link: new URL(url, sourceConfig.baseUrl).href })
                  }
                })
              }
            })
          } catch (e) {}
        })
        break
      case 'declarative':
        $(selector).each((_, el) => {
          const articleData = dynamicExtractor($, el, sourceConfig)
          if (articleData?.headline && articleData?.link) {
            articleData.link = new URL(articleData.link, sourceConfig.baseUrl).href
            articles.push(articleData)
          }
        })
        break
      case 'custom':
      default:
        const customExtractor = extractorRegistry[sourceConfig.extractorKey]
        if (!customExtractor) {
          throw new Error(`No custom extractor found for key: '${sourceConfig.extractorKey}'`)
        }
        $(selector).each((_, el) => {
          const articleData = customExtractor($(el), sourceConfig)
          if (articleData?.headline && articleData?.link) {
            articleData.link = new URL(articleData.link, sourceConfig.baseUrl).href
            articles.push(articleData)
          }
        })
        break
    }
  }
  return Array.from(new Map(articles.map((a) => [a.link, a])).values())
}

```

## 📄 src/test-orchestrator.js
*Lines: 51, Size: 1.49 KB*

```javascript
// packages/scraper-logic/src/test-orchestrator.js (NEW FILE)
'use server'

import { testHeadlineExtraction, scrapeArticleContentForTest } from './scraper/index.js'
import { Source } from '@headlines/models'

// This is the logic moved from data-access/actions/scrape.js
export async function testScraperRecipe(sourceConfig, articleUrl = null) {
  // Mode 1: Test a single article's content
  if (articleUrl && sourceConfig.articleSelector) {
    const content = await scrapeArticleContentForTest(
      articleUrl,
      sourceConfig.articleSelector
    )
    return { success: true, content: { preview: content, sourceUrl: articleUrl } }
  }

  // Mode 2: Test the full source recipe for headlines
  if (sourceConfig && sourceConfig.sectionUrl) {
    const headlines = await testHeadlineExtraction(sourceConfig)

    // Update source analytics after the test
    const success = headlines.length > 0
    await Source.findByIdAndUpdate(
      sourceConfig._id,
      {
        $set: {
          lastScrapedAt: new Date(),
          lastSuccessAt: success ? new Date() : undefined,
        },
        $inc: {
          'analytics.totalRuns': 1,
          'analytics.totalSuccesses': success ? 1 : 0,
          'analytics.totalFailures': success ? 0 : 1,
        },
      },
      { new: true }
    ).lean()

    return {
      success: true,
      headlines: {
        count: headlines.length,
        samples: headlines.slice(0, 10),
      },
    }
  }

  throw new Error('Invalid request payload for testScraperRecipe.')
}

```


================================================================================

# 📦 PACKAGE: UTILS-SERVER

# 📁 PROJECT DIRECTORY STRUCTURE

Total: 12 files, 1 directories

```
headlines/
├── 📁 src/
│   ├── 📄 apiCallTracker.js
│   ├── 📄 auditLogger.js
│   ├── 📄 core.js
│   ├── 📄 helpers.js
│   ├── 📄 logger.js
│   ├── 📄 mailer.js
│   ├── 📄 next.js
│   ├── 📄 node.js
│   ├── 📄 pusher.js
│   ├── 📄 redisClient.js
│   └── 📄 tokenTracker.js
└── 📄 package.json
```

# 📋 PROJECT METADATA

**Generated**: 2025-09-29T13:20:36.416Z
**Repository Path**: /home/mark/Repos/projects/headlines/packages/utils-server
**Total Files**: 12
**Package**: @headlines/utils-server@3.0.0
**Description**: Server-only utilities for the Headlines monorepo.



---


## 📄 package.json
*Lines: 37, Size: 1.02 KB*

```json
{
  "name": "@headlines/utils-server",
  "version": "3.0.0",
  "description": "Server-only utilities for the Headlines monorepo.",
  "main": "src/index.js",
  "type": "module",
  "license": "ISC",
  "exports": {
    ".": "./src/node.js",
    "./node": "./src/node.js",
    "./next": "./src/next.js",
    "./logger": "./src/logger.js",
    "./helpers": "./src/helpers.js",
    "./tokenTracker": "./src/tokenTracker.js",
    "./apiCallTracker": "./src/apiCallTracker.js",
    "./auditLogger": "./src/auditLogger.js",
    "./redisClient": "./src/redisClient.js",
    "./mailer": "./src/mailer.js",
    "./pusher": "./src/pusher.js"
  },
  "dependencies": {
    "@headlines/config": "workspace:*",
    "@headlines/models": "workspace:*",
    "@upstash/redis": "^1.35.4",
    "cheerio": "^1.0.0-rc.12",
    "clsx": "^2.1.1",
    "moment": "^2.30.1",
    "nodemailer": "^6.9.14",
    "pino": "^9.2.0",
    "pino-pretty": "^11.2.1",
    "pusher": "^5.2.0",
    "redis": "^4.6.15",
    "server-only": "^0.0.1",
    "tailwind-merge": "^2.3.0"
  }
}

```

## 📄 src/apiCallTracker.js
*Lines: 37, Size: 854 Bytes*

```javascript
import { logger } from './logger.js'

const servicePricing = {
  serper_news: 2.5,
  serper_search: 2.5,
  newsapi_search: 0,
  wikipedia: 0,
}
class ApiCallTracker {
  constructor() {
    this.usage = {}
    this.reset()
  }
  reset() {
    this.usage = {}
    Object.keys(servicePricing).forEach((service) => {
      this.usage[service] = { calls: 0, cost: 0 }
    })
  }
  recordCall(service) {
    if (!service) return
    if (!this.usage[service]) {
      logger.warn(`API call recorded for an un-priced service: ${service}.`)
      this.usage[service] = { calls: 0, cost: 0 }
    }
    this.usage[service].calls += 1
    const pricePer1000 = servicePricing[service]
    if (pricePer1000) {
      this.usage[service].cost += pricePer1000 / 1000
    }
  }
  getStats() {
    return this.usage
  }
}
export const apiCallTracker = new ApiCallTracker()

```

## 📄 src/auditLogger.js
*Lines: 49, Size: 2.11 KB*

```javascript
import pino from 'pino';
import fs from 'fs';
import path from 'path';
import { Transform } from 'stream';
import { EOL } from 'os';
import moment from 'moment';
import { format } from 'util';
const COLORS = { reset: '\x1b[0m', cyan: '\x1b[36m', magenta: '\x1b[35m', yellow: '\x1b[33m', grey: '\x1b[90m' };
const humanAuditStream = new Transform({
  transform(chunk, enc, cb) {
    try {
      const logObject = JSON.parse(chunk);
      const { time, msg, context } = logObject;
      const timestamp = moment(time).format('HH:mm:ss.SSS');
      let output = `${COLORS.cyan}--- [${timestamp}] ${msg} ---${COLORS.reset}${EOL}`;
      if (context) {
        for (const [key, value] of Object.entries(context)) {
          const formattedKey = key.replace(/_/g, ' ').replace(/\b\w/g, (l) => l.toUpperCase());
          output += `  ${COLORS.yellow}${formattedKey}:${COLORS.reset}${EOL}`;
          output += `${COLORS.grey}${format(value).replace(/^/gm, '    > ')}${COLORS.reset}${EOL}${EOL}`;
        }
      }
      this.push(output);
    } catch (e) { this.push(chunk); }
    cb();
  },
});
let auditLoggerInstance;
export function initializeAuditLogger(logDirectory) {
  if (auditLoggerInstance) return auditLoggerInstance;
  if (!logDirectory) { throw new Error('[AuditLogger] Initialization failed: logDirectory must be provided.'); }
  if (!fs.existsSync(logDirectory)) fs.mkdirSync(logDirectory, { recursive: true });
  const auditLogFile = path.join(logDirectory, 'run_audit.log');
  try { fs.unlinkSync(auditLogFile); } catch (e) { if (e.code !== 'ENOENT') console.error('Could not clear old audit log file:', e); }
  const fileWriteStream = fs.createWriteStream(auditLogFile, { flags: 'a' });
  humanAuditStream.pipe(fileWriteStream);
  auditLoggerInstance = pino({ level: 'info' }, humanAuditStream);
  return auditLoggerInstance;
}
export const auditLogger = new Proxy({}, {
  get(target, prop) {
    if (auditLoggerInstance) { return auditLoggerInstance[prop]; }
    if (prop === 'info' || prop === 'warn' || prop === 'error' || prop === 'fatal' || prop === 'debug' || prop === 'trace') {
      return () => {};
    }
    return undefined;
  },
});

```

## 📄 src/core.js
*Lines: 10, Size: 319 Bytes*

```javascript
// File: packages/utils-server/src/index.js (version 3.2 - Unchanged)
export * from './auditLogger.js'
export * from './helpers.js'
export * from './logger.js'
export * from './redisClient.js'
export * from './tokenTracker.js'
export * from './apiCallTracker.js'
export * from './mailer.js'
export * from './pusher.js'

```

## 📄 src/helpers.js
*Lines: 60, Size: 2.07 KB*

```javascript
// File: packages/utils-server/src/helpers.js

/**
 * Creates a promise that rejects after a specified timeout.
 * @param {number} ms - The timeout duration in milliseconds.
 * @param {string} [customMessage] - An optional message for the timeout error.
 * @returns {Promise<never>} A promise that will reject.
 */
function promiseTimeout(ms, customMessage = 'Operation timed out.') {
  return new Promise((_, reject) => {
    setTimeout(() => {
      reject(new Error(customMessage));
    }, ms);
  });
}

/**
 * Wraps an async function in a try-catch block and a timeout race.
 * @param {Function} asyncFn - The async function to execute.
 * @param {object} [options] - Options object.
 * @param {Function} [options.errorHandler] - An optional custom error handler.
 * @param {number} [options.timeout=90000] - Timeout in milliseconds. Defaults to 90 seconds.
 * @returns {Promise<any|null>} The result of the async function or null/custom error result.
 */
export async function safeExecute(asyncFn, { errorHandler, timeout = 90000 } = {}) {
  try {
    // Race the async function against a timeout promise.
    return await Promise.race([
      asyncFn(),
      promiseTimeout(timeout, `safeExecute timed out after ${timeout / 1000}s`)
    ]);
  } catch (error) {
    if (errorHandler) {
      return errorHandler(error);
    }
    // Log the error centrally, so individual call sites don't have to.
    console.error(
      'An unexpected error occurred in a safeExecute block:',
      error
    );
    return null; // Return null on failure
  }
}

// ... (keep the smartStripHtml function)

/**
 * Strips scripts, styles, and other non-content tags from an HTML string.
 * @param {string} rawHtml - The raw HTML content.
 * @returns {Promise<string>} The cleaned body HTML.
 */
export async function smartStripHtml(rawHtml) {
  // Use dynamic import for cheerio to keep it a lightweight dependency
  const cheerio = await import('cheerio');
  const $ = cheerio.load(rawHtml);
  $(
    'script, style, link[rel="stylesheet"], noscript, svg, path, footer, header, nav'
  ).remove();
  return $('body').html();
}
```

## 📄 src/logger.js
*Lines: 107, Size: 2.79 KB*

```javascript
// packages/utils-server/src/logger.js
import pino from 'pino'
import fs from 'fs'
import path from 'path'
import { createRequire } from 'module'
const require = createRequire(import.meta.url)

const LOG_LEVEL = process.env.LOG_LEVEL || 'trace'
const IS_PRODUCTION = process.env.NODE_ENV === 'production'

let loggerInstance

const createSimpleLogger = () => {
  const simpleLogger = {}
  const levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal']
  levels.forEach((level) => {
    const consoleMethod = level === 'trace' || level === 'debug' ? 'log' : level
    simpleLogger[level] = (...args) => {
      console[consoleMethod](`[${level.toUpperCase()}]`, ...args)
    }
  })
  return simpleLogger
}

export function initializeLogger(logDirectory = null, extraStreams = []) {
  if (loggerInstance) {
    return loggerInstance
  }

  if (process.env.NEXT_RUNTIME) {
    console.log('Detected Next.js runtime. Initializing safe console logger.')
    loggerInstance = createSimpleLogger()
    return loggerInstance
  }

  const pinoPrettyPath = require.resolve('pino-pretty')
  const consoleTransport = pino.transport({
    target: pinoPrettyPath,
    options: {
      colorize: true,
      translateTime: 'HH:MM:ss',
      ignore:
        'pid,hostname,runStats,article,assessment,event,payload,details,context,embedding,finalAssessment,watchlistHits,hits,reasoning,enrichmentSources,source_articles,key_individuals,source',
      singleLine: true,
      messageFormat: '{msg}',
    },
  })

  const streams = [{ level: LOG_LEVEL, stream: consoleTransport }, ...extraStreams]

  loggerInstance = pino({ level: 'trace' }, pino.multistream(streams))
  return loggerInstance
}

export const logger = new Proxy(
  {},
  {
    get(target, prop) {
      if (loggerInstance) {
        return loggerInstance[prop]
      }
      return initializeLogger()[prop]
    },
  }
)

export function reinitializeLogger(logDirectory, extraStreams = []) {
  const pinoPrettyPath = require.resolve('pino-pretty')

  const consoleTransport = {
    level: LOG_LEVEL,
    target: pinoPrettyPath,
    options: {
      colorize: true,
      translateTime: 'HH:mm:ss',
      ignore: 'pid,hostname,context',
      singleLine: true,
      messageFormat: '{msg}',
    },
  }

  const logFile = path.join(logDirectory, 'run.log')
  const fileTransport = {
    level: 'trace',
    target: pinoPrettyPath,
    options: {
      colorize: false,
      // DEFINITIVE FIX: Use 'mm' for minutes and 'MM' for month.
      translateTime: 'YYYY/MM/DD HH:mm:ss',
      ignore: 'pid,hostname',
      destination: logFile,
      mkdir: true,
      append: false,
    },
  }

  const allStreams = [
    pino.transport(consoleTransport),
    pino.transport(fileTransport),
    ...extraStreams,
  ]

  loggerInstance = pino({ level: 'trace' }, pino.multistream(allStreams))

  return loggerInstance
}

```

## 📄 src/mailer.js
*Lines: 80, Size: 2.55 KB*

```javascript
// Full Path: headlines/packages/utils-server/src/mailer.js
import nodemailer from 'nodemailer'
import { logger } from './logger.js'
import { safeExecute } from './helpers.js'
import { SMTP_CONFIG } from '@headlines/config'
import { Subscriber } from '@headlines/models'

// Cache for admin emails to avoid hitting the DB for every single email sent.
let adminEmailsCache = null
let cacheTimestamp = 0
const CACHE_TTL = 1000 * 60 * 5 // 5 minutes

async function getAdminEmails() {
  if (adminEmailsCache && Date.now() - cacheTimestamp < CACHE_TTL) {
    return adminEmailsCache
  }

  const admins = await Subscriber.find({ role: 'admin', isActive: true })
    .select('email')
    .lean()
  adminEmailsCache = admins.map((admin) => admin.email)
  cacheTimestamp = Date.now()

  return adminEmailsCache
}

async function sendEmail(mailOptions, emailType) {
  if (!SMTP_CONFIG?.auth?.user || !SMTP_CONFIG?.auth?.pass) {
    logger.error(`❌ [${emailType} Mailer] SMTP authentication not fully configured.`)
    return { error: 'SMTP authentication not fully configured.' }
  }
  const transporter = nodemailer.createTransport(SMTP_CONFIG)
  const sendResult = await safeExecute(() => transporter.sendMail(mailOptions), {
    errorHandler: (error) => ({ errorOccurred: true, details: error.message }),
  })
  if (sendResult && sendResult.errorOccurred) {
    logger.error(`❌ [${emailType} Mailer] Nodemailer SMTP error:`, {
      details: sendResult.details,
    })
    return { error: `SMTP Error: ${sendResult.details}` }
  }
  logger.info(
    `✅ [${emailType} Mailer] Email sent successfully to ${mailOptions.to}. BCC: ${mailOptions.bcc || 'None'}`
  )
  return { success: true }
}

export async function sendGenericEmail({ to, subject, html, emailType = 'Generic' }) {
  if (!to) {
    logger.error(`❌ [${emailType} Mailer] Invalid 'to' address provided.`)
    return false
  }

  const mailOptions = {
    from: `"${SMTP_CONFIG.fromName}" <${SMTP_CONFIG.fromAddress}>`,
    to,
    subject,
    html,
  }

  // --- START DEFINITIVE FIX ---
  // Apply BCC logic ONLY for non-supervisor reports.
  if (emailType !== 'SupervisorReport') {
    const allAdminEmails = await getAdminEmails()

    // Filter out the primary recipient from the BCC list if they are an admin.
    const bccList = allAdminEmails.filter(
      (adminEmail) => adminEmail.toLowerCase() !== to.toLowerCase()
    )

    if (bccList && bccList.length > 0) {
      mailOptions.bcc = bccList.join(',')
    }
  }
  // --- END DEFINITIVE FIX ---

  const result = await sendEmail(mailOptions, emailType)
  return result.success || false
}

```

## 📄 src/next.js
*Lines: 20, Size: 378 Bytes*

```javascript
import 'server-only'

// Explicitly re-export all functions from the core barrel file.
export {
  apiCallTracker,
  auditLogger,
  initializeAuditLogger,
  safeExecute,
  smartStripHtml,
  logger,
  initializeLogger,
  reinitializeLogger,
  sendGenericEmail,
  configurePusher,
  triggerRealtimeEvent,
  getRedisClient,
  testRedisConnection,
  tokenTracker,
} from './core.js'

```

## 📄 src/node.js
*Lines: 3, Size: 76 Bytes*

```javascript
// This is the default, Node.js-safe entry point.
export * from './core.js'

```

## 📄 src/pusher.js
*Lines: 37, Size: 1.13 KB*

```javascript
import Pusher from 'pusher'
import { logger } from './logger.js'
import { env } from '@headlines/config'
let pusher
let isRealtimeConfigured = false
export function configurePusher() {
  if (isRealtimeConfigured) return
  const { PUSHER_APP_ID, PUSHER_KEY, PUSHER_SECRET, PUSHER_CLUSTER } = env
  if (PUSHER_APP_ID && PUSHER_KEY && PUSHER_SECRET && PUSHER_CLUSTER) {
    pusher = new Pusher({
      appId: PUSHER_APP_ID,
      key: PUSHER_KEY,
      secret: PUSHER_SECRET,
      cluster: PUSHER_CLUSTER,
      useTLS: true,
    })
    isRealtimeConfigured = true
    logger.info('✅ Real-time notification service (Pusher) configured.')
  } else {
    logger.warn(
      'Pusher credentials not fully configured. Real-time updates will be disabled.'
    )
  }
}
export async function triggerRealtimeEvent(channel, event, data) {
  if (!isRealtimeConfigured || !pusher) return
  try {
    logger.info(`📢 Streaming new item on channel '${channel}' with event '${event}'.`)
    await pusher.trigger(channel, event, data)
  } catch (error) {
    logger.error(
      { err: error, channel, event },
      'Failed to trigger Pusher real-time event.'
    )
  }
}

```

## 📄 src/redisClient.js
*Lines: 66, Size: 1.88 KB*

```javascript
// packages/utils-server/src/redisClient.js
import { logger } from './logger.js'
import { Redis } from '@upstash/redis'

let redisClient
let connectionState = 'idle'

export async function getRedisClient(env) {
  if (connectionState === 'ready' && redisClient) {
    return redisClient
  }
  if (connectionState === 'failed' || connectionState === 'connecting') {
    return null
  }
  if (connectionState === 'idle') {
    if (!env || !env.UPSTASH_REDIS_REST_URL || !env.UPSTASH_REDIS_REST_TOKEN) {
      logger.warn(
        'UPSTASH_REDIS_REST_URL and/or TOKEN not found in provided env. Caching will be disabled.'
      )
      connectionState = 'failed'
      return null
    }
    try {
      connectionState = 'connecting'
      const client = new Redis({
        url: env.UPSTASH_REDIS_REST_URL,
        token: env.UPSTASH_REDIS_REST_TOKEN,
      })
      await client.ping()
      logger.info('✅ Upstash Redis client connected successfully.')
      connectionState = 'ready'
      redisClient = client
      return client
    } catch (err) {
      logger.error({ err: err.message }, 'Upstash Redis connection failed.')
      connectionState = 'failed'
      return null
    }
  }
}

export async function testRedisConnection(env) {
  if (!env || !env.UPSTASH_REDIS_REST_URL) {
    logger.warn('Redis is not configured. Caching will be disabled.')
    return true
  }
  try {
    const client = await getRedisClient(env)
    if (client) {
      const testKey = `test:${Date.now()}`
      await client.set(testKey, 'test-value', { ex: 10 })
      const testValue = await client.get(testKey)
      await client.del(testKey)
      if (testValue === 'test-value') {
        logger.info('✅ Redis connection and read/write test successful.')
        return true
      }
      return false
    }
    return true
  } catch (err) {
    logger.warn({ err: err.message }, 'Redis pre-flight check failed.')
    return true
  }
}

```

## 📄 src/tokenTracker.js
*Lines: 46, Size: 1.35 KB*

```javascript
import { logger } from './logger.js'

const modelPricing = {
  'gpt-5-nano': { input: 0.15, output: 0.4 },
  'gpt-5-mini': { input: 0.5, output: 2.5 },
  'gpt-4o-mini': { input: 0.15, output: 0.6 },
}

class TokenTracker {
  constructor() {
    this.usage = {}
    this.reset()
  }
  initializeModels(modelKeys = []) {
    this.usage = {}
    const allKnownModels = new Set([...Object.keys(modelPricing), ...modelKeys])
    allKnownModels.forEach((model) => {
      this.usage[model] = { inputTokens: 0, outputTokens: 0, cost: 0 }
    })
  }
  reset() {
    this.initializeModels()
  }
  recordUsage(model, usageData) {
    if (!usageData || !model) return
    const { prompt_tokens, completion_tokens } = usageData
    if (!this.usage[model]) {
      logger.warn(`Token usage recorded for an un-priced model: ${model}.`)
      this.usage[model] = { inputTokens: 0, outputTokens: 0, cost: 0 }
    }
    this.usage[model].inputTokens += prompt_tokens || 0
    this.usage[model].outputTokens += completion_tokens || 0
    const pricing = modelPricing[model]
    if (pricing) {
      const inputCost = ((prompt_tokens || 0) / 1000000) * pricing.input
      const outputCost = ((completion_tokens || 0) / 1000000) * pricing.output
      this.usage[model].cost += inputCost + outputCost
    }
  }
  getStats() {
    return this.usage
  }
}

export const tokenTracker = new TokenTracker()

```


================================================================================

# 📦 PACKAGE: UTILS-SHARED

# 📁 PROJECT DIRECTORY STRUCTURE

Total: 9 files, 2 directories

```
headlines/
├── 📁 src/
│   ├── 📁 data/
│   │   ├── 📄 countries.json
│   │   └── 📄 languages.json
│   ├── 📄 apiCallTracker.js
│   ├── 📄 countries.js
│   ├── 📄 helpers.js
│   ├── 📄 index.js
│   ├── 📄 languages.js
│   └── 📄 logger.js
└── 📄 package.json
```

# 📋 PROJECT METADATA

**Generated**: 2025-09-29T13:20:36.418Z
**Repository Path**: /home/mark/Repos/projects/headlines/packages/utils-shared
**Total Files**: 9
**Package**: @headlines/utils-shared@2.0.0
**Description**: Isomorphic (client and server safe) utilities and hooks.



---


## 📄 package.json
*Lines: 19, Size: 412 Bytes*

```json
{
  "name": "@headlines/utils-shared",
  "version": "2.0.0",
  "description": "Isomorphic (client and server safe) utilities and hooks.",
  "main": "src/index.js",
  "type": "module",
  "license": "ISC",
  "exports": {
    ".": "./src/index.js",
    "./next": "./src/index.js"
  },
  "dependencies": {
    "clsx": "^2.1.1",
    "pusher-js": "^8.4.0",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.3.0"
  }
}

```

## 📄 src/apiCallTracker.js
*Lines: 49, Size: 1.02 KB*

```javascript
// packages/utils-shared/src/apiCallTracker.js (version 1.0.0)
import { logger } from './logger.js'

// Prices per 1000 calls in USD.
const servicePricing = {
  serper_news: 2.5,
  serper_search: 2.5,
  newsapi_search: 0, // Developer plan is free
  wikipedia: 0,
}

class ApiCallTracker {
  constructor() {
    this.usage = {}
    this.reset()
  }

  reset() {
    this.usage = {}
    Object.keys(servicePricing).forEach((service) => {
      this.usage[service] = { calls: 0, cost: 0 }
    })
  }

  recordCall(service) {
    if (!service) return

    if (!this.usage[service]) {
      logger.warn(
        `API call recorded for an un-priced service: ${service}. Calls will be tracked, but cost will be $0.`
      )
      this.usage[service] = { calls: 0, cost: 0 }
    }

    this.usage[service].calls += 1

    const pricePer1000 = servicePricing[service]
    if (pricePer1000) {
      this.usage[service].cost += pricePer1000 / 1000
    }
  }

  getStats() {
    return this.usage
  }
}

export const apiCallTracker = new ApiCallTracker()

```

## 📄 src/countries.js
*Lines: 30, Size: 994 Bytes*

```javascript
// packages/utils-shared/src/countries.js (NEW FILE)
import isoCountryFlags from './data/countries.json' with { type: 'json' }

const defaultFlag = '🌍'
const countryNameToIsoMap = new Map(Object.entries(isoCountryFlags))
const isoToFlagMap = new Map()

for (const [name, iso] of countryNameToIsoMap.entries()) {
  if (iso.length === 2) {
    const flag = iso
      .toUpperCase()
      .replace(/./g, (char) => String.fromCodePoint(char.charCodeAt(0) + 127397))
    isoToFlagMap.set(iso, flag)
  } else {
    const specialFlags = { Global: '🌐', Europe: '🇪🇺', Scandinavia: '❄️' }
    if (specialFlags[name]) isoToFlagMap.set(iso, specialFlags[name])
  }
}

export function getCountryFlag(countryName) {
  if (!countryName) return defaultFlag
  for (const [key, value] of countryNameToIsoMap.entries()) {
    if (key.toLowerCase() === countryName.trim().toLowerCase()) {
      const flag = isoToFlagMap.get(value)
      return flag || defaultFlag
    }
  }
  return defaultFlag
}

```

## 📄 src/data/countries.json
*Lines: 110, Size: 2.06 KB*

```json
{
  "Global": "XX",
  "Europe": "EU",
  "Scandinavia": "SC",
  "Afghanistan": "AF",
  "Albania": "AL",
  "Algeria": "DZ",
  "Andorra": "AD",
  "Angola": "AO",
  "Argentina": "AR",
  "Armenia": "AM",
  "Australia": "AU",
  "Austria": "AT",
  "Azerbaijan": "AZ",
  "Bahamas": "BS",
  "Bahrain": "BH",
  "Bangladesh": "BD",
  "Belarus": "BY",
  "Belgium": "BE",
  "Benin": "BJ",
  "Bhutan": "BT",
  "Bolivia": "BO",
  "Bosnia and Herzegovina": "BA",
  "Brazil": "BR",
  "Bulgaria": "BG",
  "Cambodia": "KH",
  "Canada": "CA",
  "Chile": "CL",
  "China": "CN",
  "Colombia": "CO",
  "Croatia": "HR",
  "Cuba": "CU",
  "Cyprus": "CY",
  "Czech Republic": "CZ",
  "Denmark": "DK",
  "Egypt": "EG",
  "Estonia": "EE",
  "Ethiopia": "ET",
  "Finland": "FI",
  "France": "FR",
  "Georgia": "GE",
  "Germany": "DE",
  "Ghana": "GH",
  "Greece": "GR",
  "Hungary": "HU",
  "Iceland": "IS",
  "India": "IN",
  "Indonesia": "ID",
  "Iran": "IR",
  "Iraq": "IQ",
  "Ireland": "IE",
  "Israel": "IL",
  "Italy": "IT",
  "Japan": "JP",
  "Jordan": "JO",
  "Kazakhstan": "KZ",
  "Kenya": "KE",
  "Kuwait": "KW",
  "Latvia": "LV",
  "Lebanon": "LB",
  "Liechtenstein": "LI",
  "Lithuania": "LT",
  "Luxembourg": "LU",
  "Malaysia": "MY",
  "Malta": "MT",
  "Mexico": "MX",
  "Monaco": "MC",
  "Mongolia": "MN",
  "Montenegro": "ME",
  "Morocco": "MA",
  "Nepal": "NP",
  "Netherlands": "NL",
  "New Zealand": "NZ",
  "Nigeria": "NG",
  "North Korea": "KP",
  "North Macedonia": "MK",
  "Norway": "NO",
  "Oman": "OM",
  "Pakistan": "PK",
  "Peru": "PE",
  "Philippines": "PH",
  "Poland": "PL",
  "Portugal": "PT",
  "Qatar": "QA",
  "Romania": "RO",
  "Russia": "RU",
  "Saudi Arabia": "SA",
  "Serbia": "RS",
  "Singapore": "SG",
  "Slovakia": "SK",
  "Slovenia": "SI",
  "South Africa": "ZA",
  "South Korea": "KR",
  "Spain": "ES",
  "Sri Lanka": "LK",
  "Sweden": "SE",
  "Switzerland": "CH",
  "Syria": "SY",
  "Taiwan": "TW",
  "Thailand": "TH",
  "Turkey": "TR",
  "Ukraine": "UA",
  "United Arab Emirates": "AE",
  "United Kingdom": "GB",
  "United States": "US",
  "Uzbekistan": "UZ",
  "Vietnam": "VN",
  "Yemen": "YE"
}

```

## 📄 src/data/languages.json
*Lines: 10, Size: 167 Bytes*

```json
{
    "English": "en",
    "Danish": "da",
    "Swedish": "sv",
    "Norwegian": "no",
    "German": "de",
    "French": "fr",
    "Spanish": "es",
    "Dutch": "nl"
}
```

## 📄 src/helpers.js
*Lines: 50, Size: 1.1 KB*

```javascript
// packages/utils-shared/src/helpers.js (Corrected)
import { clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs) {
  return twMerge(clsx(inputs))
}

export function truncateString(str, maxLength = 100) {
  if (typeof str !== 'string' || str.length <= maxLength) {
    return str
  }
  return str.substring(0, maxLength) + '...'
}

export function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms))
}

export function escapeHtml(str) {
  if (str === null || str === undefined) return ''
  return String(str).replace(/[<>&'"]/g, (c) => {
    switch (c) {
      case '<':
        return '&lt;'
      case '>':
        return '&gt;'
      case '&':
        return '&amp;'
      case "'":
        return '&apos;'
      case '"':
        return '&quot;'
    }
  })
}

// NEW FUNCTION ADDED
export function groupItemsByCountry(items, countryKey) {
  if (!items) return {}
  return items.reduce((acc, item) => {
    const country = item[countryKey] || 'Unknown'
    if (!acc[country]) {
      acc[country] = []
    }
    acc[country].push(item)
    return acc
  }, {})
}

```

## 📄 src/index.js
*Lines: 10, Size: 377 Bytes*

```javascript
// packages/utils-shared/src/index.js
'use client'

// DEFINITIVE FIX: Replace wildcard exports with explicit, named exports.
export { cn, truncateString, sleep, escapeHtml, groupItemsByCountry } from './helpers.js'

export { getCountryFlag } from './countries.js'
export { languageList, languageMap } from './languages.js'
export { apiCallTracker } from './apiCallTracker.js'

```

## 📄 src/languages.js
*Lines: 6, Size: 251 Bytes*

```javascript
// packages/utils-shared/src/languages.js (NEW FILE)
import languageData from './data/languages.json' with { type: 'json' }

export const languageList = Object.keys(languageData).sort()
export const languageMap = new Map(Object.entries(languageData))

```

## 📄 src/logger.js
*Lines: 42, Size: 1.15 KB*

```javascript
let loggerInstance

const createSimpleLogger = () => {
  const simpleLogger = {}
  const levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal']
  levels.forEach((level) => {
    const consoleMethod = level === 'trace' || level === 'debug' ? 'log' : level
    simpleLogger[level] = (...args) => {
      console[consoleMethod](`[${level.toUpperCase()}]`, ...args)
    }
  })
  return simpleLogger
}
export function initializeLogger(logDirectory = null) {
  if (loggerInstance) {
    return loggerInstance
  }
  if (process.env.NEXT_RUNTIME) {
    console.log('Detected Next.js runtime. Initializing safe console logger.')
    loggerInstance = createSimpleLogger()
    return loggerInstance
  }
}
export const logger = new Proxy(
  {},
  {
    get(target, prop) {
      if (loggerInstance) {
        return loggerInstance[prop]
      }
      const defaultLogPath = path.resolve(process.cwd(), 'logs')
      initializeLogger(defaultLogPath)
      return loggerInstance[prop]
    },
  }
)
export function reinitializeLogger(logDirectory, extraStreams = []) {
  loggerInstance = null
  loggerInstance = initializeLogger(logDirectory, extraStreams)
  return loggerInstance
}

```


================================================================================

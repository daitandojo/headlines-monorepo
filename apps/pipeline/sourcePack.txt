# 📁 PROJECT DIRECTORY STRUCTURE

Total: 135 files, 31 directories

```
headlines-monorepo/
├── 📁 .github/
│   └── 📁 workflows/
│       ├── 📄 fly-deploy.yml
│       └── 📄 run-pipeline.yml
├── 📁 norway/
│   ├── 📄 france.txt
│   ├── 📄 norway1.json
│   ├── 📄 norway2.json
│   ├── 📄 norway3.json
│   ├── 📄 norway4.json
│   ├── 📄 spain1.json
│   ├── 📄 spain2.json
│   ├── 📄 spain3.json
│   ├── 📄 spain4.json
│   ├── 📄 spain5.json
│   ├── 📄 spain6.json
│   ├── 📄 spain7.json
│   ├── 📄 spain8.json
│   └── 📄 spain9.json
├── 📁 scripts/
│   ├── 📁 infrastructure/
│   │   └── 📄 setFlySecrets.sh
│   ├── 📁 maintenance/
│   │   ├── 📄 backfill-assessed-articles.js
│   │   ├── 📄 delete-relevant-today.js
│   │   ├── 📄 delete-today.js
│   │   ├── 📄 recover-opportunities.js
│   │   ├── 📄 refresh.js
│   │   ├── 📄 reprocess-failed.js
│   │   ├── 📄 reprocess-lost-articles.js
│   │   ├── 📄 reprocess-specific-articles.js
│   │   ├── 📄 reset-assessed-today.js
│   │   ├── 📄 reset-relevant-today.js
│   │   └── 📄 reset-source-analytics.js
│   ├── 📁 push/
│   │   └── 📄 send-test-push.js
│   ├── 📁 results/
│   │   ├── 📄 list-events.js
│   │   ├── 📄 resend-todays-events.js
│   │   └── 📄 send-last-events.js
│   ├── 📁 scripts/
│   │   └── 📄 list.js
│   ├── 📁 seed/
│   │   ├── 📁 data/
│   │   │   └── 📄 denmark.json
│   │   ├── 📁 lib/
│   │   │   ├── 📄 denmark-richlist-data-loader.js
│   │   │   ├── 📄 enrich-thin-profile.js
│   │   │   ├── 📄 event-chunker.js
│   │   │   ├── 📄 pipeline-injector.js
│   │   │   ├── 📄 richlist-data-loader.js
│   │   │   ├── 📄 script-init.js
│   │   │   ├── 📄 synthetic-article-builder.js
│   │   │   └── 📄 user-interact.js
│   │   ├── 📄 ingest-denmark-richlist.js
│   │   ├── 📄 ingest-opportunity-files.js
│   │   ├── 📄 ingest-richlist.js
│   │   ├── 📄 seed-admin-user.js
│   │   ├── 📄 seed-countries.js
│   │   ├── 📄 seed-settings.js
│   │   ├── 📄 seed-test-user.js
│   │   └── 📄 sync-test-user-subscriptions.js
│   ├── 📁 sources/
│   │   ├── 📄 analyze-sources.js
│   │   ├── 📄 browse.js
│   │   ├── 📄 debug-content.js
│   │   ├── 📄 discover.js
│   │   ├── 📄 list-headlines.js
│   │   ├── 📄 list-sources.js
│   │   ├── 📄 list.js
│   │   ├── 📄 maintain.js
│   │   ├── 📄 scrape-many.js
│   │   ├── 📄 scrape-one.js
│   │   └── 📄 update.js
│   ├── 📁 subscribers/
│   │   ├── 📄 list.js
│   │   └── 📄 update.js
│   ├── 📁 test-pipeline/
│   │   ├── 📄 mock-loader.js
│   │   ├── 📄 stage4_output.js
│   │   ├── 📄 test-opportunity-upserter.js
│   │   ├── 📄 test-payload.js
│   │   └── 📄 test-save-logic.js
│   ├── 📁 tools/
│   │   ├── 📄 backfill-graph-from-opps.js
│   │   ├── 📄 calculate-transaction-likelihood.js
│   │   ├── 📄 calculate-watchlist-hits.js
│   │   ├── 📄 diagnose-stuck-articles.js
│   │   ├── 📄 get-db-stats.js
│   │   ├── 📄 oppFactory.js
│   │   └── 📄 purge-external-collections.sh
│   ├── 📁 watchlist/
│   │   └── 📄 list.js
│   ├── 📄 mongo-backup.sh
│   ├── 📄 mongo-restore.sh
│   └── 📄 purge-opportunities.js
├── 📁 src/
│   ├── 📁 config/
│   │   ├── 📄 dynamicConfig.js
│   │   ├── 📄 index.js
│   │   └── 📄 PEFirms.json
│   ├── 📁 modules/
│   │   ├── 📁 dataStore/
│   │   │   └── 📄 index.js
│   │   ├── 📁 email/
│   │   │   ├── 📁 components/
│   │   │   │   ├── 📁 supervisor/
│   │   │   │   │   ├── 📄 costSummary.js
│   │   │   │   │   ├── 📄 databaseTables.js
│   │   │   │   │   ├── 📄 enrichmentFunnel.js
│   │   │   │   │   ├── 📄 judgeVerdict.js
│   │   │   │   │   ├── 📄 scraperHealth.js
│   │   │   │   │   └── 📄 supervisorEmailBodyBuilder.js
│   │   │   │   ├── 📄 articleFormatter.js
│   │   │   │   ├── 📄 emailBodyBuilder.js
│   │   │   │   ├── 📄 eventFormatter.js
│   │   │   │   └── 📄 opportunityFormatter.js
│   │   │   ├── 📁 templates/
│   │   │   │   └── 📄 supervisorWrapper.js
│   │   │   ├── 📄 constants.js
│   │   │   ├── 📄 emailDispatcher.js
│   │   │   └── 📄 index.js
│   │   └── 📁 notifications/
│   │       ├── 📄 emailDispatcher.js
│   │       ├── 📄 index.js
│   │       └── 📄 pushService.js
│   ├── 📁 pipeline/
│   │   ├── 📁 submodules/
│   │   │   ├── 📁 commit/
│   │   │   │   ├── 📄 1_judgeOutput.js
│   │   │   │   ├── 📄 2_saveResults.js
│   │   │   │   ├── 📄 3_triggerNotifications.js
│   │   │   │   └── 📄 4_updateSourceAnalytics.js
│   │   │   ├── 📄 assessHeadlines.js
│   │   │   ├── 📄 enrichArticles.js
│   │   │   ├── 📄 opportunityUpserter.js
│   │   │   ├── 📄 processSingleArticle.js
│   │   │   └── 📄 triggerSelectorRepair.js
│   │   ├── 📄 1_preflight.js
│   │   ├── 📄 2_scrapeAndFilter.js
│   │   ├── 📄 3_5_entityResolution.js
│   │   ├── 📄 3_assessAndEnrich.js
│   │   ├── 📄 4_5_opportunityDeepDive.js
│   │   ├── 📄 4_clusterAndSynthesize.js
│   │   ├── 📄 5_5_updateKnowledgeGraph.js
│   │   ├── 📄 5_commitAndNotify.js
│   │   ├── 📄 6_suggestNewWatchlistEntities.js
│   │   └── 📄 7_selfHealAndOptimize.js
│   ├── 📁 scraper/
│   │   └── 📄 standardScraper.js
│   ├── 📁 utils/
│   │   ├── 📄 articleTraceLogger.js
│   │   ├── 📄 auditLogger.js
│   │   ├── 📄 errorStream.js
│   │   ├── 📄 housekeeping.js
│   │   ├── 📄 pipelineLogger.js
│   │   ├── 📄 rag.js
│   │   ├── 📄 reportSections.js
│   │   └── 📄 runStatsManager.js
│   ├── 📄 app.js
│   └── 📄 orchestrator.js
├── 📄 .gitignore
├── 📄 .npmrc
├── 📄 jest.config.js
├── 📄 package.json
└── 📄 run.sh
```

# 📋 PROJECT METADATA

**Generated**: 2025-10-21T18:41:06.959Z
**Repository Path**: /home/mark/Repos/projects/headlines-monorepo/apps/pipeline
**Total Files**: 135
**Package**: @headlines/pipeline@1.0.0




---


## 📄 .github/workflows/fly-deploy.yml
*Lines: 28, Size: 845 Bytes*

```yaml
# See https://fly.io/docs/app-guides/continuous-deployment-with-github-actions/

name: Fly Deploy
on:
  push:
    branches:
      - main
jobs:
  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    concurrency: deploy-group
    steps:
      - uses: actions/checkout@v4
      
      # Step 1: Install flyctl using the official installer.
      - name: Install flyctl
        run: |
          curl -L https://fly.io/install.sh | sh
          # Step 2: Add flyctl to the PATH for subsequent steps.
          # This is the officially recommended and robust method.
          echo "/home/runner/.fly/bin" >> $GITHUB_PATH

      - name: Deploy to Fly.io
        # Now 'flyctl' can be called directly because its location is in the PATH.
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
```

## 📄 .github/workflows/run-pipeline.yml
*Lines: 39, Size: 1.34 KB*

```yaml
name: Run Pipeline on Schedule

on:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab
  schedule:
    # IMPORTANT: GitHub schedules run on UTC time.
    # 10:00 Copenhagen (CEST, UTC+2) is 08:00 UTC
    # 16:30 Copenhagen (CEST, UTC+2) is 14:30 UTC
    - cron: '25 11 * * *'
    - cron: '25 12 * * *'
    - cron: '25 13 * * *'
    - cron: '25 16 * * *'

jobs:
  run-on-fly:
    name: Start a Fly Machine to Run the Pipeline
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out your repository's code
      - uses: actions/checkout@v4
      
      # Step 2: Install flyctl and add it to the PATH.
      - name: Install flyctl
        run: |
          curl -L https://fly.io/install.sh | sh
          echo "/home/runner/.fly/bin" >> $GITHUB_PATH
        
      # Step 3: Run the machine command.
      - name: Start a temporary machine and wait for completion
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          # 'flyctl' can now be called directly.
          # MODIFIED: Replaced --autodestroy with --rm, the original and more compatible flag.
          # This ensures the machine is automatically destroyed server-side upon completion.
          flyctl machine run . --region lhr --memory 2048 --rm
          
          echo "The machine has completed its run and has been destroyed."
```

## 📄 .gitignore
*Lines: 31, Size: 360 Bytes*

```
# Monorepo-level ignores
node_modules
future
logs
script.sh
.DS_Store
norway.json
norway.backup
debug_html
papers.json
workbox-*
*.pem
*.log*
.env*
!/.env.template

# Apps
apps/admin/.next
apps/admin/out
apps/admin/build
apps/admin/.vercel

# Pipeline
apps/pipeline/debug_html
apps/pipeline/logs

# Packages
packages/**/node_modules
packages/**/*.tsbuildinfo


```

## 📄 .npmrc
*Lines: 2, Size: 22 Bytes*

```
legacy-peer-deps=true

```

## 📄 jest.config.js
*Lines: 10, Size: 217 Bytes*

```javascript
// apps/pipeline/jest.config.js (version 1.0.0)
/** @type {import('jest').Config} */
const config = {
  verbose: true,
  // This is necessary to handle ES Modules correctly
  transform: {},
};

export default config;

```

## 📄 norway/france.txt
*Lines: 28, Size: 944 Bytes*

```
    FRANCE BILLIONAIRES LIST 2024  

    Bernard Arnault: $207.6 billion
    Francoise Bettencourt Meyers: $97.9 billion
    Gerard Wertheimer: $36.4 billion
    Alain Wertheimer: $36.4 billion
    Francois Pinault: $29.5 billion
    Emmanuel Besnier: $25.6 billion
    Nicolas Puech: $13.2 billion
    Vincent Bollore: $9.9 billion
    Laurent Dassault: $9.9 billion
    Thierry Dassault: $9.9 billion
    Jacques Saade: $9.8 billion
    Rodolphe Saade: $9.8 billion
    Tanya Saad Zeenny: $9.8 billion
    Marie-Helene Habert-Dassault: $9.8 billion
    Carrie Perrodo: $9.0 billion
    Jean-Michel Besnier: $8.9 billion
    Marie Besnier Beauvalot: $8.9 billion
    Xavier Niel: $6.9 billion
    Alain Merieux: $6.9 billion
    Michel Leclercq: $5.9 billion
    Danielle Bellon: $5.1 billion
    Patrick Drahi: $4.4 billion
    Marc Ladreit de Lacharriere: $4.2 billion
    Charles Edelstenne: $4.52 billion
    Stephane Bancel: $3.8 billion

```

## 📄 norway/norway1.json
*Lines: 403, Size: 10.91 KB*

```json
[
  {
    "name": "John Fredriksen",
    "url": "https://www.finansavisen.no/person/1257/john-fredriksen"
  },
  {
    "name": "Torstein Hagen",
    "url": "https://www.finansavisen.no/person/830/torstein-hagen"
  },
  {
    "name": "Ole Andreas Halvorsen",
    "url": "https://www.finansavisen.no/person/695/ole-andreas-halvorsen"
  },
  {
    "name": "Odd Reitan",
    "url": "https://www.finansavisen.no/person/836/odd-reitan"
  },
  {
    "name": "Johan Johannson",
    "url": "https://www.finansavisen.no/person/1039/johan-johannson"
  },
  {
    "name": "Johan H. Andresen",
    "url": "https://www.finansavisen.no/person/693/johan-henrik-andresen"
  },
  {
    "name": "Gustav Witzøe",
    "url": "https://www.finansavisen.no/person/528/gustav-witzoe"
  },
  {
    "name": "Kjell Inge Røkke",
    "url": "https://www.finansavisen.no/person/874/kjell-inge-rokke"
  },
  {
    "name": "Stein Erik Hagen",
    "url": "https://www.finansavisen.no/person/692/stein-erik-hagen"
  },
  {
    "name": "Bent Christian Wilhelmsen",
    "url": "https://www.finansavisen.no/person/1195/bent-christian-wilhelmsen"
  },
  {
    "name": "Arne Alexander Wilhelmsen",
    "url": "https://www.finansavisen.no/person/504/arne-alexander-wilhelmsen"
  },
  {
    "name": "Peter Preben Wilhelmsen",
    "url": "https://www.finansavisen.no/person/1196/peter-preben-wilhelmsen"
  },
  {
    "name": "Svein Støle",
    "url": "https://www.finansavisen.no/person/835/svein-stole"
  },
  {
    "name": "Petter Stordalen",
    "url": "https://www.finansavisen.no/person/1035/petter-anker-stordalen"
  },
  {
    "name": "Christen Sveaas",
    "url": "https://www.finansavisen.no/person/1217/christen-sveaas"
  },
  {
    "name": "Lars Wenaas",
    "url": "https://www.finansavisen.no/person/1033/lars-wenaas"
  },
  {
    "name": "Torstein Ingvald Tvenge",
    "url": "https://www.finansavisen.no/person/1232/torstein-ingvald-tvenge"
  },
  {
    "name": "Tore Lærdal",
    "url": "https://www.finansavisen.no/person/525/tore-laerdal"
  },
  {
    "name": "Bjørn Rune Gjelsten",
    "url": "https://www.finansavisen.no/person/1228/bjorn-rune-gjelsten"
  },
  {
    "name": "Ole Ertvaag",
    "url": "https://www.finansavisen.no/person/1204/ole-ertvaag"
  },
  {
    "name": "Edgar Haugen",
    "url": "https://www.finansavisen.no/person/985/edgar-haugen"
  },
  {
    "name": "Ivar Erik Tollefsen",
    "url": "https://www.finansavisen.no/person/1034/ivar-erik-tollefsen"
  },
  {
    "name": "Bjørn Erik Borgen",
    "url": "https://www.finansavisen.no/person/1397/bjorn-erik-borgen"
  },
  {
    "name": "Erik Must",
    "url": "https://www.finansavisen.no/person/852/erik-must"
  },
  {
    "name": "Niels G. Stolt-Nielsen",
    "url": "https://www.finansavisen.no/person/1222/niels-gregers-stolt-nielsen"
  },
  {
    "name": "Kristian Siem",
    "url": "https://www.finansavisen.no/person/517/kristian-siem"
  },
  {
    "name": "Peter T. Smedvig",
    "url": "https://www.finansavisen.no/person/505/peter-thomas-smedvig"
  },
  {
    "name": "Trygve Seglem",
    "url": "https://www.finansavisen.no/person/671/trygve-seglem"
  },
  {
    "name": "Olav Nils Sunde",
    "url": "https://www.finansavisen.no/person/831/olav-nils-sunde"
  },
  {
    "name": "Inge Harald Berg",
    "url": "https://www.finansavisen.no/person/858/inge-harald-berg"
  },
  {
    "name": "Arne Blystad",
    "url": "https://www.finansavisen.no/person/513/arne-blystad"
  },
  {
    "name": "Christian G. Sundt",
    "url": "https://www.finansavisen.no/person/688/christian-gruner-sundt"
  },
  {
    "name": "Helene Sundt",
    "url": "https://www.finansavisen.no/person/855/else-helene-sundt"
  },
  {
    "name": "Helene Odfjell",
    "url": "https://www.finansavisen.no/person/679/helene-odfjell"
  },
  {
    "name": "Gerhard Meidell Alsaker",
    "url": "https://www.finansavisen.no/person/1225/gerhard-meidell-alsaker"
  },
  {
    "name": "Christian Sinding",
    "url": "https://www.finansavisen.no/person/1175/christian-sinding"
  },
  {
    "name": "Øystein Moan",
    "url": "https://www.finansavisen.no/person/503/oystein-moan"
  },
  {
    "name": "Magne Jordanger",
    "url": "https://www.finansavisen.no/person/1021/magne-jordanger"
  },
  {
    "name": "Fred. Olsen",
    "url": "https://www.finansavisen.no/person/524/thomas-fredrik-olsen"
  },
  {
    "name": "Anders Christopher Garmann Wilhelmsen",
    "url": "https://www.finansavisen.no/person/851/anders-christopher-garmann-wilhelmsen"
  },
  {
    "name": "Morten Westye Høegh",
    "url": "https://www.finansavisen.no/person/512/morten-westye-hoegh"
  },
  {
    "name": "Leif Ovesøn Høegh",
    "url": "https://www.finansavisen.no/person/847/leif-oveson-hoegh"
  },
  {
    "name": "Nicolai Tangen",
    "url": "https://www.finansavisen.no/person/1218/nicolai-tangen"
  },
  {
    "name": "Jørgen Dahl",
    "url": "https://www.finansavisen.no/person/519/jorgen-dahl"
  },
  {
    "name": "Knut Gustaf Aspelin",
    "url": "https://www.finansavisen.no/person/526/knut-gustaf-aspelin"
  },
  {
    "name": "Ola Braanaas",
    "url": "https://www.finansavisen.no/person/666/ola-braanaas"
  },
  {
    "name": "Dag Rasmussen",
    "url": "https://www.finansavisen.no/person/833/dag-rasmussen"
  },
  {
    "name": "Tom Eide-Knudsen",
    "url": "https://www.finansavisen.no/person/1025/tom-eide-knudsen"
  },
  {
    "name": "Arne Fredly",
    "url": "https://www.finansavisen.no/person/1242/arne-helge-fredly"
  },
  {
    "name": "Iwan Eide Knudsen",
    "url": "https://www.finansavisen.no/person/647/iwan-eide-knudsen"
  },
  {
    "name": "Egil Stenshagen",
    "url": "https://www.finansavisen.no/person/506/egil-stenshagen"
  },
  {
    "name": "Haakon Lorentzen",
    "url": "https://www.finansavisen.no/person/810/haakon-lorentzen"
  },
  {
    "name": "Anders Misund",
    "url": "https://www.finansavisen.no/person/1245/anders-misund"
  },
  {
    "name": "Aage Thoresen",
    "url": "https://www.finansavisen.no/person/849/age-thoresen"
  },
  {
    "name": "Hans Peter Jebsen",
    "url": "https://www.finansavisen.no/person/668/hans-peter-jebsen"
  },
  {
    "name": "Ståle Kyllingstad",
    "url": "https://www.finansavisen.no/person/1001/stale-kyllingstad"
  },
  {
    "name": "Per Rolf Sævik",
    "url": "https://www.finansavisen.no/person/672/per-rolf-saevik"
  },
  {
    "name": "Tom Erik Klaveness",
    "url": "https://www.finansavisen.no/person/510/tom-erik-klaveness"
  },
  {
    "name": "Marit Mohn",
    "url": "https://www.finansavisen.no/person/523/marit-mohn"
  },
  {
    "name": "Tom Rune Pedersen",
    "url": "https://www.finansavisen.no/person/1207/tom-rune-pedersen"
  },
  {
    "name": "Kristian Arne Adolfsen",
    "url": "https://www.finansavisen.no/person/663/kristian-arne-adolfsen"
  },
  {
    "name": "Roger Adolfsen",
    "url": "https://www.finansavisen.no/person/507/roger-adolfsen"
  },
  {
    "name": "Helge Arvid Møgster",
    "url": "https://www.finansavisen.no/person/1027/helge-arvid-mogster"
  },
  {
    "name": "Jonas Ramm",
    "url": "https://www.finansavisen.no/person/854/jonas-ramm"
  },
  {
    "name": "Øyvin Anders Brøymer",
    "url": "https://www.finansavisen.no/person/824/oyvin-anders-broymer"
  },
  {
    "name": "Ola Helge Holmøy",
    "url": "https://www.finansavisen.no/person/673/ola-helge-holmoy"
  },
  {
    "name": "Harald Høegh",
    "url": "https://www.finansavisen.no/person/648/harald-hoegh"
  },
  {
    "name": "Kjetil Holta",
    "url": "https://www.finansavisen.no/person/1024/kjetil-holta"
  },
  {
    "name": "Trond Harald Klaveness",
    "url": "https://www.finansavisen.no/person/1174/trond-harald-klaveness"
  },
  {
    "name": "Trond Mohn",
    "url": "https://www.finansavisen.no/person/689/trond-mohn"
  },
  {
    "name": "Kjell Christian Ulrichsen",
    "url": "https://www.finansavisen.no/person/1005/kjell-christian-ulrichsen"
  },
  {
    "name": "Endre Røsjø",
    "url": "https://www.finansavisen.no/person/1219/endre-rosjo"
  },
  {
    "name": "Roy Gunnar Holth",
    "url": "https://www.finansavisen.no/person/680/roy-gunnar-holth"
  },
  {
    "name": "Øystein Stray Spetalen",
    "url": "https://www.finansavisen.no/person/839/oystein-stray-spetalen"
  },
  {
    "name": "Stein Marius Varner",
    "url": "https://www.finansavisen.no/person/843/stein-marius-varner"
  },
  {
    "name": "Petter Varner",
    "url": "https://www.finansavisen.no/person/1210/petter-varner"
  },
  {
    "name": "Tor Øivind Fjeld",
    "url": "https://www.finansavisen.no/person/516/tor-oivind-fjeld"
  },
  {
    "name": "Jakob Hatteland",
    "url": "https://www.finansavisen.no/person/514/jakob-hatteland"
  },
  {
    "name": "Johan Bernt Michelsen",
    "url": "https://www.finansavisen.no/person/802/johan-bernt-michelsen"
  },
  {
    "name": "Are Traasdahl",
    "url": "https://www.finansavisen.no/person/658/are-helge-traasdahl"
  },
  {
    "name": "Anne Catrine Møller",
    "url": "https://www.finansavisen.no/person/845/anne-catrine-moller"
  },
  {
    "name": "Frode Teigen",
    "url": "https://www.finansavisen.no/person/840/frode-teigen"
  },
  {
    "name": "Joakim Varner",
    "url": "https://www.finansavisen.no/person/1209/joakim-varner"
  },
  {
    "name": "Harald Møller",
    "url": "https://www.finansavisen.no/person/1215/harald-moller"
  },
  {
    "name": "Frederik Wilhelm Mohn",
    "url": "https://www.finansavisen.no/person/998/frederik-wilhelm-mohn"
  },
  {
    "name": "Morten Angelil",
    "url": "https://www.finansavisen.no/person/1249/morten-fernand-angelil"
  },
  {
    "name": "Stein Førde",
    "url": "https://www.finansavisen.no/person/511/stein-forde"
  },
  {
    "name": "Mélanie Tone Steensland Gotteberg",
    "url": "https://www.finansavisen.no/person/1202/m-lanie-tone-steensland-gotteberg"
  },
  {
    "name": "Morten Møller",
    "url": "https://www.finansavisen.no/person/676/morten-moller"
  },
  {
    "name": "Michael Steensland-Brun",
    "url": "https://www.finansavisen.no/person/665/michael-steensland-brun"
  },
  {
    "name": "Christian Ringnes",
    "url": "https://www.finansavisen.no/person/1019/christian-ringnes"
  },
  {
    "name": "Olav Stangeland",
    "url": "https://www.finansavisen.no/person/837/olav-stangeland"
  },
  {
    "name": "Børge Hald",
    "url": "https://www.finansavisen.no/person/518/borge-hald"
  },
  {
    "name": "Yuhong Jin Hermansen",
    "url": "https://www.finansavisen.no/person/1214/yuhong-jin-hermansen"
  },
  {
    "name": "Knut Nikolai Tønnevold Ugland",
    "url": "https://www.finansavisen.no/person/822/knut-nikolai-tonnevold-ugland"
  },
  {
    "name": "Menne Steensland",
    "url": "https://www.finansavisen.no/person/494/menne-steensland"
  },
  {
    "name": "Cathrine Rasmussen",
    "url": "https://www.finansavisen.no/person/649/cathrine-rasmussen"
  },
  {
    "name": "Helge Gåsø",
    "url": "https://www.finansavisen.no/person/1173/helge-gaso"
  },
  {
    "name": "Laurence Ward Odfjell",
    "url": "https://www.finansavisen.no/person/1198/laurence-ward-odfjell"
  },
  {
    "name": "Morten Simonsen",
    "url": "https://www.finansavisen.no/person/1153/morten-simonsen"
  }
]

```

## 📄 norway/norway2.json
*Lines: 387, Size: 10.5 KB*

```json
[
  {
    "name": "Michael Stang Treschow",
    "url": "https://www.finansavisen.no/person/670/michael-stang-treschow"
  },
  {
    "name": "Endre Tarald Glastad",
    "url": "https://www.finansavisen.no/person/1184/endre-tarald-glastad"
  },
  {
    "name": "Petter Neslein",
    "url": "https://www.finansavisen.no/person/1213/petter-neslein"
  },
  {
    "name": "Hjørdis Kluge Smedvig",
    "url": "https://www.finansavisen.no/person/1176/hjordis-kluge-smedvig"
  },
  {
    "name": "Morten Sigval Bergesen",
    "url": "https://www.finansavisen.no/person/1020/morten-sigval-bergesen"
  },
  {
    "name": "Johan Odvar Odfjell",
    "url": "https://www.finansavisen.no/person/826/johan-odvar-odfjell"
  },
  {
    "name": "Karl Lødrup Kvalheim",
    "url": "https://www.finansavisen.no/person/635/karl-lodrup-kvalheim"
  },
  {
    "name": "Tor Andenæs",
    "url": "https://www.finansavisen.no/person/1010/tor-andenaes"
  },
  {
    "name": "Ove Ingvard Utkilen",
    "url": "https://www.finansavisen.no/person/1185/ove-ingvard-utkilen"
  },
  {
    "name": "Rune Stokke",
    "url": "https://www.finansavisen.no/person/501/rune-stokke"
  },
  {
    "name": "Arthur Buchardt",
    "url": "https://www.finansavisen.no/person/1208/arthur-buchardt"
  },
  {
    "name": "Snorre Osvald Bentsen",
    "url": "https://www.finansavisen.no/person/1018/snorre-osvald-bentsen"
  },
  {
    "name": "Margaret Boel Garmann",
    "url": "https://www.finansavisen.no/person/1230/margaret-boel-garmann"
  },
  {
    "name": "Thomas Wilhelmsen",
    "url": "https://www.finansavisen.no/person/812/thomas-wilhelmsen"
  },
  {
    "name": "Eivind Gunvaldsen",
    "url": "https://www.finansavisen.no/person/1164/eivind-gunvaldsen"
  },
  {
    "name": "Harald Moræus-Hanssen",
    "url": "https://www.finansavisen.no/person/815/harald-moraeus-hanssen"
  },
  {
    "name": "Fritz Thorkil Rieber",
    "url": "https://www.finansavisen.no/person/1233/fritz-thorkil-rieber"
  },
  {
    "name": "Erling Braut Haaland",
    "url": "https://www.finansavisen.no/person/1159/erling-braut-haaland"
  },
  {
    "name": "Brynjar Kristian Forbergskog",
    "url": "https://www.finansavisen.no/person/1182/brynjar-kristian-forbergskog"
  },
  {
    "name": "Jacob Palmer Meland",
    "url": "https://www.finansavisen.no/person/624/jacob-palmer-meland"
  },
  {
    "name": "Ole Gunnar Selvaag",
    "url": "https://www.finansavisen.no/person/853/ole-gunnar-selvaag"
  },
  {
    "name": "Geir Hove",
    "url": "https://www.finansavisen.no/person/1206/geir-hove"
  },
  {
    "name": "Jon Erling Melhus",
    "url": "https://www.finansavisen.no/person/508/jon-erling-melhus"
  },
  {
    "name": "Ruth Katharina Mustad Bevreng",
    "url": "https://www.finansavisen.no/person/1226/ruth-katharina-mustad-bevreng"
  },
  {
    "name": "Kim Erla",
    "url": "https://www.finansavisen.no/person/1022/kim-erla"
  },
  {
    "name": "Terje Høili",
    "url": "https://www.finansavisen.no/person/1205/terje-tom-hoili"
  },
  {
    "name": "Stein Sturla Steinsvik",
    "url": "https://www.finansavisen.no/person/652/stein-sturla-steinsvik"
  },
  {
    "name": "Edvard Bakkejord",
    "url": "https://www.finansavisen.no/person/825/edvard-bakkejord"
  },
  {
    "name": "Espen Galtung Døsvig",
    "url": "https://www.finansavisen.no/person/869/espen-galtung-dosvig"
  },
  {
    "name": "Ole Gunerius Ottersland",
    "url": "https://www.finansavisen.no/person/662/ole-gunerius-ottersland"
  },
  {
    "name": "Julia Smedvig Hagland",
    "url": "https://www.finansavisen.no/person/706/julia-smedvig-hagland"
  },
  {
    "name": "Odd Einar Sandøy",
    "url": "https://www.finansavisen.no/person/834/odd-einar-sandoy"
  },
  {
    "name": "Ring Tore Teigen",
    "url": "https://www.finansavisen.no/person/828/ring-tore-teigen"
  },
  {
    "name": "Tor Olav Trøim",
    "url": "https://www.finansavisen.no/person/850/tor-olav-troim"
  },
  {
    "name": "Knut Gregardsøn Heje",
    "url": "https://www.finansavisen.no/person/1008/knut-gregardson-heje"
  },
  {
    "name": "Jan Petter Collier",
    "url": "https://www.finansavisen.no/person/1004/jan-petter-collier"
  },
  {
    "name": "Johannes Østensjø",
    "url": "https://www.finansavisen.no/person/818/johannes-ostensjo"
  },
  {
    "name": "Per Grieg jr.",
    "url": "https://www.finansavisen.no/person/832/per-grieg-jr"
  },
  {
    "name": "Jan Henrik Jebsen",
    "url": "https://www.finansavisen.no/person/1172/jan-henrik-jebsen"
  },
  {
    "name": "Hans Jørgen Lorentzen",
    "url": "https://www.finansavisen.no/person/646/hans-jorgen-lorentzen"
  },
  {
    "name": "Sverre Lorentzen",
    "url": "https://www.finansavisen.no/person/644/sverre-lorentzen"
  },
  {
    "name": "Lars Løseth",
    "url": "https://www.finansavisen.no/person/657/lars-loseth"
  },
  {
    "name": "Per Otto Rasmussen Dahl",
    "url": "https://www.finansavisen.no/person/483/per-otto-rasmussen-dahl"
  },
  {
    "name": "Atle Bergshaven",
    "url": "https://www.finansavisen.no/person/859/atle-bergshaven"
  },
  {
    "name": "Tone Synnøve Heje",
    "url": "https://www.finansavisen.no/person/1398/tone-synnove-heje"
  },
  {
    "name": "Trygve Jacobsen",
    "url": "https://www.finansavisen.no/person/1190/trygve-jacobsen"
  },
  {
    "name": "Stig Rune Remøy",
    "url": "https://www.finansavisen.no/person/491/stig-rune-remoy"
  },
  {
    "name": "Trygve Hegnar",
    "url": "https://www.finansavisen.no/person/667/trygve-hegnar"
  },
  {
    "name": "Kjell Haugland",
    "url": "https://www.finansavisen.no/person/1002/kjell-haugland"
  },
  {
    "name": "Tore Odfjell",
    "url": "https://www.finansavisen.no/person/1191/tore-odfjell"
  },
  {
    "name": "Trond Eirik Paulsen",
    "url": "https://www.finansavisen.no/person/807/trond-eirik-paulsen"
  },
  {
    "name": "Morten Astrup",
    "url": "https://www.finansavisen.no/person/987/morten-eivindsson-astrup"
  },
  {
    "name": "Camilla Marianne Grieg",
    "url": "https://www.finansavisen.no/person/829/camilla-marianne-grieg"
  },
  {
    "name": "Elisabeth Grieg",
    "url": "https://www.finansavisen.no/person/660/elisabeth-grieg"
  },
  {
    "name": "Elna-Kathrine Grieg",
    "url": "https://www.finansavisen.no/person/1015/elna-kathrine-grieg"
  },
  {
    "name": "Bernt Bodal",
    "url": "https://www.finansavisen.no/person/1399/bernt-bodal"
  },
  {
    "name": "Sverre Berger Brott",
    "url": "https://www.finansavisen.no/person/630/sverre-berger-brott"
  },
  {
    "name": "Didrik Eidsvig",
    "url": "https://www.finansavisen.no/person/674/didrik-eidsvig"
  },
  {
    "name": "Per Frost",
    "url": "https://www.finansavisen.no/person/533/per-frost"
  },
  {
    "name": "Arne Græe",
    "url": "https://www.finansavisen.no/person/697/arne-graee"
  },
  {
    "name": "Ole Peter Lorentzen",
    "url": "https://www.finansavisen.no/person/992/ole-peter-lorentzen"
  },
  {
    "name": "June Møgster",
    "url": "https://www.finansavisen.no/person/823/june-mogster"
  },
  {
    "name": "Lill Maren Møgster",
    "url": "https://www.finansavisen.no/person/1006/lill-maren-mogster"
  },
  {
    "name": "Finn Wilhelm Sinkaberg",
    "url": "https://www.finansavisen.no/person/1007/finn-wilhelm-sinkaberg"
  },
  {
    "name": "Bjarne Skeie",
    "url": "https://www.finansavisen.no/person/664/bjarne-skeie"
  },
  {
    "name": "Tom Hagen",
    "url": "https://www.finansavisen.no/person/875/tom-hagen"
  },
  {
    "name": "Jan Haudemann-Andersen",
    "url": "https://www.finansavisen.no/person/1016/jan-haudemann-andersen"
  },
  {
    "name": "Ragnar Horn",
    "url": "https://www.finansavisen.no/person/1229/ragnar-horn"
  },
  {
    "name": "Kristian Jebsen",
    "url": "https://www.finansavisen.no/person/1231/kristian-jebsen"
  },
  {
    "name": "Marianne Odfjell",
    "url": "https://www.finansavisen.no/person/1012/marianne-odfjell"
  },
  {
    "name": "Knut Øgreid",
    "url": "https://www.finansavisen.no/person/996/knut-ogreid"
  },
  {
    "name": "Jens Dag Ulltveit-Moe",
    "url": "https://www.finansavisen.no/person/1197/jens-dag-ulltveit-moe"
  },
  {
    "name": "Knut Hage",
    "url": "https://www.finansavisen.no/person/1187/knut-hage"
  },
  {
    "name": "Bjørn Risa",
    "url": "https://www.finansavisen.no/person/495/bjorn-risa"
  },
  {
    "name": "Tor Dagfinn Veen",
    "url": "https://www.finansavisen.no/person/1009/tor-dagfinn-veen"
  },
  {
    "name": "Egil Dahl",
    "url": "https://www.finansavisen.no/person/493/egil-christen-dahl"
  },
  {
    "name": "Bjørn Ole Gleditsch",
    "url": "https://www.finansavisen.no/person/653/bjorn-ole-gleditsch"
  },
  {
    "name": "Lars Kristoffer Loe",
    "url": "https://www.finansavisen.no/person/690/lars-kristoffer-loe"
  },
  {
    "name": "Geir Egil Roksvåg",
    "url": "https://www.finansavisen.no/person/1000/geir-egil-roksvag"
  },
  {
    "name": "Helen Juell",
    "url": "https://www.finansavisen.no/person/637/helen-juell"
  },
  {
    "name": "Morten Klein",
    "url": "https://www.finansavisen.no/person/1183/morten-klein"
  },
  {
    "name": "Ingvar Hognaland",
    "url": "https://www.finansavisen.no/person/804/ingvar-hognaland"
  },
  {
    "name": "Steinar Moe",
    "url": "https://www.finansavisen.no/person/1171/steinar-moe"
  },
  {
    "name": "Knut Axel Ugland",
    "url": "https://www.finansavisen.no/person/656/knut-axel-ugland"
  },
  {
    "name": "Anne Dahl",
    "url": "https://www.finansavisen.no/person/1400/anne-dahl"
  },
  {
    "name": "Carl Erik Krefting",
    "url": "https://www.finansavisen.no/person/1250/carl-erik-krefting"
  },
  {
    "name": "Dag Leo Martinsen",
    "url": "https://www.finansavisen.no/person/686/dag-leo-martinsen"
  },
  {
    "name": "Karl Ragnar Rimfeldt",
    "url": "https://www.finansavisen.no/person/1251/karl-ragnar-rimfeldt"
  },
  {
    "name": "Andreas Rasmussen Olsen",
    "url": "https://www.finansavisen.no/person/1401/andreas-rasmussen-olsen"
  },
  {
    "name": "Cecilie Paus",
    "url": "https://www.finansavisen.no/person/803/cecilie-paus"
  },
  {
    "name": "Magnus Haug Wanberg",
    "url": "https://www.finansavisen.no/person/1168/magnus-haug-wanberg"
  },
  {
    "name": "Rolf Westfal-Larsen",
    "url": "https://www.finansavisen.no/person/687/rolf-westfal-larsen"
  },
  {
    "name": "John Arild Ertvaag",
    "url": "https://www.finansavisen.no/person/876/john-arild-ertvaag"
  },
  {
    "name": "Kjell Arild Lorentsen",
    "url": "https://www.finansavisen.no/person/691/kjell-arild-lorentsen"
  },
  {
    "name": "Anders Opsahl",
    "url": "https://www.finansavisen.no/person/1193/anders-opsahl"
  },
  {
    "name": "Jim Roger Nordly",
    "url": "https://www.finansavisen.no/person/576/jim-roger-nordly"
  }
]

```

## 📄 norway/norway3.json
*Lines: 403, Size: 11.12 KB*

```json
[
  {
    "name": "Catharina Fiskerstrand Broch",
    "url": "https://www.finansavisen.no/person/485/catharina-fiskerstrand-broch"
  },
  {
    "name": "Anne Cecilie Gleditsch",
    "url": "https://www.finansavisen.no/person/685/anne-cecilie-gleditsch"
  },
  {
    "name": "Odd Gleditsch d.y.",
    "url": "https://www.finansavisen.no/person/521/odd-gleditsch-d-y"
  },
  {
    "name": "Roger Halsebakk",
    "url": "https://www.finansavisen.no/person/1003/roger-halsebakk"
  },
  {
    "name": "Ole Jacob Fiskerstrand Broch",
    "url": "https://www.finansavisen.no/person/1158/ole-jacob-fiskerstrand-broch"
  },
  {
    "name": "Per Audun Lillebø",
    "url": "https://www.finansavisen.no/person/1162/per-audun-lillebo"
  },
  {
    "name": "Stig Otto Nilsen",
    "url": "https://www.finansavisen.no/person/488/stig-otto-nilsen"
  },
  {
    "name": "Tom Christopher Steckmest",
    "url": "https://www.finansavisen.no/person/866/tom-christopher-steckmest"
  },
  {
    "name": "Finn Ørjan Sæle",
    "url": "https://www.finansavisen.no/person/1403/finn-orjan-saele"
  },
  {
    "name": "Ola Volstad",
    "url": "https://www.finansavisen.no/person/797/ola-volstad"
  },
  {
    "name": "Svenn Kornelius Bekken",
    "url": "https://www.finansavisen.no/person/1030/svenn-kornelius-bekken"
  },
  {
    "name": "Leif Hübert d.y.",
    "url": "https://www.finansavisen.no/person/816/leif-h-bert-d-y"
  },
  {
    "name": "Anders Kiær",
    "url": "https://www.finansavisen.no/person/809/anders-kiaer"
  },
  {
    "name": "Bjørn Nicolaisen",
    "url": "https://www.finansavisen.no/person/1194/bjorn-nicolaisen"
  },
  {
    "name": "Erik Bakkejord",
    "url": "https://www.finansavisen.no/person/997/erik-bakkejord"
  },
  {
    "name": "Elisabeth Eidsvig Vergara",
    "url": "https://www.finansavisen.no/person/981/elisabeth-eidsvig-vergara"
  },
  {
    "name": "Eilert Hanoa",
    "url": "https://www.finansavisen.no/person/1014/eilert-hanoa"
  },
  {
    "name": "Per Heidenreich",
    "url": "https://www.finansavisen.no/person/655/per-heidenreich"
  },
  {
    "name": "Ole Morten Halvorsen",
    "url": "https://www.finansavisen.no/person/918/ole-morten-halvorsen"
  },
  {
    "name": "Magne Roar Sangolt",
    "url": "https://www.finansavisen.no/person/856/magne-roar-sangolt"
  },
  {
    "name": "Johan Benad Ugland",
    "url": "https://www.finansavisen.no/person/1177/johan-bernhard-ugland"
  },
  {
    "name": "Kjell Blakseth",
    "url": "https://www.finansavisen.no/person/492/kjell-blakseth"
  },
  {
    "name": "Egil Giørtz",
    "url": "https://www.finansavisen.no/person/1405/egil-giortz"
  },
  {
    "name": "Julie Bonnevie Rasmussen",
    "url": "https://www.finansavisen.no/person/651/julie-bonnevie-rasmussen"
  },
  {
    "name": "Carl Einar Bonnevie Rasmussen",
    "url": "https://www.finansavisen.no/person/650/carl-einar-bonnevie-rasmussen"
  },
  {
    "name": "Karl Johan Sunde",
    "url": "https://www.finansavisen.no/person/821/karl-johan-sunde"
  },
  {
    "name": "Knut Flakk",
    "url": "https://www.finansavisen.no/person/1011/knut-flakk"
  },
  {
    "name": "Geir Harald Hansen",
    "url": "https://www.finansavisen.no/person/1406/geir-harald-hansen"
  },
  {
    "name": "Steffen Kirknes",
    "url": "https://www.finansavisen.no/person/1407/steffen-kirknes"
  },
  {
    "name": "Carl Otto Løvenskiold",
    "url": "https://www.finansavisen.no/person/645/carl-otto-lovenskiold"
  },
  {
    "name": "Agnes Elizabeth Astrup Mellbye",
    "url": "https://www.finansavisen.no/person/1163/agnes-elizabeth-astrup-mellbye"
  },
  {
    "name": "Ellen Karlsen Raaholt",
    "url": "https://www.finansavisen.no/person/870/ellen-karlsen-raaholt"
  },
  {
    "name": "Halle Ragnar Sivertsen",
    "url": "https://www.finansavisen.no/person/1212/halle-ragnar-sivertsen"
  },
  {
    "name": "Frode Strand-Nielsen",
    "url": "https://www.finansavisen.no/person/986/frode-strand-nielsen"
  },
  {
    "name": "Olav Svendsen",
    "url": "https://www.finansavisen.no/person/1189/olav-svendsen"
  },
  {
    "name": "Tone Bjørseth-Andersen",
    "url": "https://www.finansavisen.no/person/1166/tone-bjorseth-andersen"
  },
  {
    "name": "Roger Halshamn",
    "url": "https://www.finansavisen.no/person/678/roger-halshamn"
  },
  {
    "name": "Anders Pedersen",
    "url": "https://www.finansavisen.no/person/1248/anders-pedersen"
  },
  {
    "name": "Carl August Ameln",
    "url": "https://www.finansavisen.no/person/1408/carl-august-ameln"
  },
  {
    "name": "Anne Lise Braathen",
    "url": "https://www.finansavisen.no/person/1200/anne-lise-braathen"
  },
  {
    "name": "Per Georg Braathen",
    "url": "https://www.finansavisen.no/person/1203/per-georg-braathen"
  },
  {
    "name": "Bjørn Anders Braathen",
    "url": "https://www.finansavisen.no/person/1255/bjorn-anders-braathen"
  },
  {
    "name": "Cristina Gjurød Braathen",
    "url": "https://www.finansavisen.no/person/713/cristina-gjurod-braathen"
  },
  {
    "name": "Lasse Clarence Jensen",
    "url": "https://www.finansavisen.no/person/1409/lasse-clarence-jensen"
  },
  {
    "name": "Geir Langfeldt Olsen",
    "url": "https://www.finansavisen.no/person/1253/geir-langfeldt-olsen"
  },
  {
    "name": "Peder Lie",
    "url": "https://www.finansavisen.no/person/1051/peder-lie"
  },
  {
    "name": "Anders Måsøval",
    "url": "https://www.finansavisen.no/person/1220/anders-masoval"
  },
  {
    "name": "Else Katharina Astrup Petterøe",
    "url": "https://www.finansavisen.no/person/640/else-katharina-astrup-petteroe"
  },
  {
    "name": "Lars Måsøval",
    "url": "https://www.finansavisen.no/person/1221/lars-masoval"
  },
  {
    "name": "Eva Lilian Nordberg",
    "url": "https://www.finansavisen.no/person/677/eva-lilian-nordberg"
  },
  {
    "name": "Kim Wahl",
    "url": "https://www.finansavisen.no/person/529/kim-wahl"
  },
  {
    "name": "Espen Aubert",
    "url": "https://www.finansavisen.no/person/814/espen-aubert"
  },
  {
    "name": "Anders Endreson",
    "url": "https://www.finansavisen.no/person/1029/anders-endreson"
  },
  {
    "name": "Ståle Fatland",
    "url": "https://www.finansavisen.no/person/1160/stale-fatland"
  },
  {
    "name": "Thomas Gleditsch",
    "url": "https://www.finansavisen.no/person/1048/thomas-gleditsch"
  },
  {
    "name": "Francis Stückrath Hay",
    "url": "https://www.finansavisen.no/person/498/francis-st-ckrath-hay"
  },
  {
    "name": "Bjørn Halvor Kise",
    "url": "https://www.finansavisen.no/person/682/bjorn-halvor-kise"
  },
  {
    "name": "Henrik Müller-Hansen",
    "url": "https://www.finansavisen.no/person/1165/henrik-m-ller-hansen"
  },
  {
    "name": "Peder Nærbø",
    "url": "https://www.finansavisen.no/person/629/peder-naerbo"
  },
  {
    "name": "Per Halvard Strand",
    "url": "https://www.finansavisen.no/person/1178/per-halvard-strand"
  },
  {
    "name": "Carl Diderik Cappelen",
    "url": "https://www.finansavisen.no/person/1181/carl-diderik-cappelen"
  },
  {
    "name": "Arild Abel Engh",
    "url": "https://www.finansavisen.no/person/487/arild-abel-engh"
  },
  {
    "name": "Knut Erik Langtvedt Karlsen",
    "url": "https://www.finansavisen.no/person/1240/knut-erik-langtvedt-karlsen"
  },
  {
    "name": "Paul-Christian Rieber",
    "url": "https://www.finansavisen.no/person/534/paul-christian-rieber"
  },
  {
    "name": "Iben Anne-Marta Steinsvik",
    "url": "https://www.finansavisen.no/person/1065/iben-anne-marta-steinsvik"
  },
  {
    "name": "Borger Borgenhaug",
    "url": "https://www.finansavisen.no/person/838/borger-borgenhaug"
  },
  {
    "name": "Erik Gunnar Braathen",
    "url": "https://www.finansavisen.no/person/1036/erik-gunnar-braathen"
  },
  {
    "name": "Einar Øgrey Brandsdal",
    "url": "https://www.finansavisen.no/person/699/einar-ogrey-brandsdal"
  },
  {
    "name": "Randi Herre Eide",
    "url": "https://www.finansavisen.no/person/819/randi-herre-eide"
  },
  {
    "name": "Petter Fornæss",
    "url": "https://www.finansavisen.no/person/806/petter-fornaess"
  },
  {
    "name": "Leopold Axel Løvenskiold",
    "url": "https://www.finansavisen.no/person/1042/leopold-axel-lovenskiold"
  },
  {
    "name": "Jens Rugseth",
    "url": "https://www.finansavisen.no/person/659/jens-rugseth"
  },
  {
    "name": "Peter Tang Thomsen",
    "url": "https://www.finansavisen.no/person/502/peter-tang-thomsen"
  },
  {
    "name": "Elisabeth Brochmann",
    "url": "https://www.finansavisen.no/person/1199/elisabeth-brochmann"
  },
  {
    "name": "Henrik Advocaat Lund",
    "url": "https://www.finansavisen.no/person/639/henrik-advocaat-lund"
  },
  {
    "name": "Ståle Gudmund Simonsen",
    "url": "https://www.finansavisen.no/person/805/stale-gudmund-simonsen"
  },
  {
    "name": "Bertel Otto Steen jr.",
    "url": "https://www.finansavisen.no/person/864/bertel-otto-steen-jr"
  },
  {
    "name": "Tore Thorstensen",
    "url": "https://www.finansavisen.no/person/703/tore-thorstensen"
  },
  {
    "name": "Arne Veidung",
    "url": "https://www.finansavisen.no/person/1252/arne-veidung"
  },
  {
    "name": "Odd Johnny Winge",
    "url": "https://www.finansavisen.no/person/1047/odd-johnny-winge"
  },
  {
    "name": "Trygve Bjerke",
    "url": "https://www.finansavisen.no/person/817/trygve-bjerke"
  },
  {
    "name": "Bernt Eidesvik",
    "url": "https://www.finansavisen.no/person/627/bernt-eidesvik"
  },
  {
    "name": "Toril Eidesvik",
    "url": "https://www.finansavisen.no/person/983/toril-eidesvik"
  },
  {
    "name": "Eivind Eidesvik",
    "url": "https://www.finansavisen.no/person/801/eivind-eidesvik"
  },
  {
    "name": "Rolv Haugarvoll",
    "url": "https://www.finansavisen.no/person/1180/rolv-haugarvoll"
  },
  {
    "name": "Bjarne Kveim Lie",
    "url": "https://www.finansavisen.no/person/1411/bjarne-kveim-lie"
  },
  {
    "name": "Marianne Rieber",
    "url": "https://www.finansavisen.no/person/694/marianne-rieber"
  },
  {
    "name": "Ketil Sandhaug",
    "url": "https://www.finansavisen.no/person/490/ketil-sandhaug"
  },
  {
    "name": "Bjørn Richard Schage",
    "url": "https://www.finansavisen.no/person/1017/bjorn-richard-schage"
  },
  {
    "name": "Knut Schage",
    "url": "https://www.finansavisen.no/person/1201/knut-schage"
  },
  {
    "name": "Jens Petter Selmer",
    "url": "https://www.finansavisen.no/person/532/jens-petter-selmer"
  },
  {
    "name": "Nils Wenaas",
    "url": "https://www.finansavisen.no/person/708/nils-wenaas"
  },
  {
    "name": "Svein Atle Berge",
    "url": "https://www.finansavisen.no/person/1441/svein-atle-berge"
  },
  {
    "name": "Harald Espedal",
    "url": "https://www.finansavisen.no/person/643/harald-espedal"
  },
  {
    "name": "Jill Beate Gleditsch",
    "url": "https://www.finansavisen.no/person/698/jill-beate-gleditsch"
  },
  {
    "name": "Hans Martin Gravdal",
    "url": "https://www.finansavisen.no/person/1425/hans-martin-gravdal"
  },
  {
    "name": "Pål G. Gundersen",
    "url": "https://www.finansavisen.no/person/1032/pal-georg-gundersen"
  },
  {
    "name": "Aage Johan Remøy",
    "url": "https://www.finansavisen.no/person/628/aage-johan-remoy"
  },
  {
    "name": "Bjarte Tunold",
    "url": "https://www.finansavisen.no/person/638/bjarte-tunold"
  },
  {
    "name": "Sigurd Wahl",
    "url": "https://www.finansavisen.no/person/1192/sigurd-wahl"
  }
]

```

## 📄 norway/norway4.json
*Lines: 415, Size: 11.29 KB*

```json
[
  {
    "name": "Terje Bondø",
    "url": "https://www.finansavisen.no/person/827/terje-bondo"
  },
  {
    "name": "Maria Eidesvik",
    "url": "https://www.finansavisen.no/person/799/maria-eidesvik"
  },
  {
    "name": "Thor Johan Furuholmen",
    "url": "https://www.finansavisen.no/person/684/thor-johan-furuholmen"
  },
  {
    "name": "Knut Herman Holler Gjøvaag",
    "url": "https://www.finansavisen.no/person/811/knut-herman-holler-gjovaag"
  },
  {
    "name": "Fredrik Halvorsen",
    "url": "https://www.finansavisen.no/person/1046/fredrik-halvorsen"
  },
  {
    "name": "Ivar Løge",
    "url": "https://www.finansavisen.no/person/868/ivar-sigurdsson-loge"
  },
  {
    "name": "Leif Inge Nordhammer",
    "url": "https://www.finansavisen.no/person/530/leif-inge-nordhammer"
  },
  {
    "name": "Ole Rugland",
    "url": "https://www.finansavisen.no/person/1031/ole-rugland"
  },
  {
    "name": "Thor Spandow",
    "url": "https://www.finansavisen.no/person/499/thor-spandow"
  },
  {
    "name": "Odd Arvid Sulland",
    "url": "https://www.finansavisen.no/person/654/odd-arvid-sulland"
  },
  {
    "name": "Nils Martin Williksen",
    "url": "https://www.finansavisen.no/person/1023/nils-martin-williksen"
  },
  {
    "name": "Dag Adler Blakseth",
    "url": "https://www.finansavisen.no/person/631/dag-adler-blakseth"
  },
  {
    "name": "Geir Olav Drangsland",
    "url": "https://www.finansavisen.no/person/808/geir-olav-drangsland"
  },
  {
    "name": "Astrid Lærdal Frøseth",
    "url": "https://www.finansavisen.no/person/865/astrid-laerdal-froseth"
  },
  {
    "name": "Thomas Johan Jessen",
    "url": "https://www.finansavisen.no/person/1169/thomas-johan-jessen"
  },
  {
    "name": "Maria Olaisen",
    "url": "https://www.finansavisen.no/person/863/maria-olaisen"
  },
  {
    "name": "Håkon Olaisens etterlatte",
    "url": "https://www.finansavisen.no/person/1038/hakon-olaisens-etterlatte"
  },
  {
    "name": "Bjørn Steinar Berg-Hansen",
    "url": "https://www.finansavisen.no/person/991/bjorn-steinar-berg-hansen"
  },
  {
    "name": "Alexandra Margareth Angelil",
    "url": "https://www.finansavisen.no/person/995/alexandra-margareth-angelil"
  },
  {
    "name": "Edvin Austbø",
    "url": "https://www.finansavisen.no/person/1227/edvin-austbo"
  },
  {
    "name": "Terje Haugan",
    "url": "https://www.finansavisen.no/person/522/terje-haugan"
  },
  {
    "name": "Asle Helgheim",
    "url": "https://www.finansavisen.no/person/1234/asle-helgheim"
  },
  {
    "name": "Tor Kirkeng",
    "url": "https://www.finansavisen.no/person/860/tor-kirkeng"
  },
  {
    "name": "Ivar Koteng",
    "url": "https://www.finansavisen.no/person/705/ivar-johannes-koteng"
  },
  {
    "name": "Hilde Midthjell",
    "url": "https://www.finansavisen.no/person/520/hilde-midthjell"
  },
  {
    "name": "Roy Oddvar Myklebust",
    "url": "https://www.finansavisen.no/person/1050/roy-oddvar-myklebust"
  },
  {
    "name": "Aino Olaisen",
    "url": "https://www.finansavisen.no/person/696/aino-olaisen"
  },
  {
    "name": "Bjørn Petter Garder",
    "url": "https://www.finansavisen.no/person/426/bjorn-petter-garder"
  },
  {
    "name": "Ivar Refsnes",
    "url": "https://www.finansavisen.no/person/984/ivar-refsnes"
  },
  {
    "name": "Knut Roald",
    "url": "https://www.finansavisen.no/person/861/knut-roald"
  },
  {
    "name": "Severin Skaugen",
    "url": "https://www.finansavisen.no/person/712/severin-skaugen"
  },
  {
    "name": "Eli Sævareid",
    "url": "https://www.finansavisen.no/person/1254/eli-saevareid"
  },
  {
    "name": "Halgrim Thon",
    "url": "https://www.finansavisen.no/person/820/halgrim-thon"
  },
  {
    "name": "Ottar Vartdal",
    "url": "https://www.finansavisen.no/person/636/ottar-vartdal"
  },
  {
    "name": "Åge Engelstrand Westbø",
    "url": "https://www.finansavisen.no/person/1216/age-engelstrand-westbo"
  },
  {
    "name": "Richard Trygve Andvord",
    "url": "https://www.finansavisen.no/person/1224/richard-trygve-andvord"
  },
  {
    "name": "Kristian Michel Andvord",
    "url": "https://www.finansavisen.no/person/1028/kristian-michel-andvord"
  },
  {
    "name": "Odd Geir Bekkeli",
    "url": "https://www.finansavisen.no/person/989/odd-geir-bekkeli"
  },
  {
    "name": "Ola Emil Heggset",
    "url": "https://www.finansavisen.no/person/683/ola-emil-heggset"
  },
  {
    "name": "Dag Stian Stiansen",
    "url": "https://www.finansavisen.no/person/661/dag-stian-stiansen"
  },
  {
    "name": "Aasulv Tveitereid",
    "url": "https://www.finansavisen.no/person/419/aasulv-tveitereid"
  },
  {
    "name": "Kjell Andenæs",
    "url": "https://www.finansavisen.no/person/1044/kjell-andenaes"
  },
  {
    "name": "Axel Camillo Eitzen",
    "url": "https://www.finansavisen.no/person/1412/axel-camillo-eitzen"
  },
  {
    "name": "Erling Falch Monsen",
    "url": "https://www.finansavisen.no/person/422/erling-falch-monsen"
  },
  {
    "name": "Reynir Indahl",
    "url": "https://www.finansavisen.no/person/1413/reynir-indahl"
  },
  {
    "name": "Jørgen Jørgensen",
    "url": "https://www.finansavisen.no/person/1040/jorgen-jorgensen"
  },
  {
    "name": "Ole T. Bjørnevik",
    "url": "https://www.finansavisen.no/person/1416/ole-torberg-bjornevik"
  },
  {
    "name": "Jo Hanssen",
    "url": "https://www.finansavisen.no/person/1057/jo-hanssen"
  },
  {
    "name": "John Hatleskog",
    "url": "https://www.finansavisen.no/person/982/john-hatleskog"
  },
  {
    "name": "Erling Jenssen",
    "url": "https://www.finansavisen.no/person/846/erling-jenssen"
  },
  {
    "name": "Anton Jenssen",
    "url": "https://www.finansavisen.no/person/1026/anton-jenssen"
  },
  {
    "name": "Eva Maria Kristoffersen",
    "url": "https://www.finansavisen.no/person/842/eva-maria-kristoffersen"
  },
  {
    "name": "Bjørn Henrik Rasmussen",
    "url": "https://www.finansavisen.no/person/701/bjorn-henrik-rasmussen"
  },
  {
    "name": "Tollef Svenkerud",
    "url": "https://www.finansavisen.no/person/484/tollef-svenkerud"
  },
  {
    "name": "Hannah Eshete Wilhelmsen",
    "url": "https://www.finansavisen.no/person/795/hannah-eshete-wilhelmsen"
  },
  {
    "name": "Kjartan Aas",
    "url": "https://www.finansavisen.no/person/999/kjartan-aas"
  },
  {
    "name": "Ragnvald Albretsen",
    "url": "https://www.finansavisen.no/person/1037/ragnvald-albretsen"
  },
  {
    "name": "Morten Berg",
    "url": "https://www.finansavisen.no/person/887/morten-berg"
  },
  {
    "name": "Knut Galtung Døsvig",
    "url": "https://www.finansavisen.no/person/923/knut-galtung-dosvig"
  },
  {
    "name": "Even Andre Karlsen",
    "url": "https://www.finansavisen.no/person/1426/even-andre-karlsen"
  },
  {
    "name": "Espen Nordhus",
    "url": "https://www.finansavisen.no/person/873/espen-nordhus"
  },
  {
    "name": "Sigurd Marius Skaugen",
    "url": "https://www.finansavisen.no/person/1049/sigurd-marius-skaugen"
  },
  {
    "name": "Eli Sævareid",
    "url": "https://www.finansavisen.no/person/1254/eli-saevareid"
  },
  {
    "name": "Halgrim Thon",
    "url": "https://www.finansavisen.no/person/820/halgrim-thon"
  },
  {
    "name": "Ottar Vartdal",
    "url": "https://www.finansavisen.no/person/636/ottar-vartdal"
  },
  {
    "name": "Åge Engelstrand Westbø",
    "url": "https://www.finansavisen.no/person/1216/age-engelstrand-westbo"
  },
  {
    "name": "Richard Trygve Andvord",
    "url": "https://www.finansavisen.no/person/1224/richard-trygve-andvord"
  },
  {
    "name": "Kristian Michel Andvord",
    "url": "https://www.finansavisen.no/person/1028/kristian-michel-andvord"
  },
  {
    "name": "Odd Geir Bekkeli",
    "url": "https://www.finansavisen.no/person/989/odd-geir-bekkeli"
  },
  {
    "name": "Ola Emil Heggset",
    "url": "https://www.finansavisen.no/person/683/ola-emil-heggset"
  },
  {
    "name": "Dag Stian Stiansen",
    "url": "https://www.finansavisen.no/person/661/dag-stian-stiansen"
  },
  {
    "name": "Aasulv Tveitereid",
    "url": "https://www.finansavisen.no/person/419/aasulv-tveitereid"
  },
  {
    "name": "Kjell Andenæs",
    "url": "https://www.finansavisen.no/person/1044/kjell-andenaes"
  },
  {
    "name": "Axel Camillo Eitzen",
    "url": "https://www.finansavisen.no/person/1412/axel-camillo-eitzen"
  },
  {
    "name": "Erling Falch Monsen",
    "url": "https://www.finansavisen.no/person/422/erling-falch-monsen"
  },
  {
    "name": "Reynir Indahl",
    "url": "https://www.finansavisen.no/person/1413/reynir-indahl"
  },
  {
    "name": "Jørgen Jørgensen",
    "url": "https://www.finansavisen.no/person/1040/jorgen-jorgensen"
  },
  {
    "name": "Ole T. Bjørnevik",
    "url": "https://www.finansavisen.no/person/1416/ole-torberg-bjornevik"
  },
  {
    "name": "Jo Hanssen",
    "url": "https://www.finansavisen.no/person/1057/jo-hanssen"
  },
  {
    "name": "John Hatleskog",
    "url": "https://www.finansavisen.no/person/982/john-hatleskog"
  },
  {
    "name": "Erling Jenssen",
    "url": "https://www.finansavisen.no/person/846/erling-jenssen"
  },
  {
    "name": "Anton Jenssen",
    "url": "https://www.finansavisen.no/person/1026/anton-jenssen"
  },
  {
    "name": "Eva Maria Kristoffersen",
    "url": "https://www.finansavisen.no/person/842/eva-maria-kristoffersen"
  },
  {
    "name": "Bjørn Henrik Rasmussen",
    "url": "https://www.finansavisen.no/person/701/bjorn-henrik-rasmussen"
  },
  {
    "name": "Tollef Svenkerud",
    "url": "https://www.finansavisen.no/person/484/tollef-svenkerud"
  },
  {
    "name": "Hannah Eshete Wilhelmsen",
    "url": "https://www.finansavisen.no/person/795/hannah-eshete-wilhelmsen"
  },
  {
    "name": "Kjartan Aas",
    "url": "https://www.finansavisen.no/person/999/kjartan-aas"
  },
  {
    "name": "Ragnvald Albretsen",
    "url": "https://www.finansavisen.no/person/1037/ragnvald-albretsen"
  },
  {
    "name": "Morten Berg",
    "url": "https://www.finansavisen.no/person/887/morten-berg"
  },
  {
    "name": "Knut Galtung Døsvig",
    "url": "https://www.finansavisen.no/person/923/knut-galtung-dosvig"
  },
  {
    "name": "Even Andre Karlsen",
    "url": "https://www.finansavisen.no/person/1426/even-andre-karlsen"
  },
  {
    "name": "Espen Nordhus",
    "url": "https://www.finansavisen.no/person/873/espen-nordhus"
  },
  {
    "name": "Sigurd Marius Skaugen",
    "url": "https://www.finansavisen.no/person/1049/sigurd-marius-skaugen"
  },
  {
    "name": "Eli Sævareid",
    "url": "https://www.finansavisen.no/person/1254/eli-saevareid"
  },
  {
    "name": "Halgrim Thon",
    "url": "https://www.finansavisen.no/person/820/halgrim-thon"
  },
  {
    "name": "Ottar Vartdal",
    "url": "https://www.finansavisen.no/person/636/ottar-vartdal"
  },
  {
    "name": "Åge Engelstrand Westbø",
    "url": "https://www.finansavisen.no/person/1216/age-engelstrand-westbo"
  },
  {
    "name": "Richard Trygve Andvord",
    "url": "https://www.finansavisen.no/person/1224/richard-trygve-andvord"
  },
  {
    "name": "Kristian Michel Andvord",
    "url": "https://www.finansavisen.no/person/1028/kristian-michel-andvord"
  },
  {
    "name": "Odd Geir Bekkeli",
    "url": "https://www.finansavisen.no/person/989/odd-geir-bekkeli"
  },
  {
    "name": "Ola Emil Heggset",
    "url": "https://www.finansavisen.no/person/683/ola-emil-heggset"
  },
  {
    "name": "Dag Stian Stiansen",
    "url": "https://www.finansavisen.no/person/661/dag-stian-stiansen"
  },
  {
    "name": "Aasulv Tveitereid",
    "url": "https://www.finansavisen.no/person/419/aasulv-tveitereid"
  }
]

```

## 📄 norway/spain1.json
*Lines: 503, Size: 16.55 KB*

```json
[
  {
    "rank": 1,
    "name": "Amancio Ortega Gaona",
    "wealth (EUR Millions)": 118945,
    "company": "Inditex, Grupo Pontegadea",
    "sector": "Textil, Inmuebles, Energía",
    "location": "Galicia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/amancio-ortega-gaona.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 2,
    "name": "Rafael Del Pino y familia",
    "wealth (EUR Millions)": 14350,
    "company": "Ferrovial, Rijn Capital BV",
    "sector": "Construcción, Contratas, Energía",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/rafael-del-pino.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 3,
    "name": "Juan Roig Alfonso y familia",
    "wealth (EUR Millions)": 12245,
    "company": "Mercadona, Inmo Alameda SL",
    "sector": "Distribución",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/juan-roig-alfonso.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 4,
    "name": "Sandra Ortega Mera",
    "wealth (EUR Millions)": 9660,
    "company": "Inditex, Pharma Mar",
    "sector": "Textil, Inmuebles, Farmacéutica",
    "location": "Galicia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/sandra-ortega-mera.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 5,
    "name": "Sol Daurella Comadrán y familia",
    "wealth (EUR Millions)": 9375,
    "company": "Coca-Cola EuroPacific Partners, Cobega",
    "sector": "Alimentación, Bebidas",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/sol-daurella-comadran.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 6,
    "name": "Familia Puig",
    "wealth (EUR Millions)": 9050,
    "company": "Puig, Corporación Exea",
    "sector": "Moda, Cosmética, Inmuebles",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-puig.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 7,
    "name": "Familia March Delgado",
    "wealth (EUR Millions)": 6020,
    "company": "Grupo March, Corp. Financiera Alba",
    "sector": "Finanzas",
    "location": "Baleares",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-march-delgado.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 8,
    "name": "Francisco y Jon Riberas Mera",
    "wealth (EUR Millions)": 5805,
    "company": "Corporación Gestamp, Gonvarri",
    "sector": "Industria, Automoción, Renovables",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/francisco-y-jon-riberas-mera.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 9,
    "name": "Jordi Rubiralta Giralt y familia",
    "wealth (EUR Millions)": 5365,
    "company": "Werfen, Yukon Capital",
    "sector": "Salud, Inmuebles",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/jordi-rubiralta-giralt.html",
    "first_year_on_list": "2013"
  },
  {
    "rank": 10,
    "name": "Familia Entrecanales",
    "wealth (EUR Millions)": 5035,
    "company": "Acciona, Acciona Renovables",
    "sector": "Construcción, Renovables, Contratas",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-entrecanales.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 11,
    "name": "Carmen y Luis Riu Güell",
    "wealth (EUR Millions)": 4075,
    "company": "Riu Hotels",
    "sector": "Turismo",
    "location": "Baleares",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/carmen-y-luis-riu-guell.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 12,
    "name": "Familia Carulla Font",
    "wealth (EUR Millions)": 3710,
    "company": "Agrolimen, GB Foods",
    "sector": "Alimentación",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-carulla-font.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 13,
    "name": "Tomás Olivo López",
    "wealth (EUR Millions)": 3385,
    "company": "General de Galerías Comerciales",
    "sector": "Inmuebles",
    "location": "Murcia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/tomas-olivo-lopez.html",
    "first_year_on_list": "2018"
  },
  {
    "rank": 14,
    "name": "Javier Gómez-Trénor Vergés y familia",
    "wealth (EUR Millions)": 3315,
    "company": "Coca-Cola EuroPacific Partners",
    "sector": "Alimentación, Bebidas",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/javier-gomez-trenor-verges.html",
    "first_year_on_list": "2008"
  },
  {
    "rank": 15,
    "name": "Familias Balet y Aragüés",
    "wealth (EUR Millions)": 3155,
    "company": "Papelera Saica",
    "sector": "Industria, Papel",
    "location": "Aragón",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familias-balet-y-aragues.html",
    "first_year_on_list": "2008"
  },
  {
    "rank": 16,
    "name": "Antonio y Jorge Gallardo Ballart",
    "wealth (EUR Millions)": 3115,
    "company": "Almirall, Vithas",
    "sector": "Salud, Hospitales, Hoteles",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/antonio-y-jorge-gallardo-ballart.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 17,
    "name": "Juan Abelló Gallo",
    "wealth (EUR Millions)": 2885,
    "company": "Grupo Torreal, Nueva Cía. de Inversiones",
    "sector": "Finanzas, Terrateniente",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/juan-abello-gallo.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 18,
    "name": "Fernando Masaveu Herrero y familia",
    "wealth (EUR Millions)": 2690,
    "company": "Grupo Masaveu, EDP",
    "sector": "Finanzas, Energía, Industria",
    "location": "Asturias",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/fernando-masaveu-herrero.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 19,
    "name": "Miguel Fluxá Rosselló y familia",
    "wealth (EUR Millions)": 2625,
    "company": "Iberostar, Camper",
    "sector": "Turismo, Textil",
    "location": "Baleares",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/miguel-fluxa-rossello.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 20,
    "name": "Familia López-Belmonte",
    "wealth (EUR Millions)": 2410,
    "company": "Laboratorios Rovi",
    "sector": "Salud, Farmacéutica",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-lopez-belmonte.html",
    "first_year_on_list": "2012"
  },
  {
    "rank": 21,
    "name": "Familia Roca",
    "wealth (EUR Millions)": 2300,
    "company": "Corporación Roca",
    "sector": "Construcción, Cerámica",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-roca.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 22,
    "name": "Tomás Fuertes y familia",
    "wealth (EUR Millions)": 2285,
    "company": "Grupo Fuertes, El Pozo",
    "sector": "Alimentación, Cárnica, Hoteles",
    "location": "Murcia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/tomas-fuertes.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 23,
    "name": "Familia Andic Raig",
    "wealth (EUR Millions)": 2155,
    "company": "Mango, Punta Na Holding",
    "sector": "Textil, Inmuebles",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-andic-raig.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 24,
    "name": "Daniel Maté Badenes",
    "wealth (EUR Millions)": 2140,
    "company": "Glencore",
    "sector": "Industria, Minería",
    "location": "País Vasco",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/daniel-mate-badenes.html",
    "first_year_on_list": "2010"
  },
  {
    "rank": 25,
    "name": "Fernando Roig Alfonso y familia",
    "wealth (EUR Millions)": 2095,
    "company": "Mercadona, Pamesa",
    "sector": "Construcción, Distribución, Deportes",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/fernando-roig-alfonso.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 26,
    "name": "Dolores Ortega Renedo",
    "wealth (EUR Millions)": 2090,
    "company": "Inditex, Marlolan",
    "sector": "Textil, Inmuebles",
    "location": "Galicia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/dolores-ortega-renedo.html",
    "first_year_on_list": "2016"
  },
  {
    "rank": 27,
    "name": "José Llorens Torrá",
    "wealth (EUR Millions)": 2035,
    "company": "Epsa Group, Llotor",
    "sector": "Construcción, Minería, Inmuebles",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/jose-llorens-torra.html",
    "first_year_on_list": "2010"
  },
  {
    "rank": 28,
    "name": "Familia Luengo",
    "wealth (EUR Millions)": 2015,
    "company": "Samca",
    "sector": "Industria, Minería, Alimentación",
    "location": "Aragón",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-luengo.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 29,
    "name": "Familia Serra Farré",
    "wealth (EUR Millions)": 1945,
    "company": "Grupo Catalana Occidente",
    "sector": "Finanzas, Seguros",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-serra-farre.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 30,
    "name": "Guillermo Fierro Eleta",
    "wealth (EUR Millions)": 1930,
    "company": "Grupo Fierro, Ron Cartavio",
    "sector": "Finanzas, Industria",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/guillermo-fierro-eleta.html",
    "first_year_on_list": "2015"
  },
  {
    "rank": 31,
    "name": "Demetrio Carceller Arce y familia",
    "wealth (EUR Millions)": 1915,
    "company": "Disa Corporación Petrolífera, Damm",
    "sector": "Industria, Transporte, Alimentación",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/demetrio-carceller-arce.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 32,
    "name": "Alberto Palatchi Ribera",
    "wealth (EUR Millions)": 1910,
    "company": "Galma Capital, Gesprisa Sicav",
    "sector": "Textil, Inmuebles, Finanzas",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/alberto-palatchi-ribera.html",
    "first_year_on_list": "2009"
  },
  {
    "rank": 33,
    "name": "Ana Botín-Sanz de Sautuola O'Shea y hermanos",
    "wealth (EUR Millions)": 1860,
    "company": "Banco Santander",
    "sector": "Finanzas, Banca",
    "location": "Cantabria",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/ana-botin-sanz-de-sautuola-oshea.html",
    "first_year_on_list": "2014"
  },
  {
    "rank": 34,
    "name": "Familia Mahou",
    "wealth (EUR Millions)": 1840,
    "company": "Mahou San Miguel",
    "sector": "Alimentación, Bebidas",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-mahou.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 35,
    "name": "Florentino Pérez Rodríguez",
    "wealth (EUR Millions)": 1810,
    "company": "ACS",
    "sector": "Construcción, Contratas, Deportes",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/florentino-perez-rodriguez.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 36,
    "name": "Familia Botín Sanz Sautuola Naveda",
    "wealth (EUR Millions)": 1795,
    "company": "Bankinter, Cartival",
    "sector": "Finanzas, Banca, Renovables",
    "location": "Cantabria",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-botin-sanz-sautuola-naveda.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 37,
    "name": "Marco y José Luis Colomer Barrigón",
    "wealth (EUR Millions)": 1660,
    "company": "Pryconsa",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/marco-y-jose-luis-colomer-barrigon.html",
    "first_year_on_list": "2010"
  },
  {
    "rank": 38,
    "name": "Familia Freire",
    "wealth (EUR Millions)": 1650,
    "company": "Megasa",
    "sector": "Industria, Metalurgia",
    "location": "Galicia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-freire.html",
    "first_year_on_list": "2012"
  },
  {
    "rank": 39,
    "name": "Jesús Núñez Velázquez y familia",
    "wealth (EUR Millions)": 1575,
    "company": "Gesbolsa, UAX",
    "sector": "Educación, Salud",
    "location": "Castilla y León",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/jesus-nunez-velazquez.html",
    "first_year_on_list": "2010"
  },
  {
    "rank": 40,
    "name": "Familia Molins",
    "wealth (EUR Millions)": 1565,
    "company": "Cementos Molins",
    "sector": "Construcción",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-molins.html",
    "first_year_on_list": "2008"
  },
  {
    "rank": 41,
    "name": "Carmen Thyssen Bornemisza",
    "wealth (EUR Millions)": 1560,
    "company": "Imigolf SL, Groening Shipping LTD",
    "sector": "Arte, Inmuebles",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/carmen-thyssen-bornemisza.html",
    "first_year_on_list": "2007"
  },
  {
    "rank": 42,
    "name": "Simón Pedro Barceló Vadell y familia",
    "wealth (EUR Millions)": 1560,
    "company": "Barceló Hotels",
    "sector": "Turismo",
    "location": "Baleares",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/simon-pedro-barcelo-vadell.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 43,
    "name": "Víctor Grífols Roura y familia",
    "wealth (EUR Millions)": 1505,
    "company": "Grifols, Scranton BV",
    "sector": "Salud, Inmuebles",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/victor-grifols-roura.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 44,
    "name": "Marta y Cristina Álvarez Guil",
    "wealth (EUR Millions)": 1440,
    "company": "El Corte Inglés",
    "sector": "Distribución",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/marta-y-cristina-alvarez-guil.html",
    "first_year_on_list": "2014"
  },
  {
    "rank": 45,
    "name": "Carlos Javier Álvarez Navarro",
    "wealth (EUR Millions)": 1390,
    "company": "Santalucía",
    "sector": "Finanzas, Seguros, Inmuebles",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/carlos-javier-alvarez-navarro.html",
    "first_year_on_list": "2012"
  },
  {
    "rank": 46,
    "name": "Modesto Álvarez Otero",
    "wealth (EUR Millions)": 1365,
    "company": "Santalucía",
    "sector": "Finanzas, Seguros, Inmuebles",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/modesto-alvarez-otero.html",
    "first_year_on_list": "2020"
  },
  {
    "rank": 47,
    "name": "Manuel Lao Hernández",
    "wealth (EUR Millions)": 1365,
    "company": "Nortia Business Corporation",
    "sector": "Inmuebles, Hoteles, Juego",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/manuel-lao-hernandez.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 48,
    "name": "Rafael Domínguez de Gor y familia",
    "wealth (EUR Millions)": 1350,
    "company": "Mayoral, Indumenta Pueri",
    "sector": "Textil, Telecomunicaciones",
    "location": "Andalucía",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/rafael-dominguez-de-gor.html",
    "first_year_on_list": "2009"
  },
  {
    "rank": 49,
    "name": "Isabel Castelo D'Ortega",
    "wealth (EUR Millions)": 1345,
    "company": "Ocaso Seguros",
    "sector": "Finanzas, Seguros, Inmuebles",
    "location": "Galicia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/isabel-castelo-dortega.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 50,
    "name": "Encarna Piñero García y familia",
    "wealth (EUR Millions)": 1340,
    "company": "Soltur, Bahía Príncipe",
    "sector": "Turismo",
    "location": "Murcia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/encarna-pinero-garcia.html",
    "first_year_on_list": "2017"
  }
]

```

## 📄 norway/spain2.json
*Lines: 503, Size: 16.45 KB*

```json
[
  {
    "rank": 51,
    "name": "Eustasio López González y familia",
    "wealth (EUR Millions)": 1325,
    "company": "Lopesan Hoteles, IFA Group",
    "sector": "Turismo, Construcción",
    "location": "Canarias",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/eustasio-lopez-gonzalez.html",
    "first_year_on_list": "2008"
  },
  {
    "rank": 52,
    "name": "Familia Jove Santos",
    "wealth (EUR Millions)": 1310,
    "company": "Inveravante",
    "sector": "Inmuebles, Turismo, Vino",
    "location": "Galicia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-jove-santos.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 53,
    "name": "Juan y José Esteban Conesa Alcaraz",
    "wealth (EUR Millions)": 1300,
    "company": "Primafrío",
    "sector": "Transporte, Inmuebles",
    "location": "Murcia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/juan-y-jose-esteban-conesa-alcaraz.html",
    "first_year_on_list": "2022"
  },
  {
    "rank": 54,
    "name": "Ana y Germina Eva Gervás",
    "wealth (EUR Millions)": 1275,
    "company": "Mahou San Miguel",
    "sector": "Alimentación, Bebidas, Educación",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/ana-y-germina-eva-gervas.html",
    "first_year_on_list": "2018"
  },
  {
    "rank": 55,
    "name": "Alicia Koplowitz Romero de Juseu",
    "wealth (EUR Millions)": 1170,
    "company": "Omega Capital, Morinvest Sicav",
    "sector": "Finanzas, Metalurgia",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/alicia-koplowitz-romero-de-juseu.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 56,
    "name": "Familia Vall Esquerda",
    "wealth (EUR Millions)": 1145,
    "company": "Vall Companys",
    "sector": "Alimentación, Cárnica, Piensos",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-vall-esquerda.html",
    "first_year_on_list": "2010"
  },
  {
    "rank": 57,
    "name": "Familia Sainz de Vicuña y Bemberg",
    "wealth (EUR Millions)": 1125,
    "company": "Arconas Holding, Corporación Guadalmar",
    "sector": "Finanzas, Terrateniente",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-sainz-de-vicuna-y-bemberg.html",
    "first_year_on_list": "2009"
  },
  {
    "rank": 58,
    "name": "Miguel Tomás Arrufat Pujol",
    "wealth (EUR Millions)": 1115,
    "company": "Unir, Proeduca Altus",
    "sector": "Educación",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/miguel-tomas-arrufat-pujol.html",
    "first_year_on_list": "2020"
  },
  {
    "rank": 59,
    "name": "Familia García Baliña",
    "wealth (EUR Millions)": 1060,
    "company": "Finsa",
    "sector": "Construcción",
    "location": "Galicia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-garcia-balina.html",
    "first_year_on_list": "2018"
  },
  {
    "rank": 60,
    "name": "José Ignacio Comenge",
    "wealth (EUR Millions)": 1040,
    "company": "Coca-Cola EuroPacific Partners, Ebro Foods",
    "sector": "Alimentación, Bebidas",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/jose-ignacio-comenge.html",
    "first_year_on_list": "2009"
  },
  {
    "rank": 61,
    "name": "José Remohí Giménez",
    "wealth (EUR Millions)": 1005,
    "company": "Instituto Valenciano de Infertilidad (IVI)",
    "sector": "Salud, Fertilidad",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/jose-remohi-gimenez.html",
    "first_year_on_list": "2020"
  },
  {
    "rank": 62,
    "name": "Mario Losantos Ucha y familia",
    "wealth (EUR Millions)": 1000,
    "company": "Allegra Holding",
    "sector": "Inmuebles",
    "location": "La Rioja",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/mario-losantos-ucha.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 63,
    "name": "Víctor Madera Núñez",
    "wealth (EUR Millions)": 1000,
    "company": "HCI SA, Paisajes de Asturias",
    "sector": "Inmuebles, Salud",
    "location": "Asturias",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/victor-madera-nunez.html",
    "first_year_on_list": "2017"
  },
  {
    "rank": 64,
    "name": "Víctor Urrutia Vallejo",
    "wealth (EUR Millions)": 990,
    "company": "Asúa Inversiones, CVNE",
    "sector": "Alimentación, Vino, Finanzas",
    "location": "País Vasco",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/victor-urrutia-vallejo.html",
    "first_year_on_list": "2009"
  },
  {
    "rank": 65,
    "name": "Antonio Hernández Callejas y familia",
    "wealth (EUR Millions)": 975,
    "company": "Ebro Foods",
    "sector": "Alimentación, Arroz",
    "location": "Andalucía",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/antonio-hernandez-callejas.html",
    "first_year_on_list": "2007"
  },
  {
    "rank": 66,
    "name": "Familia Álvarez Ribalaygua",
    "wealth (EUR Millions)": 975,
    "company": "Aspla",
    "sector": "Industria, Plástico",
    "location": "Cantabria",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-alvarez-ribalaygua.html",
    "first_year_on_list": "2015"
  },
  {
    "rank": 67,
    "name": "Familia Escarrer Jaume",
    "wealth (EUR Millions)": 960,
    "company": "Meliá Hotels",
    "sector": "Turismo",
    "location": "Baleares",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-escarrer-jaume.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 68,
    "name": "Francisco Javier de Jaime Guijarro",
    "wealth (EUR Millions)": 960,
    "company": "CVC Spain",
    "sector": "Finanzas",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/francisco-javier-de-jaime-guijarro.html",
    "first_year_on_list": "2025"
  },
  {
    "rank": 69,
    "name": "Francisco Montoro Alemán y familia",
    "wealth (EUR Millions)": 960,
    "company": "GMP",
    "sector": "Inmuebles",
    "location": "Murcia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/francisco-montoro-aleman.html",
    "first_year_on_list": "2010"
  },
  {
    "rank": 70,
    "name": "José Luis Díaz López y familia",
    "wealth (EUR Millions)": 950,
    "company": "Santalucía",
    "sector": "Finanzas, Seguros, Inmuebles",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/jose-luis-diaz-lopez.html",
    "first_year_on_list": "2012"
  },
  {
    "rank": 71,
    "name": "Familia Santos Tejedor",
    "wealth (EUR Millions)": 950,
    "company": "Hoteles Santos, Nordeste Socimi",
    "sector": "Turismo, Inmuebles, Construcción",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-santos-tejedor.html",
    "first_year_on_list": "2019"
  },
  {
    "rank": 72,
    "name": "Francisco Martínez Cosentino-Justo y familia",
    "wealth (EUR Millions)": 940,
    "company": "Cosentino",
    "sector": "Construcción",
    "location": "Andalucía",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/francisco-martinez-cosentino-justo.html",
    "first_year_on_list": "2010"
  },
  {
    "rank": 73,
    "name": "Helena Revoredo Delvecchio",
    "wealth (EUR Millions)": 935,
    "company": "Prosegur",
    "sector": "Servicios, Seguridad",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/helena-revoredo-delvecchio.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 74,
    "name": "Hermanos Gómez Gómez",
    "wealth (EUR Millions)": 915,
    "company": "Mercadona",
    "sector": "Distribución",
    "location": "Andalucía",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/hermanos-gomez-gomez.html",
    "first_year_on_list": "2010"
  },
  {
    "rank": 75,
    "name": "Hermanos García-Baquero Vela",
    "wealth (EUR Millions)": 915,
    "company": "Lácteas García Baquero",
    "sector": "Alimentación, Lácteas, Inmuebles",
    "location": "Castilla-La Mancha",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/hermanos-garcia-baquero-vela.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 76,
    "name": "Familia Esteve Soler",
    "wealth (EUR Millions)": 895,
    "company": "Laboratorios Esteve",
    "sector": "Salud, Farmacéutica",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-esteve-soler.html",
    "first_year_on_list": "2008"
  },
  {
    "rank": 77,
    "name": "Carmen y Liliana Godia",
    "wealth (EUR Millions)": 885,
    "company": "G3T, BCN Godia",
    "sector": "Energía, Inmuebles",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/carmen-y-liliana-godia.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 78,
    "name": "Familia Serra",
    "wealth (EUR Millions)": 875,
    "company": "Fluidra",
    "sector": "Industria, Agua",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-serra.html",
    "first_year_on_list": "2013"
  },
  {
    "rank": 79,
    "name": "Ricardo Leal Cordobés",
    "wealth (EUR Millions)": 860,
    "company": "Cristian Lay, Global Energy Services (GES)",
    "sector": "Industria, Energía, Industria",
    "location": "Extremadura",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/ricardo-leal-cordobes.html",
    "first_year_on_list": "2018"
  },
  {
    "rank": 80,
    "name": "Familia Lladó Arburua",
    "wealth (EUR Millions)": 830,
    "company": "Técnicas Reunidas",
    "sector": "Industria",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-llado-arburua.html",
    "first_year_on_list": "2007"
  },
  {
    "rank": 81,
    "name": "Familia Sendagorta",
    "wealth (EUR Millions)": 830,
    "company": "Sener",
    "sector": "Industria",
    "location": "País Vasco",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-sendagorta.html",
    "first_year_on_list": "2011"
  },
  {
    "rank": 82,
    "name": "María José Soriano Manzanet y familia",
    "wealth (EUR Millions)": 815,
    "company": "Porcelanosa, Sorman",
    "sector": "Construcción, Cerámica, Inmuebles",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/maria-jose-soriano-manzanet.html",
    "first_year_on_list": "2007"
  },
  {
    "rank": 83,
    "name": "Familia Mora-Figueroa Domecq",
    "wealth (EUR Millions)": 810,
    "company": "Coca-Cola EuroPacific Partners",
    "sector": "Alimentación, Bebidas",
    "location": "Andalucía",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-mora-figueroa-domecq.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 84,
    "name": "Ricardo Portabella Peralta",
    "wealth (EUR Millions)": 810,
    "company": "Anpora, Alantra Partners",
    "sector": "Inmuebles, Finanzas",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/ricardo-portabella-peralta.html",
    "first_year_on_list": "2011"
  },
  {
    "rank": 85,
    "name": "Familia Arasa Figueras",
    "wealth (EUR Millions)": 805,
    "company": "Bamesa Aceros",
    "sector": "Industria, Metalurgia",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-arasa-figueras.html",
    "first_year_on_list": "2017"
  },
  {
    "rank": 86,
    "name": "Rafael González-Vallinas y familia",
    "wealth (EUR Millions)": 805,
    "company": "Grupo Vapat",
    "sector": "Energía, Renovables, Inmuebles",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/rafael-gonzalez-vallinas.html",
    "first_year_on_list": "2019"
  },
  {
    "rank": 87,
    "name": "Josep Lluís y José María Núñez Navarro",
    "wealth (EUR Millions)": 795,
    "company": "Núñez y Navarro",
    "sector": "Inmuebles, Hoteles",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/josep-lluis-y-jose-maria-nunez-navarro.html",
    "first_year_on_list": "2009"
  },
  {
    "rank": 88,
    "name": "Carlos Delclaux Zulueta y familia",
    "wealth (EUR Millions)": 795,
    "company": "Vidrala",
    "sector": "Industria",
    "location": "País Vasco",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/carlos-delclaux-zulueta.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 89,
    "name": "José Palau Mallol y hermanos",
    "wealth (EUR Millions)": 765,
    "company": "Soler & Palau",
    "sector": "Industria",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/jose-palau-mallol.html",
    "first_year_on_list": "2017"
  },
  {
    "rank": 90,
    "name": "Familia Ybarra Careaga",
    "wealth (EUR Millions)": 760,
    "company": "Onchena",
    "sector": "Finanzas",
    "location": "País Vasco",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-ybarra-careaga.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 91,
    "name": "Jordi Clos i Llombart",
    "wealth (EUR Millions)": 760,
    "company": "Derby Hotels",
    "sector": "Turismo",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/jordi-clos-i-llombart.html",
    "first_year_on_list": "2015"
  },
  {
    "rank": 92,
    "name": "Familia García Peralta",
    "wealth (EUR Millions)": 760,
    "company": "Tempe, Grupo Azarbe",
    "sector": "Textil, Calzado, Agricultura",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-garcia-peralta.html",
    "first_year_on_list": "2015"
  },
  {
    "rank": 93,
    "name": "Carlota Areces Galán y familia",
    "wealth (EUR Millions)": 760,
    "company": "El Corte Inglés",
    "sector": "Distribución",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/carlota-areces-galan.html",
    "first_year_on_list": "2007"
  },
  {
    "rank": 94,
    "name": "Josep Terradellas Arcarons",
    "wealth (EUR Millions)": 745,
    "company": "Casa Tarradellas",
    "sector": "Alimentación, Cárnica",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/josep-terradellas-arcarons.html",
    "first_year_on_list": "2010"
  },
  {
    "rank": 95,
    "name": "Familia Vilata",
    "wealth (EUR Millions)": 735,
    "company": "Edicom Capital",
    "sector": "Tecnología, Inmuebles",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-vilata.html",
    "first_year_on_list": "2023"
  },
  {
    "rank": 96,
    "name": "Luis Fernández Somoza",
    "wealth (EUR Millions)": 730,
    "company": "Carteson, Grupo TDN",
    "sector": "Transporte, Inmuebles",
    "location": "Galicia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/luis-fernandez-somoza.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 97,
    "name": "Eugenio Calabuig y hermanos",
    "wealth (EUR Millions)": 725,
    "company": "Aguas de Valencia",
    "sector": "Servicios, Agua",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/eugenio-calabuig.html",
    "first_year_on_list": "2023"
  },
  {
    "rank": 98,
    "name": "Antonio Sieira Mucientes",
    "wealth (EUR Millions)": 725,
    "company": "Ignis Energía SL, Ignis Equity holdings SL",
    "sector": "Energía, Renovables",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/antonio-sieira-mucientes.html",
    "first_year_on_list": "2023"
  },
  {
    "rank": 99,
    "name": "Federico Michavila Heras y familia",
    "wealth (EUR Millions)": 720,
    "company": "Torrecid",
    "sector": "Construcción, Cerámica",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/federico-michavila-heras.html",
    "first_year_on_list": "2017"
  },
  {
    "rank": 100,
    "name": "Familia Rivera",
    "wealth (EUR Millions)": 715,
    "company": "Estrella Galicia",
    "sector": "Alimentación, Bebidas",
    "location": "Galicia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-rivera.html",
    "first_year_on_list": "2016"
  }
]

```

## 📄 norway/spain3.json
*Lines: 503, Size: 16.5 KB*

```json
[
  {
    "rank": 101,
    "name": "Paloma García Peña y familia",
    "wealth (EUR Millions)": 700,
    "company": "El Corte Inglés",
    "sector": "Distribución",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/paloma-garcia-pena.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 102,
    "name": "Familia Samper Rivas",
    "wealth (EUR Millions)": 685,
    "company": "Grupo Jorge, Forestalia",
    "sector": "Alimentación, Cárnica, Renovables",
    "location": "Aragón",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-samper-rivas.html",
    "first_year_on_list": "2021"
  },
  {
    "rank": 103,
    "name": "Roberto Tojeiro Rodríguez y familia",
    "wealth (EUR Millions)": 675,
    "company": "Gadisa, Reganosa",
    "sector": "Distribución",
    "location": "Galicia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/roberto-tojeiro-rodriguez.html",
    "first_year_on_list": "2017"
  },
  {
    "rank": 104,
    "name": "Joan y Josep Font Fabregó",
    "wealth (EUR Millions)": 660,
    "company": "Bonpreu, Turttle Capital",
    "sector": "Distribución",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/joan-y-josep-font-fabrego.html",
    "first_year_on_list": "2019"
  },
  {
    "rank": 105,
    "name": "Héctor y Manuel Colonques Moreno",
    "wealth (EUR Millions)": 650,
    "company": "Porcelanosa",
    "sector": "Construcción, Cerámica",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/hector-y-manuel-colonques-moreno.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 106,
    "name": "José Manuel Cortizo Sóñora",
    "wealth (EUR Millions)": 645,
    "company": "Aluminios Cortizo",
    "sector": "Industria",
    "location": "Galicia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/jose-manuel-cortizo-sonora.html",
    "first_year_on_list": "2019"
  },
  {
    "rank": 107,
    "name": "José Miguel Isidro Rincón y familia",
    "wealth (EUR Millions)": 630,
    "company": "Ibervalles, Gaea SCR",
    "sector": "Inmuebles",
    "location": "Castilla y León",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/jose-miguel-isidro-rincon.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 108,
    "name": "Julio Iglesias de la Cueva",
    "wealth (EUR Millions)": 625,
    "company": "",
    "sector": "",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/julio-iglesias-de-la-cueva.html",
    "first_year_on_list": "2007"
  },
  {
    "rank": 109,
    "name": "Familia Arregui Abendivar",
    "wealth (EUR Millions)": 625,
    "company": "Ence",
    "sector": "Industria, Vino",
    "location": "País Vasco",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-arregui-abendivar.html",
    "first_year_on_list": "2007"
  },
  {
    "rank": 110,
    "name": "Vicente Boluda Fos",
    "wealth (EUR Millions)": 620,
    "company": "Corporación Boluda",
    "sector": "Transporte, Navieras, Puertos",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/vicente-boluda-fos.html",
    "first_year_on_list": "2020"
  },
  {
    "rank": 111,
    "name": "Alberto Cortina Alcocer",
    "wealth (EUR Millions)": 615,
    "company": "Alcor Corporación, ACS",
    "sector": "Construcción, Finanzas",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/alberto-cortina-alcocer.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 112,
    "name": "Jesús y José Luis Esteve Román",
    "wealth (EUR Millions)": 615,
    "company": "Neolith",
    "sector": "Construcción",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/jesus-y-jose-luis-esteve-roman.html",
    "first_year_on_list": "2024"
  },
  {
    "rank": 113,
    "name": "Abel Matutes Juan y familia",
    "wealth (EUR Millions)": 605,
    "company": "Palladium Hotels, Grupo de Empresas Matutes",
    "sector": "Turismo",
    "location": "Baleares",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/abel-matutes-juan.html",
    "first_year_on_list": "2007"
  },
  {
    "rank": 114,
    "name": "Familia Suqué Mateu",
    "wealth (EUR Millions)": 605,
    "company": "Grup Peralada, Inverama",
    "sector": "Juego, Vino, Industria",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-suque-mateu.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 115,
    "name": "Enrique Díaz-Tejeiro Gutiérrez y familia",
    "wealth (EUR Millions)": 600,
    "company": "Solaria",
    "sector": "Energía, Renovables, Inmuebles",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/enrique-diaz-tejeiro-gutierrez.html",
    "first_year_on_list": "2020"
  },
  {
    "rank": 116,
    "name": "Mercedes Calvo Caminero",
    "wealth (EUR Millions)": 595,
    "company": "Mahou San Miguel, Chocolates Trapa",
    "sector": "Alimentación, Bebidas",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/mercedes-calvo-caminero.html",
    "first_year_on_list": "2018"
  },
  {
    "rank": 117,
    "name": "Alberto Alcocer Torra",
    "wealth (EUR Millions)": 595,
    "company": "Alcor Corporación, ACS",
    "sector": "Finanzas",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/alberto-alcocer-torra.html",
    "first_year_on_list": "2020"
  },
  {
    "rank": 118,
    "name": "Felipe Peraire Palos",
    "wealth (EUR Millions)": 590,
    "company": "Mavdi Inversiones y Desarrollos SL",
    "sector": "Inmuebles",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/felipe-peraire-palos.html",
    "first_year_on_list": "2025"
  },
  {
    "rank": 119,
    "name": "Familia Lara",
    "wealth (EUR Millions)": 590,
    "company": "Grupo Planeta",
    "sector": "Comunicación, Finanzas",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-lara.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 120,
    "name": "Thomas Andreas Meyer",
    "wealth (EUR Millions)": 590,
    "company": "Desigual",
    "sector": "Textil",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/thomas-andreas-meyer.html",
    "first_year_on_list": "2007"
  },
  {
    "rank": 121,
    "name": "David Ruiz de Andrés",
    "wealth (EUR Millions)": 580,
    "company": "Grenergy, Dauran VC",
    "sector": "Energía, Renovables",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/david-ruiz-de-andres.html",
    "first_year_on_list": "2020"
  },
  {
    "rank": 122,
    "name": "Familia Usó Ferrera",
    "wealth (EUR Millions)": 570,
    "company": "Coca-Cola EuroPacific Partners",
    "sector": "Alimentación, Bebidas",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-uso-ferrera.html",
    "first_year_on_list": "2017"
  },
  {
    "rank": 123,
    "name": "Familia Jiménez Blázquez",
    "wealth (EUR Millions)": 570,
    "company": "Mediterránea 84 SL, Eryel Invest SL",
    "sector": "Servicios, Restauración, Inmuebles",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-jimenez-blazquez.html",
    "first_year_on_list": "2022"
  },
  {
    "rank": 124,
    "name": "Hermanos Bernat Serra",
    "wealth (EUR Millions)": 565,
    "company": "Bernat Family Office, Casa Batlló",
    "sector": "Inmuebles",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/hermanos-bernat-serra.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 125,
    "name": "Alberto Zardoya Arana y familia",
    "wealth (EUR Millions)": 565,
    "company": "ex Zardoya Ascensores, Mecalux",
    "sector": "Industria",
    "location": "País Vasco",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/alberto-zardoya-arana.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 126,
    "name": "Javier Ormazabal y familia",
    "wealth (EUR Millions)": 555,
    "company": "Velatia",
    "sector": "Industria",
    "location": "País Vasco",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/javier-ormazabal.html",
    "first_year_on_list": "2010"
  },
  {
    "rank": 127,
    "name": "José Antonio Jainaga Gómez",
    "wealth (EUR Millions)": 545,
    "company": "Sidenor",
    "sector": "Industria, Metalurgia",
    "location": "País Vasco",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/jose-antonio-jainaga-gomez.html",
    "first_year_on_list": "2022"
  },
  {
    "rank": 128,
    "name": "Juan y Pedro Alcaraz Alcaraz",
    "wealth (EUR Millions)": 540,
    "company": "Aligrupo Business Opportunities",
    "sector": "Inmuebles",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/juan-y-pedro-alcaraz-alcaraz.html",
    "first_year_on_list": "2016"
  },
  {
    "rank": 129,
    "name": "Familia Reyzábal",
    "wealth (EUR Millions)": 535,
    "company": "Reyza 2006, Forter",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-reyzabal.html",
    "first_year_on_list": "2008"
  },
  {
    "rank": 130,
    "name": "José Luis Carrillo Rodríguez y familia",
    "wealth (EUR Millions)": 535,
    "company": "Mecalux",
    "sector": "Industria",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/jose-luis-carrillo-rodriguez.html",
    "first_year_on_list": "2018"
  },
  {
    "rank": 131,
    "name": "Hermanos Pascual Sánchez-Gijón",
    "wealth (EUR Millions)": 530,
    "company": "Pascual Hospitales",
    "sector": "Salud, Hospitales",
    "location": "Andalucía",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/hermanos-pascual-sanchez-gijon.html",
    "first_year_on_list": "2009"
  },
  {
    "rank": 132,
    "name": "Familia Loriente Piqueras",
    "wealth (EUR Millions)": 525,
    "company": "Incarlopsa",
    "sector": "Alimentación, Cárnica",
    "location": "Castilla-La Mancha",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-loriente-piqueras.html",
    "first_year_on_list": "2018"
  },
  {
    "rank": 133,
    "name": "Nicolás Osuna García",
    "wealth (EUR Millions)": 520,
    "company": "Inmobiliaria Osuna, Hoteles Center",
    "sector": "Construcción, Turismo, Agricultura",
    "location": "Andalucía",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/nicolas-osuna-garcia.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 134,
    "name": "José Domingo Rodríguez Losada",
    "wealth (EUR Millions)": 520,
    "company": "Azata Patrimonio",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/jose-domingo-rodriguez-losada.html",
    "first_year_on_list": "2009"
  },
  {
    "rank": 135,
    "name": "José Galíndez Zubiria y familia",
    "wealth (EUR Millions)": 520,
    "company": "Beraunberri",
    "sector": "Energía, Telecomunicaciones, Inmuebles",
    "location": "País Vasco",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/jose-galindez-zubiria.html",
    "first_year_on_list": "2020"
  },
  {
    "rank": 136,
    "name": "Familia Ventós Omedes",
    "wealth (EUR Millions)": 505,
    "company": "Lucta, Eduardo Ventós",
    "sector": "Industria, Cosmética, Moda",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-ventos-omedes.html",
    "first_year_on_list": "2025"
  },
  {
    "rank": 137,
    "name": "Ángel Asín Barcelona",
    "wealth (EUR Millions)": 500,
    "company": "Arama Futuro",
    "sector": "Tecnología",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/angel-asin-barcelona.html",
    "first_year_on_list": "2024"
  },
  {
    "rank": 138,
    "name": "Familia Alonso Villarón",
    "wealth (EUR Millions)": 495,
    "company": "Grupo Daniel Alonso",
    "sector": "Industria, Renovables",
    "location": "Asturias",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-alonso-villaron.html",
    "first_year_on_list": "2022"
  },
  {
    "rank": 139,
    "name": "Familia Álvarez Mezquíriz",
    "wealth (EUR Millions)": 490,
    "company": "Eulen, Vega Sicilia",
    "sector": "Servicios, Vino",
    "location": "Castilla y León",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-alvarez-mezquiriz.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 140,
    "name": "Antonio Pellicer Martínez",
    "wealth (EUR Millions)": 490,
    "company": "Instituto Valenciano de Infertilidad (IVI), Nurolu SL",
    "sector": "Salud, Fertilidad, Transporte",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/antonio-pellicer-martinez.html",
    "first_year_on_list": "2020"
  },
  {
    "rank": 141,
    "name": "Juan Abarca y Carmen Cidón",
    "wealth (EUR Millions)": 485,
    "company": "HM Hospitales",
    "sector": "Salud",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/juan-abarca-y-carmen-cidon.html",
    "first_year_on_list": "2020"
  },
  {
    "rank": 142,
    "name": "Familia Tous Oriol",
    "wealth (EUR Millions)": 480,
    "company": "Tous, DayaDay",
    "sector": "Moda, Inmuebles",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-tous-oriol.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 143,
    "name": "Francisco José Elías Navarro",
    "wealth (EUR Millions)": 480,
    "company": "Audax, La Sirena",
    "sector": "Energía, Distribución, Inmuebles",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/francisco-jose-elias-navarro.html",
    "first_year_on_list": "2020"
  },
  {
    "rank": 144,
    "name": "Familia Gassó",
    "wealth (EUR Millions)": 480,
    "company": "Gassbona 2006 SL",
    "sector": "Inmuebles",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-gasso.html",
    "first_year_on_list": "2025"
  },
  {
    "rank": 145,
    "name": "Familia Carbó",
    "wealth (EUR Millions)": 465,
    "company": "Grup Caboel",
    "sector": "Inmuebles",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-carbo.html",
    "first_year_on_list": "2019"
  },
  {
    "rank": 146,
    "name": "Rosa María de Castellví",
    "wealth (EUR Millions)": 465,
    "company": "Instituto Valenciano de Infertilidad (IVI), DeCastellví 1323 SL",
    "sector": "Salud",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/rosa-maria-de-castellvi.html",
    "first_year_on_list": "2024"
  },
  {
    "rank": 147,
    "name": "Enrique Riquelme Vives",
    "wealth (EUR Millions)": 460,
    "company": "Cox Energy",
    "sector": "Energía, Renovables",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/enrique-riquelme-vives.html",
    "first_year_on_list": "2025"
  },
  {
    "rank": 148,
    "name": "Familia Gallego Jurado",
    "wealth (EUR Millions)": 460,
    "company": "Migasa, Aceites Ybarra",
    "sector": "Alimentación, Aceite",
    "location": "Andalucía",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-gallego-jurado.html",
    "first_year_on_list": "2017"
  },
  {
    "rank": 149,
    "name": "Familia Serna Lorente",
    "wealth (EUR Millions)": 455,
    "company": "Torreblanca del Mediterráneo, The Fives Hotels",
    "sector": "Inmuebles, Construcción, Hoteles",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-serna-lorente.html",
    "first_year_on_list": "2018"
  },
  {
    "rank": 150,
    "name": "Hermanos Domínguez Santana",
    "wealth (EUR Millions)": 455,
    "company": "Dinosol Supermercados, Grupo HD",
    "sector": "Distribución, Turismo",
    "location": "Canarias",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/hermanos-dominguez-santana.html",
    "first_year_on_list": "2022"
  }
]

```

## 📄 norway/spain4.json
*Lines: 503, Size: 16.36 KB*

```json
[
  {
    "rank": 151,
    "name": "Familia Amenabar Alday",
    "wealth (EUR Millions)": 455,
    "company": "Grupo Amenabar",
    "sector": "Construcción",
    "location": "País Vasco",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-amenabar-alday.html",
    "first_year_on_list": "2023"
  },
  {
    "rank": 152,
    "name": "Familia Nogareda",
    "wealth (EUR Millions)": 455,
    "company": "Laboratorios Hipra",
    "sector": "Salud",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-nogareda.html",
    "first_year_on_list": "2020"
  },
  {
    "rank": 153,
    "name": "Xabier Blanco Platero",
    "wealth (EUR Millions)": 445,
    "company": "Amixa Capital",
    "sector": "Energía, Renovables",
    "location": "Navarra",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/xabier-blanco-platero.html",
    "first_year_on_list": "2022"
  },
  {
    "rank": 154,
    "name": "Hermanos Domínguez Fernández",
    "wealth (EUR Millions)": 440,
    "company": "Textil Lonia (STL), Bimba y Lola",
    "sector": "Textil",
    "location": "Galicia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/hermanos-dominguez-fernandez.html",
    "first_year_on_list": "2018"
  },
  {
    "rank": 155,
    "name": "Javier Juncadella y familia",
    "wealth (EUR Millions)": 440,
    "company": "Grupo Catalana Occidente",
    "sector": "Finanzas, Seguros",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/javier-juncadella.html",
    "first_year_on_list": "2009"
  },
  {
    "rank": 156,
    "name": "Familia Botet",
    "wealth (EUR Millions)": 435,
    "company": "Grup Caboel",
    "sector": "Inmuebles",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-botet.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 157,
    "name": "Wolfgang Kiessling",
    "wealth (EUR Millions)": 430,
    "company": "Loro Parque",
    "sector": "Turismo",
    "location": "Canarias",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/wolfgang-kiessling.html",
    "first_year_on_list": "2017"
  },
  {
    "rank": 158,
    "name": "Familia Moratiel Llarena",
    "wealth (EUR Millions)": 425,
    "company": "MDR Inversiones SL, Hotel Wellington",
    "sector": "Inmuebles, Turismo",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-moratiel-llarena.html",
    "first_year_on_list": "2020"
  },
  {
    "rank": 159,
    "name": "Familia Alvargonzález Figaredo",
    "wealth (EUR Millions)": 420,
    "company": "Alvargonzález, Ership",
    "sector": "Transporte, Logística, Puertos",
    "location": "Asturias",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-alvargonzalez-figaredo.html",
    "first_year_on_list": "2017"
  },
  {
    "rank": 160,
    "name": "Antonio y Álvaro Muñoz Beraza",
    "wealth (EUR Millions)": 420,
    "company": "AMC Group Fresh & Juices",
    "sector": "Alimentación, Fruta y verdura, Bebidas",
    "location": "Murcia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/antonio-y-alvaro-munoz-beraza.html",
    "first_year_on_list": "2020"
  },
  {
    "rank": 161,
    "name": "Hermanos Ferrero Jordi",
    "wealth (EUR Millions)": 410,
    "company": "Idilia Foods",
    "sector": "Alimentación",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/hermanos-ferrero-jordi.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 162,
    "name": "Familia Planes Corts",
    "wealth (EUR Millions)": 405,
    "company": "Fluidra",
    "sector": "Industria, Agua",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-planes-corts.html",
    "first_year_on_list": "2020"
  },
  {
    "rank": 163,
    "name": "Manuel Añón Rey",
    "wealth (EUR Millions)": 400,
    "company": "Hierros Añón",
    "sector": "Industria, Metalurgia",
    "location": "Galicia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/manuel-anon-rey.html",
    "first_year_on_list": "2008"
  },
  {
    "rank": 164,
    "name": "Francisco Javier Moll de Miguel y familia",
    "wealth (EUR Millions)": 395,
    "company": "Prensa Ibérica, Corp. Corachan",
    "sector": "Comunicación, Inmuebles, Salud",
    "location": "Aragón",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/francisco-javier-moll-de-miguel.html",
    "first_year_on_list": "2019"
  },
  {
    "rank": 165,
    "name": "Familia Gallés Gabarró",
    "wealth (EUR Millions)": 395,
    "company": "Europastry",
    "sector": "Alimentación",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-galles-gabarro.html",
    "first_year_on_list": "2017"
  },
  {
    "rank": 166,
    "name": "Mª Teresa Rodríguez Sainz-Rozas y familia",
    "wealth (EUR Millions)": 395,
    "company": "Gullón",
    "sector": "Alimentación",
    "location": "Castilla y León",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/ma-teresa-rodriguez-sainz-rozas.html",
    "first_year_on_list": "2018"
  },
  {
    "rank": 167,
    "name": "Familia Cosmen",
    "wealth (EUR Millions)": 390,
    "company": "National Express, Alsa",
    "sector": "Transporte",
    "location": "Asturias",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-cosmen.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 168,
    "name": "Familia Simón",
    "wealth (EUR Millions)": 390,
    "company": "Simon Holding",
    "sector": "Industria, Iluminación",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-simon.html",
    "first_year_on_list": "2008"
  },
  {
    "rank": 169,
    "name": "Alexandre Pierron-Darbonne",
    "wealth (EUR Millions)": 385,
    "company": "Alpireva Investments SL, Label Investments",
    "sector": "Alimentación, Fruta y verdura, Tecnología",
    "location": "Navarra",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/alexandre-pierron-darbonne.html",
    "first_year_on_list": "2025"
  },
  {
    "rank": 170,
    "name": "Familia Matji",
    "wealth (EUR Millions)": 385,
    "company": "Cantabria Labs",
    "sector": "Salud, Farmacéutica",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-matji.html",
    "first_year_on_list": "2023"
  },
  {
    "rank": 171,
    "name": "Familia Navarro Iglesias",
    "wealth (EUR Millions)": 385,
    "company": "Navarro SiC, Navarro Generación SA",
    "sector": "Energía, Industria",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-navarro-iglesias.html",
    "first_year_on_list": "2023"
  },
  {
    "rank": 172,
    "name": "Alejandro Aznar Sainz y familia",
    "wealth (EUR Millions)": 385,
    "company": "Naviera Ibaizábal, Marqués de Riscal",
    "sector": "Transporte, Vino",
    "location": "País Vasco",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/alejandro-aznar-sainz.html",
    "first_year_on_list": "2008"
  },
  {
    "rank": 173,
    "name": "José García-Carrión Jordán",
    "wealth (EUR Millions)": 385,
    "company": "García Carrión",
    "sector": "Alimentación, Vino",
    "location": "Murcia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/jose-garcia-carrion-jordan.html",
    "first_year_on_list": "2011"
  },
  {
    "rank": 174,
    "name": "Familia Fernández Fermoselle",
    "wealth (EUR Millions)": 380,
    "company": "Naropa Capital",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-fernandez-fermoselle.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 175,
    "name": "Pedro Alonso Agüera",
    "wealth (EUR Millions)": 380,
    "company": "AM Gestió, Wallbox",
    "sector": "Industria, Automoción",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/pedro-alonso-aguera.html",
    "first_year_on_list": "2017"
  },
  {
    "rank": 176,
    "name": "Familia Vercher Company",
    "wealth (EUR Millions)": 380,
    "company": "Valier Agrícola",
    "sector": "Alimentación, Fruta y verdura",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-vercher-company.html",
    "first_year_on_list": "2024"
  },
  {
    "rank": 177,
    "name": "Familia Vall Pla",
    "wealth (EUR Millions)": 380,
    "company": "Harinera Vilafranquina, Piensos del Segre",
    "sector": "Alimentación, Harina",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-vall-pla.html",
    "first_year_on_list": "2018"
  },
  {
    "rank": 178,
    "name": "Familia Beca Borrego",
    "wealth (EUR Millions)": 375,
    "company": "Bekinsa",
    "sector": "Inmuebles",
    "location": "Andalucía",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-beca-borrego.html",
    "first_year_on_list": "2010"
  },
  {
    "rank": 179,
    "name": "Familia Andress Llinás",
    "wealth (EUR Millions)": 375,
    "company": "Aura Family Office SL",
    "sector": "Industria",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-andress-llinas.html",
    "first_year_on_list": "2023"
  },
  {
    "rank": 180,
    "name": "Jon Rahm Rodríguez",
    "wealth (EUR Millions)": 325,
    "company": "",
    "sector": "Deportes",
    "location": "País Vasco",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/jon-rahm-rodriguez.html",
    "first_year_on_list": "2025"
  },
  {
    "rank": 181,
    "name": "Familia Egaña Garitagoitia",
    "wealth (EUR Millions)": 375,
    "company": "Cie Automotive",
    "sector": "Industria, Automoción",
    "location": "País Vasco",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-egana-garitagoitia.html",
    "first_year_on_list": "2008"
  },
  {
    "rank": 182,
    "name": "Teodoro García Giménez",
    "wealth (EUR Millions)": 370,
    "company": "Grupo TGT, Egovox SL",
    "sector": "Alimentación, Lácteas",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/teodoro-garcia-gimenez.html",
    "first_year_on_list": "2025"
  },
  {
    "rank": 183,
    "name": "Familia Biosca Carbonell",
    "wealth (EUR Millions)": 370,
    "company": "Disa Corporación Petrolífera",
    "sector": "Industria, Energía, Transporte",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-biosca-carbonell.html",
    "first_year_on_list": "2018"
  },
  {
    "rank": 184,
    "name": "Familia Fradera Lloret",
    "wealth (EUR Millions)": 365,
    "company": "Lumbier de Inversiones",
    "sector": "Inmuebles, Turismo",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-fradera-lloret.html",
    "first_year_on_list": "2010"
  },
  {
    "rank": 185,
    "name": "Familia Sunyer",
    "wealth (EUR Millions)": 365,
    "company": "Ges Seguros y Reaseguros SA, Nacional de Reaseguros",
    "sector": "Finanzas, Seguros",
    "location": "Madrid",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-sunyer.html",
    "first_year_on_list": "2019"
  },
  {
    "rank": 186,
    "name": "Familia Martínez Zabala",
    "wealth (EUR Millions)": 360,
    "company": "Bodegas Faustino",
    "sector": "Alimentación, Vino",
    "location": "La Rioja",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-martinez-zabala.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 187,
    "name": "Familia Costa Cerezuela",
    "wealth (EUR Millions)": 355,
    "company": "Grupo Costa Casas, Casademont",
    "sector": "Alimentación, Cárnica, Piensos",
    "location": "Aragón",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-costa-cerezuela.html",
    "first_year_on_list": "2021"
  },
  {
    "rank": 188,
    "name": "José Antonio Castro Sousa y familia",
    "wealth (EUR Millions)": 355,
    "company": "Grupo Hesperia, Construcciones José Castro Sousa",
    "sector": "Turismo, Construcción",
    "location": "Galicia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/jose-antonio-castro-sousa.html",
    "first_year_on_list": "2019"
  },
  {
    "rank": 189,
    "name": "Javier Ventura Ferrero y familia",
    "wealth (EUR Millions)": 355,
    "company": "Adam Foods",
    "sector": "Alimentación",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/javier-ventura-ferrero.html",
    "first_year_on_list": "2006"
  },
  {
    "rank": 190,
    "name": "Familia Antolín",
    "wealth (EUR Millions)": 355,
    "company": "Grupo Antolin",
    "sector": "Industria, Automoción",
    "location": "Castilla y León",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-antolin.html",
    "first_year_on_list": "2007"
  },
  {
    "rank": 191,
    "name": "Familia Rived Zarazaga",
    "wealth (EUR Millions)": 350,
    "company": "Saica, Rived 2001 SL",
    "sector": "Industria, Papel",
    "location": "Aragón",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-rived-zarazaga.html",
    "first_year_on_list": "2023"
  },
  {
    "rank": 192,
    "name": "Familia Salegui",
    "wealth (EUR Millions)": 350,
    "company": "Cie Automotive, Vidrala",
    "sector": "Industria, Automoción, Industria",
    "location": "País Vasco",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-salegui.html",
    "first_year_on_list": "2012"
  },
  {
    "rank": 193,
    "name": "Familia Vallet",
    "wealth (EUR Millions)": 350,
    "company": "Catalonia Hotels&Resorts, Promotora Kasde SA",
    "sector": "Turismo",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-vallet.html",
    "first_year_on_list": "2025"
  },
  {
    "rank": 194,
    "name": "Familia García Lax",
    "wealth (EUR Millions)": 350,
    "company": "García Aranda, Juan Garcia Lax GmbH",
    "sector": "Alimentación, Agricultura",
    "location": "Murcia",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-garcia-lax.html",
    "first_year_on_list": "2025"
  },
  {
    "rank": 195,
    "name": "Santiago Domecq Bohórquez",
    "wealth (EUR Millions)": 350,
    "company": "Angustias y Sol, Cortijo La Peñuela",
    "sector": "Alimentación",
    "location": "Andalucía",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/santiago-domecq-bohorquez.html",
    "first_year_on_list": "2024"
  },
  {
    "rank": 196,
    "name": "Rafael Nadal Parera",
    "wealth (EUR Millions)": 345,
    "company": "Aspemir",
    "sector": "Deportes, Inmuebles",
    "location": "Baleares",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/rafael-nadal-parera.html",
    "first_year_on_list": ""
  },
  {
    "rank": 197,
    "name": "Dimas De Andrés Puyol y familia",
    "wealth (EUR Millions)": 345,
    "company": "Medcap Real Estate",
    "sector": "Inmuebles",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/dimas-de-andres-puyol.html",
    "first_year_on_list": "2016"
  },
  {
    "rank": 198,
    "name": "Julio Sorigué Zamorano y familia",
    "wealth (EUR Millions)": 345,
    "company": "Sorigué, Parlem",
    "sector": "Construcción, Contratas",
    "location": "Cataluña",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/julio-sorigue-zamorano.html",
    "first_year_on_list": "2022"
  },
  {
    "rank": 199,
    "name": "Familia Quesada Ibáñez",
    "wealth (EUR Millions)": 340,
    "company": "Pavasal",
    "sector": "Construcción, Contratas",
    "location": "C. Valenciana",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/familia-quesada-ibanez.html",
    "first_year_on_list": "2017"
  },
  {
    "rank": 200,
    "name": "Ignacio Sánchez Galán",
    "wealth (EUR Millions)": 340,
    "company": "Iberdrola",
    "sector": "Energía",
    "location": "Castilla y León",
    "profile_url": "https://www.elmundo.es/especiales/los-mas-ricos/ignacio-sanchez-galan.html",
    "first_year_on_list": "2025"
  }
]

```

## 📄 norway/spain5.json
*Lines: 503, Size: 12.64 KB*

```json
[
  {
    "rank": 201,
    "name": "Juan Fabre Marqués",
    "wealth (EUR Millions)": 340,
    "company": "Bancalé",
    "sector": "Inmuebles",
    "location": "Aragón",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 202,
    "name": "Familia Soler Rodríguez",
    "wealth (EUR Millions)": 335,
    "company": "Agrindus Investment, Lipsa",
    "sector": "Alimentación, Cosmética",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 203,
    "name": "Sergi Ferrer-Salat Serra Di Migni y familia",
    "wealth (EUR Millions)": 335,
    "company": "Laboratorios Ferrer",
    "sector": "Salud, Farmacéutica, Agricultura",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 204,
    "name": "Juan Miguel Sanjuán y Jover",
    "wealth (EUR Millions)": 330,
    "company": "Grupo Satocán, Sacyr",
    "sector": "Construcción, Renovables, Contratas",
    "location": "Canarias",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 205,
    "name": "Familia Aparici",
    "wealth (EUR Millions)": 330,
    "company": "STN Cerámica, Rimar",
    "sector": "Construcción, Cerámica",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 206,
    "name": "Familia Govantes",
    "wealth (EUR Millions)": 330,
    "company": "Laboratorios Normon",
    "sector": "Salud, Laboratorios",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 207,
    "name": "Maurice Botton Carasso",
    "wealth (EUR Millions)": 325,
    "company": "Germina, ex Danone",
    "sector": "Alimentación",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 208,
    "name": "Familia Sánchez Bernal",
    "wealth (EUR Millions)": 325,
    "company": "Fini, Sánchez Cano SA",
    "sector": "Alimentación",
    "location": "Murcia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 209,
    "name": "Juan Lao Hernández",
    "wealth (EUR Millions)": 325,
    "company": "Conej, Braker Corporation",
    "sector": "Juego, Inmuebles",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 210,
    "name": "Familia Uriach",
    "wealth (EUR Millions)": 325,
    "company": "Laboratorios J. Uriach",
    "sector": "Salud",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 211,
    "name": "Rafael Juan Fernández y familia",
    "wealth (EUR Millions)": 325,
    "company": "Vicky Foods",
    "sector": "Alimentación",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 212,
    "name": "Gregorio Álvarez Cabreros",
    "wealth (EUR Millions)": 325,
    "company": "Ibereólica Renovables, Grupo Iberecológica SL",
    "sector": "Energía, Renovables, Industria",
    "location": "Castilla y León",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 213,
    "name": "Familia Garrigós",
    "wealth (EUR Millions)": 325,
    "company": "Fluidra",
    "sector": "Industria, Agua",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 214,
    "name": "Familia Plomer Pujol",
    "wealth (EUR Millions)": 325,
    "company": "Hoteles Viva",
    "sector": "Turismo",
    "location": "Baleares",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 215,
    "name": "Familia Moya Yoldi",
    "wealth (EUR Millions)": 325,
    "company": "Persán",
    "sector": "Industria, Química",
    "location": "Andalucía",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 216,
    "name": "Juan Antonio Carpintero López y familia",
    "wealth (EUR Millions)": 320,
    "company": "Grupo Ortiz",
    "sector": "Construcción, Renovables, Energía",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 217,
    "name": "Familia Martín",
    "wealth (EUR Millions)": 320,
    "company": "Quesos Entrepinares",
    "sector": "Alimentación, Lácteas",
    "location": "Castilla y León",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 218,
    "name": "Familia Sanahuja",
    "wealth (EUR Millions)": 320,
    "company": "Indicesa",
    "sector": "Inmuebles",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 219,
    "name": "Enrique Bernardo García Chillón",
    "wealth (EUR Millions)": 315,
    "company": "Profand Fishing Holding SL",
    "sector": "Alimentación, Pesca",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 220,
    "name": "Familia Carrión Cáceres",
    "wealth (EUR Millions)": 315,
    "company": "Transportes J. Carrión, Veinsur",
    "sector": "Transporte, Automoción, Inmuebles",
    "location": "Andalucía",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 221,
    "name": "Familia Llull",
    "wealth (EUR Millions)": 315,
    "company": "Hipotels",
    "sector": "Turismo",
    "location": "Baleares",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 222,
    "name": "Miguel Carreras Calvete y familia",
    "wealth (EUR Millions)": 315,
    "company": "Transportes Carreras, Transportes",
    "sector": "Transporte, Inmuebles",
    "location": "Aragón",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 223,
    "name": "Ángel Jove Capellán",
    "wealth (EUR Millions)": 310,
    "company": "Anjoca",
    "sector": "Inmuebles, Turismo",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 224,
    "name": "Familia Ballester Ríos",
    "wealth (EUR Millions)": 305,
    "company": "Igsa",
    "sector": "Inmuebles, Turismo",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 225,
    "name": "Hermanos Solís Yáñez",
    "wealth (EUR Millions)": 305,
    "company": "Bodegas Félix Solís",
    "sector": "Alimentación, Vino",
    "location": "Castilla-La Mancha",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 226,
    "name": "Familia Batallé Deulonder",
    "wealth (EUR Millions)": 305,
    "company": "Cárnica Batallé, Carniques de Juià SA",
    "sector": "Alimentación, Cárnica, Piensos",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 227,
    "name": "Ángel Soria Vaquerizo",
    "wealth (EUR Millions)": 305,
    "company": "Torre Rioja",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 228,
    "name": "Familia Hinojosa Ventura",
    "wealth (EUR Millions)": 305,
    "company": "Rafael Hinojosa SA",
    "sector": "Industria, Papel",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 229,
    "name": "Jesús Huerta de Soto Ballester",
    "wealth (EUR Millions)": 305,
    "company": "España, SA Seguros",
    "sector": "Finanzas, Seguros",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 230,
    "name": "Familia Ucín",
    "wealth (EUR Millions)": 305,
    "company": "Algeposa, Bodegas Olarra",
    "sector": "Industria, Logística, Puertos",
    "location": "País Vasco",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 231,
    "name": "Daniel Bravo Andreu",
    "wealth (EUR Millions)": 300,
    "company": "Danimar 1990 SL, Acerinox",
    "sector": "Metalurgia, Inmuebles",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 232,
    "name": "Familia Miarnau Montserrat",
    "wealth (EUR Millions)": 300,
    "company": "Iosa Inmuebles, Comsa",
    "sector": "Inmuebles, Construcción",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 233,
    "name": "Miguel Ángel Gil Marín y familia",
    "wealth (EUR Millions)": 295,
    "company": "Atlético de Madrid",
    "sector": "Deportes, Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 234,
    "name": "Manuel Giró",
    "wealth (EUR Millions)": 295,
    "company": "Destilerías MG SL, Ron Barceló",
    "sector": "Alimentación, Bebidas",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 235,
    "name": "Leonardo Sánchez-Heredero Álvarez",
    "wealth (EUR Millions)": 295,
    "company": "Promociones Keops, Parcesa",
    "sector": "Construcción, Inmuebles, Funerarias",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 236,
    "name": "Familia Marí Washbourne",
    "wealth (EUR Millions)": 295,
    "company": "Alonso Marí",
    "sector": "Turismo",
    "location": "Baleares",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 237,
    "name": "Familia Miquel Ballart",
    "wealth (EUR Millions)": 295,
    "company": "ex Miquel Alimentació",
    "sector": "Inmuebles",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 238,
    "name": "Familia Matutes Barceló",
    "wealth (EUR Millions)": 295,
    "company": "Sirenis Hotels",
    "sector": "Turismo",
    "location": "Baleares",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 239,
    "name": "Alfonso Soláns Soláns",
    "wealth (EUR Millions)": 290,
    "company": "Pikolín, Iberebro",
    "sector": "Industria, Inmuebles",
    "location": "Aragón",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 240,
    "name": "Jesús Cantarero Morales",
    "wealth (EUR Millions)": 290,
    "company": "Tajoso Internacional Española SL, Alvinesa Natural Ingredients SA",
    "sector": "Alimentación, Bebidas",
    "location": "Castilla-La Mancha",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 241,
    "name": "José Manuel Loureda Mantiñán",
    "wealth (EUR Millions)": 290,
    "company": "Sacyr, Repsol",
    "sector": "Construcción, Contratas",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 242,
    "name": "Adolfo Utor",
    "wealth (EUR Millions)": 290,
    "company": "Balearia",
    "sector": "Transporte",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 243,
    "name": "Familia Santos Martínez",
    "wealth (EUR Millions)": 285,
    "company": "Inmobiliaria Sandi",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 244,
    "name": "Alejandro Chaves Martínez",
    "wealth (EUR Millions)": 285,
    "company": "OPDEnergy",
    "sector": "Energía, Renovables",
    "location": "Navarra",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 245,
    "name": "Gustavo Carrero Díez",
    "wealth (EUR Millions)": 285,
    "company": "Marearoja Internacional SL, OPDEnergy",
    "sector": "Energía, Renovables",
    "location": "País Vasco",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 246,
    "name": "Familia Martínez Ruiz",
    "wealth (EUR Millions)": 285,
    "company": "Panstar, Panamar Bakery Group",
    "sector": "Alimentación, Pan",
    "location": "Cantabria",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 247,
    "name": "José María Pacheco Guardiola",
    "wealth (EUR Millions)": 280,
    "company": "Grupo Konecta, Sainberg Olives",
    "sector": "Tecnología, Servicios, Agricultura",
    "location": "Andalucía",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 248,
    "name": "Jordi Mestre Masdeu",
    "wealth (EUR Millions)": 280,
    "company": "Step Foward, ex Selenta",
    "sector": "Turismo, Hoteles",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 249,
    "name": "Familia Iturri Franco",
    "wealth (EUR Millions)": 280,
    "company": "Iturri",
    "sector": "Servicios, Seguridad",
    "location": "Andalucía",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 250,
    "name": "Familia Torres",
    "wealth (EUR Millions)": 280,
    "company": "Bodegas Torres",
    "sector": "Alimentación, Vino",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  }
]

```

## 📄 norway/spain6.json
*Lines: 503, Size: 12.5 KB*

```json
[
  {
    "rank": 251,
    "name": "Antón María Pradera Jauregui",
    "wealth (EUR Millions)": 275,
    "company": "Cie Automotive",
    "sector": "Industria, Automoción",
    "location": "País Vasco",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 252,
    "name": "Marta Santacana Gri",
    "wealth (EUR Millions)": 275,
    "company": "Anagru Grup SL, Eurofred SA",
    "sector": "Industria, Energía",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 253,
    "name": "Familia Vivancos Muñoz",
    "wealth (EUR Millions)": 275,
    "company": "Grupo Tefim, Hispavima",
    "sector": "Inmuebles, Plástico",
    "location": "Murcia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 254,
    "name": "Familia Ramió Costa",
    "wealth (EUR Millions)": 275,
    "company": "Friselva",
    "sector": "Alimentación, Cárnica",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 255,
    "name": "Gerard Romy Belilos",
    "wealth (EUR Millions)": 275,
    "company": "ex Imagina, Mediapro",
    "sector": "Comunicación",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 256,
    "name": "Enrique Cerezo Torres",
    "wealth (EUR Millions)": 270,
    "company": "Vídeo Mercury Films, Atlético de Madrid",
    "sector": "Ocio, Cine, Deportes",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 257,
    "name": "Josep Espelt Civit",
    "wealth (EUR Millions)": 270,
    "company": "H10 Hotels",
    "sector": "Turismo",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 258,
    "name": "Tomás Pascual Gómez-Cuétara y familia",
    "wealth (EUR Millions)": 270,
    "company": "Calidad Pascual, Grupo Inmobiliario La Quinta",
    "sector": "Alimentación, Inmuebles",
    "location": "Castilla y León",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 259,
    "name": "José Luis Díaz-Varela Somoza y familia",
    "wealth (EUR Millions)": 270,
    "company": "Indukern",
    "sector": "Industria, Cosmética",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 260,
    "name": "Familia Jiménez Reverte",
    "wealth (EUR Millions)": 270,
    "company": "Grupo Juramenta, Jisap",
    "sector": "Alimentación, Cárnica, Agricultura",
    "location": "Murcia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 261,
    "name": "Familia Baroja",
    "wealth (EUR Millions)": 270,
    "company": "Conservas Cidacos",
    "sector": "Alimentación",
    "location": "La Rioja",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 262,
    "name": "Familia Hinojosa García-Puente",
    "wealth (EUR Millions)": 270,
    "company": "Darpat, Hinober 88 SL",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 263,
    "name": "Jaume Roures Llop",
    "wealth (EUR Millions)": 265,
    "company": "Mediacable Servicios de Producción SL, Orpheus Media",
    "sector": "Comunicación",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 264,
    "name": "Joseba Grajales Jiménez",
    "wealth (EUR Millions)": 265,
    "company": "Sanitas Internacional, Centauro Capital",
    "sector": "Industria, Salud",
    "location": "País Vasco",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 265,
    "name": "Familia Rosales",
    "wealth (EUR Millions)": 265,
    "company": "Alvic",
    "sector": "Industria, Muebles",
    "location": "Andalucía",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 266,
    "name": "Familia Romeu",
    "wealth (EUR Millions)": 265,
    "company": "Grupo Romeu",
    "sector": "Transporte, Logística, Puertos",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 267,
    "name": "Rosario Lafita González-Gayarra y Víctor Ruiz-Rubio",
    "wealth (EUR Millions)": 265,
    "company": "Inverlasa, Azkoyen",
    "sector": "Industria, Automoción",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 268,
    "name": "Constantino Fernández Pico",
    "wealth (EUR Millions)": 265,
    "company": "Altia Consulting",
    "sector": "Tecnología",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 269,
    "name": "Emilio Restoy Cabrera y familia",
    "wealth (EUR Millions)": 260,
    "company": "Zamora Company, Ramón Bilbao",
    "sector": "Alimentación, Bebidas",
    "location": "Murcia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 270,
    "name": "Fernando Gumuzio Íñiguez de Onzoño",
    "wealth (EUR Millions)": 260,
    "company": "Azora",
    "sector": "Inmuebles",
    "location": "País Vasco",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 271,
    "name": "Mikel Soraluze Celaya",
    "wealth (EUR Millions)": 260,
    "company": "Olot Meats Group, Cárnicas Celrà",
    "sector": "Alimentación, Cárnica",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 272,
    "name": "Familia Martinón García",
    "wealth (EUR Millions)": 260,
    "company": "Grupo Martinón Grumarsa",
    "sector": "Turismo, Construcción, Alimentación",
    "location": "Canarias",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 273,
    "name": "Familia Fuentes García",
    "wealth (EUR Millions)": 260,
    "company": "Grupo Ricardo Fuentes e Hijos SL",
    "sector": "Alimentación, Pesca, Inmuebles",
    "location": "Murcia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 274,
    "name": "Familia Lantero",
    "wealth (EUR Millions)": 260,
    "company": "Grupo Lantero",
    "sector": "Industria, Embalaje",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 275,
    "name": "Manuel y Carlos Muñoz García",
    "wealth (EUR Millions)": 255,
    "company": "Nesgar Promociones",
    "sector": "Inmuebles, Construcción",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 276,
    "name": "Susana y Yolanda García-Cereceda López",
    "wealth (EUR Millions)": 255,
    "company": "LaFinca Global Assets",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 277,
    "name": "Hermanos Martí Escursell",
    "wealth (EUR Millions)": 255,
    "company": "Marfina, Moventia",
    "sector": "Transporte",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 278,
    "name": "Javier y Ángel Escribano Ruiz",
    "wealth (EUR Millions)": 250,
    "company": "Escribano Mechanical & Engineering, Indra",
    "sector": "Defensa",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 279,
    "name": "Familia Arteche",
    "wealth (EUR Millions)": 245,
    "company": "Grupo Arteche",
    "sector": "Industria",
    "location": "País Vasco",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 280,
    "name": "Jaime Castellanos Borrego y familia",
    "wealth (EUR Millions)": 245,
    "company": "Lazars, Olive Partners SA",
    "sector": "Finanzas",
    "location": "País Vasco",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 281,
    "name": "Eduardo Santos-Ruiz Díaz",
    "wealth (EUR Millions)": 245,
    "company": "Barón de Ley",
    "sector": "Alimentación, Vino",
    "location": "Castilla y León",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 282,
    "name": "Fernando Núñez Rebolo",
    "wealth (EUR Millions)": 240,
    "company": "Restaurant Brands Iberia",
    "sector": "Restauración",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 283,
    "name": "Amid Achi Fadul",
    "wealth (EUR Millions)": 240,
    "company": "Almacenes Nº1",
    "sector": "Inmuebles, Inmuebles",
    "location": "Canarias",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 284,
    "name": "Manuel García Pardo",
    "wealth (EUR Millions)": 240,
    "company": "Greenalia",
    "sector": "Energía, Renovables",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 285,
    "name": "Josep María 'Tatxo' Benet",
    "wealth (EUR Millions)": 240,
    "company": "Imagina, Mediapro",
    "sector": "Comunicación",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 286,
    "name": "Luis de Valdivia Castro",
    "wealth (EUR Millions)": 240,
    "company": "Ecoener",
    "sector": "Energía, Renovables",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 287,
    "name": "Familia Oriol",
    "wealth (EUR Millions)": 235,
    "company": "Talgo",
    "sector": "Industria, Transporte",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 288,
    "name": "Familia Cánovas García",
    "wealth (EUR Millions)": 235,
    "company": "Moyca Grapes",
    "sector": "Alimentación",
    "location": "Murcia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 289,
    "name": "Familia Pont Amenós",
    "wealth (EUR Millions)": 235,
    "company": "Borges",
    "sector": "Alimentación",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 290,
    "name": "José Luis Carrillo Benítez",
    "wealth (EUR Millions)": 235,
    "company": "Optursa",
    "sector": "Turismo",
    "location": "Andalucía",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 291,
    "name": "Javier Virto Moreno",
    "wealth (EUR Millions)": 235,
    "company": "Grupo Virto",
    "sector": "Alimentación",
    "location": "Navarra",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 292,
    "name": "Ginés y María Jesús García Acebo",
    "wealth (EUR Millions)": 230,
    "company": "Gadisa",
    "sector": "Distribución",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 293,
    "name": "Familia Grimalt",
    "wealth (EUR Millions)": 230,
    "company": "Clave Denia SA, Ale-Hop Grimalt SL",
    "sector": "Distribución",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 294,
    "name": "Begoña, Pablo y Ana Serratosa Luján",
    "wealth (EUR Millions)": 230,
    "company": "Zríser",
    "sector": "Construcción",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 295,
    "name": "Concha Osácar",
    "wealth (EUR Millions)": 230,
    "company": "Azora",
    "sector": "Inmuebles",
    "location": "Navarra",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 296,
    "name": "Albert Costafreda Jo y hermanos",
    "wealth (EUR Millions)": 230,
    "company": "ex Panrico, Universal Panadería y Bollería (UPB)",
    "sector": "Alimentación, Inmuebles",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 297,
    "name": "César Álvarez Álvarez",
    "wealth (EUR Millions)": 230,
    "company": "El Corte Inglés, ACS",
    "sector": "Distribución, Construcción",
    "location": "Asturias",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 298,
    "name": "Familia Losantos Santorromán",
    "wealth (EUR Millions)": 225,
    "company": "Neinver",
    "sector": "Inmuebles",
    "location": "La Rioja",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 299,
    "name": "Familia Pereda Espeso",
    "wealth (EUR Millions)": 225,
    "company": "Grupo Lar",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 300,
    "name": "Familia Ayala",
    "wealth (EUR Millions)": 225,
    "company": "Grupo Ayala 2000",
    "sector": "Distribución",
    "location": "Andalucía",
    "profile_url": null,
    "first_year_on_list": ""
  }
]

```

## 📄 norway/spain7.json
*Lines: 503, Size: 12.52 KB*

```json
[
  {
    "rank": 301,
    "name": "Familia del Pueyo Cortijo",
    "wealth (EUR Millions)": 225,
    "company": "Banca Pueyo",
    "sector": "Finanzas, Banca",
    "location": "Extremadura",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 302,
    "name": "Pedro Agustín del Castillo Machado y familia",
    "wealth (EUR Millions)": 225,
    "company": "Casticar",
    "sector": "Turismo",
    "location": "Canarias",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 303,
    "name": "Generoso y Atilano Martín Blesa",
    "wealth (EUR Millions)": 220,
    "company": "Grupo Térvalis",
    "sector": "Industria",
    "location": "Aragón",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 304,
    "name": "Lorena y Marta Saus Cano",
    "wealth (EUR Millions)": 220,
    "company": "Eresa",
    "sector": "Salud",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 305,
    "name": "Familia Aperribay",
    "wealth (EUR Millions)": 220,
    "company": "Sapa Placencia SL, ITP Aero",
    "sector": "Industria, Armamento",
    "location": "País Vasco",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 306,
    "name": "Pedro Luis Cobiella",
    "wealth (EUR Millions)": 220,
    "company": "Grupo Hospitén",
    "sector": "Salud",
    "location": "Canarias",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 307,
    "name": "Familia Silveira",
    "wealth (EUR Millions)": 220,
    "company": "Grupo Nosa Terra 21, Naviera Elcano",
    "sector": "Transporte, Sanidad",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 308,
    "name": "Familia Corsini Muñoz",
    "wealth (EUR Millions)": 220,
    "company": "ex Corsán",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 309,
    "name": "Juan Carlos Ureta Domingo",
    "wealth (EUR Millions)": 215,
    "company": "Renta4 Banco",
    "sector": "Finanzas",
    "location": "País Vasco",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 310,
    "name": "Familia Mazín Mor",
    "wealth (EUR Millions)": 215,
    "company": "Dazia Capital Spain SL",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 311,
    "name": "Néstor Oller Bubé",
    "wealth (EUR Millions)": 215,
    "company": "Netri Investments",
    "sector": "Inmuebles, Turismo",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 312,
    "name": "Familia Mañaricúa Aristondo",
    "wealth (EUR Millions)": 215,
    "company": "Grupo Empresarial Gloria",
    "sector": "Turismo",
    "location": "Canarias",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 313,
    "name": "Elodia Mazón Andreu",
    "wealth (EUR Millions)": 215,
    "company": "Perfesan SA, Lomas de Campoamor SA",
    "sector": "Turismo, Construcción, Agricultura",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 314,
    "name": "Sergio y Victoria Perdiguero Miranda",
    "wealth (EUR Millions)": 210,
    "company": "Ahorramás",
    "sector": "Distribución",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 315,
    "name": "Familia Lladró",
    "wealth (EUR Millions)": 210,
    "company": "Agro Inmobiliaria SL, Invertige SL",
    "sector": "Inmuebles",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 316,
    "name": "Familia Zalacaín Puy",
    "wealth (EUR Millions)": 210,
    "company": "Balma",
    "sector": "Inmuebles",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 317,
    "name": "Felip Massot y familia",
    "wealth (EUR Millions)": 210,
    "company": "Vertix, Carmel Corporació 2000 SL",
    "sector": "Construcción, Inmuebles",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 318,
    "name": "Julio Lloves Vieira y familia",
    "wealth (EUR Millions)": 210,
    "company": "Mascato SA, Castro Celta SL",
    "sector": "Alimentación, Pesca",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 319,
    "name": "Familia Martínez",
    "wealth (EUR Millions)": 205,
    "company": "Embutidos Martínez, Torrent Fimer",
    "sector": "Alimentación, Cárnica, Inmuebles",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 320,
    "name": "Familia Cubo",
    "wealth (EUR Millions)": 205,
    "company": "Inmobiliaria Afar 4",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 321,
    "name": "Familia Bohórquez Domecq",
    "wealth (EUR Millions)": 205,
    "company": "Cortijo La Peñuela",
    "sector": "Alimentación",
    "location": "Andalucía",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 322,
    "name": "Pablo Isla de Tejera",
    "wealth (EUR Millions)": 205,
    "company": "Inditex",
    "sector": "Textil",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 323,
    "name": "Familia Gutiérrez Maturana-Larios",
    "wealth (EUR Millions)": 200,
    "company": "Grupo Salsa",
    "sector": "Alimentación, Inmuebles",
    "location": "Andalucía",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 324,
    "name": "Juan José Galiano Frías",
    "wealth (EUR Millions)": 200,
    "company": "Crein",
    "sector": "Inmuebles",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 325,
    "name": "Familia Pascual Bernabéu",
    "wealth (EUR Millions)": 200,
    "company": "Inversiones Industriales Serpis SL, Aquaclean",
    "sector": "Industria",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 326,
    "name": "Familia Pons",
    "wealth (EUR Millions)": 195,
    "company": "Importaco",
    "sector": "Alimentación",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 327,
    "name": "Familia Nogueira García",
    "wealth (EUR Millions)": 195,
    "company": "Grupo Nogar",
    "sector": "Transporte, Logística, Puertos",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 328,
    "name": "Vicente Berbegal Pérez",
    "wealth (EUR Millions)": 195,
    "company": "Actiu, Magenta Colors",
    "sector": "Industria, Muebles",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 329,
    "name": "Familia Pascual Sastre",
    "wealth (EUR Millions)": 195,
    "company": "Hoteles Viva",
    "sector": "Turismo",
    "location": "Baleares",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 330,
    "name": "Familia González Gordón",
    "wealth (EUR Millions)": 195,
    "company": "González Byass, Tio Pepe",
    "sector": "Alimentación, Vino",
    "location": "Andalucía",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 331,
    "name": "José Eulalio Poza Sanz",
    "wealth (EUR Millions)": 195,
    "company": "ex MasMóvil",
    "sector": "Telecomunicaciones",
    "location": "País Vasco",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 332,
    "name": "Familia Carregal",
    "wealth (EUR Millions)": 195,
    "company": "Frinsa del Noroeste",
    "sector": "Alimentación, Conservas",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 333,
    "name": "Hermanos Cañigueral",
    "wealth (EUR Millions)": 195,
    "company": "Grup Cañigueral",
    "sector": "Alimentación, Cárnica",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 334,
    "name": "Familia Argüelles Salaverría",
    "wealth (EUR Millions)": 190,
    "company": "Dehesa de Santa Amalia SL, Inversiones Moracho SL",
    "sector": "Finanzas, Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 335,
    "name": "Sabino Arrieta Heras",
    "wealth (EUR Millions)": 190,
    "company": "Nenigoen, ex Sidenor",
    "sector": "Industria, Metalurgia",
    "location": "País Vasco",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 336,
    "name": "Familia Fernández González",
    "wealth (EUR Millions)": 190,
    "company": "Alimerka",
    "sector": "Distribución",
    "location": "Asturias",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 337,
    "name": "Familia Ventura Arasanz",
    "wealth (EUR Millions)": 190,
    "company": "Laboratorio Ordesa, Europe Food",
    "sector": "Alimentación",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 338,
    "name": "Familia Rodríguez Coloma",
    "wealth (EUR Millions)": 190,
    "company": "Reny Picot, Industrias Lácteas Asturianas (ILAS)",
    "sector": "Alimentación, Lácteas",
    "location": "Asturias",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 339,
    "name": "Familia Luque García",
    "wealth (EUR Millions)": 190,
    "company": "Fuerte Group Hotels",
    "sector": "Turismo",
    "location": "Andalucía",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 340,
    "name": "Familia Torrente Blasco",
    "wealth (EUR Millions)": 190,
    "company": "Torrblas SL, Talgo",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 341,
    "name": "Familia Matosas",
    "wealth (EUR Millions)": 190,
    "company": "Mat Holding, Industrias Químicas del Vallés (IQV)",
    "sector": "Industria, Agricultura",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 342,
    "name": "Familia Pérez-Maura García-Botín",
    "wealth (EUR Millions)": 185,
    "company": "Naviera A. Pérez y Cía",
    "sector": "Transporte, Logística, Puertos",
    "location": "Cantabria",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 343,
    "name": "Familia Martos",
    "wealth (EUR Millions)": 185,
    "company": "Valcerrada de Inversiones, Marzábal",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 344,
    "name": "Rafael Gómez Aparicio",
    "wealth (EUR Millions)": 185,
    "company": "Norvo",
    "sector": "Turismo",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 345,
    "name": "Familia Campo Saez",
    "wealth (EUR Millions)": 185,
    "company": "Cerámica Campo, Macovit",
    "sector": "Construcción, Contratas",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 346,
    "name": "José Luis Manzanares Japón",
    "wealth (EUR Millions)": 185,
    "company": "",
    "sector": "Servicios, Consultoría",
    "location": "Andalucía",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 347,
    "name": "Familia González Delgado",
    "wealth (EUR Millions)": 180,
    "company": "Sancarin, Metis Global Holdings Ltd",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 348,
    "name": "Familia Sans Domenech",
    "wealth (EUR Millions)": 180,
    "company": "Volumetric, Chocolates Torras",
    "sector": "Construcción, Energía",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 349,
    "name": "Familia García-Baquero Arias",
    "wealth (EUR Millions)": 180,
    "company": "AM Locales Property SOCIMI, Haizea Wind",
    "sector": "Inmuebles, Renovables",
    "location": "Castilla-La Mancha",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 350,
    "name": "Familia Aguinaga",
    "wealth (EUR Millions)": 180,
    "company": "Biscaybay, Motor Mecha",
    "sector": "Inmuebles, Automoción",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  }
]

```

## 📄 norway/spain8.json
*Lines: 503, Size: 12.17 KB*

```json
[
  {
    "rank": 351,
    "name": "José Sabater Sánchez y familia",
    "wealth (EUR Millions)": 180,
    "company": "Sabater Spices",
    "sector": "Alimentación, Agricultura",
    "location": "Murcia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 352,
    "name": "Jacinto Rey González",
    "wealth (EUR Millions)": 180,
    "company": "Grupo San José",
    "sector": "Construcción, Contratas",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 353,
    "name": "Familia Sorli",
    "wealth (EUR Millions)": 175,
    "company": "Sorli Disclau",
    "sector": "Distribución",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 354,
    "name": "Familia Carvajal Ballester",
    "wealth (EUR Millions)": 175,
    "company": "Sodecar",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 355,
    "name": "Esther Koplowitz Romero de Juseu",
    "wealth (EUR Millions)": 175,
    "company": "FCC",
    "sector": "Construcción",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 356,
    "name": "Familia Porras Fontiveros",
    "wealth (EUR Millions)": 175,
    "company": "Myramar Grupo 1958",
    "sector": "Inmuebles, Construcción",
    "location": "Andalucía",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 357,
    "name": "Familia Ruiz García",
    "wealth (EUR Millions)": 175,
    "company": "Leng-d'Or",
    "sector": "Alimentación",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 358,
    "name": "Familia Palacios García",
    "wealth (EUR Millions)": 175,
    "company": "Finanzas del Iregua SL",
    "sector": "Inmuebles",
    "location": "La Rioja",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 359,
    "name": "Rafael Muñoz Toledo",
    "wealth (EUR Millions)": 175,
    "company": "APC Level",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 360,
    "name": "Familia Altuna Gallastegui",
    "wealth (EUR Millions)": 175,
    "company": "JMA",
    "sector": "Industria",
    "location": "País Vasco",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 361,
    "name": "Familia López Cerón",
    "wealth (EUR Millions)": 170,
    "company": "ACS",
    "sector": "Construcción",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 362,
    "name": "Familia González Iglesias",
    "wealth (EUR Millions)": 170,
    "company": "Vegalsa",
    "sector": "Distribución",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 363,
    "name": "Familia Piñera García",
    "wealth (EUR Millions)": 170,
    "company": "Grupo Scholtz, ex DYC",
    "sector": "Inmuebles, Construcción, Educación",
    "location": "Castilla y León",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 364,
    "name": "José María Fernández Sousa-Faro",
    "wealth (EUR Millions)": 170,
    "company": "Pharma Mar",
    "sector": "Salud, Laboratorios",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 365,
    "name": "Josefa Ortega Gaona",
    "wealth (EUR Millions)": 170,
    "company": "Inditex",
    "sector": "Textil",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 366,
    "name": "Familia Gracia",
    "wealth (EUR Millions)": 170,
    "company": "Himoinsa",
    "sector": "Industria",
    "location": "Murcia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 367,
    "name": "Familia Marca",
    "wealth (EUR Millions)": 170,
    "company": "Grupo AC Marca",
    "sector": "Industria, Química",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 368,
    "name": "Alejandro Alorda Derksen y familia",
    "wealth (EUR Millions)": 170,
    "company": "Kettal",
    "sector": "Distribución, Energía",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 369,
    "name": "José Fernando Sánchez Junco Mans",
    "wealth (EUR Millions)": 165,
    "company": "Maxam Corp",
    "sector": "Industria",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 370,
    "name": "Familia Beteré",
    "wealth (EUR Millions)": 165,
    "company": "Flex",
    "sector": "Industria",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 371,
    "name": "Familia Velasco Andreo",
    "wealth (EUR Millions)": 165,
    "company": "El Ciruelo",
    "sector": "Alimentación",
    "location": "Murcia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 372,
    "name": "Joan Subirats Berenguer",
    "wealth (EUR Millions)": 165,
    "company": "Subirats Bureau SL",
    "sector": "Turismo, Restauración",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 373,
    "name": "Jesús Manuel Alonso Escurís y familia",
    "wealth (EUR Millions)": 165,
    "company": "Corporación Jealsa, Conservas Rianxeira Sa",
    "sector": "Alimentación, Conservas",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 374,
    "name": "Familia Zazo Bello",
    "wealth (EUR Millions)": 165,
    "company": "Fuente Larín",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 375,
    "name": "Familia Cadarso",
    "wealth (EUR Millions)": 165,
    "company": "General de Relojería",
    "sector": "Moda, Joyería",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 376,
    "name": "Familia Llisó",
    "wealth (EUR Millions)": 165,
    "company": "Disa Corporación Petrolífera",
    "sector": "Industria, Transporte, Energía",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 377,
    "name": "Pablo Martín Rodríguez",
    "wealth (EUR Millions)": 165,
    "company": "Izertis",
    "sector": "Tecnología",
    "location": "Asturias",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 378,
    "name": "Familia Rodés Vilà",
    "wealth (EUR Millions)": 165,
    "company": "Aliada Investments, ISP Inversiones",
    "sector": "Comunicación",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 379,
    "name": "Familia Briones",
    "wealth (EUR Millions)": 160,
    "company": "Grupo Génova",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 380,
    "name": "Familia De la Mata",
    "wealth (EUR Millions)": 160,
    "company": "Varma, Ron Barceló",
    "sector": "Alimentación, Bebidas",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 381,
    "name": "José Ramón Urtasun Amann",
    "wealth (EUR Millions)": 160,
    "company": "Sidercom, Bodegas Ramírez de Ganuza",
    "sector": "Alimentación, Restauración",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 382,
    "name": "Ignacio Polanco Moreno y familia",
    "wealth (EUR Millions)": 160,
    "company": "Grupo Prisa",
    "sector": "Comunicación",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 383,
    "name": "Familia Palomo Rodríguez",
    "wealth (EUR Millions)": 160,
    "company": "Inversiones Jovima",
    "sector": "Turismo, Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 384,
    "name": "Familia Folch-Rusiñol Corachán",
    "wealth (EUR Millions)": 160,
    "company": "Industrias Titán",
    "sector": "Industria",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 385,
    "name": "Fructuoso López Gómez",
    "wealth (EUR Millions)": 160,
    "company": "Joma Sport",
    "sector": "Textil, Inmuebles",
    "location": "Castilla-La Mancha",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 386,
    "name": "Antonio Carrillo Baeza",
    "wealth (EUR Millions)": 160,
    "company": "Grupo Empresarial Carrillo, PTV Telecom",
    "sector": "Telecomunicaciones, Telefonía",
    "location": "Andalucía",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 387,
    "name": "Carmen y Rosario Beitia Larrouy",
    "wealth (EUR Millions)": 155,
    "company": "Gorbea de Arrendamientos",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 388,
    "name": "Familia Ros",
    "wealth (EUR Millions)": 155,
    "company": "R & T investments",
    "sector": "Servicios",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 389,
    "name": "Familia Bertolín",
    "wealth (EUR Millions)": 155,
    "company": "Cementos La Unión, Grupo Bertolín",
    "sector": "Construcción",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 390,
    "name": "Miguel Gargallo Lázaro",
    "wealth (EUR Millions)": 155,
    "company": "Hoteles Gargallo, Turismo",
    "sector": "Turismo",
    "location": "Aragón",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 391,
    "name": "Familia Buxadé Viñas",
    "wealth (EUR Millions)": 155,
    "company": "Laboratorios Viñas",
    "sector": "Salud, Laboratorios",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 392,
    "name": "Familia Collazo",
    "wealth (EUR Millions)": 155,
    "company": "Comar",
    "sector": "Juego",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 393,
    "name": "Familia Villagrá Blanco",
    "wealth (EUR Millions)": 155,
    "company": "Vidaro Inversiones SL",
    "sector": "Alimentación",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 394,
    "name": "Hermanos Bergareche Busquet",
    "wealth (EUR Millions)": 150,
    "company": "Ferrovial, MaxamCorp",
    "sector": "Industria",
    "location": "País Vasco",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 395,
    "name": "Manuel Turón Soto",
    "wealth (EUR Millions)": 150,
    "company": "R & T investments",
    "sector": "Industria",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 396,
    "name": "Francisco Luis Alarcón Mejías",
    "wealth (EUR Millions)": 150,
    "company": "Bon Natura",
    "sector": "Alimentación",
    "location": "Andalucía",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 397,
    "name": "Santiago Eguidazu Mayor",
    "wealth (EUR Millions)": 150,
    "company": "Alantra Partners",
    "sector": "Finanzas",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 398,
    "name": "Silvio Elías y familia",
    "wealth (EUR Millions)": 150,
    "company": "Grup Caboel, Veritas",
    "sector": "Inmuebles, Alimentación",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 399,
    "name": "Hermanos Hernández Sanchís",
    "wealth (EUR Millions)": 150,
    "company": "Grespania",
    "sector": "Construcción, Cerámica",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 400,
    "name": "Familia Lizarraga",
    "wealth (EUR Millions)": 150,
    "company": "Adania",
    "sector": "Construcción",
    "location": "Navarra",
    "profile_url": null,
    "first_year_on_list": ""
  }
]

```

## 📄 norway/spain9.json
*Lines: 493, Size: 11.94 KB*

```json
[
  {
    "rank": 401,
    "name": "Isabel Lipperheide Aguirre y familia",
    "wealth (EUR Millions)": 150,
    "company": "Minersa",
    "sector": "Minería",
    "location": "País Vasco",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 402,
    "name": "Francisco Argiles Felip",
    "wealth (EUR Millions)": 150,
    "company": "Nufri",
    "sector": "Alimentación, Energía",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 403,
    "name": "Ram Bhavnani y familia",
    "wealth (EUR Millions)": 150,
    "company": "Casa Kishoo, Altia Consulting",
    "sector": "Inmuebles, Finanzas",
    "location": "Canarias",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 404,
    "name": "Eusebio y María José Rubio Martín",
    "wealth (EUR Millions)": 150,
    "company": "Ahorramás",
    "sector": "Distribución",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 405,
    "name": "José Manuel Martínez Martínez",
    "wealth (EUR Millions)": 150,
    "company": "Ajusa, Hermasán",
    "sector": "Industria",
    "location": "Castilla-La Mancha",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 406,
    "name": "Familia Figueras Costa",
    "wealth (EUR Millions)": 150,
    "company": "Animua",
    "sector": "Inmuebles, Hoteles",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 407,
    "name": "Familia Ferrer Noguer",
    "wealth (EUR Millions)": 150,
    "company": "Freixenet",
    "sector": "Alimentación, Vino",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 408,
    "name": "Familia Creixell",
    "wealth (EUR Millions)": 150,
    "company": "Grupo Trabede",
    "sector": "Servicios, Residuos",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 409,
    "name": "Antonio Parente Dueña",
    "wealth (EUR Millions)": 150,
    "company": "GP Pharm, BCN Peptides",
    "sector": "Salud, Laboratorios",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 410,
    "name": "Familia Hernandez Navarro",
    "wealth (EUR Millions)": 150,
    "company": "Agrícola Paloma SA, Hernández Zamora SA",
    "sector": "Alimentación",
    "location": "Murcia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 411,
    "name": "Enrique y Begoña Azcárate Bernaola",
    "wealth (EUR Millions)": 150,
    "company": "ex Seguros La Previsora",
    "sector": "Finanzas",
    "location": "País Vasco",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 412,
    "name": "Familia Hernández",
    "wealth (EUR Millions)": 145,
    "company": "ex Transportes El Mosca",
    "sector": "Transporte",
    "location": "Murcia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 413,
    "name": "Hermanos Condal Escudé",
    "wealth (EUR Millions)": 145,
    "company": "ex Condis",
    "sector": "Distribución",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 414,
    "name": "Santos Montoro Muñoz",
    "wealth (EUR Millions)": 145,
    "company": "Monthisa",
    "sector": "Inmuebles",
    "location": "Murcia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 415,
    "name": "Ángel Martínez Santa",
    "wealth (EUR Millions)": 145,
    "company": "Xti",
    "sector": "Textil, Calzado",
    "location": "Murcia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 416,
    "name": "Familia Fernández-Ordás Abarca",
    "wealth (EUR Millions)": 145,
    "company": "Torimbia Socimi",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 417,
    "name": "Fernando López Arvelo",
    "wealth (EUR Millions)": 145,
    "company": "Grupo Fedola",
    "sector": "Turismo",
    "location": "Canarias",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 418,
    "name": "Familia Ciscar",
    "wealth (EUR Millions)": 145,
    "company": "Dacsa",
    "sector": "Alimentación, Arroz",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 419,
    "name": "Familia Rodríguez",
    "wealth (EUR Millions)": 145,
    "company": "Mariscos Rodríguez",
    "sector": "Alimentación",
    "location": "Andalucía",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 420,
    "name": "Familia Alsina",
    "wealth (EUR Millions)": 140,
    "company": "Corporación Guissona, Bon Área",
    "sector": "Alimentación, Cárnica",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 421,
    "name": "Familia Santiago Cubas",
    "wealth (EUR Millions)": 140,
    "company": "Grupo Félix Santiago Melián SL, Conagrican SL",
    "sector": "Agricultura, Renovables",
    "location": "Canarias",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 422,
    "name": "Familia Huguet",
    "wealth (EUR Millions)": 140,
    "company": "Misodi Rent, Mimesia",
    "sector": "Inmuebles, Hoteles",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 423,
    "name": "Fran Yúfera y Alfonso Tomás",
    "wealth (EUR Millions)": 140,
    "company": "PCComponentes",
    "sector": "Distribución",
    "location": "Murcia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 424,
    "name": "Modesto Rodríguez Blanco",
    "wealth (EUR Millions)": 140,
    "company": "Fincas del Noroeste",
    "sector": "Inmuebles",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 425,
    "name": "Félix Revuelta Fernández",
    "wealth (EUR Millions)": 140,
    "company": "Naturhouse, Kiluva",
    "sector": "Salud",
    "location": "La Rioja",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 426,
    "name": "Familia Reig Biosca",
    "wealth (EUR Millions)": 140,
    "company": "Reig Jofre",
    "sector": "Salud",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 427,
    "name": "Familia López Magdaleno",
    "wealth (EUR Millions)": 140,
    "company": "Magtel",
    "sector": "Energía, Renovables",
    "location": "Andalucía",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 428,
    "name": "Familia Hinojosa Vacas",
    "wealth (EUR Millions)": 140,
    "company": "Jupisa Tres",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 429,
    "name": "Familia Remiro",
    "wealth (EUR Millions)": 140,
    "company": "Ahorramás",
    "sector": "Distribución",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 430,
    "name": "Trinitario Casanova Abadía",
    "wealth (EUR Millions)": 140,
    "company": "Baraka",
    "sector": "Inmuebles",
    "location": "Murcia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 431,
    "name": "Pilar Muro Navarro e hijas",
    "wealth (EUR Millions)": 140,
    "company": "Blue Healthcare, Philyra",
    "sector": "Salud",
    "location": "Aragón",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 432,
    "name": "Blas Herrero Fernández",
    "wealth (EUR Millions)": 135,
    "company": "Kiss FM",
    "sector": "Comunicación",
    "location": "Asturias",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 433,
    "name": "Emilio Cuatrecasas Figueras",
    "wealth (EUR Millions)": 135,
    "company": "Emesa, Elior",
    "sector": "Inmuebles, Restauración",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 434,
    "name": "Familia Suárez Almeida",
    "wealth (EUR Millions)": 135,
    "company": "Helados Kalise",
    "sector": "Alimentación",
    "location": "Canarias",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 435,
    "name": "José Mª Soler y Susana Lloret",
    "wealth (EUR Millions)": 135,
    "company": "Ubesol, Laboratorios Maverick",
    "sector": "Industria",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 436,
    "name": "Familia Morodo Alcalá-Galiano",
    "wealth (EUR Millions)": 135,
    "company": "VTG Holding",
    "sector": "Alimentación, Bebidas",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 437,
    "name": "Dolores Taberner Taberner",
    "wealth (EUR Millions)": 135,
    "company": "SP Berner Plastic Group",
    "sector": "Industria, Plástico",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 438,
    "name": "Pedro Fernández Puentes y familia",
    "wealth (EUR Millions)": 135,
    "company": "Pharma Mar",
    "sector": "Salud",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 439,
    "name": "José María Caballé Horta",
    "wealth (EUR Millions)": 135,
    "company": "Servigroup hoteles",
    "sector": "Turismo",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 440,
    "name": "Familia Muñoz Delgado Robles",
    "wealth (EUR Millions)": 135,
    "company": "Mucor",
    "sector": "Inmuebles",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 441,
    "name": "Francisco Gil Eixarch",
    "wealth (EUR Millions)": 135,
    "company": "Grupo Gil Comes SL",
    "sector": "Alimentación, Pesca, Conservas",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 442,
    "name": "Familia Froiz",
    "wealth (EUR Millions)": 135,
    "company": "Froiz",
    "sector": "Distribución",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 443,
    "name": "Antonio Catalán",
    "wealth (EUR Millions)": 135,
    "company": "AC Hotels & Marriot, Grupo Belagua",
    "sector": "Turismo, Industria",
    "location": "Navarra",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 444,
    "name": "Familia Gimeno Escrig",
    "wealth (EUR Millions)": 135,
    "company": "Facsa, Intur",
    "sector": "Inmuebles",
    "location": "C. Valenciana",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 445,
    "name": "Dimas Gimeno Álvarez y familia",
    "wealth (EUR Millions)": 135,
    "company": "Wow Shop Madrid, El Corte Inglés",
    "sector": "Distribución",
    "location": "Madrid",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 446,
    "name": "Margarita Prado López",
    "wealth (EUR Millions)": 130,
    "company": "Pescapuerta",
    "sector": "Alimentación, Pesca",
    "location": "Galicia",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 447,
    "name": "Rafael Adrián Adrián",
    "wealth (EUR Millions)": 130,
    "company": "Adrián Hoteles",
    "sector": "Turismo",
    "location": "Canarias",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 448,
    "name": "Jesús Franco Muñoz y familia",
    "wealth (EUR Millions)": 130,
    "company": "Recreativos Franco",
    "sector": "Juego",
    "location": "Castilla-La Mancha",
    "profile_url": null,
    "first_year_on_list": ""
  },
  {
    "rank": 449,
    "name": "Ricardo Urgell Martí y familia",
    "wealth (EUR Millions)": 130,
    "company": "El Firmamento Estelar SL",
    "sector": "Turismo",
    "location": "Cataluña",
    "profile_url": null,
    "first_year_on_list": ""
  }
]

```

## 📄 package.json
*Lines: 79, Size: 3.98 KB*

```json
{
  "name": "@headlines/pipeline",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "pipeline": "./run.sh src/app.js --",
    "cli:help": "./run.sh scripts/scripts/list.js",
    "test": "jest",
    "test:upserter": "./run.sh test:upserter --",
    "db:seed:all": "./run.sh scripts/seed/seed-settings.js && ./run.sh scripts/seed/seed-countries.js && ./run.sh scripts/seed/seed-admin-user.js",
    "seed:ingest-opportunities": "./run.sh scripts/seed/ingest-opportunity-files.js --",
    "db:seed:settings": "./run.sh scripts/seed/seed-settings.js",
    "db:seed:countries": "./run.sh scripts/seed/seed-countries.js",
    "db:seed:admin": "./run.sh scripts/seed/seed-admin-user.js",
    "db:purge-external": "bash ./scripts/tools/purge-external-collections.sh",
    "maintenance:delete-relevant-today": "./run.sh scripts/maintenance/delete-relevant-today.js",
    "maintenance:refresh": "./run.sh scripts/maintenance/refresh.js",
    "maintenance:reset-assessed-today": "./run.sh scripts/maintenance/reset-assessed-today.js",
    "maintenance:reset-relevant-today": "./run.sh scripts/maintenance/reset-relevant-today.js",
    "maintenance:backfill-assessed": "./run.sh scripts/maintenance/backfill-assessed-articles.js",
    "maintenance:delete-today": "./run.sh scripts/maintenance/delete-today.js --",
    "maintenance:reprocess-specific": "./run.sh scripts/maintenance/reprocess-specific-articles.js --",
    "maintenance:reprocess": "./run.sh scripts/maintenance/reprocess-lost-articles.js",
    "maintenance:fix-countries": "./run.sh scripts/maintenance/fix-event-countries.js",
    "maintenance:backfill-countries": "./run.sh scripts/maintenance/backfill-event-article-countries.js",
    "maintenance:recover-opps": "./run.sh scripts/maintenance/recover-opportunities.js --",
    "results:list-events": "./run.sh scripts/results/list-events.js",
    "results:resend-today": "./run.sh scripts/results/resend-todays-events.js",
    "results:send-last-events": "./run.sh scripts/results/send-last-events.js --",
    "subscribers:list": "./run.sh scripts/subscribers/list.js",
    "subscribers:update": "./run.sh scripts/subscribers/update.js --",
    "watchlist:list": "./run.sh scripts/watchlist/list.js --",
    "sources:list": "./run.sh scripts/sources/list.js --",
    "sources:list-headlines": "./run.sh scripts/sources/list-headlines.js --",
    "sources:debug-content": "./run.sh scripts/sources/debug-content.js --",
    "sources:scrape-one": "./run.sh scripts/sources/scrape-one.js --",
    "sources:scrape-many": "./run.sh scripts/sources/scrape-many.js --",
    "sources:discover": "./run.sh scripts/sources/discover.js --",
    "sources:maintain": "./run.sh scripts/sources/maintain.js",
    "sources:update": "./run.sh scripts/sources/update.js --",
    "sources:browse": "./run.sh scripts/sources/browse.js --",
    "test:save-logic": "./run.sh scripts/test-pipeline/test-save-logic.js",
    "tools:diagnose": "./run.sh scripts/tools/diagnose-stuck-articles.js",
    "tools:opp-factory": "./run.sh scripts/tools/oppFactory.js",
    "tools:backfill-graph": "./run.sh scripts/tools/backfill-graph-from-opps.js"
  },
  "dependencies": {
    "@headlines/ai-services": "workspace:*",
    "@headlines/config": "workspace:*",
    "@headlines/data-access": "workspace:*",
    "@headlines/models": "workspace:*",
    "@headlines/prompts": "workspace:*",
    "@headlines/scraper-logic": "workspace:*",
    "@headlines/utils-server": "workspace:*",
    "@headlines/utils-shared": "workspace:*",
    "@mozilla/readability": "^0.6.0",
    "@pinecone-database/pinecone": "^6.1.2",
    "ansi-colors": "^4.1.3",
    "bcryptjs": "^2.4.3",
    "cheerio": "^1.0.0-rc.12",
    "cli-progress": "^3.12.0",
    "date-fns": "^3.6.0",
    "dotenv": "^16.4.5",
    "jest": "^29.7.0",
    "jsdom": "^24.1.0",
    "moment": "^2.30.1",
    "moment-duration-format": "^2.3.2",
    "mongoose": "^8.18.2",
    "p-limit": "^5.0.0",
    "pino": "^9.2.0",
    "playwright": "^1.45.1",
    "yargs": "^17.7.2"
  },
  "devDependencies": {
    "sinon": "^18.0.0"
  }
}

```

## 📄 run.sh
*Lines: 45, Size: 1.82 KB*

```bash
#!/bin/bash
# This is the definitive, robust runner script for all pipeline tasks.
# It is designed to be called from the monorepo root (e.g., via `pnpm --filter`).
# It correctly sets up the environment and executes the target script with all arguments.

# Get the directory of this script to reliably find the monorepo root.
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
MONOREPO_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"

# The first argument ($1) is the target script path or special command.
TARGET_SCRIPT_RELATIVE=$1

# Remove the first argument from the list of arguments.
shift

# This loop consumes all leading "--" arguments passed by pnpm or the package.json script.
# It ensures that only the user-provided flags are passed to the Node.js script.
while [[ "$1" == "--" ]]; do
  shift
done

# Immediately change to the monorepo root. This is critical for dotenv and node module resolution.
cd "$MONOREPO_ROOT"

# Set the environment variable that all scripts check for.
export IS_PIPELINE_RUN=true

# Check for the special 'test:upserter' command
if [[ "$TARGET_SCRIPT_RELATIVE" == "test:upserter" ]]; then
  echo "Executing special test command: test:upserter with mocking"
  echo "With arguments: $@"
  echo "---"
  # Construct the specific command for this test, including the loader
  COMMAND="node --loader ./apps/pipeline/scripts/test-pipeline/mock-loader.js ./apps/pipeline/scripts/test-pipeline/test-opportunity-upserter.js $@"
else
  # This is the default behavior for all other scripts
  TARGET_SCRIPT_FULL="apps/pipeline/${TARGET_SCRIPT_RELATIVE}"
  echo "Executing script: ${TARGET_SCRIPT_FULL}"
  echo "With arguments: $@"
  echo "---"
  COMMAND="node $TARGET_SCRIPT_FULL $@"
fi

# Use dotenv-cli to load the .env file from the root, then execute the constructed command
pnpm exec dotenv -e ./.env -- $COMMAND
```

## 📄 scripts/infrastructure/setFlySecrets.sh
*Lines: 88, Size: 2.23 KB*

```bash
#!/bin/bash
# scripts/setFlySecrets.sh (version 1.0)

# A script to read a .env file and set the variables as Fly.io secrets.
# It builds a single command to set all secrets at once for efficiency.

# --- Configuration ---
ENV_FILE=".env"

# --- Pre-flight Checks ---

# Check for .env file
if [ ! -f "$ENV_FILE" ]; then
    echo "Error: .env file not found in the current directory."
    exit 1
fi

# Check for flyctl command
if ! command -v fly &> /dev/null
then
    echo "Error: 'fly' command-line tool not found."
    exit 1
fi

if [ ! -f "fly.toml" ]; then
    echo "Error: No fly.toml file found in this directory."
    echo "Please run 'fly launch' first."
    exit 1
fi

APP_NAME=$(grep '^app = ' fly.toml | cut -d "'" -f 2)
if [ -z "$APP_NAME" ]; then
    echo "Error: Could not determine app name from fly.toml."
    exit 1
fi

echo "Reading secrets from '$ENV_FILE' for app '$APP_NAME'..."

# --- Main Logic ---
secrets_args=()
while IFS= read -r line || [ -n "$line" ]; do
    # Skip comments and empty lines
    if [[ "$line" =~ ^#.* ]] || [[ -z "$line" ]]; then
        continue
    fi
    # Handle carriage return for Windows-edited .env files
    line=$(echo "$line" | tr -d '\r')
    key=$(echo "$line" | cut -d '=' -f 1)
    # Correctly extract value, even if it contains '='
    value=$(echo "$line" | sed -e "s/^$key=//")
    if [ -z "$key" ]; then
        continue
    fi
    # Use printf for robust quoting to handle special characters
    secrets_args+=("$(printf "%s=%s" "$key" "$value")")
    echo "  - Found secret: $key"
done < "$ENV_FILE"

if [ ${#secrets_args[@]} -eq 0 ]; then
    echo "No secrets to set were found in '$ENV_FILE'."
    exit 0
fi

echo ""
echo "The following secrets will be set for the app '$APP_NAME':"
for arg in "${secrets_args[@]}"; do
    key=$(echo "$arg" | cut -d '=' -f 1)
    echo "  - $key"
done
echo ""

read -p "Are you sure you want to proceed? (y/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    echo "Operation cancelled by user."
    exit 1
fi

echo "Setting secrets on Fly.io..."
fly secrets set --stage "${secrets_args[@]}"

if [ $? -eq 0 ]; then
    echo "✅ Successfully set ${#secrets_args[@]} secrets. A new release is being created."
else
    echo "❌ An error occurred while setting secrets."
    exit 1
fi
```

## 📄 scripts/maintenance/backfill-assessed-articles.js
*Lines: 1352, Size: 59.76 KB*

```javascript
/**
 * @command maintenance:backfill-assessed
 * @group Maintenance
 * @description Backfills the database with articles that were assessed but not saved in a previous run, preventing costly reprocessing.
 */
import mongoose from 'mongoose'
import colors from 'ansi-colors'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { bulkWriteArticles, getAllSources } from '@headlines/data-access'

// --- START: Paste the JSON array of articles here ---
const ARTICLES_TO_BACKFILL = [
  {
    headline: 'Norsk advokatgigant lurer på dansk ekspansion - 7 oktober 2025',
    newspaper: 'InsideBusiness',
    link: 'https://insidebusiness.dk/nyheder/artikel/193910',
  },
  {
    headline:
      'Nordea Pension nærmer sig storkundejagt, men der er stadig ingen prismodel på plads',
    newspaper: 'InsideBusiness',
    link: 'https://insidebusiness.dk/nyheder/artikel/193915',
  },
  {
    headline: 'Pensionskasser får milliardtab på britisk eventyr - 7 oktober 2025',
    newspaper: 'InsideBusiness',
    link: 'https://insidebusiness.dk/nyheder/artikel/193911',
  },
  {
    headline: 'Spænding om kasernebyggeri tæt på kulmination - 2 oktober 2025',
    newspaper: 'InsideBusiness',
    link: 'https://insidebusiness.dk/nyheder/artikel/193859',
  },
  {
    headline: '7. oktober 2025 Dansk virksomhed investerer i ukrainsk forsvarsproduktion',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/erhverv/article18635813.ece',
  },
  {
    headline:
      '6. oktober 2025 Akson Robotics får investering og Matchlån til global vækst',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/erhverv/article18632615.ece',
  },
  {
    headline:
      '2. oktober 2025 Danmark lancerer verdens største kvantefond med Eifo og Novo Holdings som ankerinvestorer',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/fonde/article18617834.ece',
  },
  {
    headline: 'Analyse: Pensionskasser risikerer at blive efterladt på perronen',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/pension/article18619625.ece',
  },
  {
    headline:
      'Investeringsselskab med dansker i front sender trecifret millionbeløb i britisk brintselskab',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/investering/article18632789.ece',
  },
  {
    headline:
      'Cleantech-virksomhed jagter 600 millioner kroner til planlagt børsnotering',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/kapitalrejsning/article18625904.ece',
  },
  {
    headline:
      'Pensam-direktør vil have staten på banen som fødselshjælper til investeringer i Danmark',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/pension/article18629003.ece',
  },
  {
    headline:
      'Pensionssektorens kamp for afkast er tegnet skarpt op: "Det bliver helt afgørende"',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/pension/article18629555.ece',
  },
  {
    headline: 'Kapitalfonde i stort comeback efter rentechok for år tilbage',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/kapitalfonde/article18620040.ece',
  },
  {
    headline: 'Tidligere Coop-topchef rykker ind i bestyrelsen i Freetrailer',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/navne/article18630719.ece',
  },
  {
    headline: 'Suger venturekapital til sig: DTU søsætter ny enhed',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/uddannelse/article18629918.ece',
  },
  {
    headline: 'Kapitalfondsejet dansk dronebekæmper åbner ny fabrik i USA',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/erhverv/article18630662.ece',
  },
  {
    headline: 'Nystartet M&A-kontor vil være forlænget investeringsarm for kapitalfonde',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/ma/article18625400.ece',
  },
  {
    headline: 'International profil bliver ny partner i dansk ventureselskab',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/navne/article18627887.ece',
  },
  {
    headline:
      'Erfaren investor arbejder på de indre linjer: Vil rejse nye milliarder til investeringer',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/investering/article18627140.ece',
  },
  {
    headline:
      'Henter ny investeringsdirektør hos EY: Kapitalfond styrker fokus på forsyningssektoren',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/navne/article18625220.ece',
  },
  {
    headline: 'Conscia ændrer organisationen efter grønt lys til opkøb',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/erhverv/article18624137.ece',
  },
  {
    headline: 'Aerbio henter "bridge-lån" og gearer op for kapitalrejsning til efteråret',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/kapitalrejsning/article18624116.ece',
  },
  {
    headline: 'Bør eksterne investorer kunne eje advokathuse? Advokater er splittede',
    newspaper: 'KapitalWatch',
    link: 'https://kapwatch.dk/nyheder/branche/article18620849.ece',
  },
  {
    headline:
      'Halberg-familiens topchef melder om resultat som forventet - men på lavere niveau',
    newspaper: 'Finans.dk',
    link: 'https://finans.dk/erhverv/ECE18637782/halbergfamiliens-topchef-melder-om-resultat-som-forventet-men-paa-lavere-niveau/?ctxref=ext',
  },
  {
    headline: 'Dansk regntøjsfirma forventer ny vækst efter rekordregnskab',
    newspaper: 'Finans.dk',
    link: 'https://finans.dk/erhverv/ECE18637683/dansk-regntoejsfirma-forventer-ny-vaekst-efter-rekordregnskab/?ctxref=ext',
  },
  {
    headline: 'Dansk AI-startup får millionindsprøjtning til international ekspansion',
    newspaper: 'Finans.dk',
    link: 'https://finans.dk/erhverv/ECE18637083/dansk-aistartup-faar-millionindsprøjtning-til-international-ekspansion/?ctxref=ext',
  },
  {
    headline:
      'Snupper profil fra Nordea: Citi sætter to nye personer i spidsen for nordisk afdeling',
    newspaper: 'Finans.dk',
    link: 'https://finans.dk/finans/ECE18637152/snupper-profil-fra-nordea-citi-saetter-to-nye-personer-i-spidsen-for-nordisk-afdeling/?ctxref=ext',
  },
  {
    headline:
      'Pensiondanmark insisterer på at "lede hårdt" efter gode investeringer i Danmark',
    newspaper: 'Finans.dk',
    link: 'https://finans.dk/finans/ECE18636501/pensiondanmark-insisterer-paa-at-lede-haardt-efter-gode-investeringer-i-danmark/?ctxref=ext',
  },
  {
    headline: 'Kapitalfonde: Bavarian Nordic skal ud på en større opkøbsjagt',
    newspaper: 'Finans.dk',
    link: 'https://finans.dk/erhverv/ECE18636405/kapitalfonde-bavarian-nordic-skal-ud-paa-en-stoerre-opkoebsjagt/?ctxref=ext',
  },
  {
    headline: 'Digitalt Alzheimers-firma får ny finansdirektør',
    newspaper: 'Finans.dk',
    link: 'https://finans.dk/erhverv/ECE18636453/digitalt-alzheimersfirma-faar-ny-finansdirektoer/?ctxref=ext',
  },
  {
    headline: 'Løgismose øger overskud trods dalende salg',
    newspaper: 'Finans.dk',
    link: 'https://finans.dk/erhverv/ECE18636282/loegismose-oeger-overskud-trods-dalende-salg/?ctxref=ext',
  },
  {
    headline: 'CIP-ejet biogasselskab henter ny direktør fra vindindustrien',
    newspaper: 'Finans.dk',
    link: 'https://finans.dk/erhverv/ECE18635879/cipejet-biogasselskab-henter-ny-direktoer-fra-vindindustrien/?ctxref=ext',
  },
  {
    headline:
      'Klumme: Homo Economicus er død. Længe leve den emotionelt motiverede køber',
    newspaper: 'Finans.dk',
    link: 'https://finans.dk/debat/ECE18620245/klumme-homo-economicus-er-doed-laenge-leve-den-emotionelt-motiverede-koeber/?ctxref=ext',
  },
  {
    headline: 'Verdens største kvantefond lanceres: Oprustning og life science i fokus',
    newspaper: 'Finans.dk',
    link: 'https://finans.dk/erhverv/ECE18617834/verdens-stoerste-kvantefond-lanceres-oprustning-og-life-science-i-fokus/?ctxref=ext',
  },
  {
    headline: 'Investorer skyder tocifret milliardbeløb i ny lånefond til virksomheder',
    newspaper: 'Finans.dk',
    link: 'https://finans.dk/finans/ECE18617300/investorer-skyder-tocifret-milliardbeloeb-i-ny-laanefond-til-virksomheder/?ctxref=ext',
  },
  {
    headline: 'Eifo og Novo ankerinvestorer i verdens største kvantefond',
    newspaper: 'Finans.dk',
    link: 'https://finans.dk/erhverv/ECE18617507/eifo-og-novo-ankerinvestorer-i-verdens-stoerste-kvantefond/?ctxref=ext',
  },
  {
    headline: 'Droneovervågnings-firma melder udsolgt og er åben for investorer',
    newspaper: 'Finans.dk',
    link: 'https://finans.dk/erhverv/ECE18616196/droneovervaagningsfirma-melder-udsolgt-og-er-aaben-for-investorer/?ctxref=ext',
  },
  {
    headline: 'Freetrailer leverer rekordomsætning og tocifret vækst i indtjeningen',
    newspaper: 'Finans.dk',
    link: 'https://finans.dk/erhverv/ECE18615959/freetrailer-leverer-rekordomsaetning-og-tocifret-vaekst-i-indtjeningen/?ctxref=ext',
  },
  {
    headline: 'M&A-sultent advokathus ændrer selskabsform efter udvidelse',
    newspaper: 'Finans.dk',
    link: 'https://finans.dk/erhverv/ECE18615995/masultent-advokathus-aendrer-selskabsform-efter-udvidelse/?ctxref=ext',
  },
  {
    headline:
      'C.V. Obel-ejede Semco opruster til forsvarsordrer: "Vi ser ind i et voksende marked"',
    newspaper: 'Finans.dk',
    link: 'https://finans.dk/erhverv/ECE18615464/c-v-obelejede-semco-oprustrer-til-forsvarsordrer-vi-ser-ind-i-et-voksende-marked/?ctxref=ext',
  },
  {
    headline:
      'Innovativt digitalt medie booster vækst og mission i nyt stærkt partnerskab',
    newspaper: 'Finans.dk',
    link: 'https://finans.dk/partner/ECE18580049/innovativt-digitalt-medie-booster-vaekst-og-mission-i-nyt-staerkt-partnerskab/?ctxref=ext',
  },
  {
    headline:
      'Nu kan du spare penge hver måned på dit lån i boligen. Men det koster på den lange bane',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/privatokonomi/nu-kan-du-spare-penge-hver-maaned-paa-dit-laan-i-boligen-men-det-koster-paa-den-lange-bane',
  },
  {
    headline: 'Jyske Bank stiger efter højere forventninger til indtjeningen',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/finans/jyske-bank-stiger-efter-hojere-forventninger-til-indtjeningen-1',
  },
  {
    headline: 'Højere priser på kød og ost puster til inflationen',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/okonomi/hojere-priser-paa-kod-og-ost-puster-til-inflationen',
  },
  {
    headline: 'Global økonomisk usikkerhed får sølvprisen til at sætte rekord',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/investor/global-okonomisk-usikkerhed-faar-solvprisen-til-at-saette-rekord',
  },
  {
    headline: 'Ørsted-topchef varsler fyringsrunde inden nytår',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/baeredygtig/orsted-topchef-varsler-fyringsrunde-inden-nytaar',
  },
  {
    headline: 'Ørsted er i mål med aktiesalg for 60 milliarder kroner',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/baeredygtig/oersted-er-i-maal-med-aktiesalg-for-60-milliarder-kroner-1',
  },
  {
    headline: 'Aldrig har udbuddet af ejer­lejligheder i København været lavere',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/privatokonomi/aldrig-har-udbuddet-af-ejerlejligheder-i-kobenhavn-vaeret-lavere',
  },
  {
    headline: 'Amerikanske aktier sætter nye rekorder',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/investor/amerikanske-aktier-saetter-nye-rekorder-1',
  },
  {
    headline: 'Inflationen i eurozonen tager til',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/okonomi/inflationen-i-eurozonen-tager-til',
  },
  {
    headline:
      'Forskere løser gåde om, hvorfor vi flytter, som vi gør:  »Der er en skjult mekanisme på spil«',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/okonomi/forskere-loser-gaade-om-hvorfor-vi-flytter-som-vi-gor-der-er-en-skjult-mekanisme-paa-spil',
  },
  {
    headline: 'Norlys opsiger 137 medarbejdere i varslet fyringsrunde',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/virksomheder/norlys-opsiger-137-medarbejdere-i-varslet-fyringsrunde',
  },
  {
    headline: 'Flying Tiger vil åbne 130 nye butikker i Asien',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/virksomheder/flying-tiger-vil-aabne-130-nye-butikker-i-asien',
  },
  {
    headline:
      'Danskerne har fået flere penge mellem hænderne i hverdagen. Alligevel har de et stort problem',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/privatokonomi/danskerne-har-faaet-flere-penge-mellem-haenderne-i-hverdagen-alligevel-har-de-et-stort-problem',
  },
  {
    headline: 'Nationalbanken nedjusterer vækstskøn for i år',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/okonomi/nationalbanken-nedjusterer-vaekstskon-for-i-aar-2',
  },
  {
    headline: 'Bolig­prisernes optur skaber panik blandt førstegangs­købere',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/privatokonomi/boligprisernes-optur-skaber-panik-blandt-forstegangskobere',
  },
  {
    headline: 'Ørsted vinder stor juridisk sejr i USA',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/baeredygtig/orsted-vinder-stor-juridisk-sejr-i-usa',
  },
  {
    headline:
      'Han er Trumps mand på energi og dårligt nyt for Danmark:  »Han vil trække i alle de håndtag, han kan«',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/politik/han-er-trumps-mand-paa-energi-og-daarligt-nyt-for-danmark-han-vil-traekke-i-alle-de-haandtag-han-kan',
  },
  {
    headline: 'Forbrugernes pessimisme er den værste i to år',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/okonomi/forbrugernes-pessimisme-er-den-vaerste-i-to-aar',
  },
  {
    headline: 'Beskæftigelsen satte endnu en rekord i juli',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/okonomi/beskaeftigelsen-satte-endnu-en-rekord-i-juli',
  },
  {
    headline: 'Novo-aktien lukker i plus for femte dag i træk',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/investor/novo-aktien-lukker-i-plus-for-femte-dag-i-traek',
  },
  {
    headline:
      'Mægler kalder det et »opsparet behov«: Nu ser vi noget, der kan puste liv i boligmarkedet',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/privatokonomi/maegler-kalder-det-et-opsparet-behov-nu-ser-vi-noget-der-kan-puste-liv-i-boligmarkedet',
  },
  {
    headline:
      'Derfor var Skats køb af lækkede dokumenter ikke nyttesløst trods skuffende resultat',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/politik/derfor-var-skats-kob-af-laekkede-dokumenter-ikke-nytteslost-trods-skuffende-resultat',
  },
  {
    headline:
      'Dyr mad vækker stor bekymring – men problemet er mindre, end det har været',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/privatokonomi/dyr-mad-vaekker-stor-bekymring-men-problemet-er-mindre-end-det-har-vaeret',
  },
  {
    headline:
      'Ørsteds plan overrasker analytiker: »Det her har de færreste nok set komme«',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/baeredygtig/orsteds-plan-overrasker-analytiker-det-her-har-de-faerreste-nok-set-komme',
  },
  {
    headline: 'ECB fastholder renten for andet rentemøde i træk',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/okonomi/ecb-fastholder-renten-for-andet-rentemode-i-traek',
  },
  {
    headline:
      'Novos investorer er begejstrede for de mange fyringer – det er der en særlig grund til',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/investor/novos-investorer-er-begejstrede-for-de-mange-fyringer-det-er-der-en-saerlig-grund-til',
  },
  {
    headline: 'Novo-chef vil gennemføre massefyringer inden for nogle måneder',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/virksomheder/novo-chef-vil-gennemfoere-massefyringer-inden-for-nogle-maaneder',
  },
  {
    headline: 'Lundbeck omlægger og skærer 602 stillinger globalt',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/virksomheder/lundbeck-omlaegger-og-skaerer-602-stillinger-globalt',
  },
  {
    headline: 'Rentefald åbner døren for omlægning af femprocentslån',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/privatokonomi/rentefald-aabner-doren-for-omlaegning-af-femprocentslaan',
  },
  {
    headline: 'Der var pæn fremgang i eksporten i juli',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/okonomi/der-var-paen-fremgang-i-eksporten-i-juli',
  },
  {
    headline:
      'Ikke-vestlige indvandrere kommer meget hurtigere i arbejde nu end tidligere',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/politik/ikkevestlige-indvandrere-kommer-meget-hurtigere-i-arbejde-nu-end-tidligere',
  },
  {
    headline:
      'Økonomisk gulerod virker meget bedre end forventet og gavner især én gruppe',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/okonomi/okonomisk-gulerod-virker-meget-bedre-end-forventet-og-gavner-isaer-en-gruppe',
  },
  {
    headline: 'Ørsted-aktionærer stemmer ja til kæmpe kapitaludvidelse',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/investor/orsted-aktionaerer-stemmer-ja-til-kaempe-kapitaludvidelse',
  },
  {
    headline: 'Ørsted nedjusterer med en milliard på vigtig dag',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/investor/orsted-nedjusterer-med-en-milliard-paa-vigtig-dag',
  },
  {
    headline: 'Virksomheder vil have medarbejdere tilbage på kontoret',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/ledelse/virksomheder-vil-have-medarbejdere-tilbage-paa-kontoret',
  },
  {
    headline: 'Der står færre boliger til salg i hele landet',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/privatokonomi/der-staar-faerre-boliger-til-salg-i-hele-landet',
  },
  {
    headline: 'Sådan får du fingre i en andelsbolig i København',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/privatokonomi/saadan-faar-du-fingre-i-en-andelsbolig-i-kobenhavn',
  },
  {
    headline:
      'Værelset til over 9.000 kroner på Østerbro forargede ham så meget, at han oprettede en Facebook-gruppe',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/privatokonomi/vaerelset-til-over-9000-kroner-paa-osterbro-forargede-ham-saa-meget-at-han-oprettede-en-facebookgruppe',
  },
  {
    headline: 'Andelen af ledige lejeboliger er historisk lav',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/privatokonomi/andelen-af-ledige-lejeboliger-er-historisk-lav',
  },
  {
    headline:
      'Nøgletal udgør på samme tid regeringens store forhåbning og store bekymring',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/politik/nogletal-udgor-paa-samme-tid-regeringens-store-forhaabning-og-store-bekymring',
  },
  {
    headline: 'Stephanie Lose ser fremgang i økonomien trods toldtrusler fra USA',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/politik/stephanie-lose-ser-fremgang-i-okonomien-trods-toldtrusler-fra-usa',
  },
  {
    headline: 'Indbetalinger til PFA skyder i vejret og rammer rekordniveau',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/finans/indbetalinger-til-pfa-skyder-i-vejret-og-rammer-rekordniveau',
  },
  {
    headline: 'Time for time:  Sådan er regeringens forslag til en finanslov',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/politik/time-for-time-saadan-er-regeringens-forslag-til-en-finanslov',
  },
  {
    headline: 'Politikerne skændes om de mindst vigtige årsager til de høje madpriser',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/politik/politikerne-skaendes-om-de-mindst-vigtige-aarsager-til-de-hoje-madpriser',
  },
  {
    headline: 'Ældre kan se frem til største stigning i folke­pension i 16 år',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/privatokonomi/aeldre-kan-se-frem-til-storste-stigning-i-folkepension-i-16-aar',
  },
  {
    headline: 'Top­politikere i infight om årsagen til de høje madpriser',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/politik/toppolitikere-i-infight-om-aarsagen-til-de-hoje-madpriser',
  },
  {
    headline:
      'Huse fra en bestemt periode er i størst fare for at blive revet med af stormfloden',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/privatokonomi/huse-fra-en-bestemt-periode-er-i-storst-fare-for-at-blive-revet-med-af-stormfloden',
  },
  {
    headline: 'Nyt fradrag undrer eksperter:  »I mine øjne er det udtryk for panik«',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/politik/nyt-fradrag-undrer-eksperter-i-mine-ojne-er-det-udtryk-for-panik',
  },
  {
    headline:
      'Ørsted-aktien lukker i laveste niveau nogensinde: 80 procent af værdien er væk',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/investor/orsted-aktien-lukker-i-laveste-niveau-nogensinde-80-procent-af-vaerdien-er-vaek',
  },
  {
    headline: 'Antallet af dårlige betalere sætter bundrekord',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/privatokonomi/antallet-af-daarlige-betalere-saetter-bundrekord',
  },
  {
    headline: "USA's regering beordrer pause på Ørsted-projekt",
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/baeredygtig/usas-regering-beordrer-pause-paa-orstedprojekt',
  },
  {
    headline: 'Ørsteds kursfald giver energikoncern underskud på en milliard',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/investor/orsteds-kursfald-giver-energikoncern-underskud-paa-en-milliard',
  },
  {
    headline:
      'Huspriserne i to områder med seks kilometers afstand illustrerer det delte boligmarked',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/privatokonomi/huspriserne-i-to-omraader-med-seks-kilometers-afstand-illustrerer-det-delte-boligmarked',
  },
  {
    headline: 'Norlys vil fyre op mod hver 10. i kundeselskab',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/virksomheder/norlys-vil-fyre-op-mod-hver-10-i-kundeselskab',
  },
  {
    headline: 'Dansk biotekkoncerns aktiekurs falder efter melding om aftagende salg',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/investor/dansk-biotekkoncerns-aktiekurs-falder-efter-melding-om-aftagende-salg',
  },
  {
    headline: 'Høje fødevare­priser og usikkerhed giver dyk i forbruger­tilliden',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/okonomi/hoje-fodevarepriser-og-usikkerhed-giver-dyk-i-forbrugertilliden',
  },
  {
    headline: 'Beskæftigelsen fortsætter rekord­stime i juni',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/okonomi/beskaeftigelsen-fortsaetter-rekordstime-i-juni',
  },
  {
    headline: 'Hussalget stiger og sætter rekord i flere landsdele',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/privatokonomi/hussalget-stiger-og-saetter-rekord-i-flere-landsdele',
  },
  {
    headline: 'Rockwool falder tungt efter nedjustering',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/investor/rockwool-falder-tungt-efter-nedjustering',
  },
  {
    headline: 'Novo Nordisk indfører globalt stop for ikke-kritiske ansættelser',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/virksomheder/novo-nordisk-indfoerer-globalt-stop-for-ikkekritiske-ansaettelser',
  },
  {
    headline: 'Ekspert:  Rosenkrantz-Theils forslag kan få bolig­priserne til at falde',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/privatokonomi/ekspert-rosenkrantztheils-forslag-kan-faa-boligpriserne-til-at-falde',
  },
  {
    headline: 'Finanstilsynet slår ned på Danske Banks hvidvaskkontrol',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/finans/finanstilsynet-slaar-ned-paa-danske-banks-hvidvaskkontrol',
  },
  {
    headline: 'Vestas-aktien stiger med 11 procent ved åbning',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/investor/vestasakties-stiger-med-11-procent-ved-aabning',
  },
  {
    headline:
      'Statsministeren konfronterer høje madpriser: »Vi er jo i en vanvittig situation«',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/politik/statsministeren-konfronterer-hoje-madpriser-vi-er-jo-i-en-vanvittig-situation',
  },
  {
    headline: 'Trumps klapjagt rammer Danmark dobbelt',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/politik/trumps-klapjagt-rammer-danmark-dobbelt',
  },
  {
    headline: 'Ørsted falder voldsomt og lukker i laveste niveau nogensinde',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/investor/orsted-falder-voldsomt-og-lukker-i-laveste-niveau-nogensinde',
  },
  {
    headline:
      '»Nu kan jeg nærmest ikke gå ind i Netto, uden at det koster 200 kroner. Jeg synes, det er absurd«',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/privatokonomi/nu-kan-jeg-naermest-ikke-gaa-ind-i-netto-uden-at-det-koster-200-kroner-jeg-synes-det-er-absurd',
  },
  {
    headline: 'Inflationen er igen over 2 procent',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/okonomi/inflationen-er-igen-over-2-procent',
  },
  {
    headline: 'Danmark får en meget lidt omtalt fordel af klima­forandringerne',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/okonomi/danmark-faar-en-meget-lidt-omtalt-fordel-af-klimaforandringerne',
  },
  {
    headline:
      '»Jeg har aldrig forestillet mig, at jeg skulle være sådan en, der var bange for at gå på arbejde«',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/ledelse/jeg-har-aldrig-forestillet-mig-at-jeg-skulle-vaere-saadan-en-der-var-bange-for-at-gaa-paa-arbejde',
  },
  {
    headline:
      'Ny topchef har fået god start:  Novo stryger til tops i C25 efter stærkt regnskab',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/investor/ny-topchef-har-faaet-god-start-novo-stryger-til-tops-i-c25-efter-staerkt-regnskab',
  },
  {
    headline: 'Skuffende resultat fra konkurrent sender Novo-aktie op efter regnskab',
    newspaper: 'Borsen',
    link: 'https://borsen.dk/nyheder/investor/skuffende-resultat-fra-konkurrent-sender-novoaktie-op-efter-regnskab',
  },
  {
    headline:
      'Vanvittig eksplosion på ammunitionsfabrik i USA. Alt er væk, og ingen tør nærme sig',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/udland/art10398606/Vanvittig-eksplosion-p%C3%A5-ammunitionsfabrik-i-USA.-Alt-er-v%C3%A6k-og-ingen-t%C3%B8r-n%C3%A6rme-sig',
  },
  {
    headline: 'Oscar-vindende skuespiller Diane Keaton er død',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/kultur/art10398638/Oscar-vindende-skuespiller-Diane-Keaton-er-d%C3%B8d',
  },
  {
    headline: 'Boeing 737 er blevet føjet agterud: Her er verdens mest populære flytype',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/rejser/art10397750/Boeing-737-er-blevet-f%C3%B8jet-agterud-Her-er-verdens-mest-popul%C3%A6re-flytype',
  },
  {
    headline: 'USA-udsending til israelske gidsler: I kommer hjem',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/udland/art10398623/USA-udsending-til-israelske-gidsler-I-kommer-hjem',
  },
  {
    headline: 'Trump lover udbetaling af løn til soldater under nedlukning',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/udland/art10398622/Trump-lover-udbetaling-af-l%C3%B8n-til-soldater-under-nedlukning',
  },
  {
    headline: 'For første gang i 200 år er Parthenon fri for stillads',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/udland/art10398492/For-f%C3%B8rste-gang-i-200-%C3%A5r-er-Parthenon-fri-for-stillads',
  },
  {
    headline: 'Eksperter: Anne Linnet bryder loven med privat badeområde',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/danmark/art10398440/Eksperter-Anne-Linnet-bryder-loven-med-privat-badeomr%C3%A5de',
  },
  {
    headline:
      'Præsidenten bliver hevet ud af en sportshal. Nu har han 20 minutter til at forhindre et militærkup',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/kultur/film_og_tv/art10398462/Pr%C3%A6sidenten-bliver-hevet-ud-af-en-sportshal.-Nu-har-han-20-minutter-til-at-forhindre-et-milit%C3%A6rkup',
  },
  {
    headline: 'Norge fortsætter kursen mod VM med ny storsejr',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/sport/fodbold/art10398579/Norge-forts%C3%A6tter-kursen-mod-VM-med-ny-storsejr',
  },
  {
    headline: '20-årig gemmer på en hemmelighed: »Internettet glemmer aldrig«',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/danmark/art10398336/%C2%BBInternettet-glemmer-aldrig%C2%AB',
  },
  {
    headline: 'Skud affyret i tysk by - flere meldes såret',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/udland/art10398561/Skud-affyret-i-tysk-by-flere-meldes-s%C3%A5ret',
  },
  {
    headline:
      'Hun er blevet mor og har skrevet et album om det: Derfor skal man lytte til Oh Land lige nu',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/kultur/musik/art10398547/Hun-er-blevet-mor-og-har-skrevet-et-album-om-det-Derfor-skal-man-lytte-til-Oh-Land-lige-nu',
  },
  {
    headline: 'Gemke taber finsk semifinale mod verdens tredjebedste',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/sport/art10398542/Gemke-taber-finsk-semifinale-mod-verdens-tredjebedste',
  },
  {
    headline: 'Efter 500 dages arbejde: Regeringen vil komme med råd til danskerne',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/danmark/art10398538/Efter-500-dages-arbejde-Regeringen-vil-komme-med-r%C3%A5d-til-danskerne',
  },
  {
    headline: '26-årig er død efter soloulykke i Nordjylland',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/danmark/art10398522/26-%C3%A5rig-er-d%C3%B8d-efter-soloulykke-i-Nordjylland',
  },
  {
    headline: 'Hamas udelukker at overdrage våben som led i fredsplan',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/udland/art10398516/Hamas-udelukker-at-overdrage-v%C3%A5ben-som-led-i-fredsplan',
  },
  {
    headline:
      'Vi ved ikke, hvad dronemilliarder præcis skal gå til - men forsvarsministeren taler om »afgørende« våben',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/indland/art10398502/Vi-ved-ikke-hvad-dronemilliarder-pr%C3%A6cis-skal-g%C3%A5-til-men-forsvarsministeren-taler-om-%C2%BBafg%C3%B8rende%C2%AB-v%C3%A5ben',
  },
  {
    headline:
      '»Det er mit liv,« siger Mathias Bøcker om japanske samlerkort, der kan være en formue værd',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/danmark/art10398327/%C2%BBDet-er-mit-liv%C2%AB-siger-Mathias-B%C3%B8cker-om-japanske-samlerkort-der-kan-v%C3%A6re-en-formue-v%C3%A6rd',
  },
  {
    headline: 'Pogacar cementerer sin status som konge i Lombardiet',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/sport/cykling/art10398495/Pogacar-cementerer-sin-status-som-konge-i-Lombardiet',
  },
  {
    headline: 'Kvinde til hest kommer alvorligt til skade i ulykke ved Herning',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/danmark/art10398493/Kvinde-til-hest-kommer-alvorligt-til-skade-i-ulykke-ved-Herning',
  },
  {
    headline:
      'Er Trumps nyeste træk et taktisk slagnummer eller optakten til den endelige nedsmeltning?',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/udland/art10398491/Er-Trumps-nyeste-tr%C3%A6k-et-taktisk-slagnummer-eller-optakten-til-den-endelige-nedsmeltning',
  },
  {
    headline: 'Mand er død i trafikulykke med letbane',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/danmark/art10398485/Mand-er-d%C3%B8d-i-trafikulykke-med-letbane',
  },
  {
    headline:
      'Dronerne har forstyrret Europas luftrum i årevis. Men pludselig står truslen lysende klar',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/udland/art10398436/Dronerne-har-forstyrret-Europas-luftrum-i-%C3%A5revis.-Men-pludselig-st%C3%A5r-truslen-lysende-klar',
  },
  {
    headline: 'Mindst 60 meldes dræbt i droneangreb på flygtningelejr i Sudan',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/udland/art10398481/Mindst-60-meldes-dr%C3%A6bt-i-droneangreb-p%C3%A5-flygtningelejr-i-Sudan',
  },
  {
    headline:
      'Viceborgmester i Paris forsvarer rotterne: De kan løse et af byens helt store problemer',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/udland/art10398455/Viceborgmester-i-Paris-forsvarer-rotterne-De-kan-l%C3%B8se-et-af-byens-helt-store-problemer',
  },
  {
    headline: 'Runes overraskende overmand nedlægger også Djokovic',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/sport/tennis/art10398454/Runes-overraskende-overmand-nedl%C3%A6gger-ogs%C3%A5-Djokovic',
  },
  {
    headline: 'Mads Würtz vil give landevejsstjerner VM-baghjul på gruset',
    newspaper: 'Politiken',
    link: 'https://politiken.dk/sport/cykling/art10398285/Mads-W%C3%BCrtz-vil-give-landevejsstjerner-VM-baghjul-p%C3%A5-gruset',
  },
  {
    headline:
      'Bundlinjen styrtbløder – men ny topchef er ikke i tvivl: »Det her bliver stort«',
    newspaper: 'Berlingske',
    link: 'https://www.berlingske.dk/business/bundlinjen-styrtbloeder-men-ny-topchef-er-ikke-i-tvivl-det-her-bliver',
  },
  {
    headline: 'Hovedvej er fortsat spærret efter aktivister i trætoppe',
    newspaper: 'Berlingske',
    link: 'https://www.berlingske.dk/danmark/hovedvej-er-fortsat-spaerret-efter-aktivister-i-traetoppe',
  },
  {
    headline: 'Israelsk luftangreb i Libanon koster én livet',
    newspaper: 'Berlingske',
    link: 'https://www.berlingske.dk/internationalt/israelsk-luftangreb-i-libanon-koster-en-livet',
  },
  {
    headline:
      'Hjemmearbejde eller ej:  Danske Bank og Solita sikrer trivsel og engagement',
    newspaper: 'Berlingske',
    link: 'https://www.berlingske.dk/annonce/hjemmearbejde-eller-ej-danske-bank-og-solita-sikrer-trivsel-og-engagement',
  },
  {
    headline:
      'Knytnæven i Sofie Gråbøls ansigt har fået generationer til at hade én bestemt filmscene',
    newspaper: 'Berlingske',
    link: 'https://www.berlingske.dk/kultur/knytnaeven-i-sofie-graaboels-ansigt-har-faaet-generationer-til-at-hade-en',
  },
  {
    headline: 'Svensk politibetjent sigtes for 22 seksuelle overgreb på børn',
    newspaper: 'Berlingske',
    link: 'https://www.berlingske.dk/internationalt/svensk-politibetjent-sigtes-for-22-seksuelle-overgreb-paa-boern',
  },
  {
    headline: 'Folketingsmedlem fortæller om israelske skud og ydmygelser',
    newspaper: 'Berlingske',
    link: 'https://www.berlingske.dk/internationalt/folketingsmedlem-fortaeller-om-israelske-skud-og-ydmygelser',
  },
  {
    headline:
      'USA sender 200 soldater til Israel for at følge våbenhvilen – giver Trump æren',
    newspaper: 'Berlingske',
    link: 'https://www.berlingske.dk/internationalt/usa-sender-200-soldater-til-israel-for-at-foelge-vaabenhvilen-giver',
  },
  {
    headline: 'Læsø dropper valgplakater til kommunalvalg',
    newspaper: 'Berlingske',
    link: 'https://www.berlingske.dk/politik/laesoe-dropper-valgplakater-til-kommunalvalg',
  },
  {
    headline: 'Hvad er det, der får en fornuftig dansk mand til at flytte til Sverige?',
    newspaper: 'Berlingske',
    link: 'https://www.berlingske.dk/kommentarer/hvad-er-det-der-faar-en-fornuftig-dansk-mand-til-at-flytte-til',
  },
  {
    headline: 'Charlie Chaplins sidste film bliver nu udgivet',
    newspaper: 'Berlingske',
    link: 'https://www.berlingske.dk/kultur/charlie-chaplins-sidste-film-bliver-nu-udgivet',
  },
  {
    headline: 'Æder fuglen uden at lande: Forskere afslører præcist, hvordan den gør det',
    newspaper: 'Berlingske',
    link: 'https://www.berlingske.dk/viden/aeder-fuglen-uden-at-lande-forskere-afsloerer-praecist-hvordan-den-goer',
  },
  {
    headline: '45 år som journalist og endnu flere forude',
    newspaper: 'Berlingske',
    link: 'https://www.berlingske.dk/navne/45-aar-som-journalist-og-endnu-flere-forude',
  },
  {
    headline: '1000 babyer får tarmbakterie i forskeres jagt på et sundere liv',
    newspaper: 'Berlingske',
    link: 'https://www.berlingske.dk/viden/1000-babyer-faar-tarmbakterie-i-forskeres-jagt-paa-et-sundere-liv',
  },
  {
    headline:
      'Præsidenten bliver hevet ud af en sportshal. Nu har han 20 minutter til at forhindre et militærkup',
    newspaper: 'Berlingske',
    link: 'https://www.berlingske.dk/kultur/praesidenten-bliver-hevet-ud-af-en-sportshal-nu-har-han-20-minutter',
  },
  {
    headline:
      'Hjemmearbejde eller ej: Danske Bank og Solita sikrer trivsel og engagement',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/annonce/sponsoreret/ECE18617887/hjemmearbejde-eller-ej-danske-bank-og-solita-sikrer-trivsel-og-engagement/?ctxref=ext',
  },
  {
    headline: 'Anmeldelse: Sådan skaber almindelige mennesker ualmindelige resultater',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/kultur/litteratur/ECE18635834/anmeldelse-saadan-skaber-almindelige-mennesker-ualmindelige-resultater/?ctxref=ext',
  },
  {
    headline: 'Hvis en københavnerlejlighed var en aktie, ville du aldrig købe den',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/debat/blogs/mortenrolighed/ECE18631100/hvis-en-koebenhavnerlejlighed-var-en-aktie-ville-du-aldrig-koebe-den/?ctxref=ext',
  },
  {
    headline: "Vin: 70'ernes danskervin nummer ét er tilbage – nu også som orangevin",
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/livsstil/ECE18632612/vin-70ernes-danskervin-nummer-et-er-tilbage-nu-ogsaa-som-orangevin/?ctxref=ext',
  },
  {
    headline: 'Konkurrent efter historisk Novo-opkøb: Styrker troen på egne muligheder',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18632624/konkurrent-efter-historisk-novoopkoeb-styrker-troen-paa-egne-muligheder/?ctxref=ext',
  },
  {
    headline: 'Trump vil indføre yderligere 100 pct. told på Kina',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/international/ECE18632591/trump-vil-indfoere-yderligere-100-pct-told-paa-kina/?ctxref=ext',
  },
  {
    headline: 'Macron genudnævner Lecornu som Frankrigs premierminister',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/international/ECE18632516/macron-genudnaevner-lecornu-som-frankrigs-premierminister/?ctxref=ext',
  },
  {
    headline: 'Store fald på Wall Street efter Trumps toldtrusler',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18632483/store-fald-paa-wall-street-efter-trumps-toldtrusler/?ctxref=ext',
  },
  {
    headline: 'Endnu en medicinalkæmpe rygtes på vej med prisaftale i USA',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18632450/endnu-en-medicinalkaempe-rygtes-paa-vej-med-prisaftale-i-usa/?ctxref=ext',
  },
  {
    headline: 'Novo-profil stopper: »Det var min egen beslutning«',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18631853/novoprofil-stopper-det-var-min-egen-beslutning/?ctxref=ext',
  },
  {
    headline:
      'Medarbejdere kaldt tilbage på kontoret: Vigtigt nøgletal kan få Nationalbanken til at tøve',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18631988/medarbejdere-kaldt-tilbage-paa-kontoret-vigtigt-noegletal-kan-faa-nationalbanken-til-at-toeve/?ctxref=ext',
  },
  {
    headline: 'Trumps budgetchef: Fyringerne er begyndt',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/international/ECE18631940/trumps-budgetchef-fyringerne-er-begyndt/?ctxref=ext',
  },
  {
    headline: 'Analyse: Novo og rivalerne sværmer om MASH-diagnosen',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18629738/analyse-novo-og-rivalerne-svaermer-om-mashdiagnosen/?ctxref=ext',
  },
  {
    headline: 'Danmark køber 16 F-35-kampfly og investerer i Arktis',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/politik/ECE18629984/danmark-koeber-16-f35kampfly-og-investerer-i-arktis/?ctxref=ext',
  },
  {
    headline: 'Ny toldtrussel fra Trump sender Wall Street brat ned',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18629729/ny-toldtrussel-fra-trump-sender-wall-street-brat-ned/?ctxref=ext',
  },
  {
    headline: 'Europa/lukning: Trump satte trumf på nedtur efter nye toldtrusler',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18629672/europalukning-trump-satte-trumf-paa-nedtur-efter-nye-toldtrusler/?ctxref=ext',
  },
  {
    headline: 'Markedsoversigt: Jyske Banks opjustering lunede hos bankerne',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18629477/markedsoversigt-jyske-banks-opjustering-lunede-hos-bankerne/?ctxref=ext',
  },
  {
    headline: 'Trump truer med massiv øgning af told på kinesiske varer',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/international/ECE18629393/trump-truer-med-massiv-oegning-af-told-paa-kinesiske-varer/?ctxref=ext',
  },
  {
    headline: 'Fredagens aktier: Jyske Bank tog bankerne med i vejret efter opjustering',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18629366/fredagens-aktier-jyske-bank-tog-bankerne-med-i-vejret-efter-opjustering/?ctxref=ext',
  },
  {
    headline:
      'Lars Fruergaard: Trumps angreb på medicinpriserne i USA kan koste Novo dyrt',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18629252/lars-fruergaard-trumps-angreb-paa-medicinpriserne-i-usa-kan-koste-novo-dyrt/?ctxref=ext',
  },
  {
    headline:
      "USA/åbning: AI-appetit bag grøn start - Levi's straffes for skuffende salg",
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18629165/usaabning-aiappetit-bag-groen-start-levis-straffes-for-skuffende-salg/?ctxref=ext',
  },
  {
    headline: 'Novo stopper skelsættende satsning',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18628964/novo-stopper-skelsaettende-satsning/?ctxref=ext',
  },
  {
    headline: 'Søren Linding: Tiltrængt fornyelse i toppen af presset børsgigant',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/investor/ECE18627836/soeren-linding-tiltraengt-fornyelse-i-toppen-af-presset-boersgigant/?ctxref=ext',
  },
  {
    headline: 'Skjern Bank opjusterer forventningerne til 2025',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18628676/skjern-bank-opjusterer-forventningerne-til-2025/?ctxref=ext',
  },
  {
    headline: 'Krise skaber tvivl om mulig første kvindelige japanske premierminister',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/international/ECE18628469/krise-skaber-tvivl-om-mulig-foerste-kvindelige-japanske-premierminister/?ctxref=ext',
  },
  {
    headline: 'Lollands Bank opjusterer betragteligt',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18628373/lollands-bank-opjusterer-betragteligt/?ctxref=ext',
  },
  {
    headline: 'Ejer af dansk modegigant med ny plan: Nu er det nu i USA',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18628287/ejer-af-dansk-modegigant-med-ny-plan-nu-er-det-nu-i-usa/?ctxref=ext',
  },
  {
    headline:
      'Europa/aktier: Jyske Bank anfører stort indeks tæt på tredje rekord i streg',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18628281/europaaktier-jyske-bank-anfoerer-stort-indeks-taet-paa-tredje-rekord-i-streg/?ctxref=ext',
  },
  {
    headline: 'Topchef er bevidst om tendens: Kunderne betaler i dag mere for mindre',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18628245/topchef-er-bevidst-om-tendens-kunderne-betaler-i-dag-mere-for-mindre/?ctxref=ext',
  },
  {
    headline: 'Det nye Novo: Fredag markerer et vendepunkt',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18627797/det-nye-novo-fredag-markerer-et-vendepunkt/?ctxref=ext',
  },
  {
    headline:
      'Aktier/middag: Jyske Bank på rekordkurs efter opjustering og hævet kursmål',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18627680/aktiermiddag-jyske-bank-paa-rekordkurs-efter-opjustering-og-haevet-kursmaal/?ctxref=ext',
  },
  {
    headline:
      'Topchef har lært at værne om sin energi: Engang brændte hun alle sine weekender af',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18627065/topchef-har-laert-at-vaerne-om-sin-energi-engang-braendte-hun-alle-sine-weekender-af/?ctxref=ext',
  },
  {
    headline: 'Tryg-aktien falder efter regnskab: Finanshus ser hår i suppen',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18627443/trygaktien-falder-efter-regnskab-finanshus-ser-haar-i-suppen/?ctxref=ext',
  },
  {
    headline:
      'Kinesiske rederier vil skære halvdelen af sejltiden: Men vestlige konkurrenter står i vejen',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18627341/kinesiske-rederier-vil-skaere-halvdelen-af-sejltiden-men-vestlige-konkurrenter-staar-i-vejen/?ctxref=ext',
  },
  {
    headline: 'Netcompany valgt som digital partner af Hollands udenrigsministerium',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18627191/netcompany-valgt-som-digital-partner-af-hollands-udenrigsministerium/?ctxref=ext',
  },
  {
    headline: 'Søren Linding: Bavarian-aktionærer skal forberede sig på grusomme tal',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/investor/ECE18627092/soeren-linding-bavarianaktionaerer-skal-forberede-sig-paa-grusomme-tal/?ctxref=ext',
  },
  {
    headline:
      'Sydbank: Trygs forsikringsresultat bedre end ventet hjulpet af afløbsgevinster',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18627038/sydbank-trygs-forsikringsresultat-bedre-end-ventet-hjulpet-af-afloebsgevinster/?ctxref=ext',
  },
  {
    headline: 'Aktieåbning: Jyske Bank stiger til rekordhøjde',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18626960/aktieaabning-jyske-bank-stiger-til-rekordhojde/?ctxref=ext',
  },
  {
    headline: 'Mærsk kan se fragtraterne stige efter tre uger med fald',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18626786/maersk-kan-se-fragtraterne-stige-efter-tre-uger-med-fald/?ctxref=ext',
  },
  {
    headline: 'Obligationer: Renten falder efter åbning',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18626927/obligationer-renten-falder-efter-aabning/?ctxref=ext',
  },
  {
    headline: 'Gates-fonden og PAHO vil have billigere vægttabsmedicin til Brasilien',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18626885/gatesfonden-og-paho-vil-have-billigere-vaegttabsmedicin-til-brasilien/?ctxref=ext',
  },
  {
    headline: 'Superliga: Derfor går AGF igen glip af mesterskabet',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/sport/fodbold/superliga/ECE18626243/superliga-derfor-gaar-agf-igen-glip-af-mesterskabet/?ctxref=ext',
  },
  {
    headline: 'Tesla lancerer hidtil billigste bil i Danmark og Europa',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/biler/ECE18626605/tesla-lancerer-hidtil-billigste-bil-i-danmark-og-europa/?ctxref=ext',
  },
  {
    headline: 'Råvarer: Priserne på olie, guld og sølv falder efter våbenhvile',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18626456/raavarer-priserne-paa-olie-guld-og-soelv-falder-efter-vaabenhvile/?ctxref=ext',
  },
  {
    headline: 'Inflationen steg i september',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18626387/inflationen-steg-i-september/?ctxref=ext',
  },
  {
    headline: 'Trods stigende priser: Overskuddet falder hos forsikringskæmpe',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18626354/trods-stigende-priser-overskuddet-falder-hos-forsikringskaempe/?ctxref=ext',
  },
  {
    headline: 'Droner og global uro: Husk at tilpasse porteføljen løbende',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/investor/ECE18617807/droner-og-global-uro-husk-at-tilpasse-portefoeljen-loebende/?ctxref=ext',
  },
  {
    headline: 'Stressboom truer: 4 af 10 danskere mistrives mentalt',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/indland/ECE18626156/stressboom-truer-4-af-10-danskere-mistrives-mentalt/?ctxref=ext',
  },
  {
    headline: 'Hurtigt overblik: Her er morgenens vigtigste erhvervshistorier',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18626147/hurtigt-overblik-her-er-morgenens-vigtigste-erhvervshistorier/?ctxref=ext',
  },
  {
    headline: 'Israels regering godkender våbenhvile i Gaza og løsladelse af 50 gidsler',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/international/ECE18626084/israels-regering-godkender-vaabenhvile-i-gaza-og-losladelse-af-50-gidsler/?ctxref=ext',
  },
  {
    headline: 'Feds Barr varsler forsigtig tilgang til næste rentebeslutning',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18626027/feds-barr-varsler-forsigtig-tilgang-til-naeste-rentebeslutning/?ctxref=ext',
  },
  {
    headline: 'Københavns Lufthavn afventer udbud til indkøb af droneradar',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18625946/koebenhavns-lufthavn-afventer-udbud-til-indkoeb-af-droneradar/?ctxref=ext',
  },
  {
    headline: 'Ny europæisk grænsekontrol kan skabe trængsel i danske lufthavne',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/indland/ECE18625916/ny-europaeisk-graensekontrol-kan-skabe-traengsel-i-danske-lufthavne/?ctxref=ext',
  },
  {
    headline: 'Mærsks japanske rivaler går tilbage fredag',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18625901/maersks-japanske-rivaler-gaar-tilbage-fredag/?ctxref=ext',
  },
  {
    headline: 'Valuta: Euro under pres på baggrund af fortsat uro om fransk økonomi',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18625844/valuta-euro-under-pres-paa-baggrund-af-fortsat-uro-om-fransk-okonomi/?ctxref=ext',
  },
  {
    headline:
      'Kinesisk: Den pekingand er en selvstændig grund til ikke at tage hjem fra Østerbro',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/kultur/anmeldelser/restaurant/ECE18617822/kinesisk-den-pekingand-er-en-selvstaendig-grund-til-ikke-at-tage-hjem-fra-osterbro/?ctxref=ext',
  },
  {
    headline:
      'Asiatiske aktier: Store fald efter uge præget af fredsaftale og toldtrusler',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18625754/asiatiske-aktier-store-fald-efter-uge-praeget-af-fredsaftale-og-toldtrusler/?ctxref=ext',
  },
  {
    headline: 'Reform udskydes: Kryptoinvestorer risikerer skat af gevinst og tab',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18625712/reform-udskydes-kryptoinvestorer-risikerer-skat-af-gevinst-og-tab/?ctxref=ext',
  },
  {
    headline: 'Nu kommer verdens vigtigste regnskaber: Hold øje med disse',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18620894/nu-kommer-verdens-vigtigste-regnskaber-hold-oeje-med-disse/?ctxref=ext',
  },
  {
    headline:
      'Ørsted risikerer medarbejderflugt: »Kan blive et spørgsmål om at redde sig selv«',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18620888/orsted-risikerer-medarbejderflugt-kan-blive-et-spoergsmaal-om-at-redde-sig-selv/?ctxref=ext',
  },
  {
    headline: 'Vi skal gøre cybersikkerhed til Danmarks styrkeposition',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/debat/kronik/ECE18615962/vi-skal-goere-cybersikkerhed-til-danmarks-styrkeposition/?ctxref=ext',
  },
  {
    headline: 'Mandag rullede milliarderne ind - torsdag skulle der fyres',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18614486/mandag-rullede-milliarderne-ind-torsdag-skulle-der-fyres/?ctxref=ext',
  },
  {
    headline: 'USA/lukning: Nervøsitet for bobler fik investorerne til at tøve',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18614399/usalukning-nervositet-for-bobler-fik-investorerne-til-at-tove/?ctxref=ext',
  },
  {
    headline: 'Deutsche Bank ser guld og bitcoin som væsentlige centralbank-reserver',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18614372/deutsche-bank-ser-guld-og-bitcoin-som-vaesentlige-centralbankreserver/?ctxref=ext',
  },
  {
    headline: 'Danskerne optager langt færre banklån',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18614216/danskerne-optager-langt-faerre-banklaan/?ctxref=ext',
  },
  {
    headline: 'Olieprisfald accelererer efter fredsaftale i Mellemøsten',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18614138/olieprisfald-accelererer-efter-fredsaftale-i-mellemosten/?ctxref=ext',
  },
  {
    headline: 'Lars Fruergaard: Jeg skal ikke være topchef igen',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18613862/lars-fruergaard-jeg-skal-ikke-vaere-topchef-igen/?ctxref=ext',
  },
  {
    headline: 'Topchef om kraftig opjustering: »Bankkunderne i Danmark har det godt«',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18613619/topchef-om-kraftig-opjustering-bankkunderne-i-danmark-har-det-godt/?ctxref=ext',
  },
  {
    headline: 'Trump takker Egypten, Qatar og Tyrkiet for hjælp til Gaza-aftale',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/international/ECE18613400/trump-takker-egypten-qatar-og-tyrkiet-for-hjaelp-til-gazaaftale/?ctxref=ext',
  },
  {
    headline: 'Yen svækkes til svageste niveau siden februar',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18613274/yen-svaekkes-til-svageste-niveau-siden-februar/?ctxref=ext',
  },
  {
    headline:
      'Omsætningen hos B&O falder til laveste niveau i fem år – men der er fremgang at spore',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18613253/omsaetningen-hos-bo-falder-til-laveste-niveau-i-fem-aar-men-der-er-fremgang-at-spore/?ctxref=ext',
  },
  {
    headline:
      'Markederne reagerer nærmest ikke: Fredsaftale kan dog få positiv effekt på sigt',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18613247/markederne-reagerer-naermest-ikke-fredsaftale-kan-dog-faa-positiv-effekt-paa-sigt/?ctxref=ext',
  },
  {
    headline: 'Jyske Bank opjusterer kraftigt',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18613148/jyske-bank-opjusterer-kraftigt/?ctxref=ext',
  },
  {
    headline:
      'Torsdagens aktier: Mærsk trak i minus - negativ effekt af mulig fredsaftale i Gaza',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18613136/torsdagens-aktier-maersk-trak-i-minus-negativ-effekt-af-mulig-fredsaftale-i-gaza/?ctxref=ext',
  },
  {
    headline: 'Torsdagens obligationer: Meget marginalt renteplus',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18613133/torsdagens-obligationer-meget-marginalt-renteplus/?ctxref=ext',
  },
  {
    headline: 'SAS-kunder føler sig snydt efter coronaaflyste fly',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18612716/saskunder-foeler-sig-snydt-efter-coronaaflyste-fly/?ctxref=ext',
  },
  {
    headline: 'Ørsteds topchef fik det samme spørgsmål igen og igen efter opjustering',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18612548/orsteds-topchef-fik-det-samme-spoergsmaal-igen-og-igen-efter-opjustering/?ctxref=ext',
  },
  {
    headline: 'Amerikanske aktier: Meget forsigtigt plus uden nye rentesignaler',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18612455/amerikanske-aktier-meget-forsigtigt-plus-uden-nye-rentesignaler/?ctxref=ext',
  },
  {
    headline: 'Ferrari i største fald siden 2016',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18612347/ferrari-i-storste-fald-siden-2016/?ctxref=ext',
  },
  {
    headline: 'Søren Linding: Uden håb er Ørsted mere afvikling end udvikling',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/investor/ECE18611843/soeren-linding-uden-haab-er-orsted-mere-afvikling-end-udvikling/?ctxref=ext',
  },
  {
    headline:
      'Mærsk overvejer at genoptage transport gennem Det Røde Hav ved fredsaftale',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18611816/maersk-overvejer-at-genoptage-transport-gennem-det-rode-hav-ved-fredsaftale/?ctxref=ext',
  },
  {
    headline: 'Pepsico hjulpet af øget efterspørgsel efter Pepsi',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18611685/pepsico-hjulpet-af-oget-eftersporgsel-efter-pepsi/?ctxref=ext',
  },
  {
    headline: 'Obligationer/middag: Renten forbliver i det snævre spænd',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18611658/obligationermiddag-renten-forbliver-i-det-snaevre-spaend/?ctxref=ext',
  },
  {
    headline:
      'Fyringsrunde viser det nye Ørsted:  Et »betydeligt mere vækstorienteret« selskab',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18611597/fyringsrunde-viser-det-nye-orsted-et-betydeligt-mere-vaekstorienteret-selskab/?ctxref=ext',
  },
  {
    headline: 'Djurslands Bank opjusterer forventninger',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/finans/ECE18611564/djurslands-bank-opjusterer-forventninger/?ctxref=ext',
  },
  {
    headline: 'Konkursadvokat i Kasi: Whistleblower krævede 20 mio. for Pandora-tip',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18611504/konkursadvokat-i-kasi-whistleblower-kraevede-20-mio-for-pandoratip/?ctxref=ext',
  },
  {
    headline: 'Vil spare milliardbeløb: Ørsted sætter tal på fyringsrunde',
    newspaper: 'Jyllands-Posten',
    link: 'https://jyllands-posten.dk/erhverv/ECE18611414/vil-spare-milliardbeloeb-orsted-saetter-tal-paa-fyringsrunde/?ctxref=ext',
  },
]
// --- END: Paste the JSON array of articles here ---

async function main() {
  await initializeScriptEnv()
  logger.info(
    `🚀 Backfilling ${ARTICLES_TO_BACKFILL.length} previously assessed articles to prevent reprocessing...`
  )

  try {
    const sourcesResult = await getAllSources({})
    if (!sourcesResult.success) throw new Error(sourcesResult.error)
    const sourceMap = new Map(sourcesResult.data.map((s) => [s.name, s]))

    const bulkOps = ARTICLES_TO_BACKFILL.map((articleData) => {
      const source = sourceMap.get(articleData.newspaper)
      if (!source) {
        logger.warn(
          { article: articleData },
          'Could not find source for backfill article. Skipping.'
        )
        return null
      }
      return {
        updateOne: {
          filter: { link: articleData.link },
          update: {
            $setOnInsert: {
              ...articleData,
              _id: new mongoose.Types.ObjectId(),
              source: source.name,
              country: source.country,
              relevance_headline: 0, // Mark as assessed with low relevance
              assessment_headline: 'Backfilled as noise from previous run.',
              status: 'assessed',
              createdAt: new Date(),
            },
          },
          upsert: true,
        },
      }
    }).filter(Boolean)

    if (bulkOps.length > 0) {
      const dbResult = await bulkWriteArticles(bulkOps)
      if (dbResult.success) {
        logger.info(
          colors.green(
            `✅ Backfill complete. Upserted ${dbResult.result.upsertedCount} new article stubs.`
          )
        )
      } else {
        throw new Error(dbResult.error)
      }
    } else {
      logger.info('✅ No valid articles to backfill.')
    }
  } catch (error) {
    logger.fatal({ err: error }, 'A critical error occurred during the backfill script.')
  }
}

main()

```

## 📄 scripts/maintenance/delete-relevant-today.js
*Lines: 101, Size: 3.28 KB*

```javascript
// apps/pipeline/scripts/maintenance/delete-relevant-today.js (v2 - Hardened)
/**
 * @command maintenance:delete-relevant-today
 * @group Maintenance
 * @description Deletes all articles from today that were deemed relevant, forcing a full re-scrape on the next run.
 * @example pnpm run maintenance:delete-relevant-today -- --yes
 */
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { Article } from '@headlines/models'
import { settings } from '@headlines/config'
import colors from 'ansi-colors'
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('yes', {
      type: 'boolean',
      description: 'Skip the confirmation prompt and proceed with deletion.',
    })
    .help().argv

  await initializeScriptEnv()
  logger.info('🚀 Searching for relevant articles from today to delete...')

  try {
    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000)

    const filter = {
      createdAt: { $gte: twentyFourHoursAgo },
      $or: [
        { relevance_headline: { $gte: settings.HEADLINES_RELEVANCE_THRESHOLD } },
        { relevance_article: { $gte: settings.ARTICLES_RELEVANCE_THRESHOLD } },
      ],
    }

    // Select the fields needed for display, PLUS the _id to identify malformed docs.
    const articlesToDelete = await Article.find(filter)
      .select('_id headline relevance_headline relevance_article')
      .lean()

    if (articlesToDelete.length === 0) {
      logger.info('✅ No relevant articles from today were found to delete.')
      return
    }

    console.log(
      colors.yellow(
        `\nFound ${articlesToDelete.length} relevant articles from today that will be deleted:`
      )
    )

    // --- START OF THE FIX ---
    const tableData = articlesToDelete.map((a) => {
      // Safely handle potentially missing headlines
      if (!a.headline) {
        logger.warn(
          { articleId: a._id },
          'Found relevant article with a MISSING HEADLINE field.'
        )
        return {
          Headline: colors.red.bold('--- MISSING HEADLINE ---'),
          HL_Score: a.relevance_headline,
          Article_Score: a.relevance_article || 'N/A',
        }
      }
      return {
        Headline: a.headline.substring(0, 80) + (a.headline.length > 80 ? '...' : ''),
        HL_Score: a.relevance_headline,
        Article_Score: a.relevance_article || 'N/A',
      }
    })
    console.table(tableData)
    // --- END OF THE FIX ---

    if (!argv.yes) {
      logger.warn(
        colors.red.bold(
          '\n🔥 DANGER 🔥 This is a destructive operation. The articles listed above will be permanently deleted from the database.'
        )
      )
      logger.warn(`To proceed, run the command again with the --yes flag.`)
      return
    }

    logger.info(`Proceeding with deletion of ${articlesToDelete.length} articles...`)

    const result = await Article.deleteMany(filter)

    logger.info(
      colors.green(`✅ Successfully deleted ${result.deletedCount} relevant articles.`)
    )
    logger.info('The next pipeline run will re-scrape these headlines as fresh items.')
  } catch (error) {
    logger.error({ err: error }, 'A critical error occurred during the deletion script.')
  }
}

main()

```

## 📄 scripts/maintenance/delete-today.js
*Lines: 61, Size: 1.77 KB*

```javascript
// apps/pipeline/scripts/maintenance/delete-today.js
/**
 * @command maintenance:delete-today
 * @group Maintenance
 * @description Delete all data created today or within a specified time window. Flags: --yes, --minutes <number>
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { logger } from '@headlines/utils-shared'
import { deleteAllSince } from '@headlines/data-access'
import { initializeScriptEnv } from '../seed/lib/script-init.js'

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('minutes', {
      alias: 'm',
      type: 'number',
      description: 'Specify the lookback window in minutes.',
    })
    .option('yes', { type: 'boolean', description: 'Skip confirmation prompt.' })
    .help().argv

  await initializeScriptEnv()

  try {
    let cutoff
    let timeDescription
    if (argv.minutes) {
      cutoff = new Date(Date.now() - argv.minutes * 60 * 1000)
      timeDescription = `in the last ${argv.minutes} minutes`
    } else {
      cutoff = new Date()
      cutoff.setUTCHours(0, 0, 0, 0)
      timeDescription = 'today'
    }

    if (!argv.yes) {
      logger.warn(
        `This will delete all articles, events, and opportunities created ${timeDescription}. Run with --yes to proceed.`
      )
      return
    }

    logger.info(`Deleting all documents created ${timeDescription}...`)
    const result = await deleteAllSince(cutoff)

    if (!result.success) throw new Error(result.error)

    logger.info('✅ Deletion complete. Summary:')
    Object.entries(result.summary).forEach(([modelName, deletedCount]) => {
      if (deletedCount > 0) {
        logger.info(`  - Deleted ${deletedCount} ${modelName}.`)
      }
    })
  } catch (error) {
    logger.error({ err: error }, 'Deletion script failed.')
  }
}

main()

```

## 📄 scripts/maintenance/recover-opportunities.js
*Lines: 116, Size: 3.89 KB*

```javascript
// apps/pipeline/scripts/maintenance/recover-opportunities.js
/**
 * @command maintenance:recover-opps
 * @group Maintenance
 * @description Finds events with key individuals but no linked opportunities and re-runs the opportunity creation process.
 * @example pnpm run maintenance:recover-opps -- --yes
 * @example pnpm run maintenance:recover-opps -- --dry-run --since-hours 72
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import colors from 'ansi-colors'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { SynthesizedEvent } from '@headlines/models'
import { enrichAndLinkOpportunities } from '../../src/pipeline/submodules/opportunityUpserter.js'
import { closeReader, promptUser } from '../seed/lib/user-interact.js'

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('dry-run', {
      type: 'boolean',
      description: 'Simulate the run without writing to the database.',
    })
    .option('yes', {
      alias: 'y',
      type: 'boolean',
      description: 'Skip the confirmation prompt.',
    })
    .option('since-hours', {
      type: 'number',
      description: 'Lookback window in hours to find orphaned events.',
      default: 48, // Default to the last 2 days
    })
    .help().argv

  await initializeScriptEnv()
  logger.info('🚀 Starting Opportunity Recovery Script...')

  try {
    const cutoffDate = new Date(Date.now() - argv.sinceHours * 60 * 60 * 1000)
    logger.info(
      `Searching for orphaned events created since ${cutoffDate.toISOString()}...`
    )

    // Find events that have key_individuals but no linked relatedOpportunities
    const orphanedEvents = await SynthesizedEvent.find({
      createdAt: { $gte: cutoffDate },
      key_individuals: { $exists: true, $not: { $size: 0 } },
      relatedOpportunities: { $exists: true, $size: 0 },
    }).lean()

    if (orphanedEvents.length === 0) {
      logger.info(
        '✅ No orphaned events found within the specified time frame. Nothing to recover.'
      )
      return
    }

    logger.info(
      colors.yellow(
        `\nFound ${orphanedEvents.length} event(s) to reprocess for opportunities:`
      )
    )
    console.table(
      orphanedEvents.map((e) => ({
        EventID: e._id,
        Headline: e.synthesized_headline.substring(0, 70) + '...',
        'Key Individuals': e.key_individuals.map((k) => k.name).join(', '),
      }))
    )

    if (argv.dryRun) {
      logger.info(
        colors.yellow(
          '\n[DRY RUN] Would attempt to generate and link opportunities for the events listed above.'
        )
      )
      logger.info('[DRY RUN] No changes will be made to the database.')
      return
    }

    if (!argv.yes) {
      const answer = await promptUser(
        '\nProceed with reprocessing these events to generate opportunities? (y/n): '
      )
      if (answer !== 'y') {
        logger.warn('Operation cancelled by user.')
        return
      }
    }

    logger.info(`\n⚙️ Reprocessing ${orphanedEvents.length} event(s)...`)

    // We can reuse the existing `enrichAndLinkOpportunities` function.
    // We pass an empty array for `potentialOpportunities` because we are starting fresh
    // from the `key_individuals` within the `savedEvents` (our orphanedEvents).
    const recoveredOpportunities = await enrichAndLinkOpportunities([], orphanedEvents)

    if (recoveredOpportunities.length > 0) {
      logger.info(
        colors.green(
          `\n✅ Success! Recovered and saved ${recoveredOpportunities.length} opportunities.`
        )
      )
    } else {
      logger.warn(
        '\n⚠️ Reprocessing complete, but no new opportunities were created. This may be expected if they were duplicates or failed generation again.'
      )
    }
  } catch (error) {
    logger.fatal({ err: error }, 'A critical error occurred during the recovery script.')
  }
}

main().finally(() => closeReader())

```

## 📄 scripts/maintenance/refresh.js
*Lines: 116, Size: 3.48 KB*

```javascript
// apps/pipeline/scripts/maintenance/refresh.js
/**
 * @command maintenance:refresh
 * @group Maintenance
 * @description Resets today's relevant articles and triggers a --refresh pipeline run.
 * @example pnpm run maintenance:refresh -- --yes
 * @example pnpm run maintenance:refresh -- --yes --hours 48
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { Article, SynthesizedEvent, RunVerdict } from '@headlines/models'
import { settings } from '@headlines/config'
import colors from 'ansi-colors'
import { exec } from 'child_process'
import { promisify } from 'util'

const execAsync = promisify(exec)

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('yes', {
      type: 'boolean',
      description: 'Skip the confirmation prompt.',
    })
    .option('hours', {
      alias: 'h',
      type: 'number',
      description: 'The lookback window in hours to find articles.',
      default: 24,
    })
    .help().argv

  await initializeScriptEnv()
  logger.info(
    `🚀 Starting Refresh script for relevant articles from the last ${argv.hours} hours...`
  )

  try {
    const cutoffDate = new Date(Date.now() - argv.hours * 60 * 60 * 1000)

    const filter = {
      createdAt: { $gte: cutoffDate },
      relevance_headline: { $gte: settings.HEADLINES_RELEVANCE_THRESHOLD },
      synthesizedEventId: { $exists: false },
    }

    const articlesToRefresh = await Article.find(filter).lean()

    if (articlesToRefresh.length === 0) {
      logger.info(
        `✅ No relevant articles found to refresh within the last ${argv.hours} hours.`
      )
      return
    }

    console.log(
      colors.yellow(`\nFound ${articlesToRefresh.length} relevant articles to refresh:`)
    )
    console.table(
      articlesToRefresh.map((a) => ({
        ID: a._id,
        Headline: a.headline.substring(0, 70) + '...',
      }))
    )

    if (!argv.yes) {
      logger.warn(
        colors.yellow.bold(
          `\n⚠️ This will delete any partial outputs (events, verdicts) from today and then trigger a new pipeline run with the --refresh flag. Run with --yes to proceed.`
        )
      )
      return
    }

    logger.info(`Proceeding with cleanup and refresh...`)

    const [eventDeletion, verdictDeletion] = await Promise.all([
      SynthesizedEvent.deleteMany({ createdAt: { $gte: cutoffDate } }),
      RunVerdict.deleteMany({ createdAt: { $gte: cutoffDate } }),
    ])
    logger.info(
      `Cleanup: Deleted ${eventDeletion.deletedCount} events and ${verdictDeletion.deletedCount} run verdicts.`
    )

    logger.info(colors.cyan('\n--- INITIATING REFRESH PIPELINE RUN ---'))

    // Construct the command to re-run the pipeline with --refresh
    // This assumes the script is run from the monorepo root via pnpm
    const command = `pnpm run pipeline -- --refresh`

    console.log(`Executing: ${command}`)

    // Execute the pipeline command and stream its output
    const child = exec(command, { cwd: process.cwd() })

    child.stdout.pipe(process.stdout)
    child.stderr.pipe(process.stderr)

    await new Promise((resolve, reject) => {
      child.on('close', (code) => {
        if (code === 0) {
          resolve()
        } else {
          reject(new Error(`Pipeline process exited with code ${code}`))
        }
      })
    })
  } catch (error) {
    logger.error({ err: error }, 'A critical error occurred during the refresh script.')
  }
}

main()

```

## 📄 scripts/maintenance/reprocess-failed.js
*Lines: 120, Size: 3.71 KB*

```javascript
// apps/pipeline/scripts/maintenance/reprocess-failed.js
/**
 * @command maintenance:reprocess-failed
 * @group Maintenance
 * @description Finds and re-processes relevant articles from a recent failed run.
 * @example pnpm run maintenance:reprocess-failed -- --yes
 * @example pnpm run maintenance:reprocess-failed -- --yes --hours 48
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { Article, SynthesizedEvent, RunVerdict } from '@headlines/models'
import { settings } from '@headlines/config'
import colors from 'ansi-colors'
import { runPipeline } from '../../src/orchestrator.js'

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('yes', {
      type: 'boolean',
      description: 'Skip the confirmation prompt.',
    })
    .option('hours', {
      alias: 'h',
      type: 'number',
      description: 'The lookback window in hours to find stuck articles.',
      default: 24,
    })
    .help().argv

  await initializeScriptEnv()
  logger.info(
    `🚀 Starting Reprocess script for failed articles from the last ${argv.hours} hours...`
  )

  try {
    const cutoffDate = new Date(Date.now() - argv.hours * 60 * 60 * 1000)

    const filter = {
      createdAt: { $gte: cutoffDate },
      relevance_headline: { $gte: settings.HEADLINES_RELEVANCE_THRESHOLD },
      synthesizedEventId: { $exists: false },
    }

    const articlesToReprocess = await Article.find(filter).lean()

    if (articlesToReprocess.length === 0) {
      logger.info(
        `✅ No stuck relevant articles found to reprocess within the last ${argv.hours} hours.`
      )
      return
    }

    console.log(
      colors.yellow(
        `\nFound ${articlesToReprocess.length} stuck articles that will be re-processed:`
      )
    )
    console.table(
      articlesToReprocess.map((a) => ({
        ID: a._id,
        Headline: a.headline.substring(0, 70) + '...',
        'Headline Score': a.relevance_headline,
      }))
    )

    if (!argv.yes) {
      logger.warn(
        colors.yellow.bold(
          `\n⚠️ This will delete any partial outputs (events, verdicts) from the time window and then re-run the pipeline on ONLY these articles. Run with --yes to proceed.`
        )
      )
      return
    }

    logger.info(`Proceeding with cleanup and re-processing...`)

    // --- START OF DEFINITIVE FIX ---
    // Clean up any orphaned outputs from the failed run to prevent unique key collisions.
    const [eventDeletion, verdictDeletion] = await Promise.all([
      SynthesizedEvent.deleteMany({ createdAt: { $gte: cutoffDate } }),
      RunVerdict.deleteMany({ createdAt: { $gte: cutoffDate } }),
    ])
    logger.info(
      `Cleanup: Deleted ${eventDeletion.deletedCount} events and ${verdictDeletion.deletedCount} run verdicts from the time window.`
    )
    // --- END OF DEFINITIVE FIX ---

    const articleIdsToReset = articlesToReprocess.map((a) => a._id)
    const update = {
      $set: { status: 'scraped' },
      $unset: {
        relevance_article: '',
        assessment_article: '',
        key_individuals: '',
        transactionType: '',
        tags: '',
        synthesizedEventId: '',
      },
    }
    const resetResult = await Article.updateMany(
      { _id: { $in: articleIdsToReset } },
      update
    )
    logger.info(`Successfully reset ${resetResult.modifiedCount} articles.`)

    logger.info(colors.cyan('\n--- INITIATING REPROCESS PIPELINE RUN ---'))

    await runPipeline({
      useTestPayload: true,
      articlesForPipeline: articlesToReprocess,
    })
  } catch (error) {
    logger.error({ err: error }, 'A critical error occurred during the reprocess script.')
  }
}

main()

```

## 📄 scripts/maintenance/reprocess-lost-articles.js
*Lines: 85, Size: 2.88 KB*

```javascript
// apps/pipeline/scripts/maintenance/reprocess-lost-articles.js
/**
 * @command maintenance:reprocess
 * @group Maintenance
 * @description Reprocesses articles from the last 24 hours that were scraped but failed to synthesize.
 */
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { findArticles } from '@headlines/data-access'
import { runAssessAndEnrich } from '../../src/pipeline/3_assessAndEnrich.js'
import { runClusterAndSynthesize } from '../../src/pipeline/4_clusterAndSynthesize.js'
import { runCommitAndNotify } from '../../src/pipeline/5_commitAndNotify.js'
import colors from 'ansi-colors'

async function main() {
  await initializeScriptEnv()
  logger.info('🚀 Starting reprocessing script for lost articles...')

  try {
    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000)

    const articlesResult = await findArticles({
      filter: {
        status: 'scraped',
        synthesizedEventId: { $exists: false },
        createdAt: { $gte: twentyFourHoursAgo },
      },
    })

    if (!articlesResult.success) throw new Error(articlesResult.error)
    const articlesToReprocess = articlesResult.data

    if (articlesToReprocess.length === 0) {
      logger.info('✅ No articles found needing reprocessing.')
      return
    }

    logger.info(
      colors.yellow(`Found ${articlesToReprocess.length} articles to reprocess.`)
    )

    let pipelinePayload = {
      articlesForPipeline: articlesToReprocess,
      runStats: {
        errors: [],
        eventsSynthesized: 0,
        judgeVerdict: null,
        eventsEmailed: 0,
        enrichmentOutcomes: [],
        scraperHealth: [],
      },
      dbConnection: true,
      noCommitMode: false,
    }

    logger.info('--- REPROCESSING STAGE 3: ASSESS & ENRICH ---')
    pipelinePayload = (await runAssessAndEnrich(pipelinePayload)).payload

    if (pipelinePayload.enrichedArticles && pipelinePayload.enrichedArticles.length > 0) {
      logger.info('--- REPROCESSING STAGE 4: CLUSTER & SYNTHESIZE ---')
      pipelinePayload = (await runClusterAndSynthesize(pipelinePayload)).payload
    } else {
      logger.info('No articles survived the enrichment stage. Halting.')
    }

    if (
      pipelinePayload.synthesizedEvents &&
      pipelinePayload.synthesizedEvents.length > 0
    ) {
      logger.info('--- REPROCESSING STAGE 5: COMMIT & NOTIFY ---')
      pipelinePayload = (await runCommitAndNotify(pipelinePayload)).payload
    } else {
      logger.info('No events were synthesized from the reprocessed articles.')
    }

    logger.info(colors.green('✅ Reprocessing complete!'))
    logger.info(`  - Events created: ${pipelinePayload.runStats.eventsSynthesized}`)
    logger.info(`  - Notifications sent: ${pipelinePayload.runStats.eventsEmailed}`)
  } catch (error) {
    logger.error({ err: error }, 'A critical error occurred during reprocessing.')
  }
}

main()

```

## 📄 scripts/maintenance/reprocess-specific-articles.js
*Lines: 185, Size: 6.69 KB*

```javascript
/**
 * @command maintenance:reprocess-specific
 * @group Maintenance
 * @description Reprocesses a specific list of article URLs that were missed or failed in a previous run.
 * @example pnpm run maintenance:reprocess-specific -- --urls "http://..." --headlines "corresponding headline..."
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import mongoose from 'mongoose'
import colors from 'ansi-colors'
import * as cheerio from 'cheerio'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { getAllSources } from '@headlines/data-access'
import { browserManager } from '@headlines/scraper-logic/browserManager.js'
import { fetchPageWithPlaywright } from '@headlines/scraper-logic/browser.js'
import { runAssessAndEnrich } from '../../src/pipeline/3_assessAndEnrich.js'
import { runClusterAndSynthesize } from '../../src/pipeline/4_clusterAndSynthesize.js'
import { runCommitAndNotify } from '../../src/pipeline/5_commitAndNotify.js'
import { RunStatsManager } from '../../src/utils/runStatsManager.js'
import { ArticleTraceLogger } from '../../src/utils/articleTraceLogger.js'

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('urls', {
      type: 'array',
      description: 'A space-separated list of article URLs to reprocess.',
    })
    .option('headlines', {
      type: 'string',
      description: 'A corresponding, quote-enclosed headline for each URL.',
    }) // Changed to string
    .check((argv) => {
      // Re-parsing headlines argument to handle spaces
      if (argv.headlines && typeof argv.headlines === 'string') {
        argv.headlines = [argv.headlines]
      }
      if (argv.urls && argv.headlines && argv.urls.length !== argv.headlines.length) {
        throw new Error(
          'The number of --urls must match the number of --headlines provided. Enclose headlines in quotes.'
        )
      }
      return true
    })
    .help().argv

  if (!argv.urls || !argv.headlines) {
    logger.error('Both --urls and --headlines arguments are required.')
    return
  }

  await initializeScriptEnv()
  logger.info(`🚀 Starting targeted reprocessing for ${argv.urls.length} article(s)...`)

  try {
    await browserManager.initialize()

    const sourcesResult = await getAllSources({})
    if (!sourcesResult.success) throw new Error(sourcesResult.error)
    const allSources = sourcesResult.data // DEFINITIVE FIX: Use a different variable name to avoid shadowing.

    const sourceMap = new Map(
      allSources.map((s) => [new URL(s.baseUrl).hostname.replace('www.', ''), s])
    )

    const articlesToReprocess = []
    for (let i = 0; i < argv.urls.length; i++) {
      const url = argv.urls[i]
      const originalHeadline = argv.headlines[i]
      const urlHostname = new URL(url).hostname.replace('www.', '')
      let source = sourceMap.get(urlHostname)

      if (!source) {
        const domainParts = urlHostname.split('.')
        while (domainParts.length > 1) {
          const parentDomain = domainParts.join('.')
          if (sourceMap.has(parentDomain)) {
            source = sourceMap.get(parentDomain)
            break
          }
          domainParts.shift()
        }
      }

      if (!source) {
        logger.error({ url }, `Could not find a matching source for this URL. Skipping.`)
        continue
      }
      logger.info({ url, sourceName: source.name }, 'Successfully matched URL to source.')

      logger.info({ url }, 'Fetching page to check status...')
      const html = await fetchPageWithPlaywright(url, 'Reprocess-Headline-Fetcher')
      const $ = cheerio.load(html || '')
      const pageTitle = $('title').text().toLowerCase()

      if (
        !html ||
        pageTitle.includes('not found') ||
        pageTitle.includes('finner ikke siden')
      ) {
        logger.warn(
          { url },
          'URL returned a 404 or failed to load. Injecting original headline for salvage operation.'
        )
        articlesToReprocess.push({
          _id: new mongoose.Types.ObjectId(),
          headline: originalHeadline,
          link: url,
          source: source.name,
          newspaper: source.name,
          country: source.country,
          relevance_headline: 100,
          assessment_headline: 'Manual reprocessing trigger for stale URL.',
          status: 'scraped',
          articleContent: { contents: [] },
        })
      } else {
        const realHeadline = $('h1').first().text().trim() || $('title').text().trim()
        articlesToReprocess.push({
          _id: new mongoose.Types.ObjectId(),
          headline: realHeadline,
          link: url,
          source: source.name,
          newspaper: source.name,
          country: source.country,
          relevance_headline: 100,
          assessment_headline: 'Manual reprocessing trigger.',
          status: 'scraped',
        })
      }
    }

    if (articlesToReprocess.length === 0) {
      logger.warn('No valid articles could be prepared for reprocessing. Exiting.')
      return
    }

    const runStatsManager = new RunStatsManager()
    const articleTraceLogger = new ArticleTraceLogger()
    await articleTraceLogger.initialize()

    let pipelinePayload = {
      articlesForPipeline: articlesToReprocess,
      runStatsManager,
      articleTraceLogger,
      dbConnection: true,
      noCommitMode: false,
    }

    logger.info(colors.cyan('\n--- REPROCESSING STAGE 3: ASSESS & ENRICH ---'))
    pipelinePayload = (await runAssessAndEnrich(pipelinePayload)).payload

    if (pipelinePayload.enrichedArticles && pipelinePayload.enrichedArticles.length > 0) {
      logger.info(colors.cyan('\n--- REPROCESSING STAGE 4: CLUSTER & SYNTHESIZE ---'))
      pipelinePayload = (await runClusterAndSynthesize(pipelinePayload)).payload
    } else {
      logger.warn('No articles survived the enrichment stage. Halting.')
    }

    if (
      pipelinePayload.synthesizedEvents &&
      pipelinePayload.synthesizedEvents.length > 0
    ) {
      logger.info(colors.cyan('\n--- REPROCESSING STAGE 5: COMMIT & NOTIFY ---'))
      pipelinePayload = (await runCommitAndNotify(pipelinePayload)).payload
    } else {
      logger.info('No events were synthesized from the reprocessed articles.')
    }

    logger.info(colors.green('\n✅ Reprocessing complete! Check the final report.'))
    const finalStats = runStatsManager.getStats()
    logger.info(`  - Events Created: ${finalStats.eventsSynthesized}`)
    logger.info(
      `  - Opportunities Created: ${(pipelinePayload.savedOpportunities || []).length}`
    )
    logger.info(`  - Notifications Sent: ${finalStats.eventsEmailed}`)
  } catch (error) {
    logger.fatal({ err: error }, 'A critical error occurred during reprocessing.')
  } finally {
    await browserManager.close()
  }
}

main()

```

## 📄 scripts/maintenance/reset-assessed-today.js
*Lines: 74, Size: 2.28 KB*

```javascript
// apps/pipeline/scripts/maintenance/reset-assessed-today.js (v2 - More Robust)
/**
 * @command maintenance:reset-assessed
 * @group Maintenance
 * @description Resets relevant articles that were assessed but not synthesized, preparing them for reprocessing. Flags: --all
 */
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { Article } from '@headlines/models'
import { settings } from '@headlines/config'
import colors from 'ansi-colors'
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('all', {
      type: 'boolean',
      description:
        'Reset ALL stuck articles, regardless of creation date. (Default is today only)',
    })
    .help().argv

  await initializeScriptEnv()
  logger.info('🚀 Resetting relevant, assessed articles for reprocessing...')

  try {
    const filter = {
      status: 'assessed',
      synthesizedEventId: { $exists: false },
      relevance_headline: { $gte: settings.HEADLINES_RELEVANCE_THRESHOLD },
    }

    if (!argv.all) {
      const today = new Date()
      today.setUTCHours(0, 0, 0, 0)
      filter.createdAt = { $gte: today }
      logger.info('Searching for articles created today. Use --all to search all time.')
    } else {
      logger.warn('Searching for ALL stuck articles regardless of creation date.')
    }

    const update = {
      $set: { status: 'scraped' },
      $unset: {
        relevance_article: '',
        assessment_article: '',
        key_individuals: '',
        pipeline_lifecycle: '',
        // Also unset new fields from enrich stage
        transactionType: '',
        tags: '',
      },
    }

    const result = await Article.updateMany(filter, update)

    if (result.matchedCount === 0) {
      logger.warn('⚠️ No relevant, assessed articles were found to reset.')
    } else {
      logger.info(
        colors.green(
          `✅ Successfully reset ${result.modifiedCount} of ${result.matchedCount} articles back to 'scraped' status.`
        )
      )
      logger.info('You can now safely re-run the pipeline to reprocess these articles.')
    }
  } catch (error) {
    logger.error({ err: error }, 'A critical error occurred during the reset script.')
  }
}

main()

```

## 📄 scripts/maintenance/reset-relevant-today.js
*Lines: 121, Size: 3.88 KB*

```javascript
// apps/pipeline/scripts/maintenance/refresh-relevant-today.js
/**
 * @command maintenance:refresh-relevant
 * @group Maintenance
 * @description Finds relevant but unprocessed articles within a given time window, resets them, and re-runs the pipeline.
 * @example pnpm run maintenance:refresh-relevant -- --yes
 * @example pnpm run maintenance:refresh-relevant -- --yes --hours 48
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { Article, SynthesizedEvent, RunVerdict } from '@headlines/models'
import { settings } from '@headlines/config'
import colors from 'ansi-colors'
import { runPipeline } from '../../src/orchestrator.js'

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('yes', {
      type: 'boolean',
      description: 'Skip the confirmation prompt and proceed with the refresh.',
    })
    // --- START OF DEFINITIVE FIX ---
    .option('hours', {
      alias: 'h',
      type: 'number',
      description: 'The lookback window in hours to find stuck articles.',
      default: 24, // Default to the last 24 hours
    })
    // --- END OF DEFINITIVE FIX ---
    .help().argv

  await initializeScriptEnv()
  logger.info(
    `🚀 Starting Refresh & Re-run script for relevant articles from the last ${argv.hours} hours...`
  )

  try {
    const cutoffDate = new Date(Date.now() - argv.hours * 60 * 60 * 1000)

    const filter = {
      createdAt: { $gte: cutoffDate },
      relevance_headline: { $gte: settings.HEADLINES_RELEVANCE_THRESHOLD },
      // Find articles that are stuck and haven't been successfully part of an event
      synthesizedEventId: { $exists: false },
    }

    const articlesToReprocess = await Article.find(filter).lean()

    if (articlesToReprocess.length === 0) {
      logger.info(
        `✅ No relevant articles to refresh within the last ${argv.hours} hours.`
      )
      return
    }

    console.log(
      colors.yellow(
        `\nFound ${articlesToReprocess.length} relevant articles from the last ${argv.hours} hours that will be reset and re-processed:`
      )
    )
    console.table(
      articlesToReprocess.map((a) => ({
        Headline: a.headline.substring(0, 80) + '...',
        Status: a.status,
        'Headline Score': a.relevance_headline,
      }))
    )

    if (!argv.yes) {
      logger.warn(
        colors.yellow.bold(
          `\n⚠️ This will reset the articles above, delete any partial outputs (events, verdicts) from the same time window, and then re-run the pipeline on ONLY these articles. Run with --yes to proceed.`
        )
      )
      return
    }

    logger.info(`Proceeding with reset...`)

    const [eventDeletion, verdictDeletion] = await Promise.all([
      SynthesizedEvent.deleteMany({ createdAt: { $gte: cutoffDate } }),
      RunVerdict.deleteMany({ createdAt: { $gte: cutoffDate } }),
    ])
    logger.info(
      `Cleanup: Deleted ${eventDeletion.deletedCount} events and ${verdictDeletion.deletedCount} run verdicts from the time window.`
    )

    const articleIdsToReset = articlesToReprocess.map((a) => a._id)
    const update = {
      $set: { status: 'scraped' },
      $unset: {
        relevance_article: '',
        assessment_article: '',
        key_individuals: '',
        transactionType: '',
        tags: '',
        synthesizedEventId: '',
      },
    }
    const resetResult = await Article.updateMany(
      { _id: { $in: articleIdsToReset } },
      update
    )
    logger.info(`Successfully reset ${resetResult.modifiedCount} articles.`)

    logger.info(colors.cyan('\n--- INITIATING REFRESH PIPELINE RUN ---'))

    await runPipeline({
      useTestPayload: true,
      articlesForPipeline: articlesToReprocess,
      ...argv,
    })
  } catch (error) {
    logger.error({ err: error }, 'A critical error occurred during the refresh script.')
  }
}

main()

```

## 📄 scripts/maintenance/reset-source-analytics.js
*Lines: 22, Size: 708 Bytes*

```javascript
// scripts/database/maintenance/reset-source-analytics.js
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { resetAllSourceAnalytics } from '@headlines/data-access'

async function resetAnalytics() {
  await initializeScriptEnv()
  logger.info('🚀 Resetting all source analytics data...')
  try {
    const result = await resetAllSourceAnalytics()
    if (!result.success) throw new Error(result.error)

    logger.info(
      `✅ Analytics reset complete. Modified ${result.modifiedCount} source documents.`
    )
  } catch (error) {
    logger.fatal({ err: error }, '❌ Failed to reset source analytics.')
  }
}

resetAnalytics()

```

## 📄 scripts/mongo-backup.sh
*Lines: 86, Size: 2.61 KB*

```bash
#!/bin/bash
# mongo-backup.sh (version 6.0 - Dynamic Collection Discovery)
# This script discovers and dumps ALL collections from the database to a timestamped directory.

# --- Find the monorepo root in a completely robust way ---
# Start from the script's own directory
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# Traverse up the directory tree until we find the 'pnpm-workspace.yaml' file
while [[ "$DIR" != "/" ]]; do
    if [ -f "$DIR/pnpm-workspace.yaml" ]; then
        MONOREPO_ROOT="$DIR"
        break
    fi
    DIR=$(dirname "$DIR")
done

if [ -z "$MONOREPO_ROOT" ]; then
    echo "❌ Critical Error: Could not find the monorepo root by searching for 'pnpm-workspace.yaml'."
    exit 1
fi

# --- Configuration using absolute paths ---
BACKUP_DIR="$MONOREPO_ROOT/apps/pipeline/backup"
TIMESTAMP=$(date +"%Y-%m-%dT%H-%M-%S")
TARGET_DIR="$BACKUP_DIR/$TIMESTAMP"
ENV_FILE="$MONOREPO_ROOT/.env"

# --- Pre-flight Checks ---
if ! command -v mongosh &> /dev/null; then
    echo "❌ Error: 'mongosh' command-line tool not found. Please install MongoDB Shell."
    exit 1
fi

if [ ! -f "$ENV_FILE" ]; then
    echo "❌ Error: .env file not found in the monorepo root."
    echo "   - Script's calculated root path: $MONOREPO_ROOT"
    echo "   - Script was expecting .env at: $ENV_FILE"
    exit 1
fi

# Robustly export variables from the .env file
set -a 
source <(grep -v '^#' "$ENV_FILE" | sed -e '/^$/d' -e 's/\r$//')
set +a

if [ -z "$MONGO_URI" ]; then
    echo "❌ Error: MONGO_URI is not set or could not be read from your .env file."
    exit 1
fi

# --- Main Logic ---
echo "🚀 Starting MongoDB backup..."
echo "Target directory: $TARGET_DIR"

mkdir -p "$TARGET_DIR"

# --- Dynamically discover all collections ---
echo "Discovering all collections in the database..."
# Use mongosh to execute a command that returns a space-separated list of collection names.
COLLECTIONS=$(mongosh "$MONGO_URI" --quiet --eval "db.getCollectionNames().join(' ')")

if [ $? -ne 0 ] || [ -z "$COLLECTIONS" ]; then
    echo "❌ Error: Failed to fetch collection names from the database."
    exit 1
fi

echo "Found collections: $COLLECTIONS"
echo ""

for collection in $COLLECTIONS; do
    # Ignore the system collection
    if [ "$collection" == "system.views" ]; then
        continue
    fi

    echo "  -> Backing up collection: $collection..."
    mongodump --uri="$MONGO_URI" --collection="$collection" --out="$TARGET_DIR" --gzip
    if [ $? -ne 0 ]; then
        echo "❌ Error backing up collection $collection. Aborting."
        exit 1
    fi
done

echo "✅ Backup complete. All discovered collections saved to $TARGET_DIR"
exit 0
```

## 📄 scripts/mongo-restore.sh
*Lines: 61, Size: 1.53 KB*

```bash
#!/bin/bash
# mongo-restore.sh (version 1.0)
# This script restores all collections from a specified backup directory.

# --- Configuration ---
BACKUP_DIR="apps/pipeline/backup"

# Load MONGO_URI from the root .env file
if [ -f "./.env" ]; then
    export $(grep -v '^#' .env | xargs)
else
    echo "❌ Error: .env file not found in the monorepo root."
    exit 1
fi

if [ -z "$MONGO_URI" ]; then
    echo "❌ Error: MONGO_URI is not set in your .env file."
    exit 1
fi

# --- Main Logic ---
echo "🚀 Starting MongoDB restore..."

# Find the latest backup directory if none is specified
if [ -z "$1" ]; then
    LATEST_BACKUP=$(ls -td $BACKUP_DIR/*/ | head -1)
    if [ -z "$LATEST_BACKUP" ]; then
        echo "❌ No backup directories found in $BACKUP_DIR."
        exit 1
    fi
    echo "No directory specified. Using latest backup: $LATEST_BACKUP"
    SOURCE_DIR=$LATEST_BACKUP
else
    SOURCE_DIR="$BACKUP_DIR/$1"
fi

if [ ! -d "$SOURCE_DIR" ]; then
    echo "❌ Backup directory not found: $SOURCE_DIR"
    exit 1
fi

echo "⚠️ This will overwrite data in the target database."
read -p "Are you sure you want to restore from $SOURCE_DIR? (y/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Restore cancelled by user."
    exit 1
fi

echo "Restoring from $SOURCE_DIR..."
# Use --drop to ensure a clean restore of each collection
mongorestore --uri="$MONGO_URI" --dir="$SOURCE_DIR" --drop --gzip

if [ $? -eq 0 ]; then
    echo "✅ Restore complete."
else
    echo "❌ An error occurred during the restore process."
    exit 1
fi
exit 0

```

## 📄 scripts/purge-opportunities.js
*Lines: 47, Size: 1.39 KB*

```javascript
// scripts/purge-opportunities.js (version 1.0)
import 'dotenv/config'
import { connectDatabase, disconnectDatabase } from '../src/database.js'
import Opportunity from '../models/Opportunity.js'

const WEALTH_THRESHOLD = 20 // in millions USD

async function purgeLowValueOpportunities() {
  console.log('Connecting to database to purge low-value opportunities...')
  await connectDatabase()

  try {
    const filter = {
      $or: [
        { likelyMMDollarWealth: { $lt: WEALTH_THRESHOLD } },
        { likelyMMDollarWealth: { $exists: false } },
        { likelyMMDollarWealth: null },
      ],
    }

    console.log(
      `Searching for opportunities with less than $${WEALTH_THRESHOLD}M in estimated wealth or no wealth amount specified...`
    )

    const count = await Opportunity.countDocuments(filter)

    if (count === 0) {
      console.log('✅ No low-value opportunities found to purge. Database is clean.')
      return
    }

    console.log(`Found ${count} opportunities to purge. Proceeding with deletion...`)

    const result = await Opportunity.deleteMany(filter)

    console.log(`✅ Successfully purged ${result.deletedCount} low-value opportunities.`)
  } catch (error) {
    console.error('❌ An error occurred during the purge process:')
    console.error(error)
  } finally {
    await disconnectDatabase()
    console.log('Database connection closed.')
  }
}

purgeLowValueOpportunities()

```

## 📄 scripts/push/send-test-push.js
*Lines: 65, Size: 2.08 KB*

```javascript
// scripts/send-test-push.js
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { getAllPushSubscriptions, deletePushSubscription } from '@headlines/data-access'
import { webpush, configurePush } from '@headlines/scraper-logic/push/client.js'

async function run() {
  await initializeScriptEnv()
  configurePush()
  logger.info('🚀 Starting Test Push Notification Script...')

  const subscriptionsResult = await getAllPushSubscriptions()
  if (!subscriptionsResult.success) {
    logger.fatal(
      { err: subscriptionsResult.error },
      '❌ Failed to fetch subscriptions. Aborting.'
    )
    return
  }
  const subscriptions = subscriptionsResult.data

  if (subscriptions.length === 0) {
    logger.warn('No push subscriptions found in the database. Nothing to do.')
    return
  }
  logger.info(`Found ${subscriptions.length} subscription(s) to notify.`)

  const notificationPayload = JSON.stringify({
    title: 'Push Notification Test',
    body: `This is a test message sent at ${new Date().toLocaleTimeString('en-US')}.`,
    url: '/',
    icon: '/icons/icon-192x192.png',
  })

  const promises = subscriptions.map((subscription) =>
    webpush
      .sendNotification(subscription, notificationPayload)
      .then(() => {
        logger.info(
          `✅ Successfully sent notification to endpoint: ...${subscription.endpoint.slice(-20)}`
        )
      })
      .catch(async (error) => {
        if (error.statusCode === 410 || error.statusCode === 404) {
          logger.warn(
            `Subscription expired. Deleting: ...${subscription.endpoint.slice(-20)}`
          )
          await deletePushSubscription({ _id: subscription._id })
        } else {
          logger.error(
            { err: error },
            `❌ Failed to send notification to endpoint: ...${subscription.endpoint.slice(-20)}`
          )
        }
      })
  )

  await Promise.all(promises)
  logger.info('🚀 Test push notification process completed.')
}

run().catch((err) => {
  logger.fatal({ err }, 'An unhandled error occurred in the script.')
})

```

## 📄 scripts/results/list-events.js
*Lines: 37, Size: 1.14 KB*

```javascript
// apps/pipeline/scripts/results/list-events.js
/**
 * @command results:list-events
 * @group Results
 * @description Show the 10 most recently created synthesized events.
 */
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { findEvents } from '@headlines/data-access'
import { formatDistanceToNow } from 'date-fns'

async function main() {
  await initializeScriptEnv()
  try {
    const eventsResult = await findEvents({ limit: 10 })
    if (!eventsResult.success) throw new Error(eventsResult.error)

    const events = eventsResult.data
    if (events.length === 0) {
      console.log('No recent events found.')
    } else {
      console.log('\n--- Last 10 Synthesized Events ---')
      console.table(
        events.map((e) => ({
          Headline: e.synthesized_headline.substring(0, 80),
          Score: e.highest_relevance_score,
          Country: e.country,
          'Key Individuals': (e.key_individuals || []).map((k) => k.name).join(', '),
          Created: `${formatDistanceToNow(new Date(e.createdAt))} ago`,
        }))
      )
    }
  } catch (error) {
    console.error('Failed to list events:', error)
  }
}
main()

```

## 📄 scripts/results/resend-todays-events.js
*Lines: 41, Size: 1.24 KB*

```javascript
// File: apps/pipeline/scripts/maintenance/resend-todays-events.js
/**
 * @command results:resend-today
 * @group Results
 * @description Resets the 'emailed' status for today's events, making them eligible for dispatch again.
 */
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { resetEventsEmailedStatusSince } from '@headlines/data-access'
import colors from 'ansi-colors'

async function main() {
  await initializeScriptEnv()
  logger.info('🚀 Starting script to reset "emailed" status for today\'s events...')

  try {
    const today = new Date()
    today.setUTCHours(0, 0, 0, 0)

    const result = await resetEventsEmailedStatusSince(today)
    if (!result.success) throw new Error(result.error)

    if (result.matchedCount === 0) {
      logger.info('✅ No events found from today. Nothing to reset.')
    } else {
      logger.info(
        colors.green(
          `✅ Successfully reset ${result.modifiedCount} of ${result.matchedCount} events from today to "unsent". They are now ready to be dispatched.`
        )
      )
    }
  } catch (error) {
    logger.error(
      { err: error },
      'A critical error occurred during the event reset script.'
    )
  }
}

main()

```

## 📄 scripts/results/send-last-events.js
*Lines: 51, Size: 1.5 KB*

```javascript
// apps/pipeline/scripts/results/send-last-events.js
/**
 * @command results:send-last-events
 * @group Results
 * @description Manually trigger the notification dispatch for the most recent unsent events. Flags: --limit <number>
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { findEvents } from '@headlines/data-access'
import { sendNotifications } from '../../src/modules/notifications/index.js'

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('limit', {
      alias: 'l',
      type: 'number',
      description: 'Number of recent, unsent events to dispatch.',
      default: 10,
    })
    .help().argv

  await initializeScriptEnv()
  logger.info('🚀 Starting Manual Event Dispatcher...')

  try {
    const eventsResult = await findEvents({
      filter: { emailed: false },
      limit: argv.limit,
    })
    if (!eventsResult.success) throw new Error(eventsResult.error)
    const eventsToSend = eventsResult.data

    if (eventsToSend.length === 0) {
      logger.info('✅ No un-emailed events found. All notifications are up to date.')
      return
    }
    logger.info(`Found ${eventsToSend.length} recent, un-emailed event(s) to dispatch.`)

    await sendNotifications(eventsToSend, [])
  } catch (error) {
    logger.fatal(
      { err: error },
      'A critical error occurred during the manual dispatch process.'
    )
  }
}

main()

```

## 📄 scripts/scripts/list.js
*Lines: 101, Size: 3.01 KB*

```javascript
// apps/pipeline/scripts/scripts/list.js
/**
 * @command cli:help
 * @group CLI
 * @description Shows a dynamic list of all available pipeline CLI commands.
 */
import fs from 'fs'
import path from 'path'
import colors from 'ansi-colors'

const SCRIPTS_ROOT = path.resolve(process.cwd(), 'apps/pipeline/scripts')
const EXCLUDED_DIRS = ['lib', 'data', 'node_modules']

/**
 * Recursively walks a directory to find all .js files, excluding specified directories.
 * @param {string} dir - The directory to walk.
 * @returns {string[]} An array of full file paths.
 */
function walkDir(dir) {
  let files = []
  const items = fs.readdirSync(dir, { withFileTypes: true })

  for (const item of items) {
    if (EXCLUDED_DIRS.includes(item.name)) {
      continue
    }
    const fullPath = path.join(dir, item.name)
    if (item.isDirectory()) {
      files = [...files, ...walkDir(fullPath)]
    } else if (item.isFile() && item.name.endsWith('.js')) {
      files.push(fullPath)
    }
  }
  return files
}

/**
 * Reads the first few lines of a script and parses its metadata block.
 * @param {string} filePath - The full path to the script file.
 * @returns {object|null} An object with command, group, and description, or null if no header is found.
 */
function parseScriptHeader(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf-8').substring(0, 1024) // Read first 1KB
    const match = content.match(/\/\*\*([\s\S]*?)\*\//) // Find the first JSDoc-style block
    if (!match) return null

    const header = match[1]
    const commandMatch = header.match(/@command\s+(.*)/)
    const groupMatch = header.match(/@group\s+(.*)/)
    const descriptionMatch = header.match(/@description\s+(.*)/)

    if (commandMatch && groupMatch && descriptionMatch) {
      return {
        command: commandMatch[1].trim(),
        group: groupMatch[1].trim(),
        description: descriptionMatch[1].trim(),
      }
    }
    return null
  } catch (e) {
    return null
  }
}

function main() {
  console.log(colors.bold.cyan('\n📘 Headlines Pipeline CLI (Dynamic)\n'))
  console.log('Usage from monorepo root: pnpm run <command> -- [flags]\n')

  const scriptFiles = walkDir(SCRIPTS_ROOT)
  const scriptsWithMetadata = scriptFiles.map(parseScriptHeader).filter(Boolean)

  if (scriptsWithMetadata.length === 0) {
    console.log(colors.red('No runnable scripts with valid metadata headers found.'))
    return
  }

  const groupedScripts = scriptsWithMetadata.reduce((acc, script) => {
    const group = script.group || 'General'
    if (!acc[group]) acc[group] = []
    acc[group].push(script)
    return acc
  }, {})

  const sortedGroups = Object.keys(groupedScripts).sort()

  for (const groupName of sortedGroups) {
    console.log(colors.bold.yellow(`--- ${groupName} ---`))
    const scriptsInGroup = groupedScripts[groupName].sort((a, b) =>
      a.command.localeCompare(b.command)
    )

    scriptsInGroup.forEach((script) => {
      console.log(`  ${colors.green(script.command.padEnd(25))} ${script.description}`)
    })
    console.log('')
  }
}

main()

```

## 📄 scripts/seed/data/denmark.json
*Lines: 2081, Size: 112.41 KB*

```json
[
  {
    "rank in rich list": "N/A",
    "full name": "Søren Vestergaard-Poulsen",
    "city": "London",
    "event": "A Senior Managing Partner at CVC Capital Partners, one of the world's largest private equity firms. As a key figure in CVC's global investment committee, the Danish executive has built an immense fortune from his share of the carried interest on dozens of multi-billion-euro buyouts over two decades.",
    "net worth": 650000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Joachim Spänner",
    "city": "London",
    "event": "A Danish Partner at Apollo Global Management, a global private equity behemoth. Based in London, he focuses on the Nordic region and has accumulated significant wealth through his senior role in executing major leveraged buyouts and his share in the firm's lucrative profit-sharing structure.",
    "net worth": 350000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Luv Singh",
    "city": "London",
    "event": "A Danish Partner at the global private equity giant KKR (Kohlberg Kravis Roberts & Co.). His wealth has been generated by leading major European technology and software investments and receiving a significant portion of the carried interest from KKR's highly successful European funds.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christoffer Møller",
    "city": "Copenhagen",
    "event": "A Managing Partner at CVC Capital Partners and head of the firm's Copenhagen office. He is one of the most powerful figures in Nordic private equity, and his personal fortune is a direct result of leading successful buyouts and sharing in the substantial profits generated for CVC's investors.",
    "net worth": 300000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Claus Bülow Christensen",
    "city": "London",
    "event": "A Danish executive who became a Partner at Goldman Sachs in London. Reaching the coveted 'Partner' level at Goldman Sachs is one of the most lucrative achievements in finance, entailing a multi-million dollar salary, substantial bonuses, and a share in the firm's exclusive investment pool, creating an immense personal fortune.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christian Frigast",
    "city": "Copenhagen",
    "event": "Co-founder and Senior Partner of Axcel, one of the most influential private equity firms in the Nordic region. He is a founding father of the Danish PE industry, and his DKK 550 million+ fortune comes from decades of successful fund-raising and profitable exits, including Pandora and Vestas.",
    "net worth": 550000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Viggo Mølholm",
    "city": "Copenhagen",
    "event": "Co-founder and was the long-time Managing Partner of Polaris Private Equity. A key figure in the Danish buyout scene, his DKK 400 million+ fortune was built through his share of the firm's carried interest from a long and successful track record of investments in Danish and Swedish mid-market companies.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Casper Breum",
    "city": "Frankfurt",
    "event": "A Danish Partner at the pan-European private equity firm Triton Partners. He has played a key role in the firm's industrial and business services investments. His wealth is a result of his senior position and share in the carried interest from Triton's successful funds.",
    "net worth": 225000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Niels de Coninck-Smith",
    "city": "Copenhagen",
    "event": "A Danish Partner at Verdane, a prominent Northern European growth equity firm. He specializes in technology and software investments, and his wealth has been built through his share of the profits from a portfolio of high-growth tech companies.",
    "net worth": 175000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Dan Rasmussen",
    "city": "Boston",
    "event": "A Danish-American investor who founded the asset management firm Verdad Advisers. He previously worked in private equity at Bain Capital. His wealth comes from his successful quantitative investment strategies and his family's prior business success.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Mads Ryum Larsen",
    "city": "London",
    "event": "A Danish Partner at the London-based international private equity firm 3i Group. He focuses on investments in the consumer sector, and his personal fortune has been generated through his senior role and share of the profits from successful buyouts and exits.",
    "net worth": 200000000
  },
    {
    "rank in rich list": "N/A",
    "full name": "Esben Østergaard",
    "city": "Odense",
    "event": "A co-founder and the key technical mind behind Universal Robots, the company that pioneered the collaborative robot (cobot) industry. He became exceptionally wealthy after the company was sold to the American firm Teradyne for $285 million in 2015. He is now a prominent investor and mentor in the Danish robotics cluster.",
    "net worth": 175000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christian Bason",
    "city": "Copenhagen",
    "event": "An influential figure in public sector innovation. While not a traditional industrialist, he built his wealth and influence as the long-serving CEO of the Danish Design Centre. He is a sought-after speaker and advisor, representing a modern form of wealth built on intellectual capital and global influence.",
    "net worth": 50000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "The Kann-Rasmussen Family Office",
    "city": "Copenhagen",
    "event": "While Lars Erik is the named individual, the broader VKR Group (VELUX) fortune is managed through a complex structure of foundations and a family office. Other descendants of founder Villum Kann Rasmussen hold significant, though less public, wealth and influence through their roles in the foundations that ensure the company's long-term continuity.",
    "net worth": 15800000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Thorvald Stauning",
    "city": "Copenhagen",
    "event": "While primarily known as a historic Prime Minister, his descendants have managed a quiet dynastic fortune. This 'old money' wealth, derived from early 20th-century industrial and political influence, represents one of Denmark's more discreet and long-standing affluent families.",
    "net worth": 120000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "The Founders of Momondo",
    "city": "Copenhagen",
    "event": "The group of founders behind the popular travel search engine Momondo became multi-millionaires after selling the company to the American travel technology giant Priceline Group (now Booking Holdings) for $550 million in 2017. This group includes figures like Thorvald Stigsen and other early partners.",
    "net worth": 250000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "The Due-Hansen Family",
    "city": "Farum",
    "event": "Heirs to the founder of A/S C.C. Jensen (CJC), a global leader in industrial oil filtration systems. This 'hidden champion' of Danish industry has been family-owned for generations, creating a quiet but substantial dynastic fortune.",
    "net worth": 300000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Mads Mikkelsen",
    "city": "Mallorca",
    "event": "Denmark's most successful international male actor. His wealth comes from a long career starring in major Hollywood franchises (James Bond, Star Wars, Marvel), European cinema, and lucrative global advertising campaigns for brands like Carlsberg.",
    "net worth": 95000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Dalgaard",
    "city": "Palo Alto",
    "event": "Founded the enterprise software company SuccessFactors in Denmark, later moving it to the US. He became exceptionally wealthy after selling the company to German software giant SAP for $3.4 billion in 2011. He is now a general partner at the venture capital firm Andreessen Horowitz (a16z).",
    "net worth": 600000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Fløe Nielsen",
    "city": "London",
    "event": "Co-founded the private equity firm Silverfleet Capital. His wealth was generated through carried interest and management fees from decades of successful mid-market buyouts across Europe. He is a prominent figure in the Danish community in London.",
    "net worth": 250000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christian Lanng",
    "city": "San Francisco",
    "event": "Co-founder and former CEO of the fintech unicorn Tradeshift, a global supply chain payments and marketplace platform. His significant on-paper wealth is derived from his large equity stake in the multi-billion dollar company.",
    "net worth": 300000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Michael Seifert",
    "city": "Aarhus",
    "event": "Founder of the e-commerce platform Salling Group (formerly Dansk Supermarked) and a prominent investor. His primary wealth comes from his early online ventures and the subsequent sale of his company, which powered many of Denmark's largest retailers.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "John V. H. Hansen",
    "city": "Copenhagen",
    "event": "Co-founder of the video surveillance software company Milestone Systems. He became a multi-millionaire after the company was acquired by Canon Inc. for a reported sum of over DKK 2 billion (approx. $300 million) in 2014.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Michael Jonathan Grønager",
    "city": "New York",
    "event": "Co-founder and CEO of Chainalysis, a blockchain analysis unicorn that provides data and software to governments and businesses. The company's multi-billion dollar valuation makes him one of the wealthiest Danes in the cryptocurrency space.",
    "net worth": 500000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Asger Aamund",
    "city": "Copenhagen",
    "event": "A prominent Danish businessman and investor who made his fortune in the biotech industry. He founded and later sold a significant stake in the company Bavarian Nordic, and is a well-known public commentator on business and economics.",
    "net worth": 225000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Ulrik Juul Christensen",
    "city": "Boston",
    "event": "Co-founder of Area9 Lyceum, a world leader in adaptive learning technology. His wealth comes from building and selling previous educational technology companies and his significant stake in the highly successful Area9, which serves major corporations and educational institutions globally.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Morten Strunge",
    "city": "Copenhagen",
    "event": "A serial tech entrepreneur who founded the e-book service Mofibo (sold to Storytel) and the mobile operator Onfone (sold to TDC). His fortune comes from these successful exits, and he continues to launch and invest in new ventures, including the podcast platform Podimo.",
    "net worth": 175000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Thrane",
    "city": "Copenhagen",
    "event": "Founder of Thrane & Thrane, a global leader in satellite communication equipment for the maritime industry. He made his fortune when the company was acquired by the British firm Cobham plc for $432 million in 2012.",
    "net worth": 275000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Michael Andersen",
    "city": "Copenhagen",
    "event": "Co-founder of the website content management system company Sitecore. The company was sold to the private equity firm EQT for €1 billion in 2016, a landmark deal that created substantial wealth for its five founders.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christian Kirk Rasmussen",
    "city": "Copenhagen",
    "event": "Founder of the cloud data backup service Keepit. The company has achieved a significant private valuation following major investment rounds from leading venture firms, creating a substantial on-paper fortune for the founder.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "René Rechtman",
    "city": "London",
    "event": "CEO of Moonbug Entertainment, the company behind the children's entertainment phenomenon CoComelon. He became exceptionally wealthy after leading the sale of the company to Blackstone-backed Candle Media for $3 billion in 2021.",
    "net worth": 400000000
  },
    {
    "rank in rich list": "N/A",
    "full name": "Christian Frigast",
    "city": "Copenhagen",
    "event": "A godfather of the Nordic private equity scene. He co-founded Axcel, one of Denmark's largest and most successful private equity firms, in 1994. His immense wealth was built over decades through management fees and, most importantly, the carried interest from dozens of successful buyouts and exits, including Pandora and Vestas.",
    "net worth": 550000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Viggo Mølholm",
    "city": "Copenhagen",
    "event": "Co-founder and was the long-time managing partner of Polaris Private Equity, another major Danish PE firm. Like his counterparts at Axcel, his fortune comes from a long and successful track record of acquiring, growing, and selling Nordic companies, generating significant carried interest.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Søren Vestergaard-Poulsen",
    "city": "London",
    "event": "One of the most successful Danes in international private equity. He built his fortune as a senior managing partner at the global buyout giant CVC Capital Partners in London, where he led numerous multi-billion-euro deals. His wealth is derived from his share of the firm's carried interest.",
    "net worth": 650000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Luv Singh",
    "city": "London",
    "event": "A Danish executive who reached the top tier of global finance as a Partner at KKR (Kohlberg Kravis Roberts & Co.) in London, one of the world's most powerful private equity firms. His wealth was built through his involvement in major European buyouts and his share of the firm's profits.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Mikkel Hippe Brun",
    "city": "San Francisco",
    "event": "A co-founder of the fintech unicorn Tradeshift, alongside Christian Lanng. As a key architect of the company's technology, his significant equity stake represents a substantial on-paper fortune based on the company's multi-billion dollar private valuation.",
    "net worth": 275000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Gert Sylvest",
    "city": "San Francisco",
    "event": "The third co-founder of the supply-chain fintech platform Tradeshift. His foundational role and equity position in the company contribute to a large personal fortune, reflecting the unicorn's success in attracting major venture capital and corporate clients.",
    "net worth": 275000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Niels Bjørn Christiansen",
    "city": "Nordborg",
    "event": "The current CEO of The LEGO Group, brought in as the first non-family member to hold the top post. His significant wealth comes from his previous role as CEO of Danfoss and is now being substantially augmented by one of the largest executive compensation and long-term incentive packages in corporate Denmark.",
    "net worth": 150000000
  },
  {
    "rank in rich list": 27,
    "full name": "Niels Due Jensen",
    "city": "Bjerringbro",
    "event": "Son of the founder and the man who globalized the pump manufacturer Grundfos, serving as its leader for decades. Although he passed control to his son Poul Due Jensen, he remains the family patriarch and holds a major part of the family's DKK 7.9 billion personal stake.",
    "net worth": 1106000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "The Heering Family",
    "city": "Copenhagen",
    "event": "Heirs to the iconic Cherry Heering liqueur brand, a company founded in 1818 that was 'Purveyor to the Royal Danish Court'. While the brand has been sold, the family retains a dynastic fortune built over nearly two centuries, now managed through family offices and other investments.",
    "net worth": 300000000
  },
  {
    "rank in rich list": 7,
    "full name": "André Kasprzak",
    "city": "Bredebro",
    "event": "Son of Hanni Toosbuy Kasprzak and heir to the ECCO footwear empire. As a member of the board and a professional golfer, he is part of the next generation poised to take over the DKK 24.3 billion family-owned global company.",
    "net worth": 3402000000
  },
  {
    "rank in rich list": 7,
    "full name": "Anna Toosbuy Rasch",
    "city": "Bredebro",
    "event": "Daughter of Hanni Toosbuy Kasprzak and designated heir to the ECCO fortune. She is active on the company's board, representing the family's next generation in the leadership of the DKK 24.3 billion global shoe manufacturer.",
    "net worth": 3402000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Heidi Rix",
    "city": "Aarhus",
    "event": "Co-founder of Plenti, a low-cost mobile operator. She and her co-founders became wealthy after selling the company to the telecom giant TDC for DKK 74 million just over a year after its launch, a notable Danish startup exit.",
    "net worth": 20000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "The Fisker & Nielsen Families",
    "city": "Copenhagen",
    "event": "Founding families of Nilfisk, a global leader in professional cleaning equipment founded in 1906. While the company is now publicly listed, the descendants of the founders retain a quiet dynastic fortune from their historical ownership.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "The Foss Widell Family",
    "city": "Copenhagen",
    "event": "Heirs to the founder of the global industrial conglomerate F.L. Smidth & Co., a leader in the cement and mining industries. Though the family's direct control has diminished, their dynastic wealth, built over more than a century, is managed through various foundations and investment vehicles.",
    "net worth": 750000000
  },
    {
    "rank in rich list": "N/A",
    "full name": "Michael Seifert",
    "city": "Copenhagen",
    "event": "Co-founder and was the long-time CEO of Sitecore, the content management system company. Alongside his four co-founders, he became exceptionally wealthy from the landmark €1 billion sale of the company to the private equity firm EQT in 2016.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Ole Vestergaard Rasmussen",
    "city": "Copenhagen",
    "event": "A key technical co-founder of Sitecore. As one of the five founders, he shared in the substantial proceeds from the €1 billion acquisition by EQT, securing a personal fortune in the hundreds of millions of DKK.",
    "net worth": 180000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Thomas Albert",
    "city": "Copenhagen",
    "event": "A co-founder of Sitecore. His foundational role in the company's development and his equity stake resulted in a major personal windfall from the 2016 sale to EQT, making him one of Denmark's quiet tech millionaires.",
    "net worth": 180000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jesper Balser",
    "city": "Copenhagen",
    "event": "A co-founder of PC&C, the company that merged with Damgaard Data to form Navision. He became immensely wealthy following the subsequent sale of Navision to Microsoft for $1.45 billion in 2002, one of the most significant exits in Danish tech history.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Torben Wind",
    "city": "Copenhagen",
    "event": "A co-founder of PC&C, the precursor to the enterprise software giant Navision. The $1.45 billion acquisition by Microsoft made him and his partners, Erik and Preben Damgaard, Jesper Balser, and Peter Bang, some of Denmark's most successful tech entrepreneurs.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Peter Bang (Navision)",
    "city": "Copenhagen",
    "event": "A co-founder of PC&C, which merged to create Navision. His share of the proceeds from the blockbuster $1.45 billion sale to Microsoft established his significant personal fortune. He is distinct from the B&O founder's heir of the same name.",
    "net worth": 400000000
  },
  {
    "rank in rich list": 8,
    "full name": "Jacob Kjær",
    "city": "Låsby",
    "event": "Son of Niels Aage Kjær and a key figure in the next generation of the AVK Group. He is a Group Director and co-owner of the DKK 18 billion valve and hydrant manufacturing empire, personally owning a significant estate transferred from his father.",
    "net worth": 2520000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jørgen Vig Knudstorp",
    "city": "Copenhagen",
    "event": "The former CEO credited with orchestrating the legendary turnaround of The LEGO Group from near-bankruptcy to record profitability. His wealth was built through substantial executive compensation and bonus packages and he now serves as Chairman of the LEGO Brand Group.",
    "net worth": 350000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Tvede",
    "city": "Zug",
    "event": "A well-known Danish investor, serial entrepreneur, and author based in Switzerland. He built his fortune over several decades through successful financial market trading, derivatives, and early-stage investments in technology and biotech companies.",
    "net worth": 200000000
  },
  {
    "rank in rich list": 43,
    "full name": "Steen Hessel",
    "city": "Brande",
    "event": "One of the four brothers who own and run the Ejner Hessel A/S car dealership group. The family shares in the DKK 4.6 billion fortune generated by one of Denmark's largest automotive retailers.",
    "net worth": 644000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Torkil Hviid",
    "city": "Zug",
    "event": "A Danish executive in the commodities sector. He became wealthy as a key partner and trader at the global oil trading giant Glencore, benefiting from the company's highly lucrative IPO. He now resides in Switzerland.",
    "net worth": 275000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Niels Zibrandtsen",
    "city": "Copenhagen",
    "event": "Founder of the global web hosting company Zibra. He made his fortune after selling the company and has since become a prominent investor in technology and a notable art collector, establishing the Zibrandtsen Collection.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Tue Mantoni",
    "city": "London",
    "event": "A Danish executive who built his fortune in the UK. He served as the CEO of the luxury motorcycle brand Triumph, leading it through a period of significant growth. He was previously a director at the private equity firm McKinsey and now invests in startups.",
    "net worth": 125000000
  },
    {
    "rank in rich list": "N/A",
    "full name": "Matthias Kamprad",
    "city": "London",
    "event": "Swedish son of IKEA founder Ingvar Kamprad, but grew up in Denmark and is a Danish speaker. His immense wealth derives from inheriting a major portion of the IKEA empire, specifically Ikano Group, the family's private DKK 100+ billion entity focused on finance, real estate, and retail, which he now chairs.",
    "net worth": 13500000000
  },
  {
    "rank in rich list": 2,
    "full name": "Niels Holch Povlsen",
    "city": "Aarhus",
    "event": "Brother of Anders Holch Povlsen. He holds a significant minority stake in the Bestseller fashion group, which underpins his personal fortune of DKK 0.6 billion (approx. $84 million) as detailed in the provided document.",
    "net worth": 84000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Rasmussen",
    "city": "Sydney",
    "event": "A key Danish figure in global tech. He co-founded Where 2 Technologies, the company that became Google Maps after its acquisition by Google in 2004. His fortune was built on the acquisition proceeds and a long, high-ranking tenure at Google, where he also co-created Google Wave. He is now a prominent angel investor.",
    "net worth": 450000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jesper Buch",
    "city": "Marbella",
    "event": "Founder of the online food delivery service Just Eat. After the company's multi-billion-pound success, he sold his stake and relocated to Spain. He is now one of Denmark's most high-profile angel investors, known for his role on the TV show 'Løvens Hule' (Dragons' Den).",
    "net worth": 350000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jens Bjørn Andersen",
    "city": "Copenhagen",
    "event": "Former Group CEO of the global transport and logistics giant DSV. He accumulated a very significant fortune through long-term incentive programs and exercising stock options during a period where DSV's market value grew exponentially under his leadership.",
    "net worth": 250000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Camilla Færch",
    "city": "Holstebro",
    "event": "An heir to the Færch dynasty (tobacco, plastics). While family infighting and strategic missteps caused the family to drop from the top of the rich lists, individual members like Camilla retain hundreds of millions of DKK from the original sale of Skandinavisk Tobakskompagni and Færch Plast.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Alexander Lacik",
    "city": "Copenhagen",
    "event": "While Swedish, he is a key figure in a major Danish company as the CEO of the jewelry giant Pandora. He has amassed a significant fortune through his executive compensation and substantial stock option packages tied to the company's successful turnaround and growth.",
    "net worth": 120000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Bo Kroll",
    "city": "San Francisco",
    "event": "A Danish technologist who became wealthy as an early and pivotal engineer at Salesforce during its formative years. His fortune was built on stock options that became extremely valuable as Salesforce grew into a global software-as-a-service behemoth.",
    "net worth": 100000000
  },
  {
    "rank in rich list": 14,
    "full name": "Søren Erik Westermann",
    "city": "Espergærde",
    "event": "Part of the family that owned the hearing aid manufacturer Widex. He shares in the family's significant stake in WS Audiology, formed after the merger with Sivantos, and owns a valuable portfolio of private real estate.",
    "net worth": 1988000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "The Due-Hansen Family",
    "city": "Farum",
    "event": "Heirs to the founder of A/S C.C. Jensen (CJC), a global leader in industrial oil filtration systems. This 'hidden champion' of Danish industry has been family-owned for generations, creating a quiet but substantial dynastic fortune.",
    "net worth": 300000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Mads Mikkelsen",
    "city": "Mallorca",
    "event": "Denmark's most successful international male actor. His wealth comes from a long career starring in major Hollywood franchises (James Bond, Star Wars, Marvel), European cinema, and lucrative global advertising campaigns for brands like Carlsberg.",
    "net worth": 95000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Dalgaard",
    "city": "Palo Alto",
    "event": "Founded the enterprise software company SuccessFactors in Denmark, later moving it to the US. He became exceptionally wealthy after selling the company to German software giant SAP for $3.4 billion in 2011. He is now a general partner at the venture capital firm Andreessen Horowitz (a16z).",
    "net worth": 600000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Fløe Nielsen",
    "city": "London",
    "event": "Co-founded the private equity firm Silverfleet Capital. His wealth was generated through carried interest and management fees from decades of successful mid-market buyouts across Europe. He is a prominent figure in the Danish community in London.",
    "net worth": 250000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christian Lanng",
    "city": "San Francisco",
    "event": "Co-founder and former CEO of the fintech unicorn Tradeshift, a global supply chain payments and marketplace platform. His significant on-paper wealth is derived from his large equity stake in the multi-billion dollar company.",
    "net worth": 300000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Michael Seifert",
    "city": "Aarhus",
    "event": "Founder of the e-commerce platform Salling Group (formerly Dansk Supermarked) and a prominent investor. His primary wealth comes from his early online ventures and the subsequent sale of his company, which powered many of Denmark's largest retailers.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "John V. H. Hansen",
    "city": "Copenhagen",
    "event": "Co-founder of the video surveillance software company Milestone Systems. He became a multi-millionaire after the company was acquired by Canon Inc. for a reported sum of over DKK 2 billion (approx. $300 million) in 2014.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Michael Jonathan Grønager",
    "city": "New York",
    "event": "Co-founder and CEO of Chainalysis, a blockchain analysis unicorn that provides data and software to governments and businesses. The company's multi-billion dollar valuation makes him one of the wealthiest Danes in the cryptocurrency space.",
    "net worth": 500000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Asger Aamund",
    "city": "Copenhagen",
    "event": "A prominent Danish businessman and investor who made his fortune in the biotech industry. He founded and later sold a significant stake in the company Bavarian Nordic, and is a well-known public commentator on business and economics.",
    "net worth": 225000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Ulrik Juul Christensen",
    "city": "Boston",
    "event": "Co-founder of Area9 Lyceum, a world leader in adaptive learning technology. His wealth comes from building and selling previous educational technology companies and his significant stake in the highly successful Area9, which serves major corporations and educational institutions globally.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Morten Strunge",
    "city": "Copenhagen",
    "event": "A serial tech entrepreneur who founded the e-book service Mofibo (sold to Storytel) and the mobile operator Onfone (sold to TDC). His fortune comes from these successful exits, and he continues to launch and invest in new ventures, including the podcast platform Podimo.",
    "net worth": 175000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Thrane",
    "city": "Copenhagen",
    "event": "Founder of Thrane & Thrane, a global leader in satellite communication equipment for the maritime industry. He made his fortune when the company was acquired by the British firm Cobham plc for $432 million in 2012.",
    "net worth": 275000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Michael Andersen",
    "city": "Copenhagen",
    "event": "Co-founder of the website content management system company Sitecore. The company was sold to the private equity firm EQT for €1 billion in 2016, a landmark deal that created substantial wealth for its five founders.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christian Kirk Rasmussen",
    "city": "Copenhagen",
    "event": "Founder of the cloud data backup service Keepit. The company has achieved a significant private valuation following major investment rounds from leading venture firms, creating a substantial on-paper fortune for the founder.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "René Rechtman",
    "city": "London",
    "event": "CEO of Moonbug Entertainment, the company behind the children's entertainment phenomenon CoComelon. He became exceptionally wealthy after leading the sale of the company to Blackstone-backed Candle Media for $3 billion in 2021.",
    "net worth": 400000000
  },
    {
    "rank in rich list": "N/A",
    "full name": "Lars Fjeldsoe-Nielsen",
    "city": "London",
    "event": "A key Danish figure in the global tech scene, often called 'Mr. Mobile'. He built his fortune as an early executive at unicorn startups, serving as Head of Mobile for both Dropbox and Uber during their critical hyper-growth phases leading up to their IPOs. He is now a General Partner at the London-based venture capital firm Balderton Capital, investing in the next wave of European tech companies.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Hans Christian Bødker Jensen",
    "city": "Copenhagen",
    "event": "A veteran of the Danish financial sector. He accumulated his significant wealth during his long and influential tenure as the CEO of FIH Erhvervsbank, one of Denmark's major corporate and investment banks. His fortune is the result of decades of top-tier executive compensation, bonuses, and pension schemes.",
    "net worth": 75000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Carsten Dilling",
    "city": "Copenhagen",
    "event": "A high-profile Danish corporate leader who has served as CEO for some of the country's largest companies. His wealth was primarily built during his time as CEO of the national telecom giant TDC (now Nuuday) and through other C-suite and board positions at major corporations like SAS, NNIT, and Telia.",
    "net worth": 90000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jim Hagemann Snabe",
    "city": "Copenhagen",
    "event": "A globally recognized business executive. He built his fortune as the co-CEO of the German software giant SAP. He has since held the prestigious dual chairmanships of Siemens AG in Germany and A.P. Moller-Maersk in Denmark, making him one of the most influential Danish figures in global business.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Morten Lund",
    "city": "Copenhagen",
    "event": "A prolific and often-controversial Danish angel investor and entrepreneur. He made his first major fortune as an early investor in Skype, which he exited before the eBay sale. He has since invested in over 100 startups, experiencing both huge successes and high-profile bankruptcies, but remains a very wealthy figure in the tech scene.",
    "net worth": 80000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Kasper Rørsted",
    "city": "Munich",
    "event": "A top-tier Danish executive who has led major German corporations. He built a substantial fortune as the CEO of the chemical giant Henkel and later as the CEO of the global sportswear brand Adidas, commanding multi-million euro annual compensation packages.",
    "net worth": 175000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Niklas Östberg",
    "city": "Berlin",
    "event": "While Swedish, his wealth is deeply connected to the Danish ecosystem as the co-founder and CEO of Delivery Hero, which acquired the major Danish food delivery service hungry.dk. As a billionaire founder of a major European tech company with a strong Danish presence, he is a relevant figure.",
    "net worth": 1100000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Peter Bang",
    "city": "Copenhagen",
    "event": "An heir to the Bang & Olufsen fortune, a company co-founded by his grandfather, Peter Boas Bang. While the family no longer controls the company, the inherited wealth from its golden era has sustained a significant fortune for the descendants.",
    "net worth": 100000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Erik Damgaard",
    "city": "Copenhagen",
    "event": "An IT entrepreneur who, with his brother Preben, founded Damgaard Data, which later became Navision. He became immensely wealthy after the company was sold to Microsoft for $1.45 billion in 2002. He has since been an active investor in tech, real estate, and restaurants.",
    "net worth": 450000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Preben Damgaard",
    "city": "Copenhagen",
    "event": "Co-founder of Damgaard Data (later Navision). The landmark sale of the company to Microsoft in 2002 for $1.45 billion cemented his place as one of Denmark's wealthiest tech entrepreneurs. He remained an influential board member and investor in the Danish tech scene until his passing in 2022.",
    "net worth": 450000000
  },
    {
    "rank in rich list": "N/A",
    "full name": "Lars Dalgaard",
    "city": "Palo Alto",
    "event": "Founded the enterprise software company SuccessFactors in Denmark, later moving it to the US. He became exceptionally wealthy after selling the company to German software giant SAP for $3.4 billion in 2011. He is now a general partner at the venture capital firm Andreessen Horowitz (a16z).",
    "net worth": 600000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Fløe Nielsen",
    "city": "London",
    "event": "Co-founded the private equity firm Silverfleet Capital. His wealth was generated through carried interest and management fees from decades of successful mid-market buyouts across Europe. He is a prominent figure in the Danish community in London.",
    "net worth": 250000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christian Lanng",
    "city": "San Francisco",
    "event": "Co-founder and former CEO of the fintech unicorn Tradeshift, a global supply chain payments and marketplace platform. His significant on-paper wealth is derived from his large equity stake in the multi-billion dollar company.",
    "net worth": 300000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Michael Seifert",
    "city": "Aarhus",
    "event": "Founder of the e-commerce platform Salling Group (formerly Dansk Supermarked) and a prominent investor. His primary wealth comes from his early online ventures and the subsequent sale of his company, which powered many of Denmark's largest retailers.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "John V. H. Hansen",
    "city": "Copenhagen",
    "event": "Co-founder of the video surveillance software company Milestone Systems. He became a multi-millionaire after the company was acquired by Canon Inc. for a reported sum of over DKK 2 billion (approx. $300 million) in 2014.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Michael Jonathan Grønager",
    "city": "New York",
    "event": "Co-founder and CEO of Chainalysis, a blockchain analysis unicorn that provides data and software to governments and businesses. The company's multi-billion dollar valuation makes him one of the wealthiest Danes in the cryptocurrency space.",
    "net worth": 500000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Asger Aamund",
    "city": "Copenhagen",
    "event": "A prominent Danish businessman and investor who made his fortune in the biotech industry. He founded and later sold a significant stake in the company Bavarian Nordic, and is a well-known public commentator on business and economics.",
    "net worth": 225000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Ulrik Juul Christensen",
    "city": "Boston",
    "event": "Co-founder of Area9 Lyceum, a world leader in adaptive learning technology. His wealth comes from building and selling previous educational technology companies and his significant stake in the highly successful Area9, which serves major corporations and educational institutions globally.",
    "net worth": 400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Morten Strunge",
    "city": "Copenhagen",
    "event": "A serial tech entrepreneur who founded the e-book service Mofibo (sold to Storytel) and the mobile operator Onfone (sold to TDC). His fortune comes from these successful exits, and he continues to launch and invest in new ventures, including the podcast platform Podimo.",
    "net worth": 175000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Thrane",
    "city": "Copenhagen",
    "event": "Founder of Thrane & Thrane, a global leader in satellite communication equipment for the maritime industry. He made his fortune when the company was acquired by the British firm Cobham plc for $432 million in 2012.",
    "net worth": 275000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Michael Andersen",
    "city": "Copenhagen",
    "event": "Co-founder of the website content management system company Sitecore. The company was sold to the private equity firm EQT for €1 billion in 2016, a landmark deal that created substantial wealth for its five founders.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christian Kirk Rasmussen",
    "city": "Copenhagen",
    "event": "Founder of the cloud data backup service Keepit. The company has achieved a significant private valuation following major investment rounds from leading venture firms, creating a substantial on-paper fortune for the founder.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "René Rechtman",
    "city": "London",
    "event": "CEO of Moonbug Entertainment, the company behind the children's entertainment phenomenon CoComelon. He became exceptionally wealthy after leading the sale of the company to Blackstone-backed Candle Media for $3 billion in 2021.",
    "net worth": 400000000
  },
    {
    "rank in rich list": "N/A",
    "full name": "Mads Faurholt-Jørgensen",
    "city": "Copenhagen",
    "event": "A serial entrepreneur and co-founder of Nova Founders Capital. He has built and sold numerous companies globally, including the e-commerce giant Lazada (sold to Alibaba). His wealth comes from a string of successful exits and ongoing venture capital activities.",
    "net worth": 300000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Bjarne Riis",
    "city": "Lugano",
    "event": "Former professional cyclist who won the 1996 Tour de France. He accumulated his wealth by founding and later selling the professional cycling team Riis Cycling (formerly Team CSC and Tinkoff-Saxo). He now resides in Switzerland.",
    "net worth": 90000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Claus Meyer",
    "city": "New York",
    "event": "Co-founder of the world-renowned restaurant Noma and a key figure in the New Nordic Cuisine movement. His fortune derives from a vast culinary empire that includes restaurants, bakeries, cookbooks, and the sale of his stake in the Meyer Group.",
    "net worth": 125000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Caroline Wozniacki",
    "city": "Monte Carlo",
    "event": "Former World No. 1 professional tennis player. She amassed a significant fortune through career prize money, lucrative endorsements with brands like Adidas and Rolex, and various business investments.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Henrik Fisker",
    "city": "Los Angeles",
    "event": "A luxury car designer and entrepreneur known for designing iconic cars like the BMW Z8 and Aston Martin DB9. His wealth is tied to his ventures in the electric vehicle space, most notably Fisker Inc., which went public via a SPAC merger.",
    "net worth": 200000000
  },
  {
    "rank in rich list": 10,
    "full name": "Leise Mærsk Mc-Kinney Møller",
    "city": "Copenhagen",
    "event": "Eldest daughter of shipping magnate Mærsk Mc-Kinney Møller and sister to Ane Uggla. She holds a significant, though less public, share in the family's vast fortune derived from the A.P. Moller-Maersk conglomerate.",
    "net worth": 2296000000
  },
  {
    "rank in rich list": 10,
    "full name": "Kirsten Mærsk Mc-Kinney Olufsen",
    "city": "Copenhagen",
    "event": "Youngest daughter of Mærsk Mc-Kinney Møller. Like her sisters, she inherited a substantial part of the Mærsk family's wealth, managed through the family's foundational and holding company structures.",
    "net worth": 2296000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Casper von Koskull",
    "city": "London",
    "event": "A prominent Danish executive in international finance. He served as the CEO of Nordea, the largest financial services group in the Nordic region, and previously held senior roles at Goldman Sachs, accumulating a significant personal fortune.",
    "net worth": 100000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Søren Skou",
    "city": "Copenhagen",
    "event": "Former CEO of A.P. Moller-Maersk. He led the company through its historic transformation from a diversified conglomerate into an integrated logistics company. His compensation and stock holdings during this period resulted in a very large personal fortune.",
    "net worth": 150000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Stine Bjerregaard",
    "city": "London",
    "event": "Co-founder of the London-based private equity firm Nordic Capital's Copenhagen office and a key figure in European finance. Her successful career and carried interest from numerous major deals have made her one of Denmark's wealthiest female executives.",
    "net worth": 250000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Frederik Tuxen",
    "city": "Vedbæk",
    "event": "Co-founder and the original inventor behind the golf technology company Trackman. While the Eldrup-Jørgensen brothers are the majority owners, Tuxen retains a 15% stake in the company, valued at nearly DKK 1 billion (approx. $140 million).",
    "net worth": 140000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Niklas Zennström",
    "city": "London",
    "event": "While Swedish, he co-founded the Danish-born global success Skype with Janus Friis. The sale of Skype to eBay for $2.6 billion made both founders billionaires and pivotal figures in the Nordic tech scene. He now runs the venture capital firm Atomico.",
    "net worth": 1200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Janus Friis",
    "city": "London",
    "event": "A Danish entrepreneur who co-founded a series of disruptive tech companies, including KaZaA, Skype (sold to eBay), and Joost. His sale of Skype secured his status as a billionaire, and he continues to invest in technology startups.",
    "net worth": 1200000000
  },
    {
    "rank in rich list": "N/A",
    "full name": "David Helgason",
    "city": "Reykjavik",
    "event": "Co-founded the video game engine giant Unity Technologies in Copenhagen. His immense wealth was realized through the company's 2020 IPO, making him a central figure in Denmark's largest modern tech success story, though he is of Icelandic origin.",
    "net worth": 900000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Ulrich",
    "city": "San Francisco",
    "event": "Co-founder and drummer of the iconic heavy metal band Metallica. Born in Denmark, his substantial wealth comes from decades of record sales, global tours, and royalties from one of the most commercially successful bands in history.",
    "net worth": 350000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jan Bech Andersen",
    "city": "Monaco",
    "event": "An investor who made a significant fortune in asset management and private equity. He is well-known in Denmark for his past majority ownership and chairmanship of the football club Brøndby IF and now resides in Monaco.",
    "net worth": 450000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jeppe Rindom",
    "city": "Copenhagen",
    "event": "Co-founder and CEO of the fintech unicorn Pleo, a company that provides smart company cards and expense management solutions. The company's multi-billion dollar valuation has created a significant personal fortune for him on paper.",
    "net worth": 250000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Tommy Ahlers",
    "city": "Copenhagen",
    "event": "An entrepreneur and venture capitalist who made his first fortune selling his mobile social networking site ZYB to Vodafone. He has since been a prominent investor, a 'Dragon' on the Danish version of Dragons' Den ('Løvens Hule'), and served as a government minister.",
    "net worth": 1500000000
  },
  {
    "rank in rich list": 20,
    "full name": "Casper Kirk Johansen",
    "city": "Vejle",
    "event": "Grandson of the LEGO founder and brother of Anders Kirk Johansen. He co-manages the family's DKK 9.1 billion investment firm, Kirk Kapital, which was established from the family's 2007 spin-off from the main LEGO holding company.",
    "net worth": 1708000000
  },
  {
    "rank in rich list": 3,
    "full name": "Mads-Peter Clausen",
    "city": "Nordborg",
    "event": "Third-generation heir to the Danfoss fortune. As a member of the company's board of directors, he represents the family's continued strategic involvement in the DKK 211 billion industrial giant.",
    "net worth": 11858000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jacob Risgaard",
    "city": "Nørresundby",
    "event": "Co-founder of Coolshop, one of Denmark's largest online retailers. He gained national fame as an investor on 'Løvens Hule' and has built a significant fortune from his e-commerce and investment activities.",
    "net worth": 175000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Mia Wagner",
    "city": "Viborg",
    "event": "Co-founder of the Nordic Female Founders group and former investor on 'Løvens Hule'. Her wealth stems from her family's company, Wagner Holding, and her own successful career in law and venture capital.",
    "net worth": 120000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Malene Birger",
    "city": "London",
    "event": "A highly successful fashion designer who founded the eponymous brand By Malene Birger. She made her fortune after selling a majority stake in her company to the IC Group (now part of IC Companys), a transaction mentioned in the document in relation to the Martinsen family.",
    "net worth": 100000000
  },
  {
    "rank in rich list": 10,
    "full name": "Robert Mærsk Uggla",
    "city": "Copenhagen",
    "event": "Grandson of Mærsk Mc-Kinney Møller and current Chairman of A.P. Moller-Maersk. As the family's designated leader for the next generation, he oversees the strategic direction of the shipping and logistics giant.",
    "net worth": 2296000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lone Færch",
    "city": "Holstebro",
    "event": "A key figure in the Færch dynasty, which founded a major tobacco and plastics empire. Although the family has since dropped off the top lists due to internal disputes that eroded the fortune, she and other members remain individually wealthy from the original inheritance.",
    "net worth": 200000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Nikolaj Coster-Waldau",
    "city": "Copenhagen",
    "event": "A globally recognized Danish actor who accumulated a significant personal fortune primarily from his leading role as Jaime Lannister in the immensely popular HBO series 'Game of Thrones', supplemented by numerous film roles and endorsements.",
    "net worth": 80000000
  },
    {
    "rank in rich list": 2,
    "full name": "Troels Holch Povlsen",
    "city": "Brande",
    "event": "Father of Anders Holch Povlsen and founder of the Bestseller fashion group. While Anders owns the majority, Troels retains a personal fortune valued at DKK 2.2 billion (approx. $308 million) through his own holding company.",
    "net worth": 308000000
  },
  {
    "rank in rich list": 4,
    "full name": "Benedicte Find",
    "city": "Humlebæk",
    "event": "Sister of Niels Peter Louis-Hansen and co-heir to the Coloplast fortune. She shares in the family's controlling stake of the medical device company.",
    "net worth": 10458000000
  },
  {
    "rank in rich list": 5,
    "full name": "Mette Brunsborg",
    "city": "Silkeborg",
    "event": "Daughter of Lars Larsen and sister of Jacob Brunsborg. She is a co-heir to the Lars Larsen Group (Jysk) and holds a 16.5% stake in the family's DKK 43.6 billion retail empire.",
    "net worth": 6104000000
  },
  {
    "rank in rich list": 6,
    "full name": "Nina Østergaard Borris",
    "city": "Middelfart",
    "event": "Daughter of Torben Østergaard-Nielsen and CEO of United Shipping & Trading Company (USTC). She is a designated heir and active leader in the family's DKK 43.6 billion global conglomerate.",
    "net worth": 6104000000
  },
  {
    "rank in rich list": 6,
    "full name": "Mia Østergaard Nielsen",
    "city": "Middelfart",
    "event": "Daughter of Torben Østergaard-Nielsen and Chief Governance Officer at USTC. She shares in the ownership and strategic leadership of the DKK 43.6 billion family business.",
    "net worth": 6104000000
  },
  {
    "rank in rich list": 30,
    "full name": "Susie Grosbøl",
    "city": "Tisvildeleje",
    "event": "Daughter of Mascot International founder John Grosbøl and sister of CEO Michael Grosbøl. She is a co-owner of the highly profitable workwear manufacturer.",
    "net worth": 896000000
  },
  {
    "rank in rich list": "N/A (Formerly 93)",
    "full name": "Kent Arentoft",
    "city": "Copenhagen",
    "event": "Co-owner of the investment firm DSVM Invest alongside Peter Korsholm. His personal fortune declined significantly from DKK 2.0 billion to DKK 750 million due to a downturn in the firm's core businesses, causing him to exit the top 100 list.",
    "net worth": 105000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Mikkel Svane",
    "city": "San Francisco",
    "event": "Co-founder and former CEO of the customer service software company Zendesk. He became a billionaire after leading the company through its IPO and subsequent $10.2 billion acquisition by a private equity consortium in 2022.",
    "net worth": 1300000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Morten Primdahl",
    "city": "Lisbon",
    "event": "Co-founder of Zendesk. He shared in the significant wealth creation from the company's public listing and eventual $10.2 billion sale, securing his status as a billionaire.",
    "net worth": 1100000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Alexander Aghassipour",
    "city": "San Francisco",
    "event": "Co-founder of Zendesk. His stake in the company, from its inception to its $10.2 billion take-private deal, resulted in a personal fortune well over the billion-dollar mark.",
    "net worth": 1100000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jan van de Winkel",
    "city": "Utrecht",
    "event": "Co-founder and CEO of the Danish biotech giant Genmab. While he is Dutch, he founded the company in Copenhagen, and his significant ownership stake in the highly successful antibody therapeutics firm makes him a billionaire figure central to the Danish biotech scene.",
    "net worth": 1400000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Jesper Buch",
    "city": "Copenhagen",
    "event": "Founder of the online food ordering service Just Eat. He made his fortune from the company's international expansion and eventual multi-billion-pound merger with Takeaway.com. He is now a prominent venture capitalist and media personality in Denmark.",
    "net worth": 350000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lennart Lajboschitz",
    "city": "Copenhagen",
    "event": "Founder of the popular variety store chain Flying Tiger Copenhagen. In 2012, he sold a 70% stake to the private equity firm EQT for a sum that made him a multi-millionaire, and has since invested heavily in real estate and social projects.",
    "net worth": 650000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Peter Holten Mühlmann",
    "city": "Copenhagen",
    "event": "Founder and CEO of the global consumer review platform Trustpilot. He retained a significant stake in the company after its IPO on the London Stock Exchange in 2021, creating a personal fortune valued in the hundreds of millions of dollars.",
    "net worth": 300000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Christian Enevoldsen",
    "city": "Singapore",
    "event": "Son of Pandora co-founders Per Enevoldsen and Winnie Liljeborg. He is actively involved in managing the family's vast fortune through their Singapore-based family office, North-East Group.",
    "net worth": 1500000000
  },
    {
    "rank in rich list": 28,
    "full name": "Erling Daell",
    "city": "Copenhagen",
    "event": "Co-owner and heir to the Harald Nyborg and Jem & Fix retail empire. He shares control of the DKK 7.8 billion company with his father, Kurt Daell, and his brother, Njal Daell, and has taken over as chairman.",
    "net worth": 1092000000
  },
  {
    "rank in rich list": 28,
    "full name": "Njal Daell",
    "city": "Odense",
    "event": "Co-owner and heir to the Harald Nyborg and Jem & Fix retail empire. He is active in the family business, sharing ownership of the DKK 7.8 billion group with his father, Kurt, and brother, Erling.",
    "net worth": 1092000000
  },
  {
    "rank in rich list": 37,
    "full name": "Jacob Kunøe",
    "city": "Copenhagen",
    "event": "Son of investor Ib Kunøe and co-owner of the family's DKK 5.2 billion holding company, Consolidated Holdings, which has major stakes in IT firms Atea and Columbus.",
    "net worth": 728000000
  },
  {
    "rank in rich list": 48,
    "full name": "Camilla Barfoed",
    "city": "Odense",
    "event": "Co-owner of the Barfoed Group, a major real estate company in Odense with a portfolio valued at DKK 4.2 billion. She shares ownership and control with her brother, Frederik Barfoed.",
    "net worth": 588000000
  },
  {
    "rank in rich list": 67,
    "full name": "Alexandra Husted-Andersen",
    "city": "Copenhagen",
    "event": "One of three sisters who inherited a DKK 3.5 billion fortune from their father, Stig Husted-Andersen, comprising the medical device firm Codan Medical and a significant, debt-free portfolio of prime real estate.",
    "net worth": 490000000
  },
  {
    "rank in rich list": 67,
    "full name": "Deirdre Husted-Andersen",
    "city": "Copenhagen",
    "event": "The eldest of three sisters who inherited the DKK 3.5 billion Codan Medical and real estate empire from their father, Stig Husted-Andersen.",
    "net worth": 490000000
  },
  {
    "rank in rich list": 81,
    "full name": "Dorte Lund Kaack",
    "city": "Odense",
    "event": "Daughter of Bente Lis and the late Carl Christian Nielsen, co-founder of Micro Matic. She is a board member and co-inheritor of the family's 50% stake in the DKK 5 billion beverage-dispensing equipment company.",
    "net worth": 350000000
  },
  {
    "rank in rich list": 89,
    "full name": "Per Tollestrup Nielsen",
    "city": "Balling",
    "event": "Co-owner of N.C. Nielsen Gruppen, a leading Scandinavian supplier of gaffeltrucks and heavy machinery. He shares ownership of the DKK 2.4 billion company with his brother, Poul Byriel Nielsen.",
    "net worth": 336000000
  },
  {
    "rank in rich list": "N/A (Formerly 94)",
    "full name": "Hans-Bo Hyldig",
    "city": "Copenhagen",
    "event": "Owner of the property development firm FB Gruppen. He fell off the Top 100 list in 2024, with his fortune estimated just below the DKK 2.0 billion threshold, following a downturn in the real estate transaction market.",
    "net worth": 280000000
  },
  {
    "rank in rich list": "N/A (Formerly 89)",
    "full name": "Kaare Danielsen",
    "city": "Copenhagen",
    "event": "Founder and owner of the job portal Jobindex. He dropped off the Top 100 list in 2024 after taking the company private and seeing its valuation fall to DKK 1.9 billion.",
    "net worth": 266000000
  },
  {
    "rank in rich list": "N/A (Formerly 72)",
    "full name": "Morten K. Larsen",
    "city": "Copenhagen",
    "event": "Owner of the steel wholesaler Euro Steel. His family's fortune dropped from DKK 2.5 billion to DKK 1.4 billion due to falling steel prices and market uncertainty, causing him to fall off the Top 100 list.",
    "net worth": 196000000
  },
  {
    "rank in rich list": "N/A (Formerly 82)",
    "full name": "Peter Korsholm",
    "city": "Copenhagen",
    "event": "Co-owner of the investment firm DSVM Invest. His personal fortune fell sharply from DKK 2.3 billion to DKK 1.25 billion following a significant downturn in the firm's transport and raw materials businesses.",
    "net worth": 175000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Per Enevoldsen",
    "city": "Bangkok",
    "event": "Co-founded the global jewelry giant Pandora with his then-wife, Winnie Liljeborg. After the company's IPO, he relocated to Thailand and retains an immense fortune estimated to be in the billions of dollars.",
    "net worth": 1500000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Gunhild Kirk Johansen",
    "city": "Vejle",
    "event": "Sister of Kjeld Kirk Kristiansen and an heir to the LEGO fortune. She received a DKK 7.5 billion spin-off from the main family holding in 2007, which became the basis for the investment company Kirk Kapital, now run by her sons Anders and Casper.",
    "net worth": 1708000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Lars Rebien Sørensen",
    "city": "Copenhagen",
    "event": "Former CEO of the pharmaceutical giant Novo Nordisk. During his tenure, he was frequently named one of the world's best-performing CEOs and accumulated a personal fortune estimated to be in the hundreds of millions of dollars through salary and stock options.",
    "net worth": 500000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Niels-Jørgen Nielsen",
    "city": "Aalborg",
    "event": "Co-founder of the successful retail chain Normal. After selling a majority stake to Bestseller owner Anders Holch Povlsen, he retained a significant minority share, making him a multi-millionaire.",
    "net worth": 400000000
  },
    {
    "rank in rich list": 1,
    "full name": "Kjeld Kirk Kristiansen",
    "city": "Billund",
    "event": "Third-generation owner of LEGO Group. His portion of the family's wealth is primarily held through Kirkbi A/S, the main investment and holding company of the Kirk Kristiansen family. While he has passed on operational control and chairmanship to his son Thomas, he retains a significant ownership stake.",
    "net worth": 11774000000
  },
  {
    "rank in rich list": 1,
    "full name": "Thomas Kirk Kristiansen",
    "city": "Ullerslev",
    "event": "Fourth-generation owner and Chairman of LEGO Group. He holds a 26.15% stake in the family's holding company, Kirkbi A/S, and is actively leading the brand's strategic direction and governance across all its entities, including the LEGO Foundation.",
    "net worth": 13468000000
  },
  {
    "rank in rich list": 1,
    "full name": "Agnete Kirk Thinggaard",
    "city": "Billund",
    "event": "Fourth-generation owner of LEGO Group, holding a 26.00% stake in Kirkbi A/S. She serves as the vice-chair of the holding company and is an accomplished dressage rider.",
    "net worth": 13412000000
  },
  {
    "rank in rich list": 1,
    "full name": "Sofie Kirk Kristiansen",
    "city": "Billund",
    "event": "Fourth-generation owner of LEGO Group. In 2023, she sold a 2% stake in Kirkbi A/S back to the company for DKK 6.3 billion (approx. $900 million) to fund her personal investments in nature conservation and rewilding projects, while retaining a 23.36% ownership stake.",
    "net worth": 12978000000
  },
  {
    "rank in rich list": 2,
    "full name": "Anders Holch Povlsen",
    "city": "Brande",
    "event": "Sole owner of the Bestseller fashion group (including brands like Jack & Jones, Vero Moda) and the Normal retail chain. He is also a major investor in companies like Zalando and ASOS, and is the largest private landowner in Scotland.",
    "net worth": 12026000000
  },
  {
    "rank in rich list": 3,
    "full name": "Jørgen Mads Clausen",
    "city": "Nordborg",
    "event": "Son of Mads Clausen, the founder of the global industrial giant Danfoss. The family retains approximately 40% ownership of the company, which specializes in climate and energy solutions. In 2022, he stepped down as chairman, passing leadership to an external successor.",
    "net worth": 11858000000
  },
  {
    "rank in rich list": 4,
    "full name": "Niels Peter Louis-Hansen",
    "city": "Vedbæk",
    "event": "Son of the founders of Coloplast, a global medical device company. His fortune, primarily derived from a controlling 31.4% stake in Coloplast and a significant holding in Ambu, increased by DKK 18 billion in the past year due to strong share price performance.",
    "net worth": 10458000000
  },
  {
    "rank in rich list": 5,
    "full name": "Jacob Brunsborg",
    "city": "Silkeborg",
    "event": "Inherited the Lars Larsen Group from his father, Lars Larsen, founder of the JYSK retail empire. As chairman, he oversees the group's diverse investments, which include retail, furniture, and a significant golf resort.",
    "net worth": 6104000000
  },
  {
    "rank in rich list": 6,
    "full name": "Torben Østergaard-Nielsen",
    "city": "Middelfart",
    "event": "Founder and owner of United Shipping & Trading Company (USTC), a global conglomerate primarily focused on bunker fuel trading (Bunker Holding), shipping, and logistics. His wealth has been impacted by a DKK 334 million write-down related to the controversial bankruptcy of his subsidiary, Nordic Waste.",
    "net worth": 6104000000
  },
  {
    "rank in rich list": 7,
    "full name": "Hanni Merete Toosbuy Kasprzak",
    "city": "Bredebro",
    "event": "Owner of the global footwear brand ECCO, which she inherited from her father, Karl Toosbuy. Despite public criticism, her decision to maintain operations in Russia following the 2022 invasion has contributed to stable financial performance.",
    "net worth": 3402000000
  },
  {
    "rank in rich list": 8,
    "full name": "Niels Aage Kjær",
    "city": "Galten",
    "event": "Founder of AVK Group, a leading international manufacturer of valves, hydrants, and industrial fittings. He has recently transferred the majority of ownership to his four children, who are all active in the family business.",
    "net worth": 2520000000
  },
  {
    "rank in rich list": 9,
    "full name": "Knud Erik Andersen",
    "city": "Søborg",
    "event": "Founder and majority shareholder of European Energy, a major developer of wind and solar power projects. In 2024, he sold a 20% stake in the company to Mitsubishi HC Capital for DKK 5.2 billion (approx. $740 million), crystallizing a significant portion of his wealth.",
    "net worth": 2380000000
  },
  {
    "rank in rich list": 10,
    "full name": "Ane Mærsk Mc-Kinney Uggla",
    "city": "Copenhagen",
    "event": "Daughter of shipping magnate Mærsk Mc-Kinney Møller and a key figure in the Mærsk family. She chairs the A.P. Møller Foundation, which controls the A.P. Moller-Maersk group. The family's fortune declined by DKK 2.2 billion due to a downturn in the container shipping market.",
    "net worth": 2296000000
  },
  {
    "rank in rich list": 11,
    "full name": "Tais Clausen",
    "city": "Copenhagen",
    "event": "Co-founder of 3Shape, a global leader in 3D scanners and software for the dental industry. A significant portion of his wealth comes from a partial sale of the company to private equity firm EQT and a DKK 753 million dividend distribution in 2024.",
    "net worth": 2254000000
  },
  {
    "rank in rich list": 12,
    "full name": "Ib Nymark Hegelund",
    "city": "Lugano",
    "event": "A reclusive billionaire who sold his enzyme technology company in 2010. He subsequently multiplied his fortune 16-fold through a highly successful, long-term investment in a listed company, widely believed to be Novo Nordisk.",
    "net worth": 2240000000
  },
  {
    "rank in rich list": 13,
    "full name": "Lars Erik Kann-Rasmussen",
    "city": "Holte",
    "event": "Heir to the VKR Group, the holding company for VELUX, the world's leading manufacturer of roof windows. The family's fortune is derived from its 18% ownership stake and diversified investments, including a venture fund for sustainable building technologies.",
    "net worth": 2212000000
  },
  {
    "rank in rich list": 14,
    "full name": "Adam Westermann",
    "city": "Holte",
    "event": "Part of the family that owned Widex, a major hearing aid manufacturer. His wealth stems from the 2019 merger of Widex with Sivantos to form WS Audiology, in which the family holds a significant stake. He serves as VP of Global Innovation in the company.",
    "net worth": 1988000000
  },
  {
    "rank in rich list": 15,
    "full name": "Jan Tøpholm",
    "city": "Hørsholm",
    "event": "Co-owner of WS Audiology, one of the world's largest hearing aid manufacturers. The company was formed by the merger of his family's company, Widex, and Sivantos. The family retains 51% ownership of the merged entity and has a large property portfolio.",
    "net worth": 1974000000
  },
  {
    "rank in rich list": 16,
    "full name": "Nikolaj Hoffmann Deichmann",
    "city": "Malmö",
    "event": "Co-founder of the successful dental technology company 3Shape. A resident of Sweden, he recently established DM Family Office to manage his DKK 14.1 billion fortune, which includes his stake in 3Shape and other investments.",
    "net worth": 1974000000
  },
  {
    "rank in rich list": 17,
    "full name": "Bent Jensen",
    "city": "Nordborg",
    "event": "Founder and owner of LINAK, a global leader in electric linear actuator systems used in healthcare, agriculture, and industry. He has placed 10% of the company in a foundation and is developing a DKK 1.5 billion holiday resort.",
    "net worth": 1904000000
  },
  {
    "rank in rich list": 18,
    "full name": "Thomas Kähler",
    "city": "Copenhagen",
    "event": "Part of the family controlling Rockwool International, a global leader in stone wool insulation products. The family's wealth surged by DKK 5.4 billion in the past year, driven by a 75% increase in Rockwool's share price amid demand for energy-efficient building solutions.",
    "net worth": 1778000000
  },
  {
    "rank in rich list": 19,
    "full name": "Peter Foss",
    "city": "Hillerød",
    "event": "Sole owner of FOSS A/S, a leading global provider of high-tech analytical solutions for the food and agricultural industries. The company's consistent growth, including a 7% rise in EBITDA in 2023, underpins his DKK 12.6 billion fortune.",
    "net worth": 1764000000
  },
  {
    "rank in rich list": 20,
    "full name": "Anders Kirk Johansen",
    "city": "Vejle",
    "event": "A descendant of the LEGO founder who received a DKK 7.5 billion spin-off from the family's main holding company in 2007. He now chairs Kirk Kapital, an investment firm that has grown its assets to DKK 9.1 billion by investing in 16 small and medium-sized enterprises.",
    "net worth": 1708000000
  },
  {
    "rank in rich list": 21,
    "full name": "Martin Mourier",
    "city": "Fredensborg",
    "event": "A key figure in the family-owned Semler Gruppen, Denmark's largest automobile importer, representing brands such as Volkswagen, Audi, and Porsche. His wealth grew in the past year following a 27% increase in revenue driven by strong sales.",
    "net worth": 1414000000
  },
  {
    "rank in rich list": 22,
    "full name": "Christian Peter Dyvig",
    "city": "Copenhagen",
    "event": "A former partner at the private equity firm Nordic Capital. His primary asset is his ownership of Kompan, the world's leading manufacturer of playground equipment, which saw its EBITDA grow by 21% in 2023. He sold a minority stake to Kirk Kapital.",
    "net worth": 1246000000
  },
  {
    "rank in rich list": 23,
    "full name": "Henrik Østenkjær Lind",
    "city": "Aarhus",
    "event": "Founder of the energy trading firm Danske Commodities, which he sold to Norway's Equinor in 2018 for approximately DKK 3 billion. He now manages his fortune through his investment company, Lind Invest, and holds a significant stake in the restructured airline SAS.",
    "net worth": 1204000000
  },
  {
    "rank in rich list": 24,
    "full name": "Christian Stadil",
    "city": "Copenhagen",
    "event": "Owner of the Thornico conglomerate, which has diverse interests including the sportswear brand Hummel, packaging company Brdr. Hartmann, and real estate. He recently streamlined the group by divesting its shipping activities.",
    "net worth": 1176000000
  },
  {
    "rank in rich list": 25,
    "full name": "Peter Hellerung Christiansen",
    "city": "Skodsborg",
    "event": "Second-generation owner of the Bygma Group, a leading supplier of timber and building materials in the Nordic region. The family's wealth saw a slight decline as a housing market slump caused a 31% drop in the company's EBITDA.",
    "net worth": 1162000000
  },
  {
    "rank in rich list": 26,
    "full name": "Jakob Haldor Topsøe",
    "city": "Copenhagen",
    "event": "Grandson of the founder and current chairman of Haldor Topsøe A/S, a world leader in catalysis and sustainable energy technologies. The family's fortune increased by DKK 2.6 billion, driven by a 42% surge in EBITDA due to high demand for its green-tech solutions.",
    "net worth": 1148000000
  },
  {
    "rank in rich list": 27,
    "full name": "Poul Due Jensen",
    "city": "Bjerringbro",
    "event": "Grandson of the founder and current CEO of Grundfos, one of the world's largest pump manufacturers. The family holds a 9.6% personal stake in the company, separate from the foundation that owns the majority.",
    "net worth": 1106000000
  },
  {
    "rank in rich list": 28,
    "full name": "Kurt Daell",
    "city": "Charlottenlund",
    "event": "Patriarch of the family that owns the successful retail chains Harald Nyborg (hardware) and Jem & Fix (DIY). He has passed the chairmanship to his son Erling but retains voting control and a 30% equity stake.",
    "net worth": 1092000000
  },
  {
    "rank in rich list": 29,
    "full name": "Martin Møller Nielsen",
    "city": "Lugano",
    "event": "Founder of Nordic Aviation Capital (NAC), once the world's largest regional aircraft lessor. His wealth stems from a timely partial sale of his stake for DKK 6.6 billion, years before the company faced financial collapse during the COVID-19 pandemic.",
    "net worth": 924000000
  },
  {
    "rank in rich list": 30,
    "full name": "Michael Grosbøl",
    "city": "Silkeborg",
    "event": "Owner of Mascot International, a leading European manufacturer of high-quality workwear. The family's wealth has doubled over the past two years, propelled by strong international sales and a 21% growth in EBITDA.",
    "net worth": 896000000
  },
  {
    "rank in rich list": 31,
    "full name": "Hans Carl Bøgh-Sørensen",
    "city": "Odense",
    "event": "Founder of Orifarm, one of Europe's largest parallel importers of pharmaceuticals. His wealth increased in the last year, driven by an 18% rise in EBITDA.",
    "net worth": 896000000
  },
  {
    "rank in rich list": 32,
    "full name": "Hans Frederiksen",
    "city": "Vejleby",
    "event": "Founder of the transport and logistics company HCS A/S. He has completed a generational transfer of ownership to his two sons, Jacob and Mads, who are now active co-owners of the business.",
    "net worth": 896000000
  },
  {
    "rank in rich list": 33,
    "full name": "Ole Fleggaard",
    "city": "Kollund",
    "event": "A key figure in the family-owned Fleggaard Group, a conglomerate best known for its extensive cross-border retail trade between Denmark and Germany. The group also has significant activities in leasing and wholesale.",
    "net worth": 882000000
  },
  {
    "rank in rich list": 34,
    "full name": "Simon Hesse Vangsted Hoffmann",
    "city": "Copenhagen",
    "event": "An heir to Holger Hesse, the co-founder of medical device company Ambu. The family's fortune, managed through various holding companies, surged by DKK 3.1 billion due to a 69% increase in Ambu's share price over the last year.",
    "net worth": 882000000
  },
  {
    "rank in rich list": 35,
    "full name": "Morten Hummelmose",
    "city": "Copenhagen",
    "event": "A partner at the leading global private equity firm EQT. His wealth is primarily tied to his 3.2% stake in the publicly listed firm, whose share price has seen significant appreciation. He recently established a philanthropic foundation with an initial endowment of DKK 50 million.",
    "net worth": 826000000
  },
  {
    "rank in rich list": 36,
    "full name": "Klaus Eldrup-Jørgensen",
    "city": "Rungsted",
    "event": "Co-founder of Trackman, a company that developed revolutionary radar technology for tracking golf ball flight, now widely used in sports analytics. The business has expanded into baseball and other sports.",
    "net worth": 770000000
  },
  {
    "rank in rich list": 37,
    "full name": "Ib Kunøe",
    "city": "Vedbæk",
    "event": "An investor who built his fortune through Consolidated Holdings, which owns a controlling 28% stake in Norwegian IT services company Atea and 60% of the Danish IT company Columbus. His wealth grew by DKK 0.4 billion in the last year due to share price increases.",
    "net worth": 728000000
  },
  {
    "rank in rich list": 38,
    "full name": "Olav de Linde",
    "city": "Risskov",
    "event": "A self-made real estate magnate with a property portfolio valued at DKK 5.2 billion, concentrated primarily in Aarhus. He is known for renovating old industrial buildings into modern commercial and residential spaces.",
    "net worth": 728000000
  },
  {
    "rank in rich list": 39,
    "full name": "Peter Just Karberg",
    "city": "Charlottenlund",
    "event": "Fifth-generation owner of the Hans Just Group, a leading importer and distributor of wine and spirits in the Nordic region. The family's fortune declined from DKK 6.5 billion to DKK 5.2 billion following a 23% drop in EBITDA.",
    "net worth": 728000000
  },
  {
    "rank in rich list": 40,
    "full name": "Jørgen Enggaard",
    "city": "Hals",
    "event": "Founder of A. Enggaard Holding A/S, a major Danish construction and development company. While his sons now run the business, he retains significant assets including the Hals Nørreskov estate.",
    "net worth": 714000000
  },
  {
    "rank in rich list": 41,
    "full name": "Peter Bohnsen",
    "city": "Højbjerg",
    "event": "His fortune originates from the sale of the shipping company Unifeeder in 2007. The DKK 4.9 billion is now managed through two entities: his personal investment vehicle, Webco, and Jabami, which is owned by his four daughters.",
    "net worth": 686000000
  },
  {
    "rank in rich list": 42,
    "full name": "Michael Holm",
    "city": "Risskov",
    "event": "Co-founder and majority owner (60%) of Systematic, an international IT software company that provides critical systems for the defense, healthcare, and public sectors. A 44% growth in EBITDA was tempered by lower valuation multiples in the tech sector.",
    "net worth": 672000000
  },
  {
    "rank in rich list": 43,
    "full name": "Bjarne Hessel",
    "city": "Brande",
    "event": "Part of the family that owns Ejner Hessel A/S, one of Denmark's largest car dealerships, specializing in brands like Mercedes-Benz. A challenging market with higher interest rates and inventory costs led to an 11% drop in EBITDA, reducing the family's net worth.",
    "net worth": 644000000
  },
  {
    "rank in rich list": 44,
    "full name": "Jens Poulsen",
    "city": "Ikast",
    "event": "Founder of DK Company, a major European fashion group that owns 26 brands. A 21% decline in EBITDA, attributed to a difficult retail market, resulted in his fortune decreasing from DKK 6.0 billion to DKK 4.5 billion.",
    "net worth": 630000000
  },
  {
    "rank in rich list": 45,
    "full name": "Claus Bagger-Sørensen",
    "city": "Vejle",
    "event": "His wealth originates from the family's successful sales of the chewing gum company Dandy (to Cadbury) and the pharmaceutical firm Fertin Pharma (to Philip Morris). The proceeds are now managed by a family office that invests in health-tech startups.",
    "net worth": 588000000
  },
  {
    "rank in rich list": 46,
    "full name": "Lars Sidelmann Christensen",
    "city": "Roskilde",
    "event": "His family controls Pharmacosmos, a pharmaceutical company specializing in treatments for iron deficiency. The company achieved a record profit of DKK 689 million last year, establishing the family as new entrants on the rich list with a valuation of DKK 4.3 billion.",
    "net worth": 602000000
  },
  {
    "rank in rich list": 47,
    "full name": "Winnie Liljeborg",
    "city": "Roskilde",
    "event": "Co-founder of the global jewelry brand Pandora. After selling her stake, she established the Liljeborg Group to manage her DKK 4.3 billion fortune, which includes significant investments and a philanthropic foundation focused on supporting vulnerable children and youth.",
    "net worth": 602000000
  },
  {
    "rank in rich list": 48,
    "full name": "Frederik Barfoed",
    "city": "Odense",
    "event": "A key figure in the family-owned Barfoed Group, a significant real estate company in Odense. The family's net worth saw a slight decrease to DKK 4.2 billion due to negative property revaluations in a higher interest rate environment.",
    "net worth": 588000000
  },
  {
    "rank in rich list": 49,
    "full name": "Anders Østergaard",
    "city": "Dubai",
    "event": "Founder and owner of Monjasa, a global leader in bunker fuel trading. His fortune fell from DKK 7.7 billion to DKK 4.2 billion as earnings normalized after a record-breaking year in 2022 driven by market volatility.",
    "net worth": 588000000
  },
  {
    "rank in rich list": 50,
    "full name": "Kim Fournais",
    "city": "Nærum",
    "event": "Co-founder and CEO of the online multi-asset trading and investment platform Saxo Bank. He holds a 28% stake in the company and is also developing a luxury apartment complex on a prime waterfront site in Charlottenlund.",
    "net worth": 588000000
  },
  {
    "rank in rich list": 51,
    "full name": "Sune Simonsen",
    "city": "Copenhagen",
    "event": "Heir to the Scan-Group shipping and logistics empire, founded by his late father, Arne Simonsen. The family's fortune plummeted from DKK 10.2 billion to DKK 4.2 billion as a sharp drop in global freight rates caused an 80% collapse in the company's EBITDA.",
    "net worth": 588000000
  },
  {
    "rank in rich list": 52,
    "full name": "Henrik Lindberg",
    "city": "Risskov",
    "event": "His family's wealth comes from the 2021 sale of their high-end eyewear brand, Lindberg Optik, to the French-Italian multinational EssilorLuxottica. The DKK 4.1 billion proceeds are now managed through a family office.",
    "net worth": 574000000
  },
  {
    "rank in rich list": 53,
    "full name": "Jørn Tækker",
    "city": "Aarhus",
    "event": "A property developer known for the ambitious urban development project 'Nye,' a new town being built north of Aarhus planned to house 13,500 residents. His DKK 4.0 billion fortune is anchored in his extensive land bank and low-cost financing.",
    "net worth": 560000000
  },
  {
    "rank in rich list": 54,
    "full name": "Peter Stubkjær Sørensen",
    "city": "Brande",
    "event": "Made his fortune from the sale of wind turbine manufacturer Bonus Energi to Siemens in 2004. He has since reinvested the proceeds into a diversified portfolio of securities and real estate, including a 230-hectare forest estate.",
    "net worth": 546000000
  },
  {
    "rank in rich list": 55,
    "full name": "Mikael Goldschmidt",
    "city": "Kokkedal",
    "event": "A prominent real estate investor and owner of the Imerco homeware retail chain and the historic Kokkedal Castle. Negative property revaluations in 2023 caused his net worth to decrease slightly to DKK 3.9 billion.",
    "net worth": 546000000
  },
  {
    "rank in rich list": 56,
    "full name": "Mogens de Linde",
    "city": "Hornslet",
    "event": "A major property owner in Aarhus and brother of fellow real estate billionaire Olav de Linde. He transferred his DKK 3.7 billion portfolio, including a 95-hectare estate, to his children while remaining as chairman.",
    "net worth": 518000000
  },
  {
    "rank in rich list": 57,
    "full name": "Birger Arp-Hansen",
    "city": "Hellerup",
    "event": "Co-owner of the Arp-Hansen Hotel Group, the largest hotel operator in Copenhagen with 12 hotels and over 5,000 rooms. The family's wealth increased to DKK 3.5 billion following a strong post-pandemic recovery in tourism.",
    "net worth": 490000000
  },
  {
    "rank in rich list": 58,
    "full name": "Johan Regin Jacobsen",
    "city": "Fuglafjørður",
    "event": "CEO of the Faroese salmon farming company Bakkafrost. The family's 15.6% stake in the publicly listed company underpins their DKK 3.4 billion fortune, which saw an increase in the last year due to a rebound in the share price.",
    "net worth": 476000000
  },
  {
    "rank in rich list": 59,
    "full name": "Thorkil Stæhr Andersen",
    "city": "Samsø",
    "event": "Owner of the transport company TA-Logistics. Despite a 12% drop in EBITDA, his family's fortune grew by DKK 0.8 billion to DKK 3.2 billion, as the valuation was lifted by a higher trading multiple for comparable companies in the sector.",
    "net worth": 448000000
  },
  {
    "rank in rich list": 60,
    "full name": "Torben Lind",
    "city": "Køge",
    "event": "Patriarch of the family that owns Lind & Risør, a major builder of single-family homes in Denmark. The company's valuation was significantly lifted by a re-rating of its EBITDA multiple from 6.9x to 14.8x, pushing the family's fortune up by over DKK 1 billion.",
    "net worth": 448000000
  },
  {
    "rank in rich list": 61,
    "full name": "Anders Eikemo Thorgaard",
    "city": "Faaborg",
    "event": "Co-owner of Kivi-Tex, one of Denmark's largest industrial laundry service providers. The family's DKK 3.2 billion fortune is also supported by ownership of the historic Steensgaard Herregård estate.",
    "net worth": 448000000
  },
  {
    "rank in rich list": 62,
    "full name": "Niels Fennet",
    "city": "Taarbæk",
    "event": "Founder of the successful budget hotel chain CABINN. His DKK 3.2 billion fortune is derived from his portfolio of 12 hotels and other real estate, including the historic Store Kro inn in Fredensborg.",
    "net worth": 448000000
  },
  {
    "rank in rich list": 63,
    "full name": "Bent Jensen",
    "city": "Fredericia",
    "event": "Founder of the retail chain tHansen, which specializes in auto parts, accessories, and scooters. A strong financial performance in 2023, with a 42% jump in EBITDA, restored his fortune to DKK 3.1 billion after a dip the previous year.",
    "net worth": 434000000
  },
  {
    "rank in rich list": 64,
    "full name": "Rolf Stuhr Petersen",
    "city": "Copenhagen",
    "event": "Inherited the City Apartment real estate group from his father, Svend. The DKK 3.1 billion portfolio comprises 469 properties, primarily in Copenhagen, and is expanding with a new 64-unit development in Helsinge.",
    "net worth": 434000000
  },
  {
    "rank in rich list": 65,
    "full name": "Preben Terp-Nielsen",
    "city": "Aabenraa",
    "event": "Patriarch of the family that owns Abena, a global manufacturer and wholesaler of healthcare products. The family's fortune was nearly halved, dropping from DKK 6.0 billion to DKK 3.1 billion, after the company posted a record loss due to soaring raw material costs.",
    "net worth": 434000000
  },
  {
    "rank in rich list": 66,
    "full name": "Svend Møller Hansen",
    "city": "Hobro",
    "event": "Founder of DS Gruppen, a leading supplier of steel and concrete solutions. His fortune was crystallized by the sale of a majority stake to the German company Goldbeck in 2023, leaving the family with DKK 3.1 billion in cash and real estate.",
    "net worth": 434000000
  },
  {
    "rank in rich list": 67,
    "full name": "Stefanie Husted-Andersen",
    "city": "Copenhagen",
    "event": "One of three sisters who inherited a significant fortune from their father, Stig Husted-Andersen. The DKK 3.5 billion estate includes the medical device company Codan Medical and a portfolio of prime, debt-free real estate in Copenhagen and North Zealand.",
    "net worth": 490000000
  },
  {
    "rank in rich list": 68,
    "full name": "Nicholas Peter Francis",
    "city": "Copenhagen",
    "event": "Co-founder of the video game software development company Unity Technologies. A significant portion of his wealth was realized from the company's 2020 IPO, with the proceeds now managed through a family fund that invests in private equity and real estate.",
    "net worth": 392000000
  },
  {
    "rank in rich list": 69,
    "full name": "Christian Georg Peter Moltke",
    "city": "Haslev",
    "event": "His family's fortune was created by the sale of their solar park developer, BeGreen, to the Norwegian energy giant Equinor for DKK 2.35 billion in late 2022. The proceeds were largely distributed, leaving DKK 2.8 billion in the family's holding company.",
    "net worth": 392000000
  },
  {
    "rank in rich list": 70,
    "full name": "Mikael Dystrup Pedersen",
    "city": "Køge",
    "event": "An early investor and co-owner of the renewable energy company European Energy. After the company sold a 20% stake to Mitsubishi, his remaining 10% stake is valued at DKK 2.7 billion.",
    "net worth": 378000000
  },
  {
    "rank in rich list": 71,
    "full name": "Alan Nissen",
    "city": "Juelsminde",
    "event": "His family's wealth stems from the 2021 sale of a majority stake in their company, Nissens Cooling Solutions, to A.P. Møller Holding. They retained a minority stake and now manage a DKK 1.9 billion portfolio of securities.",
    "net worth": 378000000
  },
  {
    "rank in rich list": 72,
    "full name": "Claus Hommelhoff",
    "city": "Aarhus",
    "event": "Founder of Formuepleje, one of Denmark's largest independent asset managers. The family sold a majority stake to the Lars Larsen Group but retains a significant minority interest and other investments valued at DKK 2.6 billion.",
    "net worth": 364000000
  },
  {
    "rank in rich list": 73,
    "full name": "Karsten Buchhave",
    "city": "Skanderborg",
    "event": "His fortune originates from the 2021 sale of a 49.9% stake in his biogas plant construction company, Bigadan, to an English private equity fund. A downturn in the biogas sector has since reduced the value of his remaining stake, cutting his fortune by DKK 1 billion.",
    "net worth": 364000000
  },
  {
    "rank in rich list": 74,
    "full name": "Svend-Aage Nielsen",
    "city": "Odense",
    "event": "Co-owner of Micro Matic, a global leader in beverage dispensing equipment, particularly for draft beer. The company, which he took over with a partner in the 1970s, is now being passed to the next generation.",
    "net worth": 364000000
  },
  {
    "rank in rich list": 75,
    "full name": "Christian Bach",
    "city": "Hinnerup",
    "event": "Co-founder of the energy trading powerhouse In Commodities. A normalization of the energy markets after the extreme volatility of 2022 led to lower, though still substantial, profits, with his share of the company's equity valued at DKK 2.5 billion.",
    "net worth": 364000000
  },
  {
    "rank in rich list": 76,
    "full name": "Jeppe Bülow Højgaard",
    "city": "Løgten",
    "event": "Co-founder of the energy trading company In Commodities. His DKK 2.5 billion fortune is his one-third share of the company's equity, which was built up significantly from record profits during the 2022 energy crisis.",
    "net worth": 350000000
  },
  {
    "rank in rich list": 77,
    "full name": "Morten Ebbesen",
    "city": "Copenhagen",
    "event": "His wealth was generated from the 2019 sale of a majority stake in his software company, Siteimprove, to the private equity firm Nordic Capital. He has reinvested the DKK 2.5 billion proceeds into a portfolio of tech stocks and startups.",
    "net worth": 350000000
  },
  {
    "rank in rich list": 78,
    "full name": "Jesper Severin Johanson",
    "city": "Zug",
    "event": "Co-founder of the energy trading firm In Commodities. Now a resident of Switzerland, his DKK 2.5 billion fortune represents his one-third ownership of the highly profitable company.",
    "net worth": 350000000
  },
  {
    "rank in rich list": 79,
    "full name": "Karsten Bill Rasmussen",
    "city": "Odense",
    "event": "A major real estate investor in Odense, with a DKK 2.5 billion fortune spread across a complex structure of seven different property companies. His portfolio includes commercial, residential, and industrial properties.",
    "net worth": 350000000
  },
  {
    "rank in rich list": 80,
    "full name": "Sophie Bensimon Rossing",
    "city": "Hellerup",
    "event": "Co-created her fortune from the sale of the Fitness World gym chain. She reinvested the proceeds into a successful new venture, the car wash chain World Wash, and a DKK 1.4 billion portfolio of listed stocks.",
    "net worth": 350000000
  },
  {
    "rank in rich list": 81,
    "full name": "Bente Lis Nielsen",
    "city": "Tommerup",
    "event": "Widow of Carl Christian Nielsen, co-owner of Micro Matic, a leading global supplier of draft beverage equipment. Her family inherited his 50% stake in the DKK 5 billion company.",
    "net worth": 350000000
  },
  {
    "rank in rich list": 82,
    "full name": "Bettina Antitsch Mortensen",
    "city": "Aarhus",
    "event": "Inherited the extensive property group M+ Invest and homebuilder Hybel from her late husband, Michael Antitsch Mortensen. She now runs the DKK 2.5 billion company, which has a significant portfolio of residential and commercial real estate.",
    "net worth": 350000000
  },
  {
    "rank in rich list": 83,
    "full name": "Anneli Gjørup",
    "city": "Roskilde",
    "event": "Her family's wealth originates from the toy retailer Fætter BR and the Top-Toy group. Following the group's sale and subsequent bankruptcy, the remaining DKK 2.5 billion fortune is managed through various family investment vehicles.",
    "net worth": 350000000
  },
  {
    "rank in rich list": 84,
    "full name": "Henning Kjeldsen",
    "city": "Skagen",
    "event": "Formerly known as Denmark's 'quota king' for his vast fishing rights. He sold the majority of his quotas and fleet in 2022 and has since reinvested the DKK 2.4 billion proceeds into acquiring four hotels and other properties in Skagen.",
    "net worth": 336000000
  },
  {
    "rank in rich list": 85,
    "full name": "Johan Ernst Wedell-Wedellsborg",
    "city": "Vedbæk",
    "event": "Owner of the Weco shipping group. His DKK 2.4 billion fortune was bolstered by record earnings in the product tanker market and his DKK 150 million purchase of a historic estate in Hørsholm for a new residence.",
    "net worth": 336000000
  },
  {
    "rank in rich list": 86,
    "full name": "Peter Rosholm",
    "city": "Copenhagen",
    "event": "A former executive at Novozymes. He made his fortune by leading a management buyout of its spin-off, Albumedix, and subsequently selling it to the German company Sartorius for nearly DKK 4 billion, netting him personally DKK 2.4 billion.",
    "net worth": 336000000
  },
  {
    "rank in rich list": 87,
    "full name": "Niels Thorborg",
    "city": "Odense",
    "event": "Founder of L'easy, a company specializing in the rental of consumer electronics and appliances. His 3C Groups holding company now has diverse interests, including property, the struggling Facit Bank, and the Odense Boldklub football team.",
    "net worth": 336000000
  },
  {
    "rank in rich list": 88,
    "full name": "Thomas Wilkens Andersen",
    "city": "Kerteminde",
    "event": "Third-generation owner of the Fayard shipyard in Munkebo, one of Northern Europe's largest ship repair and conversion facilities. His family's fortune grew by DKK 0.4 billion to DKK 2.4 billion, driven by a 23% increase in EBITDA.",
    "net worth": 336000000
  },
  {
    "rank in rich list": 89,
    "full name": "Poul Byriel Nielsen",
    "city": "Spøttrup",
    "event": "Co-owner of N.C. Nielsen Gruppen, a leading Scandinavian supplier of forklifts and heavy machinery. A 10% increase in EBITDA pushed the family's net worth to DKK 2.4 billion.",
    "net worth": 336000000
  },
  {
    "rank in rich list": 90,
    "full name": "Lars Seier Christensen",
    "city": "Zug",
    "event": "Co-founder of Saxo Bank. After selling his stake for a substantial sum, he moved to Switzerland and now manages his DKK 2.3 billion fortune through Seier Capital. His investments include a 22.5% stake in Parken Sport & Entertainment.",
    "net worth": 322000000
  },
  {
    "rank in rich list": 91,
    "full name": "Erik Bank Lauridsen",
    "city": "Esbjerg",
    "event": "His family holds a 25% stake in the IT company Systematic, a share valued at DKK 2.3 billion. The family firm, with roots dating back to 1886, also has investments in finance and property.",
    "net worth": 322000000
  },
  {
    "rank in rich list": 92,
    "full name": "Niels Erik Martinsen",
    "city": "Hørsholm",
    "event": "His family's wealth originates from the fashion conglomerate IC Companys (now IC Group). Their holding company, Friheden Invest, manages a DKK 2.2 billion portfolio that includes property and a large agricultural estate.",
    "net worth": 308000000
  },
  {
    "rank in rich list": 93,
    "full name": "Fleming Grunnet",
    "city": "Copenhagen",
    "event": "Patriarch of the family that owns Inter Primo, a global plastics extrusion company founded in 1959. A 36% drop in EBITDA reduced the family's net worth to DKK 2.2 billion.",
    "net worth": 308000000
  },
  {
    "rank in rich list": 94,
    "full name": "Claus Henrik Christiansen",
    "city": "Zug",
    "event": "His DKK 2.2 billion fortune is derived from the family's ownership of Nordic Bioscience, a biotech company. A significant drop in the company's valuation caused the family's wealth to fall from DKK 3.8 billion.",
    "net worth": 308000000
  },
  {
    "rank in rich list": 95,
    "full name": "Aage Søndergaard Nielsen",
    "city": "Kolding",
    "event": "Made his fortune from the 2016 sale of his industrial company, Sondex, to Danfoss for DKK 1.6 billion. A subsequent legal dispute over the final payment was resolved, and the family's wealth has since grown to DKK 2.2 billion through investments.",
    "net worth": 308000000
  },
  {
    "rank in rich list": 96,
    "full name": "Henrik Sørensen",
    "city": "Vadum",
    "event": "His family's wealth comes from selling a 64% stake in their pump manufacturing company, Desmi, to a private equity fund. They retained a 21% share, and the total family fortune from the deal and other assets is DKK 2.1 billion.",
    "net worth": 294000000
  },
  {
    "rank in rich list": 97,
    "full name": "Joachim Ante",
    "city": "Copenhagen",
    "event": "A co-founder of the video game software giant Unity Technologies. The sharp and sustained decline in Unity's share price on the Nasdaq has cut his fortune in half over the past year, from DKK 4.3 billion to DKK 2.1 billion.",
    "net worth": 294000000
  },
  {
    "rank in rich list": 98,
    "full name": "Hans Wilhelm Schur",
    "city": "Horsens",
    "event": "Fifth-generation owner of Schur International, one of the world's oldest family-owned packaging companies, founded in 1846. His DKK 2.1 billion fortune was boosted by a 59% rise in the share price of his listed investment, SP Group.",
    "net worth": 294000000
  },
  {
    "rank in rich list": 99,
    "full name": "Kim Dencher Johansen",
    "city": "Frederiksværk",
    "event": "A property developer who built a DKK 2.0 billion real estate empire, primarily in and around his hometown of Frederiksværk. His holding company's equity value crossed the DKK 2 billion mark in 2023.",
    "net worth": 280000000
  },
  {
    "rank in rich list": 100,
    "full name": "Birthe Marianne Christiansen",
    "city": "Kolding",
    "event": "Matriarch of the family that owns the Nic. Christiansen Gruppen, a major importer of cars including Hyundai, Jaguar, and Land Rover. Despite a 13% drop in EBITDA, the family's fortune is valued at DKK 2.0 billion.",
    "net worth": 280000000
  },
    {
    "rank in rich list": 60,
    "full name": "Rikke Lind",
    "city": "Køge",
    "event": "Daughter of Torben Lind and a key heir to the Lind & Risør construction fortune. She shares in the family's DKK 3.2 billion wealth and personally owns a summer house in the exclusive Tisvildeleje area, purchased for DKK 3.2 million.",
    "net worth": 448000000
  },
  {
    "rank in rich list": 60,
    "full name": "Jesper Lind",
    "city": "Køge",
    "event": "Son of Torben Lind and co-heir to the Lind & Risør house-building empire. As a part of the family ownership, he shares in the DKK 3.2 billion fortune, which saw a significant re-rating in its valuation in the past year.",
    "net worth": 448000000
  },
  {
    "rank in rich list": 60,
    "full name": "Carsten Lind",
    "city": "Lellinge",
    "event": "Son of Torben Lind and co-heir to the DKK 3.2 billion Lind & Risør family fortune. He personally owns a 21-hectare agricultural estate in Lellinge, near Køge, which is part of his share in the family's wealth.",
    "net worth": 448000000
  },
  {
    "rank in rich list": "N/A",
    "full name": "Pernille Lindberg",
    "city": "Beder",
    "event": "Co-owner of the proceeds from the 2021 sale of the eyewear brand Lindberg to EssilorLuxottica. She manages her share of the DKK 4.1 billion family fortune through the family office PAM and the Lindberg Optik retail chain.",
    "net worth": 574000000
  },
  {
    "rank in rich list": 14,
    "full name": "Anders Westermann",
    "city": "Holte",
    "event": "Brother of Søren Erik Westermann and part of the family that owned Widex. His personal fortune is tied to his significant stake in the merged hearing aid giant WS Audiology and an extensive private property portfolio.",
    "net worth": 1988000000
  },
    {
    "rank in rich list": "22 (in 2021)",
    "full name": "David Helgason",
    "city": "Copenhagen",
    "event": "A co-founder of the video game technology giant Unity Technologies. He became a billionaire following the company's highly successful IPO on the New York Stock Exchange in September 2020. His wealth in 2021 was based on his significant remaining stake in the multi-billion dollar company.",
    "net worth": 1270000000
  },
  {
    "rank in rich list": "35 (in 2021)",
    "full name": "Nicholas Peter Francis",
    "city": "Copenhagen",
    "event": "A co-founder of Unity Technologies alongside David Helgason and Joachim Ante. His fortune was crystallized by the 2020 IPO. As one of the three key founders, his equity stake in the company was valued at DKK 5.0 billion in 2021.",
    "net worth": 794000000
  },
  {
    "rank in rich list": "44 (in 2021)",
    "full name": "Kent Arentoft",
    "city": "Copenhagen",
    "event": "A former executive who, with his partner Peter Korsholm, acquired the environmental services company DSVM Invest for a nominal sum. They successfully turned the company around, creating a highly profitable business and a personal fortune valued at DKK 4.2 billion in 2021.",
    "net worth": 667000000
  },
  {
    "rank in rich list": "60 (in 2021)",
    "full name": "Per Tejs Knudsen",
    "city": "Copenhagen",
    "event": "Founder and majority owner of the software company cBrain. His fortune surged dramatically as the company's share price on the stock exchange increased seven-fold in 2020, driven by high demand for its F2 standard software platform for public administration.",
    "net worth": 476000000
  },
  {
    "rank in rich list": "66 (in 2021)",
    "full name": "Rolf Svend Petersen",
    "city": "Copenhagen",
    "event": "Heir to and CEO of the family-owned property group City Apartment. The company owns and rents out approximately 2,000 furnished apartments in Copenhagen. His DKK 2.8 billion fortune was significantly boosted by a major revaluation of the property portfolio in 2020.",
    "net worth": 444000000
  },
  {
    "rank in rich list": "67 (in 2021)",
    "full name": "Michael Antitsch Mortensen",
    "city": "Aarhus",
    "event": "A serial entrepreneur in the construction and real estate sector. He made his fortune by founding and selling successful companies like HusCompagniet and CASA A/S to private equity. In 2021, his wealth was valued at DKK 2.7 billion following a new investment in the paint company Flügger.",
    "net worth": 429000000
  },
  {
    "rank in rich list": "75 (in 2021)",
    "full name": "Gullak Arngrimsson Madsen",
    "city": "Hirtshals",
    "event": "Owner of the major fishing company GTM Holding and the super-trawler 'Ruth'. His DKK 2.6 billion fortune was built on highly profitable fishing operations in the North Atlantic and the strategic sale of valuable fishing quotas.",
    "net worth": 413000000
  },
  {
    "rank in rich list": "88 (in 2021)",
    "full name": "Jørgen Hansen",
    "city": "Copenhagen",
    "event": "Founder of Nordic Transport Group (NTG). He and his family retained a 17% stake in the logistics company after taking it public via a reverse takeover. The company's share price more than sextupled post-listing, creating the family's DKK 2.2 billion fortune.",
    "net worth": 349000000
  },
  {
    "rank in rich list": "90 (in 2021)",
    "full name": "Inge & Anders Blicher Petersen",
    "city": "Odense",
    "event": "The family owns Newtec, a successful Fyn-based company that manufactures high-tech sorting and packaging machinery for the global food industry. The DKK 2.1 billion fortune was built on consistent profitability and international expansion.",
    "net worth": 333000000
  },
  {
    "rank in rich list": "97 (in 2021)",
    "full name": "Familien Bylling (Bylling Family)",
    "city": "Christiansfeld",
    "event": "The family owns Aller Aqua, a leading global producer of environmentally friendly fish feed. Their DKK 1.8 billion fortune was built on successful expansion into emerging aquaculture markets in China, Africa, and the Balkans.",
    "net worth": 286000000
  },
  {
    "rank in rich list": "99 (in 2021)",
    "full name": "Familien efter Johan Schrøder (Heirs of Johan Schrøder)",
    "city": "Copenhagen",
    "event": "The family's DKK 1.7 billion fortune was created from the sale of the med-tech company Radiometer in 2003. The proceeds have since been managed through a family holding company, J.S.R., which primarily invests in securities and real estate like the Aggersvold estate.",
    "net worth": 270000000
  },
    {
    "rank in rich list": "3 (in 2017)",
    "full name": "Lars Larsen",
    "city": "Silkeborg",
    "event": "Founder of the JYSK retail empire, a global chain with several thousand stores. He built a DKK 28.8 billion fortune from scratch, starting with one store in Aarhus in 1979. Besides JYSK, his holdings included Bolia.com, Ilva, Idémøbler, and the furniture producer Actona. He passed away in 2019.",
    "net worth": 4299000000
  },
  {
    "rank in rich list": "4 (in 2017)",
    "full name": "Mads Clausen",
    "city": "Nordborg",
    "event": "Founder of the industrial giant Danfoss in 1933. While he passed away in 1966, his legacy is the foundation of the Clausen family's DKK 28.5 billion fortune. The family retains nearly half of the company's shares, with the rest held by a foundation and employees.",
    "net worth": 4254000000
  },
  {
    "rank in rich list": "5 (in 2017)",
    "full name": "Aage Louis-Hansen",
    "city": "Humlebæk",
    "event": "Co-founder of the global medical device company Coloplast. He and his wife, Johanne, established the company based on a nurse's idea for a disposable stomipose. The company's success is the origin of the Louis-Hansen family's DKK 27.8 billion fortune.",
    "net worth": 4149000000
  },
  {
    "rank in rich list": "5 (in 2017)",
    "full name": "Johanne Louis-Hansen",
    "city": "Humlebæk",
    "event": "Co-founder of Coloplast alongside her husband, Aage Louis-Hansen. As a nurse herself, she saw the potential in the initial product idea and was instrumental in persuading her husband to start the company, which led to the family's vast fortune.",
    "net worth": 4149000000
  },
  {
    "rank in rich list": "6 (in 2017)",
    "full name": "Dieter Kasprzak",
    "city": "Bredebro",
    "event": "Former CEO of the ECCO shoe company and husband of the owner, Hanni Toosbuy Kasprzak. He stepped down from the CEO role in 2017, passing the leadership to Steen Borgholm, after a long and successful tenure leading the company's global expansion.",
    "net worth": 1866000000
  },
  {
    "rank in rich list": "8 (in 2017)",
    "full name": "Nils Foss",
    "city": "Hillerød",
    "event": "Founder of FOSS A/S in 1959, a world-leading company in analytical instruments for the food and agricultural industries. The company remains in family ownership, with his son Peter Foss serving as chairman.",
    "net worth": 1612000000
  },
  {
    "rank in rich list": "9 (in 2017)",
    "full name": "Villum Kann-Rasmussen",
    "city": "Copenhagen",
    "event": "Founder of VELUX and the VKR Group. Although he passed away in 1993, his innovations in roof windows created a global industrial powerhouse and the foundation for the family's DKK 8.8 billion fortune, now managed by his grandson, Mads Kann-Rasmussen.",
    "net worth": 1313000000
  },
  {
    "rank in rich list": "11 (in 2017)",
    "full name": "Jeppe Christiansen",
    "city": "Copenhagen",
    "event": "CEO of the investment firm Maj Invest. He is a key external figure in a family-owned dynasty, serving as the Chairman of the Board for Haldor Topsøe A/S, helping to guide the strategic direction of the highly successful engineering company.",
    "net worth": 1284000000
  },
  {
    "rank in rich list": "15 (in 2017)",
    "full name": "Hans Frede Fleggaard",
    "city": "Padborg",
    "event": "Took over his family's small colonial goods store in 1960 and transformed it into the Fleggaard Group, a massive conglomerate best known for its cross-border retail. The DKK 5.2 billion fortune is now managed by his three children: Ole, Birgitte, and Susanne.",
    "net worth": 776000000
  },
  {
    "rank in rich list": "16 (in 2017)",
    "full name": "Christian Tøpholm",
    "city": "Nærum",
    "event": "Co-founder of the hearing aid manufacturer Widex in 1956. He and his partner, Erik Westermann, built the company from scratch, creating a global player and the foundation for the Tøpholm and Westermann families' multi-billion DKK fortunes.",
    "net worth": 776000000
  },
  {
    "rank in rich list": "16 (in 2017)",
    "full name": "Erik Westermann",
    "city": "Nærum",
    "event": "Co-founder of Widex. His partnership with Christian Tøpholm led to the creation of one of the world's leading hearing aid companies, securing vast wealth for both founding families, now in their third generation of leadership.",
    "net worth": 776000000
  },
  {
    "rank in rich list": "23 (in 2017)",
    "full name": "Tonny Dalhøj Paulsen",
    "city": "Aarhus",
    "event": "Co-founded the container feeder shipping company Unifeeder with his partner, Peter Bohnsen. They sold the company in 2007 for approximately DKK 2 billion, which formed the basis of his subsequent wealth, managed through his family holding company.",
    "net worth": 582000000
  },
  {
    "rank in rich list": "24 (in 2017)",
    "full name": "Mads Frederiksen",
    "city": "Glostrup",
    "event": "Fourth-generation leader and CEO of HCS A/S Transport & Spedition, a large family-owned logistics and environmental services company. He shares ownership of the DKK 3.8 billion business with his father, Hans, and brother, Jacob.",
    "net worth": 567000000
  },
  {
    "rank in rich list": "28 (in 2017)",
    "full name": "Merete Hay",
    "city": "Copenhagen",
    "event": "Co-founder of the Danish design powerhouse HAY, alongside her husband, Rolf Hay. The company's global success is a key part of the investment portfolio of Troels Holch Povlsen (Bestseller founder), who is the majority owner.",
    "net worth": 448000000
  },
  {
    "rank in rich list": "28 (in 2017)",
    "full name": "Rolf Hay",
    "city": "Copenhagen",
    "event": "Co-founder of the internationally acclaimed design company HAY. The firm is a significant holding for Troels Holch Povlsen, who has helped finance its growth into a billion-kroner business.",
    "net worth": 448000000
  },
  {
    "rank in rich list": "29 (in 2017)",
    "full name": "Lykke Martinsen",
    "city": "London",
    "event": "Wife of Niels Martinsen and co-heir to the IC Group fashion fortune. Their daughter, Emilie, is the primary inheritor, though Niels Martinsen retains voting control of the family's DKK 2.5 billion holding company, Friheden Invest.",
    "net worth": 373000000
  }
]
```

## 📄 scripts/seed/ingest-denmark-richlist.js
*Lines: 136, Size: 4.49 KB*

```javascript
// apps/pipeline/scripts/seed/ingest-denmark-richlist.js
import mongoose from 'mongoose'
import path from 'path'
import { reinitializeLogger, logger } from '@headlines/utils-server'
import { initializeScriptEnv } from './lib/script-init.js'
import { loadAndPrepareDenmarkRichlist } from './lib/denmark-richlist-data-loader.js'
import { Opportunity } from '@headlines/models'
import {
  contactFinderChain,
  performGoogleSearch,
} from '../../packages/ai-services/src/index.js'
import colors from 'ansi-colors'
import pLimit from 'p-limit'

const CONCURRENCY_LIMIT = 5

async function createOrUpdateOpportunity(person) {
  try {
    const updateResult = await Opportunity.updateOne(
      { reachOutTo: person.name },
      {
        $setOnInsert: {
          reachOutTo: person.name,
          basedIn: person.country,
          city: person.city,
          likelyMMDollarWealth: person.wealthMillionsUSD,
          // DEFINITIVE FIX: Always initialize contactDetails as an object on insert.
          contactDetails: {
            company: person.primaryCompany,
          },
        },
        $addToSet: { whyContact: { $each: person.whyContact } },
      },
      { upsert: true }
    )

    if (updateResult.upsertedCount > 0) {
      logger.info(colors.green(`  ✅ Created new Opportunity for: ${person.name}`))
    } else if (updateResult.modifiedCount > 0) {
      logger.info(colors.yellow(`  🔄 Updated existing Opportunity for: ${person.name}`))
    } else {
      logger.info(`  ⚪️ No changes for Opportunity: ${person.name}`)
    }
    return { success: true, name: person.name }
  } catch (error) {
    logger.error(
      { err: error },
      `❌ Failed to create/update opportunity for ${person.name}`
    )
    return { success: false }
  }
}

async function enrichOpportunityWithContact(name) {
  try {
    const opportunity = await Opportunity.findOne({ reachOutTo: name })
    if (!opportunity || opportunity.contactDetails?.email) {
      logger.trace(
        `  -> Skipping email search for ${name} (already exists or opp not found).`
      )
      return { success: true, found: false }
    }

    // DEFINITIVE FIX: If contactDetails somehow doesn't exist, create it.
    if (!opportunity.contactDetails) {
      opportunity.contactDetails = {}
    }

    logger.info(`  -> AI Contact Finder: Searching for email for ${name}...`)

    const searchQuery = `"${opportunity.reachOutTo}" "${opportunity.contactDetails?.company || ''}" email contact`
    const searchResult = await performGoogleSearch(searchQuery)

    if (!searchResult.success || !searchResult.snippets) {
      logger.warn(`  -> Web search failed for ${name}. Cannot find email.`)
      return { success: true, found: false }
    }

    const response = await contactFinderChain({ snippets: searchResult.snippets })

    if (response && !response.error && response.email) {
      opportunity.contactDetails.email = response.email
      await opportunity.save()
      logger.info(
        colors.green(`    ✅ Found and saved email for ${name}: ${response.email}`)
      )
      return { success: true, found: true }
    } else {
      logger.warn(`    -> AI could not find an email for ${name}.`)
      return { success: true, found: false }
    }
  } catch (error) {
    logger.error({ err: error }, `❌ Failed during contact enrichment for ${name}`)
    return { success: false }
  }
}

async function main() {
  reinitializeLogger(path.resolve(process.cwd(), 'apps/pipeline/logs'))
  await initializeScriptEnv()
  logger.info('🚀 Starting Denmark Direct-to-Opportunity Ingestion Script...')

  const { allIndividuals } = await loadAndPrepareDenmarkRichlist()

  logger.info(
    `🔥 Launching concurrent processing for ${allIndividuals.length} individuals with a limit of ${CONCURRENCY_LIMIT}...`
  )

  const limit = pLimit(CONCURRENCY_LIMIT)
  const processingPromises = allIndividuals.map((person) =>
    limit(async () => {
      logger.info(colors.cyan(`\n--- Processing: ${person.name} ---`))
      const createResult = await createOrUpdateOpportunity(person)
      if (createResult.success) {
        await enrichOpportunityWithContact(createResult.name)
      }
    })
  )

  await Promise.all(processingPromises)

  logger.info('\n--- Ingestion Summary ---')
  logger.info(colors.green('✅ Script finished. All individuals processed.'))
}

main()
  .catch((err) =>
    logger.fatal({ err }, 'A critical error occurred in the main script execution.')
  )
  .finally(() => {
    if (mongoose.connection.readyState === 1) {
      mongoose.disconnect()
    }
    process.exit(0)
  })

```

## 📄 scripts/seed/ingest-opportunity-files.js
*Lines: 266, Size: 8.25 KB*

```javascript
// apps/pipeline/scripts/seed/ingest-opportunity-files.js
/**
 * @command seed:ingest-opportunities
 * @group Seed
 * @description Ingests Opportunity profiles from .js files in the opportunity_seeds directory using AI-powered merging.
 * @example pnpm run seed:ingest-opportunities
 * @example pnpm run seed:ingest-opportunities -- --dry-run
 */
import fs from 'fs/promises'
import path from 'path'
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import colors from 'ansi-colors'
import { initializeScriptEnv } from './lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { Opportunity, EntityGraph } from '@headlines/models'
import { closeReader, promptUser } from './lib/user-interact.js'
import {
  oppFactoryChain,
  dossierUpdateChain,
  graphUpdaterChain,
  entityCanonicalizerChain,
} from '@headlines/ai-services'

const SEED_DIR = path.resolve(process.cwd(), 'apps/pipeline/opportunity_seeds')

async function updateGraphFromOpportunity(opportunity) {
  const biography = opportunity.profile?.biography
  if (!biography) {
    logger.warn(
      `  -> Skipping graph update for "${opportunity.reachOutTo}" due to missing biography.`
    )
    return
  }

  logger.info(
    `  -> 🧠 Updating Knowledge Graph for "${opportunity.reachOutTo}" from dossier...`
  )

  const result = await graphUpdaterChain({ event_summary: biography })
  if (result.error || !result.relationships) {
    logger.warn(
      { error: result.error },
      `  -> Graph Updater AI failed for "${opportunity.reachOutTo}".`
    )
    return
  }

  const { relationships, entities } = result

  if (relationships.length === 0) {
    logger.info(`  -> No new relationships found in the dossier for the graph.`)
    return
  }

  const entityNameIdMap = new Map()
  const entityCanonicalNameMap = new Map()

  for (const name of entities) {
    const canonicalResult = await entityCanonicalizerChain({ entity_name: name })
    const canonicalName = canonicalResult.canonical_name || name
    const entityDoc = await EntityGraph.findOneAndUpdate(
      { name: canonicalName },
      {
        $setOnInsert: { name: canonicalName, type: 'company' },
        $addToSet: { aliases: name },
      },
      { upsert: true, new: true }
    ).lean()
    entityNameIdMap.set(name.toLowerCase(), entityDoc._id)
    entityCanonicalNameMap.set(name.toLowerCase(), canonicalName)
  }

  const bulkOps = []
  for (const [subject, predicate, object] of relationships) {
    const subjectId = entityNameIdMap.get(subject.toLowerCase())
    const objectId = entityNameIdMap.get(object.toLowerCase())
    const canonicalSubject = entityCanonicalNameMap.get(subject.toLowerCase())
    const canonicalObject = entityCanonicalNameMap.get(object.toLowerCase())

    if (subjectId && objectId && canonicalSubject && canonicalObject) {
      bulkOps.push({
        updateOne: {
          filter: { _id: subjectId },
          update: {
            $addToSet: {
              relationships: {
                targetId: objectId,
                targetName: canonicalObject,
                type: predicate,
                context: `From dossier for ${opportunity.reachOutTo}`,
              },
            },
          },
        },
      })
    }
  }

  if (bulkOps.length > 0) {
    await EntityGraph.bulkWrite(bulkOps, { ordered: false })
    logger.info(
      `  -> Successfully wrote ${bulkOps.length} relationships to the Knowledge Graph.`
    )
  }
}

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('dry-run', {
      type: 'boolean',
      description: 'Simulate the run without writing to the DB or renaming files.',
    })
    .option('yes', {
      alias: 'y',
      type: 'boolean',
      description: 'Skip confirmation prompt.',
    })
    .help().argv

  await initializeScriptEnv()
  logger.info('🚀 Starting AI-Powered Opportunity file ingestion script...')

  let filesToProcess = []
  try {
    const allFiles = await fs.readdir(SEED_DIR)
    filesToProcess = allFiles.filter((file) => file.endsWith('.js'))
  } catch (error) {
    if (error.code === 'ENOENT') {
      logger.error(`Seed directory not found at: ${SEED_DIR}`)
      logger.error('Please create the directory and place your seed files inside.')
      return
    }
    throw error
  }

  if (filesToProcess.length === 0) {
    logger.info('✅ No new opportunity files (.js) found to process.')
    return
  }

  logger.info(`Found ${filesToProcess.length} opportunity file(s) to process.`)

  if (!argv.yes && !argv.dryRun) {
    const answer = await promptUser('Proceed with AI-powered database ingestion? (y/n): ')
    if (answer !== 'y') {
      logger.warn('Operation cancelled by user.')
      return
    }
  }

  for (const file of filesToProcess) {
    const filePath = path.join(SEED_DIR, file)
    logger.info(colors.cyan(`\n--- Processing file: ${file} ---`))
    let successInFile = true

    try {
      const importedModule = await import(filePath)

      let opportunitiesInData = []
      if (importedModule.default) {
        if (Array.isArray(importedModule.default)) {
          opportunitiesInData = importedModule.default
        } else if (
          typeof importedModule.default === 'object' &&
          importedModule.default.reachOutTo
        ) {
          opportunitiesInData = [importedModule.default]
        } else {
          opportunitiesInData = Object.values(importedModule.default)
        }
      } else {
        opportunitiesInData = Object.values(importedModule)
      }

      logger.info(
        `  -> Found ${opportunitiesInData.length} opportunity object(s) in this file.`
      )

      for (const newData of opportunitiesInData) {
        if (!newData || !newData.reachOutTo) {
          logger.warn('  -> Skipping an invalid object in the file (missing reachOutTo).')
          continue
        }

        logger.info(`  -> Processing individual: "${newData.reachOutTo}"`)

        const existingOpp = await Opportunity.findOne({
          reachOutTo: newData.reachOutTo,
        }).lean()

        let finalOpportunityData
        let aiResult

        const newIntelligenceText = newData.whyContact.join('\n')

        if (existingOpp) {
          logger.info(`    -> Found existing profile. Calling Dossier Update Agent...`)
          aiResult = await dossierUpdateChain({
            existing_dossier_json: JSON.stringify(existingOpp),
            new_intelligence_text: newIntelligenceText,
          })
        } else {
          logger.info(`    -> No existing profile. Calling Opportunity Factory Agent...`)
          aiResult = await oppFactoryChain({
            name: newData.reachOutTo,
            articles_text: newIntelligenceText,
          })
        }

        if (
          aiResult.error ||
          !aiResult.opportunities ||
          aiResult.opportunities.length === 0
        ) {
          throw new Error(
            `AI agent failed for ${newData.reachOutTo}. Reason: ${aiResult.error || 'No opportunities returned.'}`
          )
        }

        finalOpportunityData = aiResult.opportunities[0]

        if (!argv.dryRun) {
          await Opportunity.updateOne(
            { reachOutTo: finalOpportunityData.reachOutTo },
            { $set: finalOpportunityData },
            { upsert: true }
          )
          logger.info(
            colors.green(
              `    ✅ Successfully created/updated opportunity for "${finalOpportunityData.reachOutTo}".`
            )
          )
          await updateGraphFromOpportunity(finalOpportunityData)
        } else {
          logger.info(
            colors.yellow(
              `    [DRY RUN] Would have created/updated opportunity for "${finalOpportunityData.reachOutTo}".`
            )
          )
        }
      }

      if (!argv.dryRun && successInFile) {
        const newPath = filePath.replace('.js', '.uploaded')
        await fs.rename(filePath, newPath)
        logger.info(`  -> Renamed file to: ${path.basename(newPath)}`)
      } else if (argv.dryRun) {
        logger.info(
          colors.yellow('  [DRY RUN] Would have renamed the file to .uploaded.')
        )
      }
    } catch (error) {
      successInFile = false
      logger.error(
        { err: error },
        `❌ Failed to process file ${file}. It will be skipped and NOT renamed.`
      )
    }
  }

  logger.info('\n✅ AI-powered ingestion script finished.')
}

main().finally(() => closeReader())

```

## 📄 scripts/seed/ingest-richlist.js
*Lines: 98, Size: 3.41 KB*

```javascript
// apps/pipeline/scripts/seed/ingest-richlist.js
import { initializeScriptEnv } from './lib/script-init.js'
import { logger, sendErrorAlert } from '@headlines/utils-server'
import { loadAndPrepareRichlist } from './lib/richlist-data-loader.js'
import { createSyntheticArticle } from './lib/synthetic-article-builder.js'
import { runInjectedPipeline } from './lib/pipeline-injector.js'
import { enrichThinProfile } from './lib/enrich-thin-profile.js'
import { chunkHistoryIntoEvents } from './lib/event-chunker.js'
import colors from 'ansi-colors'

async function main() {
  try {
    await initializeScriptEnv()
    logger.info('🚀 Starting Rich List Ingestion Script (Sequential, Verbose Mode)...')

    const { allIndividuals, rawIndividualData } = await loadAndPrepareRichlist()

    logger.info(
      `Preparing to process ${allIndividuals.length} individuals from the ${allIndividuals[0]?.year || 'latest'} rich list...`
    )

    let totalEventsCreated = 0
    let totalOppsCreated = 0

    for (const person of allIndividuals) {
      logger.info(colors.cyan(`\n--- Analyzing: ${person.name} ---`))

      if (person.isThinProfile) {
        logger.info(
          colors.magenta(
            `  📝 Thin profile detected for ${person.name.toUpperCase()}. Triggering AI enrichment...`
          )
        )
        logger.info(
          { raw_data: rawIndividualData.find((p) => p.name === person.name) },
          `Raw JSON data for ${person.name}`
        )
        const enrichedData = await enrichThinProfile(person)
        person.background = enrichedData.generated_background
      }

      const eventChunks = await chunkHistoryIntoEvents(person)

      for (const [index, chunk] of eventChunks.entries()) {
        logger.info(
          colors.bold(
            `  └── Processing event chunk ${index + 1}/${eventChunks.length}: "${chunk.description}"`
          )
        )
        try {
          const syntheticArticle = createSyntheticArticle(person, chunk)
          const { savedEvents, savedOpportunities } =
            await runInjectedPipeline(syntheticArticle)

          if (savedEvents && savedEvents.length > 0) {
            totalEventsCreated += savedEvents.length
            savedEvents.forEach((event) => {
              logger.info(
                colors.green(`    ✅ Event Created: "${event.synthesized_headline}"`)
              )
            })
          }
          if (savedOpportunities && savedOpportunities.length > 0) {
            totalOppsCreated += savedOpportunities.length
            savedOpportunities.forEach((opp) => {
              logger.info(
                colors.green(
                  `    ✅ Opportunity Created: "${opp.reachOutTo}" (~$${opp.likelyMMDollarWealth}M)`
                )
              )
            })
          }
        } catch (error) {
          logger.error(
            { err: error },
            `    ❌ Failed to process event chunk: "${chunk.description}"`
          )
        }
      }
    }

    logger.info('\n--- Ingestion Summary ---')
    logger.info(colors.green(`✅ Successfully created ${totalEventsCreated} events.`))
    logger.info(
      colors.green(`✅ Successfully created ${totalOppsCreated} opportunities.`)
    )
    logger.info('✅ Script finished.')
  } catch (error) {
    sendErrorAlert(error, { origin: 'INGEST_RICHLIST_SCRIPT' })
    logger.fatal(
      { err: error },
      'A critical error occurred in the main script execution.'
    )
  }
}

main()

```

## 📄 scripts/seed/lib/denmark-richlist-data-loader.js
*Lines: 89, Size: 2.86 KB*

```javascript
// apps/pipeline/scripts/seed/lib/denmark-richlist-data-loader.js
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'
import { Opportunity } from '@headlines/models'
import { logger } from '@headlines/utils-shared'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const BASE_PATH = path.resolve(__dirname, '../../')
const DKK_TO_USD_RATE = 0.14 // Approximate conversion rate

// DEFINITIVE FIX: Expanded city-to-country mapping to be more comprehensive
const cityToCountryMap = {
  london: 'United Kingdom',
  geneva: 'Switzerland',
  zug: 'Switzerland',
  dubai: 'United Arab Emirates',
  boston: 'United States',
  'palo alto': 'United States',
  'san francisco': 'United States',
  'new york': 'United States',
  'los angeles': 'United States',
  frankfurt: 'Germany',
  munich: 'Germany',
  berlin: 'Germany',
  sydney: 'Australia',
  marbella: 'Spain',
  mallorca: 'Spain',
  'monte carlo': 'Monaco',
  lugano: 'Switzerland',
  utrecht: 'Netherlands',
  reykjavik: 'Iceland',
  copenhagen: 'Denmark',
  aarhus: 'Denmark',
  odense: 'Denmark',
  aalborg: 'Denmark',
  esbjerg: 'Denmark',
}

function getCountryFromCity(city) {
  if (!city) return 'Denmark'
  const lowerCity = city.toLowerCase()
  return cityToCountryMap[lowerCity] || 'Denmark'
}

export async function loadAndPrepareDenmarkRichlist() {
  const jsonPath = path.join(BASE_PATH, 'seed/data/denmark.json')
  const rawIndividuals = JSON.parse(fs.readFileSync(jsonPath, 'utf8'))

  const uniqueIndividuals = Array.from(
    new Map(rawIndividuals.map((item) => [item['full name'], item])).values()
  )
  logger.info(
    `Loaded ${rawIndividuals.length} total individuals from ${path.basename(jsonPath)}, filtered down to ${uniqueIndividuals.length} unique entries.`
  )

  const existingOppNames = (await Opportunity.find({}).select('reachOutTo').lean()).map(
    (o) => o.reachOutTo
  )
  const existingSet = new Set(existingOppNames)

  const preparedIndividuals = uniqueIndividuals.map((person) => {
    const wealthUSD = person['net worth'] * DKK_TO_USD_RATE
    const wealthMillionsUSD = Math.round(wealthUSD / 1000000)

    const background = `Based in: ${person.city}. Estimated Net Worth: $${wealthMillionsUSD}M USD. Event/History: ${person.event}`
    const isThinProfile = background.trim().length < 50

    const preparedPersonObject = {
      name: person['full name'],
      city: person.city,
      country: getCountryFromCity(person.city),
      industry: person.industry || 'Finance',
      wealthMillionsUSD: wealthMillionsUSD,
      background: background,
      wealthSummary: '',
      primaryCompany: 'Private Equity',
      year: new Date().getFullYear(),
      isExisting: existingSet.has(person['full name']),
      isThinProfile,
    }

    return preparedPersonObject
  })

  return { allIndividuals: preparedIndividuals, rawIndividualData: uniqueIndividuals }
}

```

## 📄 scripts/seed/lib/enrich-thin-profile.js
*Lines: 116, Size: 4.93 KB*

```javascript
// apps/pipeline/scripts/seed/lib/enrich-thin-profile.js
import { callLanguageModel } from '../../../../../packages/ai-services/src/index.js'
import { settings } from '../../../../../packages/config/src/server.js'
import { logger } from '../../../../../packages/utils-server'
import { z } from 'zod'

const verificationSchema = z.object({
  is_significant_figure: z
    .boolean()
    .describe(
      'True if the person is a known business figure (founder, CEO, major owner).'
    ),
  verification_summary: z
    .string()
    .describe(
      "A neutral, one-sentence summary of the person's primary role based on general knowledge."
    ),
})

const enrichmentSchema = z.object({
  summary: z.string().min(20).describe('The generated 2-3 sentence background summary.'),
})

const createFallbackText = (person) =>
  `This is a wealth profile for ${person.name}, a notable figure in the ${person.industry} sector, primarily associated with the company ${person.primaryCompany}. Their estimated wealth is approximately $${person.wealthMillionsUSD}M USD.`

/**
 * Uses a robust, two-step AI process to generate a background summary for an individual
 * when no pre-written text is available, minimizing hallucination risk.
 * @param {object} person - A person object from the rich list.
 * @returns {Promise<{generated_background: string}>} The AI-generated or fallback text.
 */
export async function enrichThinProfile(person) {
  logger.info(`  -> AI Enrichment (2-Step): Verifying significance of ${person.name}...`)

  // --- STEP 1: NEUTRAL VERIFICATION ---
  const verificationPrompt = `You are a neutral fact-checker. Based on your general knowledge, is the following person a significant business figure (founder, CEO, major owner, etc.)? Provide a boolean answer and a brief, neutral summary of their primary role.

Respond ONLY with a valid JSON object: {"is_significant_figure": boolean, "verification_summary": "One sentence summary."}`

  const verificationUserContent = `Person: ${person.name}\nCompany / Industry: ${person.primaryCompany}`

  try {
    const verificationResponse = await callLanguageModel({
      modelName: settings.LLM_MODEL_UTILITY,
      systemPrompt: verificationPrompt,
      userContent: verificationUserContent,
      isJson: true,
    })

    const validation = verificationSchema.safeParse(verificationResponse)
    if (!validation.success || !validation.data.is_significant_figure) {
      logger.warn(
        `  -> Verification FAILED for ${person.name}. The AI did not recognize them as a significant business figure. Using fallback text.`
      )
      if (!validation.success)
        logger.error(
          { err: validation.error.flatten(), raw_response: verificationResponse },
          'Verification response failed Zod validation.'
        )
      return { generated_background: createFallbackText(person) }
    }

    const verifiedSummary = validation.data.verification_summary
    logger.info(`  -> Verification PASSED for ${person.name}: "${verifiedSummary}"`)

    // --- STEP 2: CONDITIONAL ENRICHMENT ---
    logger.info(
      `  -> AI Enrichment: Generating full background for verified figure ${person.name}...`
    )
    const enrichmentPrompt = `You are a financial biographer. You have already verified the subject's identity. Now, synthesize the verified summary with the provided private financial data to write a concise, professional background summary (2-3 sentences) suitable for a rich list publication. Focus on their business history, key achievements, and the source of their wealth.

Respond ONLY with a valid JSON object: {"summary": "Your generated text."}`

    const enrichmentUserContent = `
        Verified Summary: "${verifiedSummary}"
        
        Private Financial Data:
        - Name: ${person.name}
        - Primary Company / Industry: ${person.primaryCompany} / ${person.industry}
        - Estimated Wealth: $${person.wealthMillionsUSD}M USD
        - Country: ${person.country}
    `

    const enrichmentResponse = await callLanguageModel({
      modelName: settings.LLM_MODEL_UTILITY,
      systemPrompt: enrichmentPrompt,
      userContent: enrichmentUserContent,
      isJson: true,
    })

    const enrichmentValidation = enrichmentSchema.safeParse(enrichmentResponse)

    if (!enrichmentValidation.success) {
      logger.error(
        { err: enrichmentValidation.error.flatten(), raw_response: enrichmentResponse },
        'Enrichment response failed Zod validation.'
      )
      throw new Error('AI enrichment response failed validation.')
    }

    // DEFINITIVE FIX: Log the final generated background.
    logger.info(
      { generated_background: enrichmentValidation.data.summary },
      `Generated background for ${person.name}`
    )
    return { generated_background: enrichmentValidation.data.summary }
  } catch (error) {
    logger.error(
      { err: error },
      `Full AI enrichment process failed for ${person.name}. Using fallback text.`
    )
    return { generated_background: createFallbackText(person) }
  }
}

```

## 📄 scripts/seed/lib/event-chunker.js
*Lines: 126, Size: 4.18 KB*

```javascript
// apps/pipeline/scripts/seed/lib/event-chunker.js
import { callLanguageModel } from '../../../../../packages/ai-services/src/index.js'
import { settings } from '../../../../../packages/config/src/server.js'
// DEFINITIVE FIX: Import loggers from the shared utils package
import { logger, auditLogger } from '../../../../../packages/utils-server'
import { z } from 'zod'

const eventChunkSchema = z.object({
  events: z.array(
    z.object({
      date: z.string().describe('Estimated date of the event in YYYY-MM-DD format.'),
      description: z
        .string()
        .describe('A concise, one-sentence summary of the specific event.'),
      participants: z
        .array(z.string())
        .optional()
        .describe('List of key individuals or companies involved.'),
      type: z
        .string()
        .describe("The type of event (e.g., 'Sale', 'IPO', 'Wealth Profile')."),
    })
  ),
})

// --- REINFORCED PROMPT ---
const PROMPT = `You are a financial historian AI. Your task is to read a long biography of a wealthy individual and break it down into a timeline of distinct, significant wealth events.

**CRITICAL INSTRUCTIONS:**
1.  Read the entire background text provided.
2.  Identify specific, discrete events that impacted the person's wealth (e.g., company sales, major investments, IPOs, inheritance).
3.  For each event, extract the estimated date, a concise description, a list of key participants, and a simple event type string.
4.  If the text is a general profile without specific past events, you MUST create a single "Wealth Profile" event for the current year.
5.  Ignore non-financial events.

**OUTPUT FORMAT (MANDATORY):**
You MUST respond ONLY with a valid JSON object. This object MUST contain a single key called "events".
The value of "events" MUST be an ARRAY of event objects.

**EXAMPLE 1 (Multiple Events):**
{
  "events": [
    {
      "date": "1986-01-01",
      "description": "Faced legal issues regarding oil freight charges, but the case was later dropped.",
      "participants": ["John Fredriksen"],
      "type": "Legal Dispute"
    },
    {
      "date": "2007-01-01",
      "description": "Donated 50 million kroner to the Radium hospital for cancer research.",
      "participants": ["John Fredriksen"],
      "type": "Philanthropy"
    }
  ]
}

**EXAMPLE 2 (Single Event):**
{
  "events": [
    {
      "date": "2024-09-15",
      "description": "General wealth profile for a prominent figure in the Shipping industry.",
      "participants": ["John Fredriksen"],
      "type": "Wealth Profile"
    }
  ]
}

Your entire response must be ONLY the JSON object.`

const createFallbackEvent = (person) => {
  return [
    {
      date: `${person.year}-09-15`,
      description: `Wealth profile for ${person.name}, a prominent figure in the ${person.industry} sector with an estimated fortune of $${person.wealthMillionsUSD}M USD.`,
      participants: [person.name],
      type: 'Wealth Profile',
    },
  ]
}

export async function chunkHistoryIntoEvents(person) {
  logger.info(`  -> AI Event Chunker: Analyzing history for ${person.name}...`)
  try {
    auditLogger.info(
      { context: { background_text: person.background } },
      `Event Chunker Input for ${person.name}`
    )
    const response = await callLanguageModel({
      modelName: settings.LLM_MODEL_UTILITY,
      systemPrompt: PROMPT,
      userContent: person.background,
      isJson: true,
    })
    auditLogger.info(
      { context: { llm_response: response } },
      `Event Chunker Raw Output for ${person.name}`
    )

    const validation = eventChunkSchema.safeParse(response)
    if (!validation.success) {
      logger.error(
        { err: validation.error.flatten(), raw_response: response },
        'AI response failed Zod validation.'
      )
      return createFallbackEvent(person)
    }

    if (validation.data.events.length === 0) {
      return createFallbackEvent(person)
    }

    logger.info(
      `  -> AI Event Chunker: Identified ${validation.data.events.length} distinct event(s).`
    )
    return validation.data.events
  } catch (error) {
    logger.error(
      { err: error },
      `Event chunking failed for ${person.name}. Creating a single fallback event.`
    )
    return createFallbackEvent(person)
  }
}

```

## 📄 scripts/seed/lib/pipeline-injector.js
*Lines: 84, Size: 2.77 KB*

```javascript
// apps/pipeline/scripts/seed/lib/pipeline-injector.js
import { runAssessAndEnrich } from '../../../src/pipeline/3_assessAndEnrich.js'
import { runClusterAndSynthesize } from '../../../src/pipeline/4_clusterAndSynthesize.js'
import { judgeAndFilterOutput } from '../../../src/pipeline/submodules/commit/1_judgeOutput.js'
import { saveResultsToDb } from '../../../src/pipeline/submodules/commit/2_saveResults.js'
import {
  tokenTracker,
  apiCallTracker,
  logger,
} from '../../../../../packages/utils-server'
import { settings } from '../../../../../packages/config/src/server.js'

const FATAL_JUDGEMENT_QUALITIES = ['Irrelevant', 'Poor']

/**
 * Injects a synthetic article into the pipeline from Stage 3 onwards.
 * @param {object} syntheticArticle - The article object to process.
 * @returns {Promise<{savedEvents: Array, savedOpportunities: Array}>} The final saved data.
 */
export async function runInjectedPipeline(syntheticArticle) {
  tokenTracker.reset()
  apiCallTracker.reset()

  tokenTracker.initializeModels([
    settings.LLM_MODEL_HEADLINE_ASSESSMENT,
    settings.LLM_MODEL_ARTICLE_ASSESSMENT,
    settings.LLM_MODEL_SYNTHESIS,
    settings.LLM_MODEL_UTILITY,
  ])

  let payload = {
    articlesForPipeline: [syntheticArticle],
    runStats: {
      errors: [],
      synthesizedEventsForReport: [],
      enrichmentOutcomes: [],
      headlinesScraped: 0,
      scraperHealth: [],
      validatedHeadlines: 0,
      freshHeadlinesFound: 1,
      headlinesAssessed: 0,
      relevantHeadlines: 0,
      articlesEnriched: 0,
      relevantArticles: 0,
      eventsClustered: 0,
      eventsSynthesized: 0,
      judgeVerdict: null,
      eventsEmailed: 0,
      tokenUsage: {},
      apiCalls: {},
    },
  }

  logger.info('  -> Injecting into Stage 3: Assess & Enrich...')
  payload = (await runAssessAndEnrich(payload)).payload

  if (payload.enrichedArticles?.length > 0) {
    logger.info('  -> Injecting into Stage 4: Cluster & Synthesize...')
    payload = (await runClusterAndSynthesize(payload)).payload
  } else {
    logger.warn('  -> Skipping Stage 4: No articles were successfully enriched.')
  }

  logger.info('  -> Injecting into Stage 5 (Commit): Judging output...')
  const { finalEvents, finalOpportunities } = await judgeAndFilterOutput(
    payload,
    FATAL_JUDGEMENT_QUALITIES
  )

  logger.info('  -> Injecting into Stage 5 (Commit): Saving results to database...')
  const { savedEvents, savedOpportunities } = await saveResultsToDb(
    payload,
    finalEvents,
    finalOpportunities
  )

  // DEFINITIVE FIX: Convert the Mongoose documents to plain JSON before returning.
  // This ensures the calling script can access properties directly.
  return {
    savedEvents: JSON.parse(JSON.stringify(savedEvents)),
    savedOpportunities: JSON.parse(JSON.stringify(savedOpportunities)),
  }
}

```

## 📄 scripts/seed/lib/richlist-data-loader.js
*Lines: 89, Size: 2.82 KB*

```javascript
// apps/pipeline/scripts/seed/lib/richlist-data-loader.js
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'
import { Opportunity } from '../../../../../packages/models/src/index.js'
import { logger } from '../../../../../packages/utils-server'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const BASE_PATH = path.resolve(__dirname, '../../')

const cityToCountryMap = {
  Sveits: 'Switzerland',
  USA: 'United States',
  Kypros: 'Cyprus',
  Storbritannia: 'United Kingdom',
  Belgia: 'Belgium',
  Danmark: 'Denmark',
  Brasil: 'Brazil',
  Italia: 'Italy',
  Monaco: 'Monaco',
  Portugal: 'Portugal',
  Spania: 'Spain',
  Singapore: 'Singapore',
  Østerrike: 'Austria',
}

function getCountry(city) {
  return cityToCountryMap[city] || 'Norway'
}

function parseWealth(wealthStr) {
  if (!wealthStr || typeof wealthStr !== 'string') return 0
  const match = wealthStr.match(/([\d,]+)\s*mrd/)
  if (!match) return 0
  const cleaned = match[1].replace(/,/g, '.')
  const value = parseFloat(cleaned)
  return Math.round(value * 94)
}

export async function loadAndPrepareRichlist() {
  const jsonPath = path.join(BASE_PATH, 'seed/data/norway.json')
  const jsonData = JSON.parse(fs.readFileSync(jsonPath, 'utf8'))
  const allIndividuals = jsonData.individuals
  logger.info(
    `Loaded ${allIndividuals.length} total individuals from ${path.basename(jsonPath)}.`
  )

  const existingOppNames = (await Opportunity.find({}).select('reachOutTo').lean()).map(
    (o) => o.reachOutTo
  )
  const existingSet = new Set(existingOppNames)

  const preparedIndividuals = await Promise.all(
    allIndividuals.map(async (person) => {
      const background = person.scraped_data.background_information
      const isThinProfile = !background || background.trim().length < 50

      if (isThinProfile) {
        let reason = !background
          ? 'is null/undefined'
          : `is too short (${background.trim().length} chars)`
        logger.trace(
          { person: person.name, reason },
          `Identified as thin profile because background_information ${reason}.`
        )
      }

      const preparedPersonObject = {
        name: person.name,
        city: person.scraped_data.city,
        country: getCountry(person.scraped_data.city),
        industry: person.industry,
        wealthMillionsUSD: parseWealth(person.scraped_data.current_wealth),
        background: isThinProfile ? null : background,
        wealthSummary: person.scraped_data.wealth_summary,
        primaryCompany: person.scraped_data.roles?.[0]?.company || person.industry,
        year: jsonData.list_metadata.year,
        isExisting: existingSet.has(person.name),
        isThinProfile,
      }

      return preparedPersonObject
    })
  )

  return { allIndividuals: preparedIndividuals, rawIndividualData: allIndividuals }
}

```

## 📄 scripts/seed/lib/script-init.js
*Lines: 41, Size: 1.53 KB*

```javascript
// apps/pipeline/scripts/seed/lib/script-init.js
import { logger } from '@headlines/utils-shared'
import { configure as configureScraperLogic } from '@headlines/scraper-logic/config.js'
import * as appConfig from '@headlines/config'
import { refreshConfig, configStore } from '../../../src/config/dynamicConfig.js'
import { populateSettings, settings } from '@headlines/config' // CORRECTED IMPORT
import dbConnect from '@headlines/data-access/dbConnect/node'
import * as aiServices from '@headlines/ai-services'
import { Setting } from '@headlines/models'

let isInitialized = false

/**
 * Connects to DB, loads static and dynamic config, and configures shared packages.
 * This is the standard initialization routine for any standalone pipeline script.
 */
export async function initializeScriptEnv() {
  if (isInitialized) return

  await dbConnect()

  // Load dynamic settings from the database and populate the config
  const dbSettings = await Setting.find({}).lean()
  populateSettings(dbSettings)

  await refreshConfig()

  const utilityFunctions = {
    findAlternativeSources: aiServices.findAlternativeSources,
    findNewsApiArticlesForEvent: aiServices.findNewsApiArticlesForEvent,
    performGoogleSearch: aiServices.performGoogleSearch,
    fetchWikipediaSummary: aiServices.fetchWikipediaSummary,
  }

  // Inject logger and other configs into shared packages
  configureScraperLogic({ ...appConfig, configStore, utilityFunctions, logger, settings })

  isInitialized = true
  logger.info('✅ Script environment initialized successfully.')
}

```

## 📄 scripts/seed/lib/synthetic-article-builder.js
*Lines: 42, Size: 1.55 KB*

```javascript
// apps/pipeline/scripts/seed/lib/synthetic-article-builder.js
import mongoose from 'mongoose'

/**
 * Creates a synthetic article object from a prepared rich list individual and a specific event chunk.
 * @param {object} person - A prepared individual object from the data loader.
 * @param {object} eventChunk - An event chunk from the AI event chunker.
 * @returns {object} A synthetic article object.
 */
export function createSyntheticArticle(person, eventChunk) {
  const headline = `Event Profile: ${eventChunk.type} involving ${eventChunk.participants.join(', ')}`
  const content = `An analysis of a specific wealth event involving ${person.name}.
Event Type: ${eventChunk.type}
Event Date: ${eventChunk.date}
Event Description: ${eventChunk.description}

General Background Context:
${person.background}
${person.wealthSummary || ''}`

  const eventHash = new mongoose.Types.ObjectId().toString().slice(-6)
  const link = `https://richlist.ingestion/${person.name.toLowerCase().replace(/\s+/g, '-')}-${eventChunk.date}-${eventHash}`

  // Ensure 'country' is an array for model compatibility
  const countryArray = Array.isArray(person.country)
    ? person.country
    : [person.country].filter(Boolean)

  return {
    _id: new mongoose.Types.ObjectId(),
    headline,
    link,
    newspaper: `Kapital Rich List ${person.year}`,
    source: 'Richlist Ingestion',
    country: countryArray, // MODIFIED: Ensure country is an array
    createdAt: new Date(eventChunk.date),
    articleContent: { contents: [content] },
    relevance_headline: 100,
    status: 'scraped',
  }
}

```

## 📄 scripts/seed/lib/user-interact.js
*Lines: 44, Size: 1.23 KB*

```javascript
// apps/pipeline/scripts/seed/lib/user-interact.js
import readline from 'readline'

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

/**
 * Prompts the user for a y/n/a response.
 * @param {string} query - The question to ask the user.
 * @returns {Promise<string>} - A promise that resolves to 'y', 'n', or 'a'.
 */
export function promptUser(query) {
  return new Promise((resolve) => {
    const ask = () => {
      // Use a small timeout to allow any buffered logger output to flush first.
      setTimeout(() => {
        // Clear the current line and move cursor to the beginning before asking.
        readline.clearLine(process.stdout, 0)
        readline.cursorTo(process.stdout, 0)

        rl.question(query, (answer) => {
          const response = answer.trim().toLowerCase()
          if (['y', 'n', 'a'].includes(response)) {
            resolve(response)
          } else {
            console.log('Invalid input. Please enter "y", "n", or "a".')
            ask()
          }
        })
      }, 100) // 100ms delay is usually sufficient.
    }
    ask()
  })
}

/**
 * Closes the readline interface. Should be called when the script is finished.
 */
export function closeReader() {
  rl.close()
}

```

## 📄 scripts/seed/seed-admin-user.js
*Lines: 77, Size: 2.5 KB*

```javascript
// apps/pipeline/scripts/seed/seed-admin-user.js
import { logger } from '@headlines/utils-shared'
import {
  createSubscriberWithPassword,
  updateSubscriber,
  updateSubscriberPassword,
  getAllCountries,
  findSubscribers,
} from '@headlines/data-access'
import { initializeScriptEnv } from './lib/script-init.js'

const ADMIN_EMAIL = process.env.ADMIN_EMAIL
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD
const ADMIN_FIRST_NAME = process.env.ADMIN_FIRST_NAME || 'Admin'

async function seedAdminUser() {
  if (!ADMIN_EMAIL || !ADMIN_PASSWORD) {
    logger.fatal('❌ ADMIN_EMAIL and ADMIN_PASSWORD must be set in your .env file.')
    return
  }

  await initializeScriptEnv()
  logger.info(`🚀 Seeding Admin User: ${ADMIN_EMAIL}...`)
  try {
    const countriesResult = await getAllCountries()
    if (!countriesResult.success) throw new Error('Could not fetch countries.')
    const countrySubscriptions = countriesResult.data
      .filter((c) => c.status === 'active')
      .map((c) => ({ name: c.name, active: true }))

    const findResult = await findSubscribers({ filter: { email: ADMIN_EMAIL } })
    const existingUser =
      findResult.success && findResult.data.length > 0 ? findResult.data[0] : null

    if (existingUser) {
      logger.warn(
        'Admin user already exists. Overwriting password and ensuring settings are correct.'
      )
      const passwordResult = await updateSubscriberPassword(
        existingUser._id,
        ADMIN_PASSWORD
      )
      if (!passwordResult.success) throw new Error(passwordResult.error)

      // Update other fields separately
      await updateSubscriber(existingUser._id, {
        firstName: ADMIN_FIRST_NAME,
        role: 'admin',
        isActive: true,
        countries: countrySubscriptions,
        subscriptionTier: 'enterprise',
        isLifetimeFree: true,
      })

      logger.info(`✅ Admin user password has been reset and settings updated.`)
    } else {
      const adminData = {
        email: ADMIN_EMAIL,
        password: ADMIN_PASSWORD,
        firstName: ADMIN_FIRST_NAME,
        role: 'admin',
        isActive: true,
        countries: countrySubscriptions,
        subscriptionTier: 'enterprise',
        isLifetimeFree: true,
      }
      const createResult = await createSubscriberWithPassword(adminData)
      if (!createResult.success) throw new Error(createResult.error)
      logger.info(`✅ Admin user created successfully.`)
    }
  } catch (error) {
    logger.fatal({ err: error }, '❌ Admin user seeding failed.')
  }
}

seedAdminUser()

```

## 📄 scripts/seed/seed-countries.js
*Lines: 51, Size: 1.54 KB*

```javascript
// apps/pipeline/scripts/seed/seed-countries.js
import { logger } from '@headlines/utils-shared'
import { initializeScriptEnv } from './lib/script-init.js'
import { updateCountry } from '@headlines/data-access'
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

function loadCountriesFromFile() {
  const filePath = path.resolve(
    __dirname,
    '../../../../packages/utils-shared/src/data/countries.json'
  )
  const fileContent = fs.readFileSync(filePath, 'utf8')
  const countryData = JSON.parse(fileContent)
  return Object.entries(countryData).map(([name, isoCode]) => ({ name, isoCode }))
}

async function seedCountries() {
  await initializeScriptEnv()
  logger.info('🚀 Seeding Countries from canonical JSON file...')
  const countriesToSeed = loadCountriesFromFile()
  try {
    const promises = countriesToSeed.map((country) =>
      updateCountry(
        { name: country.name },
        {
          $set: { isoCode: country.isoCode.substring(0, 2) },
          $setOnInsert: { name: country.name, status: 'active' },
        },
        { upsert: true }
      )
    )

    // Note: A true bulk upsert function would be more efficient.
    // This is a simple implementation for seeding.
    await Promise.all(promises)

    logger.info(
      `✅ Country seeding complete. Synced ${countriesToSeed.length} countries.`
    )
  } catch (error) {
    logger.fatal({ err: error }, '❌ Country seeding failed.')
  }
}

seedCountries()

```

## 📄 scripts/seed/seed-settings.js
*Lines: 131, Size: 3.69 KB*

```javascript
// apps/pipeline/scripts/seed/seed-settings.js
import { logger } from '@headlines/utils-shared'
import { initializeScriptEnv } from './lib/script-init.js'
import { updateSettings } from '@headlines/data-access'

const SETTINGS = [
  {
    key: 'HEADLINES_RELEVANCE_THRESHOLD',
    value: 25,
    description: 'Minimum score (0-100) for a headline to be considered for enrichment.',
    type: 'number',
  },
  {
    key: 'ARTICLES_RELEVANCE_THRESHOLD',
    value: 45,
    description:
      'Minimum score (0-100) for an enriched article to be considered a valid event signal.',
    type: 'number',
  },
  {
    key: 'EVENT_RELEVANCE_THRESHOLD',
    value: 55,
    description:
      'Minimum score for a synthesized event to be saved and sent in notifications.',
    type: 'number',
  },
  {
    key: 'MINIMUM_EVENT_AMOUNT_USD_MILLIONS',
    value: 20,
    description: 'Events with a detected financial amount below this will be dropped.',
    type: 'number',
  },
  {
    key: 'HIGH_SIGNAL_HEADLINE_THRESHOLD',
    value: 90,
    description:
      'Headlines scoring above this are considered high-signal and trigger special processing if content scraping fails.',
    type: 'number',
  },
  {
    key: 'AGENT_DISAGREEMENT_THRESHOLD',
    value: 50,
    description:
      'If headline score and article score differ by more than this, it is flagged as a disagreement.',
    type: 'number',
  },
  {
    key: 'SINGLETON_RELEVANCE_THRESHOLD',
    value: 85,
    description:
      'An article that does not cluster with others must meet this score to be processed as a standalone event.',
    type: 'number',
  },
  {
    key: 'HIGH_VALUE_DEAL_USD_MM',
    value: 50,
    description:
      'AI Prompt: The dollar amount (in millions) that defines a "high value" M&A deal.',
    type: 'number',
  },
  {
    key: 'SIGNIFICANT_PRIVATE_BENEFICIARY_USD_MM',
    value: 30,
    description:
      'AI Prompt: The wealth threshold (in millions) for extracting an individual as a key contact.',
    type: 'number',
  },
  {
    key: 'WATCHLIST_SCORE_BOOST',
    value: 35,
    description:
      "The number of points to add to a headline's relevance score if it matches a watchlist entity.",
    type: 'number',
  },
  {
    key: 'SUGGESTION_GENERATION_THRESHOLD',
    value: 80,
    description:
      'The minimum event score required to trigger the AI to look for new watchlist suggestions.',
    type: 'number',
  },
  {
    key: 'MIN_ARTICLE_CHARS',
    value: 100,
    description:
      'The minimum number of characters required for scraped article content to be considered valid.',
    type: 'number',
  },
  {
    key: 'LLM_MODEL_HEADLINE_ASSESSMENT',
    value: 'gpt-5-mini',
    description: 'LLM model used for the initial, high-volume headline assessment stage.',
    type: 'string',
  },
  {
    key: 'LLM_MODEL_ARTICLE_ASSESSMENT',
    value: 'gpt-5-mini',
    description: 'LLM model used for full article analysis and enrichment.',
    type: 'string',
  },
  {
    key: 'LLM_MODEL_SYNTHESIS',
    value: 'gpt-5-mini',
    description:
      'LLM model used for clustering, synthesis, and other high-level reasoning tasks.',
    type: 'string',
  },
  {
    key: 'LLM_MODEL_UTILITY',
    value: 'gpt-5-nano',
    description:
      'A smaller, faster model for simple, utility-focused tasks like classification or extraction.',
    type: 'string',
  },
]

async function seedSettings() {
  await initializeScriptEnv()
  logger.info('🚀 Syncing Pipeline Settings from config file...')
  try {
    const result = await updateSettings(SETTINGS)
    if (!result.success) throw new Error(result.error)

    logger.info(`✅ Settings sync complete. ${result.message}`)
  } catch (error) {
    logger.fatal({ err: error }, '❌ Settings sync failed.')
  }
}

seedSettings()

```

## 📄 scripts/seed/seed-test-user.js
*Lines: 75, Size: 2.32 KB*

```javascript
// apps/pipeline/scripts/seed/seed-test-user.js
import { initializeScriptEnv } from './lib/script-init.js'
import { logger, sendErrorAlert } from '@headlines/utils-server'
import {
  upsertSubscriber,
  findSubscribers,
  createSubscriberWithPassword,
  updateSubscriberPassword,
} from '@headlines/data-access'

const TEST_USER_EMAIL = 'casagerardon@gmail.com'
const TEST_USER_PASSWORD = 'Stanley'

async function createTestUser() {
  try {
    await initializeScriptEnv()
    logger.info(`🚀 Seeding configured test user: ${TEST_USER_EMAIL}...`)

    const countriesForSubscription = [
      'Norway',
      'United States',
      'Italy',
      'Denmark',
      'Sweden',
      'Global',
      'Scandinavia',
    ]

    const findResult = await findSubscribers({ filter: { email: TEST_USER_EMAIL } })
    const existingUser =
      findResult.success && findResult.data.length > 0 ? findResult.data[0] : null

    if (existingUser) {
      logger.warn(
        '🔄 Test user already exists. Ensuring subscriptions and active status are correct...'
      )
      await updateSubscriberPassword(existingUser._id, TEST_USER_PASSWORD)
      const updateResult = await upsertSubscriber(
        { email: TEST_USER_EMAIL },
        {
          isActive: true,
          emailNotificationsEnabled: true,
          countries: countriesForSubscription.map((name) => ({ name, active: true })),
        }
      )
      if (!updateResult.success) throw new Error(updateResult.error)

      logger.info(
        `✅ User '${TEST_USER_EMAIL}' updated and is subscribed to all necessary countries.`
      )
    } else {
      const newUser = {
        email: TEST_USER_EMAIL,
        password: TEST_USER_PASSWORD,
        firstName: 'Test',
        lastName: 'Recipient',
        isActive: true,
        emailNotificationsEnabled: true,
        countries: countriesForSubscription.map((name) => ({ name, active: true })),
      }
      const createResult = await createSubscriberWithPassword(newUser)
      if (!createResult.success) throw new Error(createResult.error)

      logger.info(
        `✅ New test user '${TEST_USER_EMAIL}' created and subscribed to necessary countries.`
      )
    }
  } catch (error) {
    sendErrorAlert(error, { origin: 'SEED_TEST_USER_SCRIPT' })
    logger.fatal({ err: error }, '❌ Failed to create or update test user.')
  }
}

createTestUser()

```

## 📄 scripts/seed/sync-test-user-subscriptions.js
*Lines: 50, Size: 1.6 KB*

```javascript
// apps/pipeline/scripts/seed/sync-test-user-subscriptions.js
import { initializeScriptEnv } from './lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import {
  findSubscribers,
  getAllCountries,
  updateSubscriber,
} from '@headlines/data-access'

const TEST_USER_EMAIL = 'casagerardon@gmail.com'

async function syncUserSubscriptions() {
  await initializeScriptEnv()
  logger.info(`🚀 Syncing subscriptions for test user: ${TEST_USER_EMAIL}...`)

  try {
    const userResult = await findSubscribers({ filter: { email: TEST_USER_EMAIL } })
    if (!userResult.success || userResult.data.length === 0) {
      logger.error(
        `❌ User with email '${TEST_USER_EMAIL}' not found. Please run the 'db:seed:test-user' script first.`
      )
      return
    }
    const user = userResult.data[0]

    const countriesResult = await getAllCountries()
    if (!countriesResult.success) throw new Error(countriesResult.error)
    const activeCountries = countriesResult.data.filter((c) => c.status === 'active')

    if (activeCountries.length === 0) {
      logger.warn('⚠️ No active countries found in the database.')
      return
    }

    const updateResult = await updateSubscriber(user._id, {
      countries: activeCountries.map((c) => ({ name: c.name, active: true })),
    })

    if (!updateResult.success) throw new Error(updateResult.error)

    logger.info(
      `✅ User '${TEST_USER_EMAIL}' is now subscribed to all ${activeCountries.length} active countries.`
    )
  } catch (error) {
    logger.error({ err: error }, '❌ Failed to sync user subscriptions.')
  }
}

syncUserSubscriptions()

```

## 📄 scripts/sources/analyze-sources.js
*Lines: 105, Size: 3.51 KB*

```javascript
// scripts/sources/analyze-sources.js (version 1.0)
import 'dotenv/config'
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { logger } from '@headlines/utils-shared'
import { connectDatabase, disconnectDatabase } from '../../src/database.js'
import { scrapeSiteForHeadlines } from '../../src/modules/scraper/headlineScraper.js'
import { suggestNewSelector } from '../../src/modules/ai/agents/selectorRepairAgent.js'
import Source from '../../models/Source.js'

logger.level = 'warn' // Keep console clean for this focused tool

async function main() {
  const argv = yargs(hideBin(process.argv))
    .usage('Usage: $0 --source <SourceName> [--fix]')
    .option('source', {
      alias: 's',
      type: 'string',
      description: 'The name of the source to analyze and fix.',
      demandOption: true,
    })
    .option('fix', {
      alias: 'f',
      type: 'boolean',
      description: 'Attempt to automatically verify and apply the AI-suggested fix.',
      default: false,
    }).argv

  console.log(`\n🔎 Analyzing source: "${argv.source}"...`)

  try {
    await connectDatabase()
    const source = await Source.findOne({ name: new RegExp(`^${argv.source}$`, 'i') })
    if (!source) {
      console.error(`❌ Source "${argv.source}" not found.`)
      return
    }

    console.log(`- Current headline selector: "${source.headlineSelector}"`)
    const initialScrape = await scrapeSiteForHeadlines(source)

    if (initialScrape.success && initialScrape.resultCount > 0) {
      console.log(
        `✅ This source appears to be healthy. Found ${initialScrape.resultCount} headlines.`
      )
      return
    }

    console.log(`\n⚠️ Source is failing. Reason: ${initialScrape.error}`)
    if (!initialScrape.debugHtml) {
      console.error('❌ Cannot proceed with analysis: Failed to retrieve page HTML.')
      return
    }

    console.log('🤖 Asking AI agent to suggest a new selector...')
    const suggestion = await suggestNewSelector(
      source.sectionUrl,
      source.headlineSelector,
      initialScrape.debugHtml
    )

    if (!suggestion || !suggestion.suggested_selector) {
      console.error('❌ AI agent failed to provide a suggestion.')
      return
    }

    console.log(`\n💡 AI Suggestion:`)
    console.log(`   - New Selector: "${suggestion.suggested_selector}"`)
    console.log(`   - Reasoning: "${suggestion.reasoning}"`)

    if (argv.fix) {
      console.log('\n🔧 --fix flag enabled. Verifying and applying the fix...')
      const tempSource = {
        ...source.toObject(),
        headlineSelector: suggestion.suggested_selector,
      }
      const verificationScrape = await scrapeSiteForHeadlines(tempSource)

      if (verificationScrape.success && verificationScrape.resultCount > 0) {
        console.log(
          `   - ✅ Verification successful! Found ${verificationScrape.resultCount} headlines with the new selector.`
        )
        source.headlineSelector = suggestion.suggested_selector
        await source.save()
        console.log('   - 💾 New selector has been saved to the database.')
      } else {
        console.log(
          `   - ❌ Verification failed. The suggested selector did not return any headlines.`
        )
        console.log(`   - Reason: ${verificationScrape.error}`)
      }
    } else {
      console.log(
        '\nRun with the --fix flag to automatically apply and save the new selector.'
      )
    }
  } catch (error) {
    console.error(`💥 A critical error occurred: ${error.message}`)
  } finally {
    await disconnectDatabase()
  }
}

main()

```

## 📄 scripts/sources/browse.js
*Lines: 148, Size: 4.39 KB*

```javascript
// apps/pipeline/scripts/sources/browse.js (version 1.0)
/**
 * @command sources:browse
 * @group Sources
 * @description Interactively browse a website to find sections and selectors. Usage: --url <URL>
 */
import readline from 'readline'
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import * as cheerio from 'cheerio'
import { fetchPageWithPlaywright } from '@headlines/scraper-logic/src/browser.js'
import { heuristicallyFindSelectors } from '@headlines/scraper-logic/src/scraper/selectorOptimizer.js'
import { sectionClassifierAgent } from '@headlines/scraper-logic/src/ai/index.js'
import { logger } from '../../../../packages/utils-server'
undefined

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

const color = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  cyan: '\x1b[36m',
  yellow: '\x1b[33m',
  magenta: '\x1b[35m',
  gray: '\x1b[90m',
}

let currentUrl = ''
let currentLinks = []

async function listLinks(url) {
  logger.info(`Crawling ${url}...`)
  const html = await fetchPageWithPlaywright(url, 'SourceBrowser')
  if (!html) {
    logger.error('Failed to fetch page.')
    return
  }
  const $ = cheerio.load(html)
  const baseUrlObj = new URL(url)
  const linksToClassify = []
  $('a').each((_, el) => {
    const $el = $(el)
    const href = $el.attr('href')
    const text = $el.text().trim().replace(/\s+/g, ' ')
    if (href && text && !href.startsWith('#') && !href.startsWith('mailto:')) {
      try {
        const fullUrl = new URL(href, baseUrlObj.origin).href
        linksToClassify.push({ text, href: fullUrl })
      } catch (e) {
        /* ignore */
      }
    }
  })

  const uniqueLinks = [
    ...new Map(linksToClassify.map((item) => [item.href, item])).values(),
  ]
  logger.info(`Found ${uniqueLinks.length} links. Classifying with AI...`)
  const classifications = await sectionClassifierAgent(
    uniqueLinks.map((l) => ({ text: l.text, href: l.href }))
  )
  if (!classifications) {
    logger.error('AI classification failed.')
    currentLinks = []
    return
  }

  currentLinks = uniqueLinks.map((link, i) => ({
    ...link,
    type: classifications[i].classification,
  }))

  currentLinks.forEach((link, i) => {
    let typeColor = color.gray
    if (link.type === 'news_section') typeColor = color.yellow
    if (link.type === 'article_headline') typeColor = color.cyan
    console.log(
      `[${i.toString().padStart(2)}] ${typeColor}[${link.type.padEnd(16)}]${color.reset} ${link.text.substring(0, 80)}`
    )
    console.log(`    ${color.gray}${link.href}${color.reset}`)
  })
}

async function handleCommand(command) {
  const parts = command.trim().split(' ')
  const cmd = parts[0].toLowerCase()
  const arg = parts.slice(1).join(' ')

  switch (cmd) {
    case 'ls':
      await listLinks(currentUrl)
      break
    case 'cd':
      const newUrl =
        !isNaN(arg) && currentLinks[parseInt(arg, 10)]
          ? currentLinks[parseInt(arg, 10)].href
          : arg
      if (newUrl) {
        currentUrl = newUrl
        console.log(`Changed directory to: ${currentUrl}`)
        await listLinks(currentUrl)
      } else {
        console.log("Invalid argument. Use 'cd <url>' or 'cd <index>'.")
      }
      break
    case 'optimize':
      logger.info(`Optimizing selectors for ${currentUrl}...`)
      const html = await fetchPageWithPlaywright(currentUrl, 'SourceBrowser')
      const suggestions = heuristicallyFindSelectors(html)
      suggestions.forEach((cluster, i) => {
        console.log(`--- Suggestion #${i + 1} (Score: ${cluster.score}) ---`)
        console.log(`Selector: ${color.green}${cluster.selector}${color.reset}`)
        console.log(`Samples:`)
        cluster.samples.slice(0, 3).forEach((sample) => console.log(`  - "${sample}"`))
      })
      break
    case 'help':
      console.log('Commands: ls, cd <url|index>, optimize, exit, help')
      break
    case 'exit':
      rl.close()
      return
    default:
      console.log("Unknown command. Type 'help'.")
  }
  prompt()
}

function prompt() {
  const promptPath = new URL(currentUrl).pathname
  rl.question(`${color.magenta}${promptPath}>${color.reset} `, handleCommand)
}

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('url', { type: 'string', demandOption: true })
    .help().argv
  currentUrl = argv.url
  console.log("Welcome to the Interactive Source Browser. Type 'help' for commands.")
  await listLinks(currentUrl)
  prompt()
}

main()

```

## 📄 scripts/sources/debug-content.js
*Lines: 106, Size: 3.92 KB*

```javascript
// apps/pipeline/scripts/sources/debug-content.js
/**
 * @command sources:debug-content
 * @group Sources
 * @description Scrapes the first article from a source and shows extracted text for each selector. Usage: --source <SourceName>
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { getAllSources } from '@headlines/data-access'
import { scrapeSiteForHeadlines } from '@headlines/scraper-logic/scraper/index.js'
import { fetchPageWithPlaywright } from '@headlines/scraper-logic/browser.js'
import { browserManager } from '@headlines/scraper-logic/browserManager.js'
import * as cheerio from 'cheerio'
import colors from 'ansi-colors'

async function debugContentSelectors() {
  const argv = yargs(hideBin(process.argv))
    .option('source', {
      alias: 's',
      type: 'string',
      description: 'The name of the source to debug.',
      demandOption: true,
    })
    .help().argv

  try {
    await initializeScriptEnv()
    await browserManager.initialize()
    logger.info(`🚀 Debugging content selectors for source: "${argv.source}"`)

    const sourcesResult = await getAllSources({
      filter: { name: new RegExp(`^${argv.source}$`, 'i') },
    })
    if (!sourcesResult.success || sourcesResult.data.length === 0) {
      throw new Error(`Source "${argv.source}" not found.`)
    }
    const source = sourcesResult.data[0]

    logger.info('Step 1: Finding a recent article URL...')
    const headlineResult = await scrapeSiteForHeadlines(source)
    if (!headlineResult.success || headlineResult.resultCount === 0) {
      throw new Error(
        `Could not find any headlines for source "${source.name}" to test content scraping.`
      )
    }
    const targetArticle = headlineResult.articles[0]
    logger.info(`Found article to test: "${targetArticle.headline}"`)
    logger.info(`URL: ${targetArticle.link}`)

    logger.info('\nStep 2: Fetching full article page HTML...')
    const html = await fetchPageWithPlaywright(targetArticle.link, 'ContentDebugger')
    if (!html) {
      throw new Error('Failed to fetch article HTML with Playwright.')
    }
    logger.info(`Successfully fetched ${html.length} bytes of HTML.`)

    const $ = cheerio.load(html)
    const selectors = Array.isArray(source.articleSelector)
      ? source.articleSelector
      : [source.articleSelector].filter(Boolean)

    if (selectors.length === 0) {
      logger.warn('This source has no `articleSelector` defined. Nothing to debug.')
      return
    }

    console.log(colors.bold.cyan('\n--- Step 3: Testing Each Selector Individually ---'))
    let combinedContent = []

    selectors.forEach((selector, index) => {
      console.log(
        `\nTesting selector ${index + 1}/${selectors.length}: ${colors.yellow(selector)}`
      )
      const elements = $(selector)
      if (elements.length === 0) {
        console.log(colors.red('  -> Found 0 matching elements.'))
      } else {
        console.log(colors.green(`  -> Found ${elements.length} matching element(s).`))
        elements.each((_, el) => {
          const text = $(el).text().trim().replace(/\s+/g, ' ')
          if (text) {
            combinedContent.push(text)
            console.log(colors.gray(`    - Snippet: "${text.substring(0, 150)}..."`))
          }
        })
      }
    })

    const finalText = [...new Set(combinedContent)].join('\n\n')

    console.log(colors.bold.cyan('\n--- Final Combined & Cleaned Content ---'))
    console.log(`Total Length: ${finalText.length} characters`)
    console.log('------------------------------------------')
    console.log(finalText.substring(0, 2000) + (finalText.length > 2000 ? '\n...' : ''))
    console.log('------------------------------------------')
  } catch (error) {
    logger.fatal({ err: error }, 'A critical error occurred during the script.')
  } finally {
    await browserManager.close()
  }
}

debugContentSelectors()

```

## 📄 scripts/sources/discover.js
*Lines: 635, Size: 18.77 KB*

```javascript
// apps/pipeline/scripts/sources/discover.js
/**
 * @command sources:discover
 * @group Sources
 * @description Crawl a domain to find new news sections using AI. Flags: --url <BaseURL>
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import * as cheerio from 'cheerio'
import { writeFile } from 'fs/promises'
import { join } from 'path'
import { fetchPageWithPlaywright } from '@headlines/scraper-logic/browser.js'
import { heuristicallyFindSelectors } from '@headlines/scraper-logic/scraper/selectorOptimizer.js'
import { sectionClassifierAgent } from '@headlines/scraper-logic/ai/index.js'
import { logger, sendErrorAlert } from '@headlines/utils-server'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import pLimit from 'p-limit'

const CONCURRENCY = 3
const MIN_ARTICLES_FOR_VERIFICATION = 3
const MAX_PAGES_TO_TEST = 3

/**
 * Enhanced selector discovery that finds headlines, links, containers, and metadata
 */
function findCompleteSelectors(html) {
  const $ = cheerio.load(html)
  const results = []

  // Find all links that look like article links
  const articleLinks = []
  $('a[href]').each((_, el) => {
    const $el = $(el)
    const href = $el.attr('href')
    const text = $el.text().trim().replace(/\s+/g, ' ')

    if (!href || href.startsWith('#') || href.startsWith('mailto:') || !text) return

    // Check if this looks like an article link (has substantial text)
    if (text.length > 20 && text.length < 300) {
      articleLinks.push({
        element: el,
        $el,
        href,
        text,
        parent: $el.parent(),
      })
    }
  })

  if (articleLinks.length < MIN_ARTICLES_FOR_VERIFICATION) {
    return []
  }

  // Group by common container patterns
  const containerMap = new Map()

  articleLinks.forEach((link) => {
    let $container = link.$el.closest(
      'article, .article, [class*="card"], [class*="item"], [class*="post"], li'
    )

    if ($container.length === 0) {
      $container = link.$el.parent()
    }

    const containerSelector = generateSelector($container, $)

    if (!containerMap.has(containerSelector)) {
      containerMap.set(containerSelector, [])
    }
    containerMap.get(containerSelector).push({ ...link, $container })
  })

  // Analyze each container pattern
  for (const [containerSelector, items] of containerMap.entries()) {
    if (items.length < MIN_ARTICLES_FOR_VERIFICATION) continue

    const firstContainer = items[0].$container

    // Find common selectors within this container type
    const headlineSelector = findBestSelectorInContainer(
      firstContainer,
      items,
      $,
      'headline'
    )
    const linkSelector = findBestSelectorInContainer(firstContainer, items, $, 'link')

    // Look for metadata patterns
    const metadataSelectors = findMetadataSelectors(firstContainer, $)

    // Extract samples
    const samples = items.slice(0, 5).map((item) => ({
      headline: item.text,
      url: item.href,
      author: extractText(item.$container, metadataSelectors.author, $),
      date: extractText(item.$container, metadataSelectors.date, $),
      description: extractText(item.$container, metadataSelectors.description, $),
      image: extractAttribute(item.$container, metadataSelectors.image, 'src', $),
    }))

    // Calculate confidence score
    const score = calculateConfidenceScore(items, samples)

    results.push({
      containerSelector,
      selectors: {
        headline: headlineSelector,
        link: linkSelector,
        ...metadataSelectors,
      },
      samples,
      score,
      articleCount: items.length,
    })
  }

  return results.sort((a, b) => b.score - a.score)
}

/**
 * Generate a CSS selector for an element
 */
function generateSelector($el, $) {
  if ($el.length === 0) return null

  const tagName = $el.prop('tagName')?.toLowerCase()
  if (!tagName) return null

  // Try ID first
  const id = $el.attr('id')
  if (id && $(tagName + '#' + id).length === 1) {
    return `${tagName}#${id}`
  }

  // Try class combinations
  const classes =
    $el
      .attr('class')
      ?.split(/\s+/)
      .filter((c) => c) || []
  if (classes.length > 0) {
    const classSelector = `${tagName}.${classes.slice(0, 2).join('.')}`
    return classSelector
  }

  return tagName
}

/**
 * Find the best selector for headlines or links within a container
 */
function findBestSelectorInContainer($container, items, $, type) {
  const selectors = new Map()

  items.forEach((item) => {
    let $target = type === 'headline' ? item.$el : item.$el

    if (type === 'headline') {
      // Try to find a more specific headline element
      const $heading = item.$el.find('h1, h2, h3, h4').first()
      if ($heading.length > 0) {
        $target = $heading
      }
    }

    const localSelector = generateLocalSelector($target, $container, $)
    if (localSelector) {
      selectors.set(localSelector, (selectors.get(localSelector) || 0) + 1)
    }
  })

  // Return the most common selector
  let bestSelector = null
  let maxCount = 0

  for (const [selector, count] of selectors.entries()) {
    if (count > maxCount) {
      maxCount = count
      bestSelector = selector
    }
  }

  return bestSelector
}

/**
 * Generate a selector relative to a container
 */
function generateLocalSelector($el, $container, $) {
  const tagName = $el.prop('tagName')?.toLowerCase()
  const classes =
    $el
      .attr('class')
      ?.split(/\s+/)
      .filter((c) => c) || []

  if (classes.length > 0) {
    return `${tagName}.${classes[0]}`
  }

  // Try finding by tag hierarchy
  const $parent = $el.parent()
  if ($parent[0] !== $container[0]) {
    const parentTag = $parent.prop('tagName')?.toLowerCase()
    return `${parentTag} ${tagName}`
  }

  return tagName
}

/**
 * Find common metadata selectors
 */
function findMetadataSelectors($container, $) {
  const selectors = {}

  // Look for author
  const $author = $container
    .find('[class*="author"], [class*="byline"], [rel="author"]')
    .first()
  if ($author.length > 0) {
    selectors.author = generateLocalSelector($author, $container, $)
  }

  // Look for date/time
  const $date = $container.find('time, [class*="date"], [class*="published"]').first()
  if ($date.length > 0) {
    selectors.date = generateLocalSelector($date, $container, $)
  }

  // Look for description/excerpt
  const $desc = $container
    .find('[class*="excerpt"], [class*="description"], [class*="summary"], p')
    .first()
  if ($desc.length > 0 && $desc.text().trim().length > 30) {
    selectors.description = generateLocalSelector($desc, $container, $)
  }

  // Look for image
  const $img = $container.find('img[src]').first()
  if ($img.length > 0) {
    selectors.image = generateLocalSelector($img, $container, $)
  }

  return selectors
}

/**
 * Extract text from a selector within a container
 */
function extractText($container, selector, $) {
  if (!selector) return null
  const $el = $container.find(selector).first()
  return $el.length > 0 ? $el.text().trim() : null
}

/**
 * Extract attribute from a selector within a container
 */
function extractAttribute($container, selector, attr, $) {
  if (!selector) return null
  const $el = $container.find(selector).first()
  return $el.length > 0 ? $el.attr(attr) : null
}

/**
 * Calculate confidence score based on pattern consistency
 */
function calculateConfidenceScore(items, samples) {
  let score = Math.min(items.length / 10, 1) * 50 // Up to 50 points for quantity

  // Check sample quality
  const validSamples = samples.filter(
    (s) => s.headline && s.url && s.headline.length > 20
  )
  score += (validSamples.length / samples.length) * 30 // Up to 30 points for quality

  // Bonus for metadata
  const hasAuthor = samples.some((s) => s.author)
  const hasDate = samples.some((s) => s.date)
  const hasDescription = samples.some((s) => s.description)
  const hasImage = samples.some((s) => s.image)

  score +=
    (hasAuthor ? 5 : 0) +
    (hasDate ? 5 : 0) +
    (hasDescription ? 5 : 0) +
    (hasImage ? 5 : 0)

  return Math.round(score)
}

/**
 * Detect if a page is behind a paywall
 */
function detectPaywall(html, url) {
  const $ = cheerio.load(html)
  const bodyText = $('body').text().toLowerCase()

  const paywallIndicators = [
    'subscribe to continue',
    'subscription required',
    'become a member',
    'paywall',
    'premium content',
    'subscribers only',
    'sign in to read',
    'register to continue',
  ]

  const hasPaywallIndicator = paywallIndicators.some((indicator) =>
    bodyText.includes(indicator)
  )

  const hasPaywallClass = $('[class*="paywall"], [id*="paywall"]').length > 0

  return hasPaywallIndicator || hasPaywallClass
}

/**
 * Test selectors across multiple pages
 */
async function verifySelectorsAcrossPages(
  baseUrl,
  selectorPattern,
  maxPages = MAX_PAGES_TO_TEST
) {
  const results = []

  for (let i = 1; i <= maxPages; i++) {
    const testUrl =
      i === 1 ? baseUrl : `${baseUrl}${baseUrl.includes('?') ? '&' : '?'}page=${i}`

    try {
      logger.info(`    Testing page ${i}: ${testUrl}`)
      const html = await fetchPageWithPlaywright(testUrl, 'SelectorVerifier')

      if (!html) {
        logger.warn(`    Failed to fetch page ${i}`)
        break
      }

      if (detectPaywall(html, testUrl)) {
        logger.warn(`    ⚠️  Page ${i} appears to be paywalled - skipping`)
        results.push({ page: i, paywalled: true, articleCount: 0 })
        continue
      }

      const selectors = findCompleteSelectors(html)

      if (selectors.length > 0) {
        results.push({
          page: i,
          paywalled: false,
          articleCount: selectors[0].articleCount,
          score: selectors[0].score,
          samples: selectors[0].samples.slice(0, 2),
        })
      } else {
        results.push({ page: i, paywalled: false, articleCount: 0 })
      }

      // If no articles found on this page, stop testing
      if (selectors.length === 0 || selectors[0].articleCount === 0) {
        break
      }
    } catch (error) {
      logger.error(`    Error testing page ${i}: ${error.message}`)
      break
    }
  }

  return results
}

/**
 * Generate a source configuration file
 */
function generateSourceConfig(baseUrl, section, multiPageResults) {
  const urlObj = new URL(baseUrl)
  const domain = urlObj.hostname.replace('www.', '')
  const sourceName = domain.split('.')[0]

  const avgScore =
    multiPageResults.reduce((sum, r) => sum + (r.score || 0), 0) / multiPageResults.length
  const totalArticles = multiPageResults.reduce((sum, r) => sum + r.articleCount, 0)
  const hasPaywall = multiPageResults.some((r) => r.paywalled)

  return {
    name: `${sourceName}_${section.title.toLowerCase().replace(/\s+/g, '_')}`,
    displayName: `${sourceName.charAt(0).toUpperCase() + sourceName.slice(1)} - ${section.title}`,
    url: section.url,
    enabled: avgScore > 70 && !hasPaywall,
    paywallDetected: hasPaywall,
    selectors: {
      container: section.selectors.containerSelector,
      headline: section.selectors.headline,
      link: section.selectors.link,
      author: section.selectors.author || null,
      date: section.selectors.date || null,
      description: section.selectors.description || null,
      image: section.selectors.image || null,
    },
    pagination: {
      type: 'query_param', // Most common pattern
      param: 'page',
      // Can be enhanced with actual pagination detection
    },
    confidence: {
      score: Math.round(avgScore),
      articlesFound: totalArticles,
      pagesVerified: multiPageResults.filter((r) => !r.paywalled).length,
    },
    samples: section.samples.slice(0, 3),
    discoveredAt: new Date().toISOString(),
  }
}

async function main() {
  try {
    await initializeScriptEnv()
    const argv = yargs(hideBin(process.argv))
      .usage('Usage: $0 --url <URL> [--output <path>]')
      .option('url', {
        alias: 'u',
        type: 'string',
        description: 'The base URL of the news site to discover sections from.',
        demandOption: true,
      })
      .option('output', {
        alias: 'o',
        type: 'string',
        description: 'Output directory for generated config files',
        default: './discovered-sources',
      }).argv

    const baseUrl = argv.url
    const outputDir = argv.output
    const baseUrlObj = new URL(baseUrl)
    logger.info(`🔎 Discovering news sections for: ${baseUrl} (AI-Powered)`)

    const html = await fetchPageWithPlaywright(baseUrl, 'SectionDiscoverer')
    if (!html) {
      throw new Error('Failed to fetch base page content.')
    }

    // Check if the main page is paywalled
    if (detectPaywall(html, baseUrl)) {
      logger.error(
        '❌ Base URL appears to be behind a paywall. Cannot proceed with discovery.'
      )
      logger.info('💡 Tip: This tool works best with publicly accessible news sections.')
      return
    }

    const $ = cheerio.load(html)
    const allLinks = []
    $('a').each((_, el) => {
      const $el = $(el)
      const href = $el.attr('href')
      const text = $el.text().trim().replace(/\s+/g, ' ')
      if (href && text && !href.startsWith('#') && !href.startsWith('mailto:')) {
        try {
          const fullUrl = new URL(href, baseUrl).href
          if (new URL(fullUrl).hostname.endsWith(baseUrlObj.hostname)) {
            allLinks.push({ text, href: fullUrl })
          }
        } catch (e) {
          /* ignore invalid URLs */
        }
      }
    })

    const uniqueLinks = [...new Map(allLinks.map((item) => [item.href, item])).values()]
    logger.info(
      `Found ${uniqueLinks.length} unique internal links. Classifying with AI...`
    )

    const classifications = await sectionClassifierAgent(uniqueLinks)
    if (!classifications) {
      throw new Error('AI link classification failed.')
    }

    const topCandidates = uniqueLinks
      .map((link, i) => ({ ...link, classification: classifications[i].classification }))
      .filter((link) => link.classification === 'news_section')

    if (topCandidates.length === 0) {
      logger.warn('AI analysis did not identify any promising "news_section" links.')
      return
    }

    logger.info(
      `AI identified ${topCandidates.length} promising sections. Verifying with enhanced selector discovery...`
    )

    const limit = pLimit(CONCURRENCY)
    const verificationPromises = topCandidates.map((section) =>
      limit(async () => {
        logger.info(`\n  📄 Analyzing ${section.href}`)
        const sectionHtml = await fetchPageWithPlaywright(section.href, 'SectionVerifier')
        if (!sectionHtml) return null

        if (detectPaywall(sectionHtml, section.href)) {
          logger.warn(`  ⚠️  Section appears to be paywalled - skipping`)
          return null
        }

        const selectorPatterns = findCompleteSelectors(sectionHtml)

        if (selectorPatterns.length === 0) {
          logger.warn(`  ❌ No article patterns found`)
          return null
        }

        const bestPattern = selectorPatterns[0]
        logger.info(
          `  ✓ Found pattern with ${bestPattern.articleCount} articles (score: ${bestPattern.score})`
        )

        // Verify across multiple pages
        logger.info(`  🔍 Verifying across multiple pages...`)
        const multiPageResults = await verifySelectorsAcrossPages(
          section.href,
          bestPattern
        )

        const validPages = multiPageResults.filter(
          (r) => !r.paywalled && r.articleCount > 0
        )

        if (validPages.length === 0) {
          logger.warn(`  ❌ Could not verify pattern on any page`)
          return null
        }

        logger.info(`  ✅ Verified on ${validPages.length} page(s)`)

        return {
          title: section.text,
          url: section.href,
          selectors: {
            containerSelector: bestPattern.containerSelector,
            ...bestPattern.selectors,
          },
          samples: bestPattern.samples,
          multiPageResults,
        }
      })
    )

    const verifiedSections = (await Promise.all(verificationPromises)).filter(Boolean)

    if (verifiedSections.length === 0) {
      logger.warn('❌ Could not verify any AI-suggested sections with high confidence.')
      logger.info(
        '💡 This might indicate paywalled content or complex JavaScript-heavy pages.'
      )
      return
    }

    logger.info(
      `\n✅ Discovery Complete. Found ${verifiedSections.length} verified sources!\n`
    )

    // Generate and save config files
    const configs = []

    for (const section of verifiedSections) {
      const config = generateSourceConfig(baseUrl, section, section.multiPageResults)
      configs.push(config)

      // Display results
      const avgScore =
        section.multiPageResults.reduce((s, r) => s + (r.score || 0), 0) /
        section.multiPageResults.length
      const statusIcon = config.paywallDetected ? '⚠️' : avgScore > 80 ? '🌟' : '✓'

      console.log(
        `\n${statusIcon} Section: \x1b[36m${section.title}\x1b[0m (Confidence: ${Math.round(avgScore)})`
      )
      console.log(`   URL: \x1b[32m${section.url}\x1b[0m`)
      console.log(`   Container: \x1b[33m${section.selectors.containerSelector}\x1b[0m`)
      console.log(`   Headline: \x1b[33m${section.selectors.headline}\x1b[0m`)
      console.log(`   Link: \x1b[33m${section.selectors.link}\x1b[0m`)

      if (section.selectors.author)
        console.log(`   Author: \x1b[33m${section.selectors.author}\x1b[0m`)
      if (section.selectors.date)
        console.log(`   Date: \x1b[33m${section.selectors.date}\x1b[0m`)
      if (section.selectors.description)
        console.log(`   Description: \x1b[33m${section.selectors.description}\x1b[0m`)
      if (section.selectors.image)
        console.log(`   Image: \x1b[33m${section.selectors.image}\x1b[0m`)

      if (config.paywallDetected) {
        console.log(`   \x1b[31m⚠️  Paywall detected on some pages\x1b[0m`)
      }

      console.log(`   Sample headlines:`)
      section.samples.slice(0, 2).forEach((s) => {
        console.log(`     - "${s.headline}"`)
        if (s.author) console.log(`       Author: ${s.author}`)
        if (s.date) console.log(`       Date: ${s.date}`)
      })
    }

    // Save configs to files
    try {
      await writeFile(
        join(outputDir, `discovered-${Date.now()}.json`),
        JSON.stringify(configs, null, 2)
      )
      logger.info(
        `\n💾 Configuration saved to: ${outputDir}/discovered-${Date.now()}.json`
      )
      logger.info(`\n📝 Next steps:`)
      logger.info(`   1. Review the generated configuration file`)
      logger.info(`   2. Test the selectors manually on the source pages`)
      logger.info(`   3. Import into your scraper configuration`)
      logger.info(`   4. Monitor for changes over time`)
    } catch (err) {
      logger.warn(`Could not save config file: ${err.message}`)
      logger.info(`Config data:\n${JSON.stringify(configs, null, 2)}`)
    }
  } catch (error) {
    sendErrorAlert(error, { origin: 'DISCOVER_SOURCES_SCRIPT' })
    logger.fatal({ err: error }, 'Section discovery script failed.')
  }
}

main()

```

## 📄 scripts/sources/list-headlines.js
*Lines: 66, Size: 2.05 KB*

```javascript
// apps/pipeline/scripts/sources/list-headlines.js
/**
 * @command sources:list-headlines
 * @group Sources
 * @description Scrapes and lists the latest headlines for a single source. Usage: --source <SourceName>
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { getAllSources } from '@headlines/data-access'
import { scrapeSiteForHeadlines } from '@headlines/scraper-logic/scraper/index.js'
import { browserManager } from '@headlines/scraper-logic/browserManager.js'

async function listHeadlinesForSource() {
  const argv = yargs(hideBin(process.argv))
    .option('source', {
      alias: 's',
      type: 'string',
      description: 'The name of the source to scrape.',
      demandOption: true,
    })
    .help().argv

  try {
    await initializeScriptEnv()
    await browserManager.initialize()
    logger.info(`🚀 Scraping headlines for source: "${argv.source}"`)

    const sourcesResult = await getAllSources({
      filter: { name: new RegExp(`^${argv.source}$`, 'i') },
    })
    if (!sourcesResult.success || sourcesResult.data.length === 0) {
      throw new Error(`Source "${argv.source}" not found.`)
    }
    const source = sourcesResult.data[0]

    const result = await scrapeSiteForHeadlines(source)

    if (!result.success || result.resultCount === 0) {
      logger.error(
        `❌ Headline scraping failed. Reason: ${result.error || 'No headlines found.'}`
      )
      return
    }

    logger.info(
      `✅ Found ${result.resultCount} headlines from ${source.name}. Displaying first 15:`
    )

    const tableData = result.articles.slice(0, 15).map((article) => ({
      Headline:
        article.headline.substring(0, 100) + (article.headline.length > 100 ? '...' : ''),
      Link: article.link,
    }))

    console.table(tableData)
  } catch (error) {
    logger.fatal({ err: error }, 'A critical error occurred during the script.')
  } finally {
    await browserManager.close()
  }
}

listHeadlinesForSource()

```

## 📄 scripts/sources/list-sources.js
*Lines: 63, Size: 1.93 KB*

```javascript
// apps/pipeline/scripts/sources/list-sources.js
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { getAllSources } from '@headlines/data-access'
import colors from 'ansi-colors'

async function listSources() {
  const argv = yargs(hideBin(process.argv))
    .option('country', { alias: 'c', type: 'string' })
    .option('status', { alias: 's', type: 'string', choices: ['failing', 'healthy'] })
    .option('json', { type: 'boolean', description: 'Output as JSON' })
    .help().argv

  await initializeScriptEnv()
  try {
    const filter = {}
    if (argv.country) filter.country = new RegExp(`^${argv.country}$`, 'i')
    if (argv.status === 'failing') {
      filter['analytics.lastRunHeadlineCount'] = 0
      filter['analytics.totalRuns'] = { $gt: 0 }
    } else if (argv.status === 'healthy') {
      filter['analytics.lastRunHeadlineCount'] = { $gt: 0 }
    }

    const sourcesResult = await getAllSources({ filter })
    if (!sourcesResult.success) throw new Error(sourcesResult.error)
    const sources = sourcesResult.data

    if (argv.json) {
      console.log(JSON.stringify(sources, null, 2))
      return
    }

    if (sources.length === 0) {
      console.log('No sources found matching criteria.')
      return
    }

    const tableData = sources.map((s) => {
      const analytics = s.analytics || {}
      let health = colors.yellow('❓ New')
      if (analytics.totalRuns > 0) {
        health =
          analytics.lastRunHeadlineCount > 0
            ? colors.green('✅ Healthy')
            : colors.red('❌ Failing')
      }
      return {
        Name: s.name,
        Health: health,
        'Last Count': analytics.lastRunHeadlineCount ?? 'N/A',
        Country: s.country,
        Method: s.extractionMethod,
      }
    })
    console.table(tableData)
  } catch (error) {
    console.error('An error occurred:', error.message)
  }
}
listSources()

```

## 📄 scripts/sources/list.js
*Lines: 75, Size: 2.21 KB*

```javascript
// apps/pipeline/scripts/sources/list.js
/**
 * @command sources:list
 * @group Sources
 * @description List sources. Flags: --country, --status [failing|healthy], --json.
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { getAllSources } from '@headlines/data-access'
import colors from 'ansi-colors'

async function listSources() {
  const argv = yargs(hideBin(process.argv))
    .option('country', {
      alias: 'c',
      type: 'string',
      description: 'Filter sources by a specific country.',
    })
    .option('status', { alias: 's', type: 'string', choices: ['failing', 'healthy'] })
    .option('json', { type: 'boolean', description: 'Output as JSON' })
    .help().argv

  await initializeScriptEnv()
  try {
    const filter = {}
    if (argv.country) {
      filter.country = new RegExp(`^${argv.country}$`, 'i')
    }
    if (argv.status === 'failing') {
      filter['analytics.lastRunHeadlineCount'] = 0
      filter['analytics.totalRuns'] = { $gt: 0 }
    } else if (argv.status === 'healthy') {
      filter['analytics.lastRunHeadlineCount'] = { $gt: 0 }
    }

    const sourcesResult = await getAllSources({ filter })
    if (!sourcesResult.success) throw new Error(sourcesResult.error)
    const sources = sourcesResult.data

    if (argv.json) {
      console.log(JSON.stringify(sources, null, 2))
      return
    }

    if (sources.length === 0) {
      console.log('No sources found matching criteria.')
      return
    }

    console.log(`\n--- Displaying ${sources.length} Sources ---`)
    const tableData = sources.map((s) => {
      const analytics = s.analytics || {}
      let health = colors.yellow('❓ New')
      if (analytics.totalRuns > 0) {
        health =
          analytics.lastRunHeadlineCount > 0
            ? colors.green('✅ Healthy')
            : colors.red('❌ Failing')
      }
      return {
        Name: s.name,
        Health: health,
        'Last Count': analytics.lastRunHeadlineCount ?? 'N/A',
        Country: s.country,
        Method: s.extractionMethod,
      }
    })
    console.table(tableData)
  } catch (error) {
    console.error('An error occurred:', error.message)
  }
}
listSources()

```

## 📄 scripts/sources/maintain.js
*Lines: 86, Size: 2.86 KB*

```javascript
// apps/pipeline/scripts/sources/maintain.js
/**
 * @command sources:maintain
 * @group Sources
 * @description Run the autonomous agent to find, fix, and prune sources.
 */
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger, sendErrorAlert } from '@headlines/utils-server'
import { getAllSources, updateSource } from '@headlines/data-access'
import colors from 'ansi-colors'

const LOW_LEAD_RATE_THRESHOLD = 0.01 // 1%
const MIN_RUNS_FOR_PRUNING = 100

async function maintainSources() {
  try {
    await initializeScriptEnv()
    logger.info('🤖 Starting Autonomous Scraper Maintenance...')

    logger.info('--- Phase 1: Identifying and Reporting Failing Scrapers ---')
    const failingResult = await getAllSources({
      filter: {
        status: 'active',
        'analytics.totalRuns': { $gt: 0 },
        'analytics.lastRunHeadlineCount': 0,
      },
    })
    if (!failingResult.success) throw new Error(failingResult.error)
    const failingSources = failingResult.data

    if (failingSources.length === 0) {
      logger.info('✅ No failing sources detected.')
    } else {
      logger.warn(
        `Found ${failingSources.length} failing sources. Self-healing is disabled, reporting only:`
      )
      for (const source of failingSources) {
        logger.warn(
          colors.red(
            `  - FAILED: ${source.name} (Last scraped: ${source.lastScrapedAt?.toISOString() || 'N/A'})`
          )
        )
      }
    }

    logger.info('\n--- Phase 2: Pruning Low-Value (High Noise) Sources ---')
    const candidatesResult = await getAllSources({
      filter: {
        'analytics.totalRuns': { $gt: MIN_RUNS_FOR_PRUNING },
        scrapeFrequency: 'high',
      },
    })
    if (!candidatesResult.success) throw new Error(candidatesResult.error)
    const candidatesForPruning = candidatesResult.data

    let prunedCount = 0
    for (const source of candidatesForPruning) {
      const analytics = source.analytics
      const leadRate =
        analytics.totalScraped > 0 ? analytics.totalRelevant / analytics.totalScraped : 0
      if (leadRate < LOW_LEAD_RATE_THRESHOLD) {
        const updateResult = await updateSource(source._id, { scrapeFrequency: 'low' })
        if (updateResult.success) {
          logger.warn(
            `  - Downgraded "${source.name}" to 'low' frequency due to low lead rate (${(leadRate * 100).toFixed(2)}%).`
          )
          prunedCount++
        }
      }
    }

    if (prunedCount > 0) {
      logger.info(`✅ Pruning complete. Downgraded ${prunedCount} noisy sources.`)
    } else {
      logger.info('✅ No sources met the criteria for pruning.')
    }

    logger.info('\n🤖 Autonomous Scraper Maintenance complete.')
  } catch (error) {
    sendErrorAlert(error, { origin: 'MAINTAIN_SOURCES_SCRIPT' })
    logger.fatal({ err: error }, 'A critical error occurred during source maintenance.')
  }
}

maintainSources()

```

## 📄 scripts/sources/scrape-many.js
*Lines: 110, Size: 3.12 KB*

```javascript
// apps/pipeline/scripts/sources/scrape-many.js
/**
 * @command sources:scrape-many
 * @group Sources
 * @description Scrape multiple sources, optionally filtered by country. Flags: --country <CountryName>
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import pLimit from 'p-limit'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { getAllSources } from '@headlines/data-access'
import {
  scrapeSiteForHeadlines,
  scrapeArticleContent,
} from '@headlines/scraper-logic/scraper/index.js'

const CONCURRENCY = 5

async function testSource(source) {
  logger.info(`\n▶️  Testing: ${source.name} (${source.country})`)
  const headlineResult = await scrapeSiteForHeadlines(source)

  if (!headlineResult.success || headlineResult.resultCount === 0) {
    logger.error(
      `❌ Headline scraping failed. Reason: ${headlineResult.error || 'No headlines found.'}`
    )
    return
  }

  logger.info(`✅ Found ${headlineResult.resultCount} headlines.`)
  const firstArticle = headlineResult.articles[0]

  const contentResult = await scrapeArticleContent(
    {
      ...firstArticle,
      source: source.name,
      newspaper: source.name,
      country: source.country,
    },
    source
  )

  if (contentResult.articleContent && contentResult.articleContent.contents.length > 0) {
    logger.info(
      `✅ Content scraping successful (${
        contentResult.articleContent.contents.join('').length
      } chars).`
    )
  } else {
    logger.error(`❌ Content scraping failed. Reason: ${contentResult.enrichment_error}`)
  }
}

async function scrapeMany() {
  const argv = yargs(hideBin(process.argv))
    .option('country', {
      alias: 'c',
      type: 'string',
      description: 'The country to scrape sources from.',
    })
    .option('include-inactive', {
      alias: 'i',
      type: 'boolean',
      description: 'Include sources marked as "paused" or "under_review".',
      default: false,
    })
    .help()
    .alias('help', 'h').argv

  try {
    await initializeScriptEnv()

    const filter = {}
    if (argv.country) {
      filter.country = new RegExp(`^${argv.country}$`, 'i')
      logger.info(`Filtering for country: "${argv.country}"`)
    }
    if (!argv.includeInactive) {
      filter.status = 'active'
      logger.info('Including only "active" sources. Use --include-inactive to override.')
    }

    const sourcesResult = await getAllSources({ filter })
    if (!sourcesResult.success) throw new Error(sourcesResult.error)
    const sources = sourcesResult.data

    if (sources.length === 0) {
      logger.warn('No sources found matching the criteria.')
      return
    }

    logger.info(
      `🚀 Found ${sources.length} source(s) to test. Starting with concurrency ${CONCURRENCY}...`
    )
    const limit = pLimit(CONCURRENCY)
    const promises = sources.map((source) => limit(() => testSource(source)))

    await Promise.all(promises)
    logger.info('\n✅ All scrape tests completed.')
  } catch (error) {
    logger.fatal(
      { err: error },
      'A critical error occurred during the scrape-many script.'
    )
  }
}

scrapeMany()

```

## 📄 scripts/sources/scrape-one.js
*Lines: 99, Size: 3 KB*

```javascript
// apps/pipeline/scripts/sources/scrape-one.js
/**
 * @command sources:scrape-one
 * @group Sources
 * @description Scrape a single source for debugging headlines and content extraction. Flags: --source <SourceName>
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { truncateString } from '@headlines/utils-shared'
import { getAllSources } from '@headlines/data-access'
import {
  scrapeSiteForHeadlines,
  scrapeArticleContent,
} from '@headlines/scraper-logic/scraper/index.js'

async function scrapeOne() {
  const argv = yargs(hideBin(process.argv))
    .option('source', {
      alias: 's',
      type: 'string',
      description: 'The name of the source to scrape.',
      demandOption: true,
    })
    .help()
    .alias('help', 'h').argv

  const sourceName = argv.source

  try {
    await initializeScriptEnv()
    logger.info(`🚀 Starting single source scrape for: "${sourceName}"`)

    const sourcesResult = await getAllSources({
      filter: { name: new RegExp(`^${sourceName}$`, 'i') },
    })
    if (!sourcesResult.success || sourcesResult.data.length === 0) {
      logger.error(`❌ Source "${sourceName}" not found in the database.`)
      return
    }
    const source = sourcesResult.data[0]

    logger.info('🔬 Source Configuration:\n' + JSON.stringify(source, null, 2))

    logger.info('\n▶️  Phase 1: Scraping Headlines...')
    const headlineResult = await scrapeSiteForHeadlines(source)

    if (!headlineResult.success || headlineResult.resultCount === 0) {
      logger.error(
        `❌ Headline scraping failed. Reason: ${
          headlineResult.error || 'No headlines found.'
        }`
      )
      return
    }

    logger.info(`✅ Found ${headlineResult.resultCount} headlines.`)
    const firstArticle = headlineResult.articles[0]
    logger.info(
      `    - First Headline: "${firstArticle.headline}"\n    - Link: ${firstArticle.link}`
    )

    logger.info('\n▶️  Phase 2: Scraping Content for First Article...')
    const contentResult = await scrapeArticleContent(
      {
        ...firstArticle,
        source: source.name,
        newspaper: source.name,
        country: source.country,
      },
      source
    )

    if (
      contentResult.articleContent &&
      contentResult.articleContent.contents.length > 0
    ) {
      const content = contentResult.articleContent.contents.join('\n')
      logger.info(`✅ Content scraping successful! (${content.length} chars)`)
      logger.info(`    - Snippet: "${truncateString(content, 300)}..."`)
    } else {
      logger.error(
        `❌ Content scraping failed. Reason: ${contentResult.enrichment_error}`
      )
      if (contentResult.contentPreview) {
        logger.warn(`    - Scraped Preview: "${contentResult.contentPreview}..."`)
      }
    }
  } catch (error) {
    logger.fatal(
      { err: error },
      'A critical error occurred during the scrape-one script.'
    )
  }
}

scrapeOne()

```

## 📄 scripts/sources/update.js
*Lines: 78, Size: 2.61 KB*

```javascript
// apps/pipeline/scripts/sources/update.js
/**
 * @command sources:update
 * @group Sources
 * @description Update a field on a source document. Usage: --source <Name> --key <Field> --value <JSONValue>
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { getAllSources, updateSource } from '@headlines/data-access'
import { logger } from '@headlines/utils-shared'
import readline from 'readline'
import colors from 'ansi-colors'

const rl = readline.createInterface({ input: process.stdin, output: process.stdout })

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('source', { alias: 's', type: 'string', demandOption: true })
    .option('key', { alias: 'k', type: 'string', demandOption: true })
    .option('value', { alias: 'v', type: 'string', demandOption: true })
    .option('yes', {
      alias: 'y',
      type: 'boolean',
      description: 'Skip confirmation prompt',
    })
    .help().argv

  await initializeScriptEnv()
  try {
    const sourceResult = await getAllSources({
      filter: { name: new RegExp(`^${argv.source}$`, 'i') },
    })
    if (!sourceResult.success || sourceResult.data.length === 0) {
      logger.error(`Source "${argv.source}" not found.`)
      return
    }
    const source = sourceResult.data[0]

    let parsedValue
    try {
      parsedValue = JSON.parse(argv.value)
    } catch (e) {
      parsedValue = argv.value === 'null' ? undefined : argv.value
    }

    const oldValue =
      argv.key.split('.').reduce((o, i) => (o ? o[i] : undefined), source) || 'undefined'
    console.log(`\n--- Change Summary for Source: ${colors.bold(source.name)} ---`)
    console.log(`Field:      ${colors.cyan(argv.key)}`)
    console.log(`Old Value:  ${colors.red(JSON.stringify(oldValue))}`)
    console.log(`New Value:  ${colors.green(JSON.stringify(parsedValue))}`)
    console.log('-----------------------------------------------------\n')

    if (!argv.yes) {
      const answer = await new Promise((resolve) =>
        rl.question('Apply this change? (yes/no): ', resolve)
      )
      if (answer.toLowerCase() !== 'yes') {
        logger.warn('Operation cancelled by user.')
        return
      }
    }

    const updateResult = await updateSource(source._id, { [argv.key]: parsedValue })
    if (!updateResult.success) throw new Error(updateResult.error)

    logger.info(
      `✅ Successfully updated field "${argv.key}" for source "${source.name}".`
    )
  } catch (error) {
    logger.error({ err: error }, 'An error occurred during the update process.')
  } finally {
    rl.close()
  }
}
main()

```

## 📄 scripts/subscribers/list.js
*Lines: 120, Size: 4.18 KB*

```javascript
// apps/pipeline/scripts/subscribers/list.js
/**
 * @command subscribers:list
 * @group Subscribers
 * @description List all subscribers in the database with detailed status and engagement metrics.
 */
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { findSubscribers } from '@headlines/data-access'
import { logger } from '@headlines/utils-shared'
import colors from 'ansi-colors'
import { format, formatDistanceToNow } from 'date-fns'

/**
 * A simple utility to create formatted rows for the custom table output.
 * @param {string} label - The label for the row.
 * @param {string} value - The value for the row.
 * @param {number} labelWidth - The fixed width for the label column.
 * @returns {string} A formatted string for a single row.
 */
function formatRow(label, value, labelWidth) {
  const paddedLabel = `${label}:`.padEnd(labelWidth)
  return `  ${colors.gray(paddedLabel)} ${value}`
}

async function listSubscribers() {
  await initializeScriptEnv()
  try {
    const subscribersResult = await findSubscribers({ sort: { email: 1 } })

    if (!subscribersResult.success) {
      throw new Error(subscribersResult.error)
    }

    const subscribers = subscribersResult.data

    if (subscribers.length === 0) {
      console.log('No subscribers found.')
      return
    }

    console.log(
      colors.bold.cyan(`\n--- Displaying ${subscribers.length} Subscribers ---\n`)
    )

    subscribers.forEach((s, index) => {
      const profile = {
        Name: `${s.firstName} ${s.lastName || ''}`,
        Status: s.isActive ? colors.green('Active') : colors.red('Inactive'),
        Role: s.role === 'admin' ? colors.yellow('Admin') : s.role,
        Tier: s.subscriptionTier || 'N/A',
        Expires: s.subscriptionExpiresAt
          ? format(new Date(s.subscriptionExpiresAt), 'yyyy-MM-dd')
          : colors.gray('N/A'),
        'Last Login': s.lastLoginAt
          ? `${formatDistanceToNow(new Date(s.lastLoginAt))} ago`
          : colors.gray('Never'),
      }

      const engagement = {
        'Email Notifications': s.emailNotificationsEnabled
          ? colors.green('On')
          : colors.red('Off'),
        'Push Notifications': s.pushNotificationsEnabled
          ? colors.green('On')
          : colors.red('Off'),
        'Emails Sent': colors.cyan((s.emailSentCount || 0).toString()),
        'Events Received': colors.cyan((s.eventsReceivedCount || 0).toString()),
      }

      const activeCountries = (s.countries || [])
        .filter((c) => c.active)
        .map((c) => c.name)

      console.log(colors.bold.white(`👤 ${s.email}`))
      console.log(colors.gray(''.padEnd(80, '─')))

      const labelWidth = 22 // Set a fixed width for labels for alignment

      // Print Profile Info
      console.log(formatRow('Name', profile.Name, labelWidth))
      console.log(formatRow('Status', profile.Status, labelWidth))
      console.log(formatRow('Role', profile.Role, labelWidth))
      console.log(formatRow('Tier', profile.Tier, labelWidth))
      console.log(formatRow('Expires', profile.Expires, labelWidth))
      console.log(formatRow('Last Login', profile['Last Login'], labelWidth))

      console.log('') // Spacer

      // Print Engagement Info
      console.log(
        formatRow('Email Notifications', engagement['Email Notifications'], labelWidth)
      )
      console.log(
        formatRow('Push Notifications', engagement['Push Notifications'], labelWidth)
      )
      console.log(formatRow('Emails Sent', engagement['Emails Sent'], labelWidth))
      console.log(formatRow('Events Received', engagement['Events Received'], labelWidth))

      // Print Country Subscriptions in a multi-line format
      const countryLabel = 'Country Subscriptions:'
      if (activeCountries.length > 0) {
        console.log(`  ${colors.gray(countryLabel.padEnd(labelWidth))}`)
        activeCountries.forEach((country) => {
          console.log(`  ${''.padEnd(labelWidth)} - ${country}`)
        })
      } else {
        console.log(formatRow('Country Subscriptions', colors.gray('None'), labelWidth))
      }

      if (index < subscribers.length - 1) {
        console.log('\n')
      }
    })
  } catch (e) {
    logger.error({ err: e }, 'Error listing subscribers')
  }
}

listSubscribers()

```

## 📄 scripts/subscribers/update.js
*Lines: 112, Size: 3.57 KB*

```javascript
// apps/pipeline/scripts/subscribers/update.js
/**
 * @command subscribers:update
 * @group Subscribers
 * @description Update a field for a subscriber. Use --help to see available fields.
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { findSubscribers, updateSubscriber } from '@headlines/data-access'
import { Subscriber } from '@headlines/models'
import { logger } from '@headlines/utils-shared'
import readline from 'readline'
import colors from 'ansi-colors'

const rl = readline.createInterface({ input: process.stdin, output: process.stdout })

async function main() {
  // Get all updatable keys from the Mongoose schema, excluding immutable ones.
  const updatableKeys = Object.keys(Subscriber.schema.paths).filter(
    (key) => !['_id', '__v', 'createdAt', 'updatedAt', 'email'].includes(key)
  )

  const argv = yargs(hideBin(process.argv))
    .usage('Usage: $0 --email <Email> --key <Field> --value <JSONValue> [--yes]')
    .option('email', {
      type: 'string',
      description: 'The email address of the subscriber to update.',
    })
    .option('key', {
      alias: 'k',
      type: 'string',
      description: 'The field to update.',
      choices: updatableKeys, // Restrict choices to valid schema paths
    })
    .option('value', {
      alias: 'v',
      type: 'string',
      description: 'The new value (in JSON format for booleans/numbers).',
    })
    .option('yes', {
      alias: 'y',
      type: 'boolean',
      description: 'Skip the confirmation prompt.',
    })
    .demandOption(
      ['email', 'key', 'value'],
      'Please provide email, key, and value arguments.'
    )
    .help('help')
    .alias('help', 'h')
    .epilogue(`Available keys to update:\n  - ${updatableKeys.join('\n  - ')}`).argv

  await initializeScriptEnv()
  try {
    const findResult = await findSubscribers({ filter: { email: argv.email } })
    if (!findResult.success || findResult.data.length === 0) {
      logger.error(`Subscriber with email "${argv.email}" not found.`)
      return
    }
    const subscriber = findResult.data[0]

    let parsedValue
    try {
      // Attempt to parse value as JSON (handles booleans, numbers, etc.)
      parsedValue = JSON.parse(argv.value)
    } catch (e) {
      // If it fails, treat it as a string, but handle 'null' specifically
      parsedValue = argv.value === 'null' ? null : argv.value
    }

    const oldValue = subscriber[argv.key]

    console.log(
      `\n--- Change Summary for Subscriber: ${colors.bold(subscriber.email)} ---`
    )
    console.log(`Field:      ${colors.cyan(argv.key)}`)
    console.log(`Old Value:  ${colors.red(JSON.stringify(oldValue))}`)
    console.log(`New Value:  ${colors.green(JSON.stringify(parsedValue))}`)
    console.log('-----------------------------------------------------\n')

    if (!argv.yes) {
      const answer = await new Promise((resolve) =>
        rl.question('Apply this change? (yes/no): ', resolve)
      )
      if (answer.toLowerCase() !== 'yes') {
        logger.warn('Operation cancelled.')
        return
      }
    }

    // Using updateSubscriber from data-access layer
    const updateResult = await updateSubscriber(subscriber._id, {
      [argv.key]: parsedValue,
    })

    if (!updateResult.success) {
      throw new Error(updateResult.error)
    }

    logger.info(
      `✅ Successfully updated field "${argv.key}" for subscriber "${subscriber.email}".`
    )
  } catch (error) {
    logger.error({ err: error }, 'An error occurred during the update process.')
  } finally {
    rl.close()
  }
}

main()

```

## 📄 scripts/test-pipeline/mock-loader.js
*Lines: 72, Size: 2.63 KB*

```javascript
// apps/pipeline/scripts/test-pipeline/mock-loader.js
import { logger } from '@headlines/utils-shared'

const MOCK_MODULE_ID = '@headlines/ai-services'
const MOCK_MODULE_URL = new URL(MOCK_MODULE_ID, import.meta.url).href

const mockImplementation = `
import { logger } from '@headlines/utils-shared';

logger.info('[MOCK LOADER] The @headlines/ai-services module has been fully mocked.');

export const dossierUpdateChain = async ({ existing_dossier_json }) => {
  const existing = JSON.parse(existing_dossier_json);
  logger.info(\`[MOCK] dossierUpdateChain called for: \${existing.reachOutTo}\`);
  // --- START OF DEFINITIVE FIX ---
  // Defensively create the profile object if it doesn't exist
  if (!existing.profile) {
    existing.profile = {};
  }
  // --- END OF DEFINITIVE FIX ---
  existing.profile.biography = (existing.profile.biography || '') + ' [Updated by mock]';
  return { opportunities: [existing] };
};

export const opportunityChain = async ({ context_text }) => {
  const nameMatch = context_text.match(/Synthesized Event Headline:.*?([A-Z][a-z]+(?: [A-Z][a-z]+)+)/);
  const name = nameMatch ? nameMatch[1] : 'Mocked New Individual';
  logger.info(\`[MOCK] opportunityChain called for: \${name}\`);
  return {
    opportunities: [{
      reachOutTo: name,
      contactDetails: { role: 'Mock Role', company: 'Mock Company' },
      lastKnownEventLiquidityMM: 50,
      whyContact: ['Generated from a mock AI call.'],
      profile: { dossierQuality: 'bronze', biography: 'Mock biography.' }
    }]
  };
};

export const entityCanonicalizerChain = async ({ entity_name }) => ({ canonical_name: entity_name });
export const contactFinderChain = async () => ({ email: 'mock.contact@email.com' });
export const generateEmbedding = async () => Array(384).fill(0.1);
export const performGoogleSearch = async () => ({ success: true, snippets: 'Mock snippets' });
export const fetchWikipediaSummary = async () => ({ success: true, summary: 'Mock summary' });

// Export any other functions that might be called to prevent 'not a function' errors
export const clusteringChain = async () => ({ events: [] });
export const headlineChain = async () => ({});
// ... add other exports from ai-services as needed, pointing to dummy functions
`

export function resolve(specifier, context, nextResolve) {
  if (specifier === MOCK_MODULE_ID) {
    return {
      url: MOCK_MODULE_URL,
      shortCircuit: true,
    }
  }
  return nextResolve(specifier, context)
}

export function load(url, context, nextLoad) {
  if (url === MOCK_MODULE_URL) {
    return {
      format: 'module',
      source: mockImplementation,
      shortCircuit: true,
    }
  }
  return nextLoad(url, context)
}

```

## 📄 scripts/test-pipeline/stage4_output.js
*Lines: 49, Size: 1.89 KB*

```javascript
// apps/pipeline/scripts/test-pipeline/stage4_output.js

// This file contains a high-fidelity mock snapshot of the pipeline payload as it would
// exist after Stage 4 and before Stage 5.

export const mockSynthesizedEvents = [
  {
    _id: '68eed225f95b439a159ff669',
    event_key: 'sale-erik-damgaard-uniconta-2025-10-14',
    synthesized_headline:
      'Erik Damgaard sells majority stake in Uniconta for undisclosed multi‑billion DKK sum',
    synthesized_summary:
      'Danish software entrepreneur Erik Damgaard has sold a majority stake in his cloud ERP company Uniconta...',
    highest_relevance_score: 95,
    // --- START OF FIX: Add the missing source_articles array ---
    source_articles: [
      {
        link: 'https://borsen.dk/nyheder/virksomheder/erik-damgaard-rejser-sig-saelger-firma-for-milliardbelob',
        headline: 'Erik Damgaard rejser sig: Sælger firma for milliard­beløb',
        newspaper: 'Borsen',
      },
    ],
    // --- END OF FIX ---
    judgeVerdict: null, // This will be populated by the judge
  },
  {
    _id: '68eed225f95b439a159ff66d',
    event_key: 'acquisition-goldman-sachs-industry-ventures-2025-10-14',
    synthesized_headline:
      'Goldman Sachs acquires Industry Ventures for about $1 billion, creating liquidity for owners',
    synthesized_summary:
      'Goldman Sachs acquires venture firm Industry Ventures for just under $1 billion...',
    highest_relevance_score: 92,
    // --- START OF FIX: Add the missing source_articles array ---
    source_articles: [
      {
        link: 'https://borsen.dk/nyheder/finans/goldman-sachs-kober-venturefond-for-1-mia-dollar',
        headline: 'Goldman Sachs køber venturefond for 1 mia. dollar',
        newspaper: 'Borsen',
      },
    ],
    // --- END OF FIX ---
    judgeVerdict: null,
  },
]

// For this test, we can assume no opportunities were generated before stage 4.5
export const mockOpportunitiesToSave = []

```

## 📄 scripts/test-pipeline/test-opportunity-upserter.js
*Lines: 117, Size: 3.88 KB*

```javascript
// apps/pipeline/scripts/test-pipeline/test-opportunity-upserter.js
/**
 * @command test:upserter
 * @group Test
 * @description A fast, targeted test for the opportunityUpserter module.
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { SynthesizedEvent, Opportunity } from '@headlines/models'
import { enrichAndLinkOpportunities } from '../../src/pipeline/submodules/opportunityUpserter.js'
import colors from 'ansi-colors'

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('dry-run', {
      type: 'boolean',
      description: 'Simulate the run without writing to the database.',
    })
    .help().argv

  await initializeScriptEnv()
  logger.info(
    colors.bold.cyan(
      '\n🧪 Starting Targeted Test for opportunityUpserter.js (MOCKED AI) 🧪\n'
    )
  )

  try {
    // 1. Get ONE real, high-quality event from the DB to use as input
    logger.info(
      'Step 1: Fetching 1 high-quality event from the database to use as test input...'
    )
    const realSavedEvents = await SynthesizedEvent.find({
      key_individuals: { $exists: true, $not: { $size: 0 } },
    })
      .sort({ createdAt: -1 })
      .limit(1) // Only fetch one to keep it fast
      .lean()

    if (realSavedEvents.length === 0) {
      logger.error(
        'Could not find any suitable events in the database to test with. Please run the pipeline first.'
      )
      return
    }
    logger.info(`  -> Found ${realSavedEvents.length} event.`)
    console.table(
      realSavedEvents.map((e) => ({
        Headline: e.synthesized_headline,
        Individuals: e.key_individuals.map((i) => i.name).join(', '),
      }))
    )

    // 2. Simulate the `potentialOpportunities` that would have been generated earlier.
    logger.info('Step 2: Simulating potential opportunities payload...')
    const potentialOpportunities = realSavedEvents.flatMap((event) =>
      (event.key_individuals || []).map((individual) => ({
        reachOutTo: individual.name,
        contactDetails: { role: individual.role_in_event, company: individual.company },
        lastKnownEventLiquidityMM:
          event.transactionDetails?.liquidityFlow?.approxAmountUSD || 0,
        whyContact: [
          'Generated from test script for event: ' + event.synthesized_headline,
        ],
        event_key: event.event_key,
      }))
    )
    logger.info(
      `  -> Created ${potentialOpportunities.length} mock opportunities to process.`
    )

    if (argv.dryRun) {
      logger.warn(
        '\nDRY RUN MODE: Skipping database writes. The test will simulate the logic but not commit any changes.'
      )
    }

    // 3. Execute the target function
    logger.info(colors.bold.yellow(`\nStep 3: Executing enrichAndLinkOpportunities()...`))
    const savedOpportunities = await enrichAndLinkOpportunities(
      potentialOpportunities,
      realSavedEvents
    )

    // 4. Verification
    logger.info(colors.bold.cyan(`\n--- VERIFICATION ---`))
    if (savedOpportunities.length > 0) {
      logger.info(
        colors.green(
          `✅ SUCCESS: The function returned ${savedOpportunities.length} opportunity documents.`
        )
      )
      console.table(
        savedOpportunities.map((opp) => ({
          Name: opp.reachOutTo,
          'Linked Events': (opp.events || []).length,
          'Est. Wealth':
            opp.lastKnownEventLiquidityMM || opp.profile?.estimatedNetWorthMM || 'N/A',
        }))
      )
      logger.info(
        'Verification complete. Check the table above for the final linked data.'
      )
    } else {
      logger.error(
        '❌ FAILURE: The function returned 0 opportunities. This indicates the process failed internally.'
      )
    }
  } catch (error) {
    logger.fatal({ err: error }, 'A critical error occurred during the test script.')
  }
}

main()

```

## 📄 scripts/test-pipeline/test-payload.js
*Lines: 28, Size: 1.61 KB*

```javascript
// scripts/test-pipeline/test-payload.js (version 1.1)
/**
 * This file contains a "known good" test article payload.
 * The --dry-run mode injects this data directly into the pipeline,
 * bypassing the scraping and filtering stages. This ensures a consistent
 * and repeatable test case for the AI assessment, enrichment, clustering,
 * synthesis, and notification preparation stages.
 */
import mongoose from 'mongoose';

export const testArticles = [
  {
    _id: new mongoose.Types.ObjectId(), // DEFINITIVE FIX: Add a synthetic ID for test mode.
    headline:
      'Danish Møller family sells their shipping software company, NaviTech, for $500M to an American buyer.',
    link: 'https://example.com/moller-family-sells-navitech-for-500m',
    source: 'Test Source',
    newspaper: 'Test Source',
    country: 'Denmark',
    articleContent: {
      contents: [
        'COPENHAGEN -- In a landmark deal for the Danish tech sector, the prominent Møller family announced today the successful sale of their privately-held software company, NaviTech, for an estimated $500 million. The buyer is the US-based logistics giant, Global Transport Inc. NaviTech, founded by patriarch Jørgen Møller in 1998, has become a critical player in maritime logistics software. "This is a proud day for our family," said CEO and daughter, Christina Møller. "We built this from the ground up, and we are confident that Global Transport Inc. will take it to the next level. The family plans to focus on philanthropic endeavors through the Møller Foundation going forward."',
      ],
    },
  },
  // You can add more test articles here to test clustering
]

```

## 📄 scripts/test-pipeline/test-save-logic.js
*Lines: 142, Size: 4.77 KB*

```javascript
// apps/pipeline/scripts/test-pipeline/test-save-logic.js
/**
 * @command test:save-logic
 * @group Test
 * @description Injects a perfect, in-memory event and opportunity directly into the final commit stage to surgically test the save logic.
 * @example pnpm run test:save-logic
 * @example pnpm run test:save-logic -- --dry-run
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { RunStatsManager } from '../../src/utils/runStatsManager.js'
import { ArticleTraceLogger } from '../../src/utils/articleTraceLogger.js'
import { runCommitAndNotify } from '../../src/pipeline/5_commitAndNotify.js'
import colors from 'ansi-colors'
import mongoose from 'mongoose'

function createMockPayload() {
  const eventId = new mongoose.Types.ObjectId()
  const articleId = new mongoose.Types.ObjectId()

  const mockArticle = {
    _id: articleId,
    headline: 'French shipping family sells NaviSoft SaaS package for $500mm',
    link: 'https://test.headlines.dev/test-article',
    newspaper: 'Test Source',
    assessment_article:
      'The sale of NaviSoft by the Møller-Jensen family to Global Tech Partners for $500M is a major liquidity event. The primary beneficiaries are the family, particularly founder Lars Møller-Jensen and his daughter, CEO Eva Møller-Jensen.',
    relevance_article: 100,
    key_individuals: [
      { name: 'Eva Møller-Jensen', role_in_event: 'CEO & Seller' },
      { name: 'Lars Møller-Jensen', role_in_event: 'Founder & Patriarch' },
    ],
  }

  // --- START OF DEFINITIVE FIX ---
  // The event country is now set to 'France' as requested for testing.
  const mockEvent = {
    _id: eventId,
    event_key: `test-save-logic-${new Date().getTime()}`,
    synthesized_headline:
      'TEST EVENT: Møller-Jensen Family Finalizes Sale of Maritime Software Firm NaviSoft',
    synthesized_summary:
      'This is a test event to verify the database commit logic, ensuring it passes the Judge agent.',
    highest_relevance_score: 100,
    country: ['France'],
    key_individuals: [{ name: 'Eva Møller-Jensen', role_in_event: 'CEO & Seller' }],
    source_articles: [
      {
        _id: articleId,
        headline: mockArticle.headline,
        link: mockArticle.link,
        newspaper: mockArticle.newspaper,
      },
    ],
    ai_assessment_reason: mockArticle.assessment_article,
    toObject: () => mockEvent,
  }

  const mockOpportunity = {
    reachOutTo: 'Eva Møller-Jensen',
    contactDetails: { role: 'CEO & Seller', company: 'NaviSoft' },
    lastKnownEventLiquidityMM: 500,
    whyContact: [
      'Generated from test-save-logic script to verify end-to-end save process.',
    ],
    event_key: mockEvent.event_key,
  }

  return { mockEvent, mockOpportunity, mockArticle }
}
// --- END OF DEFINITIVE FIX ---

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('dry-run', {
      type: 'boolean',
      description: 'Simulate the run without writing to the database.',
    })
    .help().argv

  await initializeScriptEnv()
  logger.info(
    colors.bold.cyan(
      '\n🧪 Surgically Testing Stage 5 (Commit & Notify) with High-Fidelity In-Memory Data 🧪\n'
    )
  )

  const { mockEvent, mockOpportunity, mockArticle } = createMockPayload()
  logger.info(
    'Injecting 1 high-fidelity synthetic event and 1 synthetic opportunity directly into Stage 5.'
  )

  const runStatsManager = new RunStatsManager()
  const articleTraceLogger = new ArticleTraceLogger()
  await articleTraceLogger.initialize()

  let pipelinePayload = {
    synthesizedEvents: [mockEvent],
    opportunitiesToSave: [mockOpportunity],
    enrichedArticles: [mockArticle],
    runStatsManager,
    articleTraceLogger,
    isDryRun: argv.dryRun,
    noCommitMode: argv.dryRun,
    dbConnection: true,
    lean: true,
    skipdeepdive: true,
    test: true,
  }

  try {
    pipelinePayload = (await runCommitAndNotify(pipelinePayload)).payload

    if (pipelinePayload.savedEvents?.length > 0) {
      logger.info(
        colors.green.bold(
          `\n✅ SUCCESS! Stage 5 completed and reported saving ${pipelinePayload.savedEvents.length} event(s).`
        )
      )
      logger.info(
        'Please verify the "synthesized_events" and "opportunities" collections in your database.'
      )
    } else {
      logger.error(
        colors.red.bold(
          '\n❌ FAILURE! Stage 5 completed but reported 0 saved events. The Judge likely discarded the event. Check logs for verdict.'
        )
      )
    }

    console.log('\n--- Final Run Stats ---')
    console.dir(runStatsManager.getStats(), { depth: 2 })
    console.log('---------------------\n')
  } catch (error) {
    logger.fatal({ err: error }, 'A critical error occurred while testing Stage 5.')
  }
}

main()

```

## 📄 scripts/tools/backfill-graph-from-opps.js
*Lines: 146, Size: 4.31 KB*

```javascript
// apps/pipeline/scripts/tools/backfill-graph-from-opps.js
/**
 * @command tools:backfill-graph
 * @group Tools
 * @description Backfills the Knowledge Graph using data from existing Opportunity dossiers.
 * @example pnpm run tools:backfill-graph -- --yes
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import colors from 'ansi-colors'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { Opportunity, EntityGraph } from '@headlines/models'
import { closeReader, promptUser } from '../seed/lib/user-interact.js'
import { graphUpdaterChain, entityCanonicalizerChain } from '@headlines/ai-services'
import pLimit from 'p-limit'

const CONCURRENCY_LIMIT = 3

async function updateGraphFromOpportunity(opportunity) {
  const biography = opportunity.profile?.biography
  if (!biography) {
    logger.warn(
      `  -> Skipping graph update for "${opportunity.reachOutTo}" due to missing biography.`
    )
    return 0
  }

  logger.info(
    `  -> 🧠 Analyzing dossier for "${opportunity.reachOutTo}" to update Knowledge Graph...`
  )

  const result = await graphUpdaterChain({ event_summary: biography })
  if (result.error || !result.relationships) {
    logger.warn(
      { error: result.error },
      `  -> Graph Updater AI failed for "${opportunity.reachOutTo}".`
    )
    return 0
  }

  const { relationships, entities } = result
  if (relationships.length === 0) {
    logger.info(`  -> No new relationships found in the dossier.`)
    return 0
  }

  const entityNameIdMap = new Map()
  for (const name of entities) {
    const canonicalResult = await entityCanonicalizerChain({ entity_name: name })
    const canonicalName = canonicalResult.canonical_name || name
    const entityDoc = await EntityGraph.findOneAndUpdate(
      { name: canonicalName },
      { $setOnInsert: { name: canonicalName, type: 'company' }, $addToSet: { aliases: name } },
      { upsert: true, new: true }
    ).lean()
    entityNameIdMap.set(name.toLowerCase(), entityDoc._id)
  }

  const bulkOps = []
  for (const [subject, predicate, object] of relationships) {
    const subjectId = entityNameIdMap.get(subject.toLowerCase())
    const objectId = entityNameIdMap.get(object.toLowerCase())
    if (subjectId && objectId) {
      bulkOps.push({
        updateOne: {
          filter: { _id: subjectId },
          update: {
            $addToSet: {
              relationships: {
                targetId: objectId,
                targetName: object,
                type: predicate,
                context: `From dossier for ${opportunity.reachOutTo}`,
              },
            },
          },
        },
      })
    }
  }

  if (bulkOps.length > 0) {
    await EntityGraph.bulkWrite(bulkOps, { ordered: false })
    logger.info(
      `  -> Successfully wrote ${bulkOps.length} relationships for "${opportunity.reachOutTo}".`
    )
    return bulkOps.length
  }
  return 0
}

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('yes', {
      alias: 'y',
      type: 'boolean',
      description: 'Skip confirmation prompt.',
    })
    .help().argv

  await initializeScriptEnv()
  logger.info('🚀 Starting Knowledge Graph Backfill Script from Opportunities...')

  const opportunities = await Opportunity.find({ 'profile.biography': { $ne: null } })
    .select('reachOutTo profile.biography')
    .lean()

  if (opportunities.length === 0) {
    logger.info('✅ No opportunities with biographies found. Graph is up-to-date.')
    return
  }

  logger.info(
    `Found ${opportunities.length} opportunities with biographies to process for the graph.`
  )

  if (!argv.yes) {
    const answer = await promptUser(
      'Proceed with backfilling the Knowledge Graph from these opportunities? (y/n): '
    )
    if (answer !== 'y') {
      logger.warn('Operation cancelled by user.')
      return
    }
  }

  const limit = pLimit(CONCURRENCY_LIMIT)
  let totalRelationshipsAdded = 0
  const promises = opportunities.map((opp) =>
    limit(async () => {
      const count = await updateGraphFromOpportunity(opp)
      totalRelationshipsAdded += count
    })
  )

  await Promise.all(promises)

  logger.info(
    colors.green(
      `\n✅ Backfill complete. Added a total of ${totalRelationshipsAdded} new relationships to the Knowledge Graph.`
    )
  )
}

main().finally(() => closeReader())
```

## 📄 scripts/tools/calculate-transaction-likelihood.js
*Lines: 94, Size: 3.13 KB*

```javascript
// apps/pipeline/scripts/tools/calculate-transaction-likelihood.js
/**
 * @command tools:predict-transactions
 * @group Tools
 * @description Analyzes event history to calculate a "Likelihood to Transact" score for watchlist entities.
 */
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { WatchlistEntity, SynthesizedEvent } from '@headlines/models'
import { logger } from '@headlines/utils-shared'
import colors from 'ansi-colors'
import pLimit from 'p-limit'

const CONCURRENCY = 10

async function calculateScores() {
  await initializeScriptEnv()
  logger.info('🚀 Starting Predictive Analytics: Likelihood to Transact Calculation...')

  const entities = await WatchlistEntity.find({ status: 'active' }).lean()
  if (entities.length === 0) {
    logger.info('No active watchlist entities to analyze. Exiting.')
    return
  }

  logger.info(`Analyzing ${entities.length} active watchlist entities...`)

  const limit = pLimit(CONCURRENCY)
  const updatePromises = entities.map((entity) =>
    limit(async () => {
      const events = await SynthesizedEvent.find({ watchlistHits: entity._id })
        .sort({ createdAt: -1 })
        .lean()

      let score = 10 // Base score
      let reason = ['Base score']

      if (events.length === 0) {
        // No recent activity, score remains low
      } else {
        const now = new Date()
        const sixMonthsAgo = new Date(now.setMonth(now.getMonth() - 6))
        const oneYearAgo = new Date(now.setFullYear(now.getFullYear() - 1))
        const twoYearsAgo = new Date(now.setFullYear(now.getFullYear() - 2))

        for (const event of events) {
          const eventDate = new Date(event.createdAt)
          const eventType =
            event.eventClassification || event.transactionDetails?.transactionType

          if (eventType === 'Leadership Succession' && eventDate > sixMonthsAgo) {
            score += 25
            reason.push('+25 (Recent Succession)')
          }
          if (eventType === 'Funding Round' && eventDate > oneYearAgo) {
            score += 15
            reason.push('+15 (Recent Funding)')
          }
          if ((eventType === 'M&A' || eventType === 'IPO') && eventDate > twoYearsAgo) {
            score -= 30
            reason.push('-30 (Recent Transaction)')
          }
        }
      }

      // Cap the score between 0 and 100
      const finalScore = Math.max(0, Math.min(100, score))

      if (entity.likelihoodToTransact !== finalScore) {
        await WatchlistEntity.updateOne(
          { _id: entity._id },
          { $set: { likelihoodToTransact: finalScore } }
        )
        logger.info(
          `Updated "${entity.name}": ${colors.yellow(entity.likelihoodToTransact)} -> ${colors.green(finalScore)}. Reason: ${reason.join(', ')}`
        )
        return 1
      }
      return 0
    })
  )

  const results = await Promise.all(updatePromises)
  const updatedCount = results.reduce((sum, count) => sum + count, 0)

  logger.info(`✅ Calculation complete. Updated scores for ${updatedCount} entities.`)
}

calculateScores().catch((err) => {
  logger.fatal(
    { err },
    'A critical error occurred during the likelihood calculation script.'
  )
})

```

## 📄 scripts/tools/calculate-watchlist-hits.js
*Lines: 80, Size: 2.66 KB*

```javascript
// apps/pipeline/scripts/tools/calculate-watchlist-hits.js
import cliProgress from 'cli-progress'
import colors from 'ansi-colors'
import {
  findArticles,
  findWatchlistEntities,
  updateWatchlistEntities,
} from '@headlines/data-access'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'

async function calculateHits() {
  const startTime = Date.now()
  await initializeScriptEnv()
  logger.info('🚀 Starting Watchlist Hit Count Calculation...')

  const [articlesResult, entitiesResult] = await Promise.all([
    findArticles({ select: 'headline' }),
    findWatchlistEntities(),
  ])

  if (!articlesResult.success) throw new Error(articlesResult.error)
  if (!entitiesResult.success) throw new Error(entitiesResult.error)

  const allArticles = articlesResult.data
  const watchlistEntities = entitiesResult.data
  logger.info(
    `Loaded ${watchlistEntities.length} watchlist entities and ${allArticles.length.toLocaleString()} articles.`
  )

  if (watchlistEntities.length === 0 || allArticles.length === 0) {
    logger.warn('Nothing to process. Exiting.')
    return
  }

  logger.info('Calculating hits... (This may take a while)')
  const progressBar = new cliProgress.SingleBar({
    format: `Processing | ${colors.cyan('{bar}')} | {percentage}% || {value}/{total} Entities`,
    barCompleteChar: '\u2588',
    barIncompleteChar: '\u2591',
    hideCursor: true,
  })
  progressBar.start(watchlistEntities.length, 0)

  let modifiedCount = 0
  for (const entity of watchlistEntities) {
    let count = 0
    const allTerms = [entity.name, ...(entity.searchTerms || [])]
      .map((t) => t.toLowerCase().trim())
      .filter(Boolean)
    const uniqueTerms = [...new Set(allTerms)]
    const termRegexes = uniqueTerms.map(
      (term) => new RegExp(`\\b${term.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')}\\b`, 'i')
    )

    if (termRegexes.length > 0) {
      count = allArticles.filter((article) =>
        termRegexes.some((regex) => regex.test(article.headline))
      ).length
    }

    if (entity.hitCount !== count) {
      const updateResult = await updateWatchlistEntities(
        { _id: entity._id },
        { $set: { hitCount: count } }
      )
      if (updateResult.success) modifiedCount += updateResult.modifiedCount
    }
    progressBar.increment()
  }
  progressBar.stop()
  logger.info('✅ Hit calculation complete.')

  logger.info(`✅ Database update complete. Modified ${modifiedCount} documents.`)
  const duration = (Date.now() - startTime) / 1000
  logger.info(`✨ Operation finished in ${duration.toFixed(2)} seconds.`)
}

calculateHits().catch((err) => logger.fatal({ err }, 'A critical error occurred.'))

```

## 📄 scripts/tools/diagnose-stuck-articles.js
*Lines: 64, Size: 1.85 KB*

```javascript
// apps/pipeline/scripts/tools/diagnose-stuck-articles.js
/**
 * @command tools:diagnose
 * @group Tools
 * @description Finds and displays properties of articles from the last 24 hours that may be stuck in the pipeline.
 */
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { findArticles } from '@headlines/data-access'
import colors from 'ansi-colors'

async function diagnose() {
  await initializeScriptEnv()
  logger.info('🔬 Running diagnostic script for stuck articles...')

  try {
    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000)

    const articlesResult = await findArticles({
      filter: {
        synthesizedEventId: { $exists: false },
        createdAt: { $gte: twentyFourHoursAgo },
      },
      limit: 10,
    })

    if (!articlesResult.success) throw new Error(articlesResult.error)
    const stuckArticles = articlesResult.data

    if (stuckArticles.length === 0) {
      logger.info(
        '❌ DIAGNOSTIC FAILED: Could not find any articles from the last 24 hours that are missing a `synthesizedEventId`. This is unexpected.'
      )
      return
    }

    logger.info(
      colors.green(
        `✅ Found ${stuckArticles.length} potentially stuck articles. Displaying their properties:`
      )
    )

    console.log('\n--- Sample of Stuck Articles ---')
    console.table(
      stuckArticles.map((a) => ({
        _id: a._id.toString(),
        createdAt: a.createdAt.toISOString(),
        headline: a.headline.substring(0, 50) + '...',
        newspaper: a.newspaper,
        status: a.status,
        relevance_headline: a.relevance_headline,
        relevance_article: a.relevance_article,
      }))
    )
  } catch (error) {
    logger.error(
      { err: error },
      'A critical error occurred during the diagnostic script.'
    )
  }
}

diagnose()

```

## 📄 scripts/tools/get-db-stats.js
*Lines: 28, Size: 972 Bytes*

```javascript
// scripts/tools/get-db-stats.js
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { getDashboardStats } from '@headlines/data-access'

async function getStats() {
  await initializeScriptEnv()
  try {
    console.log('\n--- 📊 Database Statistics ---')
    const statsResult = await getDashboardStats()
    if (!statsResult.success) throw new Error(statsResult.error)

    const stats = statsResult.data

    console.table({
      'Active Sources': `${stats.sources.active} / ${stats.sources.total}`,
      'Active Watchlist Entities': stats.watchlist.total,
      'Total Articles': stats.articles.total.toLocaleString(),
      'Total Synthesized Events': stats.events.total.toLocaleString(),
      'Total Opportunities': stats.opportunities.total.toLocaleString(),
      'Active Subscribers': `${stats.users.active} / ${stats.users.total}`,
    })
  } catch (error) {
    console.error('Failed to fetch database stats:', error)
  }
}

getStats()

```

## 📄 scripts/tools/oppFactory.js
*Lines: 180, Size: 6.29 KB*

```javascript
// apps/pipeline/scripts/tools/oppFactory.js (v2 - Resilient Search Strategy)
/**
 * @command tools:opp-factory
 * @group Tools
 * @description Creates a rich opportunity dossier for a given individual by searching and scraping the web, then generating a seed file.
 * @example pnpm run tools:opp-factory -- --name "Ole Branaas"
 */
import { writeFileSync } from 'fs'
import path from 'path'
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { logger } from '@headlines/utils-shared'
import { performGoogleSearch, oppFactoryChain } from '@headlines/ai-services'
import { fetchPageWithPlaywright, browserManager } from '@headlines/scraper-logic'
import { JSDOM } from 'jsdom'
import { Readability } from '@mozilla/readability'
import colors from 'ansi-colors'
// --- START OF DEFINITIVE FIX ---
// Add the missing import for chromium from the playwright package.
import { chromium } from 'playwright'
// --- END OF DEFINITIVE FIX ---

const SEED_DIR = path.resolve(process.cwd(), 'apps/pipeline/opportunity_seeds')

async function fetchLinks(name) {
  logger.info(`[Step 1/4] 🔍 Performing Google Search for "${name}"...`)

  let results = []

  const specificQuery = `"${name}" billionaire OR founder OR investor family office net worth contact email site:no OR site:se`
  logger.info(`  -> Trying specific query: ${specificQuery}`)
  let searchResult = await performGoogleSearch(specificQuery, { numResults: 10 })

  if (searchResult.success && searchResult.results.length > 0) {
    results = searchResult.results
  } else {
    logger.warn(`  -> Specific query yielded no results. Broadening search...`)

    const broadRegionalQuery = `"${name}" site:no OR site:se`
    logger.info(`  -> Trying broad regional query: ${broadRegionalQuery}`)
    searchResult = await performGoogleSearch(broadRegionalQuery, { numResults: 10 })
    if (searchResult.success && searchResult.results.length > 0) {
      results = searchResult.results
    } else {
      logger.warn(`  -> Broad regional query also failed. Searching globally...`)

      const globalQuery = `"${name}" business`
      logger.info(`  -> Trying global query: ${globalQuery}`)
      searchResult = await performGoogleSearch(globalQuery, { numResults: 10 })
      if (searchResult.success && searchResult.results.length > 0) {
        results = searchResult.results
      }
    }
  }

  if (results.length === 0) {
    throw new Error('All search strategies failed to return any organic results.')
  }

  const links = results.map((r) => r.link)
  logger.info(`  -> Found ${links.length} relevant links to process.`)
  return links
}

async function scrapePages(urls) {
  logger.info(`[Step 2/4]  Scraping ${urls.length} pages for full text content...`)
  const browser = await chromium.launch({ headless: true })
  const ctx = await browser.newContext({
    userAgent: 'Mozilla/5.0 (compatible; HeadlinesOppBot/1.0)',
  })
  const texts = []

  for (const url of urls) {
    try {
      const p = await ctx.newPage()
      await p.goto(url, { waitUntil: 'domcontentloaded', timeout: 10000 })
      const html = await p.content()
      const doc = new JSDOM(html, { url })
      const reader = new Readability(doc.window.document)
      const art = reader.parse()
      if (art && art.textContent.length > 200) {
        texts.push({ url, text: art.textContent.replace(/\s+/g, ' ').trim() })
        logger.info(`  -> Successfully scraped ${url} (${art.length} chars)`)
      } else {
        logger.warn(`  -> Skipped ${url} (content too short or unreadable)`)
      }
      await p.close()
    } catch (e) {
      logger.warn(`  -> Failed to scrape ${url}: ${e.message}`)
    }
  }
  await browser.close()
  logger.info(`  -> Successfully extracted readable text from ${texts.length} pages.`)
  return texts
}

async function buildOpportunity(name, articles) {
  logger.info(`[Step 3/4] 🤖 Synthesizing dossier for "${name}"...`)
  const articles_text = articles
    .map((a, i) => `### Article ${i + 1} (${a.url})\n${a.text.slice(0, 12000)}`)
    .join('\n\n---\n\n')

  const result = await oppFactoryChain({ name, articles_text })

  if (result.error || !result.opportunities || result.opportunities.length === 0) {
    throw new Error(
      `AI Dossier Agent failed. Reason: ${result.error || 'No opportunity object returned'}`
    )
  }

  const opp = result.opportunities[0]

  delete opp.events
  delete opp.relatedOpportunities

  logger.info(`  -> AI synthesis complete.`)
  return opp
}

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('name', {
      alias: 'n',
      type: 'string',
      description: 'The full name of the individual to research.',
      demandOption: true,
    })
    .help().argv

  await initializeScriptEnv()
  await browserManager.initialize()

  const NAME = argv.name.trim()
  logger.info(colors.bold.cyan(`\n🏭 Starting Opportunity Factory for: ${NAME}\n`))

  const links = await fetchLinks(NAME)
  if (links.length === 0) {
    logger.error('Could not find any links to process. Exiting.')
    await browserManager.close()
    return
  }

  const texts = await scrapePages(links)
  if (texts.length === 0) {
    logger.error('Failed to scrape any readable content from the found links. Exiting.')
    await browserManager.close()
    return
  }

  const opp = await buildOpportunity(NAME, texts)

  logger.info('[Step 4/4] 📄 Generating output file...')

  const fileNameSafe = NAME.toLowerCase()
    .replace(/\s+/g, '.')
    .replace(/[^a-z0-9.]/g, '')
  const fileName = `${fileNameSafe}.js`
  const filePath = path.join(SEED_DIR, fileName)
  const varName = NAME.replace(/\s+/g, '').replace(/[^A-Za-z0-9]/g, '')

  const fileContent = `// Generated by OppFactory.js at ${new Date().toISOString()}\nconst ${varName}Opportunity = ${JSON.stringify(opp, null, 2)};\n\nexport default ${varName}Opportunity;\n`

  writeFileSync(filePath, fileContent)

  logger.info(colors.green.bold(`\n✅ Success! Dossier seed file saved to: ${filePath}`))
  console.log(colors.grey('\n--- Generated File Content ---'))
  console.log(colors.grey(fileContent))
  console.log(colors.grey('--------------------------'))
}

main()
  .catch((err) => {
    logger.fatal({ err }, 'Opportunity Factory script failed with a critical error.')
  })
  .finally(async () => {
    await browserManager.close()
    process.exit(0)
  })

```

## 📄 scripts/tools/purge-external-collections.sh
*Lines: 122, Size: 3.7 KB*

```bash
    
#!/bin/bash
# purge-external-collections.sh (version 1.0)
# This script identifies and deletes collections from the database that are NOT part of the monorepo's known schema.

# --- Find the monorepo root in a completely robust way ---
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
while [[ "$DIR" != "/" ]]; do
    if [ -f "$DIR/pnpm-workspace.yaml" ]; then
        MONOREPO_ROOT="$DIR"
        break
    fi
    DIR=$(dirname "$DIR")
done

if [ -z "$MONOREPO_ROOT" ]; then
    echo "❌ Critical Error: Could not find the monorepo root by searching for 'pnpm-workspace.yaml'."
    exit 1
fi

# --- Configuration and Pre-flight Checks ---
ENV_FILE="$MONOREPO_ROOT/.env"

if ! command -v mongosh &> /dev/null; then
    echo "❌ Error: 'mongosh' command-line tool not found. Please install MongoDB Shell."
    exit 1
fi

if [ ! -f "$ENV_FILE" ]; then
    echo "❌ Error: .env file not found in the monorepo root."
    exit 1
fi

set -a 
source <(grep -v '^#' "$ENV_FILE" | sed -e '/^$/d' -e 's/\r$//')
set +a

if [ -z "$MONGO_URI" ]; then
    echo "❌ Error: MONGO_URI is not set or could not be read from your .env file."
    exit 1
fi

# --- Main Logic ---

# 1. Define the list of collections that are known and should NOT be deleted.
KNOWN_COLLECTIONS=(
    "articles" "countries" "opportunities" "push_subscriptions" 
    "run_verdicts" "settings" "sources" "source_suggestions" 
    "subscribers" "synthesized_events" "watchlist_entities" "watchlist_suggestions"
)

echo "🔎 Analyzing database for external collections..."
echo "Known monorepo collections that will be KEPT:"
printf " - %s\n" "${KNOWN_COLLECTIONS[@]}"
echo ""

# 2. Get all collections currently in the database.
ALL_COLLECTIONS=$(mongosh "$MONGO_URI" --quiet --eval "db.getCollectionNames().join(' ')")
if [ $? -ne 0 ]; then
    echo "❌ Error: Failed to fetch collection names from the database."
    exit 1
fi

# 3. Calculate which collections to delete.
COLLECTIONS_TO_DELETE=()
for db_coll in $ALL_COLLECTIONS; do
    # Ignore internal system collections
    if [[ "$db_coll" == "system.views" ]]; then
        continue
    fi
    
    is_known=false
    for known_coll in "${KNOWN_COLLECTIONS[@]}"; do
        if [[ "$db_coll" == "$known_coll" ]]; then
            is_known=true
            break
        fi
    done

    if [ "$is_known" = false ]; then
        COLLECTIONS_TO_DELETE+=("$db_coll")
    fi
done

# 4. Present for Confirmation
if [ ${#COLLECTIONS_TO_DELETE[@]} -eq 0 ]; then
    echo "✅ No external collections found. Your database is clean."
    exit 0
fi

echo -e "\033[0;31m🚨 WARNING: DESTRUCTIVE ACTION 🚨\033[0m"
echo "The following ${#COLLECTIONS_TO_DELETE[@]} collection(s) were found in your database but are NOT part of the monorepo:"
printf " - \033[0;33m%s\033[0m\n" "${COLLECTIONS_TO_DELETE[@]}"
echo ""
echo "This action will permanently delete these collections and all their data."
echo -e "It is highly recommended to run the backup script first: \033[0;36m./apps/pipeline/scripts/mongo-backup.sh\033[0m"
echo ""

read -p "To confirm, please type 'DELETE' and press [Enter]: " confirmation

# 5. Execute Deletion
if [ "$confirmation" != "DELETE" ]; then
    echo "❌ Confirmation failed. Aborting operation."
    exit 1
fi

echo ""
echo "Confirmation received. Proceeding with deletion..."
for collection_to_delete in "${COLLECTIONS_TO_DELETE[@]}"; do
    echo "  -> Deleting collection: $collection_to_delete..."
    mongosh "$MONGO_URI" --quiet --eval "db.getCollection('$collection_to_delete').drop()"
    if [ $? -eq 0 ]; then
        echo -e "     \033[0;32m✅ Dropped successfully.\033[0m"
    else
        echo -e "     \033[0;31m❌ Failed to drop collection.\033[0m"
    fi
done

echo ""
echo "✅ Purge operation complete."

  
```

## 📄 scripts/watchlist/list.js
*Lines: 48, Size: 1.39 KB*

```javascript
// apps/pipeline/scripts/watchlist/list.js
/**
 * @command watchlist:list
 * @group Watchlist
 * @description List watchlist entities. Flags: --q <SearchQuery>
 */
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import { initializeScriptEnv } from '../seed/lib/script-init.js'
import { findWatchlistEntities } from '@headlines/data-access'
import colors from 'ansi-colors'

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('q', { type: 'string', description: 'Search query for entity name' })
    .help().argv

  await initializeScriptEnv()
  try {
    const filter = {}
    if (argv.q) {
      filter.name = new RegExp(argv.q, 'i')
    }

    const entitiesResult = await findWatchlistEntities(filter)
    if (!entitiesResult.success) throw new Error(entitiesResult.error)
    const entities = entitiesResult.data

    if (entities.length === 0) {
      console.log('No watchlist entities found.')
      return
    }

    const tableData = entities.map((e) => ({
      Name: e.name,
      Type: e.type,
      Status: e.status === 'active' ? colors.green('Active') : colors.yellow(e.status),
      Country: e.country || 'N/A',
      'Search Terms': (e.searchTerms || []).join(', '),
    }))
    console.log(`\n--- Watchlist Entities (${entities.length}) ---`)
    console.table(tableData)
  } catch (error) {
    console.error('An error occurred:', error.message)
  }
}
main()

```

## 📄 src/app.js
*Lines: 110, Size: 3.28 KB*

```javascript
// apps/pipeline/src/app.js
import path from 'path'
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'
import fs from 'fs'
import { fileURLToPath } from 'url'
import { createRequire } from 'module'
import pino from 'pino'
import { setLogger } from '@headlines/utils-shared'
import { initializeAuditLogger } from './utils/auditLogger.js'
import { runPipeline } from './orchestrator.js'
import mongoose from 'mongoose'

const require = createRequire(import.meta.url)
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const PROJECT_ROOT = path.resolve(__dirname, '../../..')
const logDirectory = path.join(PROJECT_ROOT, 'apps/pipeline/logs')
if (!fs.existsSync(logDirectory)) fs.mkdirSync(logDirectory, { recursive: true })

const pinoPrettyPath = require.resolve('pino-pretty')
const logFile = path.join(logDirectory, 'run.log')
try {
  fs.unlinkSync(logFile)
} catch (e) {
  if (e.code !== 'ENOENT') console.error('Could not clear old run log file:', e)
}
const consoleTransport = pino.transport({
  target: pinoPrettyPath,
  options: { colorize: true, translateTime: 'HH:mm:ss', ignore: 'pid,hostname,context' },
})
const fileTransport = pino.transport({
  target: pinoPrettyPath,
  options: {
    colorize: false,
    translateTime: 'YYYY/MM/DD HH:mm:ss',
    destination: logFile,
  },
})
const logger = pino(
  { level: 'trace' },
  pino.multistream([consoleTransport, fileTransport])
)
setLogger(logger)
initializeAuditLogger(logDirectory)

async function start() {
  const argv = yargs(hideBin(process.argv))
    .option('source', { alias: 's', type: 'string' })
    .option('country', { alias: 'c', type: 'string' })
    .option('deleteToday', { type: 'boolean' })
    .option('useTestPayload', { type: 'boolean' })
    .option('refresh', {
      type: 'boolean',
      description:
        'Finds and re-processes only the relevant articles from the last 24 hours.',
    })
    .option('skipdeepdive', {
      type: 'boolean',
      description:
        'Skips the expensive Stage 4.5 Opportunity Deep Dive for faster testing.',
    })
    .option('lean', {
      type: 'boolean',
      description:
        'Ultra-fast test mode. Assesses all headlines but only processes the single highest-scoring article through the entire pipeline.',
    })
    .option('test', {
      type: 'boolean',
      description:
        'Runs a full end-to-end pipeline test with a single, high-quality synthetic article, notifying only admins.',
    })
    .help().argv

  const paths = {
    debugHtmlDir: path.join(logDirectory, 'debug_html'),
  }

  const options = {
    ...argv,
    paths,
    countryFilter: argv.country,
    sourceFilter: argv.source,
  }

  logger.info('--- Pipeline Execution Flags ---')
  Object.entries(options).forEach(([key, value]) => {
    if (value) logger.info(`- ${key}: ${value}`)
  })
  logger.info('------------------------------------')

  let result
  try {
    result = await runPipeline(options)
  } catch (error) {
    logger.fatal({ err: error }, 'A top-level, unhandled exception occurred.')
    process.exit(1)
  }

  if (result && !result.success) {
    logger.warn(
      'Pipeline completed with one or more fatal errors. The process will now exit.'
    )
  } else {
    logger.info('Pipeline completed successfully. The process will now exit.')
  }
}

start()

```

## 📄 src/config/PEFirms.json
*Lines: 212, Size: 12.23 KB*

```json
[
  {
    "country": "Global PE",
    "flag_emoji": "🌐",
    "outlets": [
      {
        "name": "Apollo",
        "url": "https://www.apollo.com",
        "commentary": "Global alternative asset manager.",
        "labCheckPerformed": true,
        "analysis": {
          "urlDiscoveryMethod": "initial",
          "finalUrl": "https://www.apollo.com",
          "technology": "playwright + AI",
          "headlineSelectorMethod": "AI Structural Analysis",
          "headlineSelector": "a.cmp-insight-column-card__item__title--link, a.cmp-teaser__title-link, a.text-link-blck, a.cmp-navigation-featuredcontent__link",
          "headlinesFound": 21,
          "firstArticleUrl": "https://www.apollo.com/insights-news/insights/2025/06/mid-year-outlook-at-the-crossroads-of-stagflation-whats-next",
          "articleContentSelector": "main p",
          "sampleArticleLength": 8513,
          "aiInsights": {
            "pattern": "Headline links on this site share common traits: they usually use title-cased, descriptive text (often long) and live under /insights-news/ (either /insights/ or /pressreleases/) or the site’s feature/teaser areas. The CSS classes used for headlines include .cmp-insight-column-card__item__title--link (insight cards), .cmp-teaser__title-link (teasers/featured items), .text-link-blck (press releases/compact lists), and .cmp-navigation-featuredcontent__link (promoted featured content). Headlines often contain organization names, event names, or report titles and sometimes point to PDFs or IR pages.",
            "confidence": 0.9009523809523808
          },
          "notes": "Handled consent using persistent browser state."
        }
      },
      {
        "name": "KKR",
        "url": "https://www.kkr.com",
        "commentary": "Global investment company.",
        "labCheckPerformed": true,
        "analysis": {
          "urlDiscoveryMethod": "initial",
          "finalUrl": "https://www.kkr.com",
          "technology": "playwright + AI",
          "headlineSelectorMethod": "AI Structural Analysis",
          "headlineSelector": "a.article-teaser__link, a[href^=\"/insights/\"], a[href*=\"media.kkr.com/news-details\"]",
          "headlinesFound": 4,
          "firstArticleUrl": "https://www.kkr.com/insights/thoughts-from-the-road-asia-2025",
          "articleContentSelector": "article p",
          "sampleArticleLength": 2123,
          "aiInsights": {
            "pattern": "Headline links on this site appear in two primary patterns: 1) Insight/article teasers using the .article-teaser__link class with anchor text that begins with a content category (e.g., 'Macro Insights', 'Investment Insights'), followed by a concise headline and often a month/year and 'Learn More' suffix. These link URLs are under the /insights/ path with a readable slug. 2) Press releases use an external media subdomain (media.kkr.com) and a 'news-details' endpoint with a news_id GUID parameter. Navigation/utility links (about, invest, cookie policy, IR) use different selectors (generic a, cmp-button, .cmp-link) and shorter, non-article text.",
            "confidence": 0.9374999999999999
          },
          "notes": "Handled consent using persistent browser state."
        }
      },
      {
        "name": "PAI Partners",
        "url": "https://www.paipartners.com",
        "commentary": "European private equity firm.",
        "labCheckPerformed": true,
        "analysis": {
          "urlDiscoveryMethod": "initial",
          "finalUrl": "https://www.paipartners.com",
          "technology": "playwright + AI",
          "headlineSelectorMethod": "AI Structural Analysis",
          "headlineSelector": "a[href*=\"/mediaitem/\"]",
          "headlinesFound": 5,
          "firstArticleUrl": "https://www.paipartners.com/mediaitem/2025-annual-general-meetings/",
          "articleContentSelector": null,
          "sampleArticleLength": 0,
          "aiInsights": {
            "pattern": "Headline links share these characteristics: (1) URLs contain the segment '/mediaitem/' (site's press/news item pattern). (2) Anchor text is natural-language, headline-style (short-to-medium length, often starting with the organisation name or an active verb and containing proper nouns or numeric details). (3) The CSS selector for headline anchors is a plain 'a' within the news listing; navigation CTAs use distinct classes (e.g., 'a.btn') and case studies use different URL paths such as '/case-study/'.",
            "confidence": 0.95
          },
          "notes": "Handled consent using persistent browser state."
        }
      },
      {
        "name": "EQT Group",
        "url": "https://www.eqtgroup.com",
        "commentary": "Global investment organization.",
        "labCheckPerformed": true,
        "analysis": {
          "urlDiscoveryMethod": "initial",
          "finalUrl": "https://www.eqtgroup.com",
          "technology": "playwright + AI",
          "headlineSelectorMethod": "AI Structural Analysis",
          "headlineSelector": "Prefer URL-prefix + presentation-class combination to capture headlines while avoiding nav: \"a[href^='/thinq/'], a[href^='/news/']\". Optionally restrict to known article classes: \"a.p-6, a.bg-transparent, a.md\\:p-6, a[href^='/thinq/'], a[href^='/news/']\"",
          "headlinesFound": 18,
          "firstArticleUrl": "https://www.eqtgroup.com/thinq/private-markets/ipo-report-2025",
          "articleContentSelector": "main p",
          "sampleArticleLength": 2123,
          "aiInsights": {
            "pattern": "Headline links cluster under two main URL patterns: /thinq/ (editorial/insights, case-studies, education, opinion) and /news/ (press releases). Headlines tend to have: longer, descriptive anchor text (often >4 words), question or quoted formats, numeric values or company names, and appear with presentation classes such as a.p-6, a.bg-transparent, or a.md:p-6. Navigation and utility links are shorter (single words or short phrases like 'Private Capital', 'About') and often use a.w-full or a.bg-white selectors.",
            "confidence": 0.8833333333333332
          },
          "notes": "Handled consent using persistent browser state."
        }
      },
      {
        "name": "Egeria",
        "url": "https://egeriagroup.com",
        "commentary": "Dutch private equity firm."
      },
      {
        "name": "Rivean Capital (Gilde)",
        "url": "https://www.riveancapital.com",
        "commentary": "Formerly Gilde Equity Management (GEM)."
      },
      {
        "name": "IK Partners (News & Insights)",
        "url": "https://www.ikpartners.com",
        "commentary": "Main press releases and portfolio updates."
      },
      {
        "name": "IK Partners (Portfolio News)",
        "url": "https://www.ikpartners.com/portfolio-company-news",
        "commentary": "Specific news archive for portfolio companies."
      },
      {
        "name": "Triton Partners",
        "url": "https://www.triton-partners.com",
        "commentary": "European private equity investment firm."
      },
      {
        "name": "Bridgepoint (News & Insights)",
        "url": "https://www.bridgepoint.eu",
        "commentary": "Corporate news and insights."
      },
      {
        "name": "Bridgepoint (Regulatory News)",
        "url": "https://www.bridgepoint.eu/shareholder-centre/regulatory-news",
        "commentary": "Live LSE regulatory news feed."
      },
      {
        "name": "Hg Capital",
        "url": "https://hgcapital.com",
        "commentary": "Software and services investor.",
        "labCheckPerformed": true,
        "analysis": {
          "urlDiscoveryMethod": "initial",
          "finalUrl": "https://hgcapital.com",
          "technology": "playwright + AI",
          "headlineSelectorMethod": "AI Structural Analysis",
          "headlineSelector": "article h2 a, article h3 a, .card__link, .post-card a, a[href*=\"/insights/\"], a[href*=\"/news/\"], a[href*=\"/case-studies/\"]",
          "headlinesFound": 1,
          "firstArticleUrl": "https://hgcapital.com/portfolio/case-studies/visma",
          "articleContentSelector": "main p",
          "sampleArticleLength": 3547,
          "aiInsights": {
            "pattern": "In this sample, genuine content/headline links are characterized by: (1) non-generic, descriptive anchor text (not repeated section labels like 'News & Insights'); (2) URLs that contain content paths (e.g., /portfolio/case-studies/, /insights/, /news/ or similar slugs) rather than top-level section or utility domains; and (3) selectors that are not the generic 'a' used for utilities (cookie consent) or site-wide buttons. Note the provided CSS selector (a.index-style__ButtonMain-sc-207d00b9-2) appears used for header/CTA buttons and repeated navigation, so it is less reliable alone for distinguishing article headlines.",
            "confidence": 0.9
          },
          "notes": "Handled consent using persistent browser state."
        }
      },
      {
        "name": "3i Group (Press Releases)",
        "url": "https://www.3i.com/media/press-releases/",
        "commentary": "Main corporate press releases."
      },
      {
        "name": "3i Group (Regulatory News)",
        "url": "https://www.3i.com/investors/regulatory-news/",
        "commentary": "Investor relations and regulatory news."
      },
      {
        "name": "CVC Capital Partners",
        "url": "https://www.cvc.com",
        "commentary": "Global private equity and credit."
      },
      {
        "name": "Ardian (News & Insights)",
        "url": "https://www.ardian.com/news-insights",
        "commentary": "Thought leadership and news articles.",
        "labCheckPerformed": true,
        "analysis": {
          "urlDiscoveryMethod": "initial",
          "finalUrl": "https://www.ardian.com/news-insights",
          "technology": "playwright + AI",
          "headlineSelectorMethod": "AI Structural Analysis",
          "headlineSelector": "a[href^=\"/news-insights/\"]:not(.tag):not(.btn-outline), a[href*=\"-report\"], a[href*=\"-years\"], article h2 a, article h3 a",
          "headlinesFound": 4,
          "firstArticleUrl": "https://www.ardian.com/news-insights/responsible-finance?category=202",
          "articleContentSelector": "div[class*=\"content\"] p",
          "sampleArticleLength": 1528,
          "aiInsights": {
            "pattern": "True news/headline links in this sample mostly target the '/news-insights/' path or external microsites dedicated to reports/campaigns. Headline-like anchors tend to be simple 'a' elements or prominent CTAs (e.g., 'a.btn-outline'). Tag/filter links use a distinct class ('a.tag') and cookie/privacy/vendor links use cookie dialog-specific selectors—these are not headlines. Headlines and content CTAs use descriptive, content-focused text (topic names, report titles or campaign domains) rather than generic utility/legal phrasing.",
            "confidence": 0.65
          },
          "notes": "Handled consent using persistent browser state."
        }
      },
      {
        "name": "Ardian (Press Releases)",
        "url": "https://www.ardian.com/press-releases",
        "commentary": "Official press releases.",
        "labCheckPerformed": true,
        "analysis": {
          "urlDiscoveryMethod": "initial",
          "finalUrl": "https://www.ardian.com/press-releases",
          "technology": "playwright + AI",
          "headlineSelectorMethod": "AI Structural Analysis",
          "headlineSelector": "a[href^='/news-insights/press-releases/']",
          "headlinesFound": 7,
          "firstArticleUrl": "https://www.ardian.com/news-insights/press-releases/diot-siaci-announces-new-ownership-structure-ardian-burrus-group-and",
          "articleContentSelector": "div[class*=\"content\"] p",
          "sampleArticleLength": 7719,
          "aiInsights": {
            "pattern": "Headlines are sentence-style, descriptive strings (often starting with firm names or action verbs like 'announces', 'enters', 'launches', 'acquire', 'finalizes') and typically include company names, transaction or product details, and locations/numbers. Their URLs consistently live under the /news-insights/press-releases/ path. The selector in the provided data is a generic 'a', implying these headline links are simple anchor tags within a news/press listing.",
            "confidence": 0.9585714285714287
          },
          "notes": "Handled consent using persistent browser state."
        }
      }
    ]
  }
]
```

## 📄 src/config/dynamicConfig.js
*Lines: 68, Size: 2.17 KB*

```javascript
// apps/pipeline/src/config/dynamicConfig.js (version 3.2.0)
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'
import { Source, WatchlistEntity, Country } from '@headlines/models'
import { logger } from '@headlines/utils-shared'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

export const configStore = {
  newspaperToCountryMap: new Map(),
  watchlistEntities: new Map(),
  activeCountries: new Set(),
  searchTermToEntityMap: new Map(),
}

async function loadConfigFromDB() {
  logger.info('Loading dynamic configuration from database...')
  Object.keys(configStore).forEach((key) => {
    const store = configStore[key]
    if (store instanceof Map || store instanceof Set) store.clear()
    if (Array.isArray(store)) store.length = 0
  })

  const [sources, watchlistItems, activeCountries] = await Promise.all([
    Source.find().lean(),
    WatchlistEntity.find({ status: 'active' }).lean(),
    Country.find({ status: 'active' }).select('name').lean(),
  ])

  for (const country of activeCountries) {
    configStore.activeCountries.add(country.name)
  }

  for (const source of sources) {
    configStore.newspaperToCountryMap.set(source.name, source.country)
  }

  for (const item of watchlistItems) {
    const nameKey = item.name.toLowerCase().trim()
    if (!configStore.watchlistEntities.has(nameKey)) {
      configStore.watchlistEntities.set(nameKey, item)
    }

    if (item.searchTerms && item.searchTerms.length > 0) {
      for (const term of item.searchTerms) {
        const termKey = term.toLowerCase().trim()
        if (!configStore.searchTermToEntityMap.has(termKey)) {
          configStore.searchTermToEntityMap.set(termKey, item)
        }
      }
    }
  }

  logger.info(
    `Dynamic config loaded:\n    - Sources: ${sources.length}\n    - Watchlist Items: ${configStore.watchlistEntities.size}\n    - Active Countries: ${configStore.activeCountries.size}\n    - Search Terms: ${configStore.searchTermToEntityMap.size}`
  )
}

export async function refreshConfig() {
  try {
    await loadConfigFromDB()
  } catch (error) {
    logger.error({ err: error }, 'Failed to refresh dynamic configuration from DB.')
  }
}

```

## 📄 src/config/index.js
*Lines: 50, Size: 1.49 KB*

```javascript
// apps/pipeline/src/config/index.js (version 6.0.0)
// Use the server-safe entrypoint for all config imports in the pipeline
import { env, settings } from '@headlines/config'

// --- Re-export all shared env and settings for local pipeline use ---
export * from '@headlines/config'

// --- App-Specific Static Constants (Not dynamically configurable) ---
export const IS_REFRESH_MODE = process.env.REFRESH_MODE === 'true'

// --- Static Thresholds (less likely to be changed by admin) ---
export const MAX_ARTICLE_CHARS = 30000
export const LLM_CONTEXT_MAX_CHARS = 25000
export const MIN_HEADLINE_CHARS = 5
export const MAX_HEADLINE_CHARS = 500
export const AI_BATCH_SIZE = 6

// --- Re-export SMTP and Email configs from env for convenience ---
export const SMTP_CONFIG = {
  host: env.SMTP_HOST,
  port: env.SMTP_PORT,
  secure: env.SMTP_SECURE,
  auth: {
    user: env.SMTP_USER,
    pass: env.SMTP_PASS,
  },
  fromAddress: env.SMTP_FROM_ADDRESS || env.SMTP_USER,
  fromName: env.SMTP_FROM_NAME,
  pool: true,
  maxConnections: 5,
  maxMessages: 100,
  rateLimit: 10,
}

export const EMAIL_CONFIG = {
  templateName: 'wealthEvents',
  subject: 'New Nordic Banking Opportunities Detected',
  language: 'en',
  brandName: 'Your Wealth Watch',
  companyAddress: 'Wealth Watch Inc., Paris, France',
  unsubscribeUrl: '#',
}

export const SUPERVISOR_EMAIL_CONFIG = {
  templateName: 'supervisorReport',
  subject: '⚙️ Hourly Headlines Processing Run Summary',
  language: 'en',
  brandName: 'Headlines Processing Bot',
}

```

## 📄 src/modules/dataStore/index.js
*Lines: 244, Size: 8.74 KB*

```javascript
// apps/pipeline/src/modules/dataStore/index.js
import { Pinecone } from '@pinecone-database/pinecone'
import { logger } from '@headlines/utils-shared'
import { generateEmbedding } from '@headlines/ai-services'
import { env } from '@headlines/config'
import { Opportunity, SynthesizedEvent } from '@headlines/models'
import {
  bulkWriteEvents,
  bulkWriteArticles,
  findEventsByKeys,
  findArticlesByLinks,
  findArticles,
} from '@headlines/data-access'

const { PINECONE_API_KEY, PINECONE_INDEX_NAME } = env

if (!PINECONE_API_KEY) throw new Error('Pinecone API Key is missing!')
const pc = new Pinecone({ apiKey: PINECONE_API_KEY })
const pineconeIndex = pc.index(PINECONE_INDEX_NAME)

/**
 * Saves pipeline results to MongoDB and Pinecone
 * @param {Array} articlesToSave - Articles to upsert
 * @param {Array} eventsToSave - Events to upsert
 * @returns {Promise<Object>} Result with savedEvents array
 */
export async function savePipelineResults(articlesToSave, eventsToSave) {
  logger.info(`Committing pipeline results to databases (MongoDB & Pinecone)...`)
  let savedEvents = []
  const pineconeVectors = []

  try {
    // ===== STEP 1: Save Events (RE-ARCHITECTED FOR RELIABILITY) =====
    if (eventsToSave && eventsToSave.length > 0) {
      // --- START OF DEFINITIVE, FINAL FIX ---
      // Abandoning bulkWrite for events. It is too unreliable for upserts where no changes occur.
      // This new loop uses findOneAndUpdate, which is atomic and GUARANTEES the document is returned,
      // solving the root cause of all downstream failures.
      let upsertedCount = 0
      let modifiedCount = 0
      for (const event of eventsToSave) {
        const cleanEventPayload =
          typeof event.toObject === 'function' ? event.toObject() : { ...event }

        delete cleanEventPayload._id
        delete cleanEventPayload.__v
        delete cleanEventPayload.createdAt

        cleanEventPayload.emailed = false
        cleanEventPayload.updatedAt = new Date()

        const result = await SynthesizedEvent.findOneAndUpdate(
          { event_key: event.event_key },
          {
            $set: cleanEventPayload,
            $setOnInsert: { createdAt: new Date() },
          },
          { upsert: true, new: true, runValidators: true, lean: true }
        )
        if (result) {
          savedEvents.push(result)
          // Check if it was an insert or an update for logging
          if (result.createdAt.getTime() === result.updatedAt.getTime()) {
            upsertedCount++
          } else {
            modifiedCount++
          }
        }
      }
      logger.info(
        `MongoDB Event commit complete. Upserted: ${upsertedCount}, Modified: ${modifiedCount}.`
      )
      // --- END OF DEFINITIVE, FINAL FIX ---

      // Create Pinecone vectors for events
      for (const event of savedEvents) {
        const textToEmbed = `${event.synthesized_headline}\n${event.synthesized_summary}`
        const embedding = await generateEmbedding(textToEmbed)
        const eventDate = new Date(event.createdAt || Date.now())

        pineconeVectors.push({
          id: `event_${event._id.toString()}`,
          values: embedding,
          metadata: {
            type: 'event',
            headline: event.synthesized_headline,
            summary: event.synthesized_summary,
            country: Array.isArray(event.country)
              ? event.country.join(', ')
              : event.country,
            event_date: eventDate.toISOString(),
            key_individuals: (event.key_individuals || []).map((p) => p.name).join(', '),
            transactionType: event.transactionDetails?.transactionType || 'N/A',
            valuationUSD: event.transactionDetails?.valuationAtEventUSD || 0,
            tags: event.tags || [],
          },
        })
      }
    }

    // ===== STEP 2: Save Articles =====
    if (articlesToSave && articlesToSave.length > 0) {
      const articleOps = []
      const eventKeyToIdMap = new Map(savedEvents.map((e) => [e.event_key, e._id]))
      const articleIdToEventKeyMap = new Map()

      for (const event of eventsToSave) {
        for (const sourceArticle of event.source_articles) {
          const article = articlesToSave.find((a) => a.link === sourceArticle.link)
          if (article) {
            articleIdToEventKeyMap.set(article._id.toString(), event.event_key)
          }
        }
      }

      for (const article of articlesToSave) {
        if (article.relevance_article && article.assessment_article) {
          const textToEmbed = `${article.headline}\n${article.assessment_article}`
          article.embedding = await generateEmbedding(textToEmbed)
        }
        const articleIdStr = article._id.toString()
        if (article.embedding) {
          pineconeVectors.push({
            id: `article_${articleIdStr}`,
            values: article.embedding,
            metadata: {
              type: 'article',
              headline: article.headline,
              summary: article.assessment_article || 'No summary.',
              newspaper: article.newspaper,
              country: Array.isArray(article.country)
                ? article.country.join(', ')
                : article.country,
            },
          })
        }
        const eventKey = articleIdToEventKeyMap.get(articleIdStr)
        if (eventKey) {
          article.synthesizedEventId = eventKeyToIdMap.get(eventKey)
        }
        const { _id, ...dataToSet } = article
        delete dataToSet.articleContent
        delete dataToSet.embedding
        Object.keys(dataToSet).forEach(
          (key) => dataToSet[key] === undefined && delete dataToSet[key]
        )
        articleOps.push({
          updateOne: {
            filter: { link: article.link },
            update: { $set: dataToSet },
            upsert: true,
          },
        })
      }
      await bulkWriteArticles(articleOps)
      logger.info(
        `MongoDB Article commit complete. Upserted/Modified: ${articleOps.length}.`
      )
    }

    // ===== STEP 3: Upsert to Pinecone =====
    if (pineconeVectors.length > 0) {
      await pineconeIndex.upsert(pineconeVectors)
      logger.info(`Pinecone commit complete. Upserted ${pineconeVectors.length} vectors.`)
    }

    return { success: true, savedEvents }
  } catch (error) {
    logger.fatal(
      { err: error },
      'CRITICAL: Failed to commit pipeline results to the databases.'
    )
    return { success: false, savedEvents: [] }
  }
}

export async function saveOpportunitiesToPinecone(savedOpportunities) {
  if (!savedOpportunities || savedOpportunities.length === 0) {
    logger.info('No opportunities to save to Pinecone.')
    return true
  }
  try {
    const pineconeVectors = []
    const opportunityDocs = await Opportunity.find({
      _id: { $in: savedOpportunities.map((o) => o._id) },
    }).lean()
    for (const opp of opportunityDocs) {
      if (opp.embedding && opp.embedding.length > 0) {
        pineconeVectors.push({
          id: `opportunity_${opp._id.toString()}`,
          values: opp.embedding,
          metadata: {
            type: 'opportunity',
            headline: opp.reachOutTo,
            summary:
              (Array.isArray(opp.whyContact)
                ? opp.whyContact.join(' ')
                : opp.whyContact) || '',
            country: Array.isArray(opp.basedIn) ? opp.basedIn.join(', ') : opp.basedIn,
            wealthOrigin: opp.profile?.wealthOrigin || 'N/A',
          },
        })
      }
    }
    if (pineconeVectors.length > 0) {
      await pineconeIndex.upsert(pineconeVectors)
      logger.info(
        `Pinecone opportunity commit complete. Upserted ${pineconeVectors.length} opportunity vectors.`
      )
    }
    return true
  } catch (error) {
    logger.error({ err: error }, 'Failed to save opportunities to Pinecone')
    return false
  }
}

export async function filterFreshArticles(articles, isRefreshMode = false) {
  if (!articles || articles.length === 0) return []
  const scrapedLinks = articles.map((a) => a.link)

  if (isRefreshMode) {
    logger.warn('REFRESH MODE: All scraped articles will be re-processed.')
    const result = await findArticles({
      filter: { link: { $in: scrapedLinks } },
    })
    if (!result.success) throw new Error(result.error)
    const existingArticlesMap = new Map(result.data.map((a) => [a.link, a]))
    return articles.map((scrapedArticle) => {
      const existingArticle = existingArticlesMap.get(scrapedArticle.link)
      return existingArticle || scrapedArticle
    })
  }

  const result = await findArticlesByLinks(scrapedLinks)
  if (!result.success) throw new Error(result.error)
  const existingLinks = new Set(result.data.map((a) => a.link))
  const freshArticles = articles.filter((a) => !existingLinks.has(a.link))
  logger.info(
    `Filtering complete. Found ${existingLinks.size} existing articles, ${freshArticles.length} are fresh.`
  )
  return freshArticles
}

```

## 📄 src/modules/email/components/articleFormatter.js
*Lines: 87, Size: 3.42 KB*

```javascript
// apps/pipeline/src/modules/email/components/articleFormatter.js (version 2.0.0)
import { logger } from '@headlines/utils-shared'
import { truncateString } from '@headlines/utils-shared'

function createArticleCard(article) {
  const {
    link,
    headline,
    source,
    contacts,
    summary,
    assessmentText,
    relevanceScore,
    callToActionText,
  } = article

  const scoreColor =
    relevanceScore >= 80 ? '#27ae60' : relevanceScore >= 50 ? '#f39c12' : '#c0392b'

  const contactsHtml =
    contacts && contacts.length > 0
      ? `<p style="margin: 0 0 15px; font-size: 14px; color: #555;"><strong>Contacts:</strong> ${contacts.join(', ')}</p>`
      : ''

  return `
    <div style="border: 1px solid #e0e0e0; border-radius: 8px; margin-bottom: 20px; padding: 20px; background-color: #ffffff; box-shadow: 0 2px 4px rgba(0,0,0,0.05);">
        <h3 style="margin-top: 0; margin-bottom: 10px; font-size: 18px; color: #333;">
            <a href="${link}" style="color: #007bff; text-decoration: none;">${headline}</a>
        </h3>
        <p style="margin: 0 0 15px; font-size: 14px; color: #777;"><strong>Source:</strong> ${source}</p>
        ${contactsHtml}
        <p style="margin: 0 0 15px; font-size: 15px; color: #555; line-height: 1.6;">${summary}</p>
        <div style="background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 6px; padding: 15px; margin-bottom: 15px;">
            <p style="margin: 0; font-size: 14px; color: #333;">
                <strong>System Assessment:</strong> <span style="font-weight: bold; color: ${scoreColor};">[Score: ${relevanceScore}]</span> ${assessmentText}
            </p>
        </div>
        <a href="${link}" style="display: inline-block; background-color: #007bff; color: #ffffff; padding: 10px 15px; border-radius: 5px; text-decoration: none; font-weight: bold; font-size: 14px;">
            ${callToActionText}
        </a>
    </div>
    `
}

export function formatArticleForEmail(article) {
  if (!article || typeof article !== 'object' || !article.link || !article.headline) {
    logger.warn(`formatArticleForEmail: Invalid article object provided.`, {
      articlePreview: article,
    })
    return `<p style="color:red;">Error: Article data was invalid.</p>`
  }

  const genericArticleData = {
    link: article.link,
    headline: article.headline,
    source: article.source || article.newspaper || 'N/A',
    contacts: article.contacts || [],
    summary: 'No summary available.',
    assessmentText:
      article.assessment_article ||
      article.assessment_headline ||
      'Assessment not available.',
    relevanceScore: article.relevance_article ?? article.relevance_headline ?? 'N/A',
    callToActionText: 'Read Full Article →',
  }

  if (article.articleContent && typeof article.articleContent === 'object') {
    const { contents } = article.articleContent
    if (contents && Array.isArray(contents) && contents.length > 0) {
      genericArticleData.summary = truncateString(contents.join(' '), 250)
    }
  }

  if (genericArticleData.summary === 'No summary available.') {
    genericArticleData.summary = truncateString(genericArticleData.assessmentText, 250)
  }

  try {
    return createArticleCard(genericArticleData)
  } catch (error) {
    logger.error(`Error creating article card for email: "${article.headline}"`, {
      errorMessage: error.message,
    })
    return `<p style="color:red;">Error formatting article: ${truncateString(article.headline, 50)}</p>`
  }
}

```

## 📄 src/modules/email/components/emailBodyBuilder.js
*Lines: 143, Size: 6.42 KB*

```javascript
// apps/pipeline/src/modules/email/components/emailBodyBuilder.js
import { logger } from '@headlines/utils-shared'
import { EMAIL_CONFIG } from '../../../config/index.js'
import { formatEventForEmail } from './eventFormatter.js'
import { formatOpportunityForEmail } from './opportunityFormatter.js' // IMPORTED
import { getCountryFlag } from '@headlines/utils-shared'

function createEmailWrapper(bodyContent, subject) {
  return `
    <!DOCTYPE html>
    <html lang="en">
        <head>
            <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
            <title>${subject}</title>
            <style type="text/css">
                body { margin: 0; padding: 0; background-color: #0d1117; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; }
                .content-table { width: 100%; max-width: 640px; }
                .main-heading { color: #EAEAEA; font-weight: 600; }
                .paragraph { color: #cccccc; line-height: 1.7; }
                .button { background-color: #238636; border-radius: 6px; }
                .button a { color: #ffffff; text-decoration: none; display: inline-block; width: 100%; text-align: center; }
                .footer-text { color: #888888; }
                @media only screen and (max-width: 600px) {
                    .content-table { width: 100% !important; }
                    .content-background { padding: 20px 15px !important; }
                }
            </style>
        </head>
        <body style="margin: 0; padding: 0; background-color: #0d1117;">
            <table role="presentation" border="0" cellpadding="0" cellspacing="0" width="100%">
                <tr>
                    <td align="center" style="padding: 20px 0;">
                        ${bodyContent}
                    </td>
                </tr>
            </table>
        </body>
    </html>
  `
}

export async function createPersonalizedEmailBody(
  user,
  eventsByCountry,
  opportunitiesByCountry, // ADDED
  subject,
  intro
) {
  logger.info(
    { user: user.email, countries: Object.keys(eventsByCountry) },
    'Initiating email body generation.'
  )

  const hasEvents = eventsByCountry && Object.keys(eventsByCountry).length > 0
  const hasOpps = opportunitiesByCountry && Object.keys(opportunitiesByCountry).length > 0

  if (!user || (!hasEvents && !hasOpps)) {
    logger.warn('createPersonalizedEmailBody: Missing user or content data.')
    return null
  }

  const bulletsHtml = intro.bullets
    .map((b) => `<li style="margin-bottom: 10px;">${b}</li>`)
    .join('')

  const signoffHtml = Array.isArray(intro.signoff)
    ? intro.signoff.join('<br>')
    : intro.signoff

  const introHtml = `
    <h1 class="main-heading" style="margin:0 0 20px 0; font-size: 24px; font-weight: bold;">${intro.greeting}</h1>
    <p class="paragraph" style="margin:0 0 25px 0; font-size: 15px;">${intro.body}</p>
    <ul class="paragraph" style="margin:0 0 25px 0; font-size: 15px; padding-left: 20px;">${bulletsHtml}</ul>
    <p class="paragraph" style="margin:0 0 25px 0; font-size: 15px;">${signoffHtml}</p>
  `

  // --- START OF MODIFICATION ---
  let formattedContentHtml = ''
  const allCountries = [
    ...new Set([...Object.keys(eventsByCountry), ...Object.keys(opportunitiesByCountry)]),
  ].sort()

  for (const country of allCountries) {
    const flag = getCountryFlag(country)
    formattedContentHtml += `<tr><td style="padding: 30px 0 10px 0;"><h2 style="margin:0; font-size: 24px; font-weight: 500; color: #EAEAEA;">${flag} ${country}</h2></td></tr>`

    if (opportunitiesByCountry[country]) {
      formattedContentHtml += `<tr><td><h3 style="margin:10px 0; font-size: 18px; color: #4CAF50;">Actionable Opportunities</h3></td></tr>`
      const oppPromises = opportunitiesByCountry[country].map(formatOpportunityForEmail)
      const oppResults = await Promise.allSettled(oppPromises)
      oppResults.forEach((result) => {
        if (result.status === 'fulfilled') {
          formattedContentHtml += `<tr><td>${result.value}</td></tr>`
        }
      })
    }

    if (eventsByCountry[country]) {
      formattedContentHtml += `<tr><td><h3 style="margin:10px 0; font-size: 18px; color: #58a6ff;">Synthesized Events</h3></td></tr>`
      const eventPromises = eventsByCountry[country].map(formatEventForEmail)
      const eventResults = await Promise.allSettled(eventPromises)
      eventResults.forEach((result) => {
        if (result.status === 'fulfilled') {
          formattedContentHtml += `<tr><td>${result.value}</td></tr>`
        }
      })
    }
  }
  // --- END OF MODIFICATION ---

  const mainContent = `
    <div class="content-table" style="margin:0 auto;">
      <table role="presentation" style="width:100%;border-collapse:collapse;border:0;border-spacing:0;">
          <tr>
              <td style="padding:36px 30px;" class="content-background">
                  <table role="presentation" style="width:100%;border-collapse:collapse;border:0;border-spacing:0;">
                      <tr>
                          <td>
                              ${introHtml}
                          </td>
                      </tr>
                      <tr>
                        <td align="center" style="padding: 10px 0 30px 0;">
                           <table role="presentation" border="0" cellspacing="0" cellpadding="0"><tr><td class="button" style="padding:14px 28px;"><a href="https://headlines-client.vercel.app" target="_blank" style="font-size: 16px;">View Full Dashboard</a></td></tr></table>
                        </td>
                      </tr>
                      ${formattedContentHtml}
                  </table>
              </td>
          </tr>
          <tr>
              <td style="padding:30px;">
                  <table role="presentation" style="width:100%;border-collapse:collapse;border:0;border-spacing:0;"><tr><td align="center"><p class="footer-text" style="margin:0;font-size:12px;">${EMAIL_CONFIG.brandName} | ${EMAIL_CONFIG.companyAddress}</p><p class="footer-text" style="margin:10px 0 0 0;font-size:12px;"><a href="${EMAIL_CONFIG.unsubscribeUrl}" style="color:#888888;text-decoration:underline;">Unsubscribe</a></p></td></tr></table>
              </td>
          </tr>
      </table>
    </div>`

  logger.info(`Successfully generated email body for ${user.email}.`)
  return createEmailWrapper(mainContent, subject)
}

```

## 📄 src/modules/email/components/eventFormatter.js
*Lines: 162, Size: 6.86 KB*

```javascript
// apps/pipeline/src/modules/email/components/eventFormatter.js
import { logger } from '@headlines/utils-shared'
import { Opportunity } from '@headlines/models'

const sourceIcons = {
  rag_db: '🗄️',
  wikipedia: '🌐',
  news_api: '📰',
}

function formatEnrichmentSources(sources = []) {
  if (sources.length === 0) return ''
  const icons = sources.map((s) => sourceIcons[s] || '❓').join(' ')
  return `<span style="font-size: 14px; margin-left: 12px; vertical-align: middle;">${icons}</span>`
}

async function getOpportunitiesForEvent(eventId) {
  try {
    if (!eventId) return []
    return await Opportunity.find({ events: eventId }).lean()
  } catch (error) {
    logger.error(
      { err: error, eventId },
      'Failed to fetch opportunities for an event card.'
    )
    return []
  }
}

// NEW: Helper component for transaction details
function formatTransactionDetails(details) {
  if (!details) return ''

  const detailRow = (label, value, unit = '') => {
    if (value === null || value === undefined) return ''
    return `<div style="font-size: 13px; color: #bbbbbb; margin-bottom: 4px;"><strong>${label}:</strong> ${value}${unit}</div>`
  }

  const flow = details.liquidityFlow
  const flowText = flow?.nature ? `${flow.nature} (~$${flow.approxAmountUSD}M)` : ''

  return `
    <tr>
        <td style="padding: 16px 0 8px; border-top: 1px solid #444444;">
            <p style="margin:0; font-size: 14px; color: #D4AF37; font-weight: 600;">Transaction Details</p>
        </td>
    </tr>
    <tr>
        <td>
            ${detailRow('Type', details.transactionType)}
            ${detailRow('Valuation', details.valuationAtEventUSD, 'M USD')}
            ${detailRow('Ownership Change', details.ownershipPercentageChange, '%')}
            ${detailRow('Liquidity Flow', flowText)}
        </td>
    </tr>
  `
}

async function createEventBriefCard(event) {
  const {
    _id,
    synthesized_headline,
    synthesized_summary,
    advisorSummary, // MODIFIED
    source_articles,
    highest_relevance_score,
    enrichmentSources,
    eventClassification,
    transactionDetails, // NEW
    tags, // NEW
  } = event

  const opportunities = await getOpportunitiesForEvent(_id)
  const scoreColor =
    highest_relevance_score >= 80
      ? '#4CAF50'
      : highest_relevance_score >= 50
        ? '#FFC107'
        : '#F44336'
  const scoreTextShadow = `0 0 8px ${scoreColor}40`

  const classificationHtml = eventClassification
    ? `<div style="margin-top: 8px; display: inline-block; padding: 3px 10px; background-color: rgba(212, 175, 55, 0.1); border: 1px solid rgba(212, 175, 55, 0.2); border-radius: 99px; font-size: 11px; font-weight: 600; color: #D4AF37; text-transform: uppercase; letter-spacing: 0.5px;">${eventClassification}</div>`
    : ''
  const tagsHtml =
    tags && tags.length > 0
      ? `<div style="margin-top: 8px; display: flex; flex-wrap: wrap; gap: 6px;">${tags.map((tag) => `<span style="padding: 2px 8px; background-color: #333; border-radius: 4px; font-size: 11px; color: #bbb;">${tag}</span>`).join('')}</div>`
      : ''

  const opportunitiesHtml =
    opportunities?.length > 0
      ? `
    <tr><td style="padding: 16px 0 8px; border-top: 1px solid #444444;"><p style="margin:0; font-size: 14px; color: #D4AF37; font-weight: 600;">Related Opportunities</p></td></tr>
    <tr><td>${opportunities.map((opp) => `<div style="font-size: 14px; color: #cccccc; line-height: 1.6; margin-bottom: 8px;"><strong>${opp.reachOutTo}</strong> (~$${opp.likelyMMDollarWealth}M) - <em>${opp.contactDetails?.role || 'Role not specified'}</em></div>`).join('')}</td></tr>`
      : ''

  const reasoningHtml = advisorSummary
    ? `
    <tr><td style="padding: 16px 0 0; border-top: 1px solid #444444;"><p style="margin:0; font-size: 12px; color: #a0a0a0; font-style: italic;"><strong>Advisor Note:</strong> ${advisorSummary}</p></td></tr>`
    : ''

  const sourcesHtml = (source_articles || [])
    .map(
      (article) =>
        `<tr><td style="padding: 4px 0;"><a href="${article.link}" style="color: #a0a0a0; text-decoration: none; font-size: 13px;">${article.newspaper}: ${article.headline}</a></td></tr>`
    )
    .join('')

  return `
    <div style="background-color: #1E1E1E; border-radius: 12px; margin-bottom: 25px; padding: 25px; border: 1px solid #333333; box-shadow: 0 10px 25px rgba(0,0,0,0.3);">
        <table role="presentation" style="width:100%;border-collapse:collapse;border:0;border-spacing:0;">
            <tr>
                <td style="padding-bottom: 15px;">
                    <table role="presentation" style="width:100%;border-collapse:collapse;border:0;border-spacing:0;">
                        <tr>
                            <td style="width: 70px; vertical-align: top;" valign="top">
                                <p style="font-size: 28px; font-weight: 700; color: ${scoreColor}; margin: 0; text-shadow: ${scoreTextShadow};">${highest_relevance_score}</p>
                                <p style="font-size: 12px; color: #a0a0a0; margin: 0;">Score</p>
                                ${classificationHtml}
                                ${tagsHtml}
                            </td>
                            <td style="padding-left: 20px;">
                                <h2 style="margin:0; font-size: 20px; font-weight: 600; color: #EAEAEA; line-height: 1.4;">${synthesized_headline}${formatEnrichmentSources(enrichmentSources)}</h2>
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
            <tr><td style="padding-bottom: 20px;"><p style="margin:0; font-size: 16px; color: #cccccc; line-height: 1.7;">${synthesized_summary}</p></td></tr>
            ${formatTransactionDetails(transactionDetails)}
            ${opportunitiesHtml}
            <tr><td style="padding: 16px 0 8px; border-top: 1px solid #444444;"><p style="margin:0; font-size: 14px; color: #D4AF37; font-weight: 600;">Source Articles</p></td></tr>
            <tr><td><table role="presentation" style="width:100%;border-collapse:collapse;border:0;border-spacing:0;">${sourcesHtml}</table></td></tr>
            ${reasoningHtml}
        </table>
    </div>`
}

export async function formatEventForEmail(event) {
  logger.info(
    { event: { _id: event._id, headline: event.synthesized_headline } },
    'Formatting event card for email.'
  )
  if (!event || typeof event !== 'object' || !event.synthesized_headline) {
    logger.warn(`formatEventForEmail: Invalid event object provided.`, {
      eventPreview: event,
    })
    throw new Error('Invalid event object provided to formatEventForEmail.')
  }
  try {
    const cardHtml = await createEventBriefCard(event)
    logger.info({ eventId: event._id }, 'Successfully formatted event card.')
    return cardHtml
  } catch (error) {
    logger.error(`Error creating event card for email: "${event.synthesized_headline}"`, {
      errorMessage: error.message,
      stack: error.stack,
    })
    throw error
  }
}

```

## 📄 src/modules/email/components/opportunityFormatter.js
*Lines: 89, Size: 3.59 KB*

```javascript
// packages/pipeline/src/modules/email/components/opportunityFormatter.js
import { logger, getCountryFlag } from '@headlines/utils-shared'

function createOpportunityCard(opportunity) {
  const { reachOutTo, contactDetails, lastKnownEventLiquidityMM, basedIn, whyContact } =
    opportunity

  const flags = Array.isArray(basedIn)
    ? basedIn.map(getCountryFlag).join(' ')
    : getCountryFlag(basedIn)

  const whyContactHtml = (whyContact || [])
    .map(
      (reason) =>
        `<li style="margin-bottom: 8px; color: #dddddd; line-height: 1.5;">${reason}</li>`
    )
    .join('')

  return `
    <div style="background-color: #1A2E27; border-radius: 12px; margin-bottom: 25px; padding: 25px; border: 1px solid #2A4F3A; box-shadow: 0 10px 25px rgba(0,0,0,0.3);">
        <table role="presentation" style="width:100%;border-collapse:collapse;border:0;border-spacing:0;">
            <tr>
                <td style="padding-bottom: 15px;">
                    <table role="presentation" style="width:100%;border-collapse:collapse;border:0;border-spacing:0;">
                        <tr>
                            <td style="width: 70px; vertical-align: top;" valign="top">
                                <p style="font-size: 28px; font-weight: 700; color: #4CAF50; margin: 0;">${
                                  lastKnownEventLiquidityMM
                                    ? `$${lastKnownEventLiquidityMM}M`
                                    : 'N/A'
                                }</p>
                                <p style="font-size: 12px; color: #a0a0a0; margin: 0;">Est. Liquidity</p>
                            </td>
                            <td style="padding-left: 20px;">
                                <h2 style="margin:0; font-size: 20px; font-weight: 600; color: #EAEAEA; line-height: 1.4;">${flags} ${reachOutTo}</h2>
                                <p style="margin: 4px 0 0; font-size: 14px; color: #bbbbbb;">${
                                  contactDetails?.role || 'Key Principal'
                                } at <strong>${
                                  contactDetails?.company || 'N/A'
                                }</strong></p>
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
            <tr>
              <td style="padding: 16px 0 8px; border-top: 1px solid #444444;">
                  <p style="margin:0; font-size: 14px; color: #4CAF50; font-weight: 600;">Actionable Insights (Why Contact)</p>
              </td>
            </tr>
            <tr>
              <td>
                <ul style="margin: 0; padding-left: 20px; font-size: 14px;">
                  ${whyContactHtml}
                </ul>
              </td>
            </tr>
        </table>
    </div>
  `
}

export function formatOpportunityForEmail(opportunity) {
  logger.info(
    { opportunity: { name: opportunity.reachOutTo } },
    'Formatting opportunity card for email.'
  )
  if (!opportunity || typeof opportunity !== 'object' || !opportunity.reachOutTo) {
    logger.warn(`formatOpportunityForEmail: Invalid opportunity object provided.`, {
      oppPreview: opportunity,
    })
    throw new Error('Invalid opportunity object provided.')
  }
  try {
    const cardHtml = createOpportunityCard(opportunity)
    logger.info(
      { oppName: opportunity.reachOutTo },
      'Successfully formatted opportunity card.'
    )
    return cardHtml
  } catch (error) {
    logger.error(
      `Error creating opportunity card for email: "${opportunity.reachOutTo}"`,
      { errorMessage: error.message, stack: error.stack }
    )
    throw error
  }
}

```

## 📄 src/modules/email/components/supervisor/costSummary.js
*Lines: 85, Size: 2.57 KB*

```javascript
// apps/pipeline/src/modules/email/components/supervisor/costSummary.js (version 2.0.0)
import { escapeHtml } from '@headlines/utils-shared'

function formatCost(cost) {
  return `$${cost.toFixed(4)}`
}

export function createCostSummaryHtml(runStats) {
  if (!runStats || (!runStats.tokenUsage && !runStats.apiCalls)) {
    return ''
  }

  let totalTokenCost = 0
  let totalApiCost = 0
  let tokenHtml = ''
  let apiHtml = ''

  if (runStats.tokenUsage) {
    const modelsWithUsage = Object.keys(runStats.tokenUsage).filter(
      (model) =>
        runStats.tokenUsage[model].inputTokens > 0 ||
        runStats.tokenUsage[model].outputTokens > 0
    )
    if (modelsWithUsage.length > 0) {
      const tokenRows = modelsWithUsage
        .map((model) => {
          const stats = runStats.tokenUsage[model]
          totalTokenCost += stats.cost
          return `
            <tr>
                <td>${escapeHtml(model)}</td>
                <td>${stats.inputTokens.toLocaleString()}</td>
                <td>${stats.outputTokens.toLocaleString()}</td>
                <td>${formatCost(stats.cost)}</td>
            </tr>`
        })
        .join('')
      tokenHtml = `
        <h3>LLM Token Usage</h3>
        <table>
            <thead><tr><th>Model</th><th>Input Tokens</th><th>Output Tokens</th><th>Est. Cost</th></tr></thead>
            <tbody>${tokenRows}</tbody>
        </table>`
    }
  }

  if (runStats.apiCalls) {
    const servicesWithUsage = Object.keys(runStats.apiCalls).filter(
      (service) => runStats.apiCalls[service].calls > 0
    )
    if (servicesWithUsage.length > 0) {
      const apiRows = servicesWithUsage
        .map((service) => {
          const stats = runStats.apiCalls[service]
          totalApiCost += stats.cost
          return `
            <tr>
                <td>${escapeHtml(service)}</td>
                <td>${stats.calls.toLocaleString()}</td>
                <td>${stats.cost > 0 ? formatCost(stats.cost) : '(Free)'}</td>
            </tr>`
        })
        .join('')
      apiHtml = `
        <h3 style="margin-top: 30px;">Third-Party API Usage</h3>
        <table>
            <thead><tr><th>Service</th><th>Calls</th><th>Est. Cost</th></tr></thead>
            <tbody>${apiRows}</tbody>
        </table>`
    }
  }

  const grandTotalCost = totalTokenCost + totalApiCost

  return `
    <h2>Cost Summary</h2>
    ${tokenHtml}
    ${apiHtml}
    <p style="text-align: right; font-size: 16px; font-weight: bold; margin-top: 20px;">
        Total Estimated Run Cost: <span style="color: #0056b3;">${formatCost(
          grandTotalCost
        )}</span>
    </p>`
}

```

## 📄 src/modules/email/components/supervisor/databaseTables.js
*Lines: 84, Size: 3.4 KB*

```javascript
// apps/pipeline/src/modules/email/components/supervisor/databaseTables.js (Corrected)
import { SynthesizedEvent } from '@headlines/models'
import { settings } from '@headlines/config'
import { truncateString, escapeHtml } from '@headlines/utils-shared' // <-- CORRECTED IMPORT

const sourceIcons = {
  // ... rest of the file is unchanged ...
  rag_db: '🗄️',
  wikipedia: '🌐',
  news_api: '📰',
}

function formatEnrichmentSources(sources = []) {
  if (sources.length === 0) return 'N/A'
  return sources.map((s) => sourceIcons[s] || '❓').join(' ')
}

export async function createEventsTableHtml(runStartDate) {
  const recentEvents = await SynthesizedEvent.find({ createdAt: { $gte: runStartDate } })
    .sort({ createdAt: -1 })
    .limit(50)
    .lean()
  if (recentEvents.length === 0)
    return `<h2>Synthesized Events from this Run</h2><p>No events were synthesized in this run.</p>`
  let tableRows = recentEvents
    .map(
      (event) =>
        `<tr>
            <td>${truncateString(escapeHtml(event.synthesized_headline), 70)}</td>
            <td>${event.highest_relevance_score}</td>
            <td>${formatEnrichmentSources(event.enrichmentSources)}</td>
            <td>${escapeHtml((event.key_individuals || []).map((p) => p.name).join(', ') || 'N/A')}</td>
            <td>${event.emailed ? 'Yes' : 'No'}</td>
        </tr>`
    )
    .join('')
  return `<h2>Synthesized Events (${recentEvents.length})</h2>
    <table>
        <thead><tr><th>Synthesized Headline</th><th>Score</th><th>Enrichment</th><th>Key Individuals</th><th>Emailed?</th></tr></thead>
        <tbody>${tableRows}</tbody>
    </table>`
}

export async function createArticlesTableHtml(runStats) {
  // DEFINITIVE FIX: Use enrichmentOutcomes as the source of truth
  const allArticles = runStats.enrichmentOutcomes || []

  if (allArticles.length === 0)
    return `<h2>All Fresh Articles Processed</h2><p>No new raw articles were processed in the enrichment stage.</p>`

  const relevantArticles = allArticles.filter(
    (a) => a.headlineScore >= settings.HEADLINES_RELEVANCE_THRESHOLD
  )
  const irrelevantCount = runStats.freshHeadlinesFound - relevantArticles.length

  if (relevantArticles.length === 0) {
    return `<h2>All Fresh Articles Processed (${runStats.freshHeadlinesFound})</h2><p>No headlines were deemed relevant (all scored < ${settings.HEADLINES_RELEVANCE_THRESHOLD}).</p>`
  }

  relevantArticles.sort(
    (a, b) => (b.finalScore || b.headlineScore) - (a.finalScore || a.headlineScore)
  )

  let tableRows = relevantArticles
    .map((article) => {
      const status = article.outcome
      const finalScore = article.finalScore ?? 'N/A'
      return `<tr><td><a href="${article.link}" target="_blank">${truncateString(escapeHtml(article.headline), 80)}</a></td><td>${escapeHtml(article.newspaper)}</td><td>${article.headlineScore}</td><td>${finalScore}</td><td>${status}</td></tr>`
    })
    .join('')

  let footer = ''
  if (irrelevantCount > 0) {
    footer = `<p style="margin-top: 15px; font-size: 13px; color: #6c757d;">... plus ${irrelevantCount} other headlines that were deemed irrelevant (score < ${settings.HEADLINES_RELEVANCE_THRESHOLD}).</p>`
  }

  return `<h2>All Fresh Articles Processed (${runStats.freshHeadlinesFound})</h2>
    <table>
        <thead><tr><th>Headline</th><th>Source</th><th>HL Score</th><th>Final Score</th><th>Enrichment Status</th></tr></thead>
        <tbody>${tableRows}</tbody>
    </table>
    ${footer}`
}

```

## 📄 src/modules/email/components/supervisor/enrichmentFunnel.js
*Lines: 64, Size: 2.97 KB*

```javascript
// apps/pipeline/src/modules/email/components/supervisor/enrichmentFunnel.js (Corrected)
import { settings } from '@headlines/config'
import { escapeHtml, truncateString } from '@headlines/utils-shared' // <-- CORRECTED IMPORT

export function createEnrichmentFunnelHtml(runStats) {
  // ... rest of the file is unchanged ...
  const enrichmentOutcomes = runStats.enrichmentOutcomes || []

  if (runStats.relevantHeadlines === 0) {
    return `<h2>Enrichment Funnel</h2><p>No headlines met the relevance threshold (scored &lt; ${settings.HEADLINES_RELEVANCE_THRESHOLD}).</p>`
  }

  const cardsHtml = enrichmentOutcomes
    .sort((a, b) => (b.headlineScore || 0) - (a.headlineScore || 0))
    .map((item) => {
      const isSuccess = item.outcome.toLowerCase() === 'success'
      const statusClass = isSuccess
        ? 'status-success'
        : item.outcome === 'High-Signal Failure'
          ? 'status-failure'
          : 'status-dropped'
      const statusIcon = isSuccess ? '✅' : '❌'

      let finalScoreText = `Final Score [${item.finalScore ?? 'N/A'}]`
      if (item.agent_disagreement) {
        finalScoreText += ` <strong style="color: #d97706;">(Disagreement)</strong>`
      }

      // DEFINITIVE FIX: Use the actual assessment text and content snippets
      const headlineAssessment = item.assessment_headline || 'N/A'
      const articleAssessment = item.assessment_article || 'N/A'
      const contentSnippet = item.content_snippet
        ? `${escapeHtml(item.content_snippet)}...`
        : 'N/A'

      return `
        <div class="card">
            <div class="card-header">
                <h4 style="margin:0; font-size: 16px;">
                    <a href="${item.link}" target="_blank">${escapeHtml(item.headline)}</a>
                </h4>
                <p style="margin: 5px 0 0; font-size: 12px; color: #6c757d;">Source: ${escapeHtml(item.newspaper)}</p>
            </div>
            <div class="card-body">
                <p style="margin: 0 0 10px;"><strong>${statusIcon} Final Outcome:</strong> <span class="${statusClass}">${item.outcome}</span></p>
                <div class="step">
                    <p class="step-title"><strong>Stage 1: Headline Assessment</strong></p>
                    <p class="step-detail">Score [${item.headlineScore}] - <i>${escapeHtml(truncateString(headlineAssessment, 150))}</i></p>
                </div>
                <div class="step">
                    <p class="step-title"><strong>Stage 2: Content Enrichment & Assessment</strong></p>
                    <p class="step-detail">${finalScoreText} - <i>${escapeHtml(truncateString(articleAssessment, 200))}</i></p>
                </div>
                <div class="snippet">
                    <strong>Article Snippet:</strong>
                    <p class="snippet-text">${contentSnippet}</p>
                </div>
            </div>
        </div>`
    })
    .join('')
  return `<h2>Enrichment Funnel Audit Trail (Lifecycle of ${runStats.relevantHeadlines} relevant headlines)</h2>${cardsHtml}`
}

```

## 📄 src/modules/email/components/supervisor/judgeVerdict.js
*Lines: 53, Size: 1.82 KB*

```javascript
// apps/pipeline/src/modules/email/components/supervisor/judgeVerdict.js (version 2.0.0)
import { escapeHtml } from '@headlines/utils-shared'

function getVerdictClass(quality) {
  if (!quality) return 'verdict-neutral'
  const q = quality.toLowerCase()
  if (q === 'excellent' || q === 'good') {
    return 'verdict-positive'
  }
  if (q === 'poor' || q === 'irrelevant') {
    return 'verdict-negative'
  }
  return 'verdict-neutral' // For Acceptable, Marginal
}

export function createJudgeVerdictHtml(judgeVerdict) {
  if (!judgeVerdict) return ''

  let html = '<h2>⚖️ Judge & Arbitrator Verdict</h2>'
  html +=
    '<p>The following is a quality control review of the items generated in this run, intended to provide feedback for prompt engineering and system improvements.</p>'

  const renderJudgements = (judgements) => {
    let content = ''
    if (judgements && judgements.length > 0) {
      judgements.forEach((item) => {
        const verdictClass = getVerdictClass(item.quality)
        content += `
            <div class="card">
                <div class="card-header"><h4 style="margin:0; font-size: 15px;">${escapeHtml(item.identifier)}</h4></div>
                <div class="card-body">
                    <p class="judge-verdict" style="margin:0;">
                        <strong class="${verdictClass}">[${escapeHtml(item.quality)}]</strong> 
                        ${escapeHtml(item.commentary)}
                    </p>
                </div>
            </div>`
      })
    }
    return content
  }

  html += '<h3>Event Judgements</h3>'
  html += renderJudgements(judgeVerdict.event_judgements) || '<p>No events to judge.</p>'

  html += '<h3 style="margin-top: 30px;">Opportunity Judgements</h3>'
  html +=
    renderJudgements(judgeVerdict.opportunity_judgements) ||
    '<p>No opportunities to judge.</p>'

  return html
}

```

## 📄 src/modules/email/components/supervisor/scraperHealth.js
*Lines: 66, Size: 2.48 KB*

```javascript
// apps/pipeline/src/modules/email/components/supervisor/scraperHealth.js (Corrected)
import { escapeHtml } from '@headlines/utils-shared'

export function createScraperFailureAlertHtml(enrichmentOutcomes) {
  if (!enrichmentOutcomes || enrichmentOutcomes.length === 0) return ''

  // Filter for high-signal headlines where content scraping failed.
  const scraperFailures = enrichmentOutcomes.filter(
    (item) =>
      item.outcome === 'High-Signal Failure' ||
      (item.outcome === 'Dropped' &&
        // DEFENSIVE FIX: Check for assessment_article existence before calling .includes()
        (item.assessment_article || '').includes('Enrichment Failed'))
  )

  if (scraperFailures.length === 0) return ''

  let listItems = scraperFailures
    .map((item) => {
      // Differentiate the reason in the email for clarity.
      const reason =
        item.outcome === 'High-Signal Failure'
          ? 'High-Signal Headline - Content Scraping Failed'
          : item.assessment_article

      return `
        <li style="margin-bottom: 12px;">
            <strong>${escapeHtml(item.newspaper)}:</strong> 
            <a href="${item.link}" target="_blank">${escapeHtml(item.headline)}</a><br>
            <em style="font-size:13px; color: #555;">${escapeHtml(reason)}</em>
        </li>`
    })
    .join('')

  return `
    <div class="alert-box alert-danger">
        <h2 style="margin-top:0;">⚠️ Scraper Action Required</h2>
        <p>The following relevant headlines failed the enrichment stage, likely due to an outdated or incorrect article text selector.</p>
        <ul style="padding-left: 20px; margin-top: 15px; font-size: 14px;">${listItems}</ul>
    </div>`
}

export function createScraperHealthTable(healthStats) {
  if (!healthStats || healthStats.length === 0)
    return '<h2>Scraper Health Check</h2><p>No health stats available.</p>'
  let tableRows = healthStats
    .sort((a, b) => a.source.localeCompare(b.source))
    .map((stat) => {
      const status = stat.success ? '✅ OK' : '❌ FAILED'
      const statusColor = stat.success ? '#28a745' : '#dc3545'
      return `
            <tr>
                <td>${escapeHtml(stat.source)}</td>
                <td style="color: ${statusColor}; font-weight: bold;">${status}</td>
                <td>${stat.count}</td>
            </tr>`
    })
    .join('')
  return `
    <h2>Scraper Health Check</h2>
    <table>
        <thead><tr><th>Source</th><th>Status</th><th>Articles Found</th></tr></thead>
        <tbody>${tableRows}</tbody>
    </table>`
}

```

## 📄 src/modules/email/components/supervisor/supervisorEmailBodyBuilder.js
*Lines: 134, Size: 4.71 KB*

```javascript
// apps/pipeline/src/modules/email/components/supervisor/supervisorEmailBodyBuilder.js (version 5.2.2 - Path Fix)
import { SUPERVISOR_EMAIL_CONFIG } from '@headlines/config'
import { createSupervisorEmailWrapper } from '../../templates/supervisorWrapper.js'
import {
  createScraperHealthTable,
  createScraperFailureAlertHtml,
} from './scraperHealth.js'
import { createEnrichmentFunnelHtml } from './enrichmentFunnel.js'
import { createEventsTableHtml, createArticlesTableHtml } from './databaseTables.js'
import { createJudgeVerdictHtml } from './judgeVerdict.js'
import { createCostSummaryHtml } from './costSummary.js'
import { SynthesizedEvent, Opportunity } from '@headlines/models'
import { executiveSummaryChain } from '@headlines/ai-services'
import { logger } from '@headlines/utils-shared'

function createPerformanceDashboardHtml(runStats, newEventCount, newOpportunityCount) {
  const funnel = `${runStats.headlinesScraped} Scraped ➔ ${runStats.relevantHeadlines} Relevant ➔ ${runStats.eventsSynthesized} Events ➔ ${newOpportunityCount} Opps`
  const totalCost =
    (runStats.tokenUsage
      ? Object.values(runStats.tokenUsage).reduce((acc, model) => acc + model.cost, 0)
      : 0) +
    (runStats.apiCalls
      ? Object.values(runStats.apiCalls).reduce((acc, service) => acc + service.cost, 0)
      : 0)

  return `
        <h2>Performance Dashboard</h2>
        <table class="dashboard">
            <tr>
                <th>Funnel</th>
                <td>${funnel}</td>
            </tr>
            <tr>
                <th>New Events Created</th>
                <td>${newEventCount}</td>
            </tr>
            <tr>
                <th>Est. Run Cost</th>
                <td>$${totalCost.toFixed(4)}</td>
            </tr>
             <tr>
                <th>Errors</th>
                <td style="color: ${runStats.errors?.length > 0 ? '#dc3545' : '#28a745'}; font-weight: bold;">${runStats.errors?.length || 0}</td>
            </tr>
        </table>
    `
}

export async function createSupervisorEmailBody(runStats) {
  const runTimestamp = new Date().toLocaleString('en-GB', {
    timeZone: 'Europe/Copenhagen',
  })
  const runStartDate = new Date(Date.now() - 20 * 60 * 1000)

  const [newEventCount, newOpportunityCount] = await Promise.all([
    SynthesizedEvent.countDocuments({ createdAt: { $gte: runStartDate } }),
    Opportunity.countDocuments({ createdAt: { $gte: runStartDate } }),
  ])

  const executiveSummaryPayload = {
    freshHeadlinesFound: runStats.freshHeadlinesFound,
    judgeVerdict: runStats.judgeVerdict || {
      event_judgements: [],
      opportunity_judgements: [],
    },
  }

  const executiveSummaryResult = await executiveSummaryChain({
    payload_json_string: JSON.stringify(executiveSummaryPayload),
  })
  const executiveSummary =
    executiveSummaryResult.summary || 'AI failed to generate a summary for this run.'

  const scraperFailureAlertHtml = createScraperFailureAlertHtml(
    runStats.enrichmentOutcomes
  )

  const executiveSummaryHtml = executiveSummary
    ? `<div class="alert-box alert-info">
          <h2 style="margin-top:0;">🤖 Executive Summary</h2>
          <p style="font-style: italic; font-size: 15px;">"${executiveSummary}"</p>
      </div>`
    : ''

  const dashboardHtml = createPerformanceDashboardHtml(
    runStats,
    newEventCount,
    newOpportunityCount
  )

  const [
    scraperHealthHtml,
    enrichmentFunnelHtml,
    judgeVerdictHtml,
    eventsTableHtml,
    articlesTableHtml,
    costSummaryHtml,
  ] = await Promise.all([
    createScraperHealthTable(runStats.scraperHealth),
    createEnrichmentFunnelHtml(runStats),
    createJudgeVerdictHtml(runStats.judgeVerdict),
    createEventsTableHtml(runStartDate),
    createArticlesTableHtml(runStats),
    createCostSummaryHtml(runStats),
  ])

  const bodyContent = `
        <div style="text-align:center; margin-bottom: 30px;">
            <h1>${SUPERVISOR_EMAIL_CONFIG.subject}</h1>
            <p style="font-size: 16px; color: #6c757d;">Run completed: ${runTimestamp}</p>
        </div>
        
        <!-- BLUF SECTION -->
        ${executiveSummaryHtml}
        ${scraperFailureAlertHtml} 
        ${dashboardHtml}
        ${costSummaryHtml}

        <!-- APPENDICES -->
        <div class="appendix-section">
            ${judgeVerdictHtml}
            ${enrichmentFunnelHtml}
            ${eventsTableHtml}
            ${articlesTableHtml}
            ${scraperHealthHtml}
        </div>

        <div style="text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #dee2e6; font-size: 12px; color: #6c757d;">
            <p>This is an automated report from the ${SUPERVISOR_EMAIL_CONFIG.brandName}.</p>
        </div>`

  return createSupervisorEmailWrapper(bodyContent, SUPERVISOR_EMAIL_CONFIG.subject)
}

```

## 📄 src/modules/email/constants.js
*Lines: 9, Size: 337 Bytes*

```javascript
// src/modules/email/constants.js (version 2.1)
// src/modules/email/constants.js

// Define the Content-ID (CID) for the embedded logo.
// This acts as an internal URL within the email itself.
export const LOGO_CID = 'logo@wealthevents.email';

// Define the local path to the logo file.
export const LOGO_PATH = './public/bullion.png';
```

## 📄 src/modules/email/emailDispatcher.js
*Lines: 131, Size: 4.31 KB*

```javascript
// apps/pipeline/src/modules/notifications/emailDispatcher.js (version 4.0.1)
import { groupItemsByCountry, getCountryFlag } from '@headlines/utils-shared'
import { logger } from '@headlines/utils-shared'
import { createPersonalizedEmailBody } from './components/emailBodyBuilder.js'
import { sendWealthEventsEmail } from '@headlines/utils-server'
import {
  emailSubjectChain,
  emailIntroChain,
  translateChain,
} from '@headlines/ai-services'

export async function sendBulkEmails(emailQueue) {
  if (emailQueue.length === 0) return 0

  const isDryRun = process.env.DRY_RUN === 'true'
  if (isDryRun) {
    logger.warn(
      'DRY RUN MODE: Email dispatch is being simulated. No actual emails will be sent.'
    )
    let simulatedSuccessCount = 0
    for (const { user, events } of emailQueue) {
      if (events && events.length > 0) {
        logger.info(
          `[DRY RUN] Would have sent ${user.language} email to ${user.email} with ${events.length} events.`
        )
        simulatedSuccessCount++
      }
    }
    return simulatedSuccessCount
  }

  logger.info(
    `Dispatching ${emailQueue.length} personalized emails with AI-powered copy...`
  )
  let successCount = 0

  for (const { user, events, opportunities } of emailQueue) {
    try {
      if (!events || events.length === 0) {
        logger.info(`Skipping email for ${user.email} as it contained no valid events.`)
        continue
      }

      // --- AI-Powered Subject and Intro Generation ---
      const eventsByCountry = groupItemsByCountry(events, 'country')
      const primaryCountry = Object.keys(eventsByCountry)[0]
      const countryFlag = getCountryFlag(primaryCountry)

      const eventPayloadForAI = events.map((e) => ({
        headline: e.synthesized_headline,
        summary: e.synthesized_summary,
      }))

      // DEFINITIVE FIX: Use direct await calls instead of
      const [subjectResult, introResult] = await Promise.all([
        emailSubjectChain({
          events_json_string: JSON.stringify(eventPayloadForAI),
        }),
        emailIntroChain({
          payload_json_string: JSON.stringify({
            firstName: user.firstName,
            events: eventPayloadForAI,
          }),
        }),
      ])

      const aiSubject = subjectResult.subject_headline || 'Key Developments'

      const aiIntro = introResult.error
        ? {
            greeting: `Dear ${user.firstName},`,
            body: 'Here are the latest relevant wealth events we have identified for your review.',
            bullets: events
              .slice(0, 2)
              .map(
                (e) =>
                  `A key development regarding ${e.synthesized_headline.substring(0, 40)}...`
              ),
            signoff: 'We wish you a fruitful day!\\n\\nThe team at Wealth Watch',
          }
        : introResult

      const subject = `${countryFlag} Wealth News (${events.length}): ${aiSubject}`

      const htmlBody = await createPersonalizedEmailBody(
        user,
        eventsByCountry,
        subject,
        aiIntro
      )

      if (!htmlBody) {
        logger.error(`Failed to generate email body for ${user.email}. Skipping.`)
        continue
      }

      let finalHtmlBody = htmlBody
      const targetLanguage = user.language || 'English'

      if (targetLanguage !== 'English') {
        logger.info(`Translating email for ${user.email} into ${targetLanguage}...`)
        // DEFINITIVE FIX: Use direct await calls instead of
        const translationResult = await translateChain({
          language: targetLanguage,
          html_content: htmlBody,
        })
        if (translationResult.error) {
          logger.error(
            { err: translationResult.error, user: user.email },
            `AI translation to ${targetLanguage} failed. Sending in English as a fallback.`
          )
        } else {
          finalHtmlBody = translationResult.translated_html
          logger.info(`Successfully translated email for ${user.email}.`)
        }
      }

      const mailOptions = { to: user.email, subject, html: finalHtmlBody }
      const wasSent = await sendWealthEventsEmail(mailOptions)
      if (wasSent) successCount++
    } catch (error) {
      logger.error(
        { err: error, user: user.email },
        'A critical, unhandled error occurred during the email dispatch loop for a user. Skipping this user.'
      )
    }
  }

  return successCount
}

```

## 📄 src/modules/email/index.js
*Lines: 51, Size: 1.7 KB*

```javascript
// apps/pipeline/src/modules/email/index.js (MODIFIED to accept traces)
import { logger } from '@headlines/utils-shared'
import { sendGenericEmail } from '@headlines/utils-server'
import { Subscriber } from '@headlines/models'
import { createSupervisorEmailBody } from './components/supervisor/supervisorEmailBodyBuilder.js'

/**
 * Coordinates sending the supervisor report email.
 * @param {Object} runStats - Statistics about the current pipeline run.
 * @param {Array<Object>} articleTraces - Detailed traces for each processed article.
 */
export async function sendSupervisorReportEmail(runStats, articleTraces = []) {
  if (!runStats) {
    logger.error('No runStats provided for supervisor report. Skipping email.')
    return
  }

  logger.info('Preparing supervisor report email...')

  try {
    const superUsers = await Subscriber.find({
      isActive: true,
      role: 'admin',
    })
      .select('email')
      .lean()

    const superUserEmails = superUsers.map((user) => user.email)

    if (superUserEmails.length === 0) {
      logger.warn('No admin users found. Skipping supervisor report.')
      return
    }

    // Generate the complex HTML body, now including the article traces
    const emailBody = await createSupervisorEmailBody(runStats, articleTraces)

    // Send the email using the shared mailer
    await sendGenericEmail({
      to: superUserEmails.join(','),
      subject: '⚙️ Hourly Headlines Processing Run Summary',
      html: emailBody,
      emailType: 'SupervisorReport',
    })

    logger.info('✅ Supervisor report email successfully sent/queued to all superusers.')
  } catch (error) {
    logger.error({ err: error }, '💥 CRITICAL: Failed to send supervisor report email.')
  }
}

```

## 📄 src/modules/email/templates/supervisorWrapper.js
*Lines: 49, Size: 2.87 KB*

```javascript
// apps/pipeline/src/modules/email/templates/supervisorWrapper.js (version 2.0)
/**
 * Provides the HTML shell and CSS for the supervisor report email.
 * @param {string} bodyContent - The pre-compiled HTML content of the report.
 * @param {string} subject - The email subject.
 * @returns {string} The full HTML document for the email.
 */
export function createSupervisorEmailWrapper(bodyContent, subject) {
  return `
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${subject}</title>
        <style>
            body { margin: 0; padding: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; background-color: #f8f9fa; color: #212529; }
            .container { max-width: 1200px; margin: 20px auto; background-color: #ffffff; padding: 40px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.05); }
            h1, h2, h3, h4 { margin-top: 0; margin-bottom: 1rem; font-weight: 600; color: #343a40; }
            h1 { font-size: 28px; }
            h2 { font-size: 22px; border-bottom: 1px solid #dee2e6; padding-bottom: 10px; margin-top: 40px; }
            p { margin-top: 0; margin-bottom: 1rem; line-height: 1.6; }
            table { width: 100%; border-collapse: collapse; font-size: 14px; margin-bottom: 20px; }
            th, td { padding: 12px 15px; text-align: left; border-bottom: 1px solid #dee2e6; }
            th { background-color: #f1f3f5; font-weight: 600; }
            tr:nth-child(even) { background-color: #f8f9fa; }
            a { color: #007bff; text-decoration: none; }
            .alert-box { border-left-width: 4px; border-radius: 4px; padding: 20px; margin: 20px 0; }
            .alert-danger { background-color: #f8d7da; border-left-color: #f5c6cb; color: #721c24; }
            .alert-danger h2 { color: #721c24; }
            .alert-info { background-color: #cce5ff; border-left-color: #b8daff; color: #004085; }
            .alert-info h2 { color: #004085; }
            .card { border: 1px solid #dee2e6; border-radius: 8px; margin-bottom: 20px; background-color: #ffffff; }
            .card-header { padding: 15px; border-bottom: 1px solid #dee2e6; background-color: #f8f9fa; }
            .card-body { padding: 20px; }
            .judge-verdict { border-left: 4px solid #17a2b8; padding-left: 15px; font-style: italic; color: #495057; }
            .verdict-positive { color: #28a745; font-weight: 600; }
            .verdict-negative { color: #dc3545; font-weight: 600; }
            .dashboard { table-layout: fixed; }
            .dashboard th { width: 30%; background-color: #f8f9fa; }
            .appendix-section { margin-top: 50px; padding-top: 30px; border-top: 2px solid #adb5bd;}
        </style>
    </head>
    <body>
        <div class="container">${bodyContent}</div>
    </body>
    </html>`
}

```

## 📄 src/modules/notifications/emailDispatcher.js
*Lines: 141, Size: 4.9 KB*

```javascript
// apps/pipeline/src/modules/notifications/emailDispatcher.js
import { groupItemsByCountry, getCountryFlag } from '@headlines/utils-shared'
import { logger } from '@headlines/utils-shared'
import { createPersonalizedEmailBody } from '../email/components/emailBodyBuilder.js'
import { sendGenericEmail as sendWealthEventsEmail } from '@headlines/utils-server'
import {
  emailSubjectChain,
  emailIntroChain,
  translateChain,
} from '@headlines/ai-services'

export async function sendBulkEmails(emailQueue) {
  if (emailQueue.length === 0) return 0

  const isDryRun = process.env.DRY_RUN === 'true'
  if (isDryRun) {
    logger.warn(
      'DRY RUN MODE: Email dispatch is being simulated. No actual emails will be sent.'
    )
    let simulatedSuccessCount = 0
    for (const { user, events, opportunities } of emailQueue) {
      if ((events && events.length > 0) || (opportunities && opportunities.length > 0)) {
        logger.info(
          `[DRY RUN] Would have sent ${user.language} email to ${user.email} with ${events.length} events and ${opportunities.length} opportunities.`
        )
        simulatedSuccessCount++
      }
    }
    return simulatedSuccessCount
  }

  logger.info(
    `Dispatching ${emailQueue.length} personalized emails with AI-powered copy...`
  )
  let successCount = 0

  for (const { user, events, opportunities } of emailQueue) {
    try {
      const hasContent =
        (events && events.length > 0) || (opportunities && opportunities.length > 0)
      if (!hasContent) {
        logger.info(`Skipping email for ${user.email} as it contained no valid content.`)
        continue
      }

      // --- START OF MODIFICATION ---
      const eventsByCountry = groupItemsByCountry(events, 'country')
      const opportunitiesByCountry = groupItemsByCountry(opportunities, 'basedIn')
      const primaryCountry =
        Object.keys(opportunitiesByCountry)[0] || Object.keys(eventsByCountry)[0]
      const countryFlag = getCountryFlag(primaryCountry)

      const eventPayloadForAI = (events || []).map((e) => ({
        headline: e.synthesized_headline,
        summary: e.synthesized_summary,
      }))
      const oppPayloadForAI = (opportunities || []).map((o) => ({
        name: o.reachOutTo,
        reason: Array.isArray(o.whyContact) ? o.whyContact.join(' ') : o.whyContact,
        liquidity: o.lastKnownEventLiquidityMM,
      }))

      const [subjectResult, introResult] = await Promise.all([
        emailSubjectChain({
          events_json_string: JSON.stringify(eventPayloadForAI),
        }),
        emailIntroChain({
          payload_json_string: JSON.stringify({
            firstName: user.firstName,
            events: eventPayloadForAI,
            opportunities: oppPayloadForAI,
          }),
        }),
      ])
      // --- END OF MODIFICATION ---

      const aiSubject = subjectResult.subject_headline || 'Key Developments'

      const aiIntro = introResult.error
        ? {
            greeting: `Dear ${user.firstName},`,
            body: 'Here are the latest relevant wealth events we have identified for your review.',
            bullets: (events || [])
              .slice(0, 2)
              .map(
                (e) =>
                  `A key development regarding ${e.synthesized_headline.substring(0, 40)}...`
              ),
            signoff: ['We wish you a fruitful day!', 'The team at Wealth Watch'],
          }
        : introResult

      const subject = `${countryFlag} Intelligence Briefing: ${aiSubject}`

      const htmlBody = await createPersonalizedEmailBody(
        user,
        eventsByCountry,
        opportunitiesByCountry, // Pass opportunities to the body builder
        subject,
        aiIntro
      )

      if (!htmlBody) {
        logger.error(`Failed to generate email body for ${user.email}. Skipping.`)
        continue
      }

      let finalHtmlBody = htmlBody
      const targetLanguage = user.language || 'English'

      if (targetLanguage !== 'English') {
        logger.info(`Translating email for ${user.email} into ${targetLanguage}...`)
        const translationResult = await translateChain({
          language: targetLanguage,
          html_content: htmlBody,
        })
        if (translationResult.error) {
          logger.error(
            { err: translationResult.error, user: user.email },
            `AI translation to ${targetLanguage} failed. Sending in English as a fallback.`
          )
        } else {
          finalHtmlBody = translationResult.translated_html
          logger.info(`Successfully translated email for ${user.email}.`)
        }
      }

      const mailOptions = { to: user.email, subject, html: finalHtmlBody }
      const wasSent = await sendWealthEventsEmail(mailOptions)
      if (wasSent) successCount++
    } catch (error) {
      logger.error(
        { err: error, user: user.email },
        'A critical, unhandled error occurred during the email dispatch loop for a user. Skipping this user.'
      )
    }
  }

  return successCount
}

```

## 📄 src/modules/notifications/index.js
*Lines: 138, Size: 4.47 KB*

```javascript
// apps/pipeline/src/modules/notifications/index.js
import { groupItemsByCountry } from '@headlines/utils-shared'
import { logger } from '@headlines/utils-shared'
import { Subscriber, PushSubscription } from '@headlines/models'
import { sendBulkEmails } from './emailDispatcher.js'
import { sendBulkPushNotifications } from './pushService.js'

function filterItemsForUser(items, userCountries, countryKey) {
  return items.filter((item) => {
    if (!item[countryKey]) {
      return false
    }
    const itemCountries = Array.isArray(item[countryKey])
      ? item[countryKey]
      : String(item[countryKey]).split(',')
    return itemCountries.some((country) => userCountries.has(country.trim()))
  })
}

export async function sendNotifications(
  newEvents,
  newOpportunities = [],
  isTestMode = false
) {
  logger.info(
    `📧 Starting personalized notification dispatch for ${newEvents.length} events and ${newOpportunities.length} opportunities.`
  )
  if (isTestMode) {
    logger.warn('--- TEST MODE: Notifications will ONLY be sent to admin users. ---')
  }

  // --- START OF DEFINITIVE FIX ---
  // The previous logic was flawed. This new logic fetches all active subscribers first,
  // THEN filters them down to ONLY admins if isTestMode is true.
  let subscribersToNotify = await Subscriber.find({ isActive: true }).lean()

  if (isTestMode) {
    subscribersToNotify = subscribersToNotify.filter((user) => user.role === 'admin')
    if (subscribersToNotify.length === 0) {
      logger.warn('TEST MODE: No active admin users found to send test notifications to.')
      return { emailSentCount: 0, pushSentCount: 0 }
    }
  }
  // --- END OF DEFINITIVE FIX ---

  if (subscribersToNotify.length === 0) {
    logger.info('No active subscribers found. Skipping notification dispatch.')
    return { emailSentCount: 0, pushSentCount: 0 }
  }

  const allPushSubscriptions = await PushSubscription.find().lean()
  const pushSubsByUserId = allPushSubscriptions.reduce((acc, sub) => {
    if (!sub.subscriberId) return acc
    const userId = sub.subscriberId.toString()
    if (!acc[userId]) acc[userId] = []
    acc[userId].push(sub)
    return acc
  }, {})

  const emailQueue = []
  const pushQueue = []

  for (const user of subscribersToNotify) {
    let userEvents = []
    let userOpportunities = []

    if (user.role === 'admin') {
      userEvents = newEvents
      userOpportunities = newOpportunities
      logger.trace(`Admin user ${user.email} is subscribed to all items.`)
    } else {
      const userCountries = new Set(
        (user.countries || []).filter((c) => c.active).map((c) => c.name)
      )
      if (userCountries.size === 0) continue
      userEvents = filterItemsForUser(newEvents, userCountries, 'country')
      userOpportunities = filterItemsForUser(newOpportunities, userCountries, 'basedIn')
    }

    if (userEvents.length === 0 && userOpportunities.length === 0) continue

    if (
      user.emailNotificationsEnabled &&
      (userEvents.length > 0 || userOpportunities.length > 0)
    ) {
      emailQueue.push({ user, events: userEvents, opportunities: userOpportunities })
    }

    const userPushSubs = pushSubsByUserId[user._id.toString()] || []
    if (user.pushNotificationsEnabled && userPushSubs.length > 0) {
      pushQueue.push({
        subscriptions: userPushSubs,
        events: userEvents,
        opportunities: userOpportunities,
      })
    }
  }

  if (emailQueue.length === 0 && pushQueue.length === 0) {
    logger.warn(
      'No users were subscribed to the countries of the generated events. No notifications will be sent.'
    )
    return { emailSentCount: 0, pushSentCount: 0 }
  }

  const [emailSentCount, pushSentCount] = await Promise.all([
    sendBulkEmails(emailQueue),
    sendBulkPushNotifications(pushQueue),
  ])

  if (emailSentCount > 0) {
    const bulkOps = emailQueue.map(({ user, events }) => ({
      updateOne: {
        filter: { _id: user._id },
        update: {
          $inc: {
            emailSentCount: 1,
            eventsReceivedCount: events.length,
          },
        },
      },
    }))
    try {
      await Subscriber.bulkWrite(bulkOps)
      logger.info(
        `Successfully updated engagement counters for ${bulkOps.length} subscribers.`
      )
    } catch (error) {
      logger.error({ err: error }, 'Failed to update subscriber engagement counters.')
    }
  }

  logger.info(
    `✅ Notification dispatch complete. Emails Sent: ${emailSentCount}, Push Notifications Sent: ${pushSentCount}.`
  )
  return { emailSentCount, pushSentCount }
}

```

## 📄 src/modules/notifications/pushService.js
*Lines: 77, Size: 2.48 KB*

```javascript
// apps/pipeline/src/modules/notifications/pushService.js (version 3.0.0)
import { logger } from '@headlines/utils-shared'
import { PushSubscription } from '@headlines/models'
import { webpush, isPushConfigured } from '@headlines/scraper-logic/push/client.js'

function createPushPayload(events, opportunities) {
  let title = 'New Intelligence Alert'
  let body = ''
  let url = '/events' // Default URL

  const eventCount = events.length
  const oppCount = opportunities.length

  if (eventCount > 0 && oppCount > 0) {
    title = `${eventCount} New Event(s), ${oppCount} New Opportunity/ies`
    body = `Primary Event: ${events[0].synthesized_headline}`
    url = `/events`
  } else if (eventCount > 0) {
    title = `${eventCount} New Wealth Event(s) Detected`
    body = events[0].synthesized_headline
    url = `/events`
  } else if (oppCount > 0) {
    title = `${oppCount} New Opportunity/ies Identified`
    body = `New contact: ${opportunities[0].reachOutTo} (~$${opportunities[0].likelyMMDollarWealth}M)`
    url = `/opportunities`
  }

  return {
    title,
    body,
    url,
    icon: '/icons/icon-192x192.png',
  }
}

export async function sendBulkPushNotifications(pushQueue) {
  if (!isPushConfigured || pushQueue.length === 0) {
    return 0
  }

  logger.info(`Dispatching push notifications to ${pushQueue.length} user group(s)...`)
  let successCount = 0

  const allPromises = []

  for (const { subscriptions, events, opportunities } of pushQueue) {
    const payload = createPushPayload(events, opportunities)
    const notificationPayload = JSON.stringify(payload)

    for (const subscription of subscriptions) {
      const pushPromise = webpush
        .sendNotification(subscription, notificationPayload)
        .then(() => {
          successCount++
          logger.info(`✅ Pushed to endpoint for user ${subscription.subscriberId}`)
        })
        .catch((error) => {
          if (error.statusCode === 410 || error.statusCode === 404) {
            logger.info(
              `Subscription expired or invalid for endpoint. Deleting: ${subscription.endpoint}`
            )
            return PushSubscription.deleteOne({ _id: subscription._id })
          } else {
            logger.error(
              { err: { message: error.message, statusCode: error.statusCode } },
              `Failed to send push notification to user ${subscription.subscriberId}`
            )
          }
        })
      allPromises.push(pushPromise)
    }
  }

  await Promise.all(allPromises)
  return successCount
}

```

## 📄 src/orchestrator.js
*Lines: 225, Size: 8.49 KB*

```javascript
// apps/pipeline/src/orchestrator.js
import { logger } from '@headlines/utils-shared'
import { tokenTracker, apiCallTracker } from '@headlines/utils-server'
import { logFinalReport } from './utils/pipelineLogger.js'
import { RunStatsManager } from './utils/runStatsManager.js'
import { ArticleTraceLogger } from './utils/articleTraceLogger.js'
import { runPreFlightChecks } from './pipeline/1_preflight.js'
import { runScrapeAndFilter } from './pipeline/2_scrapeAndFilter.js'
import { runAssessAndEnrich } from './pipeline/3_assessAndEnrich.js'
import { runEntityResolution } from './pipeline/3_5_entityResolution.js'
import { runClusterAndSynthesize } from './pipeline/4_clusterAndSynthesize.js'
import { runOpportunityDeepDive } from './pipeline/4_5_opportunityDeepDive.js'
import { runCommitAndNotify } from './pipeline/5_commitAndNotify.js'
import { runUpdateKnowledgeGraph } from './pipeline/5_5_updateKnowledgeGraph.js'
import { suggestNewWatchlistEntities } from './pipeline/6_suggestNewWatchlistEntities.js'
import { updateSourceAnalytics } from './pipeline/submodules/commit/4_updateSourceAnalytics.js'
import { settings } from '@headlines/config'
import { RunVerdict, Article, SynthesizedEvent } from '@headlines/models'
import { browserManager } from '@headlines/scraper-logic/browserManager.js'
import { sendErrorAlert } from '@headlines/utils-server'
import mongoose from 'mongoose'

const PIPELINE_STAGES = {
  PREFLIGHT: { name: 'preflight', required: true },
  SCRAPE: { name: 'scrape', required: true },
  ASSESS: { name: 'assess', required: true },
  RESOLVE: { name: 'entityResolution', required: true },
  SYNTHESIZE: { name: 'synthesize', required: true },
  DEEP_DIVE: { name: 'opportunityDeepDive', required: true },
  COMMIT: { name: 'commit', required: true },
  KNOWLEDGE_GRAPH: { name: 'knowledgeGraph', required: true },
  WATCHLIST: { name: 'watchlist', required: true },
}

function initializePipelineContext(options) {
  apiCallTracker.reset()
  tokenTracker.reset()
  const runStatsManager = new RunStatsManager()
  const articleTraceLogger = new ArticleTraceLogger()
  return {
    ...options,
    isRefreshMode: options.refresh === true,
    runStatsManager,
    articleTraceLogger,
    dbConnection: false,
    startTime: Date.now(),
  }
}

async function initializeResources() {
  tokenTracker.initializeModels([
    settings.LLM_MODEL_HEADLINE_ASSESSMENT,
    settings.LLM_MODEL_ARTICLE_ASSESSMENT,
    settings.LLM_MODEL_SYNTHESIS,
    settings.LLM_MODEL_UTILITY,
    settings.LLM_MODEL_PRO,
  ])
  await browserManager.initialize()
}

async function sendSupervisorReport(runStatsManager, articleTraceLogger) {
  try {
    const { sendSupervisorReportEmail } = await import('./modules/email/index.js')
    await sendSupervisorReportEmail(
      runStatsManager.getStats(),
      articleTraceLogger.getAllTraces()
    )
  } catch (error) {
    logger.error({ err: error }, 'Failed to send supervisor report')
  }
}

function updateTrackingStats(payload) {
  payload.runStatsManager.set('tokenUsage', tokenTracker.getStats())
  payload.runStatsManager.set('apiCalls', apiCallTracker.getStats())
}

async function saveRunVerdict(payload, duration) {
  if (!payload.dbConnection || payload.noCommitMode) {
    return
  }
  try {
    const runStats = payload.runStatsManager.getStats()
    const runVerdict = new RunVerdict({
      runStats: runStats,
      judgeVerdict: runStats.judgeVerdict || {},
      generatedEvents: (payload.savedEvents || []).map((e) => e._id),
      generatedOpportunities: (payload.savedOpportunities || []).map((o) => o._id),
      duration_seconds: duration,
      cost_summary: {
        tokens: runStats.tokenUsage,
        apis: runStats.apiCalls,
      },
    })
    await runVerdict.save()
    logger.info({ verdictId: runVerdict._id }, 'Run verdict saved successfully')
  } catch (error) {
    logger.error({ err: error }, 'Failed to save run verdict')
    payload.runStatsManager.push('errors', `VERDICT_SAVE_FAILED: ${error.message}`)
  }
}

function handlePipelineError(error, context) {
  context.runStatsManager.push('errors', `ORCHESTRATOR_FATAL: ${error.message}`)
  logger.error(
    {
      err: error,
      stage: context.currentStage,
      stats: context.runStatsManager.getStats(),
    },
    'Pipeline execution failed'
  )
  sendErrorAlert(error, {
    origin: 'PIPELINE_ORCHESTRATOR',
    stage: context.currentStage,
    runOptions: {
      refresh: context.isRefreshMode,
      noCommitMode: context.noCommitMode,
      useTestPayload: context.useTestPayload,
    },
    currentStats: context.runStatsManager.getStats(),
  })
}

async function cleanup(context) {
  await browserManager.close()
  const duration = (Date.now() - context.startTime) / 1000
  updateTrackingStats(context)
  await saveRunVerdict(context, duration)
  await logFinalReport(context.runStatsManager.getStats(), duration)
  await context.articleTraceLogger.writeAllTraces()
  logger.info({ duration }, 'Pipeline execution completed')
}

function createSyntheticTestArticle() {
  return {
    _id: new mongoose.Types.ObjectId(),
    headline: 'Danish shipping family sells NaviSoft SaaS package for $500mm',
    link: `https://test.headlines.dev/article/${new mongoose.Types.ObjectId()}`,
    source: 'Test E2E Source',
    newspaper: 'Test E2E Source',
    country: ['Denmark'],
    status: 'scraped',
    relevance_headline: 100,
    assessment_headline: 'Synthetic article for pipeline end-to-end test.',
    articleContent: {
      contents: [
        'COPENHAGEN -- The reclusive Møller-Jensen shipping dynasty has sold their privately-held maritime logistics software company, NaviSoft, for an estimated $500 million. The buyer is a US-based private equity firm, Global Tech Partners. NaviSoft, a critical player in container fleet management SaaS, was founded by patriarch Lars Møller-Jensen. His daughter, CEO Eva Møller-Jensen, confirmed the sale. "This transaction allows our family to focus on our new green energy fund," she stated. The family intends to deploy the capital through their family office, M-J Invest.',
      ],
    },
  }
}

export async function runPipeline(options) {
  let context = initializePipelineContext(options)
  let success = true

  try {
    await context.articleTraceLogger.initialize()
    logger.info('--- ARCHITECTURE: Running in Staged, Resumable Mode ---')

    context.currentStage = PIPELINE_STAGES.PREFLIGHT.name
    context = (await runPreFlightChecks(context)).payload
    await initializeResources()

    // --- START OF DEFINITIVE FIX ---
    if (context.test) {
      logger.warn('--- TEST MODE ACTIVATED ---')
      logger.warn('Performing pre-run cleanup for test data...')
      // Clean up any artifacts from previous failed test runs to ensure a clean slate.
      await Promise.all([
        Article.deleteMany({ source: 'Test E2E Source' }),
        SynthesizedEvent.deleteMany({ event_key: /sale-moller-jensen-navisoft/ }),
      ])
      logger.warn('Bypassing scrape. Injecting one high-quality synthetic article.')
      const testArticle = createSyntheticTestArticle()
      context.articlesForPipeline = [testArticle]
      context.runStatsManager.set('freshHeadlinesFound', 1)
      context.lean = true
      context.skipdeepdive = true
    } else {
      context.currentStage = PIPELINE_STAGES.SCRAPE.name
      context = (await runScrapeAndFilter(context)).payload
    }
    // --- END OF DEFINITIVE FIX ---

    context.currentStage = PIPELINE_STAGES.ASSESS.name
    context = (await runAssessAndEnrich(context)).payload

    context.currentStage = PIPELINE_STAGES.RESOLVE.name
    context = (await runEntityResolution(context)).payload

    context.currentStage = PIPELINE_STAGES.SYNTHESIZE.name
    context = (await runClusterAndSynthesize(context)).payload

    context.currentStage = PIPELINE_STAGES.DEEP_DIVE.name
    if (context.skipdeepdive) {
      logger.warn(
        '--- SKIPPING STAGE 4.5: OPPORTUNITY DEEP DIVE (as requested by flag) ---'
      )
    } else {
      context = (await runOpportunityDeepDive(context)).payload
    }

    updateTrackingStats(context)
    await updateSourceAnalytics(context)

    context.currentStage = PIPELINE_STAGES.COMMIT.name
    context = (await runCommitAndNotify(context)).payload

    context.currentStage = PIPELINE_STAGES.KNOWLEDGE_GRAPH.name
    context = (await runUpdateKnowledgeGraph(context)).payload

    context.currentStage = PIPELINE_STAGES.WATCHLIST.name
    await suggestNewWatchlistEntities(context)
  } catch (error) {
    success = false
    handlePipelineError(error, context)
  } finally {
    await cleanup(context)
  }

  return { success, stats: context.runStatsManager.getStats() }
}

```

## 📄 src/pipeline/1_preflight.js
*Lines: 163, Size: 6.02 KB*

```javascript
// apps/pipeline/src/pipeline/1_preflight.js
import { logger } from '@headlines/utils-shared'
import { configure as configureScraperLogic } from '@headlines/scraper-logic/config.js'
import { env, populateSettings, settings } from '@headlines/config'
import { refreshConfig, configStore } from '../config/dynamicConfig.js'
import dbConnect from '@headlines/data-access/dbConnect/node'
import { deleteAllSince } from '@headlines/data-access'
import * as aiServices from '@headlines/ai-services'
import { performDatabaseHousekeeping } from '../utils/housekeeping.js'
import { configurePush } from '@headlines/scraper-logic/push/client.js'
import { configurePusher } from '@headlines/utils-server'
import { testRedisConnection } from '@headlines/utils-server'
import { Setting, Source } from '@headlines/models' // ADDED Source model
import * as allPrompts from '@headlines/prompts'

function validatePromptBraces(promptText, promptName) {
  const singleBraceRegex = /(?<!\{)\{(?!\{)|(?<!\})\}(?!\})/g
  const match = singleBraceRegex.exec(promptText)
  if (match) {
    const char = match[0]
    const index = match.index
    const contextSnippet = promptText.substring(
      Math.max(0, index - 30),
      Math.min(promptText.length, index + 30)
    )
    const errorMessage = `\n[PROMPT VALIDATION PRE-FLIGHT CHECK FAILED] for prompt '${promptName}'.\nFound a single unpaired curly brace '${char}' at position ${index}.\nAll curly braces in instruction prompts must be doubled (e.g., '{{' and '}}') to be treated as literal text and avoid template errors.\n\nContext:\n..."${contextSnippet}"...\n         ^\n`
    throw new Error(errorMessage)
  }
}

function validateAllPrompts() {
  logger.info('🔬 Performing prompt syntax validation pre-flight check...')
  function findAndValidateStrings(obj, name) {
    for (const key in obj) {
      if (typeof obj[key] === 'string') {
        validatePromptBraces(obj[key], `${name}.${key}`)
      } else if (Array.isArray(obj[key])) {
        obj[key].forEach((item, index) => {
          if (typeof item === 'string') {
            validatePromptBraces(item, `${name}.${key}[${index}]`)
          } else if (typeof item === 'object' && item !== null) {
            findAndValidateStrings(item, `${name}.${key}[${index}]`)
          }
        })
      } else if (typeof obj[key] === 'object' && obj[key] !== null) {
        findAndValidateStrings(obj[key], `${name}.${key}`)
      }
    }
  }
  for (const [promptName, promptObject] of Object.entries(allPrompts)) {
    if (promptName.startsWith('shots')) {
      logger.trace(`Skipping brace validation for few-shot example file: ${promptName}`)
      continue
    }
    if (promptObject && typeof promptObject === 'object') {
      const content =
        typeof promptObject === 'function' ? promptObject(settings) : promptObject
      findAndValidateStrings(content, promptName)
    }
  }
  logger.info('✅ All prompts passed syntax validation.')
}

export async function runPreFlightChecks(pipelinePayload) {
  logger.info('--- STAGE 1: PRE-FLIGHT CHECKS & SETUP ---')
  await dbConnect()
  pipelinePayload.dbConnection = true

  if (pipelinePayload.deleteToday) {
    logger.warn('--- DELETE TODAY MODE ENABLED ---')
    const cutoff = new Date()
    cutoff.setUTCHours(0, 0, 0, 0)
    await deleteAllSince(cutoff)
  }

  try {
    const dbSettings = await Setting.find({}).lean()
    populateSettings(dbSettings)
  } catch (error) {
    logger.fatal(
      { err: error },
      'CRITICAL: Failed to load settings from database. Halting.'
    )
    throw error
  }

  validateAllPrompts()
  await refreshConfig()
  configurePush()
  configurePusher()
  if (!(await testRedisConnection(env))) {
    logger.fatal('Redis pre-flight check failed. Aborting pipeline.')
    return { success: false }
  }

  const utilityFunctions = {
    findAlternativeSources: aiServices.findAlternativeSources,
    findNewsApiArticlesForEvent: aiServices.findNewsApiArticlesForEvent,
    performGoogleSearch: aiServices.performGoogleSearch,
    fetchWikipediaSummary: aiServices.fetchWikipediaSummary,
  }
  configureScraperLogic({
    ...env,
    paths: pipelinePayload.paths,
    configStore,
    utilityFunctions,
    logger,
    settings,
  })

  if (!(await aiServices.performAiSanityCheck(settings))) {
    logger.fatal('AI service checks failed. Aborting pipeline.')
    return { success: false }
  }

  await performDatabaseHousekeeping()

  // --- START OF MODIFICATION ---
  logger.info('Validating source filters and fetching sources to scrape...')
  const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000)
  const baseQuery = {
    status: 'active',
    $or: [
      { scrapeFrequency: 'high' },
      { scrapeFrequency: 'low', lastScrapedAt: { $lt: twentyFourHoursAgo } },
      { scrapeFrequency: 'low', lastScrapedAt: { $exists: false } },
    ],
  }
  const queryCriteria = { ...baseQuery }

  if (pipelinePayload.countryFilter) {
    queryCriteria.country = new RegExp(`^${pipelinePayload.countryFilter}$`, 'i')
    delete queryCriteria.$or
  }
  if (pipelinePayload.sourceFilter) {
    // Use a case-insensitive regex for the filter
    queryCriteria.name = new RegExp(`^${pipelinePayload.sourceFilter}$`, 'i')
    delete queryCriteria.$or
  }

  const sourcesToScrape = await Source.find(queryCriteria).lean()

  // If a specific filter was provided but no sources were found, it's a fatal error.
  if (
    sourcesToScrape.length === 0 &&
    (pipelinePayload.countryFilter || pipelinePayload.sourceFilter)
  ) {
    const filterKey = pipelinePayload.sourceFilter ? 'source' : 'country'
    const filterValue = pipelinePayload.sourceFilter || pipelinePayload.countryFilter
    const errorMessage = `PRE-FLIGHT FAILED: The specified filter (--${filterKey} "${filterValue}") matched 0 active sources. Halting run. Please check for typos.`
    logger.fatal(errorMessage)
    throw new Error(errorMessage)
  }

  logger.info(
    `Pre-flight check passed. Found ${sourcesToScrape.length} sources to process.`
  )
  pipelinePayload.sourcesToScrape = sourcesToScrape
  // --- END OF MODIFICATION ---

  return { success: true, payload: pipelinePayload }
}

```

## 📄 src/pipeline/2_scrapeAndFilter.js
*Lines: 140, Size: 5.04 KB*

```javascript
// apps/pipeline/src/pipeline/2_scrapeAndFilter.js
import { logger } from '@headlines/utils-shared'
import { auditLogger } from '../utils/auditLogger.js'
import { filterFreshArticles } from '../modules/dataStore/index.js'
import { Source, Article, SynthesizedEvent, RunVerdict } from '@headlines/models'
import { performStandardScraping } from '../scraper/standardScraper.js'
import mongoose from 'mongoose'
import { settings } from '@headlines/config'
import colors from 'ansi-colors'
import { findArticles, bulkWriteArticles } from '@headlines/data-access'

export async function runScrapeAndFilter(pipelinePayload) {
  logger.info('--- STAGE 2: SCRAPE & FILTER ---')
  const { runStatsManager, isRefreshMode, sourcesToScrape } = pipelinePayload

  if (isRefreshMode) {
    logger.warn(
      'REFRESH MODE: Bypassing scraping. Finding and resetting relevant articles from the last 24 hours.'
    )
    const cutoffDate = new Date(Date.now() - 24 * 60 * 60 * 1000)
    const filter = {
      createdAt: { $gte: cutoffDate },
      relevance_headline: { $gte: settings.HEADLINES_RELEVANCE_THRESHOLD },
      synthesizedEventId: { $exists: false },
    }
    const articlesResult = await findArticles({ filter, select: '+articleContent' })
    if (!articlesResult.success) {
      throw new Error(`Failed to fetch articles for refresh: ${articlesResult.error}`)
    }
    const articlesToReprocess = articlesResult.data
    const articleIdsToReset = articlesToReprocess.map((a) => a._id)
    if (articlesToReprocess.length === 0) {
      logger.info('✅ No relevant articles found to refresh. Ending run.')
      pipelinePayload.articlesForPipeline = []
      return { success: true, payload: pipelinePayload }
    }
    logger.info(
      colors.yellow(
        `Found ${articlesToReprocess.length} relevant articles to refresh and re-process.`
      )
    )
    const eventsToDelete = await SynthesizedEvent.find({
      'source_articles.link': { $in: articlesToReprocess.map((a) => a.link) },
    }).select('_id')
    const eventIdsToDelete = eventsToDelete.map((e) => e._id)
    const [eventDeletion, verdictDeletion] = await Promise.all([
      eventIdsToDelete.length > 0
        ? SynthesizedEvent.deleteMany({ _id: { $in: eventIdsToDelete } })
        : { deletedCount: 0 },
      RunVerdict.deleteMany({ createdAt: { $gte: cutoffDate } }),
    ])
    logger.info(
      `Targeted Cleanup: Deleted ${eventDeletion.deletedCount} associated events and ${verdictDeletion.deletedCount} run verdicts.`
    )
    await Article.updateMany(
      { _id: { $in: articleIdsToReset } },
      {
        $set: { status: 'scraped' },
        $unset: {
          relevance_article: '',
          assessment_article: '',
          key_individuals: '',
          transactionType: '',
          tags: '',
          synthesizedEventId: '',
        },
      }
    )
    logger.info(`Reset ${articleIdsToReset.length} articles to 'scraped' status.`)
    return { success: true, payload: pipelinePayload }
  }

  if (sourcesToScrape.length === 0) {
    logger.warn(
      'No active sources to scrape were passed from pre-flight stage. Ending run.'
    )
    return { success: true, payload: pipelinePayload }
  }

  const { scrapedArticles, scraperHealth } =
    await performStandardScraping(sourcesToScrape)

  runStatsManager.set('scraperHealth', scraperHealth)
  runStatsManager.set('headlinesScraped', scrapedArticles.length)
  auditLogger.info(
    {
      context: {
        all_scraped_headlines: scrapedArticles.map((a) => ({
          headline: a.headline,
          source: a.newspaper,
        })),
      },
    },
    'All Scraped Headlines'
  )

  const freshArticles = await filterFreshArticles(scrapedArticles, false)
  auditLogger.info(
    { context: { fresh_headlines: freshArticles.map((a) => a.headline) } },
    'Fresh Headlines After Filtering'
  )

  runStatsManager.set('freshHeadlinesFound', freshArticles.length)

  // --- START OF DEFINITIVE FIX ---
  // The previous implementation was missing the logic to save the fresh articles
  // to the database with the initial 'scraped' status. This fix adds that crucial step.
  if (freshArticles.length > 0) {
    const articlesToSave = freshArticles.map((article) => ({
      ...article,
      _id: new mongoose.Types.ObjectId(),
      status: 'scraped',
    }))

    const bulkOps = articlesToSave.map((article) => ({
      updateOne: {
        filter: { link: article.link },
        update: { $setOnInsert: article },
        upsert: true,
      },
    }))

    const result = await bulkWriteArticles(bulkOps)
    if (!result.success) {
      throw new Error(`Failed to save fresh articles: ${result.error}`)
    }
    // Correctly log the number of upserted documents.
    logger.info(
      `Successfully saved ${result.upsertedCount} new articles to the database with status 'scraped'.`
    )
  } else {
    logger.info('No new articles to process. Ending run early.')
  }
  // This payload is no longer used by the next stage, but we clear it for safety.
  pipelinePayload.articlesForPipeline = []
  // --- END OF DEFINITIVE FIX ---

  return { success: true, payload: pipelinePayload }
}

```

## 📄 src/pipeline/3_5_entityResolution.js
*Lines: 172, Size: 5.93 KB*

```javascript
// apps/pipeline/src/pipeline/3_5_entityResolution.js
import { logger } from '@headlines/utils-shared'
import { Opportunity, EntityGraph } from '@headlines/models'
import {
  entityExtractorChain,
  oppFactoryChain,
  wealthPredictorChain,
} from '@headlines/ai-services'
import { settings } from '@headlines/config'
import pLimit from 'p-limit'
import colors from 'ansi-colors'

export async function runEntityResolution(pipelinePayload) {
  logger.info('--- STAGE 3.5: PROACTIVE ENTITY RESOLUTION & ENRICHMENT ---')
  const {
    runStatsManager,
    assessedCandidates,
    lean: isLeanMode,
    enrichedArticles,
  } = pipelinePayload

  // --- START OF DEFINITIVE FIX: LEAN MODE LOGIC ---
  // The previous logic incorrectly used `assessedCandidates` in all modes.
  // In lean mode, we must ONLY use the single "champion" article from `enrichedArticles`.
  // In a normal run, we use all relevant articles from the full `assessedCandidates` list.
  let relevantArticles
  if (isLeanMode) {
    relevantArticles = enrichedArticles || []
    logger.warn(
      `[LEAN MODE] Entity resolution will only run on ${relevantArticles.length} champion article(s).`
    )
  } else {
    relevantArticles = (assessedCandidates || []).filter(
      (a) => a.relevance_headline >= settings.HEADLINES_RELEVANCE_THRESHOLD
    )
  }
  // --- END OF DEFINITIVE FIX ---

  if (relevantArticles.length === 0) {
    logger.info('[Entity Resolution] No relevant articles to analyze. Skipping stage.')
    return { success: true, payload: pipelinePayload }
  }

  const textToExtract = relevantArticles
    .map((a) => `${a.headline} - ${a.assessment_headline}`)
    .join('\n')
  const entityResult = await entityExtractorChain({ article_text: textToExtract })
  if (entityResult.error || !entityResult.entities) {
    logger.warn('[Entity Resolution] Failed to extract initial entities from headlines.')
    return { success: true, payload: pipelinePayload }
  }

  const initialEntities = [...new Set(entityResult.entities)]
  logger.info(
    `[Entity Resolution] Initial entities from headlines: ${colors.cyan(initialEntities.join(', '))}`
  )

  const queue = [...initialEntities]
  const vettedEntities = new Set()
  const dossiersToCreate = new Set()

  while (queue.length > 0) {
    const entityName = queue.shift()
    if (vettedEntities.has(entityName.toLowerCase())) continue

    logger.info(
      `\n[Entity Resolution] ➡️ Processing entity: ${colors.magenta.bold(entityName)}`
    )
    vettedEntities.add(entityName.toLowerCase())

    const graphNode = await EntityGraph.findOne({
      $or: [{ name: entityName }, { aliases: entityName }],
    }).lean()

    if (graphNode && graphNode.relationships.length > 0) {
      logger.info(
        `[Entity Resolution]   - ${colors.cyan('Second-Order Discovery:')} Found ${graphNode.relationships.length} relationships for "${entityName}" in Knowledge Graph.`
      )
      for (const rel of graphNode.relationships) {
        if (['Founder Of', 'Owner Of', 'Chairman Of'].includes(rel.type)) {
          if (!vettedEntities.has(rel.targetName.toLowerCase())) {
            logger.info(
              `[Entity Resolution]     - Adding related principal to queue: ${colors.magenta(rel.targetName)}`
            )
            queue.push(rel.targetName)
          }
        }
      }
    }

    const existingOpp = await Opportunity.findOne({ reachOutTo: entityName }).lean()
    if (existingOpp) {
      logger.info(
        `[Entity Resolution]   - Status: ${colors.green('Profile already exists.')}`
      )
      continue
    }

    const context =
      relevantArticles.find((a) => a.headline.includes(entityName))?.headline ||
      textToExtract
    const prediction = await wealthPredictorChain({ name: entityName, context })

    if (prediction.error) {
      logger.warn(`[Entity Resolution]   - Wealth prediction failed for ${entityName}.`)
      continue
    }

    logger.info(
      `[Entity Resolution]   - Wealth Prediction: ${prediction.is_uhnw ? colors.green('High Potential') : colors.yellow('Low Potential')} (Score: ${prediction.score}). Reason: ${prediction.reasoning}`
    )

    if (prediction.is_uhnw) {
      dossiersToCreate.add(entityName)
    }
  }

  const highPotentialTargets = Array.from(dossiersToCreate)
  if (highPotentialTargets.length === 0) {
    logger.info(
      '[Entity Resolution] No new high-potential targets identified for dossier creation.'
    )
    return { success: true, payload: pipelinePayload }
  }

  const limit = pLimit(2)
  const dossierPromises = highPotentialTargets.map((name) =>
    limit(async () => {
      try {
        logger.info(`[Background Task] 🏭 Starting dossier creation for "${name}"...`)
        const oppData = await oppFactoryChain({
          name,
          articles_text: `Initial signal from headlines: ${textToExtract}`,
        })
        if (oppData && !oppData.error && oppData.opportunities.length > 0) {
          const finalOpp = oppData.opportunities[0]
          await Opportunity.updateOne(
            { reachOutTo: finalOpp.reachOutTo },
            { $set: finalOpp },
            { upsert: true }
          )
          logger.info(
            `[Background Task] ✅ Successfully created/updated dossier for "${finalOpp.reachOutTo}".`
          )
        } else {
          logger.warn(
            `[Background Task] ⚠️ Dossier creation failed for "${name}". AI returned: ${JSON.stringify(oppData)}`
          )
        }
      } catch (error) {
        logger.error(
          { err: error, name },
          `[Background Task] A critical error occurred during dossier creation for ${name}.`
        )
      }
    })
  )

  Promise.all(dossierPromises).catch((err) => {
    logger.error(
      { err },
      '[Background Task] One or more background dossier creations failed catastrophically.'
    )
  })

  logger.info(
    `[Entity Resolution] Dispatched ${highPotentialTargets.length} background tasks for dossier creation. Main pipeline continues.`
  )

  return { success: true, payload: pipelinePayload }
}

```

## 📄 src/pipeline/3_assessAndEnrich.js
*Lines: 168, Size: 5.81 KB*

```javascript
// apps/pipeline/src/pipeline/3_assessAndEnrich.js
import { logger } from '@headlines/utils-shared'
import { settings } from '@headlines/config/node'
import { assessHeadlines } from './submodules/assessHeadlines.js'
import { enrichArticles } from './submodules/enrichArticles.js'
import { findArticles } from '@headlines/data-access'

export async function runAssessAndEnrich(pipelinePayload) {
  logger.info('--- STAGE 3: ASSESS & ENRICH ---')
  const {
    runStatsManager,
    articleTraceLogger,
    isRefreshMode,
    lean: isLeanMode,
    sourceFilter,
  } = pipelinePayload

  let articlesForPipeline = []

  // --- START OF DEFINITIVE FIX ---
  // The previous logic passed the payload directly, causing a data flow bug.
  // This new logic ensures that in --test mode, we use the injected payload,
  // and in all other modes, we correctly query the database using the provided sourceFilter.
  if (
    pipelinePayload.articlesForPipeline &&
    pipelinePayload.articlesForPipeline.length > 0
  ) {
    logger.info(
      `Processing ${pipelinePayload.articlesForPipeline.length} articles passed directly from a previous stage (e.g., --test or --refresh mode).`
    )
    articlesForPipeline = pipelinePayload.articlesForPipeline
  } else {
    const filter = { status: 'scraped' }
    if (sourceFilter) {
      filter.source = sourceFilter
    }

    const articlesToAssessResult = await findArticles({
      filter,
      select: '+articleContent',
    })

    if (!articlesToAssessResult.success) {
      throw new Error(
        `Failed to fetch articles for assessment: ${articlesToAssessResult.error}`
      )
    }
    articlesForPipeline = articlesToAssessResult.data
  }
  // --- END OF DEFINITIVE FIX ---

  if (!articlesForPipeline || articlesForPipeline.length === 0) {
    logger.info(
      'No articles found to assess and enrich for the current filter. Skipping stage.'
    )
    pipelinePayload.enrichedArticles = []
    pipelinePayload.assessedCandidates = []
    return { success: true, payload: pipelinePayload }
  }

  logger.info(`Found ${articlesForPipeline.length} articles to assess and enrich.`)

  const syntheticArticles = articlesForPipeline.filter(
    (a) => a.source === 'Richlist Ingestion' || a.source === 'Test E2E Source'
  )
  const realArticles = articlesForPipeline.filter(
    (a) => a.source !== 'Richlist Ingestion' && a.source !== 'Test E2E Source'
  )

  let assessedCandidates = []
  if (isRefreshMode) {
    logger.info(
      'REFRESH MODE: Skipping headline assessment as articles are already assessed.'
    )
    assessedCandidates = realArticles
  } else {
    assessedCandidates = await assessHeadlines(realArticles, articleTraceLogger)
  }

  runStatsManager.set('headlinesAssessed', assessedCandidates.length)

  assessedCandidates.forEach((article) => {
    const status =
      article.relevance_headline >= settings.HEADLINES_RELEVANCE_THRESHOLD
        ? 'PASSED'
        : 'DROPPED'
    const color = status === 'PASSED' ? '\x1b[32m' : '\x1b[90m'
    logger.info(
      `${color}[${status.padEnd(7)}] [Score: ${String(
        article.relevance_headline
      ).padStart(3)}] "${article.headline}"\x1b[0m`
    )
  })

  if (assessedCandidates.length > 0 && !isRefreshMode) {
    const assessedLinks = assessedCandidates.map((a) => a.link)
    const refetchResult = await findArticles({
      filter: { link: { $in: assessedLinks } },
      select: '+articleContent',
    })
    if (refetchResult.success && refetchResult.data.length > 0) {
      logger.info(
        `Synchronized state for ${refetchResult.data.length} assessed articles from the database to ensure data integrity.`
      )
      assessedCandidates = refetchResult.data
    } else {
      logger.error(
        { err: refetchResult.error },
        'CRITICAL: Failed to re-fetch assessed articles after saving. The pipeline cannot safely proceed.'
      )
      throw new Error(
        'Failed to synchronize article state from database after assessment.'
      )
    }
  }

  let relevantCandidates = assessedCandidates.filter(
    (a) => a.relevance_headline >= settings.HEADLINES_RELEVANCE_THRESHOLD
  )
  runStatsManager.set('relevantHeadlines', relevantCandidates.length)

  if (isLeanMode && relevantCandidates.length > 0) {
    logger.warn(
      `[LEAN MODE] Pre-selecting top 5 candidates for enrichment to find one champion.`
    )
    relevantCandidates.sort((a, b) => b.relevance_headline - a.relevance_headline)
    const topCandidates = relevantCandidates.slice(0, 5)

    const { enrichedArticles: leanEnriched, enrichmentOutcomes } = await enrichArticles(
      topCandidates,
      syntheticArticles,
      articleTraceLogger
    )

    runStatsManager.set('enrichmentOutcomes', enrichmentOutcomes)

    if (leanEnriched.length > 0) {
      const championArticle = leanEnriched.reduce((max, current) =>
        (current.relevance_article || 0) > (max.relevance_article || 0) ? current : max
      )
      pipelinePayload.enrichedArticles = [championArticle]
      logger.warn(
        `[LEAN MODE] Champion selected with final score ${championArticle.relevance_article}: "${championArticle.headline}"`
      )
    } else {
      pipelinePayload.enrichedArticles = []
      logger.warn('[LEAN MODE] No articles survived enrichment to become champion.')
    }
    pipelinePayload.assessedCandidates = assessedCandidates
    return { success: true, payload: pipelinePayload }
  }

  const { enrichedArticles, enrichmentOutcomes } = await enrichArticles(
    relevantCandidates,
    syntheticArticles,
    articleTraceLogger
  )

  runStatsManager.set('enrichmentOutcomes', enrichmentOutcomes)
  runStatsManager.set('articlesEnriched', enrichedArticles.length)
  runStatsManager.set('relevantArticles', enrichedArticles.length)

  pipelinePayload.enrichedArticles = enrichedArticles
  pipelinePayload.assessedCandidates = assessedCandidates

  return { success: true, payload: pipelinePayload }
}

```

## 📄 src/pipeline/4_5_opportunityDeepDive.js
*Lines: 305, Size: 9.96 KB*

```javascript
// packages/pipeline/src/pipeline/4_5_opportunityDeepDive.js
import { logger } from '@headlines/utils-shared'
import { auditLogger } from '@headlines/utils-server'
import {
  performGoogleSearch,
  fetchWikipediaSummary,
  opportunityChain,
  dossierUpdateChain,
  callLanguageModel,
} from '@headlines/ai-services'
import { Opportunity, EntityGraph } from '@headlines/models'
import { settings } from '@headlines/config'
import { getConfig } from '@headlines/scraper-logic/config.js'
import pLimit from 'p-limit'
import colors from 'ansi-colors'

const CONCURRENCY_LIMIT = 2
const GOOGLE_SEARCH_RESULTS = 3
const CONTEXT_SECTION_SEPARATOR = '\n\n---'

function isValidIndividual(individual) {
  return individual && individual.name && typeof individual.name === 'string'
}

function generateSearchQueries(individual) {
  const queries = [`"${individual.name}"`]
  if (individual.company) {
    queries.push(`"${individual.name}" ${individual.company}`)
  }
  return queries
}

function buildEventContext(event) {
  return `Event Context: ${event.synthesized_headline}\n${event.synthesized_summary}`
}

function appendGoogleContext(context, googleResult) {
  if (googleResult.status === 'fulfilled' && googleResult.value?.success) {
    return `${context}${CONTEXT_SECTION_SEPARATOR} Google Search Snippets ---\n${googleResult.value.snippets}`
  }
  return context
}

function appendWikipediaContext(context, wikiResult) {
  if (wikiResult.status === 'fulfilled' && wikiResult.value?.success) {
    return `${context}${CONTEXT_SECTION_SEPARATOR} Wikipedia Summary: ${wikiResult.value.title} ---\n${wikiResult.value.summary}`
  }
  return context
}

function createFallbackResult(individual, event, errorMessage) {
  return {
    individual,
    event,
    combinedContext: buildEventContext(event),
    error: errorMessage,
  }
}

async function researchIndividual(individual, event) {
  try {
    if (!isValidIndividual(individual)) {
      throw new Error('Invalid individual object: missing or invalid name')
    }
    const config = getConfig()
    let combinedContext = buildEventContext(event)
    const queries = generateSearchQueries(individual)
    const [googleResult, wikiResult] = await Promise.allSettled([
      config.utilityFunctions.performGoogleSearch(queries[0], {
        numResults: GOOGLE_SEARCH_RESULTS,
      }),
      config.utilityFunctions.fetchWikipediaSummary(individual.name),
    ])
    combinedContext = appendGoogleContext(combinedContext, googleResult)
    combinedContext = appendWikipediaContext(combinedContext, wikiResult)
    return { individual, event, combinedContext, error: null }
  } catch (error) {
    logger.error(
      { err: error, individualName: individual?.name },
      '[Deep Dive] Research failed for individual'
    )
    return createFallbackResult(individual, event, error.message)
  }
}

// --- START OF MODIFICATION ---
/**
 * Builds a more constrained summarization prompt to prevent timeouts.
 * @param {string} name - Individual name
 * @returns {string} System prompt
 */
function buildSummarizationPrompt(name) {
  return `You are an intelligence analyst. Read the following raw text about "${name}" and synthesize it into a concise, fact-based brief of NO MORE THAN 250 WORDS. Focus ONLY on career history, wealth, investments, company ownership, and key relationships. Discard all irrelevant noise. The output will be used to generate a structured dossier.`
}

/**
 * Summarizes raw context into a structured brief for dossier generation, now with enhanced logging.
 * @param {string} context - Raw context text
 * @param {string} name - Individual name
 * @returns {Promise<string>} Summarized context or original on failure
 */
async function summarizeContextForDossier(context, name) {
  const startTime = Date.now()
  logger.info(
    `[Deep Dive] Summarizing ${context.length} chars of raw context for ${name}...`
  )

  const prompt = buildSummarizationPrompt(name)

  // Black Box Logging: Log the exact payload being sent to the AI.
  auditLogger.info(
    {
      context: {
        agent: 'ContextSummarizer',
        model: settings.LLM_MODEL_SYNTHESIS,
        target: name,
        payload: { systemPrompt: prompt, userContent: context },
      },
    },
    `Pre-flight log for summarization call`
  )

  try {
    const timeoutPromise = new Promise((_, reject) =>
      setTimeout(() => reject(new Error('Summarization timeout')), 20000)
    )

    const summaryPromise = callLanguageModel({
      modelName: settings.LLM_MODEL_SYNTHESIS,
      systemPrompt: prompt,
      userContent: context,
      isJson: false,
    })

    const summary = await Promise.race([summaryPromise, timeoutPromise])

    if (summary.error) {
      logger.warn(
        `[Deep Dive] Context summarization failed for ${name}. Using raw text as fallback.`
      )
      return context
    }

    logger.info(`[Deep Dive] Context summarized to ${summary.length} chars.`)
    return summary
  } catch (error) {
    logger.warn(
      { err: error, duration: Date.now() - startTime },
      `[Deep Dive] Summarization timeout or error for ${name}. Using raw text as fallback.`
    )
    return context
  }
}
// --- END OF MODIFICATION ---

function meetsRelevanceThreshold(event) {
  return event.highest_relevance_score >= settings.EVENT_RELEVANCE_THRESHOLD
}

function extractUniqueIndividuals(events) {
  const individualsMap = new Map()
  for (const event of events) {
    if (!meetsRelevanceThreshold(event)) continue
    for (const individual of event.key_individuals || []) {
      const normalizedName = individual.name?.toLowerCase()
      if (normalizedName && !individualsMap.has(normalizedName)) {
        individualsMap.set(normalizedName, { individual, event })
      }
    }
  }
  return individualsMap
}

function isValidResearchResult(result) {
  return (
    result &&
    typeof result === 'object' &&
    result.individual &&
    result.event &&
    result.combinedContext !== undefined
  )
}

function createResearchTasks(individualsMap, concurrencyLimit) {
  const limit = pLimit(concurrencyLimit)
  return Array.from(individualsMap.values()).map(({ individual, event }) =>
    limit(() => researchIndividual(individual, event))
  )
}

function buildOpportunityInput(summarizedContext) {
  return {
    context_text: summarizedContext,
    existing_wealth_profile: null,
  }
}

function extractLinkedOpportunity(result, eventKey) {
  if (!result.opportunities || result.opportunities.length === 0) return null
  const opportunity = result.opportunities[0]
  opportunity.event_key = eventKey
  return opportunity
}

async function synthesizeOpportunity(researchResult) {
  const { individual, event, combinedContext, error: researchError } = researchResult
  if (researchError) return null

  try {
    const summarizedContext = await summarizeContextForDossier(
      combinedContext,
      individual.name
    )
    const opportunityInput = buildOpportunityInput(summarizedContext)
    logger.info(
      `[Deep Dive] 🧬 Synthesizing rich opportunity profile for ${individual.name}...`
    )
    const result = await opportunityChain(opportunityInput)
    const opportunity = extractLinkedOpportunity(result, event.event_key)
    if (opportunity) {
      logger.info(
        `[Deep Dive]   - ✅ Successfully generated rich profile for ${individual.name}`
      )
      return opportunity
    } else {
      logger.warn(
        `[Deep Dive]   - ⚠️ Failed to generate a rich profile for ${individual.name}. AI Result: ${JSON.stringify(
          result
        )}`
      )
      return null
    }
  } catch (error) {
    logger.error(
      { err: error, individual: individual.name },
      '[Deep Dive] Synthesis failed for individual'
    )
    return null
  }
}

async function processResearchResults(researchResults) {
  const opportunities = []
  for (const researchResult of researchResults) {
    if (!isValidResearchResult(researchResult)) {
      logger.warn('[Deep Dive] A research task returned an invalid result; skipping')
      continue
    }
    const opportunity = await synthesizeOpportunity(researchResult)
    if (opportunity) {
      opportunities.push(opportunity)
    }
  }
  return opportunities
}

function deduplicateOpportunities(opportunities) {
  const opportunityMap = new Map()
  for (const opportunity of opportunities) {
    if (opportunity.reachOutTo) {
      const key = opportunity.reachOutTo.toLowerCase()
      opportunityMap.set(key, opportunity)
    }
  }
  return Array.from(opportunityMap.values())
}

function mergeOpportunities(existingOpportunities, newOpportunities) {
  const allOpportunities = [...(existingOpportunities || []), ...newOpportunities]
  return deduplicateOpportunities(allOpportunities)
}

function hasEventsToProcess(payload) {
  return payload.synthesizedEvents && payload.synthesizedEvents.length > 0
}

export async function runOpportunityDeepDive(pipelinePayload) {
  logger.info('--- STAGE 4.5: OPPORTUNITY DEEP DIVE (with Knowledge Graph) ---')
  const { synthesizedEvents, opportunitiesToSave } = pipelinePayload
  if (!hasEventsToProcess(pipelinePayload)) {
    logger.info('[Deep Dive] No new events to process. Skipping deep dive.')
    return { success: true, payload: pipelinePayload }
  }
  const individualsToResearch = extractUniqueIndividuals(synthesizedEvents)
  if (individualsToResearch.size === 0) {
    logger.info('[Deep Dive] No key individuals from high-value events found. Skipping.')
    return { success: true, payload: pipelinePayload }
  }
  logger.info(
    `[Deep Dive] Identified ${individualsToResearch.size} unique individuals for deep dive research`
  )
  const researchTasks = createResearchTasks(individualsToResearch, CONCURRENCY_LIMIT)
  const researchResults = await Promise.all(researchTasks)
  const deepDiveOpportunities = await processResearchResults(researchResults)
  const finalOpportunities = mergeOpportunities(
    opportunitiesToSave,
    deepDiveOpportunities
  )
  pipelinePayload.opportunitiesToSave = finalOpportunities
  logger.info(
    `[Deep Dive] Stage complete. Total opportunities to commit: ${finalOpportunities.length}`
  )
  return { success: true, payload: pipelinePayload }
}

```

## 📄 src/pipeline/4_clusterAndSynthesize.js
*Lines: 457, Size: 14.4 KB*

```javascript
// apps/pipeline/src/pipeline/4_clusterAndSynthesize.js
import { truncateString, logger } from '@headlines/utils-shared'
import { auditLogger } from '@headlines/utils-server'
import {
  clusteringChain,
  synthesisChain,
  entityExtractorChain,
  opportunityChain,
  findSimilarArticles,
} from '@headlines/ai-services'
import { settings } from '@headlines/config'
import { getConfig } from '@headlines/scraper-logic/config.js'
import { SynthesizedEvent } from '@headlines/models'
import mongoose from 'mongoose'

const SIMILARITY_THRESHOLD = 0.9
const EVENT_KEY_HASH_LENGTH = 6
const MAX_HEADLINE_DISPLAY_LENGTH = 60

function generateUniqueEventKey(baseKey) {
  const uniqueHash = new mongoose.Types.ObjectId()
    .toString()
    .slice(-EVENT_KEY_HASH_LENGTH)
  return `${baseKey}-${uniqueHash}`
}

function deduplicateArticles(articles) {
  return Array.from(new Map(articles.map((article) => [article.link, article])).values())
}

function extractUniqueWatchlistHits(articles) {
  const allHits = articles.flatMap((article) => article.watchlistHits || [])
  return [...new Set(allHits.map((id) => id.toString()))]
}

function calculateHighestRelevanceScore(articles) {
  return Math.max(...articles.map((article) => article.relevance_article || 0))
}

function getPrimaryCountry(articles) {
  return (articles[0]?.country || [])[0] || 'Unknown'
}

async function enrichWithWikipedia(entities, utilityFunctions) {
  if (entities.length === 0) {
    return { results: [], context: 'Not available.' }
  }
  const results = await Promise.all(
    entities.map((entity) => utilityFunctions.fetchWikipediaSummary(entity))
  )
  const context =
    results
      .filter((result) => result.success)
      .map((result) => result.summary)
      .join('\n---\n') || 'Not available.'
  return { results, context }
}

async function enrichWithNewsApi(headline, utilityFunctions) {
  return utilityFunctions.findNewsApiArticlesForEvent(headline)
}

function determineEnrichmentSources(historicalContext, wikiResults, newsApiResult) {
  const sources = []
  if (historicalContext.length > 0) sources.push('rag_db')
  if (wikiResults.some((result) => result.success)) sources.push('wikipedia')
  if (newsApiResult.success) sources.push('news_api')
  return sources
}

function buildSynthesisContext({
  primaryCountry,
  articles,
  historicalContext,
  wikipediaContext,
  newsApiContext,
}) {
  return {
    SOURCE_COUNTRY_CONTEXT: `The source newspaper for this event is from ${primaryCountry}. Prioritize this as the event's country unless the text explicitly states otherwise.`,
    "[ TODAY'S NEWS ]": articles.map((article) => ({
      headline: article.headline,
      source: article.newspaper,
      full_text: article.assessment_article,
      key_individuals: article.key_individuals || [],
    })),
    '[ HISTORICAL CONTEXT (Internal Database) ]': historicalContext,
    '[ PUBLIC WIKIPEDIA CONTEXT ]': wikipediaContext,
    '[ LATEST NEWS CONTEXT (NewsAPI) ]': newsApiContext,
  }
}

function addSynthesisTrace(articles, clusterKey, synthesisInput, articleTraceLogger) {
  const contextTrace = {
    stage: 'Synthesis Context',
    status: 'USED',
    reason: `Clustered into event_key: ${clusterKey}`,
  }
  for (const article of articles) {
    if (article.pipelineTrace) article.pipelineTrace.push(contextTrace)
    if (article._id) {
      articleTraceLogger.addStage(article._id, 'Synthesis Context', {
        cluster_key: clusterKey,
        full_context: synthesisInput,
      })
    }
  }
}

function addLlmOutputTrace(articles, synthesisResult, articleTraceLogger) {
  for (const article of articles) {
    if (article._id) {
      articleTraceLogger.addStage(article._id, 'Synthesis LLM Output', {
        llm_output: synthesisResult,
      })
    }
  }
}

function formatSourceArticles(articles) {
  return articles.map((article) => ({
    headline: article.headline,
    link: article.link,
    newspaper: article.newspaper,
    imageUrl: article.imageUrl,
    country: article.country,
  }))
}

function createEventObject({
  eventData,
  clusterKey,
  articles,
  highestRelevanceScore,
  enrichmentSources,
  uniqueWatchlistHits,
  existingEvent,
}) {
  return {
    ...eventData,
    event_key: existingEvent ? existingEvent.event_key : clusterKey,
    synthesized_headline: eventData.headline,
    synthesized_summary: eventData.summary,
    ai_assessment_reason: articles[0].assessment_article,
    highest_relevance_score: highestRelevanceScore,
    source_articles: formatSourceArticles(articles),
    enrichmentSources,
    watchlistHits: uniqueWatchlistHits,
    pipelineTrace: [
      ...(existingEvent ? existingEvent.pipelineTrace : []),
      {
        stage: 'Synthesis',
        status: existingEvent ? 'UPDATED' : 'SUCCESS',
        reason: `Synthesized from ${articles.length} articles.`,
      },
    ],
  }
}

function buildOpportunityContext(eventObject, combinedText) {
  return {
    context_text: `Event Key: ${eventObject.event_key}\nSynthesized Event Headline: ${eventObject.synthesized_headline}\nSynthesized Event Summary: ${eventObject.synthesized_summary}\nKey Individuals already identified: ${JSON.stringify(eventObject.key_individuals)}\nSource Article Snippets: ${truncateString(combinedText, settings.LLM_CONTEXT_MAX_CHARS)}`,
    existing_wealth_profile: null,
  }
}

function linkOpportunitiesToEvent(opportunities, eventKey) {
  return (opportunities || []).map((opportunity) => ({
    ...opportunity,
    event_key: eventKey,
  }))
}

async function synthesizeEventsFromCluster(
  articlesInCluster,
  clusterKey,
  runStatsManager,
  articleTraceLogger,
  existingEvent = null,
  isLeanMode = false
) {
  const config = getConfig()
  const allSourceArticles = existingEvent
    ? [...existingEvent.source_articles, ...articlesInCluster]
    : articlesInCluster
  const uniqueArticles = deduplicateArticles(allSourceArticles)
  const primaryHeadline = uniqueArticles[0]?.headline || clusterKey
  const primaryCountry = getPrimaryCountry(uniqueArticles)

  logger.info(
    `--- [ Synthesizing from Cluster: "${truncateString(primaryHeadline, MAX_HEADLINE_DISPLAY_LENGTH)}" ] ---`
  )

  const combinedText = uniqueArticles
    .map((article) => `${article.headline}\n${article.assessment_article || ''}`)
    .join('\n\n')

  let historicalContext = []
  let wikiEnrichment = { results: [], context: 'Not available.' }
  let newsApiResult = { success: false, snippets: 'Not available.' }
  let enrichmentSources = []

  if (isLeanMode) {
    logger.warn('[LEAN MODE] Skipping all external RAG enrichment for synthesis.')
  } else {
    const entityResult = await entityExtractorChain({ article_text: combinedText })
    const entities = entityResult.entities || []
    historicalContext = await findSimilarArticles(entities.join(', '))
    ;[wikiEnrichment, newsApiResult] = await Promise.all([
      enrichWithWikipedia(entities, config.utilityFunctions),
      enrichWithNewsApi(primaryHeadline, config.utilityFunctions),
    ])
    enrichmentSources = determineEnrichmentSources(
      historicalContext,
      wikiEnrichment.results,
      newsApiResult
    )
  }

  const synthesisInput = buildSynthesisContext({
    primaryCountry,
    articles: uniqueArticles,
    historicalContext,
    wikipediaContext: wikiEnrichment.context,
    newsApiContext: newsApiResult.snippets,
  })

  addSynthesisTrace(uniqueArticles, clusterKey, synthesisInput, articleTraceLogger)
  const synthesisResult = await synthesisChain({
    context_json_string: JSON.stringify(synthesisInput),
  })
  addLlmOutputTrace(uniqueArticles, synthesisResult, articleTraceLogger)

  if (!synthesisResult || synthesisResult.error || !synthesisResult.events) {
    logger.warn({ details: synthesisResult?.error }, 'Synthesis failed for cluster.')
    return []
  }

  const highestRelevanceScore = calculateHighestRelevanceScore(uniqueArticles)
  const uniqueWatchlistHits = extractUniqueWatchlistHits(uniqueArticles)
  const finalEventsAndOpportunities = []

  for (const eventData of synthesisResult.events) {
    runStatsManager.increment('eventsSynthesized')
    const eventObject = createEventObject({
      eventData,
      clusterKey,
      articles: uniqueArticles,
      highestRelevanceScore,
      enrichmentSources,
      uniqueWatchlistHits,
      existingEvent,
    })
    const opportunityInput = buildOpportunityContext(eventObject, combinedText)
    const opportunityResult = await opportunityChain(opportunityInput)
    runStatsManager.push('synthesizedEventsForReport', {
      synthesized_headline: eventObject.synthesized_headline,
      highest_relevance_score: eventObject.highest_relevance_score,
    })
    const opportunitiesWithKey = linkOpportunitiesToEvent(
      opportunityResult.opportunities,
      eventObject.event_key
    )
    finalEventsAndOpportunities.push({
      event: eventObject,
      opportunities: opportunitiesWithKey,
    })
  }
  return finalEventsAndOpportunities
}

function filterRelevantArticles(articles) {
  return articles.filter(
    (article) => article.relevance_article >= settings.ARTICLES_RELEVANCE_THRESHOLD
  )
}

function prepareClusteringPayload(articles) {
  return articles.map((article) => ({
    id: article._id.toString(),
    headline: article.headline,
    summary: article.assessment_article || '',
  }))
}

function isValidClusteringResult(clusteringResult) {
  return !clusteringResult.error && clusteringResult.events
}

function findArticlesInCluster(articleIds, allArticles) {
  return articleIds
    .map((id) => allArticles.find((article) => article._id.toString() === id))
    .filter(Boolean)
}

function selectPrimaryArticle(articles) {
  return articles.reduce((prev, current) =>
    (prev.relevance_article || 0) > (current.relevance_article || 0) ? prev : current
  )
}

function shouldMergeWithExistingEvent(bestMatch) {
  return (
    bestMatch &&
    typeof bestMatch.id === 'string' &&
    bestMatch.id.startsWith('event_') &&
    bestMatch.score > SIMILARITY_THRESHOLD
  )
}

function extractEventId(matchId) {
  return matchId.replace('event_', '')
}

function addToClusterMap(clusters, key, articles, existingEvent) {
  if (clusters.has(key)) {
    clusters.get(key).articles.push(...articles)
  } else {
    clusters.set(key, { articles, existingEvent })
  }
}

async function processCluster(cluster, allArticles, finalClusters) {
  const articlesInCluster = findArticlesInCluster(cluster.article_ids, allArticles)
  if (articlesInCluster.length === 0) return

  const primaryArticle = selectPrimaryArticle(articlesInCluster)

  // --- START OF DEFINITIVE FIX ---
  // The check for `isLeanMode` was incorrectly placed here, disabling a core pipeline feature.
  // Event evolution (checking for duplicates via Pinecone) is fast and essential for data quality.
  // It should ALWAYS run, regardless of any test flags. This `if` block is removed.
  const similarEvents = await findSimilarArticles(primaryArticle.headline)
  const bestMatch = similarEvents.length > 0 ? similarEvents[0] : null
  if (shouldMergeWithExistingEvent(bestMatch)) {
    const existingEventId = extractEventId(bestMatch.id)
    logger.info(
      `[Event Evolution] New cluster for "${primaryArticle.headline}" matches existing event ID ${existingEventId} with score ${bestMatch.score}. Merging.`
    )
    const existingEvent = await SynthesizedEvent.findById(existingEventId).lean()
    if (existingEvent) {
      addToClusterMap(
        finalClusters,
        existingEvent.event_key,
        articlesInCluster,
        existingEvent
      )
      return
    }
  }
  // --- END OF DEFINITIVE FIX ---

  const uniqueKey = generateUniqueEventKey(cluster.event_key)
  addToClusterMap(finalClusters, uniqueKey, articlesInCluster, null)
}

async function synthesizeAllClusters(
  clusters,
  runStatsManager,
  articleTraceLogger,
  isLeanMode = false
) {
  const synthesisPromises = []
  for (const [key, { articles, existingEvent }] of clusters.entries()) {
    synthesisPromises.push(
      synthesizeEventsFromCluster(
        articles,
        key,
        runStatsManager,
        articleTraceLogger,
        existingEvent,
        isLeanMode
      )
    )
  }
  const results = await Promise.all(synthesisPromises)
  return results.flat()
}

function separateEventsAndOpportunities(results) {
  const events = []
  const opportunities = []
  for (const result of results) {
    if (result) {
      events.push(result.event)
      opportunities.push(...result.opportunities)
    }
  }
  return { events, opportunities }
}

export async function runClusterAndSynthesize(pipelinePayload) {
  logger.info('--- STAGE 4: CLUSTER & SYNTHESIZE (with Event Evolution) ---')

  const {
    runStatsManager,
    enrichedArticles,
    articleTraceLogger,
    lean: isLeanMode,
  } = pipelinePayload

  const articlesForProcessing = (enrichedArticles || []).filter(
    (article) => article.relevance_article >= settings.ARTICLES_RELEVANCE_THRESHOLD
  )

  if (articlesForProcessing.length === 0) {
    logger.info('No relevant articles were promoted for synthesis stage.')
    pipelinePayload.synthesizedEvents = []
    pipelinePayload.opportunitiesToSave = []
    return { success: true, payload: pipelinePayload }
  }

  const articlePayload = prepareClusteringPayload(articlesForProcessing)
  const clusteringResult = await clusteringChain({
    articles_json_string: JSON.stringify(articlePayload),
  })

  if (!isValidClusteringResult(clusteringResult)) {
    logger.error(
      { err: clusteringResult.error, rawResponse: clusteringResult },
      'Clustering Agent failed to produce a valid response. Skipping synthesis stage.'
    )
    runStatsManager.push(
      'errors',
      'Clustering Agent Failed: ' +
        (clusteringResult.error || 'No events array in response')
    )
    pipelinePayload.synthesizedEvents = []
    pipelinePayload.opportunitiesToSave = []
    return { success: true, payload: pipelinePayload }
  }

  const initialClusters = clusteringResult.events
  runStatsManager.set('eventsClustered', initialClusters.length)
  logger.info(
    { details: initialClusters },
    `Clustered ${articlesForProcessing.length} articles into ${initialClusters.length} initial unique events.`
  )

  const finalClusters = new Map()
  for (const cluster of initialClusters) {
    await processCluster(cluster, articlesForProcessing, finalClusters)
  }

  const synthesisResults = await synthesizeAllClusters(
    finalClusters,
    runStatsManager,
    articleTraceLogger,
    isLeanMode
  )
  const { events, opportunities } = separateEventsAndOpportunities(synthesisResults)

  pipelinePayload.synthesizedEvents = events
  pipelinePayload.opportunitiesToSave = opportunities

  return { success: true, payload: pipelinePayload }
}

```

## 📄 src/pipeline/5_5_updateKnowledgeGraph.js
*Lines: 111, Size: 3.79 KB*

```javascript
// apps/pipeline/src/pipeline/5_5_updateKnowledgeGraph.js
import { logger } from '@headlines/utils-shared'
import { EntityGraph } from '@headlines/models'
import { graphUpdaterChain, entityCanonicalizerChain } from '@headlines/ai-services'

async function upsertEntitiesAndRelationships(event, relationships, entities) {
  // 1. Ensure all entities exist in the graph and get their IDs
  const entityNameIdMap = new Map()
  const entityCanonicalNameMap = new Map()

  for (const name of entities) {
    // Canonicalize each name for consistency
    const canonicalResult = await entityCanonicalizerChain({ entity_name: name })
    const canonicalName = canonicalResult.canonical_name || name

    // Use the canonical name for lookup and creation
    const entityDoc = await EntityGraph.findOneAndUpdate(
      { name: canonicalName },
      {
        $setOnInsert: { name: canonicalName, type: 'company' },
        $addToSet: { aliases: name },
      },
      { upsert: true, new: true }
    ).lean()

    entityNameIdMap.set(name.toLowerCase(), entityDoc._id)
    entityCanonicalNameMap.set(name.toLowerCase(), canonicalName)
  }

  // 2. Build bulk write operations for relationships
  const bulkOps = []
  for (const [subject, predicate, object] of relationships) {
    const subjectId = entityNameIdMap.get(subject.toLowerCase())
    const objectId = entityNameIdMap.get(object.toLowerCase())
    const canonicalSubject = entityCanonicalNameMap.get(subject.toLowerCase())
    const canonicalObject = entityCanonicalNameMap.get(object.toLowerCase())

    if (subjectId && objectId && canonicalSubject && canonicalObject) {
      // Add relationship from Subject -> Object
      bulkOps.push({
        updateOne: {
          filter: { _id: subjectId },
          update: {
            $addToSet: {
              relationships: {
                targetId: objectId,
                targetName: canonicalObject,
                type: predicate,
                context: `From event: ${event.synthesized_headline}`,
              },
            },
          },
        },
      })
    }
  }

  if (bulkOps.length > 0) {
    await EntityGraph.bulkWrite(bulkOps, { ordered: false })
    logger.trace(
      { count: bulkOps.length, eventId: event._id },
      `Wrote ${bulkOps.length} relationships to knowledge graph.`
    )
  }
}

export async function runUpdateKnowledgeGraph(pipelinePayload) {
  logger.info('--- STAGE 5.5: UPDATE KNOWLEDGE GRAPH ---')
  const { savedEvents } = pipelinePayload

  if (!savedEvents || savedEvents.length === 0) {
    logger.info('[Knowledge Graph] No new events to process. Skipping.')
    return { success: true, payload: pipelinePayload }
  }

  logger.info(
    `[Knowledge Graph] Analyzing ${savedEvents.length} new events to extract relationships...`
  )
  let relationshipsFound = 0

  // Process events sequentially to avoid overwhelming the AI or DB
  for (const event of savedEvents) {
    try {
      const result = await graphUpdaterChain({ event_summary: event.synthesized_summary })
      if (result.error || !result.relationships) {
        logger.warn(
          { eventId: event._id, error: result.error },
          'Graph Updater AI failed for event.'
        )
        continue
      }

      if (result.relationships.length > 0) {
        await upsertEntitiesAndRelationships(event, result.relationships, result.entities)
        relationshipsFound += result.relationships.length
      }
    } catch (error) {
      // This is a non-blocking stage, so we log the error but don't throw.
      logger.error(
        { err: error, eventId: event._id },
        'A non-critical error occurred during knowledge graph update for one event.'
      )
    }
  }

  logger.info(
    `[Knowledge Graph] Stage complete. Added or updated ${relationshipsFound} relationships.`
  )
  return { success: true, payload: pipelinePayload }
}

```

## 📄 src/pipeline/5_commitAndNotify.js
*Lines: 160, Size: 5.26 KB*

```javascript
// apps/pipeline/src/pipeline/5_commitAndNotify.js
import { logger } from '@headlines/utils-shared'
import { auditLogger } from '@headlines/utils-server'
import { sendSupervisorReportEmail } from '../modules/email/index.js'
import { judgeAndFilterOutput } from './submodules/commit/1_judgeOutput.js'
import { saveResultsToDb } from './submodules/commit/2_saveResults.js'
import { triggerNotifications } from './submodules/commit/3_triggerNotifications.js'

const FATAL_JUDGEMENT_QUALITIES = ['Irrelevant', 'Poor']

function shouldSkipCommits(payload) {
  return payload.noCommitMode || payload.isDryRun
}

function canProceedWithCommits(payload) {
  const runStats = payload.runStatsManager.getStats()
  return payload.dbConnection && (!runStats.errors || runStats.errors.length === 0)
}

function isEventApproved(event, fatalQualities) {
  const quality = event.judgeVerdict?.quality
  return quality && !fatalQualities.includes(quality)
}

function filterApprovedEvents(events, fatalQualities) {
  const approvedEvents = []
  for (const event of events) {
    if (isEventApproved(event, fatalQualities)) {
      approvedEvents.push(event)
    } else {
      logger.warn(
        { event: event.synthesized_headline, verdict: event.judgeVerdict },
        "Event discarded by Judge's final verdict"
      )
    }
  }
  return approvedEvents
}

function createSaveSummary(totalEvents, approvedEvents, savedOpportunities) {
  return `Database Save Summary: ${totalEvents} total events processed, ${approvedEvents} approved, ${savedOpportunities} opportunities committed.`
}

function hasItemsToNotify(savedEvents, savedOpportunities) {
  return savedEvents.length > 0 || (savedOpportunities && savedOpportunities.length > 0)
}

function createNotificationMessage(eventCount, opportunityCount) {
  return `Triggering notifications for ${eventCount} approved/committed events and ${opportunityCount} committed opportunities.`
}

async function handleSkipCommitMode(payload) {
  logger.warn(
    'COMMIT/NOTIFY: Skipping database commits and user notifications due to run flags.'
  )
  if (!payload.isDryRun) {
    const runStats = payload.runStatsManager.getStats()
    await sendSupervisorReportEmail(runStats, payload.articleTraceLogger.getAllTraces())
  }
}

async function executeJudgeAndFilter(payload) {
  return judgeAndFilterOutput(payload, FATAL_JUDGEMENT_QUALITIES)
}

async function processAndSave(payload, allJudgedEvents, approvedEvents, opportunities) {
  const saveResults = await saveResultsToDb(
    payload,
    allJudgedEvents,
    opportunities,
    approvedEvents
  )
  logger.info(
    createSaveSummary(
      allJudgedEvents.length,
      approvedEvents.length,
      saveResults.savedOpportunities.length
    )
  )
  return saveResults
}

async function executeNotifications(payload, savedEvents, savedOpportunities) {
  if (hasItemsToNotify(savedEvents, savedOpportunities)) {
    logger.info(createNotificationMessage(savedEvents.length, savedOpportunities.length))
    await triggerNotifications(payload, savedEvents, savedOpportunities)
  } else {
    logger.info('No new items were approved by the Judge. Skipping user notifications.')
  }
}

async function sendFinalReports(payload) {
  const runStats = payload.runStatsManager.getStats()
  auditLogger.info({ context: { run_stats: runStats } }, 'Final Run Statistics')
  await sendSupervisorReportEmail(runStats, payload.articleTraceLogger.getAllTraces())
}

function updatePayloadWithResults(payload, savedEvents, savedOpportunities) {
  payload.savedEvents = savedEvents
  payload.savedOpportunities = savedOpportunities
}

export async function runCommitAndNotify(pipelinePayload) {
  logger.info('--- STAGE 5: COMMIT & NOTIFY ---')

  if (shouldSkipCommits(pipelinePayload)) {
    await handleSkipCommitMode(pipelinePayload)
    return { success: true, payload: pipelinePayload }
  }

  if (!canProceedWithCommits(pipelinePayload)) {
    logger.warn('Skipping commits due to missing database connection or pipeline errors')
    await sendFinalReports(pipelinePayload)
    return { success: true, payload: pipelinePayload }
  }

  try {
    auditLogger.info(
      {
        context: {
          events_to_judge: (pipelinePayload.synthesizedEvents || []).map((e) => ({
            headline: e.synthesized_headline,
            key: e.event_key,
          })),
          opportunities_to_judge: (pipelinePayload.opportunitiesToSave || []).map(
            (o) => ({
              name: o.reachOutTo,
              event_key: o.event_key,
            })
          ),
        },
      },
      'Data entering Stage 5 for judging and commit'
    )

    const { allJudgedEvents, finalOpportunities } =
      await executeJudgeAndFilter(pipelinePayload)
    const approvedEvents = filterApprovedEvents(
      allJudgedEvents,
      FATAL_JUDGEMENT_QUALITIES
    )

    const { savedEvents, savedOpportunities } = await processAndSave(
      pipelinePayload,
      allJudgedEvents,
      approvedEvents,
      finalOpportunities
    )

    updatePayloadWithResults(pipelinePayload, savedEvents, savedOpportunities)
    await executeNotifications(pipelinePayload, savedEvents, savedOpportunities)
  } catch (error) {
    logger.error({ err: error }, 'Failed during commit and notify stage')
    throw error
  }

  await sendFinalReports(pipelinePayload)
  return { success: true, payload: pipelinePayload }
}

```

## 📄 src/pipeline/6_suggestNewWatchlistEntities.js
*Lines: 84, Size: 2.67 KB*

```javascript
// apps/pipeline/src/pipeline/6_suggestNewWatchlistEntities.js (version 4.1)

import { logger } from '@headlines/utils-shared' // The universal, isomorphic logger
import { auditLogger } from '@headlines/utils-server' // The server-only, file-writing audit logger

import { watchlistSuggestionChain } from '@headlines/ai-services'
import {
  getActiveWatchlistEntityNames,
  bulkWriteWatchlistSuggestions,
} from '@headlines/data-access'
import { settings } from '@headlines/config'

export async function suggestNewWatchlistEntities(pipelinePayload) {
  logger.info('--- STAGE 6: WATCHLIST SUGGESTION ---')

  const { savedEvents } = pipelinePayload
  if (!savedEvents || savedEvents.length === 0) {
    logger.info('No new events saved. Skipping watchlist suggestion.')
    return
  }

  const highQualityEvents = savedEvents.filter(
    (e) => e.highest_relevance_score >= settings.SUGGESTION_GENERATION_THRESHOLD
  )
  if (highQualityEvents.length === 0) {
    logger.info(
      `No events met quality threshold (${settings.SUGGESTION_GENERATION_THRESHOLD}) for suggestions.`
    )
    return
  }

  logger.info(
    `Analyzing ${highQualityEvents.length} high-quality events for new watchlist candidates...`
  )

  const existingEntitiesResult = await getActiveWatchlistEntityNames()
  if (!existingEntitiesResult.success) {
    logger.error(
      { err: existingEntitiesResult.error },
      'Failed to fetch existing watchlist entities.'
    )
    return
  }
  const existingNames = new Set(
    existingEntitiesResult.data.map((e) => e.name.toLowerCase())
  )

  const result = await watchlistSuggestionChain({
    events_json_string: JSON.stringify(highQualityEvents),
  })

  if (result.error || !result.suggestions) {
    logger.warn('AI failed to generate watchlist suggestions.', result)
    return
  }

  // Post-filter to ensure we don't suggest entities that already exist
  const newSuggestions = result.suggestions.filter(
    (s) => !existingNames.has(s.name.toLowerCase())
  )

  if (newSuggestions.length > 0) {
    logger.info(`AI generated ${newSuggestions.length} new watchlist suggestions.`)
    const bulkOps = newSuggestions.map((suggestion) => ({
      updateOne: {
        filter: { name: suggestion.name },
        update: { $setOnInsert: suggestion },
        upsert: true,
      },
    }))

    const dbResult = await bulkWriteWatchlistSuggestions(bulkOps)
    if (dbResult.success) {
      logger.info(
        `Successfully saved ${newSuggestions.length} new suggestions to the database.`
      )
    } else {
      logger.error({ err: dbResult.error }, 'Failed to save new watchlist suggestions.')
    }
  } else {
    logger.info('AI analysis did not yield any new watchlist suggestions.')
  }
}

```

## 📄 src/pipeline/7_selfHealAndOptimize.js
*Lines: 10, Size: 453 Bytes*

```javascript
// apps/pipeline/src/pipeline/7_selfHealAndOptimize.js (version 2.0.0)
import { logger } from '@headlines/utils-shared'

export async function runSelfHealAndOptimize(pipelinePayload) {
  logger.warn('--- STAGE 7: SELF-HEAL & OPTIMIZE (DISABLED) ---')
  logger.warn('Self-healing functionality has been disabled by configuration.')
  // The function now does nothing and simply returns the payload.
  return { success: true, payload: pipelinePayload }
}

```

## 📄 src/pipeline/submodules/assessHeadlines.js
*Lines: 288, Size: 9.73 KB*

```javascript
// apps/pipeline/src/pipeline/submodules/assessHeadlines.js
import { logger } from '@headlines/utils-shared'
import { auditLogger } from '../../utils/auditLogger.js'
import { settings } from '@headlines/config'
import { WatchlistEntity } from '@headlines/models'
import { bulkWriteArticles } from '@headlines/data-access'
import { batchHeadlineChain, headlineChain } from '@headlines/ai-services'
import { sleep } from '@headlines/utils-shared'

const BATCH_SIZE = 8
const MAX_RETRIES = 1
const HIGH_SIGNAL_KEYWORDS = [
  'konkurs',
  'bankruptcy',
  'succession',
  'grundlægger',
  'founder',
  'sælger',
  'sells',
  'opkøber',
  'acquires',
]

async function withRetry(fn, retries = MAX_RETRIES) {
  for (let i = 0; i <= retries; i++) {
    try {
      return await fn()
    } catch (error) {
      if (i === retries) throw error
      logger.warn(
        `Operation failed. Retrying in 2 seconds... (Attempt ${i + 1}/${retries})`
      )
      await sleep(2000)
    }
  }
}

function findWatchlistHits(text, country, watchlistEntities) {
  const hits = new Map()
  const lowerText = text.toLowerCase()
  const createSearchRegex = (term) =>
    new RegExp(`\\b${term.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')}\\b`, 'i')
  const relevantEntities = watchlistEntities.filter(
    (entity) =>
      !entity.country || entity.country === country || entity.country === 'Global PE'
  )
  for (const entity of relevantEntities) {
    if (!entity || !entity.name) continue
    const terms = [entity.name.toLowerCase(), ...(entity.searchTerms || [])]
      .map((t) => t.trim())
      .filter(Boolean)
    for (const term of terms) {
      if (term.length > 3 && createSearchRegex(term).test(lowerText)) {
        if (!hits.has(entity.name)) hits.set(entity.name, { entity, matchedTerm: term })
      }
    }
  }
  return Array.from(hits.values()).filter(Boolean)
}

export async function assessHeadlines(articles, articleTraceLogger) {
  if (!articles || articles.length === 0) return []

  const watchlistEntities = await WatchlistEntity.find({ status: 'active' }).lean()
  const assessedCandidatesMap = new Map()
  const failedArticles = []

  logger.info(`Assessing ${articles.length} headlines in batches of ${BATCH_SIZE}...`)
  const batches = []
  for (let i = 0; i < articles.length; i += BATCH_SIZE) {
    batches.push(articles.slice(i, i + BATCH_SIZE))
  }

  for (const [index, batch] of batches.entries()) {
    logger.info(`Assessing batch ${index + 1} of ${batches.length}...`)
    try {
      const batchWithContext = batch.map((article) => {
        const hits = findWatchlistHits(
          article.headline,
          article.country,
          watchlistEntities
        )
        const watchlistHits = hits.map((h) => h.entity._id)
        let headlineWithContext = `[COUNTRY CONTEXT: ${article.country}] ${article.headline}`
        if (hits.length > 0) {
          const hitStrings = hits
            .map(
              (hit) =>
                `[WATCHLIST HIT: ${hit.entity.name} (matched on '${hit.matchedTerm}')]`
            )
            .join(' ')
          headlineWithContext = `${hitStrings} ${headlineWithContext}`
        }
        return { ...article, headlineWithContext, hits, watchlistHits }
      })

      const response = await batchHeadlineChain({
        headlines_json_string: JSON.stringify(
          batchWithContext.map((a) => ({
            id: a._id.toString(),
            headline: a.headlineWithContext,
          }))
        ),
      })

      if (response.error || !response.assessments) {
        throw new Error(
          response.error || 'Batch assessment returned no assessments array.'
        )
      }

      const assessmentMap = new Map(
        response.assessments.map((assessment) => [assessment.id, assessment])
      )

      batchWithContext.forEach((originalArticle) => {
        const assessment = assessmentMap.get(originalArticle._id.toString())
        if (assessment) {
          if (originalArticle.hits.length > 0) {
            let score = assessment.relevance_headline
            const hitNames = originalArticle.hits.map((h) => h.entity.name).join(', ')
            score = Math.min(100, score + settings.WATCHLIST_SCORE_BOOST)
            assessment.assessment_headline = `Watchlist boost (+${settings.WATCHLIST_SCORE_BOOST} for "${hitNames}"). ${assessment.assessment_headline}`
            assessment.relevance_headline = score
          }
          // --- START OF HARDENING ---
          // Ensure score is always a number to prevent `undefined` in logs/DB
          if (
            assessment.relevance_headline === null ||
            assessment.relevance_headline === undefined
          ) {
            logger.warn(
              { assessment },
              'AI returned null/undefined for relevance_headline. Defaulting to 0.'
            )
            assessment.relevance_headline = 0
          }
          // --- END OF HARDENING ---
          assessedCandidatesMap.set(originalArticle.link, {
            ...originalArticle,
            ...assessment,
          })
        } else {
          logger.warn(
            { article: originalArticle.headline },
            'Article was dropped from batch response by AI. Queuing for single-assessment fallback.'
          )
          failedArticles.push(originalArticle)
        }
      })
    } catch (batchError) {
      logger.error(
        { err: batchError },
        `Batch ${index + 1} failed. FALLING BACK to single-article assessment for this entire batch.`
      )
      failedArticles.push(...batch)
    }
  }

  if (failedArticles.length > 0) {
    logger.info(
      `--- Running single-assessment fallback for ${failedArticles.length} failed articles... ---`
    )
    const fallbackPromises = failedArticles.map(async (article) => {
      try {
        const hits = findWatchlistHits(
          article.headline,
          article.country,
          watchlistEntities
        )
        const watchlistHits = hits.map((h) => h.entity._id)
        const singleAssessment = await headlineChain({ article, hits })
        return { ...article, ...singleAssessment, hits, watchlistHits }
      } catch (singleError) {
        logger.error(
          { err: singleError, article: article.headline },
          'Single article assessment fallback also failed.'
        )
        return {
          ...article,
          relevance_headline: 0,
          assessment_headline: 'Assessment failed completely.',
          hits: [],
          watchlistHits: [],
        }
      }
    })

    const fallbackResults = await Promise.all(fallbackPromises)
    fallbackResults.forEach((res) => assessedCandidatesMap.set(res.link, res))
  }

  const candidatesForSecondPass = []
  const headlineThreshold = settings.HEADLINES_RELEVANCE_THRESHOLD
  const lowerCaseKeywords = HIGH_SIGNAL_KEYWORDS.map((k) => k.toLowerCase())

  for (const article of assessedCandidatesMap.values()) {
    if (article.relevance_headline < headlineThreshold) {
      const lowerHeadline = article.headline.toLowerCase()
      const hasWatchlistHit = (article.hits || []).length > 0
      const hasKeyword = lowerCaseKeywords.some((keyword) =>
        lowerHeadline.includes(keyword)
      )

      if (hasWatchlistHit || hasKeyword) {
        candidatesForSecondPass.push(article)
      }
    }
  }

  if (candidatesForSecondPass.length > 0) {
    logger.info(
      `--- Re-assessing ${candidatesForSecondPass.length} ambiguous/high-signal headlines individually... ---`
    )

    const reassessmentPromises = candidatesForSecondPass.map(async (article) => {
      try {
        const reassessment = await headlineChain({ article, hits: article.hits })
        logger.info(
          `[RE-ASSESSMENT] "${article.headline.substring(0, 50)}..." | Original Score: ${article.relevance_headline} -> New Score: ${reassessment.relevance_headline}`
        )
        assessedCandidatesMap.set(article.link, { ...article, ...reassessment })
      } catch (singleError) {
        logger.error(
          { err: singleError, article: article.headline },
          'Single article re-assessment failed.'
        )
      }
    })
    await Promise.all(reassessmentPromises)
  }

  const assessedCandidates = Array.from(assessedCandidatesMap.values())

  logger.info('--- Headline Assessment Complete ---')

  if (assessedCandidates.length > 0) {
    const bulkOps = assessedCandidates.map((article) => ({
      updateOne: {
        filter: { link: article.link },
        update: {
          $setOnInsert: {
            _id: article._id,
            headline: article.headline,
            newspaper: article.newspaper,
            country: article.country,
            source: article.source,
          },
          $set: {
            status: 'assessed',
            relevance_headline: article.relevance_headline,
            assessment_headline: article.assessment_headline,
            headline_en: article.headline_en,
            watchlistHits:
              article.watchlistHits || (article.hits || []).map((h) => h.entity._id),
            pipelineTrace: [
              {
                stage: 'Headline Assessment',
                status:
                  article.relevance_headline >= settings.HEADLINES_RELEVANCE_THRESHOLD
                    ? 'PASSED'
                    : 'DROPPED',
                reason: article.assessment_headline,
              },
            ],
          },
        },
        upsert: true,
      },
    }))
    await bulkWriteArticles(bulkOps)
    logger.info(
      `Persisted ${assessedCandidates.length} assessed articles to prevent re-scraping.`
    )
  }

  assessedCandidates.forEach((article) => {
    articleTraceLogger.startTrace(article)
    articleTraceLogger.addStage(article._id, 'Headline Assessment', {
      score: article.relevance_headline,
      assessment: article.assessment_headline,
      hits: (article.hits || []).map((h) => h.entity.name),
    })
  })

  return assessedCandidates
}

```

## 📄 src/pipeline/submodules/commit/1_judgeOutput.js
*Lines: 101, Size: 3.35 KB*

```javascript
// apps/pipeline/src/pipeline/submodules/commit/1_judgeOutput.js
import { logger } from '@headlines/utils-shared'
import { auditLogger } from '@headlines/utils-server'
import { judgeChain } from '@headlines/ai-services'

export async function judgeAndFilterOutput(pipelinePayload, fatalQualities) {
  const {
    synthesizedEvents: initialEvents = [],
    opportunitiesToSave: initialOpportunities = [],
    runStatsManager,
    articleTraceLogger,
  } = pipelinePayload

  logger.info(
    `[Judge Agent] Received ${initialEvents.length} events and ${initialOpportunities.length} opportunities for final review.`
  )

  const lightweightEvents = initialEvents.map((e) => ({
    identifier: `Event: ${e.synthesized_headline}`,
    summary: e.synthesized_summary,
    assessment: e.ai_assessment_reason,
    score: e.highest_relevance_score,
  }))
  const lightweightOpportunities = initialOpportunities.map((o) => ({
    identifier: `Opportunity: ${o.reachOutTo}`,
    reason: o.whyContact,
    wealth_estimate_mm: o.likelyMMDollarWealth,
  }))

  const payloadForJudge = {
    events: lightweightEvents,
    opportunities: lightweightOpportunities,
  }

  auditLogger.info({ context: { judge_input: payloadForJudge } }, 'Judge Agent Input')

  const judgeVerdict = await judgeChain({
    payload_json_string: JSON.stringify(payloadForJudge),
  })

  auditLogger.info({ context: { judge_output: judgeVerdict } }, 'Judge Agent Output')

  runStatsManager.set('judgeVerdict', judgeVerdict)

  // --- START OF RESILIENCY FIX ---
  // If the Judge agent fails, we no longer let all items pass silently.
  // We now attach a dummy verdict indicating the failure, which makes the
  // issue visible in the final report and data, but still allows the
  // pipeline to complete and save the (un-judged) data.
  if (judgeVerdict.error) {
    logger.error(
      'Judge agent returned an error. Attaching a failsafe verdict to all items.',
      { details: judgeVerdict.error }
    )
    const allJudgedEvents = initialEvents.map((event) => ({
      ...event,
      judgeVerdict: {
        quality: 'Good', // Assume 'Good' to ensure it passes the filter
        commentary: 'Failsafe: Judge agent failed to return a verdict.',
      },
    }))
    return { allJudgedEvents, finalOpportunities: initialOpportunities }
  }
  // --- END OF RESILIENCY FIX ---

  const allJudgedEvents = initialEvents.map((event) => {
    const identifier = `Event: ${event.synthesized_headline}`
    const verdict = (judgeVerdict.event_judgements || []).find(
      (j) => j.identifier === identifier
    )

    const finalVerdict = verdict || {
      quality: 'Acceptable',
      commentary: 'Judge did not return a verdict for this item.',
    }

    if (event.source_articles) {
      event.source_articles.forEach((sourceArticle) => {
        const articleInMap = (pipelinePayload.enrichedArticles || []).find(
          (a) => a.link === sourceArticle.link
        )
        if (articleInMap) {
          articleTraceLogger.addStage(articleInMap._id, 'Judge Verdict', {
            verdict: finalVerdict,
          })
        }
      })
    }

    return {
      ...event,
      judgeVerdict: finalVerdict,
      pipelineTrace: [
        ...(event.pipelineTrace || []),
        { stage: 'Judge', status: finalVerdict.quality, reason: finalVerdict.commentary },
      ],
    }
  })
  return { allJudgedEvents, finalOpportunities: initialOpportunities }
}

```

## 📄 src/pipeline/submodules/commit/2_saveResults.js
*Lines: 195, Size: 5.51 KB*

```javascript
// apps/pipeline/src/pipeline/submodules/commit/2_saveResults.js
import mongoose from 'mongoose'
import {
  savePipelineResults,
  saveOpportunitiesToPinecone,
} from '../../../modules/dataStore/index.js'
import { enrichAndLinkOpportunities } from '../opportunityUpserter.js'
import { logger } from '@headlines/utils-shared'
import { findEventsByKeys } from '@headlines/data-access'

function createMockSavedEvents(events) {
  return events.map((event) => ({
    ...event,
    _id: new mongoose.Types.ObjectId(),
  }))
}

function simulateDryRunSave(approvedEvents, opportunities) {
  logger.warn('DRY RUN: Simulating database save.')
  return {
    savedEvents: createMockSavedEvents(approvedEvents),
    savedOpportunities: opportunities,
  }
}

function extractApprovedArticleLinks(events) {
  const links = events.flatMap((event) =>
    event.source_articles.map((article) => article.link)
  )
  return new Set(links)
}

function filterArticlesToSave(allArticles, approvedLinks) {
  return (allArticles || []).filter((article) => approvedLinks.has(article.link))
}

function identifyArticlesToSave(enrichedArticles, approvedEvents) {
  const approvedArticleLinks = extractApprovedArticleLinks(approvedEvents)
  return filterArticlesToSave(enrichedArticles, approvedArticles)
}

async function commitEventsAndArticles(articles, events) {
  return savePipelineResults(articles, events)
}

async function processOpportunities(opportunities, savedEvents, runStatsManager) {
  try {
    logger.info(
      `[Opportunity Linking] Processing ${opportunities.length} opportunities with ${savedEvents.length} saved events`
    )
    return await enrichAndLinkOpportunities(opportunities, savedEvents)
  } catch (error) {
    logger.error(
      { err: error },
      'CRITICAL: Failed during opportunity enrichment and linking. Opportunities will not be saved or sent.'
    )
    runStatsManager.push(
      'errors',
      'CRITICAL: Opportunity processing failed: ' + error.message
    )
    return []
  }
}

function handleCommitFailure(runStatsManager) {
  runStatsManager.push('errors', 'CRITICAL: Failed to commit pipeline results.')
  return {
    savedEvents: [],
    savedOpportunities: [],
  }
}

// --- START OF DEFINITIVE FIX ---
// This function is now dramatically simplified. It no longer needs complex fallback logic
// because the new `savePipelineResults` implementation guarantees that `commitResult.savedEvents`
// will contain the full documents, whether they were inserted or updated.
async function handleCommitSuccess(commitResult, opportunities, runStatsManager) {
  const savedEvents = commitResult.savedEvents || []

  logger.info(
    `Commit successful: ${savedEvents.length} events returned from DB. Processing ${opportunities.length} opportunities...`
  )

  const savedOpportunities = await processOpportunities(
    opportunities,
    savedEvents,
    runStatsManager
  )

  logger.info(
    `Opportunity processing complete: ${savedOpportunities.length} opportunities saved to MongoDB`
  )

  if (savedOpportunities.length > 0) {
    const pineconeSuccess = await saveOpportunitiesToPinecone(savedOpportunities)
    if (pineconeSuccess) {
      logger.info(
        `Successfully saved ${savedOpportunities.length} opportunities to Pinecone`
      )
    } else {
      logger.warn('Failed to save some opportunities to Pinecone')
    }
  }

  return {
    savedEvents,
    savedOpportunities,
  }
}
// --- END OF DEFINITIVE FIX ---

async function executeRealSave(pipelinePayload, approvedEvents, opportunities) {
  const { runStatsManager, enrichedArticles } = pipelinePayload

  const articlesToSave = identifyArticlesToSave(enrichedArticles, approvedEvents)

  logger.info(
    `[Save] Saving ${articlesToSave.length} articles and ${approvedEvents.length} approved events to database`
  )

  const commitResult = await commitEventsAndArticles(articlesToSave, approvedEvents)

  logger.info(
    `[Save] DB Response - Success: ${commitResult.success}, Events returned: ${commitResult.savedEvents?.length || 0}`
  )

  if (commitResult.success) {
    return handleCommitSuccess(
      commitResult,
      opportunities,
      runStatsManager,
      approvedEvents
    )
  } else {
    return handleCommitFailure(runStatsManager)
  }
}

function validateInputs(allJudgedEvents, approvedEvents) {
  if (!Array.isArray(allJudgedEvents)) {
    logger.error('Invalid input: allJudgedEvents must be an array')
    return false
  }

  if (!Array.isArray(approvedEvents)) {
    logger.error('Invalid input: approvedEvents must be an array')
    return false
  }

  return true
}

function logSaveSummary(results, isDryRun) {
  const mode = isDryRun ? '[DRY RUN]' : ''
  logger.info(
    `${mode} Save Results: ${results.savedEvents.length} events, ${results.savedOpportunities.length} opportunities`
  )
}

export async function saveResultsToDb(
  pipelinePayload,
  allJudgedEvents,
  finalOpportunitiesToSave,
  approvedEvents
) {
  logger.info(
    `[saveResultsToDb] Called with: ${allJudgedEvents.length} judged events, ${approvedEvents.length} approved events, ${finalOpportunitiesToSave.length} opportunities`
  )

  if (!validateInputs(allJudgedEvents, approvedEvents)) {
    return {
      savedEvents: [],
      savedOpportunities: [],
    }
  }

  const { isDryRun } = pipelinePayload

  if (isDryRun) {
    const results = simulateDryRunSave(approvedEvents, finalOpportunitiesToSave)
    logSaveSummary(results, true)
    return results
  }

  const results = await executeRealSave(
    pipelinePayload,
    approvedEvents,
    finalOpportunitiesToSave
  )

  logSaveSummary(results, false)

  return results
}

```

## 📄 src/pipeline/submodules/commit/3_triggerNotifications.js
*Lines: 81, Size: 2.46 KB*

```javascript
// apps/pipeline/src/pipeline/submodules/commit/3_triggerNotifications.js
import { logger } from '@headlines/utils-shared'
import { triggerRealtimeEvent } from '@headlines/utils-server'
import { REALTIME_CHANNELS, REALTIME_EVENTS } from '@headlines/utils-shared'
import { SynthesizedEvent, Article } from '@headlines/models'
import { settings } from '@headlines/config'
import { sendNotifications } from '../../../modules/notifications/index.js'

export async function triggerNotifications(
  pipelinePayload,
  savedEvents,
  savedOpportunities
) {
  // --- START OF DEFINITIVE FIX ---
  // The isTestMode flag was not being correctly passed through.
  // This fix ensures it is read from the payload and sent to the notification module.
  const {
    assessedCandidates,
    isDryRun,
    runStatsManager,
    test: isTestMode,
  } = pipelinePayload
  // --- END OF DEFINITIVE FIX ---

  const eventIds = savedEvents.map((e) => e._id)

  if (!isDryRun) {
    if (assessedCandidates?.length > 0) {
      const relevantArticleLinks = assessedCandidates
        .filter((a) => a.relevance_article >= settings.ARTICLES_RELEVANCE_THRESHOLD)
        .map((a) => a.link)

      if (relevantArticleLinks.length > 0) {
        const relevantArticleDocs = await Article.find({
          link: { $in: relevantArticleLinks },
        })
        for (const articleDoc of relevantArticleDocs) {
          await triggerRealtimeEvent(
            REALTIME_CHANNELS.ARTICLES,
            REALTIME_EVENTS.NEW_ARTICLE,
            articleDoc.toRealtimePayload()
          )
        }
      }
    }

    if (eventIds.length > 0) {
      const eventDocsForStreaming = await SynthesizedEvent.find({
        _id: { $in: eventIds },
      })
      for (const eventDoc of eventDocsForStreaming) {
        await triggerRealtimeEvent(
          REALTIME_CHANNELS.EVENTS,
          REALTIME_EVENTS.NEW_EVENT,
          eventDoc.toRealtimePayload()
        )
      }
    }
  }

  const eventsForNotification = savedEvents

  // --- START OF DEFINITIVE FIX ---
  // The isTestMode flag is now correctly passed to sendNotifications.
  const { emailSentCount } = await sendNotifications(
    eventsForNotification,
    savedOpportunities,
    isTestMode // Pass the flag
  )
  // --- END OF DEFINITIVE FIX ---

  runStatsManager.set('eventsEmailed', emailSentCount)

  if (emailSentCount > 0 && !isDryRun) {
    await SynthesizedEvent.updateMany(
      { _id: { $in: eventIds } },
      { $set: { emailed: true, email_sent_at: new Date() } }
    )
  }
}

```

## 📄 src/pipeline/submodules/commit/4_updateSourceAnalytics.js
*Lines: 89, Size: 3.09 KB*

```javascript
// apps/pipeline/src/pipeline/submodules/commit/4_updateSourceAnalytics.js (version 3.2.0)
import { logger } from '@headlines/utils-shared'
import { settings } from '@headlines/config'
import { updateSourceAnalyticsBatch } from '@headlines/data-access'

export async function updateSourceAnalytics(pipelinePayload) {
  const { runStats, assessedCandidates, articlesForPipeline } = pipelinePayload
  if (!runStats || !runStats.scraperHealth) {
    logger.warn(
      '[Analytics] Missing scraperHealth data. Skipping source analytics update.'
    )
    return
  }

  logger.info('📊 Updating source performance analytics...')

  const analyticsMap = new Map()

  // Step 1: Initialize analytics based on scrape success and total headlines found.
  for (const health of runStats.scraperHealth) {
    analyticsMap.set(health.source, {
      $inc: {
        'analytics.totalRuns': 1,
        'analytics.totalSuccesses': health.success ? 1 : 0,
        'analytics.totalFailures': health.success ? 0 : 1,
        'analytics.totalScraped': 0, // Will be incremented by fresh count
        'analytics.totalRelevant': 0, // Will be incremented by relevant count
      },
      $set: {
        'analytics.lastRunHeadlineCount': health.count,
        'analytics.lastRunRelevantCount': 0,
      },
    })
  }

  // Step 2: Calculate FRESH headlines per source to correctly increment totalScraped.
  const freshHeadlinesBySource = (articlesForPipeline || []).reduce((acc, article) => {
    acc[article.source] = (acc[article.source] || 0) + 1
    return acc
  }, {})

  for (const [sourceName, freshCount] of Object.entries(freshHeadlinesBySource)) {
    if (analyticsMap.has(sourceName)) {
      const data = analyticsMap.get(sourceName)
      data.$inc['analytics.totalScraped'] = freshCount
    }
  }

  // Step 3: Calculate RELEVANT headlines per source.
  if (assessedCandidates && assessedCandidates.length > 0) {
    const relevanceBySource = new Map()
    for (const article of assessedCandidates) {
      if (article.relevance_headline >= settings.HEADLINES_RELEVANCE_THRESHOLD) {
        const currentCount = relevanceBySource.get(article.source) || 0
        relevanceBySource.set(article.source, currentCount + 1)
      }
    }

    for (const [sourceName, relevantCount] of relevanceBySource.entries()) {
      if (analyticsMap.has(sourceName)) {
        const data = analyticsMap.get(sourceName)
        data.$inc['analytics.totalRelevant'] = relevantCount
        data.$set['analytics.lastRunRelevantCount'] = relevantCount
      }
    }
  }

  const bulkOps = []
  for (const [name, update] of analyticsMap.entries()) {
    bulkOps.push({ updateOne: { filter: { name }, update } })
  }

  if (bulkOps.length > 0) {
    const result = await updateSourceAnalyticsBatch(bulkOps)
    if (result.success) {
      logger.info(
        `[Analytics] Successfully updated analytics for ${result.modifiedCount} sources.`
      )
    } else {
      logger.error(
        { err: result.error },
        '[Analytics] Failed to bulk update source analytics.'
      )
    }
  } else {
    logger.info('[Analytics] No sources required analytics updates for this run.')
  }
}

```

## 📄 src/pipeline/submodules/enrichArticles.js
*Lines: 101, Size: 3.48 KB*

```javascript
// apps/pipeline/src/pipeline/submodules/enrichArticles.js
import { logger } from '@headlines/utils-shared'
import { truncateString } from '@headlines/utils-shared'
import { bulkWriteArticles } from '@headlines/data-access'
import { processSingleArticle } from './processSingleArticle.js'
import pLimit from 'p-limit'
import { env } from '@headlines/config'

export async function enrichArticles(
  relevantCandidates,
  syntheticArticles,
  articleTraceLogger
) {
  const enrichmentQueue = [...relevantCandidates, ...syntheticArticles]
  logger.info(
    `Starting full enrichment for ${enrichmentQueue.length} articles (relevant + synthetic).`
  )

  if (enrichmentQueue.length === 0) {
    return { enrichedArticles: [], allProcessedArticles: [], enrichmentOutcomes: [] }
  }

  const limit = pLimit(env.CONCURRENCY_LIMIT)
  const processingPromises = enrichmentQueue.map((article) =>
    limit(() => processSingleArticle(article, article.hits || []))
  )

  const results = await Promise.all(processingPromises)

  const enrichedArticles = []
  const allProcessedArticles = []
  const enrichmentOutcomes = []

  logger.info('--- Full Article Enrichment Results ---')
  results.forEach((result, index) => {
    const originalArticle = enrichmentQueue[index]
    const updatedTrace = [...(originalArticle.pipelineTrace || []), result.lifecycleEvent]
    const finalArticleState = {
      ...originalArticle,
      ...(result.article || {}),
      pipelineTrace: updatedTrace,
    }
    delete finalArticleState.articleContent
    allProcessedArticles.push(finalArticleState)

    articleTraceLogger.addStage(originalArticle._id, 'Content Enrichment', {
      outcome: result.lifecycleEvent.status,
      reason: result.lifecycleEvent.reason,
      raw_html_snippet: truncateString(result.rawHtml, 500),
      extracted_content: result.contentPreview,
      llm_assessment: result.article,
    })

    const outcome = result.lifecycleEvent.status
    enrichmentOutcomes.push({
      link: finalArticleState.link,
      headline: finalArticleState.headline,
      newspaper: finalArticleState.newspaper,
      headlineScore: finalArticleState.relevance_headline,
      assessment_headline: finalArticleState.assessment_headline,
      finalScore: finalArticleState.relevance_article,
      assessment_article: finalArticleState.assessment_article,
      content_snippet: result.contentPreview,
      outcome: outcome,
      reason: result.lifecycleEvent.reason,
      extractionMethod: result.extractionMethod,
      extractionSelectors: result.extractionSelectors,
    })

    if (outcome === 'success') {
      enrichedArticles.push(finalArticleState)
      logger.info(
        `✅ [SUCCESS] "${truncateString(originalArticle.headline, 60)}" - Final Score: ${finalArticleState.relevance_article}`
      )
    } else {
      logger.warn(
        `❌ [${outcome.toUpperCase()}] "${truncateString(originalArticle.headline, 60)}" - Reason: ${result.lifecycleEvent.reason}`
      )
    }
  })

  if (allProcessedArticles.length > 0) {
    const bulkOps = allProcessedArticles.map((article) => ({
      updateOne: {
        filter: { link: article.link },
        update: { $set: article },
      },
    }))
    await bulkWriteArticles(bulkOps)
    logger.info(
      `Updated ${allProcessedArticles.length} enriched articles in the database.`
    )
  }

  logger.info(
    `Enrichment complete. Successfully enriched ${enrichedArticles.length} of ${enrichmentQueue.length} candidates.`
  )

  return { enrichedArticles, allProcessedArticles, enrichmentOutcomes }
}

```

## 📄 src/pipeline/submodules/opportunityUpserter.js
*Lines: 520, Size: 16.73 KB*

```javascript
// apps/pipeline/src/pipeline/submodules/opportunityUpserter.js
import { Opportunity, SynthesizedEvent, WatchlistEntity } from '@headlines/models'
import { logger } from '@headlines/utils-shared'
import {
  contactFinderChain,
  entityCanonicalizerChain,
  generateEmbedding,
  opportunityChain,
  dossierUpdateChain,
} from '@headlines/ai-services'
import { getConfig } from '@headlines/scraper-logic/config.js'
import { truncateString } from '@headlines/utils-shared'
import { settings } from '@headlines/config'
import mongoose from 'mongoose'

function sanitizeForJSON(obj) {
  if (obj === null || obj === undefined) return obj
  if (obj._bsontype === 'ObjectId' || obj.constructor?.name === 'ObjectId')
    return obj.toString()
  if (obj instanceof Date) return obj.toISOString()
  if (Array.isArray(obj)) return obj.map((item) => sanitizeForJSON(item))
  if (typeof obj === 'object') {
    const sanitized = {}
    for (const [key, value] of Object.entries(obj)) {
      sanitized[key] = sanitizeForJSON(value)
    }
    return sanitized
  }
  return obj
}

async function selfCorrectWatchlist(opportunityName, canonicalName) {
  if (opportunityName.toLowerCase() === canonicalName.toLowerCase()) return
  try {
    const watchlistEntity = await WatchlistEntity.findOne({ name: canonicalName })
    if (!watchlistEntity) return
    const newSearchTerm = opportunityName.toLowerCase().trim()
    if (!watchlistEntity.searchTerms.includes(newSearchTerm)) {
      watchlistEntity.searchTerms.push(newSearchTerm)
      await watchlistEntity.save()
      logger.info(
        `[Self-Correct] Added search term '${newSearchTerm}' to watchlist entity '${canonicalName}'`
      )
    }
  } catch (error) {
    logger.error({ err: error }, '[Self-Correct] Failed to update watchlist')
  }
}

function generateContactSearchQueries(person) {
  const queries = [`"${person.reachOutTo}" contact information`]
  if (person.contactDetails?.company) {
    queries.unshift(
      `"${person.reachOutTo}" ${person.contactDetails.company} email address`
    )
  }
  return queries
}

async function performContactSearches(queries, utilityFunctions) {
  let combinedSnippets = ''
  for (const query of queries) {
    try {
      const searchResult = await utilityFunctions.performGoogleSearch(query)
      if (searchResult.success && searchResult.snippets) {
        combinedSnippets += `\n--- Results for query: "${query}" ---\n${searchResult.snippets}`
      }
    } catch (error) {
      logger.warn({ err: error, query }, '[Contact Research] Search failed')
    }
  }
  return combinedSnippets
}

async function findContactEmail(person) {
  const config = getConfig()
  logger.info(`[Contact Research] Initiated for: ${person.reachOutTo}`)
  try {
    const queries = generateContactSearchQueries(person)
    const combinedSnippets = await performContactSearches(
      queries,
      config.utilityFunctions
    )
    if (!combinedSnippets) {
      logger.warn(`[Contact Research] No search results for "${person.reachOutTo}".`)
      return null
    }
    const response = await contactFinderChain({ snippets: combinedSnippets })
    if (response.error || !response.email) {
      logger.warn(
        `[Contact Research] LLM failed to extract email for "${person.reachOutTo}".`
      )
      return null
    }
    logger.info(
      { email: response.email },
      `[Contact Research] Found email for "${person.reachOutTo}"`
    )
    return response.email
  } catch (error) {
    logger.error(
      { err: error, person: person.reachOutTo },
      '[Contact Research] Failed to find contact email'
    )
    return null
  }
}

function buildIndividualsMapFromOpportunities(opportunities, savedEvents) {
  const individualsMap = new Map()
  for (const opp of opportunities) {
    const matchingEvent = savedEvents.find((e) => e.event_key === opp.event_key)
    if (matchingEvent) {
      const normalizedName = opp.reachOutTo.toLowerCase()
      individualsMap.set(normalizedName, {
        name: opp.reachOutTo,
        event: matchingEvent,
      })
    }
  }
  return individualsMap
}

function addIndividualsFromEvents(savedEvents, existingMap) {
  for (const event of savedEvents) {
    for (const individual of event.key_individuals || []) {
      const normalizedName = individual.name.toLowerCase()
      if (!existingMap.has(normalizedName)) {
        existingMap.set(normalizedName, { name: individual.name, event: event })
      }
    }
  }
  return existingMap
}

async function fetchExistingOpportunities(names) {
  if (names.length === 0) return new Map()
  const existingOpportunities = await Opportunity.find({
    reachOutTo: { $in: names },
  }).lean()
  logger.info(
    `Found ${existingOpportunities.length} existing Opportunity profiles for ${names.length} unique individuals`
  )
  return new Map(existingOpportunities.map((o) => [o.reachOutTo.toLowerCase(), o]))
}

function buildIntelligenceText(event) {
  return `Event Key: ${event.event_key}\nSynthesized Event Headline: ${event.synthesized_headline}\nSynthesized Event Summary: ${event.synthesized_summary}`
}

// --- START OF DEFINITIVE FIX ---
// The previous logic used a complex AI chain to merge JSON, which was slow and caused timeouts.
// This new hybrid approach is faster and more reliable.
async function updateExistingOpportunity(name, existingProfile, event) {
  logger.info(
    `[Hybrid Dossier Update] Updating existing profile for ${name} with new event info...`
  )
  try {
    // Step 1: Deterministic Merge for structured data
    const updatedOpp = { ...existingProfile }
    updatedOpp.whyContact = [
      ...new Set([...(updatedOpp.whyContact || []), buildIntelligenceText(event)]),
    ]
    updatedOpp.events = [
      ...new Set([...(updatedOpp.events || []).map(String), event._id.toString()]),
    ]
    updatedOpp.lastKnownEventLiquidityMM = Math.max(
      updatedOpp.lastKnownEventLiquidityMM || 0,
      event.transactionDetails?.liquidityFlow?.approxAmountUSD || 0
    )

    // Step 2: Use AI ONLY for unstructured text synthesis (the biography)
    if (existingProfile.profile?.biography) {
      const dossierUpdateInput = {
        existing_dossier_json: JSON.stringify({
          biography: existingProfile.profile.biography,
        }),
        new_intelligence_text: buildIntelligenceText(event),
      }
      const result = await dossierUpdateChain(dossierUpdateInput)
      if (result && !result.error && result.opportunities?.[0]?.profile?.biography) {
        updatedOpp.profile.biography = result.opportunities[0].profile.biography
        logger.info(`  -> AI successfully synthesized new biography for ${name}.`)
      } else {
        logger.warn(
          `  -> AI biography synthesis failed for ${name}. Appending new info manually.`
        )
        updatedOpp.profile.biography += `\n\nUpdate (${new Date().toISOString()}): ${buildIntelligenceText(event)}`
      }
    }

    updatedOpp.event_key = event.event_key
    return updatedOpp
  } catch (error) {
    logger.error(
      { err: error, name, eventKey: event.event_key },
      '[Hybrid Dossier Update] Failed to update opportunity'
    )
    return null
  }
}
// --- END OF DEFINITIVE FIX ---

async function createNewOpportunity(name, event) {
  logger.info(`[Opportunity Agent] Creating new profile for ${name}...`)
  try {
    const intelligenceText = buildIntelligenceText(event)
    const opportunityInput = {
      context_text: intelligenceText,
      existing_wealth_profile: null,
    }
    const opportunityResult = await opportunityChain(opportunityInput)
    if (
      opportunityResult &&
      opportunityResult.opportunities &&
      opportunityResult.opportunities.length > 0
    ) {
      return opportunityResult.opportunities
    }
    logger.warn(`[Opportunity Agent] Failed to create profile for ${name}`)
    return []
  } catch (error) {
    logger.error(
      { err: error, name, eventKey: event.event_key },
      '[Opportunity Agent] Failed to create opportunity'
    )
    return []
  }
}

async function generateOpportunities(individualsMap, existingOppMap) {
  const allGeneratedOpportunities = []
  for (const { name, event } of individualsMap.values()) {
    const existingProfile = existingOppMap.get(name.toLowerCase()) || null
    let opportunities
    if (existingProfile) {
      const updated = await updateExistingOpportunity(name, existingProfile, event)
      opportunities = updated ? [updated] : []
    } else {
      opportunities = await createNewOpportunity(name, event)
    }
    if (opportunities.length > 0) {
      allGeneratedOpportunities.push(...opportunities)
    }
  }
  return allGeneratedOpportunities
}

async function canonicalizeOpportunityNames(opportunities) {
  return Promise.all(
    opportunities.map(async (opp) => {
      try {
        const originalName = opp.reachOutTo
        const response = await entityCanonicalizerChain({ entity_name: originalName })
        if (response && !response.error && response.canonical_name) {
          opp.reachOutTo = response.canonical_name
          await selfCorrectWatchlist(originalName, response.canonical_name)
        }
      } catch (error) {
        logger.warn(
          { err: error, name: opp.reachOutTo },
          '[Canonicalization] Failed to canonicalize name'
        )
      }
      return opp
    })
  )
}

async function enrichWithContactEmails(opportunities) {
  return Promise.all(
    opportunities.map(async (opp) => {
      if (!opp.contactDetails?.email) {
        try {
          const email = await findContactEmail(opp)
          if (email) {
            opp.contactDetails.email = email
          }
        } catch (error) {
          logger.warn(
            { err: error, name: opp.reachOutTo },
            '[Contact Enrichment] Failed to find email'
          )
        }
      }
      return opp
    })
  )
}

function buildEmbeddingText(opp) {
  const textParts = [
    opp.reachOutTo,
    ...(Array.isArray(opp.whyContact) ? opp.whyContact : [opp.whyContact]),
    opp.contactDetails?.company,
    opp.profile?.wealthOrigin,
    opp.profile?.biography,
    ...(opp.profile?.investmentInterests || []),
  ]
  return textParts.filter(Boolean).join('; ')
}

async function generateOpportunityEmbeddings(opportunities) {
  return Promise.all(
    opportunities.map(async (opp) => {
      try {
        const textToEmbed = buildEmbeddingText(opp)
        const embedding = await generateEmbedding(textToEmbed)
        return { ...opp, embedding }
      } catch (error) {
        logger.warn(
          { err: error, name: opp.reachOutTo },
          '[Embedding] Failed to generate embedding'
        )
        return opp
      }
    })
  )
}

function buildOpportunityUpdateOperation(opp) {
  const { createdAt, updatedAt, __v, _id, reachOutTo, ...restOfOpp } = opp
  const update = {
    $setOnInsert: { reachOutTo: opp.reachOutTo, createdAt: new Date() },
    $set: {},
    $addToSet: {},
    $max: {},
  }
  for (const [key, value] of Object.entries(restOfOpp)) {
    if (value === null || value === undefined) continue
    switch (key) {
      case 'whyContact':
      case 'events':
        if (Array.isArray(value) && value.length > 0) {
          update.$addToSet[key] = {
            $each: value.map((v) =>
              mongoose.Types.ObjectId.isValid(v) ? new mongoose.Types.ObjectId(v) : v
            ),
          }
        }
        break
      case 'lastKnownEventLiquidityMM':
        update.$max[key] = value
        break
      case 'profile':
        if (typeof value === 'object' && value !== null) {
          const { estimatedNetWorthMM, ...otherProfileFields } = value
          for (const [profKey, profVal] of Object.entries(otherProfileFields)) {
            if (profVal !== null && profVal !== undefined) {
              update.$set[`profile.${profKey}`] = profVal
            }
          }
          if (estimatedNetWorthMM !== null && estimatedNetWorthMM !== undefined) {
            update.$max['profile.estimatedNetWorthMM'] = estimatedNetWorthMM
          }
        }
        break
      default:
        update.$set[key] = value
        break
    }
  }
  if (Object.keys(update.$set).length === 0) delete update.$set
  if (Object.keys(update.$addToSet).length === 0) delete update.$addToSet
  if (Object.keys(update.$max).length === 0) delete update.$max
  return {
    updateOne: {
      filter: { reachOutTo: opp.reachOutTo },
      update,
      upsert: true,
    },
  }
}

async function upsertOpportunities(opportunities) {
  if (opportunities.length === 0) return []
  try {
    const bulkOps = opportunities.map(buildOpportunityUpdateOperation)
    await Opportunity.bulkWrite(bulkOps, { ordered: false })
    logger.info(
      `Successfully sent ${opportunities.length} upsert operations to database.`
    )
    const names = opportunities.map((o) => o.reachOutTo)
    const savedDocs = await Opportunity.find({ reachOutTo: { $in: names } }).lean()
    logger.info(
      `Successfully fetched ${savedDocs.length} upserted opportunities from database.`
    )
    return savedDocs
  } catch (error) {
    logger.error({ err: error }, '[Upsert] Failed to upsert opportunities')
    throw error
  }
}

function buildOpportunityIdMap(opportunities) {
  return new Map(opportunities.map((o) => [o.reachOutTo.toLowerCase(), o._id]))
}

function createLinkOperations(savedEvents, opportunityIdMap) {
  const eventLinkOps = []
  const oppLinkOps = []
  for (const event of savedEvents) {
    for (const individual of event.key_individuals || []) {
      const opportunityId = opportunityIdMap.get(individual.name.toLowerCase())
      if (opportunityId) {
        eventLinkOps.push({
          updateOne: {
            filter: { _id: event._id },
            update: { $addToSet: { relatedOpportunities: opportunityId } },
          },
        })
        oppLinkOps.push({
          updateOne: {
            filter: { _id: opportunityId },
            update: { $addToSet: { events: event._id } },
          },
        })
      }
    }
  }
  return { eventLinkOps, oppLinkOps }
}

async function linkOpportunitiesAndEvents(savedEvents, opportunities) {
  if (opportunities.length === 0) {
    logger.info('[Linking] No opportunities to link to events')
    return
  }
  try {
    const opportunityIdMap = buildOpportunityIdMap(opportunities)
    const { eventLinkOps, oppLinkOps } = createLinkOperations(
      savedEvents,
      opportunityIdMap
    )
    if (oppLinkOps.length > 0) {
      await Promise.all([
        Opportunity.bulkWrite(oppLinkOps, { ordered: false }),
        SynthesizedEvent.bulkWrite(eventLinkOps, { ordered: false }),
      ])
      logger.info(
        `Successfully linked ${oppLinkOps.length} relationships between events and opportunities`
      )
    } else {
      logger.info('[Linking] No new relationships to link')
    }
  } catch (error) {
    logger.error({ err: error }, '[Linking] Failed to link opportunities and events')
  }
}

export async function enrichAndLinkOpportunities(potentialOpportunities, savedEvents) {
  logger.trace(
    {
      potentialOpportunities: (potentialOpportunities || []).map((o) => o.reachOutTo),
      savedEvents: (savedEvents || []).map((e) => e.event_key),
    },
    'enrichAndLinkOpportunities received'
  )

  if (!Array.isArray(savedEvents) || savedEvents.length === 0) {
    logger.warn(
      '[CRITICAL] No saved events provided to enrichAndLinkOpportunities. Cannot process opportunities.'
    )
    return []
  }

  const individualsMap = buildIndividualsMapFromOpportunities(
    potentialOpportunities,
    savedEvents
  )
  addIndividualsFromEvents(savedEvents, individualsMap)

  if (individualsMap.size === 0) {
    logger.info(
      'No key individuals found in approved events. Skipping opportunity creation.'
    )
    return []
  }

  logger.info(`Identified ${individualsMap.size} unique individuals for processing`)

  const names = Array.from(individualsMap.values()).map((p) => p.name)
  const existingOppMap = await fetchExistingOpportunities(names)

  const generatedOpportunities = await generateOpportunities(
    individualsMap,
    existingOppMap
  )

  let finalOpportunityDocs = []

  if (generatedOpportunities.length === 0) {
    logger.info(
      'AI Agents generated no new or updated opportunities. Linking events to existing profiles.'
    )
    finalOpportunityDocs = Array.from(existingOppMap.values())
  } else {
    logger.info(
      `AI Agents generated/updated ${generatedOpportunities.length} opportunities for processing`
    )

    const canonicalizedOpportunities =
      await canonicalizeOpportunityNames(generatedOpportunities)
    const enrichedOpportunities = await enrichWithContactEmails(
      canonicalizedOpportunities
    )
    const opportunitiesWithEmbeddings =
      await generateOpportunityEmbeddings(enrichedOpportunities)
    finalOpportunityDocs = await upsertOpportunities(opportunitiesWithEmbeddings)
  }

  await linkOpportunitiesAndEvents(savedEvents, finalOpportunityDocs)

  logger.info(
    `[Enrichment Complete] Returning ${finalOpportunityDocs.length} opportunity documents`
  )

  return finalOpportunityDocs
}

```

## 📄 src/pipeline/submodules/processSingleArticle.js
*Lines: 226, Size: 7.58 KB*

```javascript
// apps/pipeline/src/pipeline/submodules/processSingleArticle.js
import { logger } from '@headlines/utils-shared'
import {
  assessArticleContent,
  findAlternativeSources,
  performGoogleSearch,
} from '@headlines/ai-services'
import { scrapeArticleContent } from '@headlines/scraper-logic/scraper/index.js'
import { settings } from '@headlines/config'
import { Source } from '@headlines/models'

function createLifecycleEvent(stage, status, reason) {
  return { stage, status, reason, timestamp: new Date() }
}

async function salvageHighSignalArticle(article, hits) {
  logger.warn(
    { headline: article.headline },
    `SALVAGE MODE: Attempting to find alternative sources for high-signal headline.`
  )

  const searchResult = await findAlternativeSources(article.headline)
  if (searchResult.success && searchResult.results.length > 0) {
    for (const altSource of searchResult.results.slice(0, 2)) {
      const tempSourceConfig = { name: altSource.source, articleSelector: 'body' }
      const tempArticle = { ...article, link: altSource.link }
      const contentResult = await scrapeArticleContent(tempArticle, tempSourceConfig)
      if (contentResult.articleContent) {
        const finalAssessment = await assessArticleContent(contentResult, hits, true)
        if (
          finalAssessment &&
          !finalAssessment.error &&
          finalAssessment.relevance_article >= settings.ARTICLES_RELEVANCE_THRESHOLD
        ) {
          logger.info(
            { headline: article.headline },
            'SALVAGE SUCCESS: Successfully enriched from alternative source.'
          )
          const salvagedArticle = {
            ...finalAssessment,
            assessment_article: `[SALVAGED] ${finalAssessment.assessment_article}`,
          }
          return {
            article: salvagedArticle,
            lifecycleEvent: createLifecycleEvent(
              'salvage',
              'success',
              `Used alternative source: ${altSource.link}`
            ),
            contentPreview: contentResult.contentPreview,
            rawHtml: contentResult.rawHtml,
            extractionMethod: 'Salvage-Readability',
            extractionSelectors: ['body'],
          }
        }
      }
    }
  }

  logger.warn(
    { headline: article.headline },
    'SALVAGE RAG MODE: Alternative sources failed. Using Google Search snippets for context.'
  )
  const googleResult = await performGoogleSearch(article.headline)
  if (googleResult.success && googleResult.snippets) {
    const finalAssessment = await assessArticleContent(
      article,
      hits,
      false,
      googleResult.snippets
    )
    if (
      finalAssessment &&
      !finalAssessment.error &&
      finalAssessment.relevance_article >= settings.ARTICLES_RELEVANCE_THRESHOLD
    ) {
      logger.info(
        { headline: article.headline },
        'SALVAGE SUCCESS: Successfully enriched using Google Search context.'
      )
      const salvagedArticle = {
        ...finalAssessment,
        assessment_article: `[SALVAGED VIA RAG] ${finalAssessment.assessment_article}`,
      }
      return {
        article: salvagedArticle,
        lifecycleEvent: createLifecycleEvent(
          'salvage',
          'success',
          'Used Google Search snippets for context.'
        ),
        contentPreview: googleResult.snippets,
        rawHtml: `Google Snippets for ${article.headline}`,
        extractionMethod: 'Salvage-RAG',
        extractionSelectors: [],
      }
    }
  }

  logger.error(
    { headline: article.headline },
    'SALVAGE FAILED: All salvage attempts failed.'
  )
  return {
    article: null,
    lifecycleEvent: createLifecycleEvent(
      'salvage',
      'failed',
      'All alternatives and RAG failed'
    ),
    contentPreview: 'N/A',
    rawHtml: 'N/A',
    extractionMethod: 'Salvage',
    extractionSelectors: [],
  }
}

export async function processSingleArticle(article, hits) {
  let transientArticle
  try {
    let source
    // --- START OF DEFINITIVE FIX ---
    // This new block handles the synthetic article from --test mode.
    // It creates a mock source object in memory, completely bypassing the database lookup
    // that was causing the crash.
    if (article.source === 'Test E2E Source') {
      logger.trace('Using mock source config for synthetic test article.')
      source = {
        name: 'Test E2E Source',
        articleSelector: ['body'], // Use a generic selector that will work with the fake content
      }
      // The synthetic article already has its content, so we just pass it through.
      transientArticle = {
        ...article,
        rawHtml: `Synthetic Article for ${article.headline}`,
        extractionMethod: 'Synthetic',
        extractionSelectors: [],
      }
    } else {
      // This is the normal path for all other articles.
      source = await Source.findOne({ name: article.source }).lean()
      if (!source)
        throw new Error(`Could not find source document for "${article.source}"`)
      transientArticle = await scrapeArticleContent(article, source)
    }
    // --- END OF DEFINITIVE FIX ---

    const baseResult = {
      contentPreview: transientArticle.contentPreview,
      rawHtml: transientArticle.rawHtml,
      extractionMethod: transientArticle.extractionMethod,
      extractionSelectors: transientArticle.extractionSelectors,
    }

    if (
      transientArticle.articleContent &&
      transientArticle.articleContent.contents.length > 0
    ) {
      const articleText = transientArticle.articleContent.contents.join('\n')
      logger.info(
        {
          articleLink: article.link,
          charCount: articleText.length,
          method: transientArticle.articleContent.method,
          contentSnippet: articleText.substring(0, 400) + '...',
        },
        'Extracted content for full assessment.'
      )

      const finalAssessment = await assessArticleContent(transientArticle, hits)

      if (finalAssessment.error) throw new Error(finalAssessment.error)

      if (finalAssessment.relevance_article >= settings.ARTICLES_RELEVANCE_THRESHOLD) {
        return {
          ...baseResult,
          article: finalAssessment,
          lifecycleEvent: createLifecycleEvent(
            'enrichment',
            'success',
            `Final score: ${finalAssessment.relevance_article}`
          ),
        }
      } else {
        return {
          ...baseResult,
          article: { ...finalAssessment },
          lifecycleEvent: createLifecycleEvent(
            'enrichment',
            'dropped',
            `Content score ${finalAssessment.relevance_article} < threshold ${settings.ARTICLES_RELEVANCE_THRESHOLD}`
          ),
        }
      }
    } else {
      if (article.relevance_headline >= settings.HIGH_SIGNAL_HEADLINE_THRESHOLD) {
        const salvageResult = await salvageHighSignalArticle(article, hits)
        return { ...baseResult, ...salvageResult }
      } else {
        return {
          ...baseResult,
          article: null,
          lifecycleEvent: createLifecycleEvent(
            'enrichment',
            'dropped',
            `Content scrape failed and headline score ${article.relevance_headline} was not high-signal`
          ),
        }
      }
    }
  } catch (error) {
    logger.error(
      { err: error, articleLink: article.link },
      'Critical error during single article processing.'
    )
    return {
      article: null,
      lifecycleEvent: createLifecycleEvent('enrichment', 'error', error.message),
      contentPreview: transientArticle?.contentPreview,
      rawHtml: transientArticle?.rawHtml,
      extractionMethod: transientArticle?.extractionMethod,
      extractionSelectors: transientArticle?.extractionSelectors,
    }
  }
}

```

## 📄 src/pipeline/submodules/triggerSelectorRepair.js
*Lines: 11, Size: 362 Bytes*

```javascript
// apps/pipeline/src/pipeline/submodules/triggerSelectorRepair.js (version 4.0)
import { logger } from '@headlines/utils-shared'

export async function triggerSelectorRepair(source, htmlContent, failedSelector) {
  logger.warn(
    `[Repair Orchestrator] SKIPPED for "${source.name}". Self-healing is disabled.`
  )
  // This function is now a no-op.
  return
}

```

## 📄 src/scraper/standardScraper.js
*Lines: 84, Size: 2.51 KB*

```javascript
// apps/pipeline/src/scraper/standardScraper.js
import pLimit from 'p-limit'
import { logger } from '@headlines/utils-shared'
import { scrapeSiteForHeadlines } from '@headlines/scraper-logic/scraper/index.js'
import { updateSourceAnalyticsBatch } from '@headlines/data-access'
import { env } from '@headlines/config'

export async function performStandardScraping(sourcesToScrape) {
  if (sourcesToScrape.length === 0) {
    return { scrapedArticles: [], scraperHealth: [] }
  }

  const limit = pLimit(env.CONCURRENCY_LIMIT || 3)
  logger.info(
    `Pipeline will now scrape ${sourcesToScrape.length} active standard sources.`
  )

  let allArticles = []
  const scraperHealthMap = new Map()

  const promises = sourcesToScrape.map((source) =>
    limit(async () => {
      logger.info(`[Scraping] -> Starting scrape for "${source.name}"...`)
      const result = await scrapeSiteForHeadlines(source)
      const foundCount = result.resultCount !== undefined ? result.resultCount : 0
      logger.info(
        `[Scraping] <- Finished scrape for "${source.name}". Success: ${result.success}, Found: ${foundCount}`
      )
      return { source, result }
    })
  )
  const results = await Promise.all(promises)

  const bulkUpdateOps = []

  for (const { source, result } of results) {
    const healthReport = {
      source: source.name,
      success: result.success && result.resultCount > 0,
      count: result.resultCount || 0,
      error: result.error,
      debugHtml: result.debugHtml,
      failedSelector: result.success ? null : source.headlineSelector,
    }
    scraperHealthMap.set(source.name, healthReport)

    if (healthReport.success) {
      allArticles.push(
        ...result.articles.map((a) => ({
          ...a,
          source: source.name,
          newspaper: source.name,
          country: source.country,
        }))
      )
      bulkUpdateOps.push({
        updateOne: {
          filter: { _id: source._id },
          update: { $set: { lastScrapedAt: new Date(), lastSuccessAt: new Date() } },
        },
      })
    } else {
      logger.warn(
        `[Scraping] ❌ FAILED for "${source.name}": ${result.error || 'Extracted 0 headlines.'}.`
      )
      bulkUpdateOps.push({
        updateOne: {
          filter: { _id: source._id },
          update: { $set: { lastScrapedAt: new Date() } },
        },
      })
    }
  }

  if (bulkUpdateOps.length > 0) {
    await updateSourceAnalyticsBatch(bulkUpdateOps)
  }

  return {
    scrapedArticles: allArticles,
    scraperHealth: Array.from(scraperHealthMap.values()),
  }
}

```

## 📄 src/utils/articleTraceLogger.js
*Lines: 89, Size: 2.66 KB*

```javascript
// apps/pipeline/src/utils/articleTraceLogger.js
import fs from 'fs/promises'
import path from 'path'
import { EOL } from 'os'
import { format } from 'util'
import { logger } from '@headlines/utils-shared'

function sanitizeFilename(name) {
  if (!name || typeof name !== 'string') {
    return `invalid_filename_${Date.now()}`
  }
  return name.replace(/[^a-z0-9_.-]/gi, '_').substring(0, 150)
}

export class ArticleTraceLogger {
  constructor() {
    this.runId = new Date().toISOString().replace(/:/g, '-').replace(/\..+/, '')
    this.baseDir = path.resolve(process.cwd(), 'apps/pipeline/logs/articles', this.runId)
    this.traces = new Map()
    this.initialized = false
  }

  async initialize() {
    try {
      await fs.mkdir(this.baseDir, { recursive: true })
      this.initialized = true
    } catch (error) {
      logger.error({ err: error }, 'Failed to create article trace log directory.')
    }
  }

  startTrace(article) {
    if (!this.initialized || !article?._id) return
    const trace = {
      _id: article._id.toString(),
      headline: article.headline,
      link: article.link,
      source: article.newspaper,
      stages: [],
    }
    this.traces.set(article._id.toString(), trace)
  }

  addStage(articleId, stageName, data) {
    if (!this.initialized) return
    const id = typeof articleId === 'string' ? articleId : articleId?.toString()
    if (!id) return
    const trace = this.traces.get(id)
    if (trace) {
      trace.stages.push({ name: stageName, data, timestamp: new Date() })
    }
  }

  async writeAllTraces() {
    if (!this.initialized) return

    for (const [articleId, trace] of this.traces.entries()) {
      let content = `ARTICLE TRACE: ${trace.headline}${EOL}`
      content += `Source: ${trace.source}${EOL}`
      content += `Link: ${trace.link}${EOL}`
      content += `============================================================${EOL}${EOL}`

      trace.stages.forEach((stage) => {
        content += `--- STAGE: ${stage.name.toUpperCase()} (${stage.timestamp.toISOString()}) ---${EOL}`
        // Use util.format for deep object inspection
        content += `${format(stage.data, { depth: null, colors: false })}${EOL}${EOL}`
      })

      const filename = sanitizeFilename(`${trace.headline}.log`)
      const filePath = path.join(this.baseDir, filename)
      try {
        await fs.writeFile(filePath, content)
      } catch (error) {
        logger.error(
          { err: error, file: filePath },
          'Failed to write article trace file.'
        )
      }
    }
    logger.info(
      `Wrote ${this.traces.size} detailed article trace logs to: ${this.baseDir}`
    )
  }

  getAllTraces() {
    return Array.from(this.traces.values())
  }
}

```

## 📄 src/utils/auditLogger.js
*Lines: 89, Size: 2.37 KB*

```javascript
// apps/pipeline/src/utils/auditLogger.js
import pino from 'pino'
import fs from 'fs'
import path from 'path'
import { Transform } from 'stream'
import { EOL } from 'os'
import moment from 'moment'
import { format } from 'util'

const COLORS = {
  reset: '\x1b[0m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m',
  yellow: '\x1b[33m',
  grey: '\x1b[90m',
}

const humanAuditStream = new Transform({
  transform(chunk, enc, cb) {
    try {
      const logObject = JSON.parse(chunk)
      const { time, msg, context } = logObject
      const timestamp = moment(time).format('HH:mm:ss.SSS')
      let output = `${COLORS.cyan}--- [${timestamp}] ${msg} ---${COLORS.reset}${EOL}`

      if (context) {
        for (const [key, value] of Object.entries(context)) {
          const formattedKey = key
            .replace(/_/g, ' ')
            .replace(/\b\w/g, (l) => l.toUpperCase())
          output += `  ${COLORS.yellow}${formattedKey}:${COLORS.reset}${EOL}`
          output += `${COLORS.grey}${format(value, { depth: null }).replace(/^/gm, '    > ')}${COLORS.reset}${EOL}${EOL}`
        }
      }
      this.push(output)
    } catch (e) {
      this.push(chunk) // Pass through non-JSON
    }
    cb()
  },
})

let auditLoggerInstance

export function initializeAuditLogger(logDirectory) {
  if (auditLoggerInstance) return auditLoggerInstance

  if (!logDirectory) {
    throw new Error('[AuditLogger] Initialization failed: logDirectory must be provided.')
  }

  if (!fs.existsSync(logDirectory)) fs.mkdirSync(logDirectory, { recursive: true })

  const auditLogFile = path.join(logDirectory, 'run_audit.log')
  try {
    fs.unlinkSync(auditLogFile)
  } catch (e) {
    if (e.code !== 'ENOENT') console.error('Could not clear old audit log file:', e)
  }

  const fileWriteStream = fs.createWriteStream(auditLogFile, { flags: 'a' })
  humanAuditStream.pipe(fileWriteStream)

  auditLoggerInstance = pino({ level: 'info' }, humanAuditStream)
  return auditLoggerInstance
}

export const auditLogger = new Proxy(
  {},
  {
    get(target, prop) {
      if (auditLoggerInstance) {
        return auditLoggerInstance[prop]
      }
      if (
        prop === 'info' ||
        prop === 'warn' ||
        prop === 'error' ||
        prop === 'fatal' ||
        prop === 'debug' ||
        prop === 'trace'
      ) {
        return () => {} // Return a no-op function to prevent crashes
      }
      return undefined
    },
  }
)

```

## 📄 src/utils/errorStream.js
*Lines: 40, Size: 902 Bytes*

```javascript
// apps/pipeline/src/utils/errorStream.js (version 3.0.0)
import pino from 'pino'
import fs from 'fs'
import path from 'path'

const logDir = path.join(process.cwd(), 'apps/pipeline/logs')
const errorLogFile = path.join(logDir, 'error.log')

if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir, { recursive: true })
}
try {
  fs.unlinkSync(errorLogFile)
} catch (error) {
  if (error.code !== 'ENOENT') {
    console.error('Could not clear old error log file:', error)
  }
}

const errorFileTransport = pino.transport({
  target: 'pino-pretty',
  options: {
    colorize: false,
    translateTime: 'SYS:yyyy-mm-dd HH:MM:ss.l',
    ignore: 'pid,hostname',
    singleLine: false,
    destination: errorLogFile,
    mkdir: true,
    append: true,
  },
})

// This stream only logs levels 'warn' and above.
const errorStream = {
  level: 'warn',
  stream: errorFileTransport,
}

export default errorStream

```

## 📄 src/utils/housekeeping.js
*Lines: 57, Size: 1.76 KB*

```javascript
// apps/pipeline/src/utils/housekeeping.js (version 3.0.0)
import { logger } from '@headlines/utils-shared'
import { findSourcesForScraping, performHousekeeping } from '@headlines/data-access'

const ARTICLE_RETENTION_DAYS = 14

export async function performDatabaseHousekeeping() {
  logger.info('🧹 Performing database housekeeping...')

  try {
    const dynamicSourcesResult = await findSourcesForScraping({ isDynamicContent: true })
    if (!dynamicSourcesResult.success) throw new Error(dynamicSourcesResult.error)

    const dynamicNewspaperNames = dynamicSourcesResult.data.map((s) => s.name)
    if (dynamicNewspaperNames.length === 0) {
      logger.info(
        'Housekeeping: No sources marked for dynamic content cleanup. Skipping.'
      )
      return
    }

    const cutoffDate = new Date()
    cutoffDate.setDate(cutoffDate.getDate() - ARTICLE_RETENTION_DAYS)
    const deletionCriteria = {
      newspaper: { $in: dynamicNewspaperNames },
      createdAt: { $lt: cutoffDate },
      $and: [
        {
          $or: [
            { relevance_headline: { $lt: 25 } },
            { relevance_headline: { $exists: false } },
          ],
        },
        {
          $or: [
            { relevance_article: { $lt: 25 } },
            { relevance_article: { $exists: false } },
          ],
        },
      ],
    }

    const result = await performHousekeeping(deletionCriteria)
    if (!result.success) throw new Error(result.error)

    if (result.deletedCount > 0) {
      logger.info(
        `Housekeeping complete. Deleted ${result.deletedCount} old, irrelevant articles.`
      )
    } else {
      logger.info('Housekeeping complete. No old, irrelevant articles to delete.')
    }
  } catch (error) {
    logger.error({ err: error }, 'Database housekeeping failed.')
  }
}

```

## 📄 src/utils/pipelineLogger.js
*Lines: 50, Size: 1.71 KB*

```javascript
// apps/pipeline/src/utils/pipelineLogger.js
import { logger } from '@headlines/utils-shared'
import moment from 'moment'
import 'moment-duration-format'
import {
  formatRunFunnel,
  formatTopEvents,
  formatStrugglingSources,
  formatTokenUsage,
  formatApiUsage,
  formatContentScrapingFailures,
  formatJudgeVerdictDetails, // IMPORT THE NEW FUNCTION
} from './reportSections.js'

const colors = {
  reset: '\x1b[0m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m',
}

/**
 * The main function to log the final, comprehensive report for a pipeline run.
 * @param {Object} runStats - The statistics collected during the pipeline run.
 * @param {number} duration - The duration of the pipeline run in seconds.
 */
export async function logFinalReport(runStats, duration) {
  const formattedDuration = moment
    .duration(Math.round(duration), 'seconds')
    .format('h [hrs], m [min], s [sec]')

  let report = `\n\n${colors.cyan}=============================================================${colors.reset}\n`
  report += `${colors.cyan} 🚀 PIPELINE RUN SUMMARY${colors.reset}\n`
  report += `${colors.cyan}=============================================================${colors.reset}\n\n`
  report += `  ${colors.magenta}Duration:${colors.reset} ${formattedDuration}\n\n`

  report += formatTokenUsage(runStats)
  report += formatApiUsage(runStats)
  report += formatContentScrapingFailures(runStats)
  report += formatTopEvents(runStats)
  report += await formatStrugglingSources(runStats)

  // ADD THE NEW SECTION HERE
  report += formatJudgeVerdictDetails(runStats)

  report += '\n' + formatRunFunnel(runStats)
  report += `${colors.cyan}=============================================================${colors.reset}\n`

  logger.info(report)
}

```

## 📄 src/utils/rag.js
*Lines: 65, Size: 2.25 KB*

```javascript
// apps/pipeline/src/utils/rag.js (version 2.0.0)
import { Pinecone } from '@pinecone-database/pinecone'
import { logger } from '@headlines/utils-shared'
import { generateEmbedding } from '@headlines/ai-services'
import { env } from '@headlines/config'

const { PINECONE_API_KEY, PINECONE_INDEX_NAME } = env

const SIMILARITY_THRESHOLD = 0.65
const MAX_CONTEXT_ARTICLES = 3

if (!PINECONE_API_KEY) {
  throw new Error('Pinecone API Key must be defined in .env file for RAG module.')
}
const pc = new Pinecone({ apiKey: PINECONE_API_KEY })
const pineconeIndex = pc.index(PINECONE_INDEX_NAME)

/**
 * Finds historical articles similar to a given set of new articles by querying Pinecone.
 * @param {Array<Object>} articlesInCluster - The new articles forming an event.
 * @returns {Promise<Array<Object>>} A promise that resolves to an array of relevant historical articles.
 */
export async function findSimilarArticles(articlesInCluster) {
  logger.info('RAG: Searching for historical context in Pinecone...')
  if (!articlesInCluster || articlesInCluster.length === 0) return []

  const queryText = articlesInCluster.map((a) => a.headline).join('\n')

  try {
    const queryEmbedding = await generateEmbedding(queryText)

    const queryResponse = await pineconeIndex.query({
      topK: MAX_CONTEXT_ARTICLES,
      vector: queryEmbedding,
      includeMetadata: true,
    })

    const relevantMatches = queryResponse.matches.filter(
      (match) => match.score >= SIMILARITY_THRESHOLD
    )

    if (relevantMatches.length > 0) {
      const retrievedArticlesForLogging = relevantMatches
        .map(
          (match) => `  - [Score: ${match.score.toFixed(3)}] "${match.metadata.headline}"`
        )
        .join('\n')
      logger.info(
        `RAG: Found ${relevantMatches.length} relevant historical articles:\n${retrievedArticlesForLogging}`
      )
      return relevantMatches.map((match) => ({
        headline: match.metadata.headline,
        newspaper: match.metadata.newspaper,
        assessment_article: match.metadata.summary,
      }))
    } else {
      logger.info('RAG: Found no relevant historical articles in Pinecone.')
      return []
    }
  } catch (error) {
    logger.error({ err: error }, 'RAG: Pinecone query or embedding generation failed.')
    return []
  }
}

```

## 📄 src/utils/reportSections.js
*Lines: 212, Size: 9.11 KB*

```javascript
// apps/pipeline/src/utils/reportSections.js
import { truncateString, logger } from '@headlines/utils-shared'
import moment from 'moment'
import 'moment-duration-format'

const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m',
  grey: '\x1b[90m',
}

function calculateRate(numerator, denominator) {
  if (denominator === 0) return '0.00%'
  return ((numerator / denominator) * 100).toFixed(2) + '%'
}
function truncateSourceName(name) {
  if (!name) return 'N/A'
  const stopIndex = name.indexOf('(')
  return (stopIndex !== -1 ? name.substring(0, stopIndex) : name).trim()
}

// --- START OF MODIFICATION ---
function formatJudgeVerdictSummary(judgeVerdict) {
  if (!judgeVerdict) return ''
  const eventCount = judgeVerdict.event_judgements?.length || 0
  const oppCount = judgeVerdict.opportunity_judgements?.length || 0
  if (eventCount === 0 && oppCount === 0) return ''
  const getQualityCounts = (judgements) => {
    const counts = { positive: 0, negative: 0 }
    ;(judgements || []).forEach((j) => {
      const q = j.quality?.toLowerCase()
      // "Acceptable" is a positive outcome.
      if (q === 'excellent' || q === 'good' || q === 'acceptable') counts.positive++
      if (q === 'poor' || q === 'irrelevant') counts.negative++
    })
    return counts
  }
  const eventCounts = getQualityCounts(judgeVerdict.event_judgements)
  let summary = `  ${colors.magenta}Judge Verdict Summary:${colors.reset} ${eventCount} Events (${colors.green}${eventCounts.positive} OK${colors.reset}, ${colors.red}${eventCounts.negative} Bad${colors.reset})`
  return summary + '\n'
}
// --- END OF MODIFICATION ---

export function formatJudgeVerdictDetails(runStats) {
  const { judgeVerdict } = runStats
  if (
    !judgeVerdict ||
    (!judgeVerdict.event_judgements?.length &&
      !judgeVerdict.opportunity_judgements?.length)
  )
    return ''
  let section = `  ${colors.yellow}--- ⚖️ Judge's Final Verdict Details ---${colors.reset}\n`
  const formatVerdict = (v) => {
    const quality = v.quality.toUpperCase()
    let color = colors.reset
    if (['EXCELLENT', 'GOOD'].includes(quality)) color = colors.green
    if (['POOR', 'IRRELEVANT'].includes(quality)) color = colors.red
    if (['ACCEPTABLE', 'MARGINAL'].includes(quality)) color = colors.yellow
    return `  - ${color}[${quality.padEnd(10)}]${colors.reset} "${truncateString(v.identifier, 60)}"\n    ${colors.grey}└─ Commentary: ${v.commentary}${colors.reset}\n`
  }
  if (judgeVerdict.event_judgements?.length) {
    section += `  ${colors.cyan}Event Judgements:${colors.reset}\n`
    judgeVerdict.event_judgements.forEach((v) => {
      section += formatVerdict(v)
    })
  }
  if (judgeVerdict.opportunity_judgements?.length) {
    section += `  ${colors.cyan}Opportunity Judgements:${colors.reset}\n`
    judgeVerdict.opportunity_judgements.forEach((v) => {
      section += formatVerdict(v)
    })
  }
  return section + '\n'
}

export function formatRunFunnel(runStats) {
  let section = `  ${colors.yellow}--- Funnel & Conversion (This Run) ---${colors.reset}\n`
  const headlineToEnrichRate = calculateRate(
    runStats.relevantHeadlines,
    runStats.freshHeadlinesFound
  )
  const enrichToEventRate = calculateRate(
    runStats.relevantArticles,
    runStats.relevantHeadlines
  )
  const signalToNoiseRatio = calculateRate(
    runStats.eventsSynthesized,
    runStats.freshHeadlinesFound
  )
  section += `  ${'Headlines Scraped:'.padEnd(30)} ${runStats.headlinesScraped}\n`
  section += `  ${'Fresh/Refreshed Articles:'.padEnd(30)} ${runStats.freshHeadlinesFound}\n`
  section += `  ${'Headlines Assessed:'.padEnd(30)} ${runStats.headlinesAssessed}\n`
  section += `  ${'  > Relevant for Enrichment:'.padEnd(30)} ${runStats.relevantHeadlines} (${colors.cyan}${headlineToEnrichRate}${colors.reset})\n`
  section += `  ${'Articles Enriched:'.padEnd(30)} ${runStats.enrichmentOutcomes?.length || 0}\n`
  section += `  ${'  > Relevant for Event:'.padEnd(30)} ${runStats.relevantArticles} (${colors.cyan}${enrichToEventRate}${colors.reset})\n`
  section += `  ${'Events Synthesized:'.padEnd(30)} ${runStats.eventsSynthesized}\n`
  section += `  ${colors.green}${'Notifications Sent:'.padEnd(30)} ${runStats.eventsEmailed}${colors.reset}\n`
  if (runStats.errors?.length > 0) {
    section += `  ${colors.red}${'Errors Encountered:'.padEnd(30)} ${runStats.errors.length}${colors.reset}\n`
  }
  section += `  ${colors.yellow}${'Overall Signal/Noise Ratio:'.padEnd(30)} ${signalToNoiseRatio}${colors.reset}\n`
  section += formatJudgeVerdictSummary(runStats.judgeVerdict)
  return section
}

export function formatTopEvents(runStats) {
  if (
    !runStats.synthesizedEventsForReport ||
    runStats.synthesizedEventsForReport.length === 0
  )
    return ''
  let section = `  ${colors.yellow}--- Top Synthesized Events (This Run) ---${colors.reset}\n`
  runStats.synthesizedEventsForReport.slice(0, 5).forEach((event) => {
    section += `  ${colors.green}[${String(event.highest_relevance_score).padStart(3)}]${colors.reset} "${truncateString(event.synthesized_headline, 70)}"\n`
  })
  return section + '\n'
}

export function formatTokenUsage(runStats) {
  if (!runStats.tokenUsage) return ''
  let section = `  ${colors.yellow}--- Token Usage & Cost (Estimate) ---${colors.reset}\n`
  let totalCost = 0
  const usage = runStats.tokenUsage
  const modelsWithUsage = Object.keys(usage).filter(
    (model) => usage[model].inputTokens > 0 || usage[model].outputTokens > 0
  )
  if (modelsWithUsage.length === 0) {
    section += `  No token usage recorded for this run.\n`
    return section
  }
  modelsWithUsage.forEach((model) => {
    const stats = usage[model]
    section += `  ${`Model: ${model}`.padEnd(40)}\n`
    section += `  ${'  Input Tokens:'.padEnd(25)} ${stats.inputTokens.toLocaleString()}\n`
    section += `  ${'  Output Tokens:'.padEnd(25)} ${stats.outputTokens.toLocaleString()}\n`
    section += `  ${'  Est. Cost:'.padEnd(25)} $${stats.cost.toFixed(4)}\n`
    totalCost += stats.cost
  })
  section += `  ------------------------------------------------\n`
  section += `  ${colors.green}${'Total Estimated Cost:'.padEnd(25)} $${totalCost.toFixed(4)}${colors.reset}\n`
  return section + '\n'
}

export function formatApiUsage(runStats) {
  if (!runStats.apiCalls) return ''
  let section = `  ${colors.yellow}--- Third-Party API Usage (Estimate) ---${colors.reset}\n`
  let totalCost = 0
  const usage = runStats.apiCalls
  const servicesWithUsage = Object.keys(usage).filter(
    (service) => usage[service].calls > 0
  )
  if (servicesWithUsage.length === 0) {
    section += `  No third-party API calls recorded for this run.\n`
    return section
  }
  servicesWithUsage.forEach((service) => {
    const stats = usage[service]
    const costString = stats.cost > 0 ? `$${stats.cost.toFixed(4)}` : '(Free)'
    section += `  ${`${service}:`.padEnd(25)} ${`${stats.calls.toLocaleString()} calls`.padEnd(15)} ${costString}\n`
    totalCost += stats.cost
  })
  section += `  ------------------------------------------------\n`
  section += `  ${colors.green}${'Total Estimated Cost:'.padEnd(25)} $${totalCost.toFixed(4)}${colors.reset}\n`
  return section + '\n'
}

export function formatContentScrapingFailures(runStats) {
  if (!runStats.enrichmentOutcomes || runStats.enrichmentOutcomes.length === 0) return ''
  const contentFailures = runStats.enrichmentOutcomes.filter(
    (outcome) =>
      outcome.outcome === 'High-Signal Failure' ||
      (outcome.outcome === 'Dropped' &&
        (outcome.reason || '').includes('Content scrape failed'))
  )
  if (contentFailures.length === 0) return ''
  let section = `  ${colors.red}--- ACTION REQUIRED: Content Scraping Failures ---${colors.reset}\n`
  section += `  The following sources successfully scraped headlines but failed to extract article content for high-relevance items.\n`
  section += `  Their 'articleSelector' likely needs to be updated. Check the article trace logs for full HTML.\n`
  contentFailures.forEach((item) => {
    section += `  - ${colors.yellow}${item.newspaper}:${colors.reset} "${truncateString(item.headline, 50)}..."\n`
    section += `    ${colors.grey}Reason: ${item.reason}${colors.reset}\n`
    if (item.extractionSelectors && item.extractionSelectors.length > 0) {
      section += `    ${colors.grey}Selectors Used (${item.extractionMethod}): [${item.extractionSelectors.join(', ')}]${colors.reset}\n`
    }
  })
  return section + '\n'
}

export async function formatStrugglingSources(runStats, dbStats) {
  const headlineFailures = (runStats.scraperHealth || []).filter((h) => !h.success)
  const strugglingSources = new Map()
  headlineFailures.forEach((failure) => {
    strugglingSources.set(
      failure.source,
      'Scraped 0 headlines (Immediate Action Required)'
    )
  })
  let section = `  ${colors.magenta}Actionable Source Health Alerts:${colors.reset}\n`
  if (strugglingSources.size > 0) {
    strugglingSources.forEach((reason, sourceName) => {
      section += `  ${colors.red}${`- ${truncateSourceName(sourceName)}:`.padEnd(25)}${reason}${colors.reset}\n`
    })
  } else {
    section += `  ${colors.green}  All sources are performing within expected parameters.${colors.reset}\n`
  }
  return section + '\n'
}

```

## 📄 src/utils/runStatsManager.js
*Lines: 94, Size: 2.55 KB*

```javascript
// apps/pipeline/src/utils/runStatsManager.js (version 1.0.0)
import { logger } from '@headlines/utils-shared'

/**
 * A dedicated class for managing the pipeline's run statistics.
 * This encapsulates the stats object, preventing direct mutation and ensuring consistency.
 */
export class RunStatsManager {
  constructor() {
    this.stats = {
      headlinesScraped: 0,
      scraperHealth: [],
      validatedHeadlines: 0,
      freshHeadlinesFound: 0,
      headlinesAssessed: 0,
      relevantHeadlines: 0,
      articlesEnriched: 0,
      relevantArticles: 0,
      eventsClustered: 0,
      eventsSynthesized: 0,
      synthesizedEventsForReport: [],
      enrichmentOutcomes: [],
      judgeVerdict: null,
      eventsEmailed: 0,
      errors: [],
      tokenUsage: {},
      apiCalls: {},
    }
    logger.info('[RunStatsManager] Initialized a new statistics object.')
  }

  /**
   * Increments a numerical stat.
   * @param {keyof this.stats} key - The name of the stat to increment.
   * @param {number} [value=1] - The value to add.
   */
  increment(key, value = 1) {
    if (typeof this.stats[key] === 'number') {
      this.stats[key] += value
    } else {
      logger.warn(`[RunStatsManager] Attempted to increment non-numeric stat: '${key}'`)
    }
  }

  /**
   * Pushes a new value into an array-based stat.
   * @param {keyof this.stats} key - The name of the array stat.
   * @param {*} value - The value to push.
   */
  push(key, value) {
    if (Array.isArray(this.stats[key])) {
      this.stats[key].push(value)
    } else {
      logger.warn(`[RunStatsManager] Attempted to push to non-array stat: '${key}'`)
    }
  }

  /**
   * Sets the value of a specific stat.
   * @param {keyof this.stats} key - The name of the stat to set.
   * @param {*} value - The new value.
   */
  set(key, value) {
    if (key in this.stats) {
      this.stats[key] = value
    } else {
      logger.warn(`[RunStatsManager] Attempted to set unknown stat: '${key}'`)
    }
  }

  /**
   * Appends an array of values to an array-based stat.
   * @param {keyof this.stats} key - The name of the array stat.
   * @param {Array<*>} values - The values to append.
   */
  concat(key, values) {
    if (Array.isArray(this.stats[key]) && Array.isArray(values)) {
      this.stats[key] = this.stats[key].concat(values)
    } else {
      logger.warn(
        `[RunStatsManager] Attempted to concat non-array stat or values for key: '${key}'`
      )
    }
  }

  /**
   * Returns the entire statistics object.
   * @returns {object} The current stats object.
   */
  getStats() {
    return this.stats
  }
}

```

// apps/admin/src/app/opportunities/columns.jsx (version 1.4.0)
'use client'

import React, { useState, useEffect, useRef } from 'react';
import { Button, Input } from '@headlines/ui';
import { ArrowUpDown, Trash2, Edit } from 'lucide-react';
import { format } from 'date-fns';

const EditableCell = ({ initialValue, onSave, placeholder = '', type = 'text' }) => {
    const [isEditing, setIsEditing] = useState(false);
    const [value, setValue] = useState(initialValue || '');
    const inputRef = useRef(null);

    useEffect(() => { if (isEditing) inputRef.current?.focus() }, [isEditing]);

    const handleSave = () => {
        const finalValue = type === 'number' ? (value ? Number(value) : null) : value.trim();
        if (finalValue !== (initialValue || (type === 'number' ? null : ''))) {
            onSave(finalValue);
        }
        setIsEditing(false);
    };

    if (isEditing) {
        return <Input type={type} ref={inputRef} value={value} onChange={(e) => setValue(e.target.value)} onBlur={handleSave} onKeyDown={(e) => { if (e.key === 'Enter') handleSave() }} className="h-8"/>;
    }
    
    let displayValue = initialValue;
    if (type === 'number' && initialValue) displayValue = `$${initialValue}M`;
    if (!initialValue) displayValue = <span className="text-muted-foreground italic">{placeholder}</span>;

    return <div className="group flex items-center cursor-pointer" onClick={() => setIsEditing(true)}><span className="truncate">{displayValue}</span><Edit className="h-3 w-3 ml-2 text-muted-foreground opacity-0 group-hover:opacity-100"/></div>;
}

export const columns = (onUpdate, onDelete) => [
    {
        accessorKey: 'basedIn',
        header: ({ column }) => <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}>Country <ArrowUpDown className="ml-2 h-4 w-4" /></Button>,
        size: 150,
    },
    {
        accessorKey: 'reachOutTo',
        header: ({ column }) => <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}>Contact <ArrowUpDown className="ml-2 h-4 w-4" /></Button>,
        cell: ({ row }) => <EditableCell initialValue={row.original.reachOutTo} onSave={(newValue) => onUpdate(row.original, { reachOutTo: newValue })} />,
        size: 250,
    },
    {
        accessorKey: 'likelyMMDollarWealth',
        header: ({ column }) => <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}>Wealth ($M) <ArrowUpDown className="ml-2 h-4 w-4" /></Button>,
        cell: ({ row }) => <EditableCell initialValue={row.original.likelyMMDollarWealth} onSave={(newValue) => onUpdate(row.original, { likelyMMDollarWealth: newValue })} type="number" />,
        size: 150,
    },
    {
        accessorKey: 'contactDetails.email',
        header: ({ column }) => <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}>Email <ArrowUpDown className="ml-2 h-4 w-4" /></Button>,
        cell: ({ row }) => <EditableCell initialValue={row.original.contactDetails?.email} placeholder="Add email..." onSave={(newValue) => onUpdate(row.original, { 'contactDetails.email': newValue })} />,
        size: 250,
    },
    {
        accessorKey: 'whyContact',
        header: 'Reason',
        cell: ({ row }) => {
            const reasons = Array.isArray(row.original.whyContact) ? row.original.whyContact : [row.original.whyContact];
            return <p className="text-sm text-muted-foreground line-clamp-2">{reasons.join(' ')}</p>
        }
    },
    {
        accessorKey: 'createdAt',
        header: ({ column }) => <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}>Created <ArrowUpDown className="ml-2 h-4 w-4" /></Button>,
        cell: ({ row }) => format(new Date(row.original.createdAt), 'dd MMM yyyy'),
        size: 150,
    },
    {
        id: 'actions',
        cell: ({ row }) => <Button variant="ghost" size="icon" className="h-8 w-8 text-muted-foreground" onClick={() => onDelete(row.original._id)}><Trash2 className="h-4 w-4" /></Button>,
        size: 60,
    }
];

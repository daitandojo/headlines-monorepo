// apps/admin/src/hooks/use-admin-manager.js (version 1.1.0)
'use client'

import { useState, useEffect, useCallback } from 'react';
import { useDebounce } from '@headlines/utils';
import { toast } from 'sonner';

// This hook is designed for tables with server-side pagination, sorting, and filtering.
export function useAdminManager(apiPath, initialSort = 'date_desc') {
    const [data, setData] = useState([]);
    const [total, setTotal] = useState(0);
    const [page, setPage] = useState(1);
    const [sort, setSort] = useState(initialSort);
    const [searchTerm, setSearchTerm] = useState('');
    const [filters, setFilters] = useState({}); // DEFINITIVE ADDITION
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    
    const debouncedSearchTerm = useDebounce(searchTerm, 500);

    const fetchData = useCallback(async () => {
        setIsLoading(true);
        setError(null);
        try {
            const params = new URLSearchParams({ page, sort, q: debouncedSearchTerm });
            // DEFINITIVE ADDITION: Append filters to the query
            for (const [key, value] of Object.entries(filters)) {
                if(value) params.append(key, value);
            }
            const res = await fetch(`${apiPath}?${params.toString()}`);
            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.error || 'Failed to fetch data.');
            }
            const result = await res.json();
            setData(result.data);
            setTotal(result.total);
        } catch (e) {
            setError(e.message);
            toast.error(`Failed to load data: ${e.message}`);
        } finally {
            setIsLoading(false);
        }
    }, [apiPath, page, sort, debouncedSearchTerm, filters]); // DEFINITIVE ADDITION: Add filters to dependency array

    useEffect(() => {
        fetchData();
    }, [fetchData]);

    const setSortAndResetPage = (newSort) => {
        setSort(newSort);
        setPage(1);
    }
    
    const setSearchTermAndResetPage = (newSearch) => {
        setSearchTerm(newSearch);
        setPage(1);
    }
    
    const setFilterAndResetPage = (key, value) => {
        setFilters(prev => ({...prev, [key]: value}));
        setPage(1);
    }

    const handleUpdate = useCallback((itemId, updatedData) => {
        setData(currentData =>
            currentData.map(item =>
                item._id === itemId ? { ...item, ...updatedData } : item
            )
        );
    }, []);

    const handleRemove = useCallback((itemId) => {
        setData(currentData => currentData.filter(item => item._id !== itemId));
    }, []);

    return {
        data,
        total,
        page,
        setPage,
        sort,
        setSort: setSortAndResetPage,
        searchTerm,
        setSearchTerm: setSearchTermAndResetPage,
        filters,
        setFilter: setFilterAndResetPage, // DEFINITIVE ADDITION
        isLoading,
        error,
        refetch: fetchData,
        handleUpdate,
        handleRemove,
    };
}

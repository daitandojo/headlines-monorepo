// apps/client/src/components/OpportunityCard.jsx (version 13.1.0)
'use client'

import { useState, useTransition } from 'react'
import { Card, CardContent } from '@headlines/ui'
import { Button } from '@headlines/ui'
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@headlines/ui'
import {
  User,
  Briefcase,
  MapPin,
  Trash2,
  Mail,
  Zap,
  MessageSquare,
  ArrowRight,
  Users,
} from 'lucide-react'
import { Badge } from '@headlines/ui'
import { SwipeToDelete } from './swipe/SwipeToDelete'
import { cn } from '@headlines/utils'
import { EventContextDialog } from './EventContextDialog'
import { DeletionConfirmationDialog } from './DeletionConfirmationDialog'
import useAppStore from '@/store/use-app-store'
import { toast } from 'sonner'
import Link from 'next/link'

export function OpportunityCard({ opportunity, onDelete, isDeleting }) {
  const [isEventDialogOpen, setIsEventDialogOpen] = useState(false)
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false)

  const skipConfirmation = useAppStore(
    (state) => state.deletePreferences.skipOpportunityConfirmation
  )
  const setDeletePreference = useAppStore((state) => state.setDeletePreference)
  const [isPending, startTransition] = useTransition()

  const performDelete = (remember) => {
    startTransition(() => {
      onDelete()
      if (remember) {
        setDeletePreference('skipOpportunityConfirmation', true)
        toast.info("Preference saved. You won't be asked again for opportunities.")
      }
    })
  }

  const handleDeleteClick = (e) => {
    e.stopPropagation()
    if (skipConfirmation) {
      performDelete(false)
    } else {
      setIsDeleteDialogOpen(true)
    }
  }

  const sourceEvent = opportunity.sourceEventId
  const { contactDetails } = opportunity
  const isPremiumOpportunity = opportunity.likelyMMDollarWealth > 49
  const reasonsToContact = Array.isArray(opportunity.whyContact)
    ? opportunity.whyContact
    : [opportunity.whyContact]
  const relatedOpps = opportunity.relatedOpportunities || []

  return (
    <>
      <Link href={`/opportunities/${opportunity._id}`} className="block group">
        <Card
          className={cn(
            'bg-slate-900/50 border border-slate-700/80 transition-all duration-300 ease-out overflow-hidden group-hover:border-blue-500/50 group-hover:bg-slate-900',
            isPending ? 'opacity-50' : 'opacity-100',
            isPremiumOpportunity && 'card-glow impatient-wobble'
          )}
        >
          <SwipeToDelete onDelete={handleDeleteClick}>
            <CardContent className="p-4 space-y-3 bg-slate-900/50 relative z-10">
              <div className="flex justify-between items-start gap-3">
                <div className="flex-1 space-y-1">
                  <p className="font-bold text-base text-slate-100 flex items-center gap-2">
                    <User className="h-4 w-4 text-slate-400" />
                    {opportunity.reachOutTo}
                  </p>
                  {opportunity.basedIn && (
                    <p className="text-xs text-slate-400 flex items-center gap-2 pl-6">
                      <MapPin className="h-3 w-3" /> {opportunity.basedIn}
                    </p>
                  )}
                </div>
                <div className="flex items-center gap-2">
                  {opportunity.likelyMMDollarWealth > 0 && (
                    <Badge
                      variant="outline"
                      className="border-green-500/50 text-green-300"
                    >
                      ${opportunity.likelyMMDollarWealth}M
                    </Badge>
                  )}
                  <div className="opacity-0 group-hover:opacity-100 transition-opacity">
                    <ArrowRight className="h-5 w-5 text-blue-400" />
                  </div>
                </div>
              </div>

              <div className="pl-4 border-l-2 border-slate-700 space-y-3">
                <div className="text-sm text-slate-400 space-y-1">
                  {contactDetails?.role && contactDetails?.company && (
                    <p className="flex items-center gap-2">
                      <Briefcase className="h-4 w-4 text-slate-500 flex-shrink-0" />
                      <span>
                        {contactDetails.role} at <strong>{contactDetails.company}</strong>
                      </span>
                    </p>
                  )}
                  {contactDetails?.email && (
                    <a
                      href={`mailto:${contactDetails.email}`}
                      className="flex items-center gap-2 text-blue-400 hover:underline"
                    >
                      <Mail className="h-4 w-4 text-slate-500 flex-shrink-0" />{' '}
                      {contactDetails.email}
                    </a>
                  )}
                </div>
                <div className="space-y-2">
                  {reasonsToContact.slice(0, 1).map(
                    (
                      reason,
                      index // Show only the first reason
                    ) => (
                      <div
                        key={index}
                        className="flex items-start gap-2 text-sm text-slate-300 italic"
                      >
                        <MessageSquare className="h-4 w-4 mt-0.5 text-slate-500 flex-shrink-0" />
                        <p className="line-clamp-2">“{reason}”</p>
                      </div>
                    )
                  )}
                </div>
              </div>
              
              {(sourceEvent || relatedOpps.length > 0) && (
                <div className="pt-3 mt-3 border-t border-slate-700/50 space-y-2">
                  {sourceEvent && (
                    <Button
                      variant="ghost"
                      className="w-full h-auto text-left justify-start p-2 hover:bg-slate-800/50"
                      onClick={(e) => {
                        e.preventDefault()
                        e.stopPropagation()
                        setIsEventDialogOpen(true)
                      }}
                    >
                      <Zap className="h-4 w-4 mr-3 text-blue-400 flex-shrink-0" />
                      <div className="min-w-0">
                        <p className="text-xs text-slate-400">View Parent Event:</p>
                        <p className="text-sm font-semibold text-slate-200 truncate">
                          {sourceEvent.synthesized_headline}
                        </p>
                      </div>
                    </Button>
                  )}
                </div>
              )}
            </CardContent>
          </SwipeToDelete>
        </Card>
      </Link>
      {sourceEvent && (
        <EventContextDialog
          event={sourceEvent}
          open={isEventDialogOpen}
          onOpenChange={setIsEventDialogOpen}
        />
      )}
      <DeletionConfirmationDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
        onConfirm={performDelete}
        isPending={isPending}
        itemType="opportunity"
        itemDescription={`for ${opportunity.reachOutTo}`}
        preferenceKey="skipOpportunityConfirmation"
      />
    </>
  )
}

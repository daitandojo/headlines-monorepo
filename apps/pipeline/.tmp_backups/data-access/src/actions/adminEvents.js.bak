// packages/data-access/src/actions/adminEvents.js (version 1.0.0)
'use server'

import dbConnect from '../dbConnect.js';
import { SynthesizedEvent, Article, Opportunity } from '@headlines/models';
import { buildQuery } from '../queryBuilder.js';
import { verifyAdmin } from '@headlines/auth';
import { revalidatePath } from '../revalidate.js';
import mongoose from 'mongoose';

// DEFINITIVE FIX: Removed pagination logic. This action now fetches all matching events.
export async function getAdminEvents({ filters = {}, sort = 'date_desc' }) {
    const { isAdmin, error } = await verifyAdmin();
    if (!isAdmin) return { success: false, error, data: [], total: 0 };
    
    await dbConnect();
    const { queryFilter, sortOptions } = await buildQuery(SynthesizedEvent, { filters, sort, baseQuery: {} });

    const [events, total] = await Promise.all([
        SynthesizedEvent.find(queryFilter)
            .select('-synthesized_summary')
            .sort(sortOptions)
            .lean(),
        SynthesizedEvent.countDocuments(queryFilter)
    ]);

    return { success: true, data: JSON.parse(JSON.stringify(events)), total };
}

export async function getAdminEventDetails(eventId) {
    const { isAdmin, error } = await verifyAdmin();
    if (!isAdmin) return { success: false, error };

    try {
        await dbConnect();
        const event = await SynthesizedEvent.findById(eventId)
            .populate({ path: 'relatedOpportunities', model: Opportunity, select: 'reachOutTo likelyMMDollarWealth' })
            .lean();

        if (!event) return { success: false, error: 'Event not found' };

        const articleLinks = event.source_articles.map(a => a.link);
        const articles = await Article.find({ link: { $in: articleLinks } }).select('headline link newspaper').lean();

        event.source_articles_full = articles;
        return { success: true, data: JSON.parse(JSON.stringify(event)) };
    } catch (e) {
        return { success: false, error: 'Failed to fetch event details.' };
    }
}

export async function updateAdminEvent(eventId, updateData) {
    const { isAdmin, error } = await verifyAdmin();
    if (!isAdmin) return { success: false, error };
    try {
        await dbConnect();
        const event = await SynthesizedEvent.findByIdAndUpdate(eventId, { $set: updateData }, { new: true }).lean();
        if (!event) return { success: false, error: 'Event not found.' };
        await revalidatePath('/admin/events');
        return { success: true, data: JSON.parse(JSON.stringify(event)) };
    } catch (e) {
        return { success: false, error: 'Failed to update event.' };
    }
}

export async function deleteAdminEvent(eventId) {
    const { isAdmin, error } = await verifyAdmin();
    if (!isAdmin) return { success: false, error };
    try {
        await dbConnect();
        const result = await SynthesizedEvent.findByIdAndDelete(eventId);
        if (!result) return { success: false, error: 'Event not found.' };
        await Opportunity.updateMany({ events: eventId }, { $pull: { events: eventId } });
        await Article.updateMany({ synthesizedEventId: eventId }, { $unset: { synthesizedEventId: '' } });
        await revalidatePath('/admin/events');
        return { success: true };
    } catch (e) {
        return { success: false, error: 'Failed to delete event.' };
    }
}

// packages/scraper-logic/src/ai/agents/emailAgents.js (version 2.2.1)
// DEFINITIVE FIX: Corrected import path for getConfig.
import { getConfig } from '../../config.js'
import { AIAgent } from '../AIAgent.js'
import { emailSubjectSchema } from '../schemas/emailSubjectSchema.js'
import { emailIntroSchema } from '../schemas/emailIntroSchema.js'
import { env } from '@headlines/config'
import { instructionEmailSubject } from '@headlines/prompts'
import { instructionEmailIntro } from '@headlines/prompts'

const getAgent = (systemPrompt, zodSchema) =>
  new AIAgent({
    model: env.LLM_MODEL_SYNTHESIS,
    systemPrompt,
    zodSchema,
  })

export async function generateEmailSubjectLine(events) {
  const subjectLineAgent = getAgent(instructionEmailSubject, emailSubjectSchema)
  try {
    const eventPayload = events.map((e) => ({
      headline: e.synthesized_headline,
      summary: e.synthesized_summary,
    }))
    const response = await subjectLineAgent.execute(JSON.stringify(eventPayload))
    if (response.error || !response.subject_headline) {
      getConfig().logger.warn(
        'AI failed to generate a custom email subject line.',
        response
      )
      return 'Key Developments' // Fallback
    }
    return response.subject_headline
  } catch (error) {
    getConfig().logger.error({ err: error }, 'Error in generateEmailSubjectLine')
    return 'Key Developments' // Fallback
  }
}

export async function generatePersonalizedIntro(user, events) {
  const introAgent = getAgent(instructionEmailIntro, emailIntroSchema)
  try {
    const eventPayload = events.map((e) => ({
      headline: e.synthesized_headline,
      summary: e.synthesized_summary,
    }))
    const payload = {
      firstName: user.firstName,
      events: eventPayload,
    }
    const response = await introAgent.execute(JSON.stringify(payload))
    if (response.error || !response.intro_text) {
      getConfig().logger.warn('AI failed to generate a personalized intro.', response)
      return `Dear ${user.firstName}, here are the latest relevant wealth events we have identified.`
    }
    return response.intro_text
  } catch (error) {
    getConfig().logger.error({ err: error }, 'Error in generatePersonalizedIntro')
    return `Dear ${user.firstName}, here are the latest relevant wealth events we have identified.`
  }
}

# 📁 PROJECT DIRECTORY STRUCTURE

Total: 209 files, 89 directories

```
headlines/
├── 📁 public/
│   ├── 📁 icons/
│   │   ├── 📄 apple-touch-icon.png
│   │   ├── 📄 icon-16x16.png
│   │   ├── 📄 icon-192x192.png
│   │   ├── 📄 icon-32x32.png
│   │   ├── 📄 icon-512x512.png
│   │   └── 📄 icon-96x96.png
│   ├── 📁 sounds/
│   │   └── 📄 notification.mp3
│   ├── 📄 file.svg
│   ├── 📄 globe.svg
│   ├── 📄 manifest.json
│   ├── 📄 next.svg
│   ├── 📄 sw.js
│   ├── 📄 vercel.svg
│   └── 📄 window.svg
├── 📁 src/
│   ├── 📁 app/
│   │   ├── 📁 _components/
│   │   │   └── 📄 AppWrapper.jsx
│   │   ├── 📁 (client)/
│   │   │   ├── 📁 articles/
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📁 chat/
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📁 events/
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📁 opportunities/
│   │   │   │   ├── 📁 [opportunityId]/
│   │   │   │   │   └── 📄 page.js
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📁 settings/
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📁 upload/
│   │   │   │   └── 📄 page.js
│   │   │   └── 📄 layout.js
│   │   ├── 📁 admin/
│   │   │   ├── 📁 articles/
│   │   │   │   ├── 📁 [articleId]/
│   │   │   │   │   ├── 📄 ArticleEditor.jsx
│   │   │   │   │   └── 📄 page.jsx
│   │   │   │   ├── 📄 actions.js
│   │   │   │   ├── 📄 ArticlesClientPage.jsx
│   │   │   │   ├── 📄 columns.jsx
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📁 dashboard/
│   │   │   │   ├── 📄 DashboardClientPage.jsx
│   │   │   │   └── 📄 page.jsx
│   │   │   ├── 📁 events/
│   │   │   │   ├── 📄 actions.js
│   │   │   │   ├── 📄 columns.jsx
│   │   │   │   ├── 📄 EventsClientPage.jsx
│   │   │   │   └── 📄 page.jsx
│   │   │   ├── 📁 opportunities/
│   │   │   │   ├── 📄 actions.js
│   │   │   │   ├── 📄 columns.jsx
│   │   │   │   ├── 📄 OpportunitiesClientPage.jsx
│   │   │   │   └── 📄 page.jsx
│   │   │   ├── 📁 runs/
│   │   │   │   └── 📁 [runId]/
│   │   │   │       └── 📄 page.jsx
│   │   │   ├── 📁 scraper-ide/
│   │   │   │   ├── 📄 page.jsx
│   │   │   │   ├── 📄 useCountries.js
│   │   │   │   └── 📄 useSources.js
│   │   │   ├── 📁 settings/
│   │   │   │   ├── 📄 page.jsx
│   │   │   │   └── 📄 settings-form.jsx
│   │   │   ├── 📁 users/
│   │   │   │   ├── 📄 actions.js
│   │   │   │   ├── 📄 columns.jsx
│   │   │   │   ├── 📄 country-subscription-manager.jsx
│   │   │   │   ├── 📄 page.jsx
│   │   │   │   ├── 📄 user-editor.jsx
│   │   │   │   └── 📄 UsersClientPage.jsx
│   │   │   ├── 📁 watchlist/
│   │   │   │   ├── 📄 actions.js
│   │   │   │   ├── 📄 columns.jsx
│   │   │   │   ├── 📄 page.jsx
│   │   │   │   ├── 📄 watchlist-editor.jsx
│   │   │   │   └── 📄 WatchlistClientPage.jsx
│   │   │   ├── 📄 layout.js
│   │   │   └── 📄 page.js
│   │   ├── 📁 api/
│   │   │   ├── 📁 articles/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 auth/
│   │   │   │   ├── 📁 login/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 logout/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 session/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📁 signup/
│   │   │   │       └── 📄 route.js
│   │   │   ├── 📁 chat/
│   │   │   │   ├── 📁 title/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 events/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 opportunities/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 upload-article/
│   │   │   │   └── 📄 route.js
│   │   │   └── 📁 user/
│   │   │       ├── 📁 interactions/
│   │   │       │   └── 📄 route.js
│   │   │       ├── 📁 profile/
│   │   │       │   └── 📄 route.js
│   │   │       └── 📁 settings/
│   │   │           └── 📁 clear-discarded/
│   │   │               └── 📄 route.js
│   │   ├── 📁 api-admin/
│   │   │   ├── 📁 ai-admin/
│   │   │   │   └── 📁 executive-summary/
│   │   │   │       └── 📄 route.js
│   │   │   ├── 📁 articles/
│   │   │   │   └── 📁 [articleId]/
│   │   │   │       └── 📄 route.js
│   │   │   ├── 📁 countries/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 events/
│   │   │   │   └── 📁 [eventId]/
│   │   │   │       └── 📄 route.js
│   │   │   ├── 📁 export/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 opportunities/
│   │   │   │   └── 📁 [opportunityId]/
│   │   │   ├── 📁 relationships/
│   │   │   │   ├── 📁 link/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📁 unlink/
│   │   │   │       └── 📄 route.js
│   │   │   ├── 📁 run-verdicts/
│   │   │   │   └── 📁 [runId]/
│   │   │   │       └── 📄 route.js
│   │   │   ├── 📁 scrape/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 settings/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 sources/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 subscribers/
│   │   │   │   ├── 📁 [subscriberId]/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   └── 📄 actions.js
│   │   ├── 📁 login/
│   │   │   ├── 📄 layout.js
│   │   │   └── 📄 page.jsx
│   │   ├── 📄 global-error.jsx
│   │   ├── 📄 globals.css
│   │   ├── 📄 layout.js
│   │   ├── 📄 not-found.jsx
│   │   ├── 📄 page.js
│   │   └── 📄 providers.jsx
│   ├── 📁 components/
│   │   ├── 📁 admin/
│   │   │   ├── 📄 AdminHeader.jsx
│   │   │   ├── 📄 AdminNavTabs.jsx
│   │   │   ├── 📄 article-analysis-viewer.jsx
│   │   │   ├── 📄 main-nav.jsx
│   │   │   ├── 📄 RelationshipManager.jsx
│   │   │   ├── 📄 source-list.jsx
│   │   │   ├── 📄 test-results-viewer.jsx
│   │   │   ├── 📄 theme-provider.jsx
│   │   │   └── 📄 theme-toggle.jsx
│   │   ├── 📁 client/
│   │   │   ├── 📁 articles/
│   │   │   │   ├── 📄 ArticleCard.jsx
│   │   │   │   └── 📄 ArticleListWrapper.jsx
│   │   │   ├── 📁 chat/
│   │   │   │   ├── 📄 ChatInput.jsx
│   │   │   │   ├── 📄 ChatLoadingIndicator.jsx
│   │   │   │   ├── 📄 ChatManager.jsx
│   │   │   │   ├── 📄 ChatMessage.jsx
│   │   │   │   ├── 📄 ChatScrollAnchor.jsx
│   │   │   │   ├── 📄 ChatSidebar.jsx
│   │   │   │   └── 📄 ChatView.jsx
│   │   │   ├── 📁 countries/
│   │   │   │   ├── 📄 CountrySubscriptionEditor.jsx
│   │   │   │   └── 📄 GlobalCountrySelector.jsx
│   │   │   ├── 📁 events/
│   │   │   │   ├── 📄 EventCardDesktop.jsx
│   │   │   │   ├── 📄 EventCardDetails.jsx
│   │   │   │   ├── 📄 EventCardMobile.jsx
│   │   │   │   ├── 📄 EventContextDialog.jsx
│   │   │   │   ├── 📄 EventList.jsx
│   │   │   │   ├── 📄 EventListWrapper.jsx
│   │   │   │   ├── 📄 KeyIndividualsDialog.jsx
│   │   │   │   └── 📄 SynthesizedEventCard.jsx
│   │   │   ├── 📁 opportunities/
│   │   │   │   ├── 📄 OpportunityCard.jsx
│   │   │   │   └── 📄 OpportunityListWrapper.jsx
│   │   │   ├── 📁 settings/
│   │   │   │   └── 📄 SettingsForm.jsx
│   │   │   ├── 📁 shared/
│   │   │   │   ├── 📄 AnimatedList.jsx
│   │   │   │   ├── 📄 ClientRedirect.jsx
│   │   │   │   ├── 📄 DataView.jsx
│   │   │   │   ├── 📄 Header.jsx
│   │   │   │   ├── 📄 MainNavTabs.jsx
│   │   │   │   └── 📄 SwipeToDelete.jsx
│   │   │   └── 📁 upload/
│   │   │       └── 📄 UploadView.jsx
│   │   ├── 📁 landing/
│   │   │   ├── 📄 AboutSection.jsx
│   │   │   ├── 📄 Features.jsx
│   │   │   ├── 📄 Footer.jsx
│   │   │   ├── 📄 GlobalCoverage.jsx
│   │   │   ├── 📄 Hero.jsx
│   │   │   ├── 📄 InteractiveDemo.jsx
│   │   │   ├── 📄 LandingPage.jsx
│   │   │   ├── 📄 LiquidityTicker.jsx
│   │   │   ├── 📄 LoginModal.jsx
│   │   │   ├── 📄 SignUpFlow.jsx
│   │   │   └── 📄 StatsSection.jsx
│   │   ├── 📁 shared/
│   │   │   ├── 📁 buttons/
│   │   │   │   ├── 📄 ExportButton.jsx
│   │   │   │   ├── 📄 InstallPwaButton.jsx
│   │   │   │   └── 📄 NotificationToggles.jsx
│   │   │   ├── 📁 elements/
│   │   │   │   ├── 📄 accordion.jsx
│   │   │   │   ├── 📄 alert-dialog.jsx
│   │   │   │   ├── 📄 badge.jsx
│   │   │   │   ├── 📄 button.jsx
│   │   │   │   ├── 📄 card.jsx
│   │   │   │   ├── 📄 checkbox.jsx
│   │   │   │   ├── 📄 command.jsx
│   │   │   │   ├── 📄 dialog.jsx
│   │   │   │   ├── 📄 dropdown-menu.jsx
│   │   │   │   ├── 📄 EditableCell.jsx
│   │   │   │   ├── 📄 index.js
│   │   │   │   ├── 📄 input.jsx
│   │   │   │   ├── 📄 label.jsx
│   │   │   │   ├── 📄 multi-select.jsx
│   │   │   │   ├── 📄 popover.jsx
│   │   │   │   ├── 📄 scroll-area.jsx
│   │   │   │   ├── 📄 select.jsx
│   │   │   │   ├── 📄 separator.jsx
│   │   │   │   ├── 📄 sheet.jsx
│   │   │   │   ├── 📄 sonner.jsx
│   │   │   │   ├── 📄 switch.jsx
│   │   │   │   ├── 📄 table.jsx
│   │   │   │   ├── 📄 tabs.jsx
│   │   │   │   ├── 📄 textarea.jsx
│   │   │   │   └── 📄 tooltip.jsx
│   │   │   ├── 📁 modals/
│   │   │   │   ├── 📄 ConfirmationDialog.jsx
│   │   │   │   └── 📄 IOSInstallInstructions.jsx
│   │   │   ├── 📁 screen/
│   │   │   │   ├── 📄 DesktopOnlyWrapper.jsx
│   │   │   │   ├── 📄 InfiniteScrollLoader.jsx
│   │   │   │   ├── 📄 LoadingOverlay.jsx
│   │   │   │   ├── 📄 page-header.jsx
│   │   │   │   ├── 📄 SplashScreen.jsx
│   │   │   │   └── 📄 ViewHeader.jsx
│   │   │   ├── 📁 skeletons/
│   │   │   │   ├── 📄 Skeleton.jsx
│   │   │   │   └── 📄 SkeletonCard.jsx
│   │   │   ├── 📁 spinners/
│   │   │   │   └── 📄 PremiumSpinner.jsx
│   │   │   ├── 📁 tables/
│   │   │   │   ├── 📄 data-table.jsx
│   │   │   │   └── 📄 DataTableColumnHeader.jsx
│   │   │   └── 📄 index.js
│   │   └── 📄 placeholders.jsx
│   ├── 📁 hooks/
│   │   ├── 📄 index.js
│   │   ├── 📄 use-debounce.js
│   │   ├── 📄 use-has-hydrated.js
│   │   ├── 📄 use-push-manager.js
│   │   └── 📄 use-realtime-updates.js
│   └── 📁 lib/
│       ├── 📁 auth/
│       │   ├── 📄 AuthProvider.js
│       │   ├── 📄 client.js
│       │   ├── 📄 getCookies.js
│       │   ├── 📄 server.js
│       │   └── 📄 verifySession.js
│       ├── 📁 store/
│       │   └── 📄 use-app-store.js
│       ├── 📄 api-client.js
│       ├── 📄 api-handler.js
│       ├── 📄 constants.js
│       └── 📄 init-shared-logic.js
├── 📄 .gitignore
├── 📄 .npmrc
├── 📄 app.config.js
├── 📄 eslint.config.mjs
├── 📄 jsconfig.json
├── 📄 next.config.mjs
├── 📄 package.json
├── 📄 postcss.config.js
└── 📄 tailwind.config.js
```

# 📋 PROJECT METADATA

**Generated**: 2025-10-05T19:41:33.237Z
**Repository Path**: /home/mark/Repos/projects/headlines/apps/client
**Total Files**: 197
**Package**: @headlines/client@1.0.0




---


## 📄 .gitignore
*Lines: 42, Size: 480 Bytes*

```
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

```

## 📄 .npmrc
*Lines: 2, Size: 41 Bytes*

```
shamefully-hoist=true
node-linker=hoisted
```

## 📄 app.config.js
*Lines: 9, Size: 332 Bytes*

```javascript
// File: apps/client/app.config.js

// This file provides the minimal configuration needed by the shared
// packages when they're used by the app's API routes.

export const CONCURRENCY_LIMIT = 2
export const OPENAI_API_KEY = process.env.OPENAI_API_KEY
export const LLM_MODEL_UTILITY = process.env.LLM_MODEL_UTILITY || 'gpt-5-nano'

```

## 📄 eslint.config.mjs
*Lines: 30, Size: 844 Bytes*

```
// apps/client/src/eslint.config.mjs (version 2.0.0)
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

// ARCHITECTURAL REFACTORING: The client's ESLint config is now simpler.
// It relies on the monorepo root configuration for shared rules like import restrictions.
// This ensures consistency and a single source of truth for architectural rules.
const eslintConfig = [
  ...compat.extends("next/core-web-vitals"),
  {
    // Local ignores for the client app.
    ignores: [
      "node_modules/**",
      ".next/**",
      "out/**",
      "build/**",
      "next-env.d.ts",
    ],
  },
];

export default eslintConfig;
```

## 📄 jsconfig.json
*Lines: 9, Size: 97 Bytes*

```json
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

```

## 📄 next.config.mjs
*Lines: 54, Size: 1.28 KB*

```
// File: apps/client/next.config.mjs (FINAL ATTEMPT)

/** @type {import('next').NextConfig} */
const nextConfig = {
  // Add this postcss section
  postcss: {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  },
  transpilePackages: [
    '@headlines/config',
    '@headlines/models',
    '@headlines/utils-shared',
  ],
  experimental: {
    serverComponentsExternalPackages: [
      '@headlines/data-access',
      '@headlines/ai-services',
      '@headlines/scraper-logic',
      '@headlines/utils-server',
      '@headlines/prompts',
      '@xenova/transformers',
      'sharp',
      'onnxruntime-node',
    ],
  },
  webpack: (config, { isServer }) => {
    if (isServer) {
      config.externals.push({
        '@xenova/transformers': '@xenova/transformers',
        'onnxruntime-node': 'commonjs onnxruntime-node',
        sharp: 'commonjs sharp',
        bcrypt: 'commonjs bcrypt',
        'mongodb-client-encryption': 'commonjs mongodb-client-encryption',
        aws4: 'commonjs aws4',
      })
    } else {
      config.resolve.alias = {
        ...config.resolve.alias,
        '@xenova/transformers': false,
        'onnxruntime-node': false,
        sharp: false,
        bcrypt: false,
      }
    }
    return config
  },
  swcMinify: true,
}

export default nextConfig

```

## 📄 package.json
*Lines: 64, Size: 1.99 KB*

```json
{
  "name": "@headlines/client",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "dotenv -e ../../.env -- next dev",
    "build": "next build",
    "build:local": "dotenv -e ../../.env -- next build",
    "start": "dotenv -e ../../.env -- next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@headlines/config": "workspace:*",
    "@headlines/data-access": "workspace:*",
    "@headlines/models": "workspace:*",
    "@headlines/utils-shared": "workspace:*",
    "@radix-ui/react-accordion": "^1.2.12",
    "@radix-ui/react-alert-dialog": "^1.1.15",
    "@radix-ui/react-checkbox": "^1.3.3",
    "@radix-ui/react-dropdown-menu": "^2.1.16",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-popover": "^1.1.15",
    "@radix-ui/react-scroll-area": "^1.2.10",
    "@radix-ui/react-select": "^2.2.6",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.2.6",
    "@radix-ui/react-tabs": "^1.1.13",
    "@radix-ui/react-tooltip": "^1.2.8",
    "@tailwindcss/typography": "^0.5.13",
    "@tanstack/react-query": "^5.45.1",
    "@tanstack/react-query-devtools": "^5.45.1",
    "@tanstack/react-table": "^8.21.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "date-fns": "^3.6.0",
    "framer-motion": "^12.23.22",
    "jose": "^6.1.0",
    "lucide-react": "^0.379.0",
    "next": "14.2.4",
    "next-themes": "^0.3.0",
    "react": "^18",
    "react-dom": "^18",
    "react-intersection-observer": "^9.10.3",
    "react-markdown": "^9.0.1",
    "react-textarea-autosize": "^8.5.3",
    "rehype-raw": "^7.0.0",
    "remark-gfm": "^4.0.0",
    "tailwind-merge": "^2.3.0",
    "tailwindcss-animate": "^1.0.7",
    "zustand": "^5.0.8"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.19",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.1",
    "eslint": "^8.57.0",
    "eslint-config-next": "14.2.4",
    "@tailwindcss/typography": "^0.5.13",
    "tailwindcss-animate": "^1.0.7"
  }
}

```

## 📄 postcss.config.js
*Lines: 6, Size: 206 Bytes*

```javascript
// This configuration uses a function-based array for plugins,
// which is more explicit and robust for module resolution.
module.exports = {
  plugins: [require('tailwindcss'), require('autoprefixer')],
}

```

## 📄 public/manifest.json
*Lines: 28, Size: 631 Bytes*

```json
{
  "name": "Headlines Intelligence",
  "short_name": "Headlines",
  "description": "An interface to browse, search, and filter wealth event articles.",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#111827",
  "theme_color": "#111827",
  "icons": [
    {
      "src": "/icons/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "/icons/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    },
    {
      "src": "/icons/apple-touch-icon.png",
      "sizes": "180x180",
      "type": "image/png"
    }
  ]
}

```

## 📄 public/sw.js
*Lines: 90, Size: 2.48 KB*

```javascript
self.addEventListener('install', (event) => {
  console.log('[Service Worker] Install event fired. New worker installing.')
  event.waitUntil(self.skipWaiting())
  console.log('[Service Worker] skipWaiting() called.')
})

self.addEventListener('activate', (event) => {
  console.log('[Service Worker] Activate event fired. New worker activating.')
  event.waitUntil(self.clients.claim())
  console.log('[Service Worker] clients.claim() called.')
})

self.addEventListener('push', (event) => {
  console.log('[Service Worker] Push Received.')
  if (!event.data) {
    console.error('[Service Worker] Push event but no data')
    return
  }
  console.log(`[Service Worker] Push had this data: "${event.data.text()}"`)

  let data
  try {
    data = event.data.json()
  } catch (e) {
    console.error('[Service Worker] Failed to parse push data as JSON.')
    data = {
      title: 'New Update',
      body: event.data.text(),
      url: '/',
    }
  }

  const title = data.title || 'New Intelligence Alert'
  const options = {
    body: data.body || 'New content has been added.',
    icon: data.icon || '/icons/icon-192x192.png',
    badge: '/icons/icon-96x96.png',
    vibrate: [100, 50, 100],
    data: {
      url: data.url || '/',
    },
    actions: [
      { action: 'view_event', title: 'View Event' },
      { action: 'dismiss', title: 'Dismiss' },
    ],
  }

  console.log(
    '[Service Worker] Showing notification with options:',
    JSON.stringify(options)
  )
  event.waitUntil(self.registration.showNotification(title, options))
})

self.addEventListener('notificationclick', (event) => {
  console.log(
    '[Service Worker] Notification click Received.',
    event.action,
    event.notification
  )

  const urlToOpen = new URL(event.notification.data.url, self.location.origin).href
  event.notification.close()

  if (event.action === 'dismiss') {
    console.log('[Service Worker] Dismiss action handled.')
    return
  }

  event.waitUntil(
    self.clients
      .matchAll({
        type: 'window',
        includeUncontrolled: true,
      })
      .then((clientList) => {
        for (const client of clientList) {
          if (client.url === urlToOpen && 'focus' in client) {
            console.log('[Service Worker] Found matching client to focus.')
            return client.focus()
          }
        }
        if (self.clients.openWindow) {
          console.log('[Service Worker] No matching client found, opening new window.')
          return self.clients.openWindow(urlToOpen)
        }
      })
  )
})

```

## 📄 src/app/(client)/articles/page.js
*Lines: 41, Size: 1.16 KB*

```javascript
// apps/client/src/app/(client)/articles/page.js
import { DataView } from '@/components/client/shared/DataView'
import { getArticles } from '@headlines/data-access/next'
import { getUserIdFromSession } from '@/lib/auth/server'

export const dynamic = 'force-dynamic'

const sortOptions = [
  { value: 'date_desc', icon: 'clock', tooltip: 'Sort by Date (Newest First)' },
  { value: 'relevance_desc', icon: 'relevance', tooltip: 'Sort by Relevance' },
]

export default async function ArticlesPage({ searchParams }) {
  const userId = await getUserIdFromSession()
  let initialArticles = []

  if (userId) {
    try {
      const filters = { q: searchParams.q || '' }
      const sort = searchParams.sort || 'date_desc'

      const result = await getArticles({ page: 1, filters, sort, userId })
      if (result.success) {
        initialArticles = result.data
      }
    } catch (err) {
      console.error('[ArticlesPage] Failed to fetch initial data:', err.message)
    }
  }

  return (
    <DataView
      viewTitle="Raw Articles"
      sortOptions={sortOptions}
      queryKeyPrefix="articles"
      listComponentKey="article-list"
      initialData={initialArticles}
    />
  )
}

```

## 📄 src/app/(client)/chat/page.js
*Lines: 9, Size: 240 Bytes*

```javascript
// File: apps/client/src/app/(client)/chat/page.js
import { ChatManager } from '@/components/client/chat/ChatManager'

export const dynamic = 'force-dynamic' // Add this line

export default function ChatPage() {
  return <ChatManager />
}

```

## 📄 src/app/(client)/events/page.js
*Lines: 41, Size: 1.17 KB*

```javascript
// apps/client/src/app/(client)/events/page.js (CORRECTED)
import { DataView } from '@/components/client/shared/DataView'
import { getEvents } from '@headlines/data-access/next'
import { getUserIdFromSession } from '@/lib/auth/server'

export const dynamic = 'force-dynamic'

const sortOptions = [
  { value: 'date_desc', icon: 'clock', tooltip: 'Sort by Date (Newest First)' },
  { value: 'relevance_desc', icon: 'relevance', tooltip: 'Sort by Relevance' },
]

export default async function EventsPage({ searchParams }) {
  const userId = await getUserIdFromSession()
  let initialEvents = []

  if (userId) {
    try {
      const filters = { q: searchParams.q || '' }
      const sort = searchParams.sort || sortOptions[0].value

      const result = await getEvents({ page: 1, userId, filters, sort })
      if (result.success) {
        initialEvents = result.data
      }
    } catch (err) {
      console.error('[EventsPage] Failed to fetch initial events:', err.message)
    }
  }

  return (
    <DataView
      viewTitle="Synthesized Events"
      initialData={initialEvents}
      listComponentKey="event-list"
      queryKeyPrefix="events"
      sortOptions={sortOptions}
    />
  )
}

```

## 📄 src/app/(client)/layout.js
*Lines: 18, Size: 670 Bytes*

```javascript
// apps/client/src/app/(client)/layout.js
import { Header } from '@/components/client/shared/Header'
import { MainNavTabs } from '@/components/client/shared/MainNavTabs'

// This is now a simple, synchronous layout component.
export default function ClientLayout({ children }) {
  return (
    <div className="container mx-auto p-4 md:p-8 flex flex-col min-h-screen">
      {/* The Header component will get its data from the client-side AuthProvider/Zustand store */}
      <Header />
      <div className="sticky top-[5px] z-30 my-4">
        <MainNavTabs />
      </div>
      <main className="flex-grow flex flex-col mt-0 min-h-0">{children}</main>
    </div>
  )
}

```

## 📄 src/app/(client)/opportunities/[opportunityId]/page.js
*Lines: 142, Size: 4.99 KB*

```javascript
// apps/client/src/app/(client)/opportunities/[opportunityId]/page.js (CORRECTED)
export const dynamic = 'force-dynamic'

import { getOpportunityDetails } from '@headlines/data-access/next'
import { notFound } from 'next/navigation'
import Link from 'next/link'
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  Button,
  Badge,
} from '@/components/shared'
import { ArrowLeft, User, MapPin, Briefcase, Mail, Zap, ExternalLink } from 'lucide-react'
import { format } from 'date-fns'
import { getCountryFlag } from '@headlines/utils-shared'

function TimelineItem({ event, isLast }) {
  return (
    <div className="flex gap-4">
      <div className="flex flex-col items-center">
        <div className="w-3 h-3 bg-blue-500 rounded-full ring-4 ring-slate-800"></div>
        {!isLast && <div className="flex-grow w-px bg-slate-700"></div>}
      </div>
      <div className="flex-grow pb-8">
        <p className="text-xs text-slate-400">
          {format(new Date(event.createdAt), 'MMMM d, yyyy')}
        </p>
        <h3 className="font-semibold text-slate-100 mt-1">
          {event.synthesized_headline}
        </h3>
        <p className="text-sm text-slate-400 mt-1">{event.synthesized_summary}</p>
        <div className="mt-2 flex flex-wrap gap-2">
          {event.source_articles.map((article) => (
            <a
              href={article.link}
              target="_blank"
              rel="noopener noreferrer"
              key={article.link}
            >
              <Badge variant="secondary" className="hover:bg-slate-700">
                {article.newspaper}
                <ExternalLink className="h-3 w-3 ml-1.5" />
              </Badge>
            </a>
          ))}
        </div>
      </div>
    </div>
  )
}

export default async function OpportunityDossierPage({ params }) {
  const { opportunityId } = params
  const { success, data: opportunity } = await getOpportunityDetails(opportunityId)

  if (!success || !opportunity) {
    notFound()
  }

  const { contactDetails } = opportunity
  const flags = (opportunity.basedIn || []).map((c) => getCountryFlag(c)).join(' ') // Use flags for array

  return (
    <div className="max-w-4xl mx-auto">
      <Button asChild variant="ghost" className="mb-4">
        <Link href="/opportunities">
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back to Opportunities
        </Link>
      </Button>
      <Card className="bg-slate-900/50 border-slate-700/80">
        <CardHeader>
          <div className="flex justify-between items-start">
            <div>
              <CardTitle className="text-3xl font-bold flex items-center gap-3">
                <User className="h-8 w-8 text-slate-400" />
                {opportunity.reachOutTo}
              </CardTitle>
              <CardDescription className="mt-2 text-base">
                {contactDetails?.role && contactDetails?.company && (
                  <span className="flex items-center gap-2">
                    <Briefcase className="h-4 w-4" />
                    {contactDetails.role} at <strong>{contactDetails.company}</strong>
                  </span>
                )}
              </CardDescription>
            </div>
            {opportunity.likelyMMDollarWealth > 0 && (
              <Badge
                variant="outline"
                className="text-lg border-green-500/50 text-green-300"
              >
                Est. ${opportunity.likelyMMDollarWealth}M
              </Badge>
            )}
          </div>
          <div className="flex flex-wrap gap-x-6 gap-y-2 pt-4 text-sm text-slate-300">
            {(opportunity.city || opportunity.basedIn) && (
              <span className="flex items-center gap-2">
                <MapPin className="h-4 w-4 text-slate-500" />
                <span className="text-xl mr-1">{flags}</span>
                {opportunity.city}
                {opportunity.city && opportunity.basedIn?.length > 0 ? ', ' : ''}
                {(opportunity.basedIn || []).join(', ')}
              </span>
            )}
            {contactDetails?.email && (
              <a
                href={`mailto:${contactDetails.email}`}
                className="flex items-center gap-2 text-blue-400 hover:underline"
              >
                <Mail className="h-4 w-4 text-slate-500" />
                {contactDetails.email}
              </a>
            )}
          </div>
        </CardHeader>
        <CardContent>
          <div className="border-t border-slate-700 pt-6">
            <h3 className="text-lg font-semibold flex items-center gap-2 mb-4">
              <Zap className="h-5 w-5 text-blue-400" />
              Event Timeline
            </h3>
            <div className="relative">
              {(opportunity.events || []).map((event, index) => (
                <TimelineItem
                  key={event._id}
                  event={event}
                  isLast={index === opportunity.events.length - 1}
                />
              ))}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

```

## 📄 src/app/(client)/opportunities/page.js
*Lines: 42, Size: 1.24 KB*

```javascript
// apps/client/src/app/(client)/opportunities/page.js
import { DataView } from '@/components/client/shared/DataView'
import { getOpportunities } from '@headlines/data-access/next'
import { getUserIdFromSession } from '@/lib/auth/server'

const sortOptions = [
  { value: 'date_desc', icon: 'clock', tooltip: 'Sort by Date (Newest First)' },
  { value: 'size_desc', icon: 'size', tooltip: 'Sort by Estimated Size' },
]

export default async function OpportunitiesPage({ searchParams }) {
  const userId = await getUserIdFromSession()
  let initialOpportunities = []

  if (userId) {
    try {
      const filters = {
        q: searchParams.q || '',
        withEmail: searchParams.withEmail === 'true',
      }
      const sort = searchParams.sort || 'date_desc'

      const result = await getOpportunities({ page: 1, filters, sort, userId })
      if (result.success) {
        initialOpportunities = result.data
      }
    } catch (err) {
      console.error('[OpportunitiesPage] Failed to fetch initial data:', err.message)
    }
  }

  return (
    <DataView
      viewTitle="Actionable Opportunities"
      sortOptions={sortOptions}
      queryKeyPrefix="opportunities"
      listComponentKey="opportunity-list"
      initialData={initialOpportunities}
    />
  )
}

```

## 📄 src/app/(client)/settings/page.js
*Lines: 23, Size: 768 Bytes*

```javascript
// File: apps/client/src/app/(client)/settings/page.js (CORRECTED)
import { getGlobalCountries } from '@headlines/data-access/next'
import { SettingsForm } from '@/components/client/settings/SettingsForm'

export const dynamic = 'force-dynamic'

export default async function SettingsPage() {
  // Fetch all countries with event counts to pass to the editor
  const { data: allCountries } = await getGlobalCountries()

  return (
    <div className="max-w-4xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold">Settings</h1>
        <p className="text-lg text-slate-300 mt-1">
          Manage your profile and notification preferences.
        </p>
      </div>
      <SettingsForm allCountries={allCountries || []} />
    </div>
  )
}

```

## 📄 src/app/(client)/upload/page.js
*Lines: 16, Size: 473 Bytes*

```javascript
// File: apps/client/src/app/(client)/upload/page.js
'use client'

import { UploadView } from '@/components/client/upload/UploadView'

export const dynamic = 'force-dynamic'


// This page is a client component and doesn't need the dynamic export
// as it renders entirely on the client. The error was likely a cascade
// from other server components. No change needed here, but including for completeness.

export default function UploadPage() {
  return <UploadView />
}

```

## 📄 src/app/_components/AppWrapper.jsx
*Lines: 25, Size: 740 Bytes*

```jsx
// apps/client/src/app/_components/AppWrapper.jsx
import 'server-only'
import { cookies } from 'next/headers'
import { verifySession } from '@/lib/auth/server'
import { AuthProvider } from '@/lib/auth/AuthProvider'

async function getUser() {
  try {
    const cookieStore = cookies()
    const { user } = await verifySession(cookieStore)
    return user
  } catch (error) {
    // This can happen during build time or if cookies are unavailable.
    // Gracefully return null.
    return null
  }
}

export async function AppWrapper({ children }) {
  const user = await getUser()

  // The AuthProvider client component receives the initial user state from the server.
  return <AuthProvider initialUser={user}>{children}</AuthProvider>
}

```

## 📄 src/app/admin/articles/ArticlesClientPage.jsx
*Lines: 134, Size: 4.38 KB*

```jsx
// apps/client/src/app/admin/articles/ArticlesClientPage.jsx
'use client'

import { useState, useCallback, useMemo } from 'react'
import { usePathname, useRouter, useSearchParams } from 'next/navigation'
import { toast } from 'sonner'
import {
  PageHeader,
  DataTable,
  ConfirmationDialog,
  ExportButton,
} from '@/components/shared'
import { columns } from './columns'
import { updateArticleAction, deleteArticleAction } from './actions'
import { handleExport } from '@/lib/api-client'

export default function ArticlesClientPage({ initialArticles, total }) {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  const page = parseInt(searchParams.get('page') || '1', 10)
  const sortParam = searchParams.get('sort') || ''
  const filterParam = searchParams.get('filters') || '[]'

  const [sorting, setSorting] = useState(
    sortParam
      ? [{ id: sortParam.split('_')[0], desc: sortParam.split('_')[1] === 'desc' }]
      : []
  )
  const [columnFilters, setColumnFilters] = useState(JSON.parse(filterParam))
  const [confirmState, setConfirmState] = useState({ isOpen: false, articleId: null })

  const updateUrlParams = useCallback(
    ({ page, sorting, filters }) => {
      const params = new URLSearchParams(searchParams.toString())
      params.set('page', page.toString())
      if (sorting?.length > 0) {
        params.set('sort', `${sorting[0].id}_${sorting[0].desc ? 'desc' : 'asc'}`)
      } else {
        params.delete('sort')
      }
      if (filters?.length > 0) {
        params.set('filters', JSON.stringify(filters))
      } else {
        params.delete('filters')
      }
      router.replace(`${pathname}?${params.toString()}`, { scroll: false })
    },
    [pathname, router, searchParams]
  )

  const handlePageChange = (newPage) =>
    updateUrlParams({ page: newPage, sorting, filters: columnFilters })
  const handleSortChange = (newSorting) =>
    updateUrlParams({ page: 1, sorting: newSorting, filters: columnFilters })
  const handleFilterChange = (newFilters) =>
    updateUrlParams({ page: 1, sorting, filters: newFilters })

  const handleUpdate = useCallback(async (article, updateData) => {
    toast.promise(updateArticleAction(article._id, updateData), {
      loading: 'Updating article...',
      success: 'Article updated successfully.',
      error: (err) => `Update failed: ${err.message}`,
    })
  }, [])

  const handleDeleteRequest = useCallback((articleId) => {
    setConfirmState({ isOpen: true, articleId })
  }, [])

  const confirmDelete = useCallback(async () => {
    const { articleId } = confirmState
    setConfirmState({ isOpen: false, articleId: null })

    toast.promise(deleteArticleAction(articleId), {
      loading: 'Deleting article...',
      success: 'Article deleted.',
      error: (err) => `Deletion failed: ${err.message}`,
    })
  }, [confirmState])

  const tableColumns = useMemo(
    () => columns(handleUpdate, handleDeleteRequest),
    [handleUpdate, handleDeleteRequest]
  )

  const onExport = (fileType) => {
    const sort = sorting[0]
      ? `${sorting[0].id}_${sorting[0].desc ? 'desc' : 'asc'}`
      : null
    return handleExport('articles', fileType, columnFilters, sort)
  }

  return (
    <>
      <div className="flex flex-col h-full">
        <PageHeader
          title="Article Management"
          description={`Review and manage all ${total.toLocaleString()} raw articles.`}
        >
          <ExportButton
            hasData={initialArticles && initialArticles.length > 0}
            onExport={onExport}
          />
        </PageHeader>
        <div className="mt-8 flex-grow min-h-0">
          <DataTable
            columns={tableColumns}
            data={initialArticles}
            page={page}
            setPage={handlePageChange}
            total={total}
            sorting={sorting}
            setSorting={handleSortChange}
            columnFilters={columnFilters}
            setColumnFilters={handleFilterChange}
            filterColumn="headline"
            filterPlaceholder="Filter by headline..."
          />
        </div>
      </div>
      <ConfirmationDialog
        open={confirmState.isOpen}
        onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })}
        onConfirm={confirmDelete}
        title="Confirm Deletion"
        description="Are you sure you want to permanently delete this article?"
        confirmText="Delete Article"
      />
    </>
  )
}

```

## 📄 src/app/admin/articles/[articleId]/ArticleEditor.jsx
*Lines: 129, Size: 3.88 KB*

```jsx
'use client'

import { useState, useCallback } from 'react'
import { useRouter } from 'next/navigation'
import {
  Button,
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
  Label,
  Input,
  Textarea,
} from '@/components/shared'
import { ArrowLeft, Save, Loader2 } from 'lucide-react'
import { toast } from 'sonner'
import Link from 'next/link'
import { updateArticleAction } from '../actions'

const FormField = ({ id, label, children }) => (
  <div className="space-y-2">
    <Label htmlFor={id}>{label}</Label>
    {children}
  </div>
)

export default function ArticleEditor({ initialArticle }) {
  const [article, setArticle] = useState(initialArticle)
  const [isSaving, setIsSaving] = useState(false)
  const router = useRouter()

  const handleChange = (key, value) => {
    setArticle((prev) => ({ ...prev, [key]: value }))
  }

  const handleSave = useCallback(async () => {
    setIsSaving(true)
    const result = await updateArticleAction(article._id, {
      headline: article.headline,
      relevance_headline: article.relevance_headline,
      relevance_article: article.relevance_article,
      assessment_headline: article.assessment_headline,
      assessment_article: article.assessment_article,
    })

    if (result.success) {
      toast.success('Article updated successfully.')
      router.push('/admin/articles')
    } else {
      toast.error(`Update failed: ${result.error}`)
    }
    setIsSaving(false)
  }, [article, router])

  return (
    <div className="max-w-4xl mx-auto">
      <Button asChild variant="ghost" className="mb-4">
        <Link href="/admin/articles">
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back to Articles
        </Link>
      </Button>
      <Card>
        <CardHeader>
          <CardTitle>Edit Article</CardTitle>
          <CardDescription>
            Fine-tune the AI's assessment and details for this article.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <FormField id="headline" label="Headline">
            <Textarea
              value={article.headline}
              onChange={(e) => handleChange('headline', e.target.value)}
              rows={3}
            />
          </FormField>
          <div className="grid grid-cols-2 gap-4">
            <FormField id="relevance_headline" label="Headline Score">
              <Input
                type="number"
                value={article.relevance_headline}
                onChange={(e) =>
                  handleChange('relevance_headline', Number(e.target.value))
                }
              />
            </FormField>
            <FormField id="relevance_article" label="Article Score">
              <Input
                type="number"
                value={article.relevance_article}
                onChange={(e) =>
                  handleChange('relevance_article', Number(e.target.value))
                }
              />
            </FormField>
          </div>
          <FormField id="assessment_headline" label="Headline Assessment">
            <Textarea
              value={article.assessment_headline}
              onChange={(e) => handleChange('assessment_headline', e.target.value)}
              rows={2}
            />
          </FormField>
          <FormField id="assessment_article" label="Article Assessment">
            <Textarea
              value={article.assessment_article}
              onChange={(e) => handleChange('assessment_article', e.target.value)}
              rows={4}
            />
          </FormField>
        </CardContent>
        <CardFooter>
          <Button onClick={handleSave} disabled={isSaving}>
            {isSaving ? (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            ) : (
              <Save className="mr-2 h-4 w-4" />
            )}
            Save Changes
          </Button>
        </CardFooter>
      </Card>
    </div>
  )
}

```

## 📄 src/app/admin/articles/[articleId]/page.jsx
*Lines: 17, Size: 500 Bytes*

```jsx
'use server'

import { getArticleDetails } from '@headlines/data-access/next' // CORRECTED
import { notFound } from 'next/navigation'
import ArticleEditor from './ArticleEditor' // We will create this next

export default async function ArticleDetailPage({ params }) {
  const { articleId } = params
  const result = await getArticleDetails(articleId)

  if (!result.success || !result.data) {
    notFound()
  }

  return <ArticleEditor initialArticle={JSON.parse(JSON.stringify(result.data))} />
}

```

## 📄 src/app/admin/articles/actions.js
*Lines: 29, Size: 1.04 KB*

```javascript
// apps/client/src/app/admin/articles/actions.js (version 2.0.0)
'use server'

import { revalidatePath } from 'next/cache'
// Import the PURE data logic functions from the Next.js-safe entry point.
import { updateArticle, deleteArticle } from '@headlines/data-access/next'
// ARCHITECTURAL NOTE: Server Actions are another top-level entry point.
// They are responsible for establishing their own database connection.
import dbConnect from '@headlines/data-access/dbConnect/next'

// This file defines the Server Actions. It wraps the pure data logic.
export async function updateArticleAction(articleId, updateData) {
  await dbConnect() // Connect to DB within the action
  const result = await updateArticle(articleId, updateData)
  if (result.success) {
    revalidatePath('/admin/articles')
  }
  return result
}

export async function deleteArticleAction(articleId) {
  await dbConnect() // Connect to DB within the action
  const result = await deleteArticle(articleId)
  if (result.success) {
    revalidatePath('/admin/articles')
  }
  return result
}

```

## 📄 src/app/admin/articles/columns.jsx
*Lines: 140, Size: 4.29 KB*

```jsx
// apps/client/src/app/admin/articles/columns.jsx (Multi-country support)
'use client'

import React from 'react'
import {
  Button,
  Badge,
  DataTableColumnHeader,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from '@/components/shared'
import { Trash2, ExternalLink, MoreHorizontal, Edit } from 'lucide-react'
import { format } from 'date-fns'
import { EditableCell } from '@/components/shared/elements/EditableCell'
import Link from 'next/link'

export const columns = (onUpdate, onDelete) => [
  {
    accessorKey: 'relevance_headline',
    header: ({ column }) => <DataTableColumnHeader column={column} title="HL Score" />,
    cell: ({ row }) => <Badge variant="outline">{row.original.relevance_headline}</Badge>,
    size: 100,
  },
  {
    accessorKey: 'relevance_article',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Article Score" />
    ),
    cell: ({ row }) => (
      <EditableCell
        initialValue={row.original.relevance_article}
        onSave={(newValue) =>
          onUpdate(row.original, { relevance_article: Number(newValue) })
        }
        placeholder="N/A"
      />
    ),
    size: 120,
  },
  {
    accessorKey: 'headline',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Headline" />,
    cell: ({ row }) => (
      <div className="max-w-[400px] xl:max-w-[600px]">
        <EditableCell
          initialValue={row.original.headline}
          onSave={(newValue) => onUpdate(row.original, { headline: newValue })}
          useTextarea={true}
        />
      </div>
    ),
    minSize: 400,
  },
  {
    accessorKey: 'newspaper',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Source" />,
    cell: ({ row }) => (
      <div className="max-w-[180px]">
        <EditableCell
          initialValue={row.original.newspaper}
          onSave={(newValue) => onUpdate(row.original, { newspaper: newValue })}
        />
      </div>
    ),
    size: 180,
  },
  {
    accessorKey: 'country',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Country" />,
    cell: ({ row }) => (
      <div className="max-w-[150px]">
        {/* MODIFIED: EditableCell now handles arrays via join/split */}
        <EditableCell
          initialValue={(row.original.country || []).join(', ')}
          onSave={(newValue) =>
            onUpdate(row.original, {
              country: newValue
                .split(',')
                .map((s) => s.trim())
                .filter(Boolean),
            })
          }
          placeholder="Add countries..."
        />
      </div>
    ),
    size: 150,
  },
  {
    accessorKey: 'createdAt',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Discovered" />,
    cell: ({ row }) => format(new Date(row.original.createdAt), 'dd MMM yyyy, HH:mm'),
    size: 180,
  },
  {
    id: 'actions',
    cell: ({ row }) => (
      <div className="text-right">
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="h-8 w-8 p-0">
              <span className="sr-only">Open menu</span>
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>Actions</DropdownMenuLabel>
            <DropdownMenuItem asChild>
              <Link href={`/admin/articles/${row.original._id}`}>
                <Edit className="mr-2 h-4 w-4" />
                Edit Details
              </Link>
            </DropdownMenuItem>
            <DropdownMenuItem asChild>
              <a href={row.original.link} target="_blank" rel="noopener noreferrer">
                <ExternalLink className="mr-2 h-4 w-4" />
                Open Original
              </a>
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem
              className="text-red-400 focus:bg-red-500/10 focus:text-red-400"
              onClick={() => onDelete(row.original._id)}
            >
              <Trash2 className="mr-2 h-4 w-4" />
              Delete Article
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    ),
    size: 80,
    enableResizing: false,
  },
]

```

## 📄 src/app/admin/articles/page.js
*Lines: 29, Size: 875 Bytes*

```javascript
// apps/client/src/app/admin/articles/page.js
import { getArticles } from '@headlines/data-access/next' // CORRECTED
import ArticlesClientPage from './ArticlesClientPage'

export const dynamic = 'force-dynamic'

export default async function ArticlesPage({ searchParams }) {
  const page = parseInt(searchParams.page || '1', 10)
  const sort = searchParams.sort || null
  const columnFilters = searchParams.filters ? JSON.parse(searchParams.filters) : []

  const filters = columnFilters.reduce((acc, filter) => {
    if (filter.value) {
      const key = filter.id === 'headline' ? 'q' : filter.id
      acc[key] = filter.value
    }
    return acc
  }, {})

  const result = await getArticles({ page, filters, sort })

  return (
    <ArticlesClientPage
      initialArticles={result.success ? result.data : []}
      total={result.success ? result.total : 0}
    />
  )
}

```

## 📄 src/app/admin/dashboard/DashboardClientPage.jsx
*Lines: 192, Size: 5.84 KB*

```jsx
// File: apps/client/src/app/admin/dashboard/DashboardClientPage.jsx

'use client'

import { useState, useMemo } from 'react'
import { motion } from 'framer-motion'
import Link from 'next/link'
import { Newspaper, Users, Rss, CheckCircle2, AlertTriangle, Loader2 } from 'lucide-react'
import {
  PageHeader,
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  Button,
} from '@/components/shared'
import { formatDistanceToNow } from 'date-fns'

const StatCard = ({ title, value, icon, link }) => (
  <Card asChild>
    <Link href={link}>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium text-muted-foreground">
          {title}
        </CardTitle>
        {icon}
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">{value}</div>
      </CardContent>
    </Link>
  </Card>
)

const RunFunnelStat = ({ title, value, className }) => (
  <div className={`text-center p-2 rounded-md ${className}`}>
    <p className="text-xl font-bold">{value.toLocaleString()}</p>
    <p className="text-xs text-muted-foreground">{title}</p>
  </div>
)

const RecentRun = ({ run }) => {
  const isSuccess = !run.runStats.errors || run.runStats.errors.length === 0
  return (
    <Link
      href={`/admin/runs/${run._id}`} // Corrected link for admin section
      className="flex items-center justify-between p-3 rounded-md hover:bg-accent transition-colors"
    >
      <div className="flex items-center gap-3">
        {isSuccess ? (
          <CheckCircle2 className="w-5 h-5 text-green-500 flex-shrink-0" />
        ) : (
          <AlertTriangle className="w-5 h-5 text-red-500 flex-shrink-0" />
        )}
        <div>
          <p className="font-medium">
            Found {run.runStats.freshHeadlinesFound} headlines, synthesized{' '}
            {run.runStats.eventsSynthesized} events.
          </p>
          <p className="text-xs text-muted-foreground">
            {formatDistanceToNow(new Date(run.createdAt), { addSuffix: true })}
          </p>
        </div>
      </div>
      <Button variant="ghost" size="sm">
        Details
      </Button>
    </Link>
  )
}

export default function DashboardClientPage({
  initialStats,
  initialRuns,
  initialSources,
}) {
  const [stats] = useState(initialStats)
  const [runs] = useState(initialRuns)
  const [sources] = useState(initialSources)

  const failingSources = useMemo(() => {
    if (!sources) return []
    return sources.filter(
      (s) =>
        s.status === 'active' &&
        s.analytics?.totalRuns > 0 &&
        s.analytics?.lastRunHeadlineCount === 0
    )
  }, [sources])

  if (!stats) {
    return (
      <div className="flex items-center justify-center h-full">
        <Loader2 className="w-12 h-12 animate-spin text-primary" />
      </div>
    )
  }

  const lastRunStats = runs?.[0]?.runStats || {}

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <PageHeader
        title="Admin Dashboard"
        description="High-level overview of system health and content pipeline."
      />
      <div className="mt-8 grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <StatCard
          title="Active Sources"
          value={`${stats.sources.active} / ${stats.sources.total}`}
          icon={<Newspaper className="h-5 w-5 text-muted-foreground" />}
          link="/admin/sources"
        />
        <StatCard
          title="Active Users"
          value={`${stats.users.active} / ${stats.users.total}`}
          icon={<Users className="h-5 w-5 text-muted-foreground" />}
          link="/admin/users"
        />
        <StatCard
          title="Watchlist Entities"
          value={stats.watchlist.total}
          icon={<Rss className="h-5 w-5 text-muted-foreground" />}
          link="/admin/watchlist"
        />
        <StatCard
          title="Failing Sources"
          value={failingSources.length}
          icon={<AlertTriangle className="h-5 w-5 text-muted-foreground" />}
          link="/admin/sources?status=failing"
        />
      </div>
      <div className="mt-8 grid gap-8 md:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle>Recent Pipeline Runs</CardTitle>
            <CardDescription>
              Summary of the last 5 intelligence gathering runs.
            </CardDescription>
          </CardHeader>
          <CardContent>
            {runs && runs.length > 0 ? (
              <div className="space-y-2">
                {runs.map((run) => (
                  <RecentRun key={run._id} run={run} />
                ))}
              </div>
            ) : (
              <p className="text-sm text-muted-foreground">No recent runs found.</p>
            )}
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Last Run Funnel</CardTitle>
            <CardDescription>
              Conversion metrics from the most recent pipeline execution.
            </CardDescription>
          </CardHeader>
          <CardContent className="grid grid-cols-2 gap-4">
            <RunFunnelStat
              title="Headlines Found"
              value={lastRunStats.freshHeadlinesFound || 0}
              className="bg-blue-500/10"
            />
            <RunFunnelStat
              title="Relevant Headlines"
              value={lastRunStats.relevantHeadlines || 0}
              className="bg-yellow-500/10"
            />
            <RunFunnelStat
              title="Events Synthesized"
              value={lastRunStats.eventsSynthesized || 0}
              className="bg-purple-500/10"
            />
            <RunFunnelStat
              title="Notifications Sent"
              value={lastRunStats.eventsEmailed || 0}
              className="bg-green-500/10"
            />
          </CardContent>
        </Card>
      </div>
    </motion.div>
  )
}

```

## 📄 src/app/admin/dashboard/page.jsx
*Lines: 51, Size: 1.28 KB*

```jsx
// File: apps/client/src/app/admin/dashboard/page.jsx (CORRECTED)
import {
  getDashboardStats,
  getRecentRunVerdicts,
  getAllSources,
} from '@headlines/data-access/next'
import DashboardClientPage from './DashboardClientPage'

export const dynamic = 'force-dynamic'

async function getPageData() {
  try {
    const [statsResult, verdictsResult, sourcesResult] = await Promise.all([
      getDashboardStats(),
      getRecentRunVerdicts(),
      getAllSources({}),
    ])

    return {
      stats: statsResult.data || null,
      runs: verdictsResult.data || [],
      sources: sourcesResult.data || [],
      error: null,
    }
  } catch (error) {
    console.error('[Admin Dashboard Server Error]', error)
    return { stats: null, runs: [], sources: [], error: error.message }
  }
}

export default async function AdminDashboardPage() {
  const { stats, runs, sources, error } = await getPageData()

  if (error) {
    return (
      <div className="p-8 text-center text-red-400 bg-red-500/10 border border-red-500/30 rounded-lg">
        <h2 className="text-xl font-bold">Error Loading Dashboard Data</h2>
        <p className="mt-2">{error}</p>
      </div>
    )
  }

  return (
    <DashboardClientPage
      initialStats={stats}
      initialRuns={runs}
      initialSources={sources}
    />
  )
}

```

## 📄 src/app/admin/events/EventsClientPage.jsx
*Lines: 160, Size: 5.45 KB*

```jsx
// apps/client/src/app/admin/events/EventsClientPage.jsx (MODIFIED)
'use client'

import { useState, useCallback } from 'react'
import { usePathname, useRouter, useSearchParams } from 'next/navigation'
import { toast } from 'sonner'
import {
  PageHeader,
  Accordion,
  Button,
  ConfirmationDialog,
  ExportButton,
} from '@/components/shared'
import { EventListItem, ListHeader } from './columns'
import { handleExport } from '@/lib/api-client'
import { deleteEventAction, updateEventAction, getEventDetailsAction } from './actions'

// ACTION: Accept the new `availableCountries` prop
export default function EventsClientPage({ initialEvents, total, availableCountries }) {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  const page = parseInt(searchParams.get('page') || '1', 10)
  const sortParam = searchParams.get('sort') || ''

  const [events, setEvents] = useState(initialEvents)
  const [sorting, setSorting] = useState(
    sortParam
      ? [{ id: sortParam.split('_')[0], desc: sortParam.split('_')[1] === 'desc' }]
      : []
  )
  const [expandedItemId, setExpandedItemId] = useState(null)
  const [confirmState, setConfirmState] = useState({ isOpen: false, eventId: null })

  const updateUrlParams = useCallback(
    ({ page, sorting }) => {
      const params = new URLSearchParams(searchParams.toString())
      params.set('page', page.toString())
      if (sorting?.length > 0) {
        params.set('sort', `${sorting[0].id}_${sorting[0].desc ? 'desc' : 'asc'}`)
      } else {
        params.delete('sort')
      }
      router.replace(`${pathname}?${params.toString()}`, { scroll: false })
    },
    [pathname, router, searchParams]
  )

  const handlePageChange = (newPage) => updateUrlParams({ page: newPage, sorting })
  const handleSortChange = (newSorting) =>
    updateUrlParams({ page: 1, sorting: newSorting })

  const handleFetchDetails = useCallback(async (eventId) => {
    const result = await getEventDetailsAction(eventId)
    if (result.success) {
      setEvents((currentData) =>
        currentData.map((e) => (e._id === eventId ? { ...e, details: result.data } : e))
      )
    } else {
      toast.error('Failed to load event details', { description: result.error })
    }
  }, [])

  const handleUpdate = useCallback(async (event, updateData) => {
    setEvents((currentData) =>
      currentData.map((e) =>
        e._id === event._id
          ? { ...e, ...updateData, details: { ...e.details, ...updateData } }
          : e
      )
    )
    toast.promise(updateEventAction(event._id, updateData), {
      loading: 'Updating event...',
      success: 'Event updated.',
      error: (err) => `Update failed: ${err.message}`,
    })
  }, [])

  const handleDelete = (eventId) => setConfirmState({ isOpen: true, eventId })

  const confirmDelete = useCallback(async () => {
    const { eventId } = confirmState
    setConfirmState({ isOpen: false, eventId: null })
    toast.promise(deleteEventAction(eventId), {
      loading: 'Deleting event...',
      success: 'Event deleted.',
      error: (err) => `Deletion failed: ${err.message}`,
    })
  }, [confirmState])

  const onExport = (fileType) => {
    const sort = sorting[0]
      ? `${sorting[0].id}_${sorting[0].desc ? 'desc' : 'asc'}`
      : null
    return handleExport('events', fileType, [], sort)
  }

  const description = `Review, audit, and manage all ${total.toLocaleString()} synthesized events.`
  const totalPages = Math.ceil(total / 50) || 1

  return (
    <div className="flex flex-col h-full">
      <PageHeader title="Event Management" description={description}>
        <ExportButton hasData={events && events.length > 0} onExport={onExport} />
      </PageHeader>
      <div className="mt-8 flex-grow min-h-0 flex flex-col">
        <div className="flex items-center py-4 justify-end">
          <Button
            onClick={() => handlePageChange(Math.max(1, page - 1))}
            variant="outline"
            disabled={page <= 1}
          >
            Previous
          </Button>
          <span className="text-sm text-muted-foreground mx-2">
            Page {page} of {totalPages}
          </span>
          <Button
            onClick={() => handlePageChange(page + 1)}
            variant="outline"
            disabled={page >= totalPages}
          >
            Next
          </Button>
        </div>
        <div className="relative rounded-md border flex-grow overflow-y-auto">
          <ListHeader sorting={sorting} setSorting={handleSortChange} />
          <Accordion
            type="single"
            collapsible
            value={expandedItemId}
            onValueChange={setExpandedItemId}
          >
            {events.map((event) => (
              <EventListItem
                key={event._id}
                event={event}
                onUpdate={handleUpdate}
                onDelete={handleDelete}
                isExpanded={expandedItemId === event._id}
                onDetailsNeeded={handleFetchDetails}
                availableCountries={availableCountries} // ACTION: Pass prop down to list item
              />
            ))}
          </Accordion>
        </div>
      </div>
      <ConfirmationDialog
        open={confirmState.isOpen}
        onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })}
        onConfirm={confirmDelete}
        title="Confirm Deletion"
        description="Are you sure you want to permanently delete this event and its related data?"
        confirmText="Delete Event"
      />
    </div>
  )
}

```

## 📄 src/app/admin/events/actions.js
*Lines: 33, Size: 927 Bytes*

```javascript
'use server'

import { revalidatePath } from 'next/cache'
import dbConnect from '@headlines/data-access/dbConnect/next'
import { deleteEvent, updateEvent, getEventDetails } from '@headlines/data-access'

// These actions will be called by the client component.

export async function updateEventAction(eventId, updateData) {
  await dbConnect()
  const result = await updateEvent(eventId, updateData)
  if (result.success) {
    revalidatePath('/admin/events')
  }
  return result
}

export async function deleteEventAction(eventId) {
  await dbConnect()
  const result = await deleteEvent(eventId)
  if (result.success) {
    revalidatePath('/admin/events')
  }
  return result
}

export async function getEventDetailsAction(eventId) {
  await dbConnect()
  // getEventDetails is already a server function, we just wrap it
  // to ensure it's called within the Server Action context.
  return await getEventDetails(eventId)
}

```

## 📄 src/app/admin/events/columns.jsx
*Lines: 243, Size: 8.04 KB*

```jsx
// apps/client/src/app/admin/events/columns.jsx (MODIFIED with MultiSelect)
'use client'

import React, { useState, useCallback } from 'react'
import {
  Button,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  DataTableColumnHeader,
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
  Label,
  Textarea,
  MultiSelect, // ACTION: Import MultiSelect
} from '@/components/shared'
import { Loader2, Trash2 } from 'lucide-react'
import { format } from 'date-fns'
import { RelationshipManager } from '@/components/admin/RelationshipManager'
import { toast } from 'sonner'
import { EditableCell } from '@/components/shared/elements/EditableCell'

const eventCategories = [
  'New Wealth',
  'Future Wealth',
  'Wealth Mentioned',
  'Legal/Dispute',
  'Background',
  'Other',
]

const FormField = ({ id, label, children }) => (
  <div className="space-y-2">
    <Label htmlFor={id} className="text-sm font-medium text-muted-foreground pl-1">
      {label}
    </Label>
    {children}
  </div>
)

export const EventListItem = ({
  event,
  onUpdate,
  onDelete,
  isExpanded,
  onDetailsNeeded,
  availableCountries, // ACTION: Accept the new prop
}) => {
  const [isLoadingDetails, setIsLoadingDetails] = useState(false)

  const loadDetails = useCallback(async () => {
    if (event.details) return
    setIsLoadingDetails(true)
    try {
      await onDetailsNeeded(event._id)
    } catch (err) {
      toast.error('Failed to load event details', { description: err.message })
    } finally {
      setIsLoadingDetails(false)
    }
  }, [event, onDetailsNeeded])

  React.useEffect(() => {
    if (isExpanded && !event.details && !isLoadingDetails) {
      loadDetails()
    }
  }, [isExpanded, event.details, isLoadingDetails, loadDetails])

  return (
    <AccordionItem value={event._id} className="border-b border-white/10 group">
      <AccordionTrigger className="w-full text-left hover:bg-white/5 px-2 hover:no-underline">
        <div className="flex items-center w-full text-sm">
          <div className="w-[180px] flex-shrink-0 text-muted-foreground group-hover:text-foreground">
            {format(new Date(event.createdAt), 'dd MMM yyyy, HH:mm')}
          </div>
          <div className="w-[140px] flex-shrink-0">
            {(event.country || []).join(', ')}
          </div>
          <div className="w-[180px] flex-shrink-0">
            {event.eventClassification || 'N/A'}
          </div>
          <div className="w-[80px] text-center flex-shrink-0">
            {event.highest_relevance_score}
          </div>
          <div className="flex-grow min-w-0 pr-4 whitespace-normal font-medium">
            {event.synthesized_headline}
          </div>
        </div>
      </AccordionTrigger>
      <AccordionContent className="p-4 bg-black/20">
        {isLoadingDetails ? (
          <div className="flex items-center justify-center h-64">
            <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
          </div>
        ) : event.details ? (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Event Details</CardTitle>
                <CardDescription>
                  View and edit the core synthesized data.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <FormField label="Synthesized Headline">
                  <EditableCell
                    useTextarea={true}
                    initialValue={event.details.synthesized_headline}
                    onSave={(newValue) =>
                      onUpdate(event.details, { synthesized_headline: newValue })
                    }
                  />
                </FormField>

                <div className="grid grid-cols-3 gap-4">
                  <FormField label="Country">
                    {/* ACTION: Replace EditableCell with MultiSelect */}
                    <MultiSelect
                      options={availableCountries}
                      selected={event.details.country || []}
                      onChange={(newCountries) =>
                        onUpdate(event.details, { country: newCountries.sort() })
                      }
                      placeholder="Select countries..."
                    />
                  </FormField>
                  <FormField label="Classification">
                    <Select
                      value={event.details.eventClassification}
                      onValueChange={(newValue) =>
                        onUpdate(event.details, { eventClassification: newValue })
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select..." />
                      </SelectTrigger>
                      <SelectContent>
                        {eventCategories.map((cat) => (
                          <SelectItem key={cat} value={cat}>
                            {cat}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormField>
                  <FormField label="Relevance Score">
                    <EditableCell
                      initialValue={event.details.highest_relevance_score}
                      onSave={(newValue) =>
                        onUpdate(event.details, {
                          highest_relevance_score: Number(newValue),
                        })
                      }
                    />
                  </FormField>
                </div>

                <FormField label="Synthesized Summary">
                  <EditableCell
                    useTextarea={true}
                    initialValue={event.details.synthesized_summary}
                    onSave={(newValue) =>
                      onUpdate(event.details, { synthesized_summary: newValue })
                    }
                  />
                </FormField>
              </CardContent>
              <CardFooter>
                <Button variant="destructive" onClick={() => onDelete(event.details._id)}>
                  <Trash2 className="mr-2 h-4 w-4" /> Delete Event
                </Button>
              </CardFooter>
            </Card>
            <RelationshipManager
              item={event.details}
              itemType="event"
              refetch={loadDetails}
            />
          </div>
        ) : (
          <div className="text-center text-muted-foreground py-10">
            Click to load details.
          </div>
        )}
      </AccordionContent>
    </AccordionItem>
  )
}

export const ListHeader = ({ sorting, setSorting }) => {
  const mockColumn = (id) => ({
    getCanSort: () => true,
    getIsSorted: () =>
      sorting.find((s) => s.id === id)?.desc
        ? 'desc'
        : sorting.find((s) => s.id === id)
          ? 'asc'
          : false,
    toggleSorting: (desc) => setSorting([{ id, desc }]),
    getCanFilter: () => false,
    getFilterValue: () => undefined,
    setFilterValue: () => {},
  })

  return (
    <div className="flex items-center p-2 border-b font-medium text-muted-foreground text-sm sticky top-0 bg-background z-10">
      <div className="w-[180px] flex-shrink-0">
        <DataTableColumnHeader column={mockColumn('createdAt')} title="Discovered" />
      </div>
      <div className="w-[140px] flex-shrink-0">
        <DataTableColumnHeader column={mockColumn('country')} title="Country" />
      </div>
      <div className="w-[180px] flex-shrink-0">
        <DataTableColumnHeader
          column={mockColumn('eventClassification')}
          title="Classification"
        />
      </div>
      <div className="w-[80px] flex-shrink-0 text-center">
        <DataTableColumnHeader
          column={mockColumn('highest_relevance_score')}
          title="Score"
        />
      </div>
      <div className="flex-grow min-w-0">
        <DataTableColumnHeader
          column={mockColumn('synthesized_headline')}
          title="Headline"
        />
      </div>
    </div>
  )
}

```

## 📄 src/app/admin/events/page.jsx
*Lines: 26, Size: 873 Bytes*

```jsx
// apps/client/src/app/admin/events/page.jsx (MODIFIED)
import { getEvents, getDistinctCountries } from '@headlines/data-access/next'
import EventsClientPage from './EventsClientPage'

export const dynamic = 'force-dynamic'

export default async function EventsPage({ searchParams }) {
  const page = parseInt(searchParams.page || '1', 10)
  const sort = searchParams.sort || null
  const filters = {}

  // ACTION: Fetch both events and the list of available countries concurrently.
  const [eventsResult, countriesResult] = await Promise.all([
    getEvents({ page, filters, sort }),
    getDistinctCountries(),
  ])

  return (
    <EventsClientPage
      initialEvents={eventsResult.success ? eventsResult.data : []}
      total={eventsResult.success ? eventsResult.total : 0}
      availableCountries={countriesResult.success ? countriesResult.data : []}
    />
  )
}

```

## 📄 src/app/admin/layout.js
*Lines: 29, Size: 906 Bytes*

```javascript
// 'use server'

import { verifyAdmin } from '@/lib/auth/server'
import { DesktopOnlyWrapper } from '@/components/shared/screen/DesktopOnlyWrapper'
import AdminNav from '@/components/admin/main-nav'

export const dynamic = 'force-dynamic'

export default async function AdminLayout({ children }) {
  // We can still verify admin here to be extra safe, but the redirect is now handled client-side
  // by the AuthProvider, which prevents the rendering error.
  const { isAdmin } = await verifyAdmin()

  if (!isAdmin) {
    // Instead of redirecting, we can return null or a loading/access-denied state.
    // The AuthProvider will handle the redirect anyway.
    return null
  }

  return (
    <DesktopOnlyWrapper>
      <div className="flex h-screen bg-background">
        <AdminNav />
        <main className="flex-1 overflow-y-auto p-6">{children}</main>
      </div>
    </DesktopOnlyWrapper>
  )
}

```

## 📄 src/app/admin/opportunities/OpportunitiesClientPage.jsx
*Lines: 133, Size: 4.51 KB*

```jsx
// apps/client/src/app/admin/opportunities/OpportunitiesClientPage.jsx
'use client'

import { useState, useCallback, useMemo } from 'react'
import { usePathname, useRouter, useSearchParams } from 'next/navigation'
import { toast } from 'sonner'
import {
  PageHeader,
  DataTable,
  ConfirmationDialog,
  ExportButton,
} from '@/components/shared'
import { columns } from './columns'
import { updateOpportunityAction, deleteOpportunityAction } from './actions'
import { handleExport } from '@/lib/api-client'

export default function OpportunitiesClientPage({ initialOpportunities, total }) {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  const page = parseInt(searchParams.get('page') || '1', 10)
  const sortParam = searchParams.get('sort') || ''
  const filterParam = searchParams.get('filters') || '[]'

  const [sorting, setSorting] = useState(
    sortParam
      ? [{ id: sortParam.split('_')[0], desc: sortParam.split('_')[1] === 'desc' }]
      : []
  )
  const [columnFilters, setColumnFilters] = useState(JSON.parse(filterParam))
  const [confirmState, setConfirmState] = useState({ isOpen: false, opportunityId: null })

  const updateUrlParams = useCallback(
    ({ page, sorting, filters }) => {
      const params = new URLSearchParams(searchParams.toString())
      params.set('page', page.toString())
      if (sorting?.length > 0) {
        params.set('sort', `${sorting[0].id}_${sorting[0].desc ? 'desc' : 'asc'}`)
      } else {
        params.delete('sort')
      }
      if (filters?.length > 0) {
        params.set('filters', JSON.stringify(filters))
      } else {
        params.delete('filters')
      }
      router.replace(`${pathname}?${params.toString()}`, { scroll: false })
    },
    [pathname, router, searchParams]
  )

  const handlePageChange = (newPage) =>
    updateUrlParams({ page: newPage, sorting, filters: columnFilters })
  const handleSortChange = (newSorting) =>
    updateUrlParams({ page: 1, sorting: newSorting, filters: columnFilters })
  const handleFilterChange = (newFilters) =>
    updateUrlParams({ page: 1, sorting, filters: newFilters })

  const handleUpdate = useCallback(async (opportunity, updateData) => {
    toast.promise(updateOpportunityAction(opportunity._id, updateData), {
      loading: 'Updating opportunity...',
      success: 'Opportunity updated successfully.',
      error: (err) => `Update failed: ${err.message}`,
    })
  }, [])

  const handleDeleteRequest = useCallback((opportunityId) => {
    setConfirmState({ isOpen: true, opportunityId })
  }, [])

  const confirmDelete = useCallback(async () => {
    const { opportunityId } = confirmState
    setConfirmState({ isOpen: false, opportunityId: null })
    toast.promise(deleteOpportunityAction(opportunityId), {
      loading: 'Deleting opportunity...',
      success: 'Opportunity deleted.',
      error: (err) => `Deletion failed: ${err.message}`,
    })
  }, [confirmState])

  const tableColumns = useMemo(
    () => columns(handleUpdate, handleDeleteRequest),
    [handleUpdate, handleDeleteRequest]
  )

  const onExport = (fileType) => {
    const sort = sorting[0]
      ? `${sorting[0].id}_${sorting[0].desc ? 'desc' : 'asc'}`
      : null
    return handleExport('opportunities', fileType, columnFilters, sort)
  }

  return (
    <>
      <div className="flex flex-col h-full">
        <PageHeader
          title="Opportunity Management"
          description={`Review and manage all ${total.toLocaleString()} actionable opportunities.`}
        >
          <ExportButton
            hasData={initialOpportunities && initialOpportunities.length > 0}
            onExport={onExport}
          />
        </PageHeader>
        <div className="mt-8 flex-grow min-h-0">
          <DataTable
            columns={tableColumns}
            data={initialOpportunities}
            page={page}
            setPage={handlePageChange}
            total={total}
            sorting={sorting}
            setSorting={handleSortChange}
            columnFilters={columnFilters}
            setColumnFilters={handleFilterChange}
            filterColumn="reachOutTo"
            filterPlaceholder="Filter by name, company..."
          />
        </div>
      </div>
      <ConfirmationDialog
        open={confirmState.isOpen}
        onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })}
        onConfirm={confirmDelete}
        title="Confirm Deletion"
        description="Are you sure you want to permanently delete this opportunity?"
        confirmText="Delete Opportunity"
      />
    </>
  )
}

```

## 📄 src/app/admin/opportunities/actions.js
*Lines: 24, Size: 680 Bytes*

```javascript
'use server'

import { revalidatePath } from 'next/cache'
import dbConnect from '@headlines/data-access/dbConnect/next'
import { updateOpportunity, deleteOpportunity } from '@headlines/data-access'

export async function updateOpportunityAction(opportunityId, updateData) {
  await dbConnect()
  const result = await updateOpportunity(opportunityId, updateData)
  if (result.success) {
    revalidatePath('/admin/opportunities')
  }
  return result
}

export async function deleteOpportunityAction(opportunityId) {
  await dbConnect()
  const result = await deleteOpportunity(opportunityId)
  if (result.success) {
    revalidatePath('/admin/opportunities')
  }
  return result
}

```

## 📄 src/app/admin/opportunities/columns.jsx
*Lines: 119, Size: 3.25 KB*

```jsx
// apps/client/src/app/admin/opportunities/columns.jsx (Multi-country support)
'use client'

import React from 'react'
import {
  Button,
  DataTableColumnHeader,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from '@/components/shared'
import { Trash2, Edit } from 'lucide-react'
import { format } from 'date-fns'
import { EditableCell } from '@/components/shared/elements/EditableCell'
import Link from 'next/link'

export const columns = (onUpdate, onDelete) => [
  {
    accessorKey: 'reachOutTo',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Contact Name" />
    ),
    cell: ({ row }) => (
      <EditableCell
        initialValue={row.original.reachOutTo}
        onSave={(newValue) => onUpdate(row.original, { reachOutTo: newValue })}
      />
    ),
    minSize: 200,
  },
  {
    accessorKey: 'contactDetails.company',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Company" />,
    cell: ({ row }) => (
      <EditableCell
        initialValue={row.original.contactDetails?.company}
        onSave={(newValue) =>
          onUpdate(row.original, { 'contactDetails.company': newValue })
        }
        placeholder="N/A"
      />
    ),
    size: 200,
  },
  {
    accessorKey: 'contactDetails.email',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Email" />,
    cell: ({ row }) => (
      <EditableCell
        initialValue={row.original.contactDetails?.email}
        onSave={(newValue) =>
          onUpdate(row.original, { 'contactDetails.email': newValue })
        }
        placeholder="N/A"
      />
    ),
    size: 250,
  },
  {
    accessorKey: 'likelyMMDollarWealth',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Wealth ($M)" />,
    cell: ({ row }) => (
      <EditableCell
        initialValue={row.original.likelyMMDollarWealth}
        onSave={(newValue) =>
          onUpdate(row.original, { likelyMMDollarWealth: Number(newValue) })
        }
      />
    ),
    size: 120,
  },
  {
    accessorKey: 'basedIn',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Country" />,
    cell: ({ row }) => (
      // MODIFIED: EditableCell now handles arrays via join/split
      <EditableCell
        initialValue={(row.original.basedIn || []).join(', ')}
        onSave={(newValue) =>
          onUpdate(row.original, {
            basedIn: newValue
              .split(',')
              .map((s) => s.trim())
              .filter(Boolean),
          })
        }
        placeholder="Add countries..."
      />
    ),
    size: 150,
  },
  {
    accessorKey: 'createdAt',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Created" />,
    cell: ({ row }) => format(new Date(row.original.createdAt), 'dd MMM yyyy, HH:mm'),
    size: 180,
  },
  {
    id: 'actions',
    cell: ({ row }) => (
      <div className="text-right">
        <Button
          variant="ghost"
          size="icon"
          className="h-8 w-8 text-muted-foreground hover:text-red-500"
          onClick={() => onDelete(row.original._id)}
        >
          <Trash2 className="h-4 w-4" />
        </Button>
      </div>
    ),
    size: 80,
    enableResizing: false,
  },
]

```

## 📄 src/app/admin/opportunities/page.jsx
*Lines: 29, Size: 924 Bytes*

```jsx
// apps/client/src/app/admin/opportunities/page.jsx
import { getOpportunities } from '@headlines/data-access'
import OpportunitiesClientPage from './OpportunitiesClientPage' // New client component

export const dynamic = 'force-dynamic'

export default async function OpportunitiesPage({ searchParams }) {
  const page = parseInt(searchParams.page || '1', 10)
  const sort = searchParams.sort || null
  const columnFilters = searchParams.filters ? JSON.parse(searchParams.filters) : []

  const filters = columnFilters.reduce((acc, filter) => {
    if (filter.value) {
      const key = filter.id === 'reachOutTo' ? 'q' : filter.id
      acc[key] = filter.value
    }
    return acc
  }, {})

  const result = await getOpportunities({ page, filters, sort })

  return (
    <OpportunitiesClientPage
      initialOpportunities={result.success ? result.data : []}
      total={result.success ? result.total : 0}
    />
  )
}

```

## 📄 src/app/admin/page.js
*Lines: 10, Size: 267 Bytes*

```javascript
// File: apps/client/src/app/admin/page.js

import { redirect } from 'next/navigation'

export default function AdminRootPage() {
  // This ensures that anyone navigating to /admin is immediately
  // sent to the main dashboard page.
  redirect('/admin/dashboard')
}

```

## 📄 src/app/admin/runs/[runId]/page.jsx
*Lines: 252, Size: 8.09 KB*

```jsx
'use client'

export const dynamic = 'force-dynamic'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { motion } from 'framer-motion'
import {
  Loader2,
  ServerCrash,
  CheckCircle2,
  AlertTriangle,
  BotMessageSquare,
  Newspaper,
  Users,
  Rss,
  ArrowLeft,
  Database,
  Globe,
  BookOpen,
} from 'lucide-react'
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  Button,
  Badge,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/shared'
import { format } from 'date-fns'

const StatCard = ({ title, value, icon }) => (
  <Card>
    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
      <CardTitle className="text-sm font-medium text-muted-foreground">{title}</CardTitle>
      {icon}
    </CardHeader>
    <CardContent>
      <div className="text-2xl font-bold">{value}</div>
    </CardContent>
  </Card>
)

const EnrichmentSourceIcons = ({ sources = [] }) => {
  const iconMap = {
    rag_db: { icon: Database, tooltip: 'RAG / Historical DB' },
    wikipedia: { icon: Globe, tooltip: 'Wikipedia' },
    news_api: { icon: BookOpen, tooltip: 'NewsAPI' },
  }
  return (
    <div className="flex items-center gap-2">
      <TooltipProvider>
        {sources.map((sourceKey) => {
          const IconComponent = iconMap[sourceKey]?.icon
          if (!IconComponent) return null
          return (
            <Tooltip key={sourceKey}>
              <TooltipTrigger>
                <IconComponent className="h-4 w-4 text-muted-foreground" />
              </TooltipTrigger>
              <TooltipContent>
                <p>Enriched with {iconMap[sourceKey].tooltip}</p>
              </TooltipContent>
            </Tooltip>
          )
        })}
      </TooltipProvider>
    </div>
  )
}

const VerdictCard = ({ items, title }) => (
  <Card>
    <CardHeader>
      <CardTitle>{title}</CardTitle>
    </CardHeader>
    <CardContent className="space-y-3">
      {items && items.length > 0 ? (
        items.map((item, index) => {
          const quality = item.quality?.toLowerCase() || 'n/a'
          let colorClass = 'bg-gray-500/20 text-gray-400 border-gray-500/30'
          if (quality === 'excellent' || quality === 'good')
            colorClass = 'bg-green-500/20 text-green-400 border-green-500/30'
          if (quality === 'poor' || quality === 'irrelevant')
            colorClass = 'bg-red-500/20 text-red-400 border-red-500/30'
          return (
            <div key={index} className="text-sm p-3 rounded-md bg-secondary">
              <div className="flex justify-between items-start">
                <p className="font-semibold pr-4">{item.identifier}</p>
                <Badge className={`capitalize ${colorClass}`}>{item.quality}</Badge>
              </div>
              <p className="text-xs text-muted-foreground mt-1 italic">
                `{item.commentary}`
              </p>
              {item.enrichmentSources && (
                <div className="mt-2 pt-2 border-t border-border">
                  <EnrichmentSourceIcons sources={item.enrichmentSources} />
                </div>
              )}
            </div>
          )
        })
      ) : (
        <p className="text-sm text-muted-foreground">
          No {title.toLowerCase()} were judged in this run.
        </p>
      )}
    </CardContent>
  </Card>
)

export default function RunDetailsPage({ params }) {
  const { runId } = params
  const [verdict, setVerdict] = useState(null)
  const [summary, setSummary] = useState(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState(null)

  useEffect(() => {
    if (!runId) return

    async function fetchData() {
      try {
        const verdictRes = await fetch(`/api-admin/run-verdicts/${runId}`)
        if (!verdictRes.ok)
          throw new Error(`API Error: ${verdictRes.status} ${verdictRes.statusText}`)
        const verdictData = await verdictRes.json()
        if (verdictData.error) throw new Error(verdictData.error)
        setVerdict(verdictData.verdict)

        if (!verdictData.verdict.judgeVerdict) {
          setSummary('No judge verdict was generated for this run.')
          return
        }

        const summaryRes = await fetch('/api-admin/ai-admin/executive-summary', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            judgeVerdict: verdictData.verdict.judgeVerdict,
            freshHeadlinesFound: verdictData.verdict.runStats.freshHeadlinesFound,
          }),
        })
        const summaryData = await summaryRes.json()
        if (summaryData.summary) setSummary(summaryData.summary)
      } catch (err) {
        setError(err.message)
      } finally {
        setIsLoading(false)
      }
    }

    fetchData()
  }, [runId])

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <Loader2 className="w-12 h-12 animate-spin text-primary" />
      </div>
    )
  }
  if (error) {
    return (
      <div className="p-8 rounded-lg bg-destructive/10 border border-destructive/50 text-center">
        <ServerCrash className="w-12 h-12 mx-auto text-destructive mb-4" />
        <h1 className="text-2xl font-bold">Failed to Load Run Details</h1>
        <p className="text-destructive-foreground/80 mt-2">{error}</p>
      </div>
    )
  }

  const runDate = new Date(verdict.createdAt).toLocaleString()
  const isSuccess = !verdict.runStats.errors || verdict.runStats.errors.length === 0

  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
      <Button asChild variant="ghost" className="mb-4">
        <Link href="/admin/dashboard">
          <ArrowLeft className="mr-2 h-4 w-4" /> Back to Dashboard
        </Link>
      </Button>
      <Card className="mb-8">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-2xl">Pipeline Run Details</CardTitle>
              <CardDescription>{runDate}</CardDescription>
            </div>
            {isSuccess ? (
              <Badge className="bg-green-500/20 text-green-400 border-green-500/30 text-base">
                <CheckCircle2 className="mr-2 h-4 w-4" /> Success
              </Badge>
            ) : (
              <Badge variant="destructive" className="text-base">
                <AlertTriangle className="mr-2 h-4 w-4" /> Failed
              </Badge>
            )}
          </div>
        </CardHeader>
        <CardContent className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          <StatCard
            title="Headlines Found"
            value={verdict.runStats.freshHeadlinesFound}
            icon={<Newspaper className="h-5 w-5 text-muted-foreground" />}
          />
          <StatCard
            title="Events Synthesized"
            value={verdict.runStats.eventsSynthesized}
            icon={<Rss className="h-5 w-5 text-muted-foreground" />}
          />
          <StatCard
            title="Opportunities Generated"
            value={(verdict.generatedOpportunities || []).length}
            icon={<Users className="h-5 w-5 text-muted-foreground" />}
          />
          <StatCard
            title="Errors"
            value={verdict.runStats.errors?.length || 0}
            icon={<AlertTriangle className="h-5 w-5 text-muted-foreground" />}
          />
        </CardContent>
      </Card>
      <Card className="mb-8">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BotMessageSquare className="h-6 w-6 text-primary" /> AI Executive Summary
          </CardTitle>
        </CardHeader>
        <CardContent className="text-muted-foreground italic">
          {summary ? `"${summary}"` : <Loader2 className="h-5 w-5 animate-spin" />}
        </CardContent>
      </Card>
      <div className="grid gap-8 md:grid-cols-2">
        <VerdictCard
          items={verdict.judgeVerdict?.event_judgements || []}
          title="Judged Events"
        />
        <VerdictCard
          items={verdict.judgeVerdict?.opportunity_judgements || []}
          title="Judged Opportunities"
        />
      </div>
    </motion.div>
  )
}

```

## 📄 src/app/admin/scraper-ide/page.jsx
*Lines: 222, Size: 7.46 KB*

```jsx
'use client'

export const dynamic = 'force-dynamic'

import { useState, useMemo, useCallback } from 'react'
import {
  PageHeader,
  Button,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  ScrollArea,
  Textarea,
} from '@/components/shared'
import { Loader2, TestTube2, Newspaper, FileText } from 'lucide-react'
import { toast } from 'sonner'
import { useSources } from './useSources'
// We need a hook to get the list of all countries for the first dropdown
import { useCountries } from './useCountries'

async function performScrape(payload) {
  const res = await fetch('/api-admin/scrape', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload),
  })
  if (!res.ok) {
    const errorData = await res.json()
    throw new Error(errorData.error || 'Scraping failed on the server.')
  }
  return res.json()
}

export default function ScraperIdePage() {
  const { countries, isLoading: isLoadingCountries } = useCountries()
  const [selectedCountry, setSelectedCountry] = useState('')
  const [selectedSourceId, setSelectedSourceId] = useState('')

  // The useSources hook is now dependent on the selected country
  const { sources, isLoading: isLoadingSources } = useSources(selectedCountry)

  const [isScraping, setIsScraping] = useState(false)
  const [scrapeResults, setScrapeResults] = useState({ headlines: [], content: '' })

  const selectedSource = useMemo(
    () => sources.find((s) => s._id === selectedSourceId),
    [sources, selectedSourceId]
  )

  const handleCountryChange = (country) => {
    setSelectedCountry(country)
    setSelectedSourceId('') // Reset source selection when country changes
    setScrapeResults({ headlines: [], content: '' }) // Clear results
  }

  const handleScrapeHeadlines = useCallback(async () => {
    if (!selectedSourceId || !selectedSource) return
    setIsScraping(true)
    setScrapeResults({ headlines: [], content: '' })
    const toastId = toast.loading(`Scraping headlines for ${selectedSource.name}...`)
    try {
      const result = await performScrape({ sourceId: selectedSourceId })
      if (result.success) {
        toast.success(`Found ${result.resultCount} headlines.`, { id: toastId })
        setScrapeResults({ headlines: result.articles, content: '' })
      } else {
        throw new Error(result.error)
      }
    } catch (error) {
      toast.error('Scrape failed', { id: toastId, description: error.message })
    } finally {
      setIsScraping(false)
    }
  }, [selectedSourceId, selectedSource])

  const handleScrapeContent = useCallback(
    async (articleLink) => {
      if (!selectedSourceId) return
      setIsScraping(true)
      setScrapeResults((prev) => ({ ...prev, content: 'Loading...' }))
      const toastId = toast.loading(`Scraping content for article...`)
      try {
        const result = await performScrape({ sourceId: selectedSourceId, articleLink })
        if (result.success) {
          toast.success(`Content scrape successful.`, { id: toastId })
          setScrapeResults((prev) => ({ ...prev, content: result.content }))
        } else {
          throw new Error(result.content)
        }
      } catch (error) {
        toast.error('Content scrape failed', { id: toastId, description: error.message })
        setScrapeResults((prev) => ({ ...prev, content: `Error: ${error.message}` }))
      } finally {
        setIsScraping(false)
      }
    },
    [selectedSourceId]
  )

  return (
    <div className="flex flex-col h-full">
      <PageHeader
        title="Scraper IDE"
        description="A live testing environment to scrape headlines and article content from any configured source."
      />

      <Card className="mt-8">
        <CardContent className="p-4 flex flex-col sm:flex-row items-center gap-4">
          <Select
            value={selectedCountry}
            onValueChange={handleCountryChange}
            disabled={isScraping}
          >
            <SelectTrigger className="w-full sm:w-[250px]">
              <SelectValue placeholder="Step 1: Select a Country..." />
            </SelectTrigger>
            <SelectContent>
              {isLoadingCountries ? (
                <SelectItem value="loading" disabled>
                  Loading countries...
                </SelectItem>
              ) : (
                countries.map((country) => (
                  <SelectItem key={country._id} value={country.name}>
                    {country.name}
                  </SelectItem>
                ))
              )}
            </SelectContent>
          </Select>

          <Select
            value={selectedSourceId}
            onValueChange={setSelectedSourceId}
            disabled={isScraping || !selectedCountry}
          >
            <SelectTrigger className="w-full sm:w-[350px]">
              <SelectValue placeholder="Step 2: Select a Source..." />
            </SelectTrigger>
            <SelectContent>
              {isLoadingSources ? (
                <SelectItem value="loading" disabled>
                  Loading sources...
                </SelectItem>
              ) : (
                sources.map((source) => (
                  <SelectItem key={source._id} value={source._id}>
                    {source.name}
                  </SelectItem>
                ))
              )}
            </SelectContent>
          </Select>

          <Button
            onClick={handleScrapeHeadlines}
            disabled={!selectedSourceId || isScraping}
          >
            {isScraping ? (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            ) : (
              <TestTube2 className="mr-2 h-4 w-4" />
            )}
            Scrape Headlines
          </Button>
        </CardContent>
      </Card>

      <div className="mt-4 grid grid-cols-1 lg:grid-cols-2 gap-4 flex-grow min-h-0">
        {/* ... The rest of the component (Headlines and Content cards) remains the same ... */}
        <Card className="flex flex-col">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Newspaper className="h-5 w-5" /> Scraped Headlines (
              {scrapeResults.headlines.length})
            </CardTitle>
          </CardHeader>
          <CardContent className="flex-grow overflow-hidden">
            <ScrollArea className="h-full">
              <ul className="space-y-2 pr-4">
                {scrapeResults.headlines.map((article, i) => (
                  <li key={article.link || i}>
                    <Button
                      variant="ghost"
                      className="w-full h-auto text-left justify-start p-2 hover:bg-accent"
                      onClick={() => handleScrapeContent(article.link)}
                    >
                      {article.headline}
                    </Button>
                  </li>
                ))}
              </ul>
            </ScrollArea>
          </CardContent>
        </Card>

        <Card className="flex flex-col">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileText className="h-5 w-5" /> Article Content
            </CardTitle>
          </CardHeader>
          <CardContent className="flex-grow">
            <Textarea
              readOnly
              value={scrapeResults.content}
              placeholder="Click a headline on the left to scrape and display its content here."
              className="h-full resize-none bg-muted/50"
            />
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

```

## 📄 src/app/admin/scraper-ide/useCountries.js
*Lines: 30, Size: 662 Bytes*

```javascript
'use client'

import { useQuery } from '@tanstack/react-query'
import { toast } from 'sonner'

async function fetchCountries() {
  const res = await fetch('/api-admin/countries')
  if (!res.ok) {
    const errorData = await res.json()
    throw new Error(errorData.error || 'Failed to fetch countries from API')
  }
  return res.json()
}

export function useCountries() {
  const { data, isLoading, isError, error } = useQuery({
    queryKey: ['admin-countries'],
    queryFn: fetchCountries,
  })

  if (isError) {
    toast.error('Could not load countries', { description: error.message })
  }

  return {
    countries: data?.data || [],
    isLoading,
  }
}

```

## 📄 src/app/admin/scraper-ide/useSources.js
*Lines: 33, Size: 957 Bytes*

```javascript
'use client'

import { useQuery } from '@tanstack/react-query'
import { toast } from 'sonner'

// The fetcher function now accepts a country parameter
async function fetchSources(country) {
  const res = await fetch(`/api-admin/sources?country=${encodeURIComponent(country)}`)
  if (!res.ok) {
    const errorData = await res.json()
    throw new Error(errorData.error || 'Failed to fetch sources from API')
  }
  return res.json()
}

export function useSources(country) {
  const { data, isLoading, isError, error } = useQuery({
    queryKey: ['admin-sources', country], // The country is now part of the query key
    queryFn: () => fetchSources(country),
    enabled: !!country, // CRITICAL: Only run the query if a country is selected
    staleTime: 5 * 60 * 1000, // Cache for 5 minutes
  })

  if (isError) {
    toast.error('Could not load sources', { description: error.message })
  }

  return {
    sources: data?.data || [],
    isLoading,
  }
}

```

## 📄 src/app/admin/settings/page.jsx
*Lines: 87, Size: 2.5 KB*

```jsx
'use client' // This page needs client-side state management for the form

export const dynamic = 'force-dynamic'

import { useState, useEffect, useCallback } from 'react'
import { motion } from 'framer-motion'
import { PageHeader } from '@/components/shared'
import SettingsForm from './settings-form'
import { Loader2 } from 'lucide-react'
import { toast } from 'sonner'

// Client-side API functions
async function getSettingsClient() {
  const res = await fetch('/api-admin/settings')
  if (!res.ok) throw new Error('Failed to fetch settings')
  return res.json()
}

async function updateSettingsClient(updatedSettings) {
  const res = await fetch('/api-admin/settings', {
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(updatedSettings),
  })
  if (!res.ok) {
    const errorData = await res.json()
    throw new Error(errorData.error || 'Failed to update settings')
  }
  return res.json()
}

export default function SettingsPage() {
  const [settings, setSettings] = useState([])
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    getSettingsClient()
      .then((result) => {
        if (result.success) {
          setSettings(result.data)
        } else {
          toast.error('Failed to load settings: ' + result.error)
          setSettings([])
        }
      })
      .catch((err) => toast.error('Failed to load settings: ' + err.message))
      .finally(() => setIsLoading(false))
  }, [])

  const handleSave = useCallback(async (updatedSettings) => {
    const toastId = toast.loading('Saving settings...')
    try {
      await updateSettingsClient(updatedSettings)
      setSettings(updatedSettings) // Update local state with the saved data
      toast.success('Settings saved successfully.', { id: toastId })
      return true
    } catch (error) {
      toast.error(`Error: ${error.message}`, { id: toastId })
      return false
    }
  }, [])

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <Loader2 className="w-12 h-12 animate-spin text-primary" />
      </div>
    )
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <PageHeader
        title="Pipeline Settings"
        description="Dynamically adjust thresholds and parameters for the backend scraper pipeline."
      />
      <div className="mt-8">
        <SettingsForm initialSettings={settings} onSave={handleSave} />
      </div>
    </motion.div>
  )
}

```

## 📄 src/app/admin/settings/settings-form.jsx
*Lines: 155, Size: 4.37 KB*

```jsx
'use client'

import { useState, useMemo } from 'react'
import { motion } from 'framer-motion'
import {
  Card,
  CardContent,
  CardFooter,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
  Label,
  Input,
  Switch,
  Button,
} from '@/components/shared'
import { Save, Loader2 } from 'lucide-react'

const SettingInput = ({ setting, onChange }) => {
  const { type, key, value } = setting
  switch (type) {
    case 'number':
      return (
        <Input
          type="number"
          id={key}
          value={value}
          onChange={(e) => onChange(key, parseFloat(e.target.value))}
          className="bg-secondary"
        />
      )
    case 'boolean':
      return (
        <Switch
          id={key}
          checked={value}
          onCheckedChange={(checked) => onChange(key, checked)}
        />
      )
    default:
      return (
        <Input
          type="text"
          id={key}
          value={value}
          onChange={(e) => onChange(key, e.target.value)}
          className="bg-secondary"
        />
      )
  }
}

const SettingRow = ({ setting, onChange }) => (
  <div key={setting.key} className="grid grid-cols-3 items-center gap-4 py-2">
    <div className="col-span-2">
      <Label htmlFor={setting.key} className="font-mono text-sm">
        {setting.key.replace(/_/g, ' ')}
      </Label>
      <p className="text-sm text-muted-foreground">{setting.description}</p>
    </div>
    <SettingInput setting={setting} onChange={onChange} />
  </div>
)

export default function SettingsForm({ initialSettings = [], onSave }) {
  const [settings, setSettings] = useState(initialSettings)
  const [isSaving, setIsSaving] = useState(false)
  const [isDirty, setIsDirty] = useState(false)

  const { thresholdSettings, modelSettings, promptSettings } = useMemo(() => {
    const thresholds = [],
      models = [],
      prompts = []
    ;(settings || []).forEach((s) => {
      if (s.key.includes('_THRESHOLD') || s.key.includes('MIN_')) {
        thresholds.push(s)
      } else if (s.key.includes('LLM_MODEL')) {
        models.push(s)
      } else {
        prompts.push(s)
      }
    })
    return {
      thresholdSettings: thresholds,
      modelSettings: models,
      promptSettings: prompts,
    }
  }, [settings])

  const handleChange = (key, value) => {
    setSettings((prev) => prev.map((s) => (s.key === key ? { ...s, value } : s)))
    setIsDirty(true)
  }

  const handleSaveClick = async () => {
    setIsSaving(true)
    const success = await onSave(settings)
    if (success) {
      setIsDirty(false)
    }
    setIsSaving(false)
  }

  return (
    <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }}>
      <Card>
        <CardContent className="pt-6">
          <Tabs defaultValue="thresholds">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="thresholds">Thresholds</TabsTrigger>
              <TabsTrigger value="ai_models">AI Models</TabsTrigger>
              <TabsTrigger value="prompt_params">Prompt Parameters</TabsTrigger>
            </TabsList>
            <TabsContent
              value="thresholds"
              className="mt-6 space-y-2 divide-y divide-border"
            >
              {thresholdSettings.map((setting) => (
                <SettingRow key={setting.key} setting={setting} onChange={handleChange} />
              ))}
            </TabsContent>
            <TabsContent
              value="ai_models"
              className="mt-6 space-y-2 divide-y divide-border"
            >
              {modelSettings.map((setting) => (
                <SettingRow key={setting.key} setting={setting} onChange={handleChange} />
              ))}
            </TabsContent>
            <TabsContent
              value="prompt_params"
              className="mt-6 space-y-2 divide-y divide-border"
            >
              {promptSettings.map((setting) => (
                <SettingRow key={setting.key} setting={setting} onChange={handleChange} />
              ))}
            </TabsContent>
          </Tabs>
        </CardContent>
        <CardFooter>
          <Button onClick={handleSaveClick} disabled={isSaving || !isDirty}>
            {isSaving ? (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            ) : (
              <Save className="mr-2 h-4 w-4" />
            )}
            Save Settings
          </Button>
        </CardFooter>
      </Card>
    </motion.div>
  )
}

```

## 📄 src/app/admin/users/UsersClientPage.jsx
*Lines: 135, Size: 4.1 KB*

```jsx
// apps/client/src/app/admin/users/UsersClientPage.jsx
'use client'

import { useState, useCallback, useMemo } from 'react'
import { toast } from 'sonner'
import {
  DataTable,
  Button,
  ConfirmationDialog,
  Sheet,
  SheetContent,
} from '@/components/shared'
import { PlusCircle } from 'lucide-react'
import { columns } from './columns'
import UserEditor from './user-editor'
import { updateUserAction, deleteUserAction, createUserAction } from './actions'
import { languageList } from '@headlines/utils-shared'

export default function UsersClientPage({ initialUsers, initialTotal, allCountries }) {
  const [users, setUsers] = useState(initialUsers)
  const [isEditorOpen, setIsEditorOpen] = useState(false)
  const [selectedId, setSelectedId] = useState(null)
  const [confirmState, setConfirmState] = useState({ isOpen: false, user: null })

  const handleAction = useCallback(async (user, action, data) => {
    if (action === 'delete') {
      setConfirmState({ isOpen: true, user })
      return
    }

    setUsers((prev) => prev.map((u) => (u._id === user._id ? { ...u, ...data } : u)))

    const result = await updateUserAction(user._id, data)
    if (!result.success) {
      toast.error(`Update failed: ${result.error}`)
      // Revert optimistic update on failure by reloading the page
      window.location.reload()
    }
  }, [])

  const confirmDelete = useCallback(async () => {
    const userToDelete = confirmState.user
    setConfirmState({ isOpen: false, user: null })
    if (!userToDelete) return

    const toastId = toast.loading('Deleting user...')
    const result = await deleteUserAction(userToDelete._id)

    if (!result.success) {
      toast.error(`Deletion failed: ${result.error}`, { id: toastId })
    } else {
      toast.success('User deleted successfully.', { id: toastId })
    }
  }, [confirmState.user])

  const handleSaveEditor = async (userData) => {
    const isNew = !userData._id
    const action = isNew
      ? createUserAction
      : (data) => updateUserAction(userData._id, data)
    const toastId = toast.loading(isNew ? 'Creating user...' : 'Updating user...')

    const result = await action(userData)

    if (result.success) {
      toast.success(`User ${isNew ? 'created' : 'updated'}.`, { id: toastId })
      setIsEditorOpen(false)
    } else {
      toast.error(`Failed to save: ${result.error}`, { id: toastId })
    }
  }

  const activeUserData = useMemo(() => {
    if (selectedId === 'new')
      return {
        _id: null,
        email: '',
        firstName: '',
        lastName: '',
        role: 'user',
        isActive: true,
        countries: [],
        password: '',
        emailNotificationsEnabled: true,
        pushNotificationsEnabled: true,
        subscriptionTier: 'free',
        language: 'English',
      }
    return users.find((u) => u._id.toString() === selectedId) || null
  }, [selectedId, users])

  return (
    <>
      <div className="flex justify-end">
        <Button
          onClick={() => {
            setSelectedId('new')
            setIsEditorOpen(true)
          }}
        >
          <PlusCircle className="mr-2 h-4 w-4" /> Add New User
        </Button>
      </div>
      <div className="mt-8 flex-grow min-h-0">
        <DataTable
          columns={columns((id) => {
            setSelectedId(id)
            setIsEditorOpen(true)
          }, handleAction)}
          data={users}
        />
      </div>
      <Sheet open={isEditorOpen} onOpenChange={setIsEditorOpen}>
        <SheetContent className="w-full sm:max-w-lg p-0">
          <UserEditor
            key={selectedId}
            user={activeUserData}
            onSave={handleSaveEditor}
            onCancel={() => setIsEditorOpen(false)}
            availableCountries={allCountries}
            availableLanguages={languageList}
          />
        </SheetContent>
      </Sheet>
      <ConfirmationDialog
        open={confirmState.isOpen}
        onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })}
        onConfirm={confirmDelete}
        title="Confirm Deletion"
        description={`Are you sure you want to delete user ${confirmState.user?.email}?`}
      />
    </>
  )
}

```

## 📄 src/app/admin/users/actions.js
*Lines: 68, Size: 1.75 KB*

```javascript
// apps/client/src/app/admin/users/actions.js
'use server'

import { revalidatePath } from 'next/cache'
import dbConnect from '@headlines/data-access/dbConnect/next'
import {
  updateSubscriber,
  deleteSubscriber,
  createSubscriber,
  updateSubscriberPassword,
} from '@headlines/data-access'
import {
  userCreateSchema,
  userUpdateSchema,
} from '@headlines/models/schemas' // Import Zod schemas

export async function updateUserAction(userId, updateData) {
  const validation = userUpdateSchema.safeParse(updateData)
  if (!validation.success) {
    return { success: false, error: 'Invalid data.', details: validation.error.flatten() }
  }
  const validatedData = validation.data

  await dbConnect()

  if (validatedData.password) {
    const passwordResult = await updateSubscriberPassword(userId, validatedData.password)
    if (!passwordResult.success) {
      return passwordResult
    }
    delete validatedData.password
  }

  if (Object.keys(validatedData).length > 0) {
    const result = await updateSubscriber(userId, validatedData)
    if (result.success) {
      revalidatePath('/admin/users')
    }
    return result
  }

  revalidatePath('/admin/users')
  return { success: true }
}

export async function deleteUserAction(userId) {
  await dbConnect()
  const result = await deleteSubscriber(userId)
  if (result.success) {
    revalidatePath('/admin/users')
  }
  return result
}

export async function createUserAction(userData) {
  const validation = userCreateSchema.safeParse(userData)
  if (!validation.success) {
    return { success: false, error: 'Invalid data.', details: validation.error.flatten() }
  }

  await dbConnect()
  const result = await createSubscriber(validation.data)
  if (result.success) {
    revalidatePath('/admin/users')
  }
  return result
}

```

## 📄 src/app/admin/users/columns.jsx
*Lines: 169, Size: 4.76 KB*

```jsx
// File: apps/client/src/app/admin/users/columns.jsx (version 3.0 - Server Actions)
'use client'

import React from 'react'
import {
  Button,
  DataTableColumnHeader,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  EditableCell,
} from '@/components/shared'
import { UserCheck, UserX, ShieldCheck, User, Globe, Edit, Trash2 } from 'lucide-react'
import { SUBSCRIPTION_TIERS } from '@headlines/models/client'

export const columns = (handleEdit, handleAction) => [
  {
    accessorKey: 'email',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Email" />,
    cell: ({ row }) => {
      const user = row.original
      return (
        <div className="flex flex-col">
          <span className="font-medium">{user.email}</span>
          {/* --- START OF THE FIX --- */}
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <EditableCell
              initialValue={user.firstName}
              onSave={(newValue) =>
                handleAction(user, 'updateFirstName', { firstName: newValue })
              }
              placeholder="First Name..."
            />
            <EditableCell
              initialValue={user.lastName}
              onSave={(newValue) =>
                handleAction(user, 'updateLastName', { lastName: newValue })
              }
              placeholder="Last Name..."
            />
          </div>
          {/* --- END OF THE FIX --- */}
        </div>
      )
    },
  },
  {
    accessorKey: 'isActive',
    header: 'Status',
    cell: ({ row }) => {
      const user = row.original
      return (
        <Button
          variant="ghost"
          size="sm"
          className={`flex items-center gap-2 ${user.isActive ? 'text-green-500' : 'text-muted-foreground'}`}
          onClick={() => handleAction(user, 'toggleActive', { isActive: !user.isActive })}
        >
          {user.isActive ? (
            <UserCheck className="h-4 w-4" />
          ) : (
            <UserX className="h-4 w-4" />
          )}
          {user.isActive ? 'Active' : 'Inactive'}
        </Button>
      )
    },
  },
  {
    accessorKey: 'subscriptionTier',
    header: 'Tier',
    cell: ({ row }) => {
      const user = row.original
      return (
        <Select
          value={user.subscriptionTier}
          onValueChange={(newTier) =>
            handleAction(user, 'updateTier', { subscriptionTier: newTier })
          }
        >
          <SelectTrigger className="w-32 h-8 text-xs capitalize bg-transparent border-none focus:ring-0 shadow-none">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            {SUBSCRIPTION_TIERS.map((tier) => (
              <SelectItem key={tier} value={tier} className="capitalize">
                {tier}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      )
    },
  },
  {
    accessorKey: 'role',
    header: 'Role',
    cell: ({ row }) => {
      const user = row.original
      return (
        <Button
          variant="ghost"
          size="sm"
          className={`flex items-center gap-2 capitalize ${user.role === 'admin' ? 'text-yellow-400' : 'text-muted-foreground'}`}
          onClick={() =>
            handleAction(user, 'toggleRole', {
              role: user.role === 'admin' ? 'user' : 'admin',
            })
          }
        >
          {user.role === 'admin' ? (
            <ShieldCheck className="h-4 w-4" />
          ) : (
            <User className="h-4 w-4" />
          )}
          {user.role}
        </Button>
      )
    },
  },
  {
    accessorKey: 'countries',
    header: 'Countries',
    cell: ({ row }) => {
      const user = row.original
      if (user.role === 'admin')
        return (
          <div className="flex items-center gap-2 text-muted-foreground">
            <Globe className="h-4 w-4" /> All Countries
          </div>
        )
      const count = user.countries?.length || 0
      return (
        <div className="flex items-center gap-2 text-muted-foreground">
          <Globe className="h-4 w-4" /> {count} countries
        </div>
      )
    },
  },
  {
    id: 'actions',
    cell: ({ row }) => {
      const user = row.original
      return (
        <div className="text-right flex justify-end items-center">
          <Button
            variant="ghost"
            size="icon"
            className="h-8 w-8"
            onClick={() => handleEdit(user._id.toString())}
          >
            <Edit className="h-4 w-4" />
          </Button>
          <Button
            variant="ghost"
            size="icon"
            className="h-8 w-8 text-red-500/80 hover:text-red-500"
            onClick={() => handleAction(user, 'delete')}
          >
            <Trash2 className="h-4 w-4" />
          </Button>
        </div>
      )
    },
  },
]

```

## 📄 src/app/admin/users/country-subscription-manager.jsx
*Lines: 114, Size: 3.77 KB*

```jsx
// File: apps/client/src/app/admin/users/country-subscription-manager.jsx (version 1.0 - New File)
'use client'

import { useState } from 'react'
import { Popover, PopoverContent, PopoverTrigger } from '@/components/shared'
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from '@/components/shared'
import { Button } from '@/components/shared'
import { Switch } from '@/components/shared'
import { Check, ChevronsUpDown, X } from 'lucide-react'
import { cn } from '@headlines/utils-shared'

export default function CountrySubscriptionManager({
  availableCountries,
  subscriptions,
  onChange,
}) {
  const [open, setOpen] = useState(false)

  const handleAddCountry = (countryName) => {
    if (!subscriptions.some((sub) => sub.name === countryName)) {
      const newSubscriptions = [...subscriptions, { name: countryName, active: true }]
      onChange(newSubscriptions.sort((a, b) => a.name.localeCompare(b.name)))
    }
    setOpen(false)
  }

  const handleRemoveCountry = (countryName) => {
    const newSubscriptions = subscriptions.filter((sub) => sub.name !== countryName)
    onChange(newSubscriptions)
  }

  const handleToggleActive = (countryName, isActive) => {
    const newSubscriptions = subscriptions.map((sub) =>
      sub.name === countryName ? { ...sub, active: isActive } : sub
    )
    onChange(newSubscriptions)
  }

  const subscribedCountryNames = new Set(subscriptions.map((s) => s.name))
  const addableCountries = availableCountries
    .filter((c) => !subscribedCountryNames.has(c))
    .sort()

  return (
    <div className="space-y-2">
      <div className="space-y-2">
        {subscriptions.length > 0 ? (
          subscriptions.map((sub) => (
            <div
              key={sub.name}
              className="flex items-center justify-between p-2 bg-black/20 rounded-md"
            >
              <span className="font-medium text-sm">{sub.name}</span>
              <div className="flex items-center gap-2">
                <Switch
                  checked={sub.active}
                  onCheckedChange={(checked) => handleToggleActive(sub.name, checked)}
                />
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-7 w-7"
                  onClick={() => handleRemoveCountry(sub.name)}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>
          ))
        ) : (
          <div className="text-center text-sm text-muted-foreground p-4 border border-dashed border-white/10 rounded-md">
            No countries subscribed.
          </div>
        )}
      </div>
      <Popover open={open} onOpenChange={setOpen}>
        <PopoverTrigger asChild>
          <Button variant="outline" role="combobox" className="w-full justify-between">
            Add country subscription...
            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
          <Command>
            <CommandInput placeholder="Search countries..." />
            <CommandList>
              <CommandEmpty>No countries found.</CommandEmpty>
              <CommandGroup>
                {addableCountries.map((country) => (
                  <CommandItem
                    key={country}
                    value={country}
                    onSelect={() => handleAddCountry(country)}
                  >
                    <Check className={cn('mr-2 h-4 w-4', 'opacity-0')} />
                    {country}
                  </CommandItem>
                ))}
              </CommandGroup>
            </CommandList>
          </Command>
        </PopoverContent>
      </Popover>
    </div>
  )
}

```

## 📄 src/app/admin/users/page.jsx
*Lines: 42, Size: 1.1 KB*

```jsx
export const dynamic = 'force-dynamic'

import { PageHeader } from '@/components/shared'
import { getAllSubscribers, getAllCountries } from '@headlines/data-access'
import UsersClientPage from './UsersClientPage'

export default async function UsersPage() {
  const [usersResult, countriesResult] = await Promise.all([
    getAllSubscribers({}),
    getAllCountries(),
  ])

  if (!usersResult.success || !countriesResult.success) {
    return (
      <div>
        <h1>Error loading data</h1>
        <p>{usersResult.error || countriesResult.error}</p>
      </div>
    )
  }

  const users = usersResult.data
  const totalUsers = usersResult.total
  const allCountries = countriesResult.data
    .filter((c) => c.status === 'active')
    .map((c) => c.name)

  return (
    <div className="flex flex-col h-full">
      <PageHeader
        title="User Management"
        description={`Manage all ${totalUsers.toLocaleString()} system users.`}
      />
      <UsersClientPage
        initialUsers={JSON.parse(JSON.stringify(users))}
        initialTotal={totalUsers}
        allCountries={allCountries}
      />
    </div>
  )
}

```

## 📄 src/app/admin/users/user-editor.jsx
*Lines: 181, Size: 5.8 KB*

```jsx
// apps/client/src/app/admin/users/user-editor.jsx (version 3.0.0)
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import {
  Button,
  CardFooter,
  Input,
  Label,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  Separator,
} from '@/components/shared'
import { toast } from 'sonner'
import { Save, Loader2, UserPlus, X } from 'lucide-react'
import CountrySubscriptionManager from './country-subscription-manager'
import { createUserAction, updateUserAction } from './actions'
import { SUBSCRIPTION_TIERS } from '@headlines/models/client'
// ILLUSTRATION: In a future refactor, Zod schemas from the new central location
// could be imported for robust client-side form validation.
// import { userFormSchema } from '@headlines/models/schemas'

const FormField = ({ id, label, children, description }) => (
  <div className="space-y-2">
    <Label htmlFor={id} className="text-sm font-medium text-muted-foreground pl-1">
      {label}
    </Label>
    {children}
    {description && <p className="text-xs text-muted-foreground pl-1">{description}</p>}
  </div>
)

export default function UserEditor({
  user,
  onSave,
  onCancel,
  availableCountries,
  availableLanguages,
}) {
  const [formData, setFormData] = useState(user)
  const [isSaving, setIsSaving] = useState(false)
  const [isDirty, setIsDirty] = useState(false)
  // ILLUSTRATION: State for validation errors could be added here.
  // const [errors, setErrors] = useState({});

  useEffect(() => {
    setFormData(user)
    setIsDirty(false)
    // setErrors({});
  }, [user])

  if (!user) return null

  const handleChange = (key, value) => {
    setFormData((prev) => ({ ...prev, [key]: value }))
    setIsDirty(true)
  }

  const handleSave = async () => {
    // ILLUSTRATION: Use Zod for client-side validation before sending.
    // const validation = userFormSchema.safeParse(formData);
    // if (!validation.success) {
    //   setErrors(validation.error.flatten().fieldErrors);
    //   toast.error("Please correct the errors before saving.");
    //   return;
    // }
    // setErrors({});

    setIsSaving(true)
    await onSave(formData)
    setIsSaving(false)
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="h-full flex flex-col"
    >
      <div className="flex justify-between items-center flex-shrink-0 p-6 border-b border-white/10">
        <div className="space-y-1">
          <h1 className="text-2xl font-bold tracking-tight flex items-center gap-2">
            {!user._id && <UserPlus />}
            {!user._id ? 'Create New User' : 'Edit User'}
          </h1>
          <p className="text-sm text-muted-foreground">
            {!user._id ? 'Provide details for the new user.' : formData.email}
          </p>
        </div>
        <Button variant="ghost" size="icon" onClick={onCancel}>
          <X className="h-4 w-4" />
        </Button>
      </div>
      <div className="flex-grow overflow-y-auto p-6 space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormField id="firstName" label="First Name">
            <Input
              value={formData.firstName || ''}
              onChange={(e) => handleChange('firstName', e.target.value)}
            />
          </FormField>
          <FormField id="lastName" label="Last Name">
            <Input
              value={formData.lastName || ''}
              onChange={(e) => handleChange('lastName', e.target.value)}
            />
          </FormField>
        </div>
        <FormField id="email" label="Email Address">
          <Input
            type="email"
            value={formData.email || ''}
            onChange={(e) => handleChange('email', e.target.value)}
            disabled={!!user._id}
          />
          {/* ILLUSTRATION: Display validation error message. */}
          {/* {errors.email && <p className="text-sm text-red-400 mt-1">{errors.email[0]}</p>} */}
        </FormField>
        <FormField
          id="password"
          label="Password"
          description={
            !user._id
              ? 'Required for new users.'
              : 'Leave blank to keep current password.'
          }
        >
          <Input
            type="password"
            autoComplete="new-password"
            value={formData.password || ''}
            onChange={(e) => handleChange('password', e.target.value)}
          />
        </FormField>
        <Separator />
        <h3 className="text-lg font-semibold leading-none tracking-tight">
          Subscription Details
        </h3>
        <FormField label="Subscription Tier">
          <Select
            value={formData.subscriptionTier}
            onValueChange={(v) => handleChange('subscriptionTier', v)}
          >
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {SUBSCRIPTION_TIERS.map((tier) => (
                <SelectItem key={tier} value={tier}>
                  {tier}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </FormField>
        <FormField label="Country Subscriptions">
          <CountrySubscriptionManager
            availableCountries={availableCountries}
            subscriptions={formData.countries || []}
            onChange={(newSubs) => handleChange('countries', newSubs)}
          />
        </FormField>
      </div>
      <CardFooter className="mt-auto border-t border-white/10 p-6 flex justify-end">
        <Button onClick={handleSave} disabled={!isDirty || isSaving}>
          {isSaving ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Save className="mr-2 h-4 w-4" />
          )}
          {isSaving ? 'Saving...' : 'Save Changes'}
        </Button>
      </CardFooter>
    </motion.div>
  )
}

```

## 📄 src/app/admin/watchlist/WatchlistClientPage.jsx
*Lines: 198, Size: 6.51 KB*

```jsx
// apps/client/src/app/admin/watchlist/WatchlistClientPage.jsx
'use client'

import { useState, useMemo, useCallback } from 'react'
import { usePathname, useRouter, useSearchParams } from 'next/navigation'
import {
  PageHeader,
  Button,
  Sheet,
  SheetContent,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
  ConfirmationDialog,
  DataTable,
} from '@/components/shared'
import { PlusCircle } from 'lucide-react'
import { toast } from 'sonner'
import { watchlistColumns, suggestionColumns } from './columns'
import WatchlistEditor from './watchlist-editor'
import {
  updateEntityAction,
  deleteEntityAction,
  processSuggestionAction,
} from './actions'

export default function WatchlistClientPage({
  initialWatchlist,
  total,
  initialSuggestions,
  availableCountries,
}) {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  const page = parseInt(searchParams.get('page') || '1', 10)
  const sortParam = searchParams.get('sort') || ''
  const filterParam = searchParams.get('filters') || '[]'

  const [suggestions, setSuggestions] = useState(initialSuggestions)
  const [isEditorOpen, setIsEditorOpen] = useState(false)
  const [selectedId, setSelectedId] = useState(null)
  const [confirmState, setConfirmState] = useState({ isOpen: false, entityId: null })
  const [sorting, setSorting] = useState(
    sortParam
      ? [{ id: sortParam.split('_')[0], desc: sortParam.split('_')[1] === 'desc' }]
      : []
  )
  const [columnFilters, setColumnFilters] = useState(JSON.parse(filterParam))

  const updateUrlParams = useCallback(
    ({ page, sorting, filters }) => {
      const params = new URLSearchParams(searchParams.toString())
      params.set('page', page.toString())
      if (sorting?.length > 0) {
        params.set('sort', `${sorting[0].id}_${sorting[0].desc ? 'desc' : 'asc'}`)
      } else {
        params.delete('sort')
      }
      if (filters?.length > 0) {
        params.set('filters', JSON.stringify(filters))
      } else {
        params.delete('filters')
      }
      router.replace(`${pathname}?${params.toString()}`, { scroll: false })
    },
    [pathname, router, searchParams]
  )

  const handlePageChange = (newPage) =>
    updateUrlParams({ page: newPage, sorting, filters: columnFilters })
  const handleSortChange = (newSorting) =>
    updateUrlParams({ page: 1, sorting: newSorting, filters: columnFilters })
  const handleFilterChange = (newFilters) =>
    updateUrlParams({ page: 1, sorting, filters: newFilters })

  const handleEdit = (id) => {
    setSelectedId(id)
    setIsEditorOpen(true)
  }

  const handleAdd = () => {
    setSelectedId('new')
    setIsEditorOpen(true)
  }

  const handleEntityUpdate = useCallback(async (entity, updateData) => {
    toast.promise(updateEntityAction(entity._id, updateData), {
      loading: 'Updating entity...',
      success: 'Entity updated.',
      error: (err) => `Update failed: ${err.message}`,
    })
  }, [])

  const handleSuggestionAction = async (suggestion, action) => {
    setSuggestions((prev) => prev.filter((s) => s._id !== suggestion._id)) // Optimistic removal
    toast.promise(processSuggestionAction(suggestion._id, action), {
      loading: `Processing suggestion "${suggestion.name}"...`,
      success: (result) => result.message,
      error: (err) => `Failed to ${action} suggestion: ${err.message}`,
    })
  }

  const handleDelete = (entityId) => setConfirmState({ isOpen: true, entityId })
  const confirmDelete = async () => {
    const { entityId } = confirmState
    setConfirmState({ isOpen: false, entityId: null })
    toast.promise(deleteEntityAction(entityId), {
      loading: 'Deleting entity...',
      success: 'Entity deleted.',
      error: (err) => `Deletion failed: ${err.message}`,
    })
  }

  const activeEntityData = useMemo(() => {
    if (selectedId === 'new')
      return {
        _id: null,
        name: '',
        type: 'company',
        status: 'candidate',
        context: '',
        country: '',
        searchTerms: [],
      }
    return initialWatchlist?.find((e) => e._id === selectedId) || null
  }, [selectedId, initialWatchlist])

  return (
    <>
      <PageHeader
        title="Watchlist Management"
        description={`Manage ${total.toLocaleString()} entities and review ${suggestions.length} AI-generated suggestions.`}
      >
        <Button onClick={handleAdd}>
          <PlusCircle className="mr-2 h-4 w-4" /> Add New Entity
        </Button>
      </PageHeader>
      <div className="mt-8 flex-grow min-h-0">
        <Tabs defaultValue="watchlist" className="h-full flex flex-col">
          <TabsList>
            <TabsTrigger value="watchlist">
              Monitored Entities ({total.toLocaleString()})
            </TabsTrigger>
            <TabsTrigger value="suggestions">
              AI Suggestions ({suggestions.length})
            </TabsTrigger>
          </TabsList>
          <TabsContent value="watchlist" className="flex-grow min-h-0">
            <DataTable
              columns={watchlistColumns(handleEdit, handleEntityUpdate, handleDelete)}
              data={initialWatchlist}
              total={total}
              page={page}
              setPage={handlePageChange}
              sorting={sorting}
              setSorting={handleSortChange}
              columnFilters={columnFilters}
              setColumnFilters={handleFilterChange}
              filterColumn="name"
              filterPlaceholder="Filter by name..."
            />
          </TabsContent>
          <TabsContent value="suggestions" className="flex-grow min-h-0">
            <DataTable
              columns={suggestionColumns(handleSuggestionAction)}
              data={suggestions}
              filterColumn="name"
              filterPlaceholder="Filter by name..."
            />
          </TabsContent>
        </Tabs>
      </div>
      <Sheet open={isEditorOpen} onOpenChange={setIsEditorOpen}>
        <SheetContent className="w-full sm:max-w-lg p-0">
          <WatchlistEditor
            key={selectedId}
            entity={activeEntityData}
            onSave={() => setIsEditorOpen(false)}
            onCancel={() => setIsEditorOpen(false)}
            countries={availableCountries}
          />
        </SheetContent>
      </Sheet>
      <ConfirmationDialog
        open={confirmState.isOpen}
        onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })}
        onConfirm={confirmDelete}
        title="Confirm Deletion"
        description="Are you sure you want to delete this entity? This action cannot be undone."
        confirmText="Delete Entity"
      />
    </>
  )
}

```

## 📄 src/app/admin/watchlist/actions.js
*Lines: 69, Size: 1.94 KB*

```javascript
// apps/client/src/app/admin/watchlist/actions.js
'use server'

import { revalidatePath } from 'next/cache'
import dbConnect from '@headlines/data-access/dbConnect/next'
import {
  createWatchlistEntity,
  updateWatchlistEntity,
  deleteWatchlistEntity,
  processWatchlistSuggestion,
  updateWatchlistSuggestion,
} from '@headlines/data-access'
import { watchlistEntitySchema } from '@headlines/models/schemas'

export async function createEntityAction(entityData) {
  const validation = watchlistEntitySchema.safeParse(entityData)
  if (!validation.success) {
    return { success: false, error: 'Invalid data.', details: validation.error.flatten() }
  }

  await dbConnect()
  const result = await createWatchlistEntity(validation.data)
  if (result.success) {
    revalidatePath('/admin/watchlist')
  }
  return result
}

export async function updateEntityAction(entityId, updateData) {
  const validation = watchlistEntitySchema.partial().safeParse(updateData)
  if (!validation.success) {
    return { success: false, error: 'Invalid data.', details: validation.error.flatten() }
  }

  await dbConnect()
  const result = await updateWatchlistEntity(entityId, validation.data)
  if (result.success) {
    revalidatePath('/admin/watchlist')
  }
  return result
}

export async function deleteEntityAction(entityId) {
  await dbConnect()
  const result = await deleteWatchlistEntity(entityId)
  if (result.success) {
    revalidatePath('/admin/watchlist')
  }
  return result
}

export async function processSuggestionAction(suggestionId, action) {
  await dbConnect()
  const result = await processWatchlistSuggestion({ suggestionId, action })
  if (result.success) {
    revalidatePath('/admin/watchlist')
  }
  return result
}

export async function updateSuggestionAction(suggestionId, updateData) {
  await dbConnect()
  const result = await updateWatchlistSuggestion(suggestionId, updateData)
  if (result.success) {
    revalidatePath('/admin/watchlist')
  }
  return result
}

```

## 📄 src/app/admin/watchlist/columns.jsx
*Lines: 176, Size: 5.26 KB*

```jsx
'use client'

import React from 'react'
import {
  Button,
  Badge,
  DataTableColumnHeader,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
  Tooltip,
  TooltipProvider,
  TooltipTrigger,
  TooltipContent,
} from '@/components/shared'
import { MoreHorizontal, Building, User, Users, Trash2, Check, X } from 'lucide-react'
import { EditableCell } from '@/components/shared/elements/EditableCell'

const TypeIcon = ({ type }) => {
  if (type === 'person') return <User className="h-5 w-5 text-blue-400" />
  if (type === 'family') return <Users className="h-5 w-5 text-purple-400" />
  return <Building className="h-5 w-5 text-orange-400" />
}

export const watchlistColumns = (handleEdit, onUpdate, onDelete) => [
  {
    accessorKey: 'hitCount',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Hits" />,
    cell: ({ row }) => (
      <div className="text-center font-medium">{row.original.hitCount || 0}</div>
    ),
  },
  {
    accessorKey: 'name',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />,
    cell: ({ row }) => (
      <div className="flex items-center gap-2">
        <TypeIcon type={row.original.type} />
        <span className="font-medium">{row.getValue('name')}</span>
      </div>
    ),
  },
  {
    accessorKey: 'searchTerms',
    header: 'Search Terms',
    cell: ({ row }) => (
      <div className="max-w-md">
        <EditableCell
          initialValue={(row.original.searchTerms || []).join(', ')}
          onSave={(newValue) =>
            onUpdate(row.original, {
              searchTerms: newValue.split(',').map((s) => s.trim()),
            })
          }
          placeholder="Add terms..."
          useTextarea={true}
        />
      </div>
    ),
  },
  {
    accessorKey: 'status',
    header: 'Status',
    cell: ({ row }) => {
      const entity = row.original
      const colorClass = {
        active: 'bg-green-500/20 text-green-400 border-green-500/30',
        inactive: 'bg-gray-500/20 text-gray-400 border-gray-500/30',
        candidate: 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30',
      }[entity.status]
      return <Badge className={colorClass}>{entity.status}</Badge>
    },
  },
  {
    id: 'actions',
    cell: ({ row }) => (
      <div className="text-right">
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="h-8 w-8 p-0">
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>Actions</DropdownMenuLabel>
            <DropdownMenuItem onClick={() => handleEdit(row.original._id)}>
              Edit Details
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem
              className="text-red-400 focus:bg-red-500/10 focus:text-red-400"
              onClick={() => onDelete(row.original._id)}
            >
              <Trash2 className="mr-2 h-4 w-4" /> Delete
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    ),
  },
]

export const suggestionColumns = (onAction, onUpdate) => [
  {
    accessorKey: 'name',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />,
    cell: ({ row }) => (
      <div className="flex items-center gap-2">
        <TypeIcon type={row.original.type} />
        <span className="font-medium">{row.getValue('name')}</span>
      </div>
    ),
  },
  {
    accessorKey: 'rationale',
    header: 'AI Rationale',
    cell: ({ row }) => (
      <div className="truncate max-w-sm">{row.getValue('rationale')}</div>
    ),
  },
  {
    accessorKey: 'sourceEvent',
    header: 'Source Event',
    cell: ({ row }) => (
      <div className="truncate max-w-xs text-muted-foreground">
        {row.getValue('sourceEvent')}
      </div>
    ),
  },
  {
    id: 'actions',
    cell: ({ row }) => {
      const suggestion = row.original
      return (
        <div className="text-right space-x-2">
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 text-green-400 hover:bg-green-500/10 hover:text-green-400"
                  onClick={() => onAction(suggestion, 'approved')}
                >
                  <Check className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>Approve and add to watchlist</p>
              </TooltipContent>
            </Tooltip>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 text-red-400 hover:bg-red-500/10 hover:text-red-400"
                  onClick={() => onAction(suggestion, 'dismissed')}
                >
                  <X className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>Dismiss this suggestion</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
      )
    },
  },
]

```

## 📄 src/app/admin/watchlist/page.jsx
*Lines: 53, Size: 1.51 KB*

```jsx
// apps/client/src/app/admin/watchlist/page.jsx
import {
  getAllWatchlistEntities,
  getSuggestions,
  getAllCountries,
} from '@headlines/data-access'
import WatchlistClientPage from './WatchlistClientPage'

export const dynamic = 'force-dynamic'

export default async function WatchlistPage({ searchParams }) {
  const page = parseInt(searchParams.page || '1', 10)
  const sort = searchParams.sort || null
  const columnFilters = searchParams.filters ? JSON.parse(searchParams.filters) : []

  const filters = columnFilters.reduce((acc, filter) => {
    if (filter.value) {
      const key = filter.id === 'name' ? 'q' : filter.id
      acc[key] = filter.value
    }
    return acc
  }, {})

  const [watchlistResult, suggestionsResult, countriesResult] = await Promise.all([
    getAllWatchlistEntities({ page, filters, sort }),
    getSuggestions(),
    getAllCountries(),
  ])

  if (
    !watchlistResult.success ||
    !suggestionsResult.success ||
    !countriesResult.success
  ) {
    return <div>Error loading data.</div> // Simple error handling for brevity
  }

  const allCountries = countriesResult.data
    .filter((c) => c.status === 'active')
    .map((c) => c.name)

  return (
    <div className="flex flex-col h-full">
      <WatchlistClientPage
        initialWatchlist={JSON.parse(JSON.stringify(watchlistResult.data))}
        total={watchlistResult.total}
        initialSuggestions={JSON.parse(JSON.stringify(suggestionsResult.data.watchlistSuggestions))}
        availableCountries={allCountries}
      />
    </div>
  )
}

```

## 📄 src/app/admin/watchlist/watchlist-editor.jsx
*Lines: 159, Size: 5.05 KB*

```jsx
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import {
  Button,
  CardFooter,
  Input,
  Textarea,
  Label,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/shared'
import { toast } from 'sonner'
import { Save, Loader2, PlusCircle, X, Sparkles } from 'lucide-react'
import { createEntityAction, updateEntityAction } from './actions'
// NOTE: AI enrichment features are part of ai-services and would need separate client-side API routes or actions if needed here.
// For now, we will omit them to keep the port clean.

const FormField = ({ id, label, children }) => (
  <div className="space-y-2">
    <Label htmlFor={id} className="text-sm font-medium text-muted-foreground pl-1">
      {label}
    </Label>
    {children}
  </div>
)

export default function WatchlistEditor({ entity, onSave, onCancel, countries = [] }) {
  const [formData, setFormData] = useState(entity)
  const [isSaving, setIsSaving] = useState(false)
  const [isDirty, setIsDirty] = useState(false)

  useEffect(() => {
    setFormData(entity)
    setIsDirty(false)
  }, [entity])

  if (!entity) return null

  const isNewEntity = !entity._id

  const handleChange = (key, value) => {
    setFormData((prev) => ({ ...prev, [key]: value }))
    setIsDirty(true)
  }

  const handleSave = async () => {
    setIsSaving(true)
    const action = isNewEntity
      ? createEntityAction
      : (data) => updateEntityAction(entity._id, data)

    const result = await action(formData)

    if (result.success) {
      toast.success(
        `Entity "${result.entity.name}" ${isNewEntity ? 'created' : 'updated'}.`
      )
      onSave(result.entity)
    } else {
      toast.error(`Error saving entity: ${result.error}`)
    }
    setIsSaving(false)
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="h-full flex flex-col"
    >
      <div className="flex justify-between items-center flex-shrink-0 p-6 border-b border-white/10">
        <div className="space-y-1">
          <h1 className="text-2xl font-bold tracking-tight flex items-center gap-2">
            {isNewEntity && <PlusCircle />}
            {isNewEntity ? 'Create New Entity' : 'Edit Entity'}
          </h1>
          <p className="text-sm text-muted-foreground">
            {isNewEntity ? 'Add a new target to the watchlist.' : formData.name}
          </p>
        </div>
        <Button variant="ghost" size="icon" onClick={onCancel}>
          <X className="h-4 w-4" />
        </Button>
      </div>
      <div className="flex-grow overflow-y-auto p-6 space-y-6">
        <FormField id="name" label="Name">
          <Input
            value={formData.name || ''}
            onChange={(e) => handleChange('name', e.target.value)}
          />
        </FormField>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormField label="Type">
            <Select value={formData.type} onValueChange={(v) => handleChange('type', v)}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="company">Company</SelectItem>
                <SelectItem value="person">Person</SelectItem>
                <SelectItem value="family">Family</SelectItem>
              </SelectContent>
            </Select>
          </FormField>
          <FormField label="Status">
            <Select
              value={formData.status}
              onValueChange={(v) => handleChange('status', v)}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="candidate">Candidate</SelectItem>
                <SelectItem value="active">Active</SelectItem>
                <SelectItem value="inactive">Inactive</SelectItem>
              </SelectContent>
            </Select>
          </FormField>
        </div>
        <FormField id="context" label="Context / AKA">
          <Input
            value={formData.context || ''}
            onChange={(e) => handleChange('context', e.target.value)}
            placeholder="e.g., The Lego Family"
          />
        </FormField>
        <FormField id="searchTerms" label="Search Terms (comma-separated)">
          <Textarea
            value={(formData.searchTerms || []).join(', ')}
            onChange={(e) =>
              handleChange(
                'searchTerms',
                e.target.value.split(',').map((s) => s.trim().toLowerCase())
              )
            }
            placeholder="e.g., hanni, kasprzak, ecco"
          />
        </FormField>
      </div>
      <CardFooter className="mt-auto border-t border-white/10 p-6 flex justify-end">
        <Button onClick={handleSave} disabled={!isDirty || isSaving}>
          {isSaving ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Save className="mr-2 h-4 w-4" />
          )}
          {isSaving ? 'Saving...' : 'Save Changes'}
        </Button>
      </CardFooter>
    </motion.div>
  )
}

```

## 📄 src/app/api/articles/route.js
*Lines: 31, Size: 1.12 KB*

```javascript
// apps/client/src/app/api/articles/route.js
import { NextResponse } from 'next/server'
import { getArticles, getTotalArticleCount } from '@headlines/data-access/next' // CORRECTED IMPORT
import { createClientApiHandler } from '@/lib/api-handler' // Use the new client handler

const handleGet = async (request, { user }) => {
  const { searchParams } = new URL(request.url)
  const page = parseInt(searchParams.get('page') || '1', 10)
  const sort = searchParams.get('sort') || 'date_desc'
  const filters = {
    q: searchParams.get('q') || '',
  }

  // The user object from the handler contains the userId
  const [articlesResult, totalResult] = await Promise.all([
    getArticles({ page, filters, sort, userId: user.userId }),
    getTotalArticleCount({ filters, userId: user.userId }),
  ])

  if (!articlesResult.success || !totalResult.success) {
    throw new Error(
      articlesResult.error || totalResult.error || 'Failed to fetch article data'
    )
  }

  return NextResponse.json({ data: articlesResult.data, total: totalResult.total })
}

export const GET = createClientApiHandler(handleGet)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api/auth/login/route.js
*Lines: 76, Size: 2.1 KB*

```javascript
// apps/client/src/app/api/auth/login/route.js
import { NextResponse } from 'next/server'
import { loginUser } from '@headlines/data-access/next'
import * as jose from 'jose'
import { env } from '@headlines/config/next'
import dbConnect from '@headlines/data-access/dbConnect/next' // This import is now valid
import { loginSchema } from '@headlines/models/schemas'
import { sendErrorAlert } from '@headlines/utils-server/next'
import { logger } from '@headlines/utils-shared'

// ... rest of the file
const JWT_COOKIE_NAME = 'headlines-jwt'

export async function POST(request) {
  try {
    await dbConnect()

    const body = await request.json()
    const validation = loginSchema.safeParse(body)
    if (!validation.success) {
      return NextResponse.json(
        { error: 'Invalid input.', details: validation.error.flatten() },
        { status: 400 }
      )
    }

    const { email, password } = validation.data
    logger.info(`Login attempt for user: ${email}`)
    const result = await loginUser({ email, password })

    if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: 401 })
    }

    const user = result.user

    const secret = new TextEncoder().encode(env.JWT_SECRET)
    const token = await new jose.SignJWT({
      userId: user._id.toString(),
      email: user.email,
      role: user.role,
    })
      .setProtectedHeader({ alg: 'HS256' })
      .setIssuedAt()
      .setExpirationTime('30d')
      .sign(secret)

    const response = NextResponse.json({
      user: {
        _id: user._id,
        firstName: user.firstName,
        email: user.email,
        role: user.role,
      },
    })

    response.cookies.set({
      name: JWT_COOKIE_NAME,
      value: token,
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      path: '/',
      maxAge: 60 * 60 * 24 * 30,
    })

    return response
  } catch (error) {
    sendErrorAlert(error, { origin: 'LOGIN_API_ROUTE' })
    logger.error({ err: error }, '[API Login Route Error]')
    return NextResponse.json(
      { error: 'An internal server error occurred.' },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api/auth/logout/route.js
*Lines: 18, Size: 434 Bytes*

```javascript
// apps/client/src/app/api/auth/logout/route.js
import { NextResponse } from 'next/server'

const JWT_COOKIE_NAME = 'headlines-jwt'

export async function POST() {
  const response = NextResponse.json({ message: 'Logged out successfully' })
  response.cookies.set({
    name: JWT_COOKIE_NAME,
    value: '',
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    path: '/',
    maxAge: 0,
  })
  return response
}

```

## 📄 src/app/api/auth/session/route.js
*Lines: 33, Size: 999 Bytes*

```javascript
// apps/client/src/app/api/auth/session/route.js
import { NextResponse } from 'next/server'
import { verifySession } from '@/lib/auth/server'
import { Subscriber } from '@headlines/models/next'
import dbConnect from '@headlines/data-access/dbConnect/next'

export const dynamic = 'force-dynamic'

export async function GET(request) {
  await dbConnect()

  const { user, error } = await verifySession()

  if (error) {
    return NextResponse.json({ error: 'No active session' }, { status: 401 })
  }

  try {
    // Re-fetch the user from the database to get the latest data
    const freshUser = await Subscriber.findById(user.userId).lean()
    if (!freshUser) {
      return NextResponse.json({ error: 'User not found' }, { status: 401 })
    }

    // Don't send back the password hash
    const { password, ...userPayload } = freshUser

    return NextResponse.json({ user: userPayload })
  } catch (e) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

```

## 📄 src/app/api/auth/signup/route.js
*Lines: 74, Size: 2.13 KB*

```javascript
// apps/client/src/app/api/auth/signup/route.js
import { NextResponse } from 'next/server'
import { createSubscriberWithPassword } from '@headlines/data-access/next'
import { signupSchema } from '@headlines/models/schemas'
import dbConnect from '@headlines/data-access/dbConnect/next'
import * as jose from 'jose'
import { env } from '@headlines/config/next'

const JWT_COOKIE_NAME = 'headlines-jwt'

export async function POST(request) {
  try {
    await dbConnect()

    const body = await request.json()
    const validation = signupSchema.safeParse(body)
    if (!validation.success) {
      return NextResponse.json(
        { error: 'Invalid input.', details: validation.error.flatten().fieldErrors },
        { status: 400 }
      )
    }

    const { name, email, password, countries, plan } = validation.data
    const [firstName, ...lastNameParts] = name.split(' ')
    const lastName = lastNameParts.join(' ')

    const createResult = await createSubscriberWithPassword({
      email,
      password,
      firstName,
      lastName,
      countries: countries.map((c) => ({ name: c, active: true })),
      subscriptionTier: plan,
    })

    if (!createResult.success) {
      return NextResponse.json({ error: createResult.error }, { status: 409 }) // 409 Conflict for existing user
    }

    const user = createResult.user

    // User created, now create a session token (login)
    const secret = new TextEncoder().encode(env.JWT_SECRET)
    const token = await new jose.SignJWT({
      userId: user._id.toString(),
      email: user.email,
      role: user.role,
    })
      .setProtectedHeader({ alg: 'HS256' })
      .setIssuedAt()
      .setExpirationTime('30d')
      .sign(secret)

    const response = NextResponse.json({ user })
    response.cookies.set({
      name: JWT_COOKIE_NAME,
      value: token,
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      path: '/',
      maxAge: 60 * 60 * 24 * 30, // 30 days
    })

    return response
  } catch (error) {
    console.error('[API Signup Error]', error)
    return NextResponse.json(
      { error: 'An internal server error occurred.' },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api/chat/route.js
*Lines: 28, Size: 930 Bytes*

```javascript
// apps/client/src/app/api/chat/route.js
import { processChatRequest } from '@headlines/ai-services/next'
import { chatSchema } from '@headlines/models/schemas'
import { sendErrorAlert } from '@headlines/utils-server/next'

export async function POST(req) {
  try {
    const body = await req.json()
    const validation = chatSchema.safeParse(body)
    if (!validation.success) {
      return new Response(
        JSON.stringify({
          error: 'Invalid chat message structure.',
          details: validation.error.flatten(),
        }),
        { status: 400 }
      )
    }

    const response = await processChatRequest(validation.data.messages)
    return Response.json(response)
  } catch (error) {
    sendErrorAlert(error, { origin: 'CHAT_API_ROUTE' })
    const errorMessage = 'An error occurred while processing your request.'
    return new Response(JSON.stringify({ error: errorMessage }), { status: 500 })
  }
}

```

## 📄 src/app/api/chat/title/route.js
*Lines: 38, Size: 1.1 KB*

```javascript
// apps/client/src/app/api/chat/title/route.js
import { NextResponse } from 'next/server'
import { generateChatTitle } from '@headlines/ai-services/next' // CORRECTED IMPORT
import { verifySession } from '@/lib/auth/server'
import { chatSchema } from '@headlines/models/schemas'

export async function POST(request) {
  const { user, error } = await verifySession()
  if (!user) {
    return NextResponse.json(
      { error: error || 'Authentication required' },
      { status: 401 }
    )
  }

  try {
    const body = await request.json()
    const validation = chatSchema.safeParse(body)
    if (!validation.success) {
      return NextResponse.json(
        {
          error: 'Invalid chat message structure.',
          details: validation.error.flatten(),
        },
        { status: 400 }
      )
    }

    const result = await generateChatTitle(validation.data.messages)
    if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: 400 })
    }
    return NextResponse.json(result)
  } catch (e) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

```

## 📄 src/app/api/events/route.js
*Lines: 35, Size: 1.3 KB*

```javascript
// apps/client/src/app/api/events/route.js
import { NextResponse } from 'next/server'
import { getEvents, getTotalEventCount } from '@headlines/data-access'
import { createClientApiHandler } from '@/lib/api-handler'

// This is the handler for GET requests to /api/events
const handleGet = async (request, { user }) => {
  const { searchParams } = new URL(request.url)
  const page = parseInt(searchParams.get('page') || '1', 10)
  const sort = searchParams.get('sort') || 'date_desc'
  const filters = {
    q: searchParams.get('q') || '',
    country: searchParams.get('country') || '',
    favoritesOnly: searchParams.get('favorites') === 'true',
  }

  // The user object is passed in from our createClientApiHandler wrapper
  const [eventsResult, totalResult] = await Promise.all([
    getEvents({ page, filters, sort, userId: user.userId }),
    getTotalEventCount({ filters, userId: user.userId }),
  ])

  if (!eventsResult.success || !totalResult.success) {
    throw new Error(
      eventsResult.error || totalResult.error || 'Failed to fetch event data'
    )
  }

  return NextResponse.json({ data: eventsResult.data, total: totalResult.total })
}

// We wrap our handler with the authentication and error handling middleware
export const GET = createClientApiHandler(handleGet)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api/opportunities/route.js
*Lines: 32, Size: 1.17 KB*

```javascript
import { NextResponse } from 'next/server'
import { getOpportunities, getTotalOpportunitiesCount } from '@headlines/data-access'
import { createClientApiHandler } from '@/lib/api-handler' // Use the new client handler

const handleGet = async (request, { user }) => {
  const { searchParams } = new URL(request.url)
  const page = parseInt(searchParams.get('page') || '1', 10)
  const sort = searchParams.get('sort') || 'date_desc'
  const filters = {
    q: searchParams.get('q') || '',
    country: searchParams.get('country') || '',
    withEmail: searchParams.get('withEmail') === 'true',
    favoritesOnly: searchParams.get('favorites') === 'true',
  }

  const [oppsResult, totalResult] = await Promise.all([
    getOpportunities({ page, filters, sort, userId: user.userId }),
    getTotalOpportunitiesCount({ filters, userId: user.userId }),
  ])

  if (!oppsResult.success || !totalResult.success) {
    throw new Error(
      oppsResult.error || totalResult.error || 'Failed to fetch opportunity data'
    )
  }

  return NextResponse.json({ data: oppsResult.data, total: totalResult.total })
}

export const GET = createClientApiHandler(handleGet)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api/upload-article/route.js
*Lines: 30, Size: 899 Bytes*

```javascript
// apps/client/src/app/api/upload-article/route.js
'use server'

import { NextResponse } from 'next/server'
import { processUploadedArticle } from '@headlines/ai-services/next' // CORRECTED IMPORT
import { createClientApiHandler } from '@/lib/api-handler'
import { articleUploadSchema } from '@headlines/models/schemas'

const handlePost = async (request, { user }) => {
  const body = await request.json()
  const validation = articleUploadSchema.safeParse(body)

  if (!validation.success) {
    return NextResponse.json(
      { error: 'Invalid input.', details: validation.error.flatten() },
      { status: 400 }
    )
  }

  const result = await processUploadedArticle(validation.data.item, user.userId)

  if (!result.success) {
    throw new Error(result.error || 'Failed to process article')
  }

  return NextResponse.json(result)
}

export const POST = createClientApiHandler(handlePost)

```

## 📄 src/app/api/user/interactions/route.js
*Lines: 32, Size: 939 Bytes*

```javascript
// apps/client/src/app/api/user/interactions/route.js
import { NextResponse } from 'next/server'
import { updateUserInteraction } from '@headlines/data-access/next'
import { createClientApiHandler } from '@/lib/api-handler'
import { interactionSchema } from '@headlines/models/schemas'

const handlePost = async (request, { user }) => {
  const body = await request.json()
  const validation = interactionSchema.safeParse(body)

  if (!validation.success) {
    return NextResponse.json(
      { error: 'Invalid input.', details: validation.error.flatten() },
      { status: 400 }
    )
  }

  const result = await updateUserInteraction({
    userId: user.userId,
    ...validation.data,
  })

  if (!result.success) {
    return NextResponse.json({ error: result.error }, { status: 400 })
  }

  return NextResponse.json({ success: true })
}

export const POST = createClientApiHandler(handlePost)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api/user/profile/route.js
*Lines: 19, Size: 579 Bytes*

```javascript
'use server'

import { NextResponse } from 'next/server'
import { updateUserProfile } from '@headlines/data-access'
import { createClientApiHandler } from '@/lib/api-handler' // Use the new client handler

const handlePatch = async (request, { user }) => {
  const updateData = await request.json()
  const result = await updateUserProfile({ userId: user.userId, updateData })

  if (!result.success) {
    return NextResponse.json({ error: result.error }, { status: 400 })
  }

  return NextResponse.json(result.user)
}

export const PATCH = createClientApiHandler(handlePatch)

```

## 📄 src/app/api/user/settings/clear-discarded/route.js
*Lines: 16, Size: 543 Bytes*

```javascript
'use server'

import { NextResponse } from 'next/server'
import { clearDiscardedItems } from '@headlines/data-access'
import { createClientApiHandler } from '@/lib/api-handler' // Use the new client handler

const handlePost = async (request, { user }) => {
  const result = await clearDiscardedItems(user.userId)
  if (!result.success) {
    return NextResponse.json({ error: result.error }, { status: 400 })
  }
  return NextResponse.json({ success: true, message: result.message })
}

export const POST = createClientApiHandler(handlePost)

```

## 📄 src/app/api-admin/actions.js
*Lines: 34, Size: 1.08 KB*

```javascript
// apps/client/src/app/api-admin/actions.js
'use server'

// --- START DEFINITIVE FIX ---
// This Server Action file is the "caller" and is now responsible for
// establishing the database connection before executing core logic.
import dbConnect from '@headlines/data-access/dbConnect/next'
// --- END DEFINITIVE FIX ---
import {
  linkOpportunityToEvent,
  unlinkOpportunityFromEvent,
} from '@headlines/data-access'
import { revalidatePath } from 'next/cache'

export async function linkOpportunityToEventAction(eventId, opportunityId) {
  await dbConnect() // Establish connection
  const result = await linkOpportunityToEvent(eventId, opportunityId)
  if (result.success) {
    revalidatePath('/admin/events')
    revalidatePath('/admin/opportunities')
  }
  return result
}

export async function unlinkOpportunityFromEventAction(eventId, opportunityId) {
  await dbConnect() // Establish connection
  const result = await unlinkOpportunityFromEvent(eventId, opportunityId)
  if (result.success) {
    revalidatePath('/admin/events')
    revalidatePath('/admin/opportunities')
  }
  return result
}

```

## 📄 src/app/api-admin/ai-admin/executive-summary/route.js
*Lines: 39, Size: 1.15 KB*

```javascript
import { NextResponse } from 'next/server'
import { createApiHandler } from '@/lib/api-handler'
import { executiveSummaryChain } from '@headlines/ai-services/next'

const handlePost = async (request) => {
  const { judgeVerdict, freshHeadlinesFound } = await request.json()

  const hasEvents = judgeVerdict?.event_judgements?.length > 0
  const hasOpps = judgeVerdict?.opportunity_judgements?.length > 0

  if (!judgeVerdict || (!hasEvents && !hasOpps)) {
    return NextResponse.json({
      success: true,
      summary: 'No new events or opportunities were generated in this run to summarize.',
    })
  }

  const payload = {
    freshHeadlinesFound: freshHeadlinesFound || 0,
    judgeVerdict,
  }

  const result = await executiveSummaryChain({
    payload_json_string: JSON.stringify(payload),
  })

  if (result.error || !result.summary) {
    console.error('Executive Summary Chain failed:', result.error)
    return NextResponse.json({
      success: true,
      summary: 'The AI was unable to generate a summary for this run.',
    })
  }

  return NextResponse.json({ success: true, summary: result.summary })
}

export const POST = createApiHandler(handlePost)

```

## 📄 src/app/api-admin/articles/[articleId]/route.js
*Lines: 56, Size: 1.94 KB*

```javascript
import { NextResponse } from 'next/server'
// --- START DEFINITIVE FIX ---
// Import the environment-specific dbConnect for the unwrapped GET handler
import dbConnect from '@headlines/data-access/dbConnect/next'
// Import data access functions from the Next.js-safe entry point
import {
  updateArticle,
  deleteArticle,
  getArticleDetails,
} from '@headlines/data-access/next'
// --- END DEFINITIVE FIX ---
import { Article } from '@headlines/models'
import { createApiHandler } from '@/lib/api-handler'
import mongoose from 'mongoose'

// This GET handler is NOT wrapped by createApiHandler (e.g., if it needs to be public).
// Therefore, it is responsible for its own database connection.
const handleGet = async (request, { params }) => {
  await dbConnect()
  const { articleId } = params
  if (!mongoose.Types.ObjectId.isValid(articleId)) {
    return NextResponse.json({ error: 'Invalid article ID' }, { status: 400 })
  }
  // The `getArticleDetails` function is now isomorphic and doesn't connect itself.
  const result = await getArticleDetails(articleId)
  if (!result.success) {
    return NextResponse.json({ error: result.error }, { status: 404 })
  }
  return NextResponse.json(result.data)
}

// These handlers ARE wrapped by createApiHandler, which handles the db connection.
const handlePatch = async (request, { params }) => {
  const { articleId } = params
  const updateData = await request.json()
  const result = await updateArticle(articleId, updateData)
  if (!result.success) {
    throw new Error(result.error)
  }
  return NextResponse.json(result)
}

const handleDelete = async (request, { params }) => {
  const { articleId } = params
  const result = await deleteArticle(articleId)
  if (!result.success) {
    throw new Error(result.error)
  }
  return NextResponse.json(result)
}

export const GET = handleGet
export const PATCH = createApiHandler(handlePatch)
export const DELETE = createApiHandler(handleDelete)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api-admin/countries/route.js
*Lines: 14, Size: 412 Bytes*

```javascript
import { NextResponse } from 'next/server'
import { getAllCountries } from '@headlines/data-access'
import { createApiHandler } from '@/lib/api-handler'

const handleGet = async (request) => {
  const result = await getAllCountries()
  if (!result.success) throw new Error(result.error)

  return NextResponse.json(result)
}

export const GET = createApiHandler(handleGet)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api-admin/events/[eventId]/route.js
*Lines: 62, Size: 2.18 KB*

```javascript
import { NextResponse } from 'next/server'
import dbConnect from '@headlines/data-access/dbConnect/next'
import { getEventDetails, updateEvent, deleteEvent } from '@headlines/data-access/next'
import { createApiHandler } from '@/lib/api-handler' // We need a more flexible admin handler
import mongoose from 'mongoose'

// A more flexible admin handler that doesn't require session for GET
async function adminApiHandler(handler, { requireAuth = true } = {}) {
  return async (request, context) => {
    try {
      await dbConnect()
      // In a real app, you'd verify admin role here from the session for PATCH/DELETE
      return await handler(request, context)
    } catch (error) {
      console.error(`[Admin API Handler Error]`, error)
      return NextResponse.json(
        { error: 'Internal Server Error', details: error.message },
        { status: 500 }
      )
    }
  }
}

const handleGet = async (request, { params }) => {
  const { eventId } = params
  const result = await getEventDetails(eventId)
  if (!result.success) {
    return NextResponse.json({ error: result.error }, { status: 404 })
  }
  return NextResponse.json(result.data)
}

const handlePatch = async (request, { params }) => {
  const { eventId } = params
  if (!mongoose.Types.ObjectId.isValid(eventId)) {
    return NextResponse.json({ error: 'Invalid event ID' }, { status: 400 })
  }
  const updateData = await request.json()
  const result = await updateEvent(eventId, updateData)
  if (!result.success) {
    return NextResponse.json({ error: result.error }, { status: 400 })
  }
  return NextResponse.json(result)
}

const handleDelete = async (request, { params }) => {
  const { eventId } = params
  if (!mongoose.Types.ObjectId.isValid(eventId)) {
    return NextResponse.json({ error: 'Invalid event ID' }, { status: 400 })
  }
  const result = await deleteEvent(eventId)
  if (!result.success) {
    return NextResponse.json({ error: result.error }, { status: 400 })
  }
  return NextResponse.json({ success: true })
}

export const GET = adminApiHandler(handleGet, { requireAuth: false })
export const PATCH = adminApiHandler(handlePatch)
export const DELETE = adminApiHandler(handleDelete)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api-admin/export/route.js
*Lines: 35, Size: 998 Bytes*

```javascript
// apps/client/src/app/api-admin/export/route.js
import { NextResponse } from 'next/server'
import { createApiHandler } from '@/lib/api-handler'
import { generateExport } from '@headlines/data-access'
import { exportSchema } from '@headlines/models/schemas'

const handlePost = async (request) => {
  const body = await request.json()
  const validation = exportSchema.safeParse(body)

  if (!validation.success) {
    return NextResponse.json(
      { error: 'Invalid input.', details: validation.error.flatten() },
      { status: 400 }
    )
  }

  const result = await generateExport(validation.data)

  if (!result.success) {
    throw new Error(result.error)
  }

  const filename = `export_${validation.data.entity}_${new Date().toISOString()}.${result.extension}`

  return new Response(result.data, {
    headers: {
      'Content-Type': result.contentType,
      'Content-Disposition': `attachment; filename="${filename}"`,
    },
  })
}

export const POST = createApiHandler(handlePost)

```

## 📄 src/app/api-admin/relationships/link/route.js
*Lines: 18, Size: 692 Bytes*

```javascript
import { NextResponse } from 'next/server'
import { linkOpportunityToEventAction } from '../../actions' // We will create this action next

// This is a simplified handler that doesn't use the full createApiHandler
// because it calls a Server Action directly.
export async function POST(request) {
  try {
    const { eventId, opportunityId } = await request.json()
    const result = await linkOpportunityToEventAction(eventId, opportunityId)
    if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: 400 })
    }
    return NextResponse.json(result)
  } catch (e) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

```

## 📄 src/app/api-admin/relationships/unlink/route.js
*Lines: 16, Size: 579 Bytes*

```javascript
import { NextResponse } from 'next/server'
import { unlinkOpportunityFromEventAction } from '../../actions' // We will create this action next

export async function POST(request) {
  try {
    const { eventId, opportunityId } = await request.json()
    const result = await unlinkOpportunityFromEventAction(eventId, opportunityId)
    if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: 400 })
    }
    return NextResponse.json(result)
  } catch (e) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

```

## 📄 src/app/api-admin/run-verdicts/[runId]/route.js
*Lines: 24, Size: 816 Bytes*

```javascript
// File: apps/client/src/app/api-admin/run-verdicts/[runId]/route.js
import { NextResponse } from 'next/server'
import { getRunVerdictById } from '@headlines/data-access'
import { createApiHandler } from '@/lib/api-handler'
import mongoose from 'mongoose'

const handleGet = async (request, { params }) => {
  const { runId } = params
  if (!mongoose.Types.ObjectId.isValid(runId)) {
    return NextResponse.json({ error: 'Invalid Run ID' }, { status: 400 })
  }

  const result = await getRunVerdictById(runId)
  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500
    return NextResponse.json({ error: result.error }, { status })
  }

  return NextResponse.json({ verdict: result.data })
}

export const GET = createApiHandler(handleGet)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api-admin/scrape/route.js
*Lines: 59, Size: 1.9 KB*

```javascript
// apps/client/src/app/api-admin/scrape/route.js (version 2.0.0)
import { NextResponse } from 'next/server'
import { createApiHandler } from '@/lib/api-handler'
import { cookies } from 'next/headers'
import { env } from '@headlines/config/next'

const SERVER_API_URL = env.INTERNAL_SERVER_URL || 'http://localhost:3002'

// This Next.js API route now acts as a secure proxy.
// It authenticates the admin user, grabs their JWT, and forwards the
// request to the dedicated Node.js server that can run Playwright.
const handlePost = async (request) => {
  const { sourceId, articleUrl } = await request.json()
  const token = cookies().get('headlines-jwt')?.value

  if (!token) {
    return NextResponse.json(
      { error: 'Authentication token not found.' },
      { status: 401 }
    )
  }

  try {
    const response = await fetch(`${SERVER_API_URL}/api/scrape-test`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({ sourceId, articleUrl }),
    })

    const result = await response.json()

    if (!response.ok) {
      throw new Error(result.error || `Scraper server returned status ${response.status}`)
    }

    // The original logic in `performScrape` from `scraper-ide/page.jsx` expects
    // a specific structure, so we re-map the response to match it.
    if (result.content) {
      return NextResponse.json({ success: true, content: result.content.preview })
    } else if (result.headlines) {
      return NextResponse.json({
        success: true,
        articles: result.headlines.samples,
        resultCount: result.headlines.count,
      })
    }

    throw new Error('Unexpected response format from scraper server.')
  } catch (error) {
    return NextResponse.json({ error: error.message }, { status: 500 })
  }
}

export const POST = createApiHandler(handlePost)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api-admin/settings/route.js
*Lines: 25, Size: 724 Bytes*

```javascript
import { NextResponse } from 'next/server'
import { getSettings, updateSettings } from '@headlines/data-access'
import { createApiHandler } from '@/lib/api-handler'

const handleGet = async (request) => {
  const result = await getSettings()
  if (!result.success) {
    throw new Error(result.error)
  }
  return NextResponse.json(result)
}

const handlePatch = async (request) => {
  const updatedSettings = await request.json()
  const result = await updateSettings(updatedSettings)
  if (!result.success) {
    throw new Error(result.error)
  }
  return NextResponse.json(result)
}

export const GET = createApiHandler(handleGet)
export const PATCH = createApiHandler(handlePatch)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api-admin/sources/route.js
*Lines: 19, Size: 622 Bytes*

```javascript
import { NextResponse } from 'next/server'
import { getAllSources } from '@headlines/data-access'
import { createApiHandler } from '@/lib/api-handler'

const handleGet = async (request) => {
  const { searchParams } = new URL(request.url)
  const country = searchParams.get('country') // Get the country from the query string

  // Pass the filter to the data-access function
  const result = await getAllSources({ country: country || null })

  if (!result.success) throw new Error(result.error)

  return NextResponse.json(result)
}

export const GET = createApiHandler(handleGet)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/api-admin/subscribers/[subscriberId]/route.js
*Lines: 39, Size: 1.49 KB*

```javascript
// File: apps/client/src/app/api-admin/subscribers/[subscriberId]/route.js (version 1.0 - Unchanged)
import { NextResponse } from 'next/server'
import { updateSubscriber, deleteSubscriber } from '@headlines/data-access'
import mongoose from 'mongoose'
import { createApiHandler } from '@/lib/api-handler'

const handlePatch = async (request, { params }) => {
  const { subscriberId } = params
  if (!mongoose.Types.ObjectId.isValid(subscriberId)) {
    return NextResponse.json({ error: 'Invalid subscriber ID' }, { status: 400 })
  }
  const body = await request.json()
  const result = await updateSubscriber(subscriberId, body)
  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500
    return NextResponse.json({ error: result.error }, { status })
  }
  return NextResponse.json({
    message: 'Subscriber updated',
    subscriber: result.subscriber,
  })
}

const handleDelete = async (request, { params }) => {
  const { subscriberId } = params
  if (!mongoose.Types.ObjectId.isValid(subscriberId)) {
    return NextResponse.json({ error: 'Invalid subscriber ID' }, { status: 400 })
  }
  const result = await deleteSubscriber(subscriberId)
  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500
    return NextResponse.json({ error: result.error }, { status })
  }
  return NextResponse.json({ message: 'Subscriber deleted successfully' })
}

export const PATCH = createApiHandler(handlePatch)
export const DELETE = createApiHandler(handleDelete)

```

## 📄 src/app/api-admin/subscribers/route.js
*Lines: 44, Size: 1.46 KB*

```javascript
// File: apps/client/src/app/api-admin/subscribers/route.js (version 2.1 - Directive Removed)
import { NextResponse } from 'next/server'
import { getAllSubscribers, createSubscriber } from '@headlines/data-access'
import { createApiHandler } from '@/lib/api-handler'

// 'use server'; // <--- THIS LINE HAS BEEN REMOVED.

const handleGet = async (request) => {
  const { searchParams } = new URL(request.url)
  const page = parseInt(searchParams.get('page') || '1', 10)
  const sort = searchParams.get('sort') || 'createdAt_desc'
  const columnFilters = JSON.parse(searchParams.get('columnFilters') || '[]')

  const filters = columnFilters.reduce((acc, filter) => {
    if (filter.value) {
      const key = filter.id === 'email' ? 'q' : filter.id
      acc[key] = filter.value
    }
    return acc
  }, {})

  const result = await getAllSubscribers({ page, sort, filters })
  if (!result.success) throw new Error(result.error)

  return NextResponse.json(result)
}

const handlePost = async (request) => {
  const body = await request.json()
  const result = await createSubscriber(body)
  if (!result.success) {
    const status = result.error.includes('already exists') ? 409 : 500
    return NextResponse.json({ error: result.error }, { status })
  }
  return NextResponse.json(
    { success: true, subscriber: result.subscriber },
    { status: 201 }
  )
}

export const GET = createApiHandler(handleGet)
export const POST = createApiHandler(handlePost)
export const dynamic = 'force-dynamic'

```

## 📄 src/app/global-error.jsx
*Lines: 20, Size: 668 Bytes*

```jsx
// apps/client/src/app/global-error.jsx
'use client'

export default function GlobalError({ error, reset }) {
  // Although Next.js docs suggest this component needs its own <html> and <body> tags,
  // the build process throws an error indicating it's being wrapped by the root layout anyway.
  // Removing them resolves the build failure.
  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <h2 className="text-4xl font-bold">Something went wrong!</h2>
      <button
        onClick={() => reset()}
        className="mt-4 px-4 py-2 bg-blue-500 text-white rounded"
      >
        Try again
      </button>
    </div>
  )
}

```

## 📄 src/app/globals.css
*Lines: 224, Size: 5.83 KB*

```css
@import url('https://fonts.googleapis.com/css2?family=Merriweather:ital,wght@0,400;0,700;1,400;1,700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 224 71.4% 4.1%;
    --foreground: 210 40% 98%;
    --card: 224 71.4% 4.1%;
    --card-foreground: 210 40% 98%;
    --popover: 224 71.4% 4.1%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 220.9 39.3% 11%;
    --secondary: 222.2 47.4% 11.2%;
    --secondary-foreground: 210 40% 98%;
    --muted: 215 27.9% 16.9%;
    --muted-foreground: 217.9 10.6% 64.9%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 85.7% 97.3%;
    --border: 215 27.9% 16.9%;
    --input: 215 27.9% 16.9%;
    --ring: 217 91% 60%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 224 71.4% 4.1%;
    --foreground: 210 40% 98%;
    --card: 224 71.4% 4.1%;
    --card-foreground: 210 40% 98%;
    --popover: 224 71.4% 4.1%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 220.9 39.3% 11%;
    --secondary: 222.2 47.4% 11.2%;
    --secondary-foreground: 210 40% 98%;
    --muted: 215 27.9% 16.9%;
    --muted-foreground: 217.9 10.6% 64.9%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 85.7% 97.3%;
    --border: 215 27.9% 16.9%;
    --input: 215 27.9% 16.9%;
    --ring: 217 91% 60%;
  }

  * {
    border-color: hsl(var(--border));
  }

  body {
    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
    background-image:
      radial-gradient(at 27% 37%, hsla(215, 98%, 43%, 0.15) 0px, transparent 50%),
      radial-gradient(at 97% 21%, hsla(217, 91%, 60%, 0.1) 0px, transparent 50%),
      radial-gradient(at 52% 99%, hsla(355, 98%, 51%, 0.1) 0px, transparent 50%);
  }

  /* Professional Table Styling for Chat */
  .prose {
    --tw-prose-body: theme(colors.slate[300]);
    --tw-prose-headings: theme(colors.slate[100]);
    --tw-prose-lead: theme(colors.slate[400]);
    --tw-prose-links: theme(colors.blue[400]);
    --tw-prose-bold: theme(colors.slate[100]);
    --tw-prose-counters: theme(colors.slate[400]);
    --tw-prose-bullets: theme(colors.slate[600]);
    --tw-prose-hr: theme(colors.slate[700]);
    --tw-prose-quotes: theme(colors.slate[200]);
    --tw-prose-quote-borders: theme(colors.slate[700]);
    --tw-prose-captions: theme(colors.slate[400]);
    --tw-prose-code: theme(colors.slate[100]);
    --tw-prose-pre-code: theme(colors.slate[300]);
    --tw-prose-pre-bg: theme(colors.slate[900]);
    --tw-prose-th-borders: theme(colors.slate[600]);
    --tw-prose-td-borders: theme(colors.slate[700]);
  }

  .prose table {
    @apply text-sm;
  }
  .prose th {
    @apply text-slate-200 text-left px-3 py-2;
  }
  .prose td {
    @apply px-3 py-2 align-top;
  }
}

/* --- Premier Scrollbar Styling --- */
@layer utilities {
  .custom-scrollbar::-webkit-scrollbar {
    height: 6px;
    width: 6px;
  }
  .custom-scrollbar::-webkit-scrollbar-track {
    background: hsl(var(--muted) / 0.5);
    border-radius: 10px;
  }
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: hsl(var(--secondary));
    border-radius: 10px;
  }
  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: hsl(var(--accent));
  }
  .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: hsl(var(--secondary)) hsl(var(--muted) / 0.5);
  }

  /* --- Source-Aware Coloring for Chat --- */
  .rag-source,
  .wiki-source {
    color: #a7f3d0;
  }
  .llm-source {
    color: #fde68a;
  }

  /* --- Golden Glowing Border for High-Relevance Cards --- */
  .card-glow {
    position: relative;
    overflow: hidden; /* Keep the glow contained */
  }
  .card-glow::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: inherit; /* Match parent's border-radius */
    border: 1px solid transparent;
    background: conic-gradient(
        from 180deg at 50% 50%,
        rgba(252, 211, 77, 0.5) 0deg,
        rgba(252, 211, 77, 0.2) 50%,
        rgba(252, 211, 77, 0.5) 360deg
      )
      border-box;
    -webkit-mask:
      linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
    z-index: 0;
    animation: glow 4s linear infinite;
  }

  /* --- Bezier Heartbeat Wobble --- */
  .impatient-wobble {
    animation: impatient-wobble 2s cubic-bezier(0.5, 0, 0.1, 1) infinite;
  }

  /* --- NEW: Hero Aurora Background --- */
  .hero-aurora {
    --aurora-color-1: hsl(217 91% 60% / 0.1);
    --aurora-color-2: hsl(262 88% 58% / 0.1);
    background-image:
      radial-gradient(100% 100% at 50% 0%, var(--aurora-color-1) 0%, transparent 50%),
      radial-gradient(100% 100% at 50% 100%, var(--aurora-color-2) 0%, transparent 50%);
    animation: aurora-flow 20s infinite alternate;
  }

  @keyframes glow {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* --- NEW: Aurora Flow Animation --- */
  @keyframes aurora-flow {
    0% {
      background-position:
        50% 0%,
        50% 100%;
      background-size:
        150% 150%,
        150% 150%;
    }
    50% {
      background-size:
        100% 100%,
        100% 100%;
    }
    100% {
      background-position:
        0% 50%,
        100% 50%;
      background-size:
        150% 150%,
        150% 150%;
    }
  }

  @keyframes impatient-wobble {
    /* The long pause between heartbeats */
    0%,
    90%,
    100% {
      transform: scale(1) rotate(0deg);
    }
    /* The first, smaller beat ("pum") */
    73% {
      transform: scale(1.005) rotate(-0.2deg);
    }
    /* The second, larger beat ("PUM") */
    96% {
      transform: scale(1.012) rotate(0.2deg);
    }
  }
}

```

## 📄 src/app/layout.js
*Lines: 21, Size: 534 Bytes*

```javascript
// apps/client/src/app/layout.js
import './globals.css'
import { AppProviders } from './providers'
import { AppWrapper } from './_components/AppWrapper'

export const metadata = {
  title: 'Headlines Intelligence',
  description: 'AI-Powered Wealth Event Discovery.',
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className="bg-background text-foreground">
        <AppProviders>
          <AppWrapper>{children}</AppWrapper>
        </AppProviders>
      </body>
    </html>
  )
};
```

## 📄 src/app/login/layout.js
*Lines: 18, Size: 512 Bytes*

```javascript
// This layout applies only to the /login page.
export default function LoginLayout({ children }) {
  return (
    <div
      className="min-h-screen flex items-center justify-center p-4"
      style={{
        backgroundColor: 'hsl(224, 71.4%, 4.1%)',
        backgroundImage: `
          radial-gradient(at 27% 37%, hsla(215, 98%, 43%, 0.1) 0px, transparent 50%),
          radial-gradient(at 97% 21%, hsla(217, 91%, 60%, 0.15) 0px, transparent 50%)
        `,
      }}
    >
      {children}
    </div>
  )
}

```

## 📄 src/app/login/page.jsx
*Lines: 124, Size: 3.6 KB*

```jsx
// File: client/src/app/login/page.jsx
'use client'

export const dynamic = 'force-dynamic'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  Input,
  Button,
  Label,
} from '@/components/shared' // CORRECTED IMPORT
import { LoadingOverlay } from '@/components/shared/screen/LoadingOverlay'
import { cn } from '@headlines/utils-shared'

import { KeyRound, Shield, Sparkles, Mail } from 'lucide-react'
import { useAuth } from '@/lib/auth/client'

export default function LoginPage() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const { user, login, isLoading } = useAuth()
  const [isError, setIsError] = useState(false)
  const router = useRouter()

  useEffect(() => {
    if (user) {
      router.push('/events')
    }
  }, [user, router])

  const handleLogin = async (e) => {
    e.preventDefault()

    // --- ADD THIS LOG ---
    console.log(
      `[Login Page] Attempting login with Email: "${email}" | Password: "${password}"`
    )
    // --------------------

    setIsError(false)
    const loginSuccessful = await login(email, password)
    if (!loginSuccessful) {
      setIsError(true)
    }
  }

  if (user || isLoading) {
    return <LoadingOverlay isLoading={true} text="Authorizing..." />
  }

  return (
    <Card
      className={cn(
        'w-full max-w-sm',
        'bg-card/80 backdrop-blur-sm border-border',
        'shadow-2xl shadow-black/50',
        isError ? 'animate-shake' : ''
      )}
      onAnimationEnd={() => setIsError(false)}
    >
      <CardHeader className="items-center text-center space-y-2">
        <div className="relative flex items-center justify-center w-16 h-16 bg-gradient-to-br from-background to-secondary border border-border rounded-full">
          <Shield className="h-8 w-8 text-primary" />
        </div>
        <div className="space-y-1">
          <h1 className="text-2xl font-bold">Secure Access Portal</h1>
          <p className="text-muted-foreground text-sm">Authentication Required</p>
        </div>
      </CardHeader>
      <form onSubmit={handleLogin}>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="email" className="flex items-center gap-2">
              <Mail className="h-4 w-4" />
              Email Address
            </Label>
            <Input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              disabled={isLoading}
              placeholder="Enter your email..."
              className="h-12 text-base"
              required
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="password" className="flex items-center gap-2">
              <KeyRound className="h-4 w-4" />
              Password
            </Label>
            <Input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              disabled={isLoading}
              placeholder="Enter your password..."
              className="h-12 text-base"
              required
            />
          </div>
        </CardContent>
        <CardFooter>
          <Button
            type="submit"
            disabled={isLoading || !email.trim() || !password.trim()}
            className="w-full h-12 text-base font-bold"
          >
            <Shield className="mr-2 h-5 w-5" />
            Authorize Access
          </Button>
        </CardFooter>
      </form>
    </Card>
  )
}

```

## 📄 src/app/not-found.jsx
*Lines: 14, Size: 435 Bytes*

```jsx
// apps/client/src/app/not-found.jsx
export default function NotFound() {
  // The not-found component renders within the root layout,
  // so it does not need its own <html> or <body> tags.
  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <h1 className="text-4xl font-bold">404 - Not Found</h1>
      <a href="/" className="mt-4 text-blue-500">
        Go Home
      </a>
    </div>
  )
}

```

## 📄 src/app/page.js
*Lines: 21, Size: 649 Bytes*

```javascript
// apps/client/src/app/page.js
'use server'

import { cookies } from 'next/headers'
import { verifySession } from '@/lib/auth/server'
import { ClientRedirect } from '@/components/client/shared/ClientRedirect'
import LandingPage from '@/components/landing/LandingPage.jsx'

export default async function RootPage() {
  const cookieStore = cookies()
  const { user } = await verifySession(cookieStore)

  if (user) {
    // If user is logged in, immediately redirect them to the main app interface.
    return <ClientRedirect destination="/events" />
  }

  // If no user is logged in, show the new commercial landing page.
  return <LandingPage />
}

```

## 📄 src/app/providers.jsx
*Lines: 18, Size: 434 Bytes*

```jsx
// apps/client/src/app/providers.jsx
'use client'

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { useState } from 'react'
import { Toaster } from '@/components/shared'

export function AppProviders({ children }) {
  const [queryClient] = useState(() => new QueryClient())

  return (
    <QueryClientProvider client={queryClient}>
      {children}
      <Toaster />
    </QueryClientProvider>
  )
}

```

## 📄 src/components/admin/AdminHeader.jsx
*Lines: 44, Size: 1.48 KB*

```jsx
// apps/client/src/components/admin/AdminHeader.jsx (version 2.0 - Restored & Pathed)
'use client'

import Link from 'next/link'
import { Button } from '@components/shared'
import { Shield, LogOut, ArrowLeft } from 'lucide-react'
import { useAuth } from '@headlines/auth/react'

export function AdminHeader() {
  const { user, logout } = useAuth()

  return (
    <header className="bg-slate-900/50 border-b border-slate-700/50 backdrop-blur-sm sticky top-0 z-40">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-16">
          <div className="flex items-center gap-4">
            <Shield className="h-6 w-6 text-blue-400" />
            <div className="hidden sm:block">
              <h1 className="text-lg font-semibold text-slate-100">
                Admin Command Center
              </h1>
              <p className="text-xs text-slate-400">
                Logged in as {user?.email || '...'}
              </p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Button variant="ghost" asChild>
              <Link href="/events">
                <ArrowLeft className="mr-2 h-4 w-4" />
                Back to App
              </Link>
            </Button>
            <Button variant="outline" size="sm" onClick={logout}>
              <LogOut className="mr-2 h-4 w-4" />
              Logout
            </Button>
          </div>
        </div>
      </div>
    </header>
  )
}

```

## 📄 src/components/admin/AdminNavTabs.jsx
*Lines: 39, Size: 1.02 KB*

```jsx
// apps/client/src/components/admin/AdminNavTabs.jsx (version 2.0 - Restored & Pathed)
'use client'

import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { Tabs, TabsList, TabsTrigger } from '@components/shared'
import { Users, Database } from 'lucide-react'

const ADMIN_TABS = [
  { value: 'users', label: 'User Management', icon: Users, href: '/admin/users' },
  {
    value: 'sources',
    label: 'Source Management',
    icon: Database,
    href: '/admin/sources',
    disabled: false,
  },
]

export function AdminNavTabs() {
  const pathname = usePathname()
  const currentView = pathname.split('/')[2] || 'users'

  return (
    <Tabs value={currentView}>
      <TabsList>
        {ADMIN_TABS.map((tab) => (
          <TabsTrigger key={tab.value} value={tab.value} asChild disabled={tab.disabled}>
            <Link href={tab.href}>
              <tab.icon className="mr-2 h-4 w-4" />
              {tab.label}
            </Link>
          </TabsTrigger>
        ))}
      </TabsList>
    </Tabs>
  )
}

```

## 📄 src/components/admin/RelationshipManager.jsx
*Lines: 116, Size: 3.56 KB*

```jsx
// apps/admin/src/app/_components/relationships/RelationshipManager.jsx (version 2.0.0)
'use client'

import { useState } from 'react'
import {
  Button,
  Input,
  Label,
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from '../shared/elements'
import { toast } from 'sonner'
import { Link, Unlink, Plus, Loader2 } from 'lucide-react'
import {
  linkOpportunityToEventClient,
  unlinkOpportunityFromEventClient,
} from '@/lib/api-client'

export function RelationshipManager({ item, itemType, refetch }) {
  const [newItemId, setNewItemId] = useState('')
  const [isLoading, setIsLoading] = useState(false)

  const handleAdd = async () => {
    setIsLoading(true)
    let result
    if (itemType === 'event') {
      result = await linkOpportunityToEventClient(item._id, newItemId)
    } // Add else if for 'opportunity' here for bidirectional linking

    if (result.success) {
      toast.success('Relationship added.')
      setNewItemId('')
      refetch()
    } else {
      toast.error('Failed to add relationship', { description: result.error })
    }
    setIsLoading(false)
  }

  const handleRemove = async (relatedItemId) => {
    setIsLoading(true)
    let result
    if (itemType === 'event') {
      result = await unlinkOpportunityFromEventClient(item._id, relatedItemId)
    } // Add else if for 'opportunity' here

    if (result.success) {
      toast.success('Relationship removed.')
      refetch()
    } else {
      toast.error('Failed to remove relationship', { description: result.error })
    }
    setIsLoading(false)
  }

  const relatedItems = itemType === 'event' ? item.relatedOpportunities : item.events
  const relatedItemType = itemType === 'event' ? 'Opportunity' : 'Event'

  return (
    <Card>
      <CardHeader>
        <CardTitle>Manage Relationships</CardTitle>
        <CardDescription>Link this {itemType} to related items.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <Label>Existing {relatedItemType} Links</Label>
          <div className="space-y-2 mt-2">
            {relatedItems && relatedItems.length > 0 ? (
              relatedItems.map((related) => (
                <div
                  key={related._id}
                  className="flex items-center justify-between p-2 bg-secondary rounded-md"
                >
                  <div className="font-mono text-xs">{related._id}</div>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-7 w-7 text-destructive"
                    onClick={() => handleRemove(related._id)}
                  >
                    <Unlink className="h-4 w-4" />
                  </Button>
                </div>
              ))
            ) : (
              <p className="text-sm text-muted-foreground p-2">No relationships found.</p>
            )}
          </div>
        </div>
        <div>
          <Label htmlFor="new-item-id">Link New {relatedItemType} ID</Label>
          <div className="flex items-center gap-2 mt-2">
            <Input
              id="new-item-id"
              value={newItemId}
              onChange={(e) => setNewItemId(e.target.value)}
              placeholder={`Paste ${relatedItemType} ID here...`}
            />
            <Button onClick={handleAdd} disabled={isLoading || !newItemId}>
              {isLoading ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                <Plus className="h-4 w-4" />
              )}
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}

```

## 📄 src/components/admin/article-analysis-viewer.jsx
*Lines: 45, Size: 1.44 KB*

```jsx
// src/app/_components/article-analysis-viewer.jsx (version 1.1)
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@components/shared'
import { Button } from '@components/shared'
import { Loader2 } from 'lucide-react'

export default function ArticleAnalysisViewer({ article, open, onOpenChange }) {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl h-[80vh] flex flex-col">
        <DialogHeader>
          <DialogTitle>Analyze Article Content</DialogTitle>
          <DialogDescription className="truncate">
            Target URL:{' '}
            <a href={article?.link} target="_blank" className="underline">
              {article?.link}
            </a>
          </DialogDescription>
        </DialogHeader>

        <div className="flex-grow flex flex-col items-center justify-center text-muted-foreground space-y-4">
          <Loader2 className="w-12 h-12 animate-spin gemini-text" />
          <p className="font-semibold">Feature Coming Soon</p>
          <p className="text-sm text-center">
            This module will allow you to test and find the perfect selector for
            extracting article content.
          </p>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/components/admin/main-nav.jsx
*Lines: 105, Size: 3.17 KB*

```jsx
'use client'

import Link from 'next/link'
import { usePathname } from 'next/navigation'
import React from 'react'
import {
  BotMessageSquare,
  Users,
  Rss,
  Gauge,
  Settings,
  Zap,
  Target,
  FileText,
  Code,
  ArrowLeftCircle,
} from 'lucide-react'
import { cn } from '@headlines/utils-shared'
import { Separator } from '@/components/shared'
import { ThemeToggle } from './theme-toggle'

const navSections = [
  {
    items: [
      { name: 'Dashboard', href: '/admin/dashboard', icon: Gauge },
      { name: 'Scraper IDE', href: '/admin/scraper-ide', icon: Code },
      { name: 'Users', href: '/admin/users', icon: Users },
      { name: 'Watchlist', href: '/admin/watchlist', icon: Rss },
    ],
  },
  {
    items: [
      { name: 'Events', href: '/admin/events', icon: Zap },
      { name: 'Articles', href: '/admin/articles', icon: FileText },
      { name: 'Opportunities', href: '/admin/opportunities', icon: Target },
    ],
  },
  {
    items: [
      // The "Countries" item has been removed from this section.
      { name: 'Settings', href: '/admin/settings', icon: Settings },
    ],
  },
]

export default function MainNav() {
  const pathname = usePathname()

  const isCurrent = (href) => {
    if (href === '/admin/dashboard') {
      return pathname === '/admin/dashboard'
    }
    return pathname.startsWith(href)
  }

  return (
    <nav className="hidden lg:flex w-[280px] bg-card border-r flex-col flex-shrink-0">
      <div className="p-4 border-b h-16 flex items-center gap-3">
        <BotMessageSquare className="w-8 h-8 text-primary flex-shrink-0" />
        <div>
          <h1 className="text-xl font-bold tracking-tighter">Headlines Admin</h1>
          <p className="text-sm text-muted-foreground">Command Center</p>
        </div>
      </div>
      <div className="flex-1 overflow-y-auto p-4">
        {navSections.map((section, index) => (
          <React.Fragment key={index}>
            <ul className="space-y-1">
              {section.items.map((item) => (
                <li key={item.name}>
                  <Link
                    href={item.href}
                    className={cn(
                      'flex items-center gap-3 px-3 py-2.5 text-sm font-medium rounded-md transition-colors',
                      isCurrent(item.href)
                        ? 'bg-primary/10 text-primary'
                        : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'
                    )}
                  >
                    <item.icon className="w-5 h-5" />
                    {item.name}
                  </Link>
                </li>
              ))}
            </ul>
            {index < navSections.length - 1 && <Separator className="my-4" />}
          </React.Fragment>
        ))}
      </div>
      <div className="p-4 border-t mt-auto space-y-2">
        <Link
          href="/events"
          className={cn(
            'flex items-center gap-3 px-3 py-2.5 text-sm font-medium rounded-md transition-colors text-muted-foreground hover:bg-accent hover:text-accent-foreground'
          )}
        >
          <ArrowLeftCircle className="w-5 h-5" />
          Back to Client App
        </Link>
        <ThemeToggle />
      </div>
    </nav>
  )
}

```

## 📄 src/components/admin/source-list.jsx
*Lines: 211, Size: 6.75 KB*

```jsx
// apps/admin/src/app/_components/source-list.jsx (version 3.0.0)
'use client'

import { useState, useMemo } from 'react'
import {
  Button,
  Input,
  ScrollArea,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  Badge,
} from '@/components/shared'
import {
  PlusCircle,
  DatabaseZap,
  ServerCrash,
  Newspaper,
  ShieldAlert,
  Loader2,
  Ban,
  ExternalLink,
} from 'lucide-react'
import { cn } from '@headlines/utils-shared'

function DynamicStatus({ source, status }) {
  if (status?.checking) {
    return <Loader2 className="w-4 h-4 text-muted-foreground animate-spin" />
  }
  if (status && typeof status.count === 'number') {
    if (status.count > 0) {
      return (
        <Badge
          variant="secondary"
          className="bg-green-500/20 text-green-400 border-green-500/30"
        >
          {status.count}
        </Badge>
      )
    }
    return <Badge variant="destructive">{status.count}</Badge>
  }
  return <SourceStatusIndicator source={source} />
}

function SourceStatusIndicator({ source }) {
  let status = 'healthy'
  let title = 'Healthy'

  if (source.status === 'paused') {
    status = 'paused'
    title = 'Paused'
  } else if (source.status === 'under_review') {
    status = 'under_review'
    title = 'Under Review'
  } else if (
    source.analytics?.totalRuns > 0 &&
    source.analytics?.lastRunHeadlineCount === 0
  ) {
    status = 'failed'
    title = 'Failing: Last run found 0 headlines.'
  }

  const color = {
    paused: 'bg-gray-500',
    under_review: 'bg-yellow-500',
    failed: 'bg-red-500',
    healthy: 'bg-green-500',
  }[status]

  return (
    <div
      className={cn('w-2 h-2 rounded-full flex-shrink-0 transition-colors', color)}
      title={title}
    />
  )
}

export default function SourceList({
  sources,
  isLoading,
  selectedSourceId,
  onSelectSource,
  onAddSource,
  onCheckFiltered,
  onStopCheck,
  isCheckingAll,
  liveStatuses,
  countries,
}) {
  const [searchTerm, setSearchTerm] = useState('')
  const [countryFilter, setCountryFilter] = useState('all')

  const filteredSources = useMemo(() => {
    if (!sources) return []
    return sources
      .filter((source) => countryFilter === 'all' || source.country === countryFilter)
      .filter((source) => source.name.toLowerCase().includes(searchTerm.toLowerCase()))
  }, [sources, searchTerm, countryFilter])

  return (
    <aside className="w-[350px] bg-black/20 border-r border-white/10 flex flex-col flex-shrink-0">
      <div className="p-4 border-b border-white/10 space-y-2 h-[100px] flex flex-col justify-center">
        <div className="flex items-center gap-3">
          <Newspaper className="w-8 h-8 gemini-text flex-shrink-0" />
          <div>
            <h1 className="text-xl font-bold tracking-tighter">Source IDE</h1>
            <p className="text-sm text-muted-foreground">
              {sources ? `${sources.length} sources` : 'Loading...'}
            </p>
          </div>
        </div>
      </div>
      <div className="p-4 space-y-3">
        <Button
          className="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold"
          onClick={onAddSource}
        >
          <PlusCircle className="mr-2 h-4 w-4" /> Add New Source
        </Button>
        {isCheckingAll ? (
          <Button variant="destructive" className="w-full" onClick={onStopCheck}>
            <Ban className="mr-2 h-4 w-4" /> Stop Checking
          </Button>
        ) : (
          <Button
            variant="outline"
            className="w-full"
            onClick={() => onCheckFiltered(filteredSources)}
          >
            <ShieldAlert className="mr-2 h-4 w-4" /> Check Filtered
          </Button>
        )}
        <div className="flex gap-2 justify-between">
          <Input
            placeholder="Search..."
            className="bg-background/50 placeholder:text-muted-foreground flex-1"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <Select value={countryFilter} onValueChange={setCountryFilter}>
            <SelectTrigger className="bg-background/50 flex-1">
              <SelectValue placeholder="All Countries" />
            </SelectTrigger>
            <SelectContent>
              {countries.map((c) => (
                <SelectItem key={c} value={c}>
                  {c === 'all' ? 'All Countries' : c}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>
      <div className="flex-grow min-h-0">
        <ScrollArea className="h-full">
          <div className="p-2 space-y-1">
            {isLoading ? (
              <div className="text-center text-sm text-muted-foreground py-10 animate-pulse">
                Loading Sources...
              </div>
            ) : !sources ? (
              <div className="p-4 flex flex-col items-center justify-center h-full text-muted-foreground">
                <ServerCrash className="w-10 h-10 mb-4" />
                <h3 className="font-semibold">Failed to load sources</h3>
              </div>
            ) : filteredSources.length > 0 ? (
              filteredSources.map((source) => (
                <div key={source._id} className="flex items-center gap-1">
                  <Button
                    variant={selectedSourceId === source._id ? 'secondary' : 'ghost'}
                    className="w-full justify-start items-center gap-3 h-10 text-base"
                    onClick={() => onSelectSource(source._id)}
                  >
                    <div className="w-8 h-4 flex items-center justify-center">
                      <DynamicStatus source={source} status={liveStatuses[source._id]} />
                    </div>
                    <span className="flex-grow text-left truncate">{source.name}</span>
                    <span className="text-xs text-muted-foreground flex-shrink-0">
                      {source.country}
                    </span>
                  </Button>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-10 w-10 flex-shrink-0 text-muted-foreground hover:text-foreground"
                    onClick={(e) => {
                      e.stopPropagation()
                      window.open(source.sectionUrl, '_blank')
                    }}
                    aria-label="Open source URL in new tab"
                  >
                    <ExternalLink className="w-4 h-4" />
                  </Button>
                </div>
              ))
            ) : (
              <div className="text-center text-sm text-muted-foreground py-10">
                <DatabaseZap className="mx-auto h-8 w-8 mb-2" />
                <p>No sources match filters.</p>
              </div>
            )}
          </div>
        </ScrollArea>
      </div>
    </aside>
  )
}

```

## 📄 src/components/admin/test-results-viewer.jsx
*Lines: 75, Size: 2.61 KB*

```jsx
// apps/admin/src/app/_components/test-results-viewer.jsx (version 2.0.0)
'use client'

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  ScrollArea,
  Button,
} from '@/components/shared'
import { ExternalLink, XCircle } from 'lucide-react'

export default function TestResultsViewer({ results, open, onOpenChange }) {
  const hasResults = results && results.count > 0

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl h-[80vh] flex flex-col">
        <DialogHeader>
          <DialogTitle>Scrape Test Results</DialogTitle>
          <DialogDescription>
            Found {results?.count ?? 0} headlines using the provided configuration.
          </DialogDescription>
        </DialogHeader>
        <div className="flex-grow overflow-hidden">
          <ScrollArea className="h-full pr-4">
            {hasResults ? (
              <ul className="space-y-3">
                {results.headlines.map((item, index) => (
                  <li
                    key={index}
                    className="p-3 bg-secondary/50 rounded-md flex items-center justify-between gap-4"
                  >
                    <div className="flex-grow">
                      <p className="font-medium">{item.headline}</p>
                      <a
                        href={item.link}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-xs text-muted-foreground hover:text-foreground transition-colors flex items-center gap-1"
                      >
                        <ExternalLink className="w-3 h-3" />
                        {item.link}
                      </a>
                    </div>
                  </li>
                ))}
              </ul>
            ) : (
              <div className="flex flex-col items-center justify-center h-full text-muted-foreground">
                <XCircle className="w-12 h-12 mb-4 text-destructive" />
                <p className="font-semibold">No Headlines Found</p>
                <p className="text-sm">
                  Check your selectors or the source website's structure.
                </p>
                {results?.error && (
                  <p className="text-xs mt-4 max-w-md text-center">
                    Error: {results.details}
                  </p>
                )}
              </div>
            )}
          </ScrollArea>
        </div>
        <DialogFooter>
          <Button onClick={() => onOpenChange(false)}>Close</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/components/admin/theme-provider.jsx
*Lines: 11, Size: 339 Bytes*

```jsx
// apps/admin/src/app/_components/theme-provider.jsx (version 1.0)
'use client'

import * as React from 'react'
// import { ThemeProvider as NextThemesProvider } from 'next-themes'

export function ThemeProvider({ children, ...props }) {
  // return <NextThemesProvider {...props}>{children}</NextThemesProvider>
  return <>{children</>
}

```

## 📄 src/components/admin/theme-toggle.jsx
*Lines: 35, Size: 1.2 KB*

```jsx
// Full Path: headlines/src/components/admin/theme-toggle.jsx
'use client'

import * as React from 'react'
import { Moon, Sun } from 'lucide-react'
// import { useTheme } from 'next-themes'
import {
  Button,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/shared' // CORRECTED IMPORT

export function ThemeToggle() {
  // const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        {/* <DropdownMenuItem onClick={() => setTheme('light')}>Light</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('dark')}>Dark</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('system')}>System</DropdownMenuItem> */}
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

```

## 📄 src/components/client/articles/ArticleCard.jsx
*Lines: 203, Size: 7.91 KB*

```jsx
// File: apps/client/src/components/client/articles/ArticleCard.jsx (Multi-country support)
'use client'

import { useState, useTransition } from 'react'
import {
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
  Badge,
  Button,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
  ConfirmationDialog,
} from '@/components/shared'
import { Trash2, ExternalLink, Users, Mail, Building, Briefcase } from 'lucide-react'
import { getCountryFlag } from '@headlines/utils-shared'
import { SwipeToDelete } from '../shared/SwipeToDelete'
import useAppStore from '@/lib/store/use-app-store'
import { cn } from '@headlines/utils-shared'

const getRelevanceBadgeClass = (score) => {
  if (score >= 90)
    return 'bg-red-500/20 text-red-300 border border-red-500/30 shadow-lg shadow-red-500/10'
  if (score >= 75)
    return 'bg-blue-500/20 text-blue-300 border border-blue-500/30 shadow-lg shadow-blue-500/10'
  return 'bg-slate-500/20 text-slate-300 border border-slate-500/30'
}

export const ArticleCard = ({ article, onDelete }) => {
  const [isPending, startTransition] = useTransition()
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const skipConfirmation = useAppStore(
    (state) => state.deletePreferences.skipArticleConfirmation
  )

  const handleDelete = () => {
    startTransition(() => {
      onDelete()
    })
  }

  const handleDeleteClick = (e) => {
    e.stopPropagation()
    if (skipConfirmation) {
      handleDelete()
    } else {
      setIsDialogOpen(true)
    }
  }

  const flags = (article.country || []).map((c) => getCountryFlag(c)).join(' ') // MODIFIED
  const relevanceScore = article.relevance_article || article.relevance_headline

  return (
    <div className="relative w-full">
      <AccordionItem
        value={article._id}
        className="border-none overflow-hidden rounded-xl"
      >
        <SwipeToDelete onDelete={handleDelete}>
          <div
            className={cn(
              'p-4 relative z-10 bg-cover bg-center',
              article.imageUrl && 'min-h-[150px] flex flex-col justify-end'
            )}
            style={
              article.imageUrl ? { backgroundImage: `url(${article.imageUrl})` } : {}
            }
          >
            {article.imageUrl && (
              <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/50 to-transparent z-0" />
            )}
            <div className="relative z-10">
              <TooltipProvider delayDuration={100}>
                <div className="flex items-center justify-between gap-2 mb-2">
                  <div className="flex items-center gap-2 min-w-0">
                    <Badge
                      className={`text-sm font-bold px-2.5 py-1 ${getRelevanceBadgeClass(
                        relevanceScore
                      )}`}
                    >
                      {relevanceScore}
                    </Badge>
                    <span className="text-lg hidden sm:inline">{flags}</span>{' '}
                    {/* MODIFIED */}
                    <p className="text-xs sm:text-sm text-slate-300 truncate shadow-black drop-shadow-lg">
                      {article.newspaper}
                    </p>
                  </div>
                  <div className="flex items-center flex-shrink-0">
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={(e) => {
                            e.stopPropagation()
                            window.open(article.link, '_blank')
                          }}
                          className="text-slate-300 hover:text-blue-400 bg-black/20 hover:bg-blue-500/20 h-8 w-8"
                        >
                          <ExternalLink className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>Open in new tab</TooltipContent>
                    </Tooltip>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          disabled={isPending}
                          onClick={handleDeleteClick}
                          className="text-slate-300 hover:text-red-400 bg-black/20 hover:bg-red-500/20 h-8 w-8"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>Delete article</TooltipContent>
                    </Tooltip>
                  </div>
                </div>

                <AccordionTrigger className="p-0 hover:no-underline text-left">
                  <div className="flex-grow min-w-0">
                    <p className="font-serif font-bold text-base sm:text-lg text-white line-clamp-3 shadow-black drop-shadow-lg">
                      <span className="text-lg sm:hidden mr-2">{flags}</span>{' '}
                      {/* MODIFIED */}
                      {article.headline_en || `(en N/S): ${article.headline}`}
                    </p>
                  </div>
                </AccordionTrigger>
              </TooltipProvider>
            </div>
          </div>
        </SwipeToDelete>
        <AccordionContent className="p-4 pt-0">
          <div className="border-t border-slate-700/50 pt-4 mt-2 space-y-4">
            {article.assessment_article && (
              <div>
                <h4 className="font-semibold text-sm text-slate-300 mb-1">
                  Intelligence Analysis
                </h4>
                <p className="text-sm text-slate-400 italic break-words">
                  "{article.assessment_article}"
                </p>
              </div>
            )}
            {article.key_individuals && article.key_individuals.length > 0 && (
              <div>
                <h4 className="font-semibold text-sm text-slate-300 mb-2 border-b border-slate-700 pb-1">
                  Key Individuals
                </h4>
                <div className="space-y-3 mt-2">
                  {article.key_individuals.map((person, index) => (
                    <div key={index} className="p-3 rounded-md bg-slate-800/50">
                      <p className="font-bold text-slate-100 flex items-center gap-2">
                        <Users className="h-4 w-4 text-slate-400" /> {person.name}
                      </p>
                      <div className="pl-6 space-y-1 mt-1 text-sm text-slate-400">
                        {person.role_in_event && (
                          <p className="flex items-center gap-2">
                            <Briefcase className="h-3 w-3" /> {person.role_in_event}
                          </p>
                        )}
                        {person.company && (
                          <p className="flex items-center gap-2">
                            <Building className="h-3 w-3" /> {person.company}
                          </p>
                        )}
                        {person.email_suggestion && (
                          <a
                            href={`mailto:${person.email_suggestion}`}
                            className="flex items-center gap-2 text-blue-400 hover:underline"
                          >
                            <Mail className="h-3 w-3" /> {person.email_suggestion}
                          </a>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </AccordionContent>
      </AccordionItem>

      <ConfirmationDialog
        open={isDialogOpen}
        onOpenChange={setIsDialogOpen}
        onConfirm={handleDelete}
        isPending={isPending}
        itemType="article"
        itemDescription={article.headline_en || article.headline}
        preferenceKey="skipArticleConfirmation"
      />
    </div>
  )
}

```

## 📄 src/components/client/articles/ArticleListWrapper.jsx
*Lines: 42, Size: 1.44 KB*

```jsx
// File: apps/client/src/components/client/ArticleListWrapper.jsx

'use client'

import { Accordion } from '@/components/shared'
import { ArticleCard } from './ArticleCard'
import { AnimatePresence, motion } from 'framer-motion'
import { AnimatedList, itemVariants } from '../shared/AnimatedList'
import { cn } from '@headlines/utils-shared'

export function ArticleListWrapper({ items, onDelete }) {
  return (
    <Accordion type="single" collapsible>
      <AnimatedList className="w-full space-y-2">
        <AnimatePresence>
          {items.map((article) => {
            const isHighRelevance =
              (article.relevance_article || article.relevance_headline) > 69
            return (
              <motion.div
                key={article._id}
                variants={itemVariants}
                exit={itemVariants.exit}
                layout
                whileHover={{ y: -2 }}
                whileTap={{ scale: 0.98 }}
                className={cn(
                  'rounded-xl bg-gradient-to-br from-slate-900 to-slate-800/60 shadow-lg shadow-black/40 border border-slate-700',
                  isHighRelevance && 'card-glow impatient-wobble',
                  'min-w-full sm:min-w-[480px]'
                )}
              >
                <ArticleCard article={article} onDelete={() => onDelete(article._id)} />
              </motion.div>
            )
          })}
        </AnimatePresence>
      </AnimatedList>
    </Accordion>
  )
}

```

## 📄 src/components/client/chat/ChatInput.jsx
*Lines: 51, Size: 1.29 KB*

```jsx
// src/components/chat/ChatInput.jsx (version 2.0)
import { Button } from '@/components/shared/elements'
import { Send, Loader2 } from 'lucide-react'
import Textarea from 'react-textarea-autosize'

export function ChatInput({
  input,
  handleInputChange,
  handleSubmit,
  isLoading,
  inputRef,
}) {
  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSubmit(e)
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="flex items-end gap-2 p-4 border-t border-white/10"
    >
      <Textarea
        ref={inputRef}
        value={input}
        onChange={handleInputChange}
        onKeyDown={handleKeyDown}
        placeholder="Ask a follow-up question..."
        disabled={isLoading}
        className="flex-grow resize-none bg-slate-900/80 border border-slate-700 rounded-lg shadow-sm p-3 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all"
        minRows={1}
        maxRows={5}
      />
      <Button
        type="submit"
        disabled={isLoading || !input.trim()}
        className="h-12 w-12 flex-shrink-0"
        size="icon"
      >
        {isLoading ? (
          <Loader2 className="h-5 w-5 animate-spin" />
        ) : (
          <Send className="h-5 w-5" />
        )}
      </Button>
    </form>
  )
}

```

## 📄 src/components/client/chat/ChatLoadingIndicator.jsx
*Lines: 66, Size: 2.18 KB*

```jsx
// src/components/chat/ChatLoadingIndicator.jsx (version 2.0)
'use client'

import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Bot, Sparkles } from 'lucide-react'

const statuses = [
  'Analyzing query...',
  'Searching internal database...',
  'Consulting Wikipedia...',
  'Scanning web results...',
  'Synthesizing response...',
  'Performing final checks...',
]

/**
 * A self-animating loading indicator for the chat that cycles through
 * a predefined list of statuses to give a sense of progress.
 */
export function ChatLoadingIndicator() {
  const [statusIndex, setStatusIndex] = useState(0)

  useEffect(() => {
    // This effect runs only once on mount to start the interval.
    const interval = setInterval(() => {
      setStatusIndex((prevIndex) => (prevIndex + 1) % statuses.length)
    }, 1800) // Change status every 1.8 seconds

    // Cleanup function to clear the interval when the component unmounts.
    return () => clearInterval(interval)
  }, [])

  return (
    <div className="flex items-start gap-4">
      <div className="flex-shrink-0 w-8 h-8 rounded-full bg-blue-500/20 text-blue-300 flex items-center justify-center">
        <Bot className="h-5 w-5" />
      </div>
      <div className="px-4 py-3 rounded-xl max-w-[85%] bg-slate-800">
        <div className="flex items-center gap-3 text-sm text-slate-400">
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}
          >
            <Sparkles className="h-4 w-4 text-yellow-400" />
          </motion.div>
          <div className="relative h-5 w-52 overflow-hidden">
            <AnimatePresence initial={false}>
              <motion.p
                key={statusIndex}
                initial={{ opacity: 0, y: -15 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: 15 }}
                transition={{ duration: 0.3, ease: 'easeInOut' }}
                className="absolute inset-0 italic"
              >
                {statuses[statusIndex]}
              </motion.p>
            </AnimatePresence>
          </div>
        </div>
      </div>
    </div>
  )
}

```

## 📄 src/components/client/chat/ChatManager.jsx
*Lines: 47, Size: 1.3 KB*

```jsx
'use client'

import { useEffect } from 'react'
import { ChatSidebar } from './ChatSidebar'
import { ChatView } from './ChatView'
import useAppStore, { useHasHydrated } from '@/lib/store/use-app-store'
import { Loader2 } from 'lucide-react'

export function ChatManager() {
  const hasHydrated = useHasHydrated()

  const { chats, activeChatId, createChat, selectChat, init } = useAppStore()

  useEffect(() => {
    if (hasHydrated) {
      init()
    }
  }, [hasHydrated, init])

  if (!hasHydrated || !activeChatId) {
    return (
      <div className="flex items-center justify-center h-full text-slate-500">
        <Loader2 className="h-6 w-6 animate-spin mr-3" />
        <p>Initializing Chat Interface...</p>
      </div>
    )
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-[280px_1fr] h-full gap-4">
      <div className="hidden md:flex md:flex-col">
        <ChatSidebar
          chats={chats}
          activeChatId={activeChatId}
          createChat={createChat}
          selectChat={selectChat}
        />
      </div>
      {/*
        THE FIX: ChatView is now keyed to the activeChatId and receives only that ID.
        It will be responsible for fetching its own messages from the store.
      */}
      {activeChatId && <ChatView key={activeChatId} chatId={activeChatId} />}
    </div>
  )
}

```

## 📄 src/components/client/chat/ChatMessage.jsx
*Lines: 77, Size: 2.78 KB*

```jsx
// src/components/chat/ChatMessage.jsx (version 2.2)
import React from 'react'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import rehypeRaw from 'rehype-raw'
import { cn } from '@headlines/utils-shared'
import { User, Bot, ChevronsUpDown } from 'lucide-react'
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/shared/elements'
import { ChatLoadingIndicator } from './ChatLoadingIndicator'

export function ChatMessage({ message, onAccordionToggle }) {
  const isUser = message.role === 'user'

  return (
    <div className={cn('flex items-start gap-4', isUser && 'justify-end')}>
      {!isUser && (
        <div className="flex-shrink-0 w-8 h-8 rounded-full bg-blue-500/20 text-blue-300 flex items-center justify-center">
          <Bot className="h-5 w-5" />
        </div>
      )}
      <div
        className={cn(
          'px-4 py-3 rounded-xl max-w-[85%]',
          isUser ? 'bg-slate-700' : 'bg-slate-800'
        )}
      >
        {!isUser && (message.isThinking || message.thoughts) && (
          <Accordion
            type="single"
            collapsible
            className="w-full mb-2"
            onValueChange={onAccordionToggle}
          >
            <AccordionItem value="item-1" className="border-b border-slate-700/50">
              <AccordionTrigger className="py-2 text-xs text-slate-400 hover:no-underline">
                <div className="flex items-center gap-2">
                  <ChevronsUpDown className="h-3 w-3" />
                  View Thoughts
                </div>
              </AccordionTrigger>
              <AccordionContent className="pt-2 pb-0">
                {message.isThinking ? (
                  <ChatLoadingIndicator />
                ) : (
                  <div className="prose prose-xs prose-invert max-w-none text-slate-400 bg-black/20 p-3 rounded-md">
                    <ReactMarkdown>{`\`\`\`markdown\n${message.thoughts}\n\`\`\``}</ReactMarkdown>
                  </div>
                )}
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        )}

        {!message.isThinking && message.content && (
          <div className="overflow-x-auto custom-scrollbar">
            <div className="prose prose-sm prose-invert max-w-none prose-p:my-1 prose-headings:my-2 prose-ul:my-2 prose-li:my-0 text-slate-200">
              <ReactMarkdown remarkPlugins={[remarkGfm]} rehypePlugins={[rehypeRaw]}>
                {message.content}
              </ReactMarkdown>
            </div>
          </div>
        )}
      </div>
      {isUser && (
        <div className="flex-shrink-0 w-8 h-8 rounded-full bg-slate-500/20 text-slate-300 flex items-center justify-center">
          <User className="h-5 w-5" />
        </div>
      )}
    </div>
  )
}

```

## 📄 src/components/client/chat/ChatScrollAnchor.jsx
*Lines: 21, Size: 538 Bytes*

```jsx
// src/components/chat/ChatScrollAnchor.jsx (version 1.1)
'use client'

import { useRef, useEffect, forwardRef } from 'react'

export const ChatScrollAnchor = forwardRef(function ChatScrollAnchor({ messages }, ref) {
  const internalRef = useRef(null)
  const anchorRef = ref || internalRef

  useEffect(() => {
    if (anchorRef.current) {
      anchorRef.current.scrollIntoView({
        block: 'start',
        behavior: 'smooth',
      })
    }
  }, [messages, anchorRef])

  return <div ref={anchorRef} className="h-px w-full" />
})

```

## 📄 src/components/client/chat/ChatSidebar.jsx
*Lines: 36, Size: 1.2 KB*

```jsx
// src/components/chat/ChatSidebar.jsx (version 1.0)
'use client'

import { Button } from '@/components/shared/elements'
import { PlusCircle, MessageSquare } from 'lucide-react'
import { cn } from '@headlines/utils-shared'

export function ChatSidebar({ chats, activeChatId, createChat, selectChat }) {
  return (
    <div className="flex flex-col h-full bg-slate-900/50 border-r border-slate-700/50 p-2">
      <Button onClick={createChat} className="mb-4">
        <PlusCircle className="mr-2 h-4 w-4" />
        New Chat
      </Button>
      <div className="flex-grow overflow-y-auto custom-scrollbar pr-1">
        <div className="flex flex-col gap-1">
          {chats.map((chat) => (
            <Button
              key={chat.id}
              variant="ghost"
              onClick={() => selectChat(chat.id)}
              className={cn(
                'w-full justify-start text-left truncate',
                activeChatId === chat.id && 'bg-blue-500/20 text-blue-200'
              )}
            >
              <MessageSquare className="mr-2 h-4 w-4 flex-shrink-0" />
              <span className="truncate">{chat.title}</span>
            </Button>
          ))}
        </div>
      </div>
    </div>
  )
}

```

## 📄 src/components/client/chat/ChatView.jsx
*Lines: 156, Size: 5.15 KB*

```jsx
'use client'

import { useState, useRef, useCallback, useEffect } from 'react'
import { useMutation } from '@tanstack/react-query'
import { toast } from 'sonner'
import { Card } from '@/components/shared'
import { ChatMessage } from '@/components/client/chat/ChatMessage'
import { ChatInput } from '@/components/client/chat/ChatInput'
import { ChatScrollAnchor } from '@/components/client/chat/ChatScrollAnchor'
import useAppStore from '@/lib/store/use-app-store'
import { generateChatTitle } from '@/lib/api-client'

async function postChatMessage({ messagesForApi }) {
  const sanitizedMessages = messagesForApi.map(({ role, content }) => ({ role, content }))
  const response = await fetch('/api/chat', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ messages: sanitizedMessages }),
  })
  if (!response.ok) {
    const errorData = await response.json()
    throw new Error(errorData.error || 'Failed to get a response from the server.')
  }
  return response.json()
}

export function ChatView({ chatId }) {
  const [input, setInput] = useState('')
  const inputRef = useRef(null)
  const scrollAnchorRef = useRef(null)

  // --- THE FIX: ChatView gets its own data and actions from the store ---
  const {
    updateChatTitle,
    chatContextPrompt,
    setChatContextPrompt,
    getMessagesForChat,
    setMessagesForChat,
  } = useAppStore()

  const messages = getMessagesForChat(chatId) || []
  const setMessages = (newMessages) => setMessagesForChat(chatId, newMessages)
  // -----------------------------------------------------------------------

  const { mutate: sendMessage, isPending: isThinking } = useMutation({
    mutationFn: postChatMessage,
    onMutate: async ({ userMessage }) => {
      const assistantMessageId = `asst_${Date.now()}`
      const newMessages = [
        ...messages,
        userMessage,
        { role: 'assistant', content: '', id: assistantMessageId, isThinking: true },
      ]
      setMessages(newMessages) // Update the global store directly
      return { assistantMessageId }
    },
    onSuccess: (assistantResponse, variables, context) => {
      const currentMessages = useAppStore.getState().getMessagesForChat(chatId)
      const updatedMessages = currentMessages.map((msg) =>
        msg.id === context.assistantMessageId
          ? {
              ...msg,
              content: assistantResponse.answer,
              thoughts: assistantResponse.thoughts,
              isThinking: false,
            }
          : msg
      )
      setMessages(updatedMessages)

      if (currentMessages.length === 1) {
        // Check before adding the assistant's reply
        generateChatTitle(updatedMessages).then((result) => {
          if (result.success) {
            updateChatTitle(chatId, result.title)
          }
        })
      }
    },
    onError: (error, variables, context) => {
      const currentMessages = useAppStore.getState().getMessagesForChat(chatId)
      setMessages(
        currentMessages.map((msg) =>
          msg.id === context.assistantMessageId
            ? {
                ...msg,
                content: `Error: ${error.message}`,
                isError: true,
                isThinking: false,
              }
            : msg
        )
      )
      toast.error(`An error occurred: ${error.message}`)
    },
  })

  const startMessageFlow = useCallback(
    (content) => {
      if (isThinking) return
      const userMessage = { role: 'user', content: content, id: `user_${Date.now()}` }
      const messagesForApi = [...messages, userMessage]
      sendMessage({ messagesForApi, userMessage })
    },
    [isThinking, messages, sendMessage]
  )

  const handleSubmit = (e) => {
    e.preventDefault()
    if (!input.trim()) return
    startMessageFlow(input)
    setInput('')
  }

  useEffect(() => {
    if (chatContextPrompt) {
      startMessageFlow(chatContextPrompt)
      setChatContextPrompt('')
    }
  }, [chatContextPrompt, startMessageFlow, setChatContextPrompt])

  useEffect(() => {
    if (!isThinking && inputRef.current) {
      setTimeout(() => inputRef.current.focus(), 100)
    }
  }, [isThinking])

  return (
    <div className="flex-grow flex flex-col justify-between h-full min-h-0">
      <Card className="bg-black/20 backdrop-blur-sm border border-white/10 shadow-2xl shadow-black/30 h-full flex flex-col">
        <div className="flex-grow overflow-y-auto p-4 space-y-6 custom-scrollbar">
          {messages.length === 0 && !isThinking && (
            <div className="flex flex-col items-center justify-center h-full text-slate-500">
              <p className="text-lg">Ask anything about the knowledge base.</p>
            </div>
          )}
          {messages.map((m, i) => (
            <ChatMessage key={m.id || `msg-${i}`} message={m} />
          ))}
          <ChatScrollAnchor ref={scrollAnchorRef} messages={messages} />
        </div>
        <div className="px-4 pb-4">
          <ChatInput
            inputRef={inputRef}
            input={input}
            setInput={setInput}
            handleInputChange={(e) => setInput(e.target.value)}
            handleSubmit={handleSubmit}
            isLoading={isThinking}
          />
        </div>
      </Card>
    </div>
  )
}

```

## 📄 src/components/client/countries/CountrySubscriptionEditor.jsx
*Lines: 108, Size: 3.56 KB*

```jsx
// File: apps/client/src/components/client/CountrySubscriptionEditor.jsx

'use client'

import { useState, useMemo } from 'react'
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
  Button,
  Badge,
  Input,
} from '@/components/shared'
import { PlusCircle, X, Search } from 'lucide-react'
import { getCountryFlag } from '@headlines/utils-shared'

export function CountrySubscriptionEditor({
  allCountries,
  selectedCountries,
  onSelectionChange,
}) {
  const [open, setOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')

  const availableCountries = useMemo(() => {
    const filtered = allCountries.filter((c) => !selectedCountries.includes(c.name))
    if (!searchQuery) return filtered
    return filtered.filter((c) =>
      c.name.toLowerCase().includes(searchQuery.toLowerCase())
    )
  }, [allCountries, selectedCountries, searchQuery])

  const handleAddCountry = (countryName) => {
    onSelectionChange([...selectedCountries, countryName].sort())
    setSearchQuery('')
    setOpen(false)
  }

  const handleRemoveCountry = (countryName) => {
    onSelectionChange(selectedCountries.filter((c) => c !== countryName))
  }

  return (
    <div className="space-y-3">
      <div className="flex flex-wrap gap-2 p-3 border rounded-md min-h-[40px] bg-slate-900/50 border-slate-700">
        {selectedCountries.length > 0 ? (
          selectedCountries.map((country) => (
            <Badge key={country} variant="secondary" className="text-base py-1 px-3">
              <span>{getCountryFlag(country)}</span>
              <span className="ml-2">{country}</span>
              <button
                onClick={() => handleRemoveCountry(country)}
                className="ml-2 rounded-full hover:bg-white/20 p-0.5"
              >
                <X className="h-3 w-3" />
              </button>
            </Badge>
          ))
        ) : (
          <p className="text-sm text-slate-500">No countries selected.</p>
        )}
      </div>

      <Popover open={open} onOpenChange={setOpen}>
        <PopoverTrigger asChild>
          <Button variant="outline">
            <PlusCircle className="mr-2 h-4 w-4" />
            Add Country
          </Button>
        </PopoverTrigger>
        <PopoverContent className="p-0 w-[300px]" align="start">
          <div className="p-2 border-b">
            <div className="relative">
              <Search className="absolute left-2 top-1/2 -translate-y-1/2 h-4 w-4 text-slate-500" />
              <Input
                placeholder="Search country..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-8"
              />
            </div>
          </div>
          <div className="max-h-[300px] overflow-y-auto custom-scrollbar p-1">
            {availableCountries.length > 0 ? (
              availableCountries.map((country) => (
                <Button
                  key={country.name}
                  variant="ghost"
                  onClick={() => handleAddCountry(country.name)}
                  className="w-full justify-start flex items-center gap-2"
                >
                  <span>{getCountryFlag(country.name)}</span>
                  <span>{country.name}</span>
                  <span className="text-xs text-slate-500 ml-auto">
                    ({country.count})
                  </span>
                </Button>
              ))
            ) : (
              <p className="text-center text-sm text-slate-500 py-4">No results found.</p>
            )}
          </div>
        </PopoverContent>
      </Popover>
    </div>
  )
}

```

## 📄 src/components/client/countries/GlobalCountrySelector.jsx
*Lines: 136, Size: 4.59 KB*

```jsx
// apps/client/src/components/client/countries/GlobalCountrySelector.jsx (CORRECTED)
'use client'
import { useState, useMemo, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  Button,
  Input,
  Checkbox,
  ScrollArea,
} from '@/components/shared'
import { Globe, Save, Search } from 'lucide-react'
import { getCountryFlag } from '@headlines/utils-shared'
import { useAuth } from '@/lib/auth/client.js'
import { toast } from 'sonner'

export function GlobalCountrySelector({ allCountries }) {
  const [open, setOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const { user, updateUserPreferences } = useAuth()
  const [isSaving, setIsSaving] = useState(false)
  const [selectedInDialog, setSelectedInDialog] = useState([])
  const router = useRouter()

  useEffect(() => {
    if (open && user) {
      if (user.role === 'admin') {
        setSelectedInDialog(allCountries.map((c) => c.name))
      } else {
        setSelectedInDialog((user.countries || []).map((c) => c.name))
      }
    }
  }, [open, user, allCountries])

  const filteredCountries = useMemo(() => {
    if (!allCountries) return []
    if (!searchQuery) return allCountries
    return allCountries.filter((country) =>
      country.name.toLowerCase().includes(searchQuery.toLowerCase())
    )
  }, [allCountries, searchQuery])

  const handleSelect = (countryName) => {
    const newSelection = selectedInDialog.includes(countryName)
      ? selectedInDialog.filter((c) => c !== countryName)
      : [...selectedInDialog, countryName]
    setSelectedInDialog(newSelection.sort())
  }

  const handleSave = async () => {
    setIsSaving(true)
    const newSubscriptions = selectedInDialog.map((name) => ({ name, active: true }))
    await updateUserPreferences({ countries: newSubscriptions })
    toast.success('Country subscriptions updated.')

    router.refresh()

    setIsSaving(false)
    setOpen(false)
  }

  const renderIcon = () => {
    if (!user) return <Globe className="h-5 w-5" />
    const userCountries = user.countries || []
    if (userCountries.length === 1) {
      // DEFINITIVE FIX: Pass the .name property, not the whole object.
      return <span className="text-xl">{getCountryFlag(userCountries[0].name)}</span>
    }
    return <Globe className="h-5 w-5" />
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="ghost" size="icon" aria-label="Select Country Filter">
          {renderIcon()}
        </Button>
      </DialogTrigger>
      <DialogContent className="p-0 max-w-2xl">
        <div className="flex flex-col h-full">
          <DialogHeader className="p-4 border-b">
            <DialogTitle>Filter by Region</DialogTitle>
            <DialogDescription>
              Select from your subscribed countries to apply a global filter.
            </DialogDescription>
          </DialogHeader>
          <div className="p-2 border-b">
            <div className="relative">
              <Search className="absolute left-2 top-1/2 -translate-y-1/2 h-4 w-4 text-slate-500" />
              <Input
                placeholder="Search country..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-8"
              />
            </div>
          </div>
          <ScrollArea className="max-h-[50vh]">
            <div className="p-2 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-1">
              {filteredCountries.map((country) => (
                <Button
                  key={country.name}
                  variant="ghost"
                  onClick={() => handleSelect(country.name)}
                  className="w-full justify-start flex items-center gap-2"
                >
                  <Checkbox
                    checked={selectedInDialog.includes(country.name)}
                    className="mr-2"
                  />
                  <span>{getCountryFlag(country.name)}</span>
                  <span>{country.name}</span>
                  <span className="text-xs text-slate-500 ml-auto">
                    ({country.count})
                  </span>
                </Button>
              ))}
            </div>
          </ScrollArea>
          <div className="p-4 border-t flex justify-end">
            <Button onClick={handleSave} disabled={isSaving}>
              <Save className="mr-2 h-4 w-4" />
              {isSaving ? 'Saving...' : 'Save and Close'}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/components/client/events/EventCardDesktop.jsx
*Lines: 123, Size: 4.49 KB*

```jsx
// File: apps/client/src/components/client/events/EventCardDesktop.jsx (Handler Corrected)
'use client'

import {
  Badge,
  Button,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/shared'
import { Trash2, MessageSquarePlus, Users } from 'lucide-react'
import { getCountryFlag } from '@headlines/utils-shared'
import Image from 'next/image'

const getRelevanceBadgeClass = (score) => {
  if (score >= 90)
    return 'bg-red-500/20 text-red-300 border border-red-500/30 shadow-lg shadow-red-500/10'
  if (score >= 75)
    return 'bg-blue-500/20 text-blue-300 border border-blue-500/30 shadow-lg shadow-blue-500/10'
  return 'bg-slate-500/20 text-slate-300 border border-slate-500/30'
}

export function EventCardDesktop({
  event,
  onChat,
  onDelete,
  onShowIndividuals,
  isPending,
}) {
  if (!event) return null
  const flags = (event.country || []).map((c) => getCountryFlag(c)).join(' ')
  const primaryImageUrl = event.source_articles?.find((a) => a.imageUrl)?.imageUrl

  return (
    <div className="hidden sm:block">
      <TooltipProvider delayDuration={100}>
        <div className="flex items-start gap-6">
          <div className="flex flex-col items-center shrink-0">
            <Badge
              className={`text-xl font-bold px-4 py-2 ${getRelevanceBadgeClass(
                event.highest_relevance_score
              )}`}
            >
              {event.highest_relevance_score}
            </Badge>
            <span className="text-xs text-slate-500 mt-1">Score</span>
          </div>
          <div className="flex-grow min-w-0 pr-20">
            <h3 className="font-serif font-bold text-xl text-slate-100 mb-2">
              <span className="text-2xl mr-3 align-middle">{flags}</span>
              {event.synthesized_headline}
            </h3>
            <p className="text-slate-300 leading-relaxed">{event.synthesized_summary}</p>
          </div>
          {primaryImageUrl && (
            <div className="relative h-24 w-24 rounded-lg overflow-hidden flex-shrink-0">
              <Image
                src={primaryImageUrl}
                alt={event.synthesized_headline}
                fill
                className="object-cover"
                sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
              />
            </div>
          )}
          <div className="absolute top-4 right-4 z-10 flex gap-1">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={onChat}
                  className="text-slate-400 hover:text-blue-400 bg-black/20 hover:bg-blue-500/20 h-8 w-8"
                >
                  <MessageSquarePlus className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Ask AI about this event</TooltipContent>
            </Tooltip>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  disabled={isPending}
                  onClick={onDelete}
                  className="text-slate-400 hover:text-red-400 bg-black/20 hover:bg-red-500/20 h-8 w-8"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Delete Event</TooltipContent>
            </Tooltip>
          </div>
        </div>
        <div className="mt-4 pt-4 border-t border-slate-800/50 flex flex-col sm:flex-row justify-between items-start gap-4">
          {event.key_individuals && event.key_individuals.length > 0 && (
            // DEFINITIVE FIX: Ensure the onClick handler is correctly passed to the Button.
            <Button
              variant="ghost"
              className="p-0 h-auto text-left text-slate-400 hover:text-slate-200"
              onClick={onShowIndividuals}
            >
              <div className="flex items-start gap-3">
                <Users className="h-5 w-5 mt-0.5 shrink-0 text-slate-500" />
                <p className="text-sm font-medium text-slate-300">
                  {event.key_individuals.length} Key Individual(s) Identified
                </p>
              </div>
            </Button>
          )}
          {event.ai_assessment_reason && (
            <p className="text-xs text-slate-500 italic sm:text-right flex-grow">
              {event.ai_assessment_reason}
            </p>
          )}
        </div>
      </TooltipProvider>
    </div>
  )
}

```

## 📄 src/components/client/events/EventCardDetails.jsx
*Lines: 69, Size: 2.55 KB*

```jsx
// src/components/events/EventCardDetails.jsx (version 1.0)
'use client'

import { Users, Mail, Building, Briefcase } from 'lucide-react'

export function EventCardDetails({ event }) {
  if (!event) return null

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      {/* Key Individuals Column */}
      {event.key_individuals && event.key_individuals.length > 0 && (
        <div className="space-y-3">
          <h4 className="font-semibold text-sm text-slate-300 mb-2 border-b border-slate-700 pb-1">
            Key Individuals
          </h4>
          {event.key_individuals.map((person, index) => (
            <div key={index} className="p-3 rounded-md bg-slate-800/50">
              <p className="font-bold text-slate-100 flex items-center gap-2">
                <Users className="h-4 w-4 text-slate-400" /> {person.name}
              </p>
              <div className="pl-6 space-y-1 mt-1 text-sm text-slate-400">
                {person.role_in_event && (
                  <p className="flex items-center gap-2">
                    <Briefcase className="h-3 w-3" /> {person.role_in_event}
                  </p>
                )}
                {person.company && (
                  <p className="flex items-center gap-2">
                    <Building className="h-3 w-3" /> {person.company}
                  </p>
                )}
                {person.email_suggestion && (
                  <a
                    href={`mailto:${person.email_suggestion}`}
                    className="flex items-center gap-2 text-blue-400 hover:underline"
                  >
                    <Mail className="h-3 w-3" /> {person.email_suggestion}
                  </a>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
      {/* Source Articles Column */}
      <div className="space-y-2">
        <h4 className="font-semibold text-sm text-slate-300 mb-2 border-b border-slate-700 pb-1">
          Source Articles ({event.source_articles.length})
        </h4>
        {event.source_articles.map((article) => (
          <a
            key={article.link}
            href={article.link}
            target="_blank"
            rel="noopener noreferrer"
            className="block p-3 rounded-md bg-slate-800/50 hover:bg-slate-800/80 transition-colors"
          >
            <p className="font-medium text-slate-200 line-clamp-1 text-sm">
              {article.headline}
            </p>
            <p className="text-xs text-slate-400">{article.newspaper}</p>
          </a>
        ))}
      </div>
    </div>
  )
}

```

## 📄 src/components/client/events/EventCardMobile.jsx
*Lines: 117, Size: 4.16 KB*

```jsx
// File: apps/client/src/components/client/events/EventCardMobile.jsx (Handler Corrected)
'use client'

import { Badge, Button } from '@/components/shared'
import { Trash2, MessageSquarePlus, Users } from 'lucide-react'
import { getCountryFlag } from '@headlines/utils-shared'
import { cn } from '@headlines/utils-shared'

const getRelevanceBadgeClass = (score) => {
  if (score >= 90) return 'bg-red-500/20 text-red-300 border border-red-500/30'
  if (score >= 75) return 'bg-blue-500/20 text-blue-300 border border-blue-500/30'
  return 'bg-slate-500/20 text-slate-300 border border-slate-500/30'
}

export function EventCardMobile({
  event,
  onChat,
  onDelete,
  onShowIndividuals,
  isPending,
}) {
  if (!event) return null
  const flags = (event.country || []).map((c) => getCountryFlag(c)).join(' ')
  const primaryImageUrl = event.source_articles?.find((a) => a.imageUrl)?.imageUrl

  return (
    <div className="sm:hidden">
      <div
        className={cn(
          'relative rounded-lg -m-4 mb-0 p-4',
          primaryImageUrl && 'min-h-[200px] flex flex-col justify-end'
        )}
        style={primaryImageUrl ? { backgroundImage: `url(${primaryImageUrl})` } : {}}
      >
        {primaryImageUrl && (
          <div className="absolute inset-0 bg-gradient-to-t from-black/90 via-black/60 to-transparent z-0 rounded-lg" />
        )}

        <div className="relative z-10">
          <div className="flex justify-between items-start gap-2 mb-2">
            <div className="flex items-center gap-2 min-w-0">
              <Badge
                className={`text-sm font-bold px-2 py-0.5 ${getRelevanceBadgeClass(
                  event.highest_relevance_score
                )}`}
              >
                {event.highest_relevance_score}
              </Badge>
            </div>
            <div className="flex flex-col items-center gap-1">
              <Button
                variant="ghost"
                size="icon"
                onClick={onChat}
                className="text-slate-300 hover:text-blue-400 bg-black/20 hover:bg-blue-500/20 h-8 w-8"
              >
                <MessageSquarePlus className="h-4 w-4" />
              </Button>
              <Button
                variant="ghost"
                size="icon"
                disabled={isPending}
                onClick={onDelete}
                className="text-slate-300 hover:text-red-400 bg-black/20 hover:bg-red-500/20 h-8 w-8"
              >
                <Trash2 className="h-4 w-4" />
              </Button>
            </div>
          </div>
          <h3
            className={cn(
              'font-serif font-bold text-lg line-clamp-3',
              primaryImageUrl ? 'text-white drop-shadow-lg' : 'text-slate-100'
            )}
          >
            <span className="text-xl mr-2 align-middle">{flags}</span>
            {event.synthesized_headline}
          </h3>
        </div>
      </div>

      <div
        className={cn(
          'pt-4',
          primaryImageUrl && 'bg-slate-900 -m-4 mt-0 p-4 rounded-b-xl'
        )}
      >
        <p className="text-sm text-slate-300 leading-relaxed">
          {event.synthesized_summary}
        </p>
        <div className="mt-4 pt-4 border-t border-slate-800/50 flex flex-col justify-between items-start gap-4">
          {event.key_individuals && event.key_individuals.length > 0 && (
            // DEFINITIVE FIX: Ensure the onClick handler is correctly passed to the Button.
            <Button
              variant="ghost"
              className="p-0 h-auto text-left text-slate-400 hover:text-slate-200"
              onClick={onShowIndividuals}
            >
              <div className="flex items-start gap-3">
                <Users className="h-5 w-5 mt-0.5 shrink-0 text-slate-500" />
                <p className="text-sm font-medium text-slate-300">
                  {event.key_individuals.length} Key Individual(s) Identified
                </p>
              </div>
            </Button>
          )}
          {event.ai_assessment_reason && (
            <p className="text-xs text-slate-500 italic sm:text-right flex-grow">
              {event.ai_assessment_reason}
            </p>
          )}
        </div>
      </div>
    </div>
  )
}

```

## 📄 src/components/client/events/EventContextDialog.jsx
*Lines: 79, Size: 2.91 KB*

```jsx
// src/components/EventContextDialog.jsx (version 1.1)
'use client'

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  Badge
} from '@/components/shared/elements'
import { ExternalLink } from 'lucide-react'

const getRelevanceBadgeClass = (score) => {
  if (score >= 90) return 'bg-red-500/20 text-red-300 border border-red-500/30'
  if (score >= 75) return 'bg-blue-500/20 text-blue-300 border border-blue-500/30'
  return 'bg-slate-500/20 text-slate-300 border border-slate-500/30'
}

export function EventContextDialog({ event, open, onOpenChange }) {
  if (!event) return null

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-3xl w-[95vw] bg-slate-900 border-slate-700 p-8">
        <DialogHeader>
          <div className="flex items-center justify-between mb-2">
            <DialogTitle className="text-xl text-slate-100">
              Parent Event Context
            </DialogTitle>
            <Badge
              className={`text-base font-bold px-3 py-1 ${getRelevanceBadgeClass(event.highest_relevance_score)}`}
            >
              Score: {event.highest_relevance_score}
            </Badge>
          </div>
          <DialogDescription className="text-slate-400 text-base font-serif font-semibold">
            {event.synthesized_headline}
          </DialogDescription>
        </DialogHeader>
        <div className="space-y-6 max-h-[60vh] overflow-y-auto p-1 pr-6 custom-scrollbar">
          <div>
            <h4 className="font-semibold text-sm text-slate-300 mb-2">
              Synthesized Summary
            </h4>
            <div className="p-4 rounded-md bg-slate-800/50 border border-slate-700 text-sm text-slate-300">
              <p>{event.synthesized_summary}</p>
            </div>
          </div>
          <div>
            <h4 className="font-semibold text-sm text-slate-300 mb-2">
              Corroborating Source Articles ({event.source_articles?.length || 0})
            </h4>
            <div className="space-y-2">
              {event.source_articles?.map((article, index) => (
                <a
                  key={index}
                  href={article.link}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center justify-between gap-4 p-3 rounded-md bg-slate-800/50 hover:bg-slate-800/80 transition-colors"
                >
                  <div className="flex-grow min-w-0">
                    <p className="font-medium text-slate-200 line-clamp-1 text-sm">
                      {article.headline}
                    </p>
                    <p className="text-xs text-slate-400">{article.newspaper}</p>
                  </div>
                  <ExternalLink className="h-4 w-4 text-slate-500 flex-shrink-0" />
                </a>
              ))}
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/components/client/events/EventList.jsx
*Lines: 51, Size: 1.72 KB*

```jsx
// File: apps/client/src/components/client/EventList.jsx (Restored)
'use client'
import { Accordion } from '@/components/shared'
import { SynthesizedEventCard } from './SynthesizedEventCard'
import { AnimatePresence, motion } from 'framer-motion'
import { AnimatedList, itemVariants } from '../shared/AnimatedList'
import { cn } from '@headlines/utils-shared'

export const EventList = ({
  events = [],
  onDelete,
  onFavoriteToggle,
  userFavoritedIds,
}) => {
  return (
    <Accordion type="single" collapsible>
      <AnimatedList className="w-full space-y-4">
        <AnimatePresence>
          {events.map((event) => {
            const isHighRelevance = event.highest_relevance_score > 69
            const isFavorited = userFavoritedIds.has(event._id)
            return (
              <motion.div
                key={event.event_key}
                variants={itemVariants}
                exit={itemVariants.exit}
                layout
                whileHover={{ y: -2 }}
                whileTap={{ scale: 0.98 }}
                className={cn(
                  'rounded-xl bg-gradient-to-br from-slate-900 to-slate-800/60 shadow-lg shadow-black/40 border border-slate-700',
                  isHighRelevance && 'card-glow',
                  isFavorited &&
                    'bg-gradient-to-br from-yellow-900/50 to-slate-800/60 border-yellow-700/50'
                )}
              >
                <SynthesizedEventCard
                  event={event}
                  onDelete={onDelete}
                  onFavoriteToggle={onFavoriteToggle}
                  isFavorited={isFavorited}
                />
              </motion.div>
            )
          })}
        </AnimatePresence>
      </AnimatedList>
    </Accordion>
  )
}

```

## 📄 src/components/client/events/EventListWrapper.jsx
*Lines: 22, Size: 481 Bytes*

```jsx
// Full Path: headlines/src/components/client/EventListWrapper.jsx
'use client'

import { EventList } from './EventList'

export function EventListWrapper({
  items,
  onDelete,
  onFavoriteToggle,
  userFavoritedIds,
}) {
  return (
    <EventList
      events={items}
      // Standardize the prop name. The swipe action is a "delete" or "discard" action.
      onDelete={onDelete}
      onFavoriteToggle={onFavoriteToggle}
      userFavoritedIds={userFavoritedIds}
    />
  )
}

```

## 📄 src/components/client/events/KeyIndividualsDialog.jsx
*Lines: 67, Size: 2.33 KB*

```jsx
// apps/client/src/components/client/events/KeyIndividualsDialog.jsx (NEW FILE)
'use client'

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from '@/components/shared'
import { Users, Mail, Building, Briefcase } from 'lucide-react'

export function KeyIndividualsDialog({ individuals, open, onOpenChange }) {
  if (!individuals || individuals.length === 0) {
    return null
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-lg bg-slate-900 border-slate-700">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Users className="h-5 w-5 text-blue-400" />
            Key Individuals Identified
          </DialogTitle>
          <DialogDescription>
            The following individuals were identified by the AI as principal actors in
            this event.
          </DialogDescription>
        </DialogHeader>
        <div className="py-4 space-y-3 max-h-[60vh] overflow-y-auto custom-scrollbar pr-2">
          {individuals.map((person, index) => (
            <div
              key={index}
              className="p-3 rounded-md bg-slate-800/50 border border-slate-700/50"
            >
              <p className="font-bold text-slate-100 flex items-center gap-2">
                <Users className="h-4 w-4 text-slate-400" /> {person.name}
              </p>
              <div className="pl-6 space-y-1 mt-1 text-sm text-slate-400">
                {person.role_in_event && (
                  <p className="flex items-center gap-2">
                    <Briefcase className="h-3 w-3" /> {person.role_in_event}
                  </p>
                )}
                {person.company && (
                  <p className="flex items-center gap-2">
                    <Building className="h-3 w-3" /> {person.company}
                  </p>
                )}
                {person.email_suggestion && (
                  <a
                    href={`mailto:${person.email_suggestion}`}
                    className="flex items-center gap-2 text-blue-400 hover:underline"
                  >
                    <Mail className="h-3 w-3" /> {person.email_suggestion}
                  </a>
                )}
              </div>
            </div>
          ))}
        </div>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/components/client/events/SynthesizedEventCard.jsx
*Lines: 117, Size: 3.98 KB*

```jsx
// File: apps/client/src/components/client/events/SynthesizedEventCard.jsx (CORRECTED)
'use client'

import { useState, useTransition } from 'react'
import { useRouter } from 'next/navigation'
import { AccordionContent, AccordionItem, ConfirmationDialog } from '@/components/shared'
import useAppStore from '@/lib/store/use-app-store'
import { SwipeToDelete } from '../shared/SwipeToDelete'
import { EventCardDesktop } from './EventCardDesktop'
import { EventCardMobile } from './EventCardMobile'
import { EventCardDetails } from './EventCardDetails'
import { KeyIndividualsDialog } from './KeyIndividualsDialog'
import { useAuth } from '@/lib/auth/client'
import { toast } from 'sonner'

export const SynthesizedEventCard = ({
  event,
  onDelete,
  onFavoriteToggle,
  isFavorited,
}) => {
  const [isPending, startTransition] = useTransition()
  const [isEmailDialogOpen, setIsEmailDialogOpen] = useState(false)
  const [isIndividualsDialogOpen, setIsIndividualsDialogOpen] = useState(false) // State is here
  const setChatContextPrompt = useAppStore((state) => state.setChatContextPrompt)
  const router = useRouter()
  const { user } = useAuth()

  const performDelete = () => {
    startTransition(() => {
      onDelete(event._id)
    })
  }

  const handleSwipeRight = () => {
    if (isFavorited) {
      setIsEmailDialogOpen(true)
    } else {
      toast.info('Item must be favorited to email.')
    }
  }

  const handleChatAboutEvent = (e) => {
    e.stopPropagation()
    const prompt = `Tell me more about the event: "${event.synthesized_headline}". What are the key implications?`
    setChatContextPrompt(prompt)
    router.push('/chat')
  }

  const handleFavorite = (e) => {
    e.stopPropagation()
    onFavoriteToggle(event._id, !isFavorited)
  }

  // DEFINITIVE FIX: This handler now correctly opens the dialog.
  const handleShowIndividuals = (e) => {
    e.stopPropagation() // Prevent the main accordion from toggling
    setIsIndividualsDialogOpen(true)
  }

  return (
    <>
      <div className="relative w-full">
        <AccordionItem
          value={event.event_key}
          className={`relative border-none rounded-xl overflow-hidden transition-all duration-300 ${isPending ? 'opacity-50' : ''}`}
        >
          <SwipeToDelete onDelete={performDelete} onSwipeRight={handleSwipeRight}>
            <div className="relative p-4">
              <EventCardMobile
                event={event}
                onChat={handleChatAboutEvent}
                onDelete={performDelete}
                onFavorite={handleFavorite}
                onShowIndividuals={handleShowIndividuals} // Pass the handler
                isFavorited={isFavorited}
                isPending={isPending}
              />
              <EventCardDesktop
                event={event}
                onChat={handleChatAboutEvent}
                onDelete={performDelete}
                onFavorite={handleFavorite}
                onShowIndividuals={handleShowIndividuals} // Pass the handler
                isFavorited={isFavorited}
                isPending={isPending}
              />
            </div>
          </SwipeToDelete>
          <AccordionContent className="p-4 pt-0 bg-slate-900/50">
            <EventCardDetails event={event} />
          </AccordionContent>
        </AccordionItem>
      </div>

      {/* DEFINITIVE FIX: Render the dialog and control it with state */}
      <KeyIndividualsDialog
        individuals={event.key_individuals}
        open={isIndividualsDialogOpen}
        onOpenChange={setIsIndividualsDialogOpen}
      />

      <ConfirmationDialog
        open={isEmailDialogOpen}
        onOpenChange={setIsEmailDialogOpen}
        title="Confirm Action"
        description={`This will send a detailed brief of the event "${event.synthesized_headline}" to your registered email address. Do you want to continue?`}
        confirmText="Send Email"
        onConfirm={() => {
          toast.info('Email functionality is not yet implemented.')
          setIsEmailDialogOpen(false)
        }}
      />
    </>
  )
}

```

## 📄 src/components/client/opportunities/OpportunityCard.jsx
*Lines: 187, Size: 7.16 KB*

```jsx
// File: apps/client/src/components/client/opportunities/OpportunityCard.jsx (Multi-country support)
'use client'

import { useState, useTransition } from 'react'
import { Card, Button, Badge, ConfirmationDialog } from '@/components/shared'
import {
  User,
  Briefcase,
  MapPin,
  Mail,
  Zap,
  MessageSquare,
  ArrowRight,
  Trash2,
} from 'lucide-react'
import { SwipeToDelete } from '../shared/SwipeToDelete'
import { cn, getCountryFlag } from '@headlines/utils-shared'
import { EventContextDialog } from '../events/EventContextDialog'
import Link from 'next/link'
import useAppStore from '@/lib/store/use-app-store'

export function OpportunityCard({ opportunity, onDelete }) {
  const [isEventDialogOpen, setIsEventDialogOpen] = useState(false)
  const [isPending, startTransition] = useTransition()
  const [isConfirmOpen, setIsConfirmOpen] = useState(false)
  const skipConfirmation = useAppStore(
    (state) => state.deletePreferences.skipOpportunityConfirmation
  )

  const handleDelete = () => {
    startTransition(() => {
      onDelete(opportunity._id)
    })
  }

  const handleDeleteRequest = () => {
    if (skipConfirmation) {
      handleDelete()
    } else {
      setIsConfirmOpen(true)
    }
  }

  const sourceEvent =
    opportunity.events && opportunity.events.length > 0 ? opportunity.events[0] : null
  const { contactDetails } = opportunity
  const isPremiumOpportunity = opportunity.likelyMMDollarWealth > 49
  const reasonsToContact = Array.isArray(opportunity.whyContact)
    ? opportunity.whyContact
    : [opportunity.whyContact]
  const flags = (opportunity.basedIn || []).map((c) => getCountryFlag(c)).join(' ') // MODIFIED

  return (
    <>
      <Card
        className={cn(
          'bg-slate-900/50 border border-slate-700 transition-all duration-300 ease-out overflow-hidden hover:border-blue-500/50 hover:bg-slate-900',
          isPending ? 'opacity-50' : 'opacity-100',
          isPremiumOpportunity && 'card-glow'
        )}
      >
        <SwipeToDelete onDelete={handleDeleteRequest}>
          <div className="p-4 space-y-3 bg-slate-900/50 relative z-10">
            <div className="flex justify-between items-start gap-3">
              <Link
                href={`/opportunities/${opportunity._id}`}
                className="block group flex-grow min-w-0"
              >
                <div className="flex justify-between items-start gap-3">
                  <div className="flex-1 space-y-1">
                    <p className="font-bold text-base text-slate-100 flex items-center gap-2">
                      <User className="h-4 w-4 text-slate-400" />
                      {opportunity.reachOutTo}
                    </p>
                    {(opportunity.city || opportunity.basedIn) && (
                      <p className="text-xs text-slate-400 flex items-center gap-2 pl-6">
                        <MapPin className="h-3 w-3" />
                        <span className="text-base mr-1">{flags}</span> {/* MODIFIED */}
                        {opportunity.city}
                        {opportunity.city && opportunity.basedIn ? ', ' : ''}
                        {(opportunity.basedIn || []).join(', ')} {/* MODIFIED */}
                      </p>
                    )}
                  </div>
                  <div className="flex items-center gap-2">
                    {opportunity.likelyMMDollarWealth > 0 && (
                      <Badge
                        variant="outline"
                        className="border-green-500/50 text-green-300"
                      >
                        ${opportunity.likelyMMDollarWealth}M
                      </Badge>
                    )}
                    <div className="opacity-0 group-hover:opacity-100 transition-opacity">
                      <ArrowRight className="h-5 w-5 text-blue-400" />
                    </div>
                  </div>
                </div>
              </Link>
              <div className="flex-shrink-0 hidden sm:block">
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={handleDeleteRequest}
                  disabled={isPending}
                  className="h-8 w-8 text-slate-500 hover:bg-red-500/10 hover:text-red-400"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </div>
            <div className="pl-4 border-l-2 border-slate-700 space-y-3">
              <div className="text-sm text-slate-400 space-y-1">
                {contactDetails?.role && contactDetails?.company && (
                  <p className="flex items-center gap-2">
                    <Briefcase className="h-4 w-4 text-slate-500 flex-shrink-0" />
                    <span>
                      {contactDetails.role} at <strong>{contactDetails.company}</strong>
                    </span>
                  </p>
                )}
                {contactDetails?.email && (
                  <a
                    href={`mailto:${contactDetails.email}`}
                    className="flex items-center gap-2 text-blue-400 hover:underline"
                  >
                    <Mail className="h-4 w-4 text-slate-500 flex-shrink-0" />{' '}
                    {contactDetails.email}
                  </a>
                )}
              </div>
              <div className="space-y-2">
                {reasonsToContact.slice(0, 1).map((reason, index) => (
                  <div
                    key={index}
                    className="flex items-start gap-2 text-sm text-slate-300 italic"
                  >
                    <MessageSquare className="h-4 w-4 mt-0.5 text-slate-500 flex-shrink-0" />
                    <p className="line-clamp-2">“{reason}”</p>
                  </div>
                ))}
              </div>
            </div>
            {sourceEvent && (
              <div className="pt-3 mt-3 border-t border-slate-700/50">
                <Button
                  variant="ghost"
                  className="w-full h-auto text-left justify-start p-2 hover:bg-slate-800/50"
                  onClick={(e) => {
                    e.preventDefault()
                    e.stopPropagation()
                    setIsEventDialogOpen(true)
                  }}
                >
                  <Zap className="h-4 w-4 mr-3 text-blue-400 flex-shrink-0" />
                  <div className="min-w-0">
                    <p className="text-xs text-slate-400">View Parent Event:</p>
                    <p className="text-sm font-semibold text-slate-200 truncate">
                      {sourceEvent.synthesized_headline}
                    </p>
                  </div>
                </Button>
              </div>
            )}
          </div>
        </SwipeToDelete>
      </Card>
      {sourceEvent && (
        <EventContextDialog
          event={sourceEvent}
          open={isEventDialogOpen}
          onOpenChange={setIsEventDialogOpen}
        />
      )}
      <ConfirmationDialog
        open={isConfirmOpen}
        onOpenChange={setIsConfirmOpen}
        onConfirm={handleDelete}
        isPending={isPending}
        itemType="opportunity"
        itemDescription={opportunity.reachOutTo}
        preferenceKey="skipOpportunityConfirmation"
      />
    </>
  )
}

```

## 📄 src/components/client/opportunities/OpportunityListWrapper.jsx
*Lines: 32, Size: 944 Bytes*

```jsx
// File: apps/client/src/components/client/OpportunityListWrapper.jsx

'use client'

import { AnimatePresence, motion } from 'framer-motion'
import { AnimatedList, itemVariants } from '../shared/AnimatedList'
import { OpportunityCard } from '../opportunities/OpportunityCard'
import { cn } from '@headlines/utils-shared'

export function OpportunityListWrapper({ items, onDelete }) {
  return (
    <AnimatedList className="space-y-3">
      <AnimatePresence>
        {items.map((opportunity) => (
          <motion.div
            key={opportunity._id}
            variants={itemVariants}
            exit={itemVariants.exit}
            layout
            className={cn('min-w-full sm:min-w-[480px]')}
          >
            <OpportunityCard
              opportunity={opportunity}
              onDelete={() => onDelete(opportunity._id)}
            />
          </motion.div>
        ))}
      </AnimatePresence>
    </AnimatedList>
  )
}

```

## 📄 src/components/client/settings/SettingsForm.jsx
*Lines: 247, Size: 7.81 KB*

```jsx
// File: apps/client/src/components/client/SettingsForm.jsx (Unabridged and Corrected)

'use client'
import { useState, useEffect, useRef } from 'react'
import { useRouter } from 'next/navigation'
import { useAuth } from '@/lib/auth/client.js'
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
  Button,
  Label,
  Input,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/shared'
import { Save, Loader2, Trash2, User, Settings as SettingsIcon } from 'lucide-react'
import { toast } from 'sonner'

async function clearDiscardedItems() {
  const res = await fetch('/api/user/settings/clear-discarded', { method: 'POST' })
  if (!res.ok) {
    const errorData = await res.json()
    throw new Error(errorData.error || 'Failed to clear items')
  }
  return res.json()
}

export function SettingsForm() {
  const { user, updateUserPreferences } = useAuth()
  const router = useRouter()
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    confirmPassword: '',
  })
  const [isSaving, setIsSaving] = useState(false)
  const [isClearing, setIsClearing] = useState(false)

  const tabsListRef = useRef(null)
  const [contentWidth, setContentWidth] = useState(0)

  useEffect(() => {
    const handleResize = () => {
      if (tabsListRef.current) {
        setContentWidth(tabsListRef.current.offsetWidth)
      }
    }

    handleResize()

    window.addEventListener('resize', handleResize)
    return () => window.removeEventListener('resize', handleResize)
  }, [])

  useEffect(() => {
    if (user) {
      setFormData({
        firstName: user.firstName || '',
        lastName: user.lastName || '',
        email: user.email || '',
        password: '',
        confirmPassword: '',
      })
    }
  }, [user])

  const handleChange = (e) => {
    const { id, value } = e.target
    setFormData((prev) => ({ ...prev, [id]: value }))
  }

  const handleSaveChanges = async (e) => {
    e.preventDefault()
    if (formData.password && formData.password !== formData.confirmPassword) {
      toast.error('Passwords do not match.')
      return
    }

    setIsSaving(true)

    const updateData = {
      firstName: formData.firstName,
      lastName: formData.lastName,
    }
    if (formData.password) {
      updateData.password = formData.password
    }

    await updateUserPreferences(updateData)
    setFormData((prev) => ({ ...prev, password: '', confirmPassword: '' }))

    setIsSaving(false)
  }

  const handleClearDiscarded = async () => {
    toast.info('Clearing discarded items...')
    setIsClearing(true)
    try {
      const result = await clearDiscardedItems()
      toast.success(
        result.message || 'Discarded items cleared. Your feeds will be refreshed.'
      )
      router.refresh()
    } catch (error) {
      toast.error('Failed to clear items', { description: error.message })
    }
    setIsClearing(false)
  }

  if (!user) return null

  return (
    <div className="flex flex-col items-center">
      <Tabs
        defaultValue="profile"
        className="w-full"
        style={{ maxWidth: contentWidth > 0 ? `${contentWidth}px` : '100%' }}
      >
        <TabsList ref={tabsListRef} className="grid w-full grid-cols-2">
          <TabsTrigger value="profile">
            <User className="w-4 h-4 mr-2" />
            Profile Information
          </TabsTrigger>
          <TabsTrigger value="advanced">
            <SettingsIcon className="w-4 h-4 mr-2" />
            Advanced Settings
          </TabsTrigger>
        </TabsList>

        <TabsContent value="profile">
          <form onSubmit={handleSaveChanges}>
            <Card className="bg-slate-900/50 border-slate-700/80">
              <CardHeader>
                <CardTitle>Profile Information</CardTitle>
                <CardDescription>
                  Update your personal details and password.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="firstName">First Name</Label>
                    <Input
                      id="firstName"
                      value={formData.firstName}
                      onChange={handleChange}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="lastName">Last Name</Label>
                    <Input
                      id="lastName"
                      value={formData.lastName}
                      onChange={handleChange}
                    />
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input id="email" type="email" value={formData.email} disabled />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="password">New Password</Label>
                  <Input
                    id="password"
                    type="password"
                    placeholder="Leave blank to keep current password"
                    value={formData.password}
                    onChange={handleChange}
                  />
                </div>
                {formData.password && (
                  <div className="space-y-2">
                    <Label htmlFor="confirmPassword">Confirm New Password</Label>
                    <Input
                      id="confirmPassword"
                      type="password"
                      placeholder="Confirm your new password"
                      value={formData.confirmPassword}
                      onChange={handleChange}
                    />
                  </div>
                )}
              </CardContent>
              <CardFooter>
                <Button type="submit" disabled={isSaving}>
                  {isSaving ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <Save className="mr-2 h-4 w-4" />
                  )}
                  Save Changes
                </Button>
              </CardFooter>
            </Card>
          </form>
        </TabsContent>

        <TabsContent value="advanced">
          <Card className="bg-slate-900/50 border-slate-700/80">
            <CardHeader>
              <CardTitle>Advanced Settings</CardTitle>
              <CardDescription>
                Manage application data and other settings.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap items-center justify-between gap-4 rounded-lg border border-yellow-500/30 bg-yellow-500/10 p-4">
                <div className="flex-1 min-w-0">
                  <p className="font-semibold text-yellow-200">Reset Discarded Items</p>
                  <p className="text-sm text-yellow-300/80">
                    If you've dismissed items by swiping, this will make them visible
                    again in your feeds.
                  </p>
                </div>
                <div className="flex-shrink-0">
                  <Button
                    variant="outline"
                    onClick={handleClearDiscarded}
                    disabled={isClearing}
                    className="border-yellow-500/50 text-yellow-200 hover:bg-yellow-500/20 hover:text-yellow-100"
                  >
                    {isClearing ? (
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    ) : (
                      <Trash2 className="mr-2 h-4 w-4" />
                    )}
                    Clear Discarded
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

```

## 📄 src/components/client/shared/AnimatedList.jsx
*Lines: 51, Size: 975 Bytes*

```jsx
// src/components/AnimatedList.jsx (version 1.0)
'use client'

import { motion } from 'framer-motion'

// Animation variants for the container (list)
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.08, // Time delay between each child animating in
      delayChildren: 0.1,
    },
  },
}

// Animation variants for each item in the list
export const itemVariants = {
  hidden: { y: 20, opacity: 0 },
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      type: 'spring',
      stiffness: 100,
      damping: 12,
    },
  },
  exit: {
    opacity: 0,
    height: 0,
    marginBottom: 0,
    transition: { duration: 0.3 },
  },
}

export function AnimatedList({ children, className }) {
  return (
    <motion.div
      className={className}
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      exit="hidden"
    >
      {children}
    </motion.div>
  )
}

```

## 📄 src/components/client/shared/ClientRedirect.jsx
*Lines: 18, Size: 476 Bytes*

```jsx
'use client'

import { useEffect } from 'react'
import { useRouter } from 'next/navigation'

// This component performs a client-side redirect, avoiding the server-side
// NEXT_REDIRECT error that can be intercepted by browser security features.
export function ClientRedirect({ destination }) {
  const router = useRouter()

  useEffect(() => {
    router.replace(destination)
  }, [router, destination])

  // Render nothing while the redirect is happening.
  return null
}

```

## 📄 src/components/client/shared/DataView.jsx
*Lines: 184, Size: 6.3 KB*

```jsx
// File: client/src/components/client/shared/DataView.jsx
'use client'

import { useMemo, Suspense, useEffect } from 'react'
import { useSearchParams, useRouter } from 'next/navigation'
import { useInfiniteQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { ViewHeader } from '@/components/shared/screen/ViewHeader'
import { LoadingOverlay, SkeletonCard } from '@/components/shared'
import { EventListWrapper } from '../events/EventListWrapper'
import { ArticleListWrapper } from '../articles/ArticleListWrapper'
import { OpportunityListWrapper } from '../opportunities/OpportunityListWrapper'
import { InfiniteScrollLoader } from '../../shared/screen/InfiniteScrollLoader'
import { useAuth } from '@/lib/auth/client'
import { toast } from 'sonner'
import { SearchX } from 'lucide-react'
import useAppStore from '@/lib/store/use-app-store'

async function fetchData({ queryKey, pageParam = 1 }) {
  const [queryKeyPrefix, params] = queryKey
  const urlParams = new URLSearchParams()
  urlParams.set('page', pageParam.toString())
  if (params.sort) urlParams.set('sort', params.sort)
  if (params.q) urlParams.set('q', params.q)
  if (params.withEmail) urlParams.set('withEmail', 'true')

  const res = await fetch(`/api/${queryKeyPrefix}?${urlParams.toString()}`)
  if (!res.ok) throw new Error('Network response was not ok')
  return res.json()
}

async function updateUserInteraction(interactionData) {
  const res = await fetch('/api/user/interactions', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(interactionData),
  })
  if (!res.ok) {
    const errorData = await res.json()
    throw new Error(errorData.error || 'Interaction failed')
  }
  return res.json()
}

const componentMap = {
  'event-list': EventListWrapper,
  'article-list': ArticleListWrapper,
  'opportunity-list': OpportunityListWrapper,
}

export function DataView({
  viewTitle,
  sortOptions,
  queryKeyPrefix,
  listComponentKey,
  initialData,
}) {
  const ListComponent = componentMap[listComponentKey]
  const router = useRouter()
  const searchParams = useSearchParams()
  const queryClient = useQueryClient()
  const { user } = useAuth()

  const { setTotals, eventTotal, articleTotal, opportunityTotal } = useAppStore()

  const initialTotal = useMemo(() => {
    if (queryKeyPrefix === 'events') return eventTotal
    if (queryKeyPrefix === 'articles') return articleTotal
    if (queryKeyPrefix === 'opportunities') return opportunityTotal
    return initialData?.length || 0
  }, [queryKeyPrefix, eventTotal, articleTotal, opportunityTotal, initialData])

  const q = searchParams.get('q') || ''
  const sort = searchParams.get('sort') || sortOptions[0].value
  const withEmail = searchParams.get('withEmail') === 'true'

  const memoizedSearchParams = useMemo(
    () => ({ q, sort, withEmail }),
    [q, sort, withEmail]
  )
  const listQueryKey = useMemo(
    () => [queryKeyPrefix, memoizedSearchParams],
    [queryKeyPrefix, memoizedSearchParams]
  )

  const { data, fetchNextPage, hasNextPage, isFetching } = useInfiniteQuery({
    queryKey: listQueryKey,
    queryFn: fetchData,
    getNextPageParam: (lastPage, allPages) =>
      lastPage?.data?.length > 0 ? allPages.length + 1 : undefined,
    initialPageParam: 1,
    initialData: {
      pages: [
        {
          data: initialData || [],
          total: initialTotal,
        },
      ],
      pageParams: [1],
    },
    enabled: !!user,
    staleTime: 60 * 1000,
  })

  useEffect(() => {
    const total = data?.pages?.[0]?.total
    if (typeof total === 'number') {
      if (queryKeyPrefix === 'events') setTotals({ eventTotal: total })
      if (queryKeyPrefix === 'articles') setTotals({ articleTotal: total })
      if (queryKeyPrefix === 'opportunities') setTotals({ opportunityTotal: total })
    }
  }, [data, queryKeyPrefix, setTotals])

  const { mutate: performInteraction } = useMutation({
    mutationFn: updateUserInteraction,
    onMutate: async ({ itemId, action }) => {
      await queryClient.cancelQueries({ queryKey: listQueryKey })
      const previousData = queryClient.getQueryData(listQueryKey)

      if (action === 'discard') {
        queryClient.setQueryData(listQueryKey, (old) => {
          if (!old) return old
          const newPages = old.pages.map((page) => ({
            ...page,
            data: page.data.filter((item) => item._id !== itemId),
          }))
          return { ...old, pages: newPages }
        })
      }
      return { previousData }
    },
    onError: (err, variables, context) => {
      toast.error('Action failed. Restoring data.')
      if (context?.previousData) {
        queryClient.setQueryData(listQueryKey, context.previousData)
      }
    },
    onSuccess: (data, { action }) => {
      toast.success(`Item ${action}ed.`)
      queryClient.invalidateQueries({ queryKey: ['user', 'profile'] })
      router.refresh()
    },
  })

  const handleInteraction = (itemId, action) => {
    performInteraction({ itemId, itemType: queryKeyPrefix.slice(0, -1), action })
  }

  const items = useMemo(() => data?.pages.flatMap((page) => page.data) ?? [], [data])
  const userFavoritedIds = useMemo(
    () => new Set(user?.favoritedItems?.[queryKeyPrefix] || []),
    [user, queryKeyPrefix]
  )

  return (
    <>
      <ViewHeader title={viewTitle} sortOptions={sortOptions} searchTerm={q} />
      <Suspense fallback={<SkeletonCard />}>
        <div className="relative max-w-5xl mx-auto space-y-6">
          <LoadingOverlay isLoading={isFetching && items.length === 0} />
          {items.length > 0 ? (
            <ListComponent
              items={items}
              onDelete={(itemId) => handleInteraction(itemId, 'discard')}
              onFavoriteToggle={(itemId, isFavorited) =>
                handleInteraction(itemId, isFavorited ? 'favorite' : 'unfavorite')
              }
              userFavoritedIds={userFavoritedIds}
            />
          ) : (
            !isFetching && (
              <div className="text-center py-16 text-slate-500">
                <SearchX className="h-12 w-12 mx-auto mb-4" />
                <h3 className="text-xl font-semibold">No results found.</h3>
                <p>Try adjusting your search or filter criteria.</p>
              </div>
            )
          )}
          <InfiniteScrollLoader onLoadMore={fetchNextPage} hasMore={hasNextPage} />
        </div>
      </Suspense>
    </>
  )
}

```

## 📄 src/components/client/shared/Header.jsx
*Lines: 132, Size: 4.42 KB*

```jsx
// File: client/src/components/client/shared/Header.jsx
'use client'

import {
  Briefcase,
  LogOut,
  Settings,
  User,
  Shield,
  Crown,
  CalendarClock,
} from 'lucide-react'
import { InstallPwaButton } from '../../shared/buttons/InstallPwaButton'
import { GlobalCountrySelector } from '../countries/GlobalCountrySelector'
import { useAuth } from '@/lib/auth/client.js'
import { NotificationToggles } from '../../shared/buttons/NotificationToggles'
import {
  Button,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/shared'
import Link from 'next/link'
import { differenceInDays } from 'date-fns'
import useAppStore from '@/lib/store/use-app-store'

const UserSubscriptionStatus = () => {
  const { user } = useAuth()
  if (!user) return null

  if (user.subscriptionTier === 'trial' && user.subscriptionExpiresAt) {
    const daysLeft = differenceInDays(new Date(user.subscriptionExpiresAt), new Date())
    if (daysLeft >= 0) {
      return (
        <div className="flex items-center gap-2">
          <CalendarClock className="h-4 w-4 text-yellow-400" />
          <span className="text-sm text-yellow-400">Trial: {daysLeft} days left</span>
        </div>
      )
    }
  }

  return (
    <div className="flex items-center gap-2">
      <Crown className="h-4 w-4 text-amber-400" />
      <span className="capitalize text-sm text-amber-400">{user.subscriptionTier}</span>
    </div>
  )
}

export const Header = ({ globalCountries }) => {
  const { user, logout } = useAuth()
  // Subscribe to the global store for live counts. This will now be hydrated correctly.
  const { eventTotal, articleTotal, opportunityTotal } = useAppStore()

  return (
    <header className="mb-4 sm:mb-6 relative">
      <div className="absolute top-2 right-2 flex items-center gap-1">
        {user && (
          <>
            {user.role === 'admin' && (
              <Button asChild variant="ghost" size="icon" aria-label="Admin Panel">
                <Link href="/admin/dashboard">
                  <Shield className="h-4 w-4" />
                </Link>
              </Button>
            )}
            <GlobalCountrySelector allCountries={globalCountries || []} />
            <NotificationToggles />
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  className="flex items-center gap-2 rounded-full"
                >
                  <User className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56 bg-secondary">
                <DropdownMenuLabel>Hi, {user.firstName}</DropdownMenuLabel>
                <div className="px-2 pb-2">
                  <UserSubscriptionStatus />
                </div>
                <DropdownMenuSeparator />
                <Link href="/settings" passHref>
                  <DropdownMenuItem>
                    <Settings className="mr-2 h-4 w-4" />
                    <span>Settings</span>
                  </DropdownMenuItem>
                </Link>
                <DropdownMenuItem onClick={logout}>
                  <LogOut className="mr-2 h-4 w-4" />
                  <span>Log out</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </>
        )}
        <InstallPwaButton />
      </div>
      <div className="flex flex-row items-center justify-center gap-x-3 sm:gap-x-4 mb-3 pt-8 sm:pt-0">
        <Briefcase size={28} className="text-blue-400 sm:size-10" />
        <h1 className="text-3xl sm:text-4xl font-extrabold tracking-tight text-slate-100 text-center sm:text-left">
          Headlines<span className="hidden sm:inline"> Intelligence</span>
        </h1>
      </div>
      <p className="text-center text-sm sm:text-base text-slate-400 max-w-3xl mx-auto">
        Analyze
        <span className="font-bold text-slate-300">
          {' '}
          {(eventTotal || 0).toLocaleString()}{' '}
        </span>
        events,
        <span className="font-bold text-slate-300">
          {' '}
          {(opportunityTotal || 0).toLocaleString()}{' '}
        </span>
        opportunities, from
        <span className="font-bold text-slate-300">
          {' '}
          {(articleTotal || 0).toLocaleString()}{' '}
        </span>
        articles.
      </p>
    </header>
  )
}

```

## 📄 src/components/client/shared/MainNavTabs.jsx
*Lines: 91, Size: 3.08 KB*

```jsx
// src/components/MainNavTabs.jsx (version 2.0)
'use client'

import { useState, useEffect } from 'react'
import { usePathname } from 'next/navigation'
import Link from 'next/link'
import { motion, AnimatePresence } from 'framer-motion'
import { Button, Tabs, TabsList, TabsTrigger } from '../../shared'
import { Zap, Newspaper, UploadCloud, MessageSquare, Target, ArrowUp } from 'lucide-react'

const TABS = [
  { value: 'events', label: 'Events', icon: Zap },
  { value: 'articles', label: 'Articles', icon: Newspaper },
  { value: 'opportunities', label: 'Opportunities', icon: Target },
  { value: 'upload', label: 'Upload', icon: UploadCloud },
  { value: 'chat', label: 'Chat', icon: MessageSquare },
]

export function MainNavTabs() {
  const pathname = usePathname()
  const currentView = pathname.substring(1).split('/')[0] || 'events'
  const [showScrollButton, setShowScrollButton] = useState(false)

  useEffect(() => {
    const checkScrollTop = () => {
      // Show button if user has scrolled down more than 400px
      if (window.scrollY > 400) {
        setShowScrollButton(true)
      } else {
        setShowScrollButton(false)
      }
    }

    window.addEventListener('scroll', checkScrollTop)
    return () => {
      window.removeEventListener('scroll', checkScrollTop)
    }
  }, [])

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth',
    })
  }

  return (
    <Tabs value={currentView} className="w-full">
      <div className="flex justify-center">
        <TabsList className="h-12 rounded-full bg-slate-900/60 backdrop-blur-sm border border-slate-700/80 p-2 shadow-lg transition-all duration-300">
          {TABS.map((tab) => (
            <TabsTrigger
              key={tab.value}
              value={tab.value}
              asChild
              className="px-3 sm:px-6 rounded-full data-[state=active]:bg-blue-600/80 data-[state=active]:text-white"
            >
              <Link href={`/${tab.value}`} className="flex items-center gap-2">
                <tab.icon className="h-4 w-4" />
                <span className="hidden sm:inline">{tab.label}</span>
              </Link>
            </TabsTrigger>
          ))}
          <AnimatePresence>
            {showScrollButton && (
              <motion.div
                initial={{ opacity: 0, width: 0 }}
                animate={{ opacity: 1, width: 'auto' }}
                exit={{ opacity: 0, width: 0 }}
                transition={{ duration: 0.3, ease: 'easeInOut' }}
                className="overflow-hidden flex items-center"
              >
                <div className="h-6 w-px bg-slate-700/60 mx-2" />
                <Button
                  variant="ghost"
                  size="icon"
                  className="rounded-full h-9 w-9 text-slate-400 hover:text-white hover:bg-slate-700/50"
                  onClick={scrollToTop}
                  aria-label="Scroll to top"
                >
                  <ArrowUp className="h-5 w-5" />
                </Button>
              </motion.div>
            )}
          </AnimatePresence>
        </TabsList>
      </div>
    </Tabs>
  )
}

```

## 📄 src/components/client/shared/SwipeToDelete.jsx
*Lines: 41, Size: 1.11 KB*

```jsx
// src/components/swipe/SwipeToDelete.jsx (version 1.0)
'use client'

import { motion, useMotionValue, useTransform } from 'framer-motion'
import { Trash2 } from 'lucide-react'

const SWIPE_THRESHOLD = -100 // pixels to swipe before delete is triggered

export function SwipeToDelete({ children, onDelete }) {
  const x = useMotionValue(0)

  const onDragEnd = (event, info) => {
    if (info.offset.x < SWIPE_THRESHOLD) {
      onDelete()
    }
  }

  const backgroundOpacity = useTransform(x, [-100, 0], [1, 0])
  const backgroundScale = useTransform(x, [-100, 0], [1, 0.8])

  return (
    <div className="relative w-full">
      <motion.div
        className="absolute inset-0 flex items-center justify-end pr-8 bg-red-600/80 pointer-events-none rounded-xl"
        style={{ opacity: backgroundOpacity, scale: backgroundScale }}
      >
        <Trash2 className="text-white h-6 w-6" />
      </motion.div>
      <motion.div
        drag="x"
        dragConstraints={{ left: 0, right: 0 }}
        onDragEnd={onDragEnd}
        style={{ x }}
        className="relative"
      >
        {children}
      </motion.div>
    </div>
  )
}

```

## 📄 src/components/client/upload/UploadView.jsx
*Lines: 227, Size: 7.59 KB*

```jsx
// File: apps/client/src/components/client/UploadView.jsx (Redesigned Version)

'use client'

import { useState, useRef } from 'react'
import { toast } from 'sonner'
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
  Label,
  Input,
  Button,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
  Textarea,
} from '@/components/shared'
import { Loader2, UploadCloud, FileJson, Type } from 'lucide-react'

async function processUploadedArticle(item) {
  const res = await fetch('/api/upload/process-article', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ item }),
  })
  if (!res.ok) {
    const errorData = await res.json()
    throw new Error(errorData.error || 'Failed to process item')
  }
  return res.json()
}

export function UploadView() {
  const [file, setFile] = useState(null)
  const [headlineInput, setHeadlineInput] = useState('')
  const [articleInput, setArticleInput] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const fileInputRef = useRef(null)

  const handleFileChange = (event) => {
    const uploadedFile = event.target.files[0]
    if (uploadedFile && uploadedFile.type === 'application/json') {
      setFile(uploadedFile)
    } else {
      toast.error('Please select a valid JSON file.')
      setFile(null)
    }
  }

  const handleProcessText = async () => {
    const item = { headline: headlineInput.trim(), article: articleInput.trim() }
    if (!item.headline || !item.article) {
      toast.error('Headline and Article content are both required.')
      return
    }

    setIsLoading(true)
    try {
      const toastId = toast.loading(`Processing text input...`)
      await processUploadedArticle(item)
      toast.success(`Successfully processed text input.`, { id: toastId })
      setHeadlineInput('')
      setArticleInput('')
    } catch (error) {
      toast.error('Failed to process text.', { description: error.message })
    } finally {
      setIsLoading(false)
    }
  }

  const handleProcessFile = async () => {
    if (!file) return
    setIsLoading(true)
    const reader = new FileReader()
    reader.onload = async (e) => {
      try {
        const content = JSON.parse(e.target.result)
        if (!Array.isArray(content)) throw new Error('JSON must be an array of objects.')

        const totalItems = content.length
        const toastId = toast.loading(
          `Processing ${totalItems} items from file... (0/${totalItems})`
        )

        for (let i = 0; i < totalItems; i++) {
          const item = content[i]
          if (!item.headline || !item.article) {
            toast.warning(`Skipping item ${i + 1}: missing headline or article.`)
            continue
          }
          await processUploadedArticle(item)
          toast.loading(`Processing ${totalItems} items... (${i + 1}/${totalItems})`, {
            id: toastId,
          })
        }

        toast.success(
          `Successfully processed file. ${totalItems} items were sent to the pipeline.`,
          { id: toastId }
        )
        setFile(null)
        if (fileInputRef.current) fileInputRef.current.value = ''
      } catch (error) {
        toast.error('Failed to process file.', { description: error.message })
      } finally {
        setIsLoading(false)
      }
    }
    reader.readAsText(file)
  }

  return (
    // Increased max-width of the container
    <div className="max-w-4xl mx-auto">
      <Card className="bg-slate-900/50 border-slate-700/80">
        <CardHeader className="p-6">
          <CardTitle className="text-2xl">Upload New Knowledge</CardTitle>
          <CardDescription>
            Process external intelligence by uploading a file or pasting text directly.
          </CardDescription>
        </CardHeader>
        <Tabs defaultValue="text" className="w-full">
          <div className="px-6">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="text">
                <Type className="w-4 h-4 mr-2" />
                Paste Text
              </TabsTrigger>
              <TabsTrigger value="file">
                <FileJson className="w-4 h-4 mr-2" />
                Upload File
              </TabsTrigger>
            </TabsList>
          </div>
          <TabsContent value="text">
            <CardContent className="p-6 space-y-4">
              {/* Two separate inputs for headline and article */}
              <div className="space-y-2">
                <Label htmlFor="headline-input" className="text-base">
                  Headline
                </Label>
                <Input
                  id="headline-input"
                  placeholder="Enter the article headline..."
                  className="bg-slate-900/80 border-slate-700"
                  value={headlineInput}
                  onChange={(e) => setHeadlineInput(e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="article-input" className="text-base">
                  Article Content
                </Label>
                <Textarea
                  id="article-input"
                  placeholder="Paste the full article content here..."
                  className="min-h-[250px] bg-slate-900/80 border-slate-700"
                  value={articleInput}
                  onChange={(e) => setArticleInput(e.target.value)}
                />
              </div>
            </CardContent>
            <CardFooter className="p-6 pt-0">
              <Button
                onClick={handleProcessText}
                disabled={isLoading || !headlineInput.trim() || !articleInput.trim()}
                size="lg"
                className="w-full h-12"
              >
                {isLoading ? (
                  <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                ) : (
                  <UploadCloud className="mr-2 h-5 w-5" />
                )}
                Process Text
              </Button>
            </CardFooter>
          </TabsContent>
          <TabsContent value="file">
            {/* File upload content remains the same */}
            <CardContent className="p-6 space-y-4">
              <Label htmlFor="file-upload" className="text-base font-semibold">
                JSON File Upload
              </Label>
              <div className="flex items-center p-2 border-2 border-dashed rounded-lg border-slate-700 bg-slate-900/50">
                <div className="flex-grow">
                  <Input
                    id="file-upload"
                    type="file"
                    accept=".json"
                    onChange={handleFileChange}
                    ref={fileInputRef}
                    className="file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-600/20 file:text-blue-300 hover:file:bg-blue-600/30"
                  />
                  {file && (
                    <p className="text-xs text-slate-400 mt-1">Selected: {file.name}</p>
                  )}
                </div>
              </div>
            </CardContent>
            <CardFooter className="p-6 pt-0">
              <Button
                onClick={handleProcessFile}
                disabled={isLoading || !file}
                size="lg"
                className="h-12 w-full"
              >
                {isLoading ? (
                  <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                ) : (
                  <UploadCloud className="mr-2 h-5 w-5" />
                )}
                Process File
              </Button>
            </CardFooter>
          </TabsContent>
        </Tabs>
      </Card>
    </div>
  )
}

```

## 📄 src/components/landing/AboutSection.jsx
*Lines: 37, Size: 1.51 KB*

```jsx
// apps/client/src/app/(public)/_components/AboutSection.jsx
'use client'

import { motion } from 'framer-motion'

export function AboutSection() {
  return (
    <section className="w-full max-w-4xl mx-auto text-center">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        whileInView={{ opacity: 1, y: 0 }}
        viewport={{ once: true, amount: 0.5 }}
        transition={{ duration: 0.8, ease: 'easeOut' }}
      >
        <h2 className="text-3xl sm:text-4xl font-bold tracking-tighter">
          Built for the Modern Wealth Advisor
        </h2>
        <div className="mt-6 prose prose-lg prose-invert mx-auto text-slate-400">
          <p>
            In today's market, information is commoditized. Intelligence is not. Headlines
            AI was founded on a simple premise: wealth managers need more than just news;
            they need verified, actionable signals delivered with speed and precision.
          </p>
          <p>
            Our platform deploys a fleet of autonomous AI agents that work around the
            clock. These agents read, translate, and contextualize millions of data points
            from sources often overlooked by traditional aggregators. They are trained to
            think like analysts—identifying not just the "what," but the "who" and "why"
            behind every significant wealth event. This is the new alpha: agentic
            intelligence, always on the lookout for your next mandate.
          </p>
        </div>
      </motion.div>
    </section>
  )
}

```

## 📄 src/components/landing/Features.jsx
*Lines: 81, Size: 2.8 KB*

```jsx
// apps/client/src/app/(public)/_components/Features.jsx
'use client'

import { motion } from 'framer-motion'
import { Zap, Target, Home, Layers, Share2, PenSquare } from 'lucide-react'

const features = [
  {
    icon: <Zap className="h-8 w-8 text-blue-400" />,
    title: 'Live Events Dashboard',
    description:
      'Track global liquidity events in real-time. Filter by country, sector, and deal size to focus on what matters to you.',
  },
  {
    icon: <Target className="h-8 w-8 text-green-400" />,
    title: 'Curated Opportunity Dossiers',
    description:
      'Move from signal to mandate. Each event is linked to actionable dossiers on key individuals, complete with estimated liquidity and AI-generated outreach points.',
  },
  {
    icon: <Home className="h-8 w-8 text-purple-400" />,
    title: 'Family Office Database',
    description:
      'Access our proprietary, continuously updated database of single and multi-family offices, tracking their investments and key personnel.',
  },
  {
    icon: <Layers className="h-8 w-8 text-yellow-400" />,
    title: 'Unrivaled Source Intelligence',
    description:
      'We go beyond headlines, ingesting data from newspapers, regulatory filings, PE/VC portfolio updates, and M&A journals.',
  },
  {
    icon: <Share2 className="h-8 w-8 text-cyan-400" />,
    title: 'Integrate Your Workflow',
    description:
      'Receive alerts via Email, Push, or WhatsApp. Prepare for meetings with one-click AI summaries and export any view to Excel.',
  },
  {
    icon: <PenSquare className="h-8 w-8 text-rose-400" />,
    title: 'AI-Powered Outreach',
    description:
      "Generate personalized meeting preps and draft compelling outreach emails based on an opportunity's specific context.",
  },
]

export function Features() {
  const containerVariants = {
    visible: { transition: { staggerChildren: 0.1 } },
  }
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5, ease: 'easeOut' } },
  }

  return (
    <section className="w-full">
      <motion.div
        className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
        variants={containerVariants}
        initial="hidden"
        whileInView="visible"
        viewport={{ once: true, amount: 0.2 }}
      >
        {features.map((feature, index) => (
          <motion.div
            key={index}
            variants={itemVariants}
            className="p-6 bg-slate-900/50 border border-slate-800 rounded-xl"
          >
            <div className="flex items-center gap-4">
              {feature.icon}
              <h3 className="text-lg font-bold text-slate-100">{feature.title}</h3>
            </div>
            <p className="mt-3 text-slate-400">{feature.description}</p>
          </motion.div>
        ))}
      </motion.div>
    </section>
  )
}

```

## 📄 src/components/landing/Footer.jsx
*Lines: 87, Size: 3.4 KB*

```jsx
// apps/client/src/app/(public)/_components/Footer.jsx

import Link from 'next/link'

// Simple SVG icons for social media
const XIcon = (props) => (
  <svg fill="currentColor" viewBox="0 0 24 24" {...props}>
    <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z" />
  </svg>
)

const LinkedInIcon = (props) => (
  <svg fill="currentColor" viewBox="0 0 24 24" {...props}>
    <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z" />
  </svg>
)

export function Footer() {
  return (
    <footer className="w-full bg-slate-900/50 border-t border-slate-800 mt-24">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          <div className="md:col-span-2">
            <h3 className="text-lg font-bold">Headlines AI</h3>
            <p className="mt-2 text-sm text-slate-400 max-w-sm">
              The leading intelligence platform for wealth management professionals
              seeking to capture new liquidity and identify emerging opportunities.
            </p>
          </div>
          <div>
            <h4 className="font-semibold tracking-wider text-slate-300 uppercase">
              Company
            </h4>
            <ul className="mt-4 space-y-2 text-sm">
              <li>
                <Link href="#" className="text-slate-400 hover:text-white">
                  About Us
                </Link>
              </li>
              <li>
                <Link href="#" className="text-slate-400 hover:text-white">
                  Contact
                </Link>
              </li>
              <li>
                <Link href="#" className="text-slate-400 hover:text-white">
                  Careers
                </Link>
              </li>
            </ul>
          </div>
          <div>
            <h4 className="font-semibold tracking-wider text-slate-300 uppercase">
              Legal
            </h4>
            <ul className="mt-4 space-y-2 text-sm">
              <li>
                <Link href="#" className="text-slate-400 hover:text-white">
                  Privacy Policy
                </Link>
              </li>
              <li>
                <Link href="#" className="text-slate-400 hover:text-white">
                  Terms of Service
                </Link>
              </li>
            </ul>
          </div>
        </div>
        <div className="mt-12 pt-8 border-t border-slate-800 flex flex-col sm:flex-row justify-between items-center">
          <p className="text-sm text-slate-500">
            &copy; {new Date().getFullYear()} Headlines Intelligence. All rights reserved.
          </p>
          <div className="flex items-center gap-4 mt-4 sm:mt-0">
            <a href="#" className="text-slate-500 hover:text-white transition-colors">
              <XIcon className="h-5 w-5" />
            </a>
            <a href="#" className="text-slate-500 hover:text-white transition-colors">
              <LinkedInIcon className="h-5 w-5" />
            </a>
          </div>
        </div>
      </div>
    </footer>
  )
}

```

## 📄 src/components/landing/GlobalCoverage.jsx
*Lines: 80, Size: 3.02 KB*

```jsx
// apps/client/src/app/(public)/_components/GlobalCoverage.jsx
'use client'

import { motion } from 'framer-motion'
import { CheckCircle } from 'lucide-react'

const features = [
  {
    name: '73 Countries Monitored',
    description:
      'Our AI operates across continents, ensuring you never miss an opportunity in your region.',
  },
  {
    name: 'Native Language Processing',
    description:
      'We analyze sources in their original language for maximum accuracy and nuance.',
  },
  {
    name: 'Source Triangulation',
    description:
      'Events are verified against multiple sources, from national newspapers to regulatory filings.',
  },
  {
    name: '24/7 Platform Reliability',
    description:
      'Our systems autonomously monitor data integrity to ensure a continuous, reliable intelligence flow.',
  },
]

export function GlobalCoverage() {
  return (
    <section className="relative w-full overflow-hidden">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
        <div className="relative h-96 lg:h-auto lg:self-stretch">
          <div className="absolute inset-0 bg-slate-900/50 rounded-2xl overflow-hidden">
            <div className="absolute inset-0 hero-grid-background opacity-50" />
            <div className="absolute inset-0 bg-[radial-gradient(circle_at_20%_30%,hsl(var(--primary)/0.1),transparent_40%)]" />
            <div className="absolute inset-0 bg-[radial-gradient(circle_at_80%_70%,hsl(var(--ring)/0.1),transparent_40%)]" />
          </div>
        </div>
        <div className="relative z-10">
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true, amount: 0.5 }}
            transition={{ duration: 0.8, ease: 'easeOut' }}
          >
            <h2 className="text-3xl sm:text-4xl font-bold tracking-tighter">
              Global Reach, Local Depth. Zero Blind Spots.
            </h2>
            <p className="mt-4 text-lg text-slate-400">
              Our infrastructure is built for the global wealth landscape. We go beyond
              simple translations to understand context, verify facts, and deliver
              intelligence with unparalleled precision.
            </p>
            <dl className="mt-8 grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-6">
              {features.map((feature) => (
                <div key={feature.name} className="relative">
                  <dt>
                    <CheckCircle
                      className="absolute h-6 w-6 text-green-500"
                      aria-hidden="true"
                    />
                    <p className="ml-9 text-lg font-semibold leading-6 text-slate-100">
                      {feature.name}
                    </p>
                  </dt>
                  <dd className="ml-9 mt-1 text-base leading-6 text-slate-400">
                    {feature.description}
                  </dd>
                </div>
              ))}
            </dl>
          </motion.div>
        </div>
      </div>
    </section>
  )
}

```

## 📄 src/components/landing/Hero.jsx
*Lines: 152, Size: 6.09 KB*

```jsx
// apps/client/src/app/(public)/_components/Hero.jsx
'use client'

import { useState } from 'react'
import { motion } from 'framer-motion'
import { Button } from '@/components/shared'
import { LiquidityTicker } from './LiquidityTicker'
import { LoginModal } from './LoginModal'
import { Zap, Target, Layers, Share2 } from 'lucide-react'

const FeatureCard = ({ icon, title, description, delay }) => (
  <motion.div
    variants={{
      hidden: { opacity: 0, y: 20 },
      visible: {
        opacity: 1,
        y: 0,
        transition: { duration: 0.6, ease: 'easeOut', delay },
      },
    }}
    className="bg-slate-900/40 border border-slate-800/60 p-6 rounded-lg backdrop-blur-sm text-left"
  >
    <div className="flex items-center gap-4">
      <div className="flex-shrink-0">{icon}</div>
      <h3 className="text-lg font-bold text-slate-100">{title}</h3>
    </div>
    <p className="mt-3 text-sm text-slate-400">{description}</p>
  </motion.div>
)

export function Hero({ tickerEvents }) {
  const [isLoginOpen, setIsLoginOpen] = useState(false)

  const handleScrollToSignUp = () => {
    document.getElementById('signup-flow')?.scrollIntoView({
      behavior: 'smooth',
      block: 'center',
    })
  }

  return (
    <>
      <header className="fixed top-0 left-0 right-0 z-40 p-4 bg-background/30 backdrop-blur-sm border-b border-slate-800/50">
        <div className="container mx-auto flex justify-between items-center">
          <div className="text-xl font-bold tracking-tighter">Headlines AI</div>
          <div className="flex items-center gap-2">
            <Button variant="ghost" onClick={() => setIsLoginOpen(true)}>
              Member Login
            </Button>
            <Button
              onClick={handleScrollToSignUp}
              className="bg-blue-600 hover:bg-blue-700 shadow-lg shadow-blue-500/20"
            >
              Start Free Trial
            </Button>
          </div>
        </div>
      </header>

      <section className="relative w-full min-h-screen flex flex-col justify-between overflow-hidden pt-24 pb-8 px-4">
        {/* Animated Background */}
        <div className="absolute inset-0 z-0 hero-aurora" />
        <div className="absolute inset-0 z-0 hero-grid-background" />

        {/* Main Content Area */}
        <div className="relative z-10 container mx-auto flex flex-col items-center justify-center flex-grow">
          <motion.div
            className="text-center"
            initial="hidden"
            animate="visible"
            variants={{ visible: { transition: { staggerChildren: 0.15 } } }}
          >
            <motion.h1
              variants={{ hidden: { opacity: 0, y: 20 }, visible: { opacity: 1, y: 0 } }}
              transition={{ duration: 0.8, ease: 'easeOut' }}
              className="text-5xl sm:text-6xl lg:text-7xl font-extrabold tracking-tight text-transparent bg-clip-text bg-gradient-to-br from-white to-slate-300 mb-8"
            >
              We Find Your Next Mandate.
            </motion.h1>

            <motion.p
              variants={{ hidden: { opacity: 0, y: 20 }, visible: { opacity: 1, y: 0 } }}
              transition={{ duration: 0.8, ease: 'easeOut', delay: 0.1 }}
              className="max-w-3xl mx-auto text-lg sm:text-xl text-slate-400"
            >
              Our AI engine delivers verified private wealth opportunities across 73
              countries, ensuring you never miss a mandate in your region.
            </motion.p>

            <motion.div
              variants={{ visible: { transition: { staggerChildren: 0.1 } } }}
              className="mt-16 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-7xl mx-auto"
            >
              <FeatureCard
                icon={<Zap className="h-6 w-6 text-blue-400" />}
                title="Events Dashboard"
                description="Track global liquidity events in real-time. Filter by country, sector, and deal size to focus on what matters."
                delay={0.2}
              />
              <FeatureCard
                icon={<Target className="h-6 w-6 text-green-400" />}
                title="Prospect Dossiers"
                description="AI-generated dossiers on key individuals, complete with estimated liquidity and outreach points."
                delay={0.3}
              />
              <FeatureCard
                icon={<Layers className="h-6 w-6 text-yellow-400" />}
                title="Unrivaled Sourcing"
                description="Our autonomous agents ingest data from thousands of global newspapers, regulatory filings, and PE/VC portfolio updates daily."
                delay={0.4}
              />
              <FeatureCard
                icon={<Share2 className="h-6 w-6 text-cyan-400" />}
                title="Seamless Delivery"
                description="Receive critical alerts through email, push notifications, or WhatsApp, and export any view to Excel for deeper analysis."
                delay={0.5}
              />
            </motion.div>

            <motion.div
              variants={{ hidden: { opacity: 0, y: 20 }, visible: { opacity: 1, y: 0 } }}
              transition={{ duration: 0.8, ease: 'easeOut', delay: 0.6 }}
              className="mt-16"
            >
              <Button
                size="lg"
                onClick={handleScrollToSignUp}
                className="text-lg px-8 py-6 bg-gradient-to-r from-amber-400 to-yellow-500 text-slate-900 font-bold hover:from-amber-300 hover:to-yellow-400 shadow-lg shadow-yellow-500/20 transform hover:scale-105 transition-transform"
              >
                Claim Your Intelligence Briefing
              </Button>
            </motion.div>
          </motion.div>
        </div>

        {/* Ticker Area */}
        <div className="relative z-10 container mx-auto w-full mt-16">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.8, delay: 0.8, ease: 'easeOut' }}
          >
            <LiquidityTicker events={tickerEvents} />
          </motion.div>
        </div>
      </section>

      <LoginModal open={isLoginOpen} onOpenChange={setIsLoginOpen} />
    </>
  )
}

```

## 📄 src/components/landing/InteractiveDemo.jsx
*Lines: 239, Size: 8.87 KB*

```jsx
// apps/client/src/app/(public)/_components/InteractiveDemo.jsx
'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  Badge,
  Button,
} from '@/components/shared'
import { getCountryFlag } from '@headlines/utils-shared'
import { CheckCircle, Zap, User, Briefcase, Eye, Mail, ExternalLink } from 'lucide-react'
import { format } from 'date-fns'

const demoEvents = [
  {
    id: 1,
    country: 'Denmark',
    date: '2025-09-15T10:00:00Z',
    score: 95,
    headline: 'Founder of private logistics firm exits in €250M acquisition',
    opportunity: {
      name: 'J. Hansen',
      role: 'Founder & Seller',
      company: 'Nordic Freight Solutions',
      wealth: '~€175M',
      email: 'j.hansen@nordicfreight.com',
    },
    analysis: {
      assessment:
        'Confirmed sale of a privately-held company to a strategic buyer, resulting in a significant liquidity event for the founder.',
      sources: [
        { name: 'Børsen', link: '#' },
        { name: 'Financial Times', link: '#' },
      ],
      rag: 'Cross-referenced internal database: Found prior funding round in 2018.',
    },
  },
  {
    id: 2,
    country: 'Sweden',
    date: '2025-09-14T14:00:00Z',
    score: 92,
    headline: 'Family-owned industrial manufacturer announces succession plan',
    opportunity: {
      name: 'The Johansson Family',
      role: 'Owners',
      company: 'ScandiMechanics AB',
      wealth: 'Generational',
      email: null,
    },
    analysis: {
      assessment:
        'High-value signal of future liquidity. The transition to the next generation often precedes a partial or full sale of the family business.',
      sources: [{ name: 'Dagens Industri', link: '#' }],
      rag: 'Identified entity as a 3rd generation family business with €500M+ revenue.',
    },
  },
  {
    id: 3,
    country: 'United Kingdom',
    date: '2025-09-13T08:00:00Z',
    score: 88,
    headline: 'Early investor in fintech unicorn realizes gains in secondary sale',
    opportunity: {
      name: 'A. Wallace',
      role: 'Angel Investor',
      company: 'FinTech Growth Ltd',
      wealth: '~£45M',
      email: 'a.wallace@angelvest.co.uk',
    },
    analysis: {
      assessment:
        'Secondary share sale indicates early backers are cashing out, providing new liquidity ahead of a potential IPO.',
      sources: [
        { name: 'TechCrunch', link: '#' },
        { name: 'City A.M.', link: '#' },
      ],
      rag: 'No prior records found. New entity detected.',
    },
  },
]

export function InteractiveDemo() {
  const [selectedEventId, setSelectedEventId] = useState(demoEvents[0].id)
  const selectedEvent = demoEvents.find((e) => e.id === selectedEventId)

  const panelVariants = {
    hidden: { opacity: 0, y: 10 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5, ease: 'easeOut' } },
  }

  return (
    <section className="w-full">
      <div className="text-center mb-12">
        <h2 className="text-3xl sm:text-4xl font-bold tracking-tighter">
          Experience the Workflow
        </h2>
        <p className="mt-4 max-w-2xl mx-auto text-lg text-slate-400">
          See how our platform transforms raw information into an actionable mandate.
          Click an event to explore the synthesized intelligence.
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Event List Panel */}
        <Card className="col-span-1 bg-slate-900/50 border-slate-800">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-lg">
              <Zap className="text-blue-400" />
              Incoming Events
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            {demoEvents.map((event) => (
              <button
                key={event.id}
                onClick={() => setSelectedEventId(event.id)}
                className={`w-full text-left p-3 rounded-lg border-2 transition-all ${
                  selectedEventId === event.id
                    ? 'bg-blue-600/20 border-blue-500'
                    : 'bg-slate-800/50 border-transparent hover:border-slate-600'
                }`}
              >
                <div className="flex justify-between items-start">
                  <p className="font-semibold text-slate-100 pr-4">
                    <span className="text-xl mr-2">{getCountryFlag(event.country)}</span>
                    {event.headline}
                  </p>
                  <Badge className="bg-slate-900 text-slate-300">{event.score}</Badge>
                </div>
                <p className="text-xs text-slate-500 mt-1">
                  {format(new Date(event.date), 'MMMM d, yyyy')}
                </p>
              </button>
            ))}
          </CardContent>
        </Card>

        {/* Opportunity & Analysis Panels */}
        <div className="lg:col-span-2 space-y-6">
          <AnimatePresence mode="wait">
            <motion.div
              key={selectedEventId}
              initial="hidden"
              animate="visible"
              variants={{
                visible: { transition: { staggerChildren: 0.1 } },
              }}
              className="space-y-6"
            >
              {/* Opportunity Dossier */}
              <motion.div variants={panelVariants}>
                <Card className="bg-slate-900/50 border-slate-800">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-lg">
                      <User className="text-green-400" />
                      Actionable Opportunity
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-2xl font-bold text-slate-100">
                      {selectedEvent.opportunity.name}
                    </p>
                    <div className="space-y-1 mt-1">
                      <p className="text-slate-400 flex items-center gap-2">
                        <Briefcase className="h-4 w-4" />
                        {selectedEvent.opportunity.role} at{' '}
                        <strong>{selectedEvent.opportunity.company}</strong>
                      </p>
                      {selectedEvent.opportunity.email && (
                        <p className="text-blue-400 flex items-center gap-2">
                          <Mail className="h-4 w-4" />
                          {selectedEvent.opportunity.email}
                        </p>
                      )}
                    </div>
                    <Badge
                      variant="outline"
                      className="mt-3 text-lg border-green-500/50 text-green-300"
                    >
                      Est. Liquidity: {selectedEvent.opportunity.wealth}
                    </Badge>
                  </CardContent>
                </Card>
              </motion.div>

              {/* AI Analysis */}
              <motion.div variants={panelVariants}>
                <Card className="bg-slate-900/50 border-slate-800">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-lg">
                      <Eye className="text-purple-400" />
                      AI Analysis & Verification
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4 text-sm">
                    <div>
                      <h4 className="font-semibold text-slate-300">Assessment</h4>
                      <p className="text-slate-400 italic">
                        "{selectedEvent.analysis.assessment}"
                      </p>
                    </div>
                    <div>
                      <h4 className="font-semibold text-slate-300">
                        Source Triangulation
                      </h4>
                      <div className="flex flex-wrap gap-2 mt-1">
                        {selectedEvent.analysis.sources.map((source) => (
                          <Button key={source.name} variant="secondary" size="sm" asChild>
                            <a
                              href={source.link}
                              target="_blank"
                              rel="noopener noreferrer"
                            >
                              <ExternalLink className="h-3 w-3 mr-1.5" />
                              {source.name}
                            </a>
                          </Button>
                        ))}
                      </div>
                    </div>
                    <div>
                      <h4 className="font-semibold text-slate-300">Historical Context</h4>
                      <p className="text-slate-400">{selectedEvent.analysis.rag}</p>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            </motion.div>
          </AnimatePresence>
        </div>
      </div>
    </section>
  )
}
```

## 📄 src/components/landing/LandingPage.jsx
*Lines: 32, Size: 1.06 KB*

```jsx
// headlines/client/src/components/landing/LandingPage.jsx
import { getPublicTickerEvents } from '@headlines/data-access/next'
import { Hero } from './Hero'
import { InteractiveDemo } from './InteractiveDemo'
import { Features } from './Features'
import { GlobalCoverage } from './GlobalCoverage'
import { SignUpFlow } from './SignUpFlow'
import { AboutSection } from './AboutSection'
import { StatsSection } from './StatsSection'
import { Footer } from './Footer'

export const dynamic = 'force-dynamic'

export default async function LandingPage() {
  const tickerResult = await getPublicTickerEvents()
  const tickerEvents = tickerResult.success ? tickerResult.data : []

  return (
    <main className="flex flex-col items-center">
      <Hero tickerEvents={tickerEvents} />
      <div className="w-full container mx-auto px-4 sm:px-6 lg:px-8 mt-24 sm:mt-32 space-y-24 sm:space-y-32">
        <StatsSection />
        <InteractiveDemo />
        <Features />
        <AboutSection />
        <GlobalCoverage />
        <SignUpFlow />
      </div>
      <Footer />
    </main>
  )
}
```

## 📄 src/components/landing/LiquidityTicker.jsx
*Lines: 61, Size: 1.92 KB*

```jsx
// apps/client/src/app/(public)/_components/LiquidityTicker.jsx
'use client'

import { getCountryFlag } from '@headlines/utils-shared'
import { motion } from 'framer-motion'
import { format } from 'date-fns'

export function LiquidityTicker({ events }) {
  if (!events || events.length === 0) {
    return null
  }

  // Duplicate the events to create a seamless looping effect
  const duplicatedEvents = [...events, ...events]

  const tickerVariants = {
    animate: {
      x: ['0%', '-50%'],
      transition: {
        x: {
          repeat: Infinity,
          repeatType: 'loop',
          duration: events.length * 10, // Increase duration for slower, more readable scroll
          ease: 'linear',
        },
      },
    },
  }

  return (
    <div className="w-full overflow-hidden bg-slate-900/50 backdrop-blur-sm border border-slate-800/50 rounded-lg">
      <div className="relative h-20">
        <div className="absolute inset-y-0 left-0 w-24 bg-gradient-to-r from-background to-transparent z-10" />
        <div className="absolute inset-y-0 right-0 w-24 bg-gradient-to-l from-background to-transparent z-10" />

        <motion.div
          className="flex h-full items-center"
          variants={tickerVariants}
          animate="animate"
        >
          {duplicatedEvents.map((event, index) => (
            <div
              key={`${event._id}-${index}`}
              className="flex-shrink-0 flex items-center gap-4 px-8"
              style={{ minWidth: 'max-content' }}
            >
              <span className="text-3xl">{getCountryFlag(event.country)}</span>
              <div>
                <p className="text-sm font-semibold text-slate-200">{event.headline}</p>
                <p className="text-xs text-slate-500">
                  {format(new Date(), 'MMM d, yyyy')} • Source: Financial Times
                </p>
              </div>
            </div>
          ))}
        </motion.div>
      </div>
    </div>
  )
}

```

## 📄 src/components/landing/LoginModal.jsx
*Lines: 77, Size: 2.3 KB*

```jsx
// apps/client/src/app/(public)/_components/LoginModal.jsx
'use client'

import { useState } from 'react'
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  Input,
  Label,
  Button,
} from '@/components/shared'
import { useAuth } from '@/lib/auth/client'
import { toast } from 'sonner'
import { Loader2 } from 'lucide-react'

export function LoginModal({ open, onOpenChange }) {
  const { login } = useAuth()
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [isLoading, setIsLoading] = useState(false)

  const handleLogin = async (e) => {
    e.preventDefault()
    setIsLoading(true)
    const success = await login(email, password)
    if (success) {
      onOpenChange(false) // Close modal on success, AuthProvider will redirect
    } else {
      // toast.error is handled within the useAuth hook
    }
    setIsLoading(false)
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md bg-slate-900/80 backdrop-blur-md border-slate-700">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold">Member Login</DialogTitle>
          <DialogDescription>Access your intelligence dashboard.</DialogDescription>
        </DialogHeader>
        <form onSubmit={handleLogin} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="email">Email Address</Label>
            <Input
              id="email"
              type="email"
              placeholder="you@yourfirm.com"
              required
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              disabled={isLoading}
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="password">Password</Label>
            <Input
              id="password"
              type="password"
              required
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              disabled={isLoading}
            />
          </div>
          <Button type="submit" className="w-full h-11" disabled={isLoading}>
            {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            Secure Login
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/components/landing/SignUpFlow.jsx
*Lines: 245, Size: 8.29 KB*

```jsx
// apps/client/src/app/(public)/_components/SignUpFlow.jsx
'use client'

import { useState } from 'react'
import { motion } from 'framer-motion'
import {
  Card,
  CardContent,
  Input,
  Label,
  Button,
  Checkbox,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/shared'
import { useAuth } from '@/lib/auth/client'
import { toast } from 'sonner'
import { Loader2 } from 'lucide-react'

// Dummy data for now
const allCountries = [
  'Denmark',
  'Sweden',
  'Norway',
  'Finland',
  'Germany',
  'United Kingdom',
  'United States',
  'France',
  'Italy',
  'Spain',
  'Switzerland',
  'Netherlands',
].sort()
const allSectors = [
  'Technology',
  'Healthcare',
  'Industrials',
  'Real Estate',
  'Consumer Goods',
  'Financial Services',
]

export function SignUpFlow() {
  const { signup } = useAuth()
  const [step, setStep] = useState(1)
  const [isLoading, setIsLoading] = useState(false)
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    countries: ['Denmark', 'Sweden', 'Norway'],
    sectors: ['Technology'],
    plan: 'trial',
  })

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.id]: e.target.value })
  }

  const handleCreateAccount = async (e) => {
    e.preventDefault()
    setIsLoading(true)

    const result = await signup({
      name: formData.name,
      email: formData.email,
      password: formData.password,
      countries: formData.countries,
      plan: formData.plan,
    })

    // On success, the AuthProvider will handle the redirect.
    // We only need to handle the loading state here.
    if (!result.success) {
      setIsLoading(false) // Stop loading on failure
    }
  }

  const countryCount = formData.countries.length
  const sectorCount = formData.sectors.length

  return (
    <section id="signup-flow" className="w-full py-24">
      <div className="text-center mb-12">
        <h2 className="text-3xl sm:text-4xl font-bold tracking-tighter">
          Build Your Intelligence Engine in 60 Seconds
        </h2>
        <p className="mt-4 max-w-2xl mx-auto text-lg text-slate-400">
          Start your 30-day free trial. No credit card required. Cancel anytime.
        </p>
      </div>

      <Card className="max-w-4xl mx-auto bg-slate-900/50 border-slate-800">
        <div className="grid grid-cols-1 md:grid-cols-2">
          {/* Form Side */}
          <div className="p-8">
            <form onSubmit={handleCreateAccount} className="space-y-6">
              <div>
                <Label htmlFor="name">Full Name</Label>
                <Input
                  id="name"
                  type="text"
                  placeholder="John Doe"
                  required
                  onChange={handleChange}
                  value={formData.name}
                />
              </div>
              <div>
                <Label htmlFor="email">Work Email</Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="john.doe@wealth.com"
                  required
                  onChange={handleChange}
                  value={formData.email}
                />
              </div>
              <div>
                <Label htmlFor="password">Password</Label>
                <Input
                  id="password"
                  type="password"
                  required
                  minLength={8}
                  onChange={handleChange}
                  value={formData.password}
                />
              </div>

              <div className="space-y-2">
                <Label>Focus Areas</Label>
                <Tabs defaultValue="countries">
                  <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value="countries">
                      Countries ({countryCount})
                    </TabsTrigger>
                    <TabsTrigger value="sectors">Sectors ({sectorCount})</TabsTrigger>
                  </TabsList>
                  <TabsContent
                    value="countries"
                    className="h-40 overflow-y-auto custom-scrollbar p-2 border border-slate-700 rounded-md"
                  >
                    <div className="space-y-2">
                      {allCountries.map((country) => (
                        <div key={country} className="flex items-center gap-2">
                          <Checkbox
                            id={`country-${country}`}
                            checked={formData.countries.includes(country)}
                            onCheckedChange={(checked) => {
                              const newCountries = checked
                                ? [...formData.countries, country]
                                : formData.countries.filter((c) => c !== country)
                              setFormData({ ...formData, countries: newCountries.sort() })
                            }}
                          />
                          <Label htmlFor={`country-${country}`} className="font-normal">
                            {country}
                          </Label>
                        </div>
                      ))}
                    </div>
                  </TabsContent>
                  <TabsContent
                    value="sectors"
                    className="h-40 overflow-y-auto custom-scrollbar p-2 border border-slate-700 rounded-md"
                  >
                    <div className="space-y-2">
                      {allSectors.map((sector) => (
                        <div key={sector} className="flex items-center gap-2">
                          <Checkbox
                            id={`sector-${sector}`}
                            checked={formData.sectors.includes(sector)}
                            onCheckedChange={(checked) => {
                              const newSectors = checked
                                ? [...formData.sectors, sector]
                                : formData.sectors.filter((s) => s !== sector)
                              setFormData({ ...formData, sectors: newSectors.sort() })
                            }}
                          />
                          <Label htmlFor={`sector-${sector}`} className="font-normal">
                            {sector}
                          </Label>
                        </div>
                      ))}
                    </div>
                  </TabsContent>
                </Tabs>
              </div>

              <div>
                <Button
                  type="submit"
                  size="lg"
                  className="w-full text-lg h-12 bg-blue-600 hover:bg-blue-700"
                  disabled={isLoading}
                >
                  {isLoading && <Loader2 className="mr-2 h-5 w-5 animate-spin" />}
                  Create My Account
                </Button>
              </div>
            </form>
          </div>
          {/* Summary Side */}
          <div className="hidden md:block bg-slate-900 p-8 rounded-r-lg">
            <h3 className="text-xl font-bold text-slate-100">
              Your Personalized Briefing
            </h3>
            <p className="mt-2 text-slate-400">
              Your daily intelligence digest will be configured to monitor:
            </p>
            <div className="mt-6 space-y-4">
              <div>
                <h4 className="font-semibold text-slate-300">Geographic Focus</h4>
                <p className="text-blue-300">
                  {countryCount > 0 ? formData.countries.join(', ') : 'None selected'}
                </p>
              </div>
              <div>
                <h4 className="font-semibold text-slate-300">Sector Focus</h4>
                <p className="text-purple-300">
                  {sectorCount > 0 ? formData.sectors.join(', ') : 'None selected'}
                </p>
              </div>
            </div>

            <div className="mt-8 pt-6 border-t border-slate-700">
              <h4 className="font-semibold text-slate-300">Plan: 30-Day Free Trial</h4>
              <ul className="mt-2 space-y-2 text-sm text-slate-400 list-disc list-inside">
                <li>Unlimited event access</li>
                <li>Daily email summaries</li>
                <li>Push notifications</li>
                <li>Full access to AI Chat</li>
              </ul>
            </div>
          </div>
        </div>
      </Card>
    </section>
  )
}
```

## 📄 src/components/landing/StatsSection.jsx
*Lines: 58, Size: 1.94 KB*

```jsx
// apps/client/src/app/(public)/_components/StatsSection.jsx
'use client'

import { motion, useInView } from 'framer-motion'
import { useEffect, useRef } from 'react'
import { animate } from 'framer-motion'
import { Database, FileText, Zap } from 'lucide-react'

function AnimatedCounter({ to, suffix = '' }) {
  const ref = useRef(null)
  const isInView = useInView(ref, { once: true, margin: '-100px' })

  useEffect(() => {
    if (isInView) {
      const node = ref.current
      const controls = animate(0, to, {
        duration: 2,
        onUpdate(value) {
          node.textContent = Math.round(value).toLocaleString('en-US') + suffix
        },
      })
      return () => controls.stop()
    }
  }, [isInView, to, suffix])

  return <span ref={ref}>0</span>
}

export function StatsSection() {
  return (
    <section className="w-full">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8 text-center">
        <div className="p-6">
          <Database className="h-12 w-12 mx-auto text-blue-400 mb-4" />
          <p className="text-5xl font-bold text-slate-100 tracking-tighter">
            <AnimatedCounter to={1200000} suffix="+" />
          </p>
          <p className="text-lg text-slate-400 mt-2">Articles in Database</p>
        </div>
        <div className="p-6">
          <Zap className="h-12 w-12 mx-auto text-green-400 mb-4" />
          <p className="text-5xl font-bold text-slate-100 tracking-tighter">
            <AnimatedCounter to={50000} suffix="+" />
          </p>
          <p className="text-lg text-slate-400 mt-2">Verified Liquidity Events</p>
        </div>
        <div className="p-6">
          <FileText className="h-12 w-12 mx-auto text-purple-400 mb-4" />
          <p className="text-5xl font-bold text-slate-100 tracking-tighter">
            <AnimatedCounter to={15000} suffix="+" />
          </p>
          <p className="text-lg text-slate-400 mt-2">Sources Analyzed Daily</p>
        </div>
      </div>
    </section>
  )
}

```

## 📄 src/components/placeholders.jsx
*Lines: 39, Size: 1.29 KB*

```jsx
// // File: apps/client/src/components/placeholders.jsx
// 'use client'

// // Simple placeholders to make the login page render without the full UI library.
// export const Card = ({ className, children, ...props }) => (
//   <div className={className} {...props}>
//     {children}
//   </div>
// )
// export const CardHeader = ({ className, children, ...props }) => (
//   <div className={className} {...props}>
//     {children}
//   </div>
// )
// export const CardContent = ({ className, children, ...props }) => (
//   <div className={className} {...props}>
//     {children}
//   </div>
// )
// export const CardFooter = ({ className, children, ...props }) => (
//   <div className={className} {...props}>
//     {children}
//   </div>
// )
// export const Input = (props) => (
//   <input {...props} className="p-2 border rounded w-full bg-gray-800 text-white" />
// )
// export const Button = ({ children, ...props }) => (
//   <button {...props} className="p-2 bg-blue-600 text-white rounded w-full">
//     {children}
//   </button>
// )
// export const Label = (props) => <label {...props} className="block mb-1 text-sm" />
// export const LoadingOverlay = ({ text }) => (
//   <div className="fixed inset-0 bg-black/50 flex items-center justify-center text-white">
//     {text || 'Loading...'}
//   </div>
// )

```

## 📄 src/components/shared/buttons/ExportButton.jsx
*Lines: 61, Size: 1.51 KB*

```jsx
// packages/ui/src/ExportButton.jsx (version 2.0.0)
'use client'

import { useState } from 'react'
import {
  Button,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '../elements'
import { Download, Loader2 } from 'lucide-react'
import { toast } from 'sonner'

export function ExportButton({ hasData, onExport }) {
  const [isLoading, setIsLoading] = useState(false)

  const handleExportClick = async (format) => {
    if (!hasData) {
      toast.info('No data available to export.')
      return
    }

    if (typeof onExport !== 'function') {
      toast.error('Export action is not configured correctly.')
      return
    }

    setIsLoading(true)
    const result = await onExport(format)
    setIsLoading(false)

    if (result?.success) {
      toast.success('Your download will begin shortly.')
    }
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button disabled={isLoading || !hasData}>
          {isLoading ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Download className="mr-2 h-4 w-4" />
          )}
          Export
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => handleExportClick('csv')}>
          Export as CSV
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => handleExportClick('xlsx')}>
          Export as Excel (.xls)
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

```

## 📄 src/components/shared/buttons/InstallPwaButton.jsx
*Lines: 112, Size: 3.1 KB*

```jsx
// src/components/InstallPwaButton.jsx (version 2.0)
'use client'

import { useState, useEffect } from 'react'
import { Download, Smartphone } from 'lucide-react'
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
  Button,
} from '../elements'
import { IOSInstallInstructions } from '../modals/IOSInstallInstructions'

export function InstallPwaButton() {
  const [installPrompt, setInstallPrompt] = useState(null)
  const [isAppInstalled, setIsAppInstalled] = useState(false)
  const [isIOS, setIsIOS] = useState(false)
  const [showIOSInstructions, setShowIOSInstructions] = useState(false)

  useEffect(() => {
    // Detect iOS
    const isIOSDevice = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream
    setIsIOS(isIOSDevice)

    const handleBeforeInstallPrompt = (e) => {
      e.preventDefault()
      // This event only fires on supported browsers (e.g., Chrome on Android/Desktop)
      setInstallPrompt(e)
    }

    const checkInstallStatus = () => {
      // Standalone mode is a strong indicator of an installed PWA
      if (window.matchMedia('(display-mode: standalone)').matches) {
        setIsAppInstalled(true)
      }
    }

    checkInstallStatus()
    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt)
    window.addEventListener('appinstalled', () => {
      setIsAppInstalled(true)
      setInstallPrompt(null)
    })

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt)
    }
  }, [])

  const handleInstallClick = async () => {
    if (!installPrompt) return
    installPrompt.prompt()
    await installPrompt.userChoice
    setInstallPrompt(null)
  }

  const handleIOSClick = () => {
    setShowIOSInstructions(true)
  }

  // If the app is already installed, render nothing.
  if (isAppInstalled) {
    return null
  }

  // If on iOS, show the button that triggers the instruction modal.
  if (isIOS) {
    return (
      <>
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button variant="ghost" size="icon" onClick={handleIOSClick}>
                <Smartphone className="h-4 w-4" />
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Install on iPhone</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        <IOSInstallInstructions
          open={showIOSInstructions}
          onOpenChange={setShowIOSInstructions}
        />
      </>
    )
  }

  // If on a compatible browser and the install prompt is available, show the direct install button.
  if (installPrompt) {
    return (
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <Button variant="ghost" size="icon" onClick={handleInstallClick}>
              <Download className="h-4 w-4" />
            </Button>
          </TooltipTrigger>
          <TooltipContent>
            <p>Install App</p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    )
  }

  // Fallback for other scenarios (e.g., desktop browser without PWA support) - show nothing.
  return null
}

```

## 📄 src/components/shared/buttons/NotificationToggles.jsx
*Lines: 88, Size: 2.57 KB*

```jsx
// apps/client/src/components/NotificationToggles.jsx
'use client'

import { Mail, Bell, BellOff, Loader2, MailMinus } from 'lucide-react'
import {
  Button,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '../elements'
import { useAuth } from '@/lib/auth/client.js'
import { usePushManager } from '@/hooks'
import { saveSubscription } from '@/lib/api-client' // Import the save function

export function NotificationToggles() {
  const { user, updateUserPreferences } = useAuth()

  // Pass user and the save function to the hook
  const {
    isSupported: isPushSupported,
    isSubscribed: isBrowserSubscribed,
    isLoading: isPushLoading,
    subscribe: subscribeToPush,
  } = usePushManager({ user, saveSubscription })

  if (!user) return null

  const handleEmailToggle = () => {
    updateUserPreferences({ emailNotificationsEnabled: !user.emailNotificationsEnabled })
  }

  const handlePushToggle = async () => {
    const newPreference = !user.pushNotificationsEnabled
    await updateUserPreferences({ pushNotificationsEnabled: newPreference })
    if (newPreference && isPushSupported && !isBrowserSubscribed) {
      await subscribeToPush()
    }
  }

  const isPushEnabled = user.pushNotificationsEnabled && isBrowserSubscribed

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button variant="ghost" size="icon" onClick={handleEmailToggle}>
            {user.emailNotificationsEnabled ? (
              <Mail className="h-4 w-4 text-green-400" />
            ) : (
              <MailMinus className="h-4 w-4" />
            )}
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          <p>
            {user.emailNotificationsEnabled ? 'Disable' : 'Enable'} Email Notifications
          </p>
        </TooltipContent>
      </Tooltip>

      {isPushSupported && (
        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              onClick={handlePushToggle}
              disabled={isPushLoading}
            >
              {isPushLoading && <Loader2 className="h-4 w-4 animate-spin" />}
              {!isPushLoading &&
                (isPushEnabled ? (
                  <Bell className="h-4 w-4 text-green-400" />
                ) : (
                  <BellOff className="h-4 w-4" />
                ))}
            </Button>
          </TooltipTrigger>
          <TooltipContent>
            <p>{isPushEnabled ? 'Disable' : 'Enable'} Push Notifications</p>
          </TooltipContent>
        </Tooltip>
      )}
    </TooltipProvider>
  )
}

```

## 📄 src/components/shared/elements/EditableCell.jsx
*Lines: 77, Size: 2.1 KB*

```jsx
'use client'

import React, { useState, useEffect, useRef } from 'react'
import { Input, Textarea } from '.'
import { Edit } from 'lucide-react'

export const EditableCell = ({
  initialValue,
  onSave,
  placeholder = 'N/A',
  useTextarea = false, // Add this prop back if needed for headlines
}) => {
  const [isEditing, setIsEditing] = useState(false)
  // Handle case where initialValue is null or undefined
  const [value, setValue] = useState(initialValue ?? '')
  const inputRef = useRef(null)

  useEffect(() => {
    if (isEditing) {
      inputRef.current?.focus()
      inputRef.current?.select()
    }
  }, [isEditing])

  const handleSave = () => {
    // Only save if the value has actually changed
    if (String(value).trim() !== String(initialValue ?? '').trim()) {
      onSave(String(value).trim())
    }
    setIsEditing(false)
  }

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey && !useTextarea) {
      handleSave()
    } else if (e.key === 'Escape') {
      setValue(initialValue ?? '')
      setIsEditing(false)
    }
  }

  if (isEditing) {
    const Component = useTextarea ? Textarea : Input // Allow Textarea again
    return (
      <Component
        ref={inputRef}
        value={value}
        onChange={(e) => setValue(e.target.value)}
        onBlur={handleSave}
        onKeyDown={handleKeyDown}
        className="h-7 text-xs p-1 bg-secondary border-primary/50"
      />
    )
  }

  // --- START OF THE FIX for displaying '0' ---
  // Check if initialValue is null or undefined, not just falsy
  const displayValue = initialValue ?? null
  // --- END OF THE FIX ---

  return (
    <div
      className="group flex items-center cursor-pointer p-1 -m-1 rounded-md hover:bg-secondary/50 min-h-[28px]"
      onClick={() => setIsEditing(true)}
    >
      <span className="truncate">
        {displayValue !== null ? (
          displayValue
        ) : (
          <span className="text-muted-foreground italic">{placeholder}</span>
        )}
      </span>
      <Edit className="h-3 w-3 ml-2 text-muted-foreground opacity-0 group-hover:opacity-100 flex-shrink-0" />
    </div>
  )
}

```

## 📄 src/components/shared/elements/accordion.jsx
*Lines: 41, Size: 1.62 KB*

```jsx
'use client'
import * as React from 'react'
import * as AccordionPrimitive from '@radix-ui/react-accordion'
import { ChevronDown } from 'lucide-react'
import { cn } from '@headlines/utils-shared'
const Accordion = AccordionPrimitive.Root
const AccordionItem = React.forwardRef(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item ref={ref} className={cn('border-b', className)} {...props} />
))
AccordionItem.displayName = 'AccordionItem'
const AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    {' '}
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180',
        className
      )}
      {...props}
    >
      {' '}
      {children}{' '}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />{' '}
    </AccordionPrimitive.Trigger>{' '}
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName
const AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    {' '}
    <div className={cn('pb-4 pt-0', className)}>{children}</div>{' '}
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName
export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

```

## 📄 src/components/shared/elements/alert-dialog.jsx
*Lines: 108, Size: 3.52 KB*

```jsx
// packages/ui/src/components/alert-dialog.jsx (version 1.3.0 - Definitive Slot Fix)
'use client'

import * as React from 'react'
import * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog'
import { cn } from '@headlines/utils-shared'
import { buttonVariants } from './button'

const AlertDialog = AlertDialogPrimitive.Root
const AlertDialogTrigger = AlertDialogPrimitive.Trigger
const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({ className, ...props }) => (
  <div
    className={cn('flex flex-col space-y-2 text-center sm:text-left', className)}
    {...props}
  />
)
AlertDialogHeader.displayName = 'AlertDialogHeader'

const AlertDialogFooter = ({ className, ...props }) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = 'AlertDialogFooter'

const AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold', className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
AlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(buttonVariants({ variant: 'outline' }), 'mt-2 sm:mt-0', className)}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

```

## 📄 src/components/shared/elements/badge.jsx
*Lines: 31, Size: 992 Bytes*

```jsx
import * as React from 'react'
import { cva } from 'class-variance-authority'

import { cn } from '@headlines/utils-shared'

const badgeVariants = cva(
  'inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
  {
    variants: {
      variant: {
        default:
          'border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80',
        secondary:
          'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',
        destructive:
          'border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80',
        outline: 'text-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
)

function Badge({ className, variant, ...props }) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />
}

export { Badge, badgeVariants }

```

## 📄 src/components/shared/elements/button.jsx
*Lines: 50, Size: 1.63 KB*

```jsx
// src/components/ui/button.jsx (version 1.1)
import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cva } from 'class-variance-authority'

import { cn } from '@headlines/utils-shared'

const buttonVariants = cva(
  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline:
          'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
)

const Button = React.forwardRef(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button'
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = 'Button'

export { Button, buttonVariants }

```

## 📄 src/components/shared/elements/card.jsx
*Lines: 52, Size: 1.64 KB*

```jsx
// src/components/ui/card.jsx (version 1.1)
import * as React from 'react'

import { Slot } from '@radix-ui/react-slot' // <-- Import Slot
import { cn } from '@headlines/utils-shared'

const Card = React.forwardRef(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : 'div' // <-- Use Slot if asChild is true
  return (
    <Comp
      ref={ref}
      className={cn(
        'rounded-lg border bg-card text-card-foreground shadow-sm',
        className
      )}
      {...props}
    />
  )
})
Card.displayName = 'Card'

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('flex flex-col space-y-1.5 p-6', className)} {...props} />
))
CardHeader.displayName = 'CardHeader'

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn('text-2xl font-semibold leading-none tracking-tight', className)}
    {...props}
  />
))
CardTitle.displayName = 'CardTitle'

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <p ref={ref} className={cn('text-sm text-muted-foreground', className)} {...props} />
))
CardDescription.displayName = 'CardDescription'

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
))
CardContent.displayName = 'CardContent'

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('flex items-center p-6 pt-0', className)} {...props} />
))
CardFooter.displayName = 'CardFooter'

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

```

## 📄 src/components/shared/elements/checkbox.jsx
*Lines: 26, Size: 1009 Bytes*

```jsx
// src/components/ui/checkbox.jsx (version 1.0)
'use client'
import * as React from 'react'
import * as CheckboxPrimitive from '@radix-ui/react-checkbox'
import { Check } from 'lucide-react'

import { cn } from '@headlines/utils-shared'
const Checkbox = React.forwardRef(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn('flex items-center justify-center text-current')}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName
export { Checkbox }

```

## 📄 src/components/shared/elements/command.jsx
*Lines: 122, Size: 3.83 KB*

```jsx
// packages/ui/src/components/command.jsx (version 1.2.0 - Definitive Slot Fix)
'use client'

import * as React from 'react'
import { Dialog, DialogContent } from './dialog'
import { Search } from 'lucide-react'
import { Command as CommandPrimitive } from 'cmdk'
import { cn } from '@headlines/utils-shared'

const Command = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        'flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef((props, ref) => (
  <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 h-px bg-border', className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50',
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({ className, ...props }) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest text-muted-foreground', className)}
      {...props}
    />
  )
}
CommandShortcut.displayName = 'CommandShortcut'

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

```

## 📄 src/components/shared/elements/dialog.jsx
*Lines: 97, Size: 3.22 KB*

```jsx
// packages/ui/src/components/dialog.jsx (version 2.0.0 - Definitive Slot Fix)
'use client'

import * as React from 'react'
import * as DialogPrimitive from '@radix-ui/react-dialog'
import { X } from 'lucide-react'

import { cn } from '@headlines/utils-shared'

const Dialog = DialogPrimitive.Root
const DialogTrigger = DialogPrimitive.Trigger
const DialogPortal = DialogPrimitive.Portal
const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({ className, ...props }) => (
  <div
    className={cn('flex flex-col space-y-1.5 text-center sm:text-left', className)}
    {...props}
  />
)
DialogHeader.displayName = 'DialogHeader'

const DialogFooter = ({ className, ...props }) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = 'DialogFooter'

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold leading-none tracking-tight', className)}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
  DialogPortal,
  DialogOverlay,
  DialogClose,
}

```

## 📄 src/components/shared/elements/dropdown-menu.jsx
*Lines: 166, Size: 6.21 KB*

```jsx
// packages/ui/src/components/dropdown-menu.jsx (version 3.0.0 - Definitive Slot Fix)
'use client'
import * as React from 'react'
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'
import { Check, ChevronRight, Circle } from 'lucide-react'
import { cn } from '@headlines/utils-shared'

const DropdownMenu = DropdownMenuPrimitive.Root
const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger
const DropdownMenuGroup = DropdownMenuPrimitive.Group
const DropdownMenuPortal = DropdownMenuPrimitive.Portal
const DropdownMenuSub = DropdownMenuPrimitive.Sub
const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef(
  ({ className, inset, children, ...props }, ref) => (
    <DropdownMenuPrimitive.SubTrigger
      ref={ref}
      className={cn(
        'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',
        inset && 'pl-8',
        className
      )}
      {...props}
    >
      {children}
      <ChevronRight className="ml-auto h-4 w-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
)
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef(
  ({ className, sideOffset = 4, ...props }, ref) => (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        ref={ref}
        sideOffset={sideOffset}
        className={cn(
          'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md',
          'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
)
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef(
  ({ className, children, checked, ...props }, ref) => (
    <DropdownMenuPrimitive.CheckboxItem
      ref={ref}
      className={cn(
        'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          {' '}
          <Check className="h-4 w-4" />{' '}
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
)
DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef(
  ({ className, children, ...props }, ref) => (
    <DropdownMenuPrimitive.RadioItem
      ref={ref}
      className={cn(
        'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
        className
      )}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          {' '}
          <Circle className="h-2 w-2 fill-current" />{' '}
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
)
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn('px-2 py-1.5 text-sm font-semibold', inset && 'pl-8', className)}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({ className, ...props }) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest opacity-60', className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = 'DropdownMenuShortcut'

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

```

## 📄 src/components/shared/elements/index.js
*Lines: 22, Size: 571 Bytes*

```javascript
export * from './accordion'
export * from './alert-dialog'
export * from './badge'
export * from './button'
export * from './card'
export * from './checkbox'
export * from './command'
export * from './dialog'
export * from './dropdown-menu'
export * from './input'
export * from './label'
export * from './popover'
export * from './select'
export * from './separator'
export * from './sheet'
export * from './sonner'
export * from './switch'
export * from './table'
export * from './tabs'
export * from './scroll-area'
export * from './textarea'
export * from './tooltip'
```

## 📄 src/components/shared/elements/input.jsx
*Lines: 22, Size: 754 Bytes*

```jsx
// File: apps/client/src/components/shared/elements/input.jsx
import * as React from 'react'

import { cn } from '@headlines/utils-shared'

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Input.displayName = 'Input'

export { Input }

```

## 📄 src/components/shared/elements/label.jsx
*Lines: 20, Size: 595 Bytes*

```jsx
// src/components/ui/label.jsx (version 1.1)
'use client'

import * as React from 'react'
import * as LabelPrimitive from '@radix-ui/react-label'
import { cva } from 'class-variance-authority'

import { cn } from '@headlines/utils-shared'

const labelVariants = cva(
  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'
)

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

```

## 📄 src/components/shared/elements/multi-select.jsx
*Lines: 62, Size: 1.85 KB*

```jsx
// File: apps/client/src/components/admin/multi-select.jsx (version 1.0 - New File)
'use client'

import * as React from 'react'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  Button,
  Checkbox,
  ScrollArea,
} from './index.js'
import { ChevronsUpDown } from 'lucide-react'

export function MultiSelect({ options, selected, onChange, placeholder = 'Select...' }) {
  const handleSelect = (option) => {
    const newSelected = selected.includes(option)
      ? selected.filter((item) => item !== option)
      : [...selected, option]
    onChange(newSelected)
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="outline"
          className="w-full justify-between font-normal bg-black/20 border-white/10"
        >
          <span className="truncate">
            {selected.length > 0 ? selected.join(', ') : placeholder}
          </span>
          <ChevronsUpDown className="h-4 w-4 opacity-50" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-[--radix-dropdown-menu-trigger-width] p-0">
        <ScrollArea className="h-72">
          <div className="p-1">
            {options.map((option) => (
              <DropdownMenuItem
                key={option}
                onSelect={(e) => e.preventDefault()}
                className="flex items-center gap-2"
              >
                <Checkbox
                  id={`select-${option}`}
                  checked={selected.includes(option)}
                  onCheckedChange={() => handleSelect(option)}
                />
                <label htmlFor={`select-${option}`} className="w-full">
                  {option}
                </label>
              </DropdownMenuItem>
            ))}
          </div>
        </ScrollArea>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

```

## 📄 src/components/shared/elements/popover.jsx
*Lines: 32, Size: 1.21 KB*

```jsx
// packages/ui/src/components/popover.jsx (version 2.0.0 - Definitive Slot Fix)
'use client'

import * as React from 'react'
import * as PopoverPrimitive from '@radix-ui/react-popover'

import { cn } from '@headlines/utils-shared'

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef(
  ({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        ref={ref}
        align={align}
        sideOffset={sideOffset}
        className={cn(
          'z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
)
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

```

## 📄 src/components/shared/elements/scroll-area.jsx
*Lines: 52, Size: 1.46 KB*

```jsx
// packages/ui/src/components/scroll-area.jsx (version 1.1.0)
'use client'

import * as React from 'react'
import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area'

import { cn } from '@headlines/utils-shared'

function ScrollArea({ className, children, ...props }) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn('relative overflow-hidden', className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="h-full w-full rounded-[inherit]"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({ className, orientation = 'vertical', ...props }) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        'flex touch-none select-none transition-colors',
        orientation === 'vertical' &&
          'h-full w-2.5 border-l border-l-transparent p-[1px]',
        orientation === 'horizontal' &&
          'h-2.5 flex-col border-t border-t-transparent p-[1px]',
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="relative flex-1 rounded-full bg-border"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }

```

## 📄 src/components/shared/elements/select.jsx
*Lines: 146, Size: 5.46 KB*

```jsx
'use client'

import * as React from 'react'
import * as SelectPrimitive from '@radix-ui/react-select'
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from 'lucide-react'

import { cn } from '@headlines/utils-shared'

function Select({ ...props }) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({ ...props }) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({ ...props }) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({ className, size = 'default', children, ...props }) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({ className, children, position = 'popper', ...props }) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md',
          position === 'popper' &&
            'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            'p-1',
            position === 'popper' &&
              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1'
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({ className, ...props }) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn('text-muted-foreground px-2 py-1.5 text-xs', className)}
      {...props}
    />
  )
}

function SelectItem({ className, children, ...props }) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({ className, ...props }) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn('bg-border pointer-events-none -mx-1 my-1 h-px', className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({ className, ...props }) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn('flex cursor-default items-center justify-center py-1', className)}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({ className, ...props }) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn('flex cursor-default items-center justify-center py-1', className)}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}

```

## 📄 src/components/shared/elements/separator.jsx
*Lines: 29, Size: 657 Bytes*

```jsx
'use client'

import * as React from 'react'
import * as SeparatorPrimitive from '@radix-ui/react-separator'

import { cn } from '@headlines/utils-shared'

function Separator({
  className,
  orientation = 'horizontal',
  decorative = true,
  ...props
}) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        'bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px',
        className
      )}
      {...props}
    />
  )
}

export { Separator }

```

## 📄 src/components/shared/elements/sheet.jsx
*Lines: 156, Size: 4.28 KB*

```jsx
'use client'

import * as React from 'react'
import * as SheetPrimitive from '@radix-ui/react-dialog'
import { cva } from 'class-variance-authority'
import { X } from 'lucide-react'
import { cn } from '@headlines/utils-shared'

// Base components from Radix
const Sheet = SheetPrimitive.Root
const SheetTrigger = SheetPrimitive.Trigger
const SheetClose = SheetPrimitive.Close
const SheetPortal = SheetPrimitive.Portal

// Sheet overlay component with proper forwardRef
const SheetOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    ref={ref}
    className={cn(
      'fixed inset-0 z-50 bg-black/80',
      'data-[state=open]:animate-in data-[state=closed]:animate-out',
      'data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

// Sheet content variants using CVA
const sheetVariants = cva(
  [
    'fixed z-50 gap-4 bg-background p-6 shadow-lg',
    'transition ease-in-out',
    'data-[state=open]:animate-in data-[state=closed]:animate-out',
    'data-[state=closed]:duration-300 data-[state=open]:duration-500',
  ],
  {
    variants: {
      side: {
        top: [
          'inset-x-0 top-0 border-b',
          'data-[state=closed]:slide-out-to-top',
          'data-[state=open]:slide-in-from-top',
        ],
        bottom: [
          'inset-x-0 bottom-0 border-t',
          'data-[state=closed]:slide-out-to-bottom',
          'data-[state=open]:slide-in-from-bottom',
        ],
        left: [
          'inset-y-0 left-0 h-full w-3/4 border-r',
          'data-[state=closed]:slide-out-to-left',
          'data-[state=open]:slide-in-from-left',
          'sm:max-w-sm',
        ],
        right: [
          'inset-y-0 right-0 h-full w-3/4 border-l',
          'data-[state=closed]:slide-out-to-right',
          'data-[state=open]:slide-in-from-right',
          'sm:max-w-sm',
        ],
      },
    },
    defaultVariants: {
      side: 'right',
    },
  }
)

// Main sheet content component - Fixed to handle single child requirement
const SheetContent = React.forwardRef(
  ({ side = 'right', className, children, ...props }, ref) => (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        ref={ref}
        className={cn(sheetVariants({ side }), className)}
        {...props}
      >
        <SheetPrimitive.Close
          className={cn(
            'absolute right-4 top-4 rounded-sm opacity-70 z-50',
            'ring-offset-background transition-opacity',
            'hover:opacity-100 focus:outline-none',
            'focus:ring-2 focus:ring-ring focus:ring-offset-2',
            'disabled:pointer-events-none',
            'data-[state=open]:bg-secondary'
          )}
        >
          <X className="h-4 w-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
        {children}
      </SheetPrimitive.Content>
    </SheetPortal>
  )
)
SheetContent.displayName = SheetPrimitive.Content.displayName

// Sheet header component
const SheetHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex flex-col space-y-2 text-center sm:text-left', className)}
    {...props}
  />
))
SheetHeader.displayName = 'SheetHeader'

// Sheet footer component
const SheetFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
))
SheetFooter.displayName = 'SheetFooter'

// Sheet title component
const SheetTitle = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold text-foreground', className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

// Sheet description component
const SheetDescription = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

```

## 📄 src/components/shared/elements/sonner.jsx
*Lines: 39, Size: 1.02 KB*

```jsx
'use client'
import { useTheme } from 'next-themes'
import { Toaster as Sonner } from 'sonner'
import { useEffect, useState } from 'react'

const Toaster = ({ ...props }) => {
  const { theme = 'system' } = useTheme()
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  // Don't render on server or until mounted to avoid hydration mismatch
  if (!mounted) {
    return null
  }

  return (
    <Sonner
      theme={theme}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            'group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg',
          description: 'group-[.toast]:text-muted-foreground',
          actionButton:
            'group-[.toast]:bg-primary group-[.toast]:text-primary-foreground',
          cancelButton: 'group-[.toast]:bg-muted group-[.toast]:text-muted-foreground',
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

```

## 📄 src/components/shared/elements/switch.jsx
*Lines: 25, Size: 1.07 KB*

```jsx
// src/components/ui/switch.jsx (version 1.0)
'use client'
import * as React from 'react'
import * as SwitchPrimitives from '@radix-ui/react-switch'

import { cn } from '@headlines/utils-shared'
const Switch = React.forwardRef(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      'peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input',
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        'pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0'
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName
export { Switch }

```

## 📄 src/components/shared/elements/table.jsx
*Lines: 88, Size: 2.19 KB*

```jsx
// src/components/ui/table.jsx (version 1.1)
import * as React from 'react'

import { cn } from '@headlines/utils-shared'

const Table = React.forwardRef(({ className, ...props }, ref) => (
  // CORRECTIVE ACTION: Removed the wrapping div with `overflow-auto`.
  // The `w-full` class is applied directly to the table.
  <table
    ref={ref}
    className={cn('w-full caption-bottom text-sm', className)}
    {...props}
  />
))
Table.displayName = 'Table'

const TableHeader = React.forwardRef(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn('[&_tr]:border-b', className)} {...props} />
))
TableHeader.displayName = 'TableHeader'

const TableBody = React.forwardRef(({ className, ...props }, ref) => (
  <tbody ref={ref} className={cn('[&_tr:last-child]:border-0', className)} {...props} />
))
TableBody.displayName = 'TableBody'

const TableFooter = React.forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn('bg-muted/50 font-medium [&>tr]:last:border-b-0', className)}
    {...props}
  />
))
TableFooter.displayName = 'TableFooter'

const TableRow = React.forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',
      className
    )}
    {...props}
  />
))
TableRow.displayName = 'TableRow'

const TableHead = React.forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      'h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0',
      className
    )}
    {...props}
  />
))
TableHead.displayName = 'TableHead'

const TableCell = React.forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', className)}
    {...props}
  />
))
TableCell.displayName = 'TableCell'

const TableCaption = React.forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn('mt-4 text-sm text-muted-foreground', className)}
    {...props}
  />
))
TableCaption.displayName = 'TableCaption'

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

```

## 📄 src/components/shared/elements/tabs.jsx
*Lines: 48, Size: 1.6 KB*

```jsx
// File: apps/client/src/components/shared/elements/tabs.jsx (Full Version)
'use client'

import * as React from 'react'
import * as TabsPrimitive from '@radix-ui/react-tabs'

import { cn } from '@headlines/utils-shared'

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      'inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground',
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      'inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm',
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      'mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

```

## 📄 src/components/shared/elements/textarea.jsx
*Lines: 21, Size: 707 Bytes*

```jsx
// File: apps/client/src/components/shared/elements/textarea.jsx (Full Version)
import * as React from 'react'

import { cn } from '@headlines/utils-shared'

const Textarea = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = 'Textarea'

export { Textarea }

```

## 📄 src/components/shared/elements/tooltip.jsx
*Lines: 31, Size: 1.13 KB*

```jsx
// packages/ui/src/components/tooltip.jsx (version 2.0.0 - Definitive Slot Fix)
'use client'

import * as React from 'react'
import * as TooltipPrimitive from '@radix-ui/react-tooltip'

import { cn } from '@headlines/utils-shared'

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef(
  ({ className, sideOffset = 4, ...props }, ref) => (
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        'z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  )
)
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

```

## 📄 src/components/shared/index.js
*Lines: 141, Size: 3.38 KB*

```javascript
// packages/ui/src/index.js
'use client'

// Components from ./components directory
export {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from './elements/accordion'
export {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogOverlay,
  AlertDialogPortal,
  AlertDialogTitle,
  AlertDialogTrigger,
} from './elements/alert-dialog'
export { Badge, badgeVariants } from './elements/badge'
export { Button, buttonVariants } from './elements/button'
export {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from './elements/card'
export { Checkbox } from './elements/checkbox'
export {
  Command,
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
  CommandShortcut,
} from './elements/command'
export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
} from './elements/dialog'
export {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuPortal,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuTrigger,
} from './elements/dropdown-menu'
export { Input } from './elements/input'
export { Label } from './elements/label'
export { Popover, PopoverContent, PopoverTrigger } from './elements/popover'
export { ScrollArea, ScrollBar } from './elements/scroll-area'
export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
} from './elements/select'
export { Separator } from './elements/separator'
export { MultiSelect } from './elements/multi-select'
export {
  Sheet,
  SheetClose,
  SheetContent,
  SheetDescription,
  SheetFooter,
  SheetHeader,
  SheetOverlay,
  SheetPortal,
  SheetTitle,
  SheetTrigger,
} from './elements/sheet'
export { Toaster } from './elements/sonner'
export { Switch } from './elements/switch'
export {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableFooter,
  TableHead,
  TableHeader,
  TableRow,
} from './elements/table'
export { Tabs, TabsContent, TabsList, TabsTrigger } from './elements/tabs'
export { Textarea } from './elements/textarea'
export {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from './elements/tooltip'

// Components from ./src root
export { ConfirmationDialog } from './modals/ConfirmationDialog.jsx'
export { DataTable } from './tables/data-table.jsx'
export { DataTableColumnHeader } from './tables/DataTableColumnHeader.jsx'
export { EditableCell } from './elements/EditableCell.jsx'
export { ExportButton } from './buttons/ExportButton.jsx'
export { LoadingOverlay } from './screen/LoadingOverlay.jsx'
export { default as PageHeader } from './screen/page-header.jsx'
export { PremiumSpinner } from './spinners/PremiumSpinner.jsx'
export { Skeleton } from './skeletons/Skeleton.jsx'
export { SkeletonCard } from './skeletons/SkeletonCard.jsx'
export { ViewHeader } from './screen/ViewHeader.jsx'

// ADDED for header user status
export { Crown, CalendarClock } from 'lucide-react'

```

## 📄 src/components/shared/modals/ConfirmationDialog.jsx
*Lines: 49, Size: 1.45 KB*

```jsx
// packages/ui/src/ConfirmationDialog.jsx (version 1.0.0)
'use client'

import React from 'react'
import {
  AlertDialog,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogCancel,
  Button,
} from '../elements'
import { AlertTriangle, Loader2 } from 'lucide-react'

export function ConfirmationDialog({
  open,
  onOpenChange,
  onConfirm,
  isPending,
  title = 'Are you absolutely sure?',
  description,
  confirmText = 'Continue',
}) {
  return (
    <AlertDialog open={open} onOpenChange={onOpenChange}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <div className="flex items-center justify-center w-16 h-16 rounded-full bg-red-500/10 mx-auto mb-4">
            <AlertTriangle className="w-8 h-8 text-red-500" />
          </div>
          <AlertDialogTitle className="text-center text-xl">{title}</AlertDialogTitle>
          <AlertDialogDescription className="text-center">
            {description}
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter className="sm:justify-center">
          <AlertDialogCancel disabled={isPending}>Cancel</AlertDialogCancel>
          <Button variant="destructive" onClick={onConfirm} disabled={isPending}>
            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {confirmText}
          </Button>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  )
}

```

## 📄 src/components/shared/modals/IOSInstallInstructions.jsx
*Lines: 47, Size: 1.53 KB*

```jsx
// src/components/IOSInstallInstructions.jsx (version 1.0)
'use client'

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from '../elements'
import { Share, PlusSquare } from 'lucide-react'

export function IOSInstallInstructions({ open, onOpenChange }) {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md bg-slate-900 border-slate-700">
        <DialogHeader>
          <DialogTitle>Install on your iPhone</DialogTitle>
          <DialogDescription>
            To install the app, please follow these steps:
          </DialogDescription>
        </DialogHeader>
        <div className="py-4 space-y-4 text-sm text-slate-300">
          <div className="flex items-center gap-4">
            <div className="flex-shrink-0 w-10 h-10 bg-slate-800 rounded-lg flex items-center justify-center">
              <Share className="h-5 w-5" />
            </div>
            <p>
              1. Tap the <span className="font-bold">Share</span> button in Safari's
              bottom toolbar.
            </p>
          </div>
          <div className="flex items-center gap-4">
            <div className="flex-shrink-0 w-10 h-10 bg-slate-800 rounded-lg flex items-center justify-center">
              <PlusSquare className="h-5 w-5" />
            </div>
            <p>
              2. Scroll down and tap '
              <span className="font-bold">Add to Home Screen</span>'.
            </p>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/components/shared/screen/DesktopOnlyWrapper.jsx
*Lines: 47, Size: 1.29 KB*

```jsx
// File: apps/client/src/components/admin/DesktopOnlyWrapper.jsx

'use client'

import { useState, useEffect } from 'react'
import { Monitor, Smartphone } from 'lucide-react'

const useIsDesktop = () => {
  const [isDesktop, setIsDesktop] = useState(true)

  useEffect(() => {
    const checkScreenSize = () => {
      setIsDesktop(window.innerWidth >= 1024) // lg breakpoint in Tailwind
    }

    // Check on initial mount
    checkScreenSize()

    // Add event listener for window resize
    window.addEventListener('resize', checkScreenSize)

    // Cleanup listener on component unmount
    return () => window.removeEventListener('resize', checkScreenSize)
  }, [])

  return isDesktop
}

export function DesktopOnlyWrapper({ children }) {
  const isDesktop = useIsDesktop()

  if (!isDesktop) {
    return (
      <div className="flex flex-col items-center justify-center h-screen bg-background text-foreground text-center p-4">
        <Monitor className="h-16 w-16 mb-4 text-primary" />
        <h1 className="text-2xl font-bold">Admin Panel is Desktop-Only</h1>
        <p className="mt-2 text-muted-foreground max-w-sm">
          For the best experience and full functionality, please access the admin command
          center on a larger screen.
        </p>
      </div>
    )
  }

  return <>{children}</>
}

```

## 📄 src/components/shared/screen/InfiniteScrollLoader.jsx
*Lines: 26, Size: 654 Bytes*

```jsx
// File: apps/client/src/components/client/InfiniteScrollLoader.jsx
'use client'

import { useEffect } from 'react'
import { useInView } from 'react-intersection-observer'
import { Loader2 } from 'lucide-react'

export function InfiniteScrollLoader({ onLoadMore, hasMore }) {
  const { ref, inView } = useInView({
    threshold: 0,
    triggerOnce: false,
  })

  useEffect(() => {
    if (inView && hasMore) {
      onLoadMore()
    }
  }, [inView, hasMore, onLoadMore])

  return (
    <div ref={ref} className="flex justify-center items-center p-4 h-16">
      {hasMore && <Loader2 className="h-6 w-6 animate-spin text-slate-500" />}
    </div>
  )
}

```

## 📄 src/components/shared/screen/LoadingOverlay.jsx
*Lines: 34, Size: 1.17 KB*

```jsx
// packages/ui/src/LoadingOverlay.jsx (version 1.3.0)
'use client'

import { AnimatePresence, motion } from 'framer-motion'
import { PremiumSpinner } from '../spinners/PremiumSpinner'

/**
 * A persistent overlay that displays a premium spinner.
 * It uses AnimatePresence to gracefully fade in and out on top of content.
 *
 * @param {object} props
 * @param {boolean} props.isLoading - Controls the visibility of the overlay.
 * @param {string} [props.text] - Optional text to display below the spinner.
 */
export function LoadingOverlay({ isLoading, text }) {
  return (
    <AnimatePresence>
      {isLoading && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.2 }}
          // CRITICAL FIX: High z-index ensures it's on top of everything inside its relative parent.
          className="absolute inset-0 z-30 flex flex-col items-center justify-center bg-background/60 backdrop-blur-sm rounded-lg"
        >
          <PremiumSpinner />
          {text && <p className="mt-4 text-base font-medium text-slate-200">{text}</p>}
        </motion.div>
      )}
    </AnimatePresence>
  )
}

```

## 📄 src/components/shared/screen/SplashScreen.jsx
*Lines: 109, Size: 2.45 KB*

```jsx
// src/components/SplashScreen.jsx (version 2.0)
'use client'

import { motion } from 'framer-motion'
import { Briefcase } from 'lucide-react'

const containerVariants = {
  initial: { opacity: 1 },
  exit: {
    opacity: 0,
    transition: {
      duration: 0.5,
      ease: 'easeInOut',
    },
  },
}

const wooshContainerVariants = {
  animate: {
    transition: {
      staggerChildren: 0.15,
    },
  },
}

const wooshVariants = {
  initial: {
    scale: 0,
    opacity: 0,
    borderRadius: '50%',
  },
  animate: {
    scale: 1,
    opacity: 1,
    borderRadius: ['50%', '40%', '30%'],
    transition: {
      duration: 0.8,
      ease: [0.22, 1, 0.36, 1], // "easeOutCirc"
    },
  },
}

const textVariants = {
  initial: {
    scale: 0.8,
    opacity: 0,
  },
  animate: {
    scale: 1,
    opacity: 1,
    transition: {
      delay: 0.5,
      duration: 0.5,
      ease: 'easeOut',
    },
  },
}

export function SplashScreen() {
  const wooshLayers = 5

  return (
    <motion.div
      variants={containerVariants}
      initial="initial"
      animate="animate"
      exit="exit"
      className="fixed inset-0 z-50 flex items-center justify-center bg-[hsl(224,71.4%,4.1%)]"
    >
      <div className="relative flex flex-col items-center justify-center w-64 h-64">
        <div className="relative flex items-center justify-center w-32 h-32">
          {/* The "Woosh" Animation Layers */}
          <motion.div
            variants={wooshContainerVariants}
            initial="initial"
            animate="animate"
            className="absolute inset-0"
          >
            {[...Array(wooshLayers)].map((_, i) => (
              <motion.div
                key={i}
                variants={wooshVariants}
                className="absolute inset-0 border-2 border-blue-400/50"
                style={{
                  transformOrigin: 'center',
                  width: `${100 - i * 15}%`,
                  height: `${100 - i * 15}%`,
                  top: `${(i * 15) / 2}%`,
                  left: `${(i * 15) / 2}%`,
                }}
              />
            ))}
          </motion.div>
          {/* The Central Icon */}
          <motion.div variants={textVariants}>
            <Briefcase size={48} className="text-blue-300" />
          </motion.div>
        </div>
        <motion.h1
          variants={textVariants}
          className="mt-6 text-3xl font-bold text-slate-200"
        >
          Headlines
        </motion.h1>
      </div>
    </motion.div>
  )
}

```

## 📄 src/components/shared/screen/ViewHeader.jsx
*Lines: 149, Size: 5.2 KB*

```jsx
// packages/ui/src/ViewHeader.jsx
'use client'

import { useRouter, useSearchParams, usePathname } from 'next/navigation'
import { useState, useEffect, useMemo } from 'react'
// DEFINITIVE FIX: Import hooks from the dedicated '/hooks' entry point.
import { useDebounce } from '@/hooks'
import {
  Input,
  Button,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  ScrollArea,
} from '../elements'
import { Search, Clock, BarChart, ArrowDownUp, Mail, Star, X } from 'lucide-react'
import { cn } from '@headlines/utils-shared'

const iconMap = { clock: Clock, relevance: BarChart, size: ArrowDownUp }

export function ViewHeader({
  title,
  sortOptions,
  allCountries = [],
  globalCountryFilter = [],
  viewCountry,
  onViewCountryChange,
}) {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  const currentSort = searchParams.get('sort') || 'date_desc'
  const [searchTerm, setSearchTerm] = useState(searchParams.get('q') || '')
  const debouncedSearchTerm = useDebounce(searchTerm, 500)

  useEffect(() => {
    const params = new URLSearchParams(searchParams.toString())
    if (debouncedSearchTerm) params.set('q', debouncedSearchTerm)
    else params.delete('q')
    router.replace(`?${params.toString()}`, { scroll: false })
  }, [debouncedSearchTerm, router, searchParams])

  const handleUrlParamChange = (key, value) => {
    const params = new URLSearchParams(searchParams.toString())
    if (!value || value === 'all' || value === false) params.delete(key)
    else params.set(key, value)
    params.set('page', '1')
    router.push(`${pathname}?${params.toString()}`, { scroll: false })
  }

  const handleClearSearch = () => setSearchTerm('')

  const withEmailOnly = searchParams.get('withEmail') === 'true'
  const favoritesOnly = searchParams.get('favorites') === 'true'

  const displayedCountries = useMemo(() => {
    if (globalCountryFilter.length > 0) {
      const globalFilterSet = new Set(globalCountryFilter)
      return allCountries.filter((c) => globalFilterSet.has(c.name))
    }
    return allCountries
  }, [allCountries, globalCountryFilter])

  return (
    <div className="flex flex-col items-center justify-center text-center mb-8 space-y-6 max-w-5xl mx-auto">
      <div>
        <h2 className="text-3xl font-bold tracking-tight text-slate-100">{title}</h2>
      </div>
      <div className="w-full flex flex-col sm:flex-row items-center gap-4">
        <div className="flex w-full sm:w-auto items-center gap-2">
          <Select value={viewCountry} onValueChange={onViewCountryChange}>
            <SelectTrigger className="w-full sm:w-[200px] h-12 bg-slate-900/80 border-slate-700">
              <SelectValue placeholder="View Country..." />
            </SelectTrigger>
            <SelectContent>
              <ScrollArea className="h-[250px]">
                <SelectItem value="all">All Selected Countries</SelectItem>
                {displayedCountries.map((country) => (
                  <SelectItem key={country.name} value={country.name}>
                    {country.name} ({country.count})
                  </SelectItem>
                ))}
              </ScrollArea>
            </SelectContent>
          </Select>
        </div>
        <div className="relative flex-grow w-full">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-slate-500" />
          <Input
            id="search"
            placeholder="Search by name, company..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="bg-slate-900/80 border-slate-700 h-12 pl-10 pr-10"
          />
          {searchTerm && (
            <Button
              variant="ghost"
              size="icon"
              className="absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8 rounded-full"
              onClick={handleClearSearch}
            >
              <X className="h-4 w-4" />
            </Button>
          )}
        </div>
        <div className="flex items-center gap-2">
          <TooltipProvider>
            {sortOptions.map((option) => {
              const IconComponent = iconMap[option.icon] || Clock
              return (
                <Tooltip key={option.value}>
                  <TooltipTrigger asChild>
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={() =>
                        handleUrlParamChange(
                          'sort',
                          option.value === 'date_desc' ? null : option.value
                        )
                      }
                      className={cn(
                        'h-12 w-12',
                        currentSort === option.value && 'bg-blue-500/20 text-blue-300'
                      )}
                      aria-label={option.tooltip}
                    >
                      <IconComponent className="h-5 w-5" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>{option.tooltip}</TooltipContent>
                </Tooltip>
              )
            })}
          </TooltipProvider>
        </div>
      </div>
    </div>
  )
}

```

## 📄 src/components/shared/screen/page-header.jsx
*Lines: 24, Size: 716 Bytes*

```jsx
// packages/ui/src/page-header.jsx (version 2.0.0)
'use client'

import { motion } from 'framer-motion'

export function PageHeader({ title, description, children }) {
  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.4, ease: 'easeInOut' }}
      className="flex-shrink-0 flex justify-between items-start"
    >
      <div>
        <h1 className="text-4xl font-bold tracking-tighter">{title}</h1>
        <p className="text-muted-foreground mt-1">{description}</p>
      </div>
      {children && <div className="flex-shrink-0">{children}</div>}
    </motion.div>
  )
}
// This is a default export now.
export default PageHeader;

```

## 📄 src/components/shared/skeletons/Skeleton.jsx
*Lines: 7, Size: 216 Bytes*

```jsx
'use client'
import { cn } from '@headlines/utils-shared'
function Skeleton({ className, ...props }) {
  return <div className={cn('animate-pulse rounded-md bg-muted', className)} {...props} />
}
export { Skeleton }

```

## 📄 src/components/shared/skeletons/SkeletonCard.jsx
*Lines: 30, Size: 1.12 KB*

```jsx
// packages/ui/src/SkeletonCard.jsx
'use client'

import { Card, CardContent } from '..'
// DEFINITIVE FIX: Use the package name for imports between packages.
import { cn } from '@headlines/utils-shared'

export const SkeletonCard = ({ className }) => {
  return (
    <Card className={cn('bg-slate-900/50 border-slate-700/50 animate-pulse', className)}>
      <CardContent className="p-6">
        <div className="flex items-start gap-6">
          {/* Left Column Skeleton */}
          <div className="flex flex-col items-center shrink-0">
            <div className="h-10 w-14 bg-slate-700 rounded-md"></div>
            <div className="h-4 w-10 bg-slate-700 rounded mt-1"></div>
          </div>
          {/* Right Column Skeleton */}
          <div className="flex-grow min-w-0 space-y-3">
            <div className="h-6 w-3/4 bg-slate-700 rounded"></div>
            <div className="h-4 w-full bg-slate-700 rounded"></div>
            <div className="h-4 w-5/6 bg-slate-700 rounded"></div>
            <div className="h-4 w-1/3 bg-slate-700 rounded mt-2"></div>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}

```

## 📄 src/components/shared/spinners/PremiumSpinner.jsx
*Lines: 83, Size: 2.35 KB*

```jsx
// packages/ui/src/PremiumSpinner.jsx (version 1.1.0)
'use client'

import { motion } from 'framer-motion'

/**
 * A visually rich, multi-layered, animated spinner component.
 * It features rotating conic gradients and a dynamic sparkle effect.
 */
export function PremiumSpinner({ size = 80 }) {
  const sparkleCount = 8
  const sparkleRadius = size * 1.2

  return (
    <div
      className="relative flex items-center justify-center"
      style={{ width: size, height: size }}
    >
      {/* Sparkles */}
      {[...Array(sparkleCount)].map((_, i) => (
        <motion.div
          key={i}
          className="absolute rounded-full bg-cyan-300"
          style={{
            width: size / 20,
            height: size / 20,
            left: '50%',
            top: '50%',
            translateX: '-50%',
            translateY: '-50%',
          }}
          initial={{
            transform: `rotate(${
              (360 / sparkleCount) * i
            }deg) translateY(${sparkleRadius}px) scale(0)`,
          }}
          animate={{
            scale: [0, 1, 0],
            opacity: [0, 1, 0],
          }}
          transition={{
            duration: 1.5,
            repeat: Infinity,
            repeatType: 'loop',
            ease: 'easeInOut',
            delay: i * 0.1,
          }}
        />
      ))}

      {/* Outer Ring */}
      <motion.div
        className="absolute inset-0 rounded-full"
        style={{
          background:
            'conic-gradient(from 90deg, transparent 0%, #06b6d4 50%, transparent 100%)',
          maskImage: 'radial-gradient(circle at center, transparent 75%, black 76%)',
        }}
        animate={{ rotate: 360 }}
        transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}
      />

      {/* Inner Ring */}
      <motion.div
        className="absolute inset-[15%] rounded-full"
        style={{
          background:
            'conic-gradient(from -90deg, transparent 0%, #a855f7 50%, transparent 100%)',
          maskImage: 'radial-gradient(circle at center, transparent 75%, black 76%)',
        }}
        animate={{ rotate: -360 }}
        transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}
      />

      {/* Center Glow */}
      <div
        className="absolute inset-[35%] rounded-full bg-blue-500/20 blur-lg"
        style={{ animation: 'pulse 2s infinite ease-in-out' }}
      ></div>
    </div>
  )
}

```

## 📄 src/components/shared/tables/DataTableColumnHeader.jsx
*Lines: 69, Size: 2.25 KB*

```jsx
// packages/ui/src/DataTableColumnHeader.jsx (version 2.0.0 - With Filtering)
'use client'

import { ArrowDownIcon, ArrowUpIcon, ChevronsUpDownIcon } from 'lucide-react'
import { cn } from '@headlines/utils-shared'
import {
  Button,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
  Input,
} from '../elements'

export function DataTableColumnHeader({ column, title, className }) {
  if (!column.getCanSort() && !column.getCanFilter()) {
    return <div className={cn(className)}>{title}</div>
  }

  return (
    <div className={cn('flex items-center space-x-2', className)}>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            size="sm"
            className="-ml-3 h-8 data-[state=open]:bg-accent"
          >
            <span>{title}</span>
            {column.getIsSorted() === 'desc' ? (
              <ArrowDownIcon className="ml-2 h-4 w-4" />
            ) : column.getIsSorted() === 'asc' ? (
              <ArrowUpIcon className="ml-2 h-4 w-4" />
            ) : (
              <ChevronsUpDownIcon className="ml-2 h-4 w-4" />
            )}
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="start">
          {column.getCanSort() && (
            <>
              <DropdownMenuItem onClick={() => column.toggleSorting(false)}>
                <ArrowUpIcon className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                Asc
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => column.toggleSorting(true)}>
                <ArrowDownIcon className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                Desc
              </DropdownMenuItem>
              <DropdownMenuSeparator />
            </>
          )}
          {column.getCanFilter() && (
            <DropdownMenuItem onSelect={(e) => e.preventDefault()}>
              <Input
                placeholder={`Filter ${title}...`}
                value={column.getFilterValue() || ''}
                onChange={(event) => column.setFilterValue(event.target.value)}
                className="h-8"
              />
            </DropdownMenuItem>
          )}
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  )
}

```

## 📄 src/components/shared/tables/data-table.jsx
*Lines: 165, Size: 4.61 KB*

```jsx
// apps/client/src/components/shared/data-table.jsx
'use client'

import React, { useState, useEffect } from 'react'
import {
  flexRender,
  getCoreRowModel,
  useReactTable,
  getPaginationRowModel,
} from '@tanstack/react-table'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
  Input,
  Button,
  Checkbox,
} from '../elements'
import { LoadingOverlay } from '../screen/LoadingOverlay'
import { useDebounce } from '@/hooks'

export function DataTable({
  columns,
  data,
  isLoading,
  page,
  setPage,
  total,
  sorting,
  setSorting,
  columnFilters = [],
  setColumnFilters = () => {},
  enableRowSelection = false,
  onRowSelectionChange,
  filterColumn,
  filterPlaceholder,
}) {
  const [rowSelection, setRowSelection] = useState({})
  const [localFilter, setLocalFilter] = useState(
    columnFilters.find((f) => f.id === filterColumn)?.value || ''
  )
  const debouncedFilter = useDebounce(localFilter, 500)

  const pageCount = total ? Math.ceil(total / 50) : 1

  const table = useReactTable({
    data: data || [],
    columns,
    pageCount,
    state: {
      sorting,
      columnFilters,
      rowSelection,
      pagination: {
        pageIndex: page - 1,
        pageSize: 50,
      },
    },
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    onRowSelectionChange: setRowSelection,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    manualPagination: true,
    manualSorting: true,
    manualFiltering: true,
  })

  useEffect(() => {
    if (onRowSelectionChange) {
      onRowSelectionChange(
        table.getSelectedRowModel().flatRows.map((row) => row.original)
      )
    }
  }, [rowSelection, onRowSelectionChange, table])

  useEffect(() => {
    if (filterColumn) {
      const newFilters = debouncedFilter
        ? [{ id: filterColumn, value: debouncedFilter }]
        : []
      setColumnFilters(newFilters)
    }
  }, [debouncedFilter, filterColumn, setColumnFilters])

  return (
    <div className="relative isolate flex flex-col h-full">
      <LoadingOverlay isLoading={isLoading && !(data?.length > 0)} />
      <div className="flex-shrink-0 flex items-center justify-between py-4">
        {filterColumn && (
          <Input
            placeholder={filterPlaceholder}
            value={localFilter}
            onChange={(event) => setLocalFilter(event.target.value)}
            className="max-w-sm"
          />
        )}

        {pageCount > 1 && (
          <div className="flex items-center justify-end space-x-2">
            <span className="text-sm text-muted-foreground">
              Page {page} of {pageCount}
            </span>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setPage(page - 1)}
              disabled={page <= 1}
            >
              Previous
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setPage(page + 1)}
              disabled={page >= pageCount}
            >
              Next
            </Button>
          </div>
        )}
      </div>
      <div className="flex-grow rounded-md border overflow-auto">
        <Table>
          <TableHeader className="sticky top-0 bg-background z-10">
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id} style={{ width: header.getSize() }}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(header.column.columnDef.header, header.getContext())}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id} style={{ width: cell.column.getSize() }}>
                      {flexRender(cell.column.columnDef.cell, cell.getContext())}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={columns.length} className="h-24 text-center">
                  {isLoading ? 'Loading...' : 'No results.'}
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
    </div>
  )
}

```

## 📄 src/hooks/index.js
*Lines: 7, Size: 222 Bytes*

```javascript
// apps/client/src/hooks/index.js
export * from './use-debounce.js'
// use-entity-manager.js is removed
export * from './use-has-hydrated.js'
export * from './use-push-manager.js'
export * from './use-realtime-updates.js'

```

## 📄 src/hooks/use-debounce.js
*Lines: 20, Size: 372 Bytes*

```javascript
'use client'

import { useState, useEffect } from 'react'

export function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = useState(value)

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value)
    }, delay)

    return () => {
      clearTimeout(handler)
    }
  }, [value, delay])

  return debouncedValue
}

```

## 📄 src/hooks/use-has-hydrated.js
*Lines: 17, Size: 417 Bytes*

```javascript
// packages/utils-shared/src/hooks/use-has-hydrated.js (version 2.0.0)
'use client'

import { useState, useEffect } from 'react'

// This is a generic hook to detect when client-side hydration is complete.
// It is no longer tied to a specific Zustand store.
export function useHasHydrated() {
  const [hydrated, setHydrated] = useState(false)

  useEffect(() => {
    setHydrated(true)
  }, [])

  return hydrated
}

```

## 📄 src/hooks/use-push-manager.js
*Lines: 99, Size: 3.23 KB*

```javascript
// packages/utils-shared/src/hooks/use-push-manager.js
'use client'

import { useState, useEffect, useCallback } from 'react'
import { toast } from 'sonner'
// useAuth import is removed

function urlBase64ToUint8Array(base64String) {
  const padding = '='.repeat((4 - (base64String.length % 4)) % 4)
  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/')
  const rawData = window.atob(base64)
  const outputArray = new Uint8Array(rawData.length)
  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i)
  }
  return outputArray
}

export function usePushManager({ user, saveSubscription }) {
  // user is now a prop
  const [isSupported, setIsSupported] = useState(false)
  const [isSubscribed, setIsSubscribed] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  // const { user } = useAuth() // This line is removed

  const checkSubscription = useCallback(async () => {
    try {
      const registration = await navigator.serviceWorker.ready
      const subscription = await registration.pushManager.getSubscription()
      setIsSubscribed(!!subscription)
      return !!subscription
    } catch (error) {
      console.error('[PushManager] Error checking subscription:', error)
      setIsSubscribed(false)
      return false
    }
  }, [])

  useEffect(() => {
    if (
      typeof window !== 'undefined' &&
      'serviceWorker' in navigator &&
      'PushManager' in window
    ) {
      setIsSupported(true)
      navigator.serviceWorker.ready
        .then(() => {
          checkSubscription().finally(() => setIsLoading(false))
        })
        .catch((error) => {
          console.error('[PushManager] Service worker failed to become ready:', error)
          setIsLoading(false)
        })
    } else {
      setIsLoading(false)
    }
  }, [checkSubscription])

  const subscribe = useCallback(async () => {
    if (!user) {
      // Logic remains the same, but user comes from props
      toast.error('You must be logged in to subscribe to notifications.')
      return
    }
    if (typeof saveSubscription !== 'function') {
      toast.error('Push notification handler is not configured.')
      return
    }
    setIsLoading(true)
    try {
      const registration = await navigator.serviceWorker.ready
      if (Notification.permission === 'denied') {
        throw new Error('Notification permission has been denied by the user.')
      }
      const VAPID_PUBLIC_KEY = process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY
      if (!VAPID_PUBLIC_KEY) {
        throw new Error('VAPID public key not configured.')
      }
      const subscription = await registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: urlBase64ToUint8Array(VAPID_PUBLIC_KEY),
      })
      await saveSubscription(subscription)
      setIsSubscribed(true)
      toast.success('Notifications enabled!')
    } catch (error) {
      if (error.name === 'NotAllowedError') {
        toast.error('Permission for notifications was denied.')
      } else {
        toast.error('Failed to enable notifications.', { description: error.message })
      }
    } finally {
      setIsLoading(false)
    }
  }, [isSubscribed, user, saveSubscription])

  return { isSupported, isSubscribed, isLoading, subscribe }
}

```

## 📄 src/hooks/use-realtime-updates.js
*Lines: 46, Size: 1.46 KB*

```javascript
// packages/utils-shared/src/hooks/use-realtime-updates.js (version 1.0.1 - Complete)
'use client'

import { useEffect, useRef } from 'react'
import Pusher from 'pusher-js'
import { useQueryClient } from '@tanstack/react-query'

export function useRealtimeUpdates({ channel, event, queryKey }) {
  const queryClient = useQueryClient()
  const pusherRef = useRef(null)

  useEffect(() => {
    if (!channel || !event || !queryKey) {
      return
    }
    const PUSHER_KEY = process.env.NEXT_PUBLIC_PUSHER_KEY
    const PUSHER_CLUSTER = process.env.NEXT_PUBLIC_PUSHER_CLUSTER
    if (!pusherRef.current) {
      if (!PUSHER_KEY || !PUSHER_CLUSTER) {
        console.warn('Pusher keys not found, real-time updates are disabled.')
        return
      }
      try {
        pusherRef.current = new Pusher(PUSHER_KEY, { cluster: PUSHER_CLUSTER })
      } catch (error) {
        console.error('Failed to initialize Pusher:', error)
        return
      }
    }
    try {
      const pusherChannel = pusherRef.current.subscribe(channel)
      pusherChannel.bind(event, (data) => {
        // Invalidate queries to trigger a refetch of the list
        queryClient.invalidateQueries({ queryKey: [queryKey] })
      })
      return () => {
        if (pusherRef.current) {
          pusherRef.current.unsubscribe(channel)
        }
      }
    } catch (error) {
      console.error(`Failed to subscribe to Pusher channel '${channel}':`, error)
    }
  }, [channel, event, queryKey, queryClient])
}

```

## 📄 src/lib/api-client.js
*Lines: 89, Size: 2.91 KB*

```javascript
'use client'

import { toast } from 'sonner'

async function fetchApi(
  endpoint,
  { body, method = 'POST', headers = { 'Content-Type': 'application/json' } } = {}
) {
  try {
    const response = await fetch(endpoint, {
      method,
      headers,
      body: body ? JSON.stringify(body) : undefined,
    })

    // Handle file downloads
    if (
      response.headers.get('content-type')?.includes('csv') ||
      response.headers.get('content-type')?.includes('application/vnd.ms-excel')
    ) {
      return response
    }

    const result = await response.json()
    if (!response.ok) {
      throw new Error(result.error || result.details || 'An unknown API error occurred.')
    }
    return result
  } catch (error) {
    console.error(`[api-client] Fetch failed for ${endpoint}:`, error.message)
    return { success: false, error: error.message }
  }
}

export const generateChatTitle = (messages) =>
  fetchApi('/api/chat/title', { body: { messages } })
export const savePushSubscription = (subscription) =>
  fetchApi('/api/push/subscribe', { body: subscription })
export const saveSubscription = savePushSubscription // Alias
export const updateUserInteraction = (interactionData) =>
  fetchApi('/api/user/interactions', { body: interactionData })
export const clearDiscardedItems = () =>
  fetchApi('/api/user/settings/clear-discarded', { method: 'POST' })
export const processUploadedArticle = (item) =>
  fetchApi('/api/upload-article', { body: { item } })

export const linkOpportunityToEventClient = (eventId, opportunityId) =>
  fetchApi('/api-admin/relationships/link', { body: { eventId, opportunityId } })

export const unlinkOpportunityFromEventClient = (eventId, opportunityId) =>
  fetchApi('/api-admin/relationships/unlink', { body: { eventId, opportunityId } })

export async function handleExport(entity, fileType, filters, sort) {
  try {
    const response = await fetch('/api-admin/export', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ entity, fileType, filters, sort }),
    })

    if (!response.ok) {
      const errorResult = await response.json()
      throw new Error(errorResult.details || 'Export failed on the server.')
    }

    const blob = await response.blob()
    const contentDisposition = response.headers.get('content-disposition')
    let filename = 'export.dat'
    if (contentDisposition) {
      const filenameMatch = contentDisposition.match(/filename="(.+?)"/)
      if (filenameMatch && filenameMatch.length === 2) filename = filenameMatch[1]
    }

    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = filename
    document.body.appendChild(a)
    a.click()
    a.remove()
    window.URL.revokeObjectURL(url)

    return { success: true }
  } catch (error) {
    toast.error('Export Failed', { description: error.message })
    return { success: false, error: error.message }
  }
}

```

## 📄 src/lib/api-handler.js
*Lines: 72, Size: 2.02 KB*

```javascript
// apps/client/src/lib/api-handler.js
import { NextResponse } from 'next/server'
import { verifySession, verifyAdmin } from '@/lib/auth/server'
import dbConnect from '@headlines/data-access/dbConnect/next'
import { sendErrorAlert } from '@headlines/utils-server/next'

export function createApiHandler(handler) {
  return async (request, context) => {
    try {
      await dbConnect()
      const { isAdmin, user, error: authError } = await verifyAdmin()
      if (!isAdmin) {
        return NextResponse.json({ error: authError }, { status: 401 })
      }
      return await handler(request, { ...context, user })
    } catch (error) {
      const errorContext = {
        origin: 'ADMIN_API_HANDLER',
        request: {
          url: request.nextUrl.pathname,
          method: request.method,
        },
      }
      sendErrorAlert(error, errorContext)
      return NextResponse.json(
        {
          error: 'An unexpected internal server error occurred.',
          details: error.message,
        },
        { status: 500 }
      )
    }
  }
}

export function createClientApiHandler(handler) {
  return async (request, context) => {
    let userPayload = null
    try {
      await dbConnect()
      const { user, error: authError } = await verifySession()
      if (!user) {
        return NextResponse.json(
          { error: authError || 'Authentication required' },
          { status: 401 }
        )
      }
      userPayload = user
      return await handler(request, { ...context, user })
    } catch (error) {
      const errorContext = {
        origin: 'CLIENT_API_HANDLER',
        request: {
          url: request.nextUrl.pathname,
          method: request.method,
        },
        user: userPayload
          ? { userId: userPayload.userId, email: userPayload.email }
          : null,
      }
      sendErrorAlert(error, errorContext)
      return NextResponse.json(
        {
          error: 'An unexpected internal server error occurred.',
          details: error.message,
        },
        { status: 500 }
      )
    }
  }
}

```

## 📄 src/lib/auth/AuthProvider.js
*Lines: 120, Size: 3.67 KB*

```javascript
// apps/client/src/lib/auth/AuthProvider.js
'use client'

import React, { createContext, useState, useEffect, useCallback, useContext } from 'react'
import { usePathname, useRouter } from 'next/navigation'
import { toast } from 'sonner'
import { SplashScreen } from '@/components/shared/screen/SplashScreen'
import useAppStore from '../store/use-app-store'

export const AuthContext = createContext(null)

export function AuthProvider({ initialUser, children }) {
  const [user, setUser] = useState(initialUser)
  const [isLoading, setIsLoading] = useState(true)
  const router = useRouter()
  const pathname = usePathname()

  // This effect simply manages the loading screen visibility
  useEffect(() => {
    // We can show the app as soon as we know the initial user state.
    const timer = setTimeout(() => setIsLoading(false), 500) // Brief splash screen
    return () => clearTimeout(timer)
  }, [])

  // Effect for redirection logic
  useEffect(() => {
    if (isLoading) return

    const isPublicPage = pathname === '/'
    const isAdminPage = pathname.startsWith('/admin')

    if (!user && !isPublicPage) {
      router.push('/')
    } else if (user && isPublicPage) {
      router.push('/events')
    } else if (user && user.role !== 'admin' && isAdminPage) {
      router.push('/events')
    }
  }, [user, isLoading, pathname, router])

  const login = async (email, password) => {
    // ... login logic ...
    // On success:
    // setUser(data.user)
    // window.location.href = '/events'
    // return true
    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      })
      const data = await response.json()
      if (response.ok) {
        toast.success('Login successful!')
        setUser(data.user)
        window.location.href = '/events' // Force a hard reload
        return true
      } else {
        toast.error('Login Failed', { description: data.error })
        return false
      }
    } catch (error) {
      toast.error('Login Failed', { description: 'Could not connect to the server.' })
      return false
    }
  }

  const signup = async (signupData) => {
    // ... signup logic ...
    try {
      const response = await fetch('/api/auth/signup', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(signupData),
      })
      const data = await response.json()
      if (response.ok) {
        toast.success('Account created successfully!')
        setUser(data.user)
        window.location.href = '/events' // Force a hard reload
        return { success: true }
      } else {
        toast.error('Signup Failed', { description: data.error })
        return { success: false, error: data.error }
      }
    } catch (error) {
      toast.error('Signup Failed', { description: 'Could not connect to the server.' })
      return { success: false, error: 'Network error' }
    }
  }

  const logout = async () => {
    await fetch('/api/auth/logout', { method: 'POST' })
    toast.info('You have been logged out.')
    setUser(null)
    window.location.href = '/' // Force a hard reload
  }

  const updateUserPreferences = useCallback(async (updateData) => {
    // ... remains the same
  }, [])

  const value = { user, isLoading, login, signup, logout, updateUserPreferences }

  if (isLoading) {
    return <SplashScreen />
  }

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}

export const useAuth = () => {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}

```

## 📄 src/lib/auth/client.js
*Lines: 16, Size: 383 Bytes*

```javascript
// Full Path: headlines/src/lib/auth/client.js
'use client'

import { useContext } from 'react'
import { AuthContext } from './AuthProvider'

export const useAuth = () => {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}

export { AuthProvider } from './AuthProvider'

```

## 📄 src/lib/auth/getCookies.js
*Lines: 36, Size: 789 Bytes*

```javascript
// apps/client/src/lib/auth/getCookies.js
'use server'
import { logger } from '@headlines/utils-shared'

/**
 * An environment-aware cookie accessor.
 */
export async function getCookies() {
  if (
    process.env.IS_PIPELINE_RUN === 'true' ||
    typeof window !== 'undefined' ||
    !process.env.NEXT_RUNTIME
  ) {
    return {
      get: () => undefined,
      getAll: () => [],
      has: () => false,
      set: () => {},
      delete: () => {},
    }
  }
  try {
    const { cookies } = await import('next/headers')
    return cookies()
  } catch (error) {
    logger.error({ err: error }, 'Failed to import cookies from next/headers.')
    return {
      get: () => undefined,
      getAll: () => [],
      has: () => false,
      set: () => {},
      delete: () => {},
    }
  }
}

```

## 📄 src/lib/auth/server.js
*Lines: 48, Size: 1.27 KB*

```javascript
// apps/client/src/lib/auth/server.js
'use server'

import { cookies } from 'next/headers'
import * as jose from 'jose'
import { env } from '@headlines/config/next'

const JWT_COOKIE_NAME = 'headlines-jwt'

async function verifyToken(token) {
  if (!token) return { user: null, error: 'No token provided.' }
  try {
    const secret = new TextEncoder().encode(env.JWT_SECRET)
    const { payload } = await jose.jwtVerify(token, secret)
    return { user: payload, error: null }
  } catch (e) {
    return { user: null, error: 'Invalid or expired session token.' }
  }
}

export async function verifySession() {
  const cookieStore = cookies()
  const token = cookieStore.get(JWT_COOKIE_NAME)?.value
  return await verifyToken(token)
}

export async function getUserIdFromSession() {
  const { user } = await verifySession()
  return user ? user.userId : null
}

export async function verifyAdmin() {
  const { user, error } = await verifySession()

  if (process.env.NODE_ENV === 'development' && user?.email === 'dev@headlines.dev') {
    return { isAdmin: true, user, error: null }
  }

  if (error || user?.role !== 'admin') {
    return {
      isAdmin: false,
      error: error || 'Administrator access required.',
      user: null,
    }
  }
  return { isAdmin: true, user, error: null }
}

```

## 📄 src/lib/auth/verifySession.js
*Lines: 48, Size: 1.3 KB*

```javascript
// apps/client/src/lib/auth/verifySession.js
'use server'

import { cookies } from 'next/headers' // Direct, explicit import
import * as jose from 'jose'
import { env } from '@headlines/config/next'

const JWT_COOKIE_NAME = 'headlines-jwt'

async function verifyToken(token) {
  if (!token) return { user: null, error: 'No token provided.' }
  try {
    const secret = new TextEncoder().encode(env.JWT_SECRET)
    const { payload } = await jose.jwtVerify(token, secret)
    return { user: payload, error: null }
  } catch (e) {
    return { user: null, error: 'Invalid or expired session token.' }
  }
}

export async function verifySession() {
  const cookieStore = cookies()
  const token = cookieStore.get(JWT_COOKIE_NAME)?.value
  return await verifyToken(token)
}

export async function getUserIdFromSession() {
  const { user } = await verifySession()
  return user ? user.userId : null
}

export async function verifyAdmin() {
  const { user, error } = await verifySession()

  if (process.env.NODE_ENV === 'development' && user?.email === 'dev@headlines.dev') {
    return { isAdmin: true, user, error: null }
  }

  if (error || user?.role !== 'admin') {
    return {
      isAdmin: false,
      error: error || 'Administrator access required.',
      user: null,
    }
  }
  return { isAdmin: true, user, error: null }
}

```

## 📄 src/lib/constants.js
*Lines: 24, Size: 1.08 KB*

```javascript
// File: apps/client/src/lib/constants.js

// API Routes
export const API_ARTICLES = '/api-admin/articles'
export const API_EVENTS = '/api-admin/events'
export const API_OPPORTUNITIES = '/api-admin/opportunities'
export const API_SUBSCRIBERS = '/api-admin/subscribers'
export const API_COUNTRIES = '/api-admin/countries'
export const API_SOURCES = '/api-admin/sources'
export const API_WATCHLIST = '/api-admin/watchlist'
export const API_WATCHLIST_SUGGESTIONS = '/api-admin/watchlist/suggestions'
export const API_SUGGESTIONS = '/api-admin/suggestions'
export const API_SETTINGS = '/api-admin/settings'

// React Query Keys (used for client-side caching and invalidation)
export const QUERY_KEY_ARTICLES = 'adminArticles'
export const QUERY_KEY_EVENTS = 'adminEvents'
export const QUERY_KEY_OPPORTUNITIES = 'adminOpportunities'
export const QUERY_KEY_SUBSCRIBERS = 'adminSubscribers'
export const QUERY_KEY_COUNTRIES = 'adminCountries'
export const QUERY_KEY_SOURCES = 'adminSources'
export const QUERY_KEY_WATCHLIST = 'adminWatchlist'
export const QUERY_KEY_WATCHLIST_SUGGESTIONS = 'adminWatchlistSuggestions'

```

## 📄 src/lib/init-shared-logic.js
*Lines: 31, Size: 935 Bytes*

```javascript
// apps/client/src/lib/init-shared-logic.js (version 3.0.0)
'use server'

// ARCHITECTURAL REFACTORING: This file now handles settings initialization for the Next.js app.
import { populateSettings } from '@headlines/config/next'
import { Setting } from '@headlines/models/next'
import dbConnect from '@headlines/data-access/dbConnect/next'

let isInitialized = false

export async function initializeSharedLogic() {
  if (isInitialized) {
    return
  }

  // The Next.js application layer is now responsible for its own settings initialization.
  try {
    await dbConnect()
    const dbSettings = await Setting.find({}).lean()
    populateSettings(dbSettings)
  } catch (error) {
    // In Next.js, we log an error but don't halt the app; it will run on defaults.
    console.error(
      '[Next.js Init] CRITICAL: Failed to load settings from database. App will use default values.',
      error
    )
  }

  isInitialized = true
}

```

## 📄 src/lib/store/use-app-store.js
*Lines: 113, Size: 3.17 KB*

```javascript
// File: client/src/lib/store/use-app-store.js
'use client'

import { create } from 'zustand'
import { persist, createJSONStorage } from 'zustand/middleware'
import { useState, useEffect } from 'react'

const useAppStore = create(
  persist(
    (set, get) => ({
      // --- Totals State ---
      eventTotal: 0,
      articleTotal: 0,
      opportunityTotal: 0,
      setTotals: (totals) => set((state) => ({ ...state, ...totals })),

      // --- Chat State ---
      chats: [],
      activeChatId: null,
      chatContextPrompt: '',
      deletePreferences: {
        skipArticleConfirmation: false,
        skipOpportunityConfirmation: false,
      },
      setChatContextPrompt: (prompt) => set({ chatContextPrompt: prompt }),
      createChat: () => {
        const newChatId = `chat_${Date.now()}`
        const newChat = {
          id: newChatId,
          title: 'New Chat',
          createdAt: new Date().toISOString(),
          messages: [],
        }
        set((state) => ({ chats: [newChat, ...state.chats], activeChatId: newChatId }))
        return newChatId
      },
      selectChat: (id) => {
        const { chats } = get()
        if (chats.find((c) => c.id === id)) {
          set({ activeChatId: id })
        } else if (chats.length > 0) {
          set({ activeChatId: chats[0].id })
        } else {
          get().createChat()
        }
      },
      updateChatTitle: (id, newTitle) =>
        set((state) => ({
          chats: state.chats.map((chat) =>
            chat.id === id ? { ...chat, title: newTitle } : chat
          ),
        })),
      getMessagesForChat: (id) => {
        const chat = get().chats.find((c) => c.id === id)
        return chat ? chat.messages : []
      },
      setMessagesForChat: (id, messages) =>
        set((state) => ({
          chats: state.chats.map((chat) =>
            chat.id === id ? { ...chat, messages } : chat
          ),
        })),
      init: () => {
        if (useAppStore.getState().chats.length === 0) {
          get().createChat()
        } else {
          const { chats, activeChatId } = get()
          if (!activeChatId || !chats.find((c) => c.id === activeChatId)) {
            get().selectChat(chats[0].id)
          }
        }
      },
      setDeletePreference: (key, value) => {
        set((state) => ({
          deletePreferences: { ...state.deletePreferences, [key]: value },
        }))
      },
    }),
    {
      name: 'headlines-app-storage',
      storage: createJSONStorage(() => localStorage),
      partialize: (state) => ({
        chats: state.chats,
        activeChatId: state.activeChatId,
        deletePreferences: state.deletePreferences,
      }),
      onRehydrateStorage: () => (state, error) => {
        if (error) {
          console.error('An error occurred during Zustand storage rehydration:', error)
        }
      },
    }
  )
)

const useHasHydrated = () => {
  const [hydrated, setHydrated] = useState(useAppStore.persist.hasHydrated)

  useEffect(() => {
    const unsubFinishHydration = useAppStore.persist.onFinishHydration(() =>
      setHydrated(true)
    )
    return () => {
      unsubFinishHydration()
    }
  }, [])

  return hydrated
}

export { useHasHydrated }
export default useAppStore

```

## 📄 tailwind.config.js
*Lines: 96, Size: 2.89 KB*

```javascript
const { fontFamily } = require('tailwindcss/defaultTheme')

/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ['class'],
  content: [
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px',
      },
    },
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      fontFamily: {
        sans: ['var(--font-sans)', ...fontFamily.sans],
      },
      keyframes: {
        'accordion-down': {
          from: { height: '0' },
          to: { height: 'var(--radix-accordion-content-height)' },
        },
        'accordion-up': {
          from: { height: 'var(--radix-accordion-content-height)' },
          to: { height: '0' },
        },
        'fade-in-up': {
          '0%': { opacity: '0', transform: 'translateY(10px)' },
          '100%': { opacity: '1', transform: 'translateY(0)' },
        },
        shake: {
          '0%, 100%': { transform: 'translateX(0)' },
          '20%, 60%': { transform: 'translateX(-5px)' },
          '40%, 80%': { transform: 'translateX(5px)' },
        },
        pulse: {
          '0%, 100%': { opacity: 1, transform: 'scale(1)' },
          '50%': { opacity: 0.7, transform: 'scale(0.95)' },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
        'fade-in-up': 'fade-in-up 0.5s ease-out forwards',
        shake: 'shake 0.5s ease-in-out',
        pulse: 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
      },
    },
  },
  plugins: [require('tailwindcss-animate'), require('@tailwindcss/typography')],
}

```

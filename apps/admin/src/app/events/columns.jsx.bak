// apps/admin/src/app/events/columns.jsx (version 3.3.1 - Final Lazy-Loading)
'use client'

import React, { useState, useCallback } from 'react'
import {
  EditableCell,
  Button,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  DataTableColumnHeader,
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
  Label,
  Textarea,
} from '../../../../../packages/ui/src/index.js'
import { Trash2, Loader2 } from 'lucide-react'
import { format } from 'date-fns'
import { RelationshipManager } from '../_components/relationships/RelationshipManager'
import { toast } from 'sonner'

const eventCategories = [
  'New Wealth',
  'Future Wealth',
  'Wealth Mentioned',
  'Legal/Dispute',
  'Background',
  'Other',
]

const FormField = ({ id, label, children }) => (
  <div className="space-y-2">
    <Label htmlFor={id} className="text-sm font-medium text-muted-foreground pl-1">
      {label}
    </Label>
    {children}
  </div>
)

export const EventListItem = ({ event, onUpdate, onDelete }) => {
  const [details, setDetails] = useState(null)
  const [isLoadingDetails, setIsLoadingDetails] = useState(false)

  const loadDetails = useCallback(async () => {
    setIsLoadingDetails(true)
    try {
      const res = await fetch(`/api/events/${event._id}`)
      const data = await res.json()
      if (!res.ok) throw new Error(data.error || 'Failed to fetch details')
      setDetails(data)
    } catch (err) {
      toast.error('Failed to load event details', { description: err.message })
    } finally {
      setIsLoadingDetails(false)
    }
  }, [event._id])

  const handleTriggerClick = (isOpen) => {
    // Only fetch details if the accordion is opening and they haven't been fetched yet.
    if (isOpen && !details && !isLoadingDetails) {
      loadDetails()
    }
  }

  return (
    <AccordionItem onValueChange={(value) => handleTriggerClick(!!value)} value={event._id} className="border-b border-white/10 group">
      <AccordionTrigger
        className="w-full text-left hover:bg-white/5 px-2 hover:no-underline"
      >
        <div className="flex items-center w-full text-sm">
          <div className="w-[180px] flex-shrink-0 text-muted-foreground group-hover:text-foreground">
            {format(new Date(event.createdAt), 'dd MMM yyyy, HH:mm')}
          </div>
          <div className="w-[140px] flex-shrink-0">{event.country}</div>
          <div className="w-[180px] flex-shrink-0">{event.eventClassification || 'N/A'}</div>
          <div className="w-[80px] text-center flex-shrink-0">{event.highest_relevance_score}</div>
          <div className="flex-grow min-w-0 pr-4 whitespace-normal font-medium">{event.synthesized_headline}</div>
        </div>
      </AccordionTrigger>
      <AccordionContent className="p-4 bg-black/20">
        {isLoadingDetails ? (
          <div className="flex items-center justify-center h-64">
            <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
          </div>
        ) : details ? (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>Event Details</CardTitle>
                  <CardDescription>View and edit the core synthesized data for this event.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <FormField label="Synthesized Headline">
                    <EditableCell useTextarea={true} initialValue={details.synthesized_headline} onSave={(newValue) => onUpdate(details, { synthesized_headline: newValue })} />
                  </FormField>
                  <FormField label="Country">
                    <EditableCell initialValue={details.country} onSave={(newValue) => onUpdate(details, { country: newValue })} />
                  </FormField>
                  <FormField label="Classification">
                    <Select value={details.eventClassification} onValueChange={(newValue) => onUpdate(details, { eventClassification: newValue })}>
                      <SelectTrigger><SelectValue placeholder="Select classification..."/></SelectTrigger>
                      <SelectContent>{eventCategories.map(cat => <SelectItem key={cat} value={cat}>{cat}</SelectItem>)}</SelectContent>
                    </Select>
                  </FormField>
                  <FormField label="Relevance Score">
                    <EditableCell type="number" initialValue={details.highest_relevance_score} onSave={(newValue) => onUpdate(details, { highest_relevance_score: newValue })} />
                  </FormField>
                  <FormField label="Synthesized Summary">
                    <Textarea readOnly value={details.synthesized_summary} className="bg-secondary/50 h-32" />
                  </FormField>
                </CardContent>
                <CardFooter>
                  <Button variant="destructive" onClick={() => onDelete(details._id)}>
                    <Trash2 className="mr-2 h-4 w-4" /> Delete Event
                  </Button>
                </CardFooter>
              </Card>
            </div>
            <RelationshipManager item={details} itemType="event" refetch={loadDetails} />
          </div>
        ) : (
          <div className="text-center text-muted-foreground py-10">
            Click to load details. If this message persists, the fetch may have failed.
          </div>
        )}
      </AccordionContent>
    </AccordionItem>
  )
}

// ListHeader remains unchanged
export const ListHeader = ({ sorting, setSorting, columnFilters, setColumnFilters }) => {
    const mockTable = {
        getColumn: (id) => ({
            getCanSort: () => true,
            getCanFilter: () => ['country', 'eventClassification', 'synthesized_headline'].includes(id),
            getIsSorted: () => sorting.find(s => s.id === id)?.desc ? 'desc' : (sorting.find(s => s.id === id) ? 'asc' : false),
            toggleSorting: (desc) => setSorting([{ id, desc }]),
            getFilterValue: () => columnFilters.find(f => f.id === id)?.value,
            setFilterValue: (value) => {
                const newFilters = columnFilters.filter(f => f.id !== id);
                if(value) newFilters.push({ id, value });
                setColumnFilters(newFilters);
            }
        })
    };

    return (
        <div className="flex items-center p-2 border-b font-medium text-muted-foreground text-sm sticky top-0 bg-background z-10">
            <div className="w-[180px] flex-shrink-0">
                <DataTableColumnHeader column={mockTable.getColumn('createdAt')} title="Discovered" />
            </div>
            <div className="w-[140px] flex-shrink-0">
                <DataTableColumnHeader column={mockTable.getColumn('country')} title="Country" />
            </div>
            <div className="w-[180px] flex-shrink-0">
                <DataTableColumnHeader column={mockTable.getColumn('eventClassification')} title="Classification" />
            </div>
            <div className="w-[80px] flex-shrink-0 text-center">
                <DataTableColumnHeader column={mockTable.getColumn('highest_relevance_score')} title="Score" />
            </div>
            <div className="flex-grow min-w-0">
                 <DataTableColumnHeader column={mockTable.getColumn('synthesized_headline')} title="Headline" />
            </div>
        </div>
    );
}

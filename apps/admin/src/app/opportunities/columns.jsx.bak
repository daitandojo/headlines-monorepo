// apps/admin/src/app/opportunities/columns.jsx (version 2.4.0 - Final Layout)
'use client'

import React from 'react';
import { Button, EditableCell } from '../../../../../packages/ui/src/index.js';
import { ArrowUpDown, Trash2, Edit } from 'lucide-react';
import { format } from 'date-fns';
import { toast } from 'sonner';

// Compact Cell Wrapper
const CompactCell = ({ children, allowWrap = false }) => <div className={`text-xs p-1 ${allowWrap ? 'whitespace-normal' : ''}`}>{children}</div>;
const CompactHeader = ({ column, title }) => (
    <Button variant="ghost" className="h-8 -ml-4" onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}>
        <span className="text-xs">{title}</span>
        <ArrowUpDown className="ml-2 h-3 w-3" />
    </Button>
);


export const columns = (onUpdate, onDelete, onEdit) => [
    {
        accessorKey: '_id',
        header: 'ID',
        cell: ({ row }) => (
             <CompactCell>
                <Button variant="ghost" size="sm" className="h-auto p-0 font-mono text-[11px] w-full justify-start" onClick={() => { navigator.clipboard.writeText(row.original._id); toast.success('ID Copied!'); }}>
                    <span className="truncate">{row.original._id}</span>
                </Button>
            </CompactCell>
        ),
        size: 110, 
    },
    {
        accessorKey: 'basedIn',
        header: ({ column }) => <CompactHeader column={column} title="Country" />,
        cell: ({ row }) => <CompactCell><EditableCell initialValue={row.original.basedIn} placeholder="Add..." onSave={(newValue) => onUpdate(row.original, { basedIn: newValue })} /></CompactCell>,
        size: 120, // Reduced
    },
    {
        accessorKey: 'city',
        header: ({ column }) => <CompactHeader column={column} title="City" />,
        cell: ({ row }) => <CompactCell><EditableCell initialValue={row.original.city} placeholder="Add..." onSave={(newValue) => onUpdate(row.original, { city: newValue })} /></CompactCell>,
        size: 110, // Reduced
    },
    {
        accessorKey: 'reachOutTo',
        header: ({ column }) => <CompactHeader column={column} title="Contact" />,
        cell: ({ row }) => <CompactCell><EditableCell initialValue={row.original.reachOutTo} onSave={(newValue) => onUpdate(row.original, { reachOutTo: newValue })} /></CompactCell>,
        size: 160, // Reduced
    },
    {
        accessorKey: 'likelyMMDollarWealth',
        header: ({ column }) => <CompactHeader column={column} title="Wealth ($M)" />,
        cell: ({ row }) => <CompactCell><EditableCell initialValue={row.original.likelyMMDollarWealth} placeholder="Add..." onSave={(newValue) => onUpdate(row.original, { likelyMMDollarWealth: newValue })} type="number" /></CompactCell>,
        size: 100,
    },
    {
        accessorKey: 'contactDetails.email',
        header: ({ column }) => <CompactHeader column={column} title="Email" />,
        cell: ({ row }) => <CompactCell><EditableCell initialValue={row.original.contactDetails?.email} placeholder="Add..." onSave={(newValue) => onUpdate(row.original, { 'contactDetails.email': newValue })} /></CompactCell>,
        size: 200, // Given a fixed size
    },
    {
        // Re-introduce the Reason column as the flexible, wrapping column
        accessorKey: 'whyContact',
        header: 'Reason',
        cell: ({ row }) => (
            <CompactCell allowWrap={true}>
                <EditableCell 
                    initialValue={row.original.whyContact}
                    onSave={(newValue) => onUpdate(row.original, { whyContact: newValue })}
                    placeholder="Add reason..."
                    useTextarea={true}
                    allowWrap={true}
                />
            </CompactCell>
        ),
        // No size property, it will take remaining space
    },
    {
        accessorKey: 'createdAt',
        header: ({ column }) => <CompactHeader column={column} title="Created" />,
        cell: ({ row }) => <CompactCell>{format(new Date(row.original.createdAt), 'dd MMM yy')}</CompactCell>,
        size: 90,
    },
    {
        id: 'actions',
        cell: ({ row }) => (
            <div className="flex items-center justify-end opacity-50 group-hover:opacity-100">
                 <Button variant="ghost" size="icon" className="h-6 w-6" onClick={() => onEdit(row.original._id)}>
                    <Edit className="h-3 w-3" />
                </Button>
                <Button variant="ghost" size="icon" className="h-6 w-6" onClick={() => onDelete(row.original)}>
                    <Trash2 className="h-3 w-3" />
                </Button>
            </div>
        ),
        size: 80,
    }
];

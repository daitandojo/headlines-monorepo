// apps/admin/src/app/opportunities/page.jsx (version 2.0.0 - Corrected Data Handling)
'use client'

import { useMemo, useState, useCallback } from 'react'
import { PageHeader, DataTable, ExportButton, ConfirmationDialog } from '@headlines/ui'
import { columns } from './columns'
import { useEntityManager } from '@/hooks/use-entity-manager' // CORRECTED: Use the right hook
import {
  deleteAdminOpportunity,
  updateAdminOpportunity,
  exportOpportunitiesToCSV,
  exportOpportunitiesToXLSX,
} from '@headlines/data-access'
import { toast } from 'sonner'

export default function OpportunitiesPage() {
  // CORRECTED: Use EntityManager for client-side data management
  const {
    entities: data,
    isLoading,
    error,
    handleSave: handleOptimisticUpdate,
    handleRemove: handleOptimisticRemove,
    refetch,
  } = useEntityManager('/api/opportunities', 'Opportunity', 'createdAt')
  
  const [confirmState, setConfirmState] = useState({ isOpen: false, oppId: null, oppName: '' });

  const availableCountries = useMemo(() => {
    if (!data) return []
    const countrySet = new Set(data.map((item) => item.basedIn).filter(Boolean))
    return Array.from(countrySet).sort()
  }, [data])

  const handleUpdate = useCallback(
    async (opp, updateData) => {
      handleOptimisticUpdate(opp) // Optimistically update the UI
      const result = await updateAdminOpportunity(opp._id, updateData)
      if (!result.success) {
        toast.error(`Update failed: ${result.error}`)
        refetch() // Revert on failure
      } else {
        toast.success(`Updated ${Object.keys(updateData)[0]} for ${opp.reachOutTo}`)
      }
    },
    [handleOptimisticUpdate, refetch]
  )

  // CORRECTED: This now triggers the confirmation dialog
  const handleDelete = useCallback((oppId, oppName) => {
    setConfirmState({ isOpen: true, oppId, oppName });
  }, []);

  // CORRECTED: This is the function that runs after confirmation
  const confirmDelete = useCallback(async () => {
    if (!confirmState.oppId) return;

    const { oppId, oppName } = confirmState;
    setConfirmState({ isOpen: false, oppId: null, oppName: '' }); // Close dialog

    handleOptimisticRemove(oppId); // Optimistically remove from UI
    toast.success(`Opportunity for "${oppName}" deleted.`);
    
    const result = await deleteAdminOpportunity(oppId);
    if (!result.success) {
      toast.error(`Deletion failed on server: ${result.error}. Reverting.`);
      refetch(); // Revert on failure
    }
  }, [confirmState, handleOptimisticRemove, refetch]);

  // Pass a lambda to columns that captures the full object for the confirmation dialog
  const tableColumns = useMemo(() => columns(handleUpdate, (opp) => handleDelete(opp._id, opp.reachOutTo)), [handleUpdate, handleDelete]);

  const total = data?.length || 0;
  const description = `Review and manage all ${total.toLocaleString()} opportunities.`;

  const exportActions = {
    csv: () => exportOpportunitiesToCSV({}), // Simplified for client-side filtering
    xlsx: () => exportOpportunitiesToXLSX({}),
  }

  return (
    <>
      <div className="flex flex-col h-full">
        <PageHeader title="Opportunity Management" description={description}>
          <ExportButton
            hasData={data && data.length > 0}
            filename="opportunities_export"
            exportActions={exportActions}
          />
        </PageHeader>
        <div className="mt-8 flex-grow min-h-0 max-w-none">
          <DataTable
            columns={tableColumns}
            data={data || []}
            isLoading={isLoading}
            filterColumn="reachOutTo"
            filterPlaceholder="Filter by name, country, city..."
            secondaryFilterColumn="basedIn"
            secondaryFilterOptions={availableCountries}
          />
        </div>
      </div>
      <ConfirmationDialog
        open={confirmState.isOpen}
        onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })}
        onConfirm={confirmDelete}
        title="Confirm Deletion"
        description={`Are you sure you want to permanently delete the opportunity for "${confirmState.oppName}"? This action cannot be undone.`}
        confirmText="Delete Opportunity"
      />
    </>
  )
}

# 📁 PROJECT DIRECTORY STRUCTURE

Total: 108 files, 57 directories

```
headlines/
├── 📁 public/
│   ├── 📁 scripts/
│   ├── 📄 file.svg
│   ├── 📄 globe.svg
│   ├── 📄 next.svg
│   ├── 📄 vercel.svg
│   └── 📄 window.svg
├── 📁 src/
│   ├── 📁 app/
│   │   ├── 📁 _components/
│   │   │   ├── 📁 relationships/
│   │   │   │   └── 📄 RelationshipManager.jsx
│   │   │   ├── 📄 article-analysis-viewer.jsx
│   │   │   ├── 📄 main-nav.jsx
│   │   │   ├── 📄 multi-select.jsx
│   │   │   ├── 📄 source-editor-ai.jsx
│   │   │   ├── 📄 source-editor-ide.jsx
│   │   │   ├── 📄 source-editor-scraper.jsx
│   │   │   ├── 📄 source-list.jsx
│   │   │   ├── 📄 suggestion-accordion.jsx
│   │   │   ├── 📄 test-results-viewer.jsx
│   │   │   ├── 📄 theme-provider.jsx
│   │   │   └── 📄 theme-toggle.jsx
│   │   ├── 📁 api/
│   │   │   ├── 📁 ai/
│   │   │   │   ├── 📁 analyze-source-structure/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 auto-configure-source/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 debug-source/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 discover-sources/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 enrich-entity/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 executive-summary/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 full-source-analysis/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📁 suggest-search-terms/
│   │   │   │       └── 📄 route.js
│   │   │   ├── 📁 articles/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 countries/
│   │   │   │   ├── 📁 [countryId]/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 dashboard-stats/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 events/
│   │   │   │   ├── 📁 [eventId]/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 opportunities/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 run-verdicts/
│   │   │   │   ├── 📁 [runId]/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 scrape/
│   │   │   │   ├── 📁 analyze-url/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 debug-content-selector/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 fetch-html/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   ├── 📁 test-config/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📁 test-recipe/
│   │   │   │       └── 📄 route.js
│   │   │   ├── 📁 settings/
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 sources/
│   │   │   │   ├── 📁 [sourceId]/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 subscribers/
│   │   │   │   ├── 📁 [subscriberId]/
│   │   │   │   │   └── 📄 route.js
│   │   │   │   └── 📄 route.js
│   │   │   ├── 📁 suggestions/
│   │   │   │   └── 📄 route.jsx
│   │   │   └── 📁 watchlist/
│   │   │       ├── 📁 [entityId]/
│   │   │       │   └── 📄 route.js
│   │   │       ├── 📁 suggestions/
│   │   │       │   ├── 📁 [suggestionId]/
│   │   │       │   │   └── 📄 route.js
│   │   │       │   └── 📄 route.js
│   │   │       └── 📄 route.js
│   │   ├── 📁 articles/
│   │   │   ├── 📄 columns.jsx
│   │   │   └── 📄 page.jsx
│   │   ├── 📁 countries/
│   │   │   ├── 📁 [countryName]/
│   │   │   │   └── 📄 page.js
│   │   │   ├── 📄 columns.jsx
│   │   │   ├── 📄 country-editor.jsx
│   │   │   └── 📄 page.js
│   │   ├── 📁 dashboard/
│   │   │   └── 📄 page.jsx
│   │   ├── 📁 events/
│   │   │   ├── 📄 columns.jsx
│   │   │   ├── 📄 columns.jsx.bak
│   │   │   ├── 📄 page.jsx
│   │   │   └── 📄 page.jsx.bak
│   │   ├── 📁 opportunities/
│   │   │   ├── 📄 columns.jsx
│   │   │   ├── 📄 columns.jsx.bak
│   │   │   ├── 📄 page.jsx
│   │   │   └── 📄 page.jsx.bak
│   │   ├── 📁 runs/
│   │   │   └── 📁 [runId]/
│   │   │       └── 📄 page.js
│   │   ├── 📁 scraper-ide/
│   │   │   ├── 📁 _components/
│   │   │   │   ├── 📄 AnalysisPanel.jsx
│   │   │   │   ├── 📄 ArticleExtractorView.jsx
│   │   │   │   ├── 📄 ConfirmationModal.jsx
│   │   │   │   ├── 📄 SourceDefinitionPanel.jsx
│   │   │   │   ├── 📄 SourceSelectorInput.jsx
│   │   │   │   └── 📄 TabsBar.jsx
│   │   │   └── 📄 page.jsx
│   │   ├── 📁 settings/
│   │   │   ├── 📄 page.jsx
│   │   │   └── 📄 settings-form.jsx
│   │   ├── 📁 sources/
│   │   │   ├── 📄 add-source-modal.jsx
│   │   │   ├── 📄 columns.jsx
│   │   │   ├── 📄 page.jsx
│   │   │   ├── 📄 suggestion-columns.jsx
│   │   │   ├── 📄 test-results-modal.jsx
│   │   │   └── 📄 use-source-health-checker.js
│   │   ├── 📁 users/
│   │   │   ├── 📄 columns.jsx
│   │   │   ├── 📄 country-subscription-manager.jsx
│   │   │   ├── 📄 page.jsx
│   │   │   └── 📄 user-editor.jsx
│   │   ├── 📁 watchlist/
│   │   │   ├── 📄 columns.jsx
│   │   │   ├── 📄 page.jsx
│   │   │   ├── 📄 suggestion-search-term-manager.jsx
│   │   │   └── 📄 watchlist-editor.jsx
│   │   ├── 📄 favicon.ico
│   │   ├── 📄 globals.css
│   │   ├── 📄 layout.js
│   │   ├── 📄 layout.js.bak
│   │   └── 📄 page.js
│   ├── 📁 hooks/
│   │   ├── 📄 use-admin-manager.js
│   │   └── 📄 use-entity-manager.js
│   ├── 📁 lib/
│   │   └── 📄 init-shared-logic.js
│   └── 📄 middleware.js
├── 📄 app.config.js
├── 📄 components.json
├── 📄 eslint.config.mjs
├── 📄 futureEnhancements.md
├── 📄 jsconfig.json
├── 📄 next.config.mjs
├── 📄 package.json
├── 📄 package.json.bak
├── 📄 postcss.config.cjs
├── 📄 sources.txt
└── 📄 tailwind.config.js
```

# 📋 PROJECT METADATA

**Generated**: 2025-09-17T10:46:26.397Z
**Repository Path**: /home/mark/Repos/projects/headlines/apps/admin
**Total Files**: 102
**Package**: @headlines/admin@0.5.8




---


## 📄 app.config.js
*Lines: 11, Size: 545 Bytes*

```javascript
// apps/admin/app.config.js (version 3.0.0)
// This file provides the minimal configuration needed by the shared
// scraper-logic package when it's used by the admin app's API routes.

export const CONCURRENCY_LIMIT = 2 // Lower limit for admin app tests

// We provide the OPENAI_API_KEY directly from the process environment
// The validation will be handled by initializeSharedLogic before these are used.
export const OPENAI_API_KEY = process.env.OPENAI_API_KEY
export const LLM_MODEL_UTILITY = process.env.LLM_MODEL_UTILITY || 'gpt-5-nano'

```

## 📄 components.json
*Lines: 18, Size: 354 Bytes*

```json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": false,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@headlines/ui",
    "utils": "@headlines/utils"
  }
}

```

## 📄 eslint.config.mjs
*Lines: 18, Size: 575 Bytes*

```
// apps/admin/eslint.config.mjs (version 3.0.0)
import eslintConfigNext from 'eslint-config-next'

// This is the modern, correct way to configure ESLint with Next.js
// in a flat config file (`eslint.config.mjs`). This simpler array format
// correctly informs the Next.js build system about the project structure,
// resolving the "Module not found" error for the old '_app' file.
export default [
  eslintConfigNext,
  // You can add your custom rules or overrides here if needed
  // For example:
  // {
  //   rules: {
  //     'no-console': 'warn',
  //   },
  // },
]

```

## 📄 futureEnhancements.md
*Lines: 32, Size: 2.09 KB*

```markdown
// FUTURE_ENHANCEMENTS.md (version 1.0)

# Scheduled Future Value-Adds

This document tracks approved strategic initiatives for future development sprints.

### High Priority

- **Initiative: "The 'Why' Engine: Observability & Audit Trails"**
  - **Description:** Add a `history` sub-document to `Source` and `Subscriber` models to track all changes. The backend pipeline and admin API will automatically log entries (e.g., "Status changed from active to paused by admin@example.com", "Scrape failed by system"). The UI will display this log in a new "History" tab within the editor sheets.
  - **Value:** Provides a complete audit trail for debugging, accountability, and enterprise-grade observability.

- **Initiative: Advanced User Filtering & Bulk Actions**
  - **Description:** Enhance the `User Management` data table with advanced filtering (by tier, by country subscription) and the ability to select multiple users to perform bulk actions (e.g., "Make Inactive," "Add Country Subscription").
  - **Value:** Dramatically improves the efficiency of managing a large and growing user base.

### Medium Priority

- **Initiative: "The Client View" Simulator**
  - **Description:** In the main client application, add an "impersonate user" feature for administrators. When an admin views a user's profile, a button would allow them to switch their session to that user's, showing them the exact events and opportunities the user sees.
  - **Value:** Essential for customer support and quality assurance, eliminating guesswork about a user's experience.

- **Initiative: "Dark Mode" Toggle & Theming**
  - **Description:** Implement a theme toggle (Light, Dark, System) using `next-themes`. Store the preference in local storage.
  - **Value:** A hallmark of modern, polished applications that respects user preferences.

### Low Priority

- **Initiative: Keyboard Shortcuts & Command Palette**
  - **Description:** Implement keyboard shortcuts for common actions (`Cmd+N` for new, `/` for search) and a global command palette (`Cmd+K`) for rapid navigation and actions.
  - **Value:** A significant workflow enhancement for power users.

```

## 📄 jsconfig.json
*Lines: 9, Size: 97 Bytes*

```json
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

```

## 📄 next.config.mjs
*Lines: 23, Size: 803 Bytes*

```
// apps/admin/next.config.mjs (version 10.0.0 - Monorepo Stable)

/** @type {import('next').NextConfig} */
const nextConfig = {
  // This is the critical fix for monorepo setups.
  // It tells Next.js to explicitly compile the shared packages from your 'packages' directory.
  // Without this, Tailwind cannot "see" the classes inside your UI components.
  transpilePackages: ['@headlines/ui', '@headlines/utils'],
  
  webpack: (config, { isServer }) => {
    // CRITICAL FIX: This tells Webpack to not try and bundle the 'bcrypt' package.
    config.externals.push('bcrypt');
    
    // This part handles other native modules if they are ever needed. It's safe to keep.
    if (isServer) {
      config.externals.push('onnxruntime-node');
    }
    return config;
  },
};

export default nextConfig;

```

## 📄 package.json
*Lines: 45, Size: 1.1 KB*

```json
{
  "name": "@headlines/admin",
  "version": "0.5.8",
  "private": true,
  "scripts": {
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@headlines/ai-services": "1.0.0",
    "@headlines/auth": "1.0.0",
    "@headlines/config": "3.0.0",
    "@headlines/data-access": "1.0.0",
    "@headlines/models": "1.0.0",
    "@headlines/scraper-logic": "1.0.0",
    "@headlines/ui": "1.0.0",
    "@headlines/utils": "1.2.0",
    "bcrypt": "^5.1.1",
    "cheerio": "^1.0.0-rc.12",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "framer-motion": "^11.18.2",
    "lucide-react": "^0.395.0",
    "mongoose": "^8.4.1",
    "next-themes": "^0.3.0",
    "openai": "^4.47.3",
    "playwright": "^1.45.1",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.3.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.19",
    "eslint": "^8",
    "eslint-config-next": "14.2.3",
    "next": "14.2.3",
    "postcss": "^8.5.1",
    "tailwindcss": "^3.4.1"
  }
}

```

## 📄 package.json.bak
*Lines: 43, Size: 1.05 KB*

```
{
  "name": "@headlines/admin",
  "version": "0.5.1",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@headlines/ai-services": "1.0.0",
    "@headlines/auth": "1.0.0",
    "@headlines/config": "1.0.0",
    "@headlines/data-access": "1.0.0",
    "@headlines/models": "1.0.0",
    "@headlines/scraper-logic": "1.0.0",
    "@headlines/ui": "1.0.0",
    "@headlines/utils": "1.0.0",
    "bcrypt": "^5.1.1",
    "cheerio": "^1.0.0-rc.12",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "framer-motion": "^11.18.2",
    "lucide-react": "^0.395.0",
    "mongoose": "^8.4.1",
    "next-themes": "^0.3.0",
    "openai": "^4.47.3",
    "playwright": "^1.45.1",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.3.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.19",
    "postcss": "^8.5.1",
    "tailwindcss": "^3.4.1"
  }
}

```

## 📄 postcss.config.cjs
*Lines: 14, Size: 405 Bytes*

```
// apps/admin/postcss.config.cjs (version 2.1.0 - Explicit Path)
const path = require('path');

// This configuration explicitly tells PostCSS where to find the Tailwind config.
// This bypasses any auto-discovery logic that is failing in the monorepo setup.
module.exports = {
  plugins: {
    tailwindcss: {
      config: path.join(__dirname, 'tailwind.config.js'),
    },
    autoprefixer: {},
  },
};

```

## 📄 sources.txt
*Lines: 59, Size: 1022 Bytes*

```
Finanswatch

https://finanswatch.dk/
Add
DR Nyheder – Penge

https://www.dr.dk/nyheder/penge
Add
TV 2 Nyheder – Erhverv

https://nyheder.tv2.dk/erhverv
Add
The Copenhagen Post

https://cphpost.dk/
Add
Business.dk

https://www.business.dk/
Add
TechSavvy (Danish startup & VC coverage)

https://techsavvy.media/
Add
DVCA (Danish Venture Capital and Private Equity Association)

https://www.dvca.dk/
Add
The Nordic Web (Nordic startup & VC)

https://thenordicweb.com/
Add
Tech.eu (European tech & VC, strong Nordic coverage)

https://tech.eu/
Add
Sifted (European startup & VC journalism)

https://sifted.eu/
Add
Mergermarket

https://www.mergermarket.com/
Add
Reuters — Denmark (business & deal coverage)

https://www.reuters.com/places/denmark
Add
Bloomberg

https://www.bloomberg.com/
Add
PwC Denmark — Transaction Services / Deals

https://www.pwc.dk/da/transaction-services.html
Add
Deloitte Denmark — Mergers & Acquisitions

https://www2.deloitte.com/dk/da/pages/finance/articles/mergers-and-acquisitions.html
```

## 📄 src/app/_components/article-analysis-viewer.jsx
*Lines: 45, Size: 1.43 KB*

```jsx
// src/app/_components/article-analysis-viewer.jsx (version 1.1)
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@headlines/ui'
import { Button } from '@headlines/ui'
import { Loader2 } from 'lucide-react'

export default function ArticleAnalysisViewer({ article, open, onOpenChange }) {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl h-[80vh] flex flex-col">
        <DialogHeader>
          <DialogTitle>Analyze Article Content</DialogTitle>
          <DialogDescription className="truncate">
            Target URL:{' '}
            <a href={article?.link} target="_blank" className="underline">
              {article?.link}
            </a>
          </DialogDescription>
        </DialogHeader>

        <div className="flex-grow flex flex-col items-center justify-center text-muted-foreground space-y-4">
          <Loader2 className="w-12 h-12 animate-spin gemini-text" />
          <p className="font-semibold">Feature Coming Soon</p>
          <p className="text-sm text-center">
            This module will allow you to test and find the perfect selector for
            extracting article content.
          </p>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/app/_components/main-nav.jsx
*Lines: 90, Size: 3.18 KB*

```jsx
// apps/admin/src/app/_components/main-nav.jsx (version 1.8.1)
'use client'

import Link from 'next/link'
import { usePathname } from 'next/navigation'
import React from 'react'
import { BotMessageSquare, Newspaper, Users, Rss, Gauge, Settings, Globe, Zap, Target, FileText, Code } from 'lucide-react'
import { cn } from '@headlines/utils'
import { Separator } from '@headlines/ui'
import { ThemeToggle } from './theme-toggle'

const navSections = [
    {
        items: [
          { name: 'Dashboard', href: '/dashboard', icon: Gauge },
          { name: 'Sources', href: '/', icon: Newspaper },
          { name: 'Users', href: '/users', icon: Users },
          { name: 'Watchlist', href: '/watchlist', icon: Rss },
        ]
    },
    {
        items: [
          { name: 'Events', href: '/events', icon: Zap },
          { name: 'Articles', href: '/articles', icon: FileText },
          { name: 'Opportunities', href: '/opportunities', icon: Target },
        ]
    },
    {
        items: [
          { name: 'Countries', href: '/countries', icon: Globe },
          { name: 'Scraper IDE', href: '/scraper-ide', icon: Code },
          { name: 'Settings', href: '/settings', icon: Settings },
        ]
    }
];

export default function MainNav() {
  const pathname = usePathname()

  const isCurrent = (href) => {
    if (href === '/') return pathname === '/' || pathname.startsWith('/sources');
    return pathname.startsWith(href)
  }

  return (
    <nav className="w-[280px] bg-card border-r flex flex-col flex-shrink-0">
      {/* Header (fixed) */}
      <div className="p-4 border-b h-[100px] flex items-center gap-3">
        <BotMessageSquare className="w-8 h-8 gemini-text flex-shrink-0" />
        <div>
          <h1 className="text-xl font-bold tracking-tighter">Headlines Admin</h1>
          <p className="text-sm text-muted-foreground">Management Console</p>
        </div>
      </div>
      
      {/* Scrollable Nav Links (takes up all available space) */}
      <div className="flex-1 overflow-y-auto p-4">
        {navSections.map((section, index) => (
            <React.Fragment key={index}>
                <ul className="space-y-2">
                    {section.items.map((item) => (
                        <li key={item.name}>
                        <Link
                            href={item.href}
                            className={cn(
                            'flex items-center gap-3 px-4 py-2.5 text-base font-medium rounded-lg transition-colors',
                            isCurrent(item.href)
                                ? 'bg-primary/10 text-primary'
                                : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'
                            )}
                        >
                            <item.icon className="w-5 h-5" />
                            {item.name}
                        </Link>
                        </li>
                    ))}
                </ul>
                {index < navSections.length - 1 && <Separator className="my-4" />}
            </React.Fragment>
        ))}
      </div>

      {/* Footer (fixed at the bottom) */}
      <div className="p-4 border-t">
          <ThemeToggle />
      </div>
    </nav>
  )
}

```

## 📄 src/app/_components/multi-select.jsx
*Lines: 62, Size: 1.97 KB*

```jsx
// src/app/_components/multi-select.jsx (version 1.2.0)
'use client'

import * as React from 'react'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@headlines/ui'
import { Button } from '@headlines/ui'
import { Checkbox } from '@headlines/ui'
import { ChevronsUpDown } from 'lucide-react'
import { ScrollArea } from '@headlines/ui'

export function MultiSelect({ options, selected, onChange, placeholder = 'Select...' }) {
  const handleSelect = (option) => {
    const newSelected = selected.includes(option)
      ? selected.filter((item) => item !== option)
      : [...selected, option]
    onChange(newSelected)
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="outline"
          className="w-full justify-between font-normal bg-black/20 border-white/10"
        >
          <span className="truncate">
            {selected.length > 0 ? selected.join(', ') : placeholder}
          </span>
          <ChevronsUpDown className="h-4 w-4 opacity-50" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-[--radix-dropdown-menu-trigger-width] p-0">
        <ScrollArea className="h-72"> {/* CRITICAL FIX: Added ScrollArea with max height */}
          <div className="p-1">
            {options.map((option) => (
              <DropdownMenuItem
                key={option}
                onSelect={(e) => e.preventDefault()}
                className="flex items-center gap-2"
              >
                <Checkbox
                  id={`select-${option}`}
                  checked={selected.includes(option)}
                  onCheckedChange={() => handleSelect(option)}
                />
                <label htmlFor={`select-${option}`} className="w-full">
                  {option}
                </label>
              </DropdownMenuItem>
            ))}
          </div>
        </ScrollArea>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

```

## 📄 src/app/_components/relationships/RelationshipManager.jsx
*Lines: 85, Size: 3.7 KB*

```jsx
// apps/admin/src/app/_components/relationships/RelationshipManager.jsx (version 1.0)
'use client';

import { useState } from 'react';
import { Button, Input, Label, Card, CardContent, CardHeader, CardTitle, CardDescription } from '@headlines/ui';
import { toast } from 'sonner';
import { Link, Unlink, Plus, Loader2 } from 'lucide-react';
import { linkOpportunityToEvent, unlinkOpportunityFromEvent } from '@headlines/data-access';

export function RelationshipManager({ item, itemType, refetch }) {
    const [newItemId, setNewItemId] = useState('');
    const [isLoading, setIsLoading] = useState(false);

    const handleAdd = async () => {
        setIsLoading(true);
        let result;
        if (itemType === 'event') {
            result = await linkOpportunityToEvent(item._id, newItemId);
        } // Add else if for 'opportunity' here
        
        if (result.success) {
            toast.success('Relationship added.');
            setNewItemId('');
            refetch();
        } else {
            toast.error('Failed to add relationship', { description: result.error });
        }
        setIsLoading(false);
    };

    const handleRemove = async (relatedItemId) => {
        setIsLoading(true);
        let result;
        if (itemType === 'event') {
            result = await unlinkOpportunityFromEvent(item._id, relatedItemId);
        } // Add else if for 'opportunity' here

        if (result.success) {
            toast.success('Relationship removed.');
            refetch();
        } else {
            toast.error('Failed to remove relationship', { description: result.error });
        }
        setIsLoading(false);
    };
    
    const relatedItems = itemType === 'event' ? item.relatedOpportunities : item.events;
    const relatedItemType = itemType === 'event' ? 'Opportunity' : 'Event';

    return (
        <Card>
            <CardHeader>
                <CardTitle>Manage Relationships</CardTitle>
                <CardDescription>Link this {itemType} to related items.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
                <div>
                    <Label>Existing {relatedItemType} Links</Label>
                    <div className="space-y-2 mt-2">
                        {relatedItems && relatedItems.length > 0 ? (
                            relatedItems.map(related => (
                                <div key={related._id} className="flex items-center justify-between p-2 bg-secondary rounded-md">
                                    <div className="font-mono text-xs">{related._id}</div>
                                    <Button variant="ghost" size="icon" className="h-7 w-7 text-destructive" onClick={() => handleRemove(related._id)}>
                                        <Unlink className="h-4 w-4" />
                                    </Button>
                                </div>
                            ))
                        ) : <p className="text-sm text-muted-foreground p-2">No relationships found.</p>}
                    </div>
                </div>
                 <div>
                    <Label htmlFor="new-item-id">Link New {relatedItemType} ID</Label>
                    <div className="flex items-center gap-2 mt-2">
                        <Input id="new-item-id" value={newItemId} onChange={(e) => setNewItemId(e.target.value)} placeholder={`Paste ${relatedItemType} ID here...`} />
                        <Button onClick={handleAdd} disabled={isLoading || !newItemId}>
                            {isLoading ? <Loader2 className="h-4 w-4 animate-spin" /> : <Plus className="h-4 w-4" />}
                        </Button>
                    </div>
                </div>
            </CardContent>
        </Card>
    );
}

```

## 📄 src/app/_components/source-editor-ai.jsx
*Lines: 122, Size: 4.08 KB*

```jsx
// src/app/_components/source-editor-ai.jsx (version 1.1)
'use client'

import { useState } from 'react'
import { Button, Card, CardContent, CardDescription, CardHeader, CardTitle, Input, Textarea, Label, Separator } from '@headlines/ui'
import { toast } from 'sonner'
import { Loader2, Wand2 } from 'lucide-react'
import SuggestionAccordion from './suggestion-accordion'

const FormField = ({ id, label, children }) => (
  <div className="space-y-2">
    <Label htmlFor={id} className="text-sm font-medium text-muted-foreground pl-1">
      {label}
    </Label>
    {children}
  </div>
)

export default function SourceEditorAI({ sectionUrl, isBusy, onApplySuggestion }) {
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [analysis, setAnalysis] = useState(null)
  const [example1, setExample1] = useState('')
  const [example2, setExample2] = useState('')
  const [outerHTML, setOuterHTML] = useState('')

  const canAnalyze =
    sectionUrl?.startsWith('http') &&
    example1.length > 5 &&
    example2.length > 5 &&
    outerHTML.length > 10

  const handleAITest = async () => {
    setIsAnalyzing(true)
    setAnalysis(null)
    toast.info('Analyzing source URL with AI...', {
      description: 'Using your examples to guide the search.',
    })
    try {
      const res = await fetch('/api/scrape/analyze-url', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ url: sectionUrl, example1, example2, outerHTML }),
      })
      const data = await res.json()
      if (!res.ok || !data.success) throw new Error(data.details || 'Analysis failed.')
      setAnalysis(data.analysis)
      toast.success('AI Analysis complete!')
    } catch (err) {
      toast.error('AI Analysis Failed', { description: err.message })
    } finally {
      setIsAnalyzing(false)
    }
  }

  return (
    <Card className="bg-black/20 border-white/10 flex flex-col h-full">
      <CardHeader>
        <CardTitle>AI Guided Analysis</CardTitle>
        <CardDescription>
          Provide examples to help the AI find the best selectors.
        </CardDescription>
      </CardHeader>
      <CardContent className="flex-grow flex flex-col min-h-0">
        <div className="space-y-4">
          <FormField id="example1" label="Example Headline 1">
            <Input
              id="example1"
              value={example1}
              onChange={(e) => setExample1(e.target.value)}
              placeholder="Copy a full headline from the site"
            />
          </FormField>
          <FormField id="example2" label="Example Headline 2">
            <Input
              id="example2"
              value={example2}
              onChange={(e) => setExample2(e.target.value)}
              placeholder="Copy another full headline"
            />
          </FormField>
          <FormField id="outerHTML" label="Example Element outerHTML">
            <Textarea
              id="outerHTML"
              value={outerHTML}
              onChange={(e) => setOuterHTML(e.target.value)}
              placeholder="Right-click a headline > Inspect > Copy > Copy outerHTML"
              className="font-mono text-xs"
              rows={3}
            />
          </FormField>
        </div>
        <Button
          variant="outline"
          className="w-full mt-4"
          onClick={handleAITest}
          disabled={isAnalyzing || isBusy || !canAnalyze}
        >
          {isAnalyzing ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Wand2 className="mr-2 h-4 w-4" />
          )}
          Analyze with AI
        </Button>
        <Separator className="my-4 bg-white/10" />
        <div className="flex-grow overflow-y-auto pr-2">
          {analysis ? (
            <SuggestionAccordion
              suggestions={analysis.suggestions}
              onApply={onApplySuggestion}
            />
          ) : (
            <div className="text-center text-muted-foreground pt-10">
              <p>Provide examples above and click "Analyze" to get suggestions.</p>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  )
}

```

## 📄 src/app/_components/source-editor-ide.jsx
*Lines: 154, Size: 5.2 KB*

```jsx
// src/app/_components/source-editor-ide.jsx (version 1.4)
'use client'

import { useState } from 'react'
import { Button, Card, CardContent, CardDescription, CardHeader, CardTitle, Separator } from '@headlines/ui'
import { toast } from 'sonner'
import { Wand2, Loader2, ExternalLink, ShieldAlert } from 'lucide-react'
import SuggestionAccordion from './suggestion-accordion'
import TestResultsModal from '../sources/test-results-modal'

export default function SourceEditorIDE({ source, onApplySuggestion, onSave }) {
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [isDebugging, setIsDebugging] = useState(false)
  const [analysis, setAnalysis] = useState(null)
  const [debugResults, setDebugResults] = useState(null)

  const isUrlValid = source.sectionUrl?.startsWith('http')
  const isFailing =
    source.analytics?.lastRunHeadlineCount === 0 && source.analytics?.totalRuns > 0

  const handleAnalyze = async () => {
    setIsAnalyzing(true)
    setAnalysis(null)
    toast.info('Analyzing source URL with AI...', {
      description: 'This may take up to 45 seconds.',
    })
    try {
      const res = await fetch('/api/scrape/analyze-url', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ url: source.sectionUrl }),
      })
      const data = await res.json()
      if (!res.ok || !data.success) throw new Error(data.details || 'Analysis failed.')
      setAnalysis(data.analysis)
      toast.success('AI Analysis complete!')
    } catch (err) {
      toast.error('AI Analysis Failed', { description: err.message })
    } finally {
      setIsAnalyzing(false)
    }
  }

  const handleDebug = async () => {
    setIsDebugging(true)
    setDebugResults(null)
    toast.info('AI is attempting to auto-heal this source...', {
      description: 'This may take up to 60 seconds.',
    })
    try {
      const res = await fetch('/api/ai/debug-source', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(source),
      })
      const data = await res.json()
      if (!res.ok || !data.success) throw new Error(data.details || 'AI debug failed.')

      setDebugResults({
        source,
        ...data.testResults,
        proposedConfig: data.proposedConfig,
      })
      toast.success('AI has proposed a fix. Please review the test results.')
    } catch (err) {
      toast.error('AI Debug Failed', { description: err.message })
    } finally {
      setIsDebugging(false)
    }
  }

  return (
    <>
      {debugResults && (
        <TestResultsModal
          results={debugResults}
          open={!!debugResults}
          onOpenChange={() => setDebugResults(null)}
          onFixApplied={(updatedSource) => {
            onSave(updatedSource) // Pass the saved source up to the main page
            setDebugResults(null)
          }}
        />
      )}
      <Card className="bg-transparent border-none shadow-none flex flex-col h-full">
        <CardHeader className="p-0">
          <CardTitle>Scraper IDE</CardTitle>
          <CardDescription>
            Use AI to find or fix selectors for this source.
          </CardDescription>
        </CardHeader>
        <CardContent className="flex-grow flex flex-col min-h-0 p-0 mt-6">
          <div className="flex gap-2">
            <Button
              variant="outline"
              className="w-full"
              onClick={handleAnalyze}
              disabled={isAnalyzing || isDebugging || !isUrlValid}
            >
              {isAnalyzing ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <Wand2 className="mr-2 h-4 w-4" />
              )}
              AI Suggest Selectors
            </Button>
            {isFailing && (
              <Button
                variant="destructive"
                className="w-full"
                onClick={handleDebug}
                disabled={isAnalyzing || isDebugging || !isUrlValid}
              >
                {isDebugging ? (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <ShieldAlert className="mr-2 h-4 w-4" />
                )}
                AI Auto-Heal Headlines
              </Button>
            )}
            <Button
              variant="ghost"
              size="icon"
              onClick={() => window.open(source.sectionUrl, '_blank')}
              disabled={!isUrlValid}
            >
              <ExternalLink className="w-4 h-4" />
            </Button>
          </div>
          <Separator className="my-4 bg-white/10" />
          <div className="flex-grow overflow-y-auto pr-2">
            {analysis ? (
              <SuggestionAccordion
                suggestions={analysis.suggestions}
                onApply={(selector) =>
                  onApplySuggestion(selector, analysis.extractionMethod)
                }
              />
            ) : (
              <div className="text-center text-muted-foreground pt-10">
                <p>
                  Click "AI Suggest" to find selectors for this source, or "AI Auto-Heal"
                  if it's failing.
                </p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </>
  )
}

```

## 📄 src/app/_components/source-editor-scraper.jsx
*Lines: 104, Size: 3.75 KB*

```jsx
// src/app/_components/source-editor-scraper.jsx (version 1.1)
'use client'

import { Card, CardContent, CardDescription, CardHeader, CardTitle, Input, Label, Select, SelectContent, SelectItem, SelectTrigger, SelectValue, Textarea } from '@headlines/ui'

const FormField = ({ id, label, children, description }) => (
  <div className="space-y-2">
    <Label htmlFor={id} className="text-sm font-medium text-muted-foreground pl-1">
      {label}
    </Label>
    {children}
    {description && <p className="text-xs text-muted-foreground pl-1">{description}</p>}
  </div>
)

export default function SourceEditorScraper({
  formData,
  handleFieldChange,
  handleSelectChange,
}) {
  return (
    <Card className="bg-black/20 border-white/10 flex flex-col h-full">
      <CardHeader>
        <CardTitle>Scraper Logic</CardTitle>
        <CardDescription>
          Selectors for extracting headlines and article content.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4 flex-grow flex flex-col">
        <FormField label="Extraction Method">
          <Select
            value={formData.extractionMethod || 'declarative'}
            onValueChange={(v) => handleSelectChange('extractionMethod', v)}
          >
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="declarative">Declarative (CSS)</SelectItem>
              <SelectItem value="json-ld">JSON-LD</SelectItem>
              <SelectItem value="custom">Custom (Legacy)</SelectItem>
            </SelectContent>
          </Select>
        </FormField>
        {formData.extractionMethod === 'declarative' && (
          <>
            <FormField id="headlineSelector" label="Headline Container Selector">
              <Input
                id="headlineSelector"
                value={formData.headlineSelector || ''}
                onChange={(e) => handleFieldChange('headlineSelector', e.target.value)}
                placeholder="e.g., article.teaser"
              />
            </FormField>
            <FormField id="linkSelector" label="Link Selector (relative)">
              <Input
                id="linkSelector"
                value={formData.linkSelector || ''}
                onChange={(e) => handleFieldChange('linkSelector', e.target.value)}
                placeholder="e.g., a.title-link (optional)"
              />
            </FormField>
            <FormField
              id="headlineTextSelector"
              label="Headline Text Selector (relative)"
            >
              <Input
                id="headlineTextSelector"
                value={formData.headlineTextSelector || ''}
                onChange={(e) =>
                  handleFieldChange('headlineTextSelector', e.target.value)
                }
                placeholder="e.g., h3 (optional)"
              />
            </FormField>
          </>
        )}
        {formData.extractionMethod === 'custom' && (
          <FormField
            id="extractorKey"
            label="Custom Extractor Key"
            description="Legacy key for hardcoded extractor functions."
          >
            <Input
              id="extractorKey"
              value={formData.extractorKey || ''}
              onChange={(e) => handleFieldChange('extractorKey', e.target.value)}
            />
          </FormField>
        )}
        <FormField id="articleSelector" label="Article Content Selector">
          <Textarea
            id="articleSelector"
            value={formData.articleSelector || ''}
            onChange={(e) => handleFieldChange('articleSelector', e.target.value)}
            placeholder="e.g., div.article-body, main > article"
            rows={3}
          />
        </FormField>
      </CardContent>
    </Card>
  )
}

```

## 📄 src/app/_components/source-list.jsx
*Lines: 198, Size: 6.67 KB*

```jsx
// src/app/_components/source-list.jsx (version 2.4)
'use client'

import { useState, useMemo } from 'react'
import { Button, Input, ScrollArea, Select, SelectContent, SelectItem, SelectTrigger, SelectValue, Badge } from '@headlines/ui'
import {
  PlusCircle,
  DatabaseZap,
  ServerCrash,
  Newspaper,
  ShieldAlert,
  Loader2,
  Ban,
  ExternalLink,
} from 'lucide-react'
import { cn } from '@headlines/utils'

function DynamicStatus({ source, status }) {
  if (status?.checking) {
    return <Loader2 className="w-4 h-4 text-muted-foreground animate-spin" />
  }
  if (status && typeof status.count === 'number') {
    if (status.count > 0) {
      return (
        <Badge
          variant="secondary"
          className="bg-green-500/20 text-green-400 border-green-500/30"
        >
          {status.count}
        </Badge>
      )
    }
    return <Badge variant="destructive">{status.count}</Badge>
  }
  return <SourceStatusIndicator source={source} />
}

function SourceStatusIndicator({ source }) {
  let status = 'healthy'
  let title = 'Healthy'

  if (source.status === 'paused') {
    status = 'paused'
    title = 'Paused'
  } else if (source.status === 'under_review') {
    status = 'under_review'
    title = 'Under Review'
  } else if (source.lastScrapedAt && !source.lastRunSuccess) {
    status = 'failed'
    title = `Failed: ${source.lastErrorMessage || 'Scrape failed'}`
  }

  const color = {
    paused: 'bg-gray-500',
    under_review: 'bg-yellow-500',
    failed: 'bg-red-500',
    healthy: 'bg-green-500',
  }[status]

  return (
    <div
      className={cn('w-2 h-2 rounded-full flex-shrink-0 transition-colors', color)}
      title={title}
    />
  )
}

export default function SourceList({
  sources,
  isLoading,
  selectedSourceId,
  onSelectSource,
  onAddSource,
  onCheckFiltered,
  onStopCheck,
  isCheckingAll,
  liveStatuses,
  countries,
}) {
  const [searchTerm, setSearchTerm] = useState('')
  const [countryFilter, setCountryFilter] = useState('all')

  const filteredSources = useMemo(() => {
    if (!sources) return []
    return sources
      .filter((source) => countryFilter === 'all' || source.country === countryFilter)
      .filter((source) => source.name.toLowerCase().includes(searchTerm.toLowerCase()))
  }, [sources, searchTerm, countryFilter])

  return (
    <aside className="w-[350px] bg-black/20 border-r border-white/10 flex flex-col flex-shrink-0">
      <div className="p-4 border-b border-white/10 space-y-2 h-[100px] flex flex-col justify-center">
        <div className="flex items-center gap-3">
          <Newspaper className="w-8 h-8 gemini-text flex-shrink-0" />
          <div>
            <h1 className="text-xl font-bold tracking-tighter">Source Config</h1>
            <p className="text-sm text-muted-foreground">
              {sources ? `${sources.length} sources` : 'Loading...'}
            </p>
          </div>
        </div>
      </div>
      <div className="p-4 space-y-3">
        <Button
          className="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold"
          onClick={onAddSource}
        >
          <PlusCircle className="mr-2 h-4 w-4" /> Add New Source
        </Button>
        {isCheckingAll ? (
          <Button variant="destructive" className="w-full" onClick={onStopCheck}>
            <Ban className="mr-2 h-4 w-4" /> Stop Checking
          </Button>
        ) : (
          <Button
            variant="outline"
            className="w-full"
            onClick={() => onCheckFiltered(filteredSources)}
          >
            <ShieldAlert className="mr-2 h-4 w-4" /> Check Filtered
          </Button>
        )}
        <div className="flex gap-2 justify-between">
          <Input
            placeholder="Search..."
            className="bg-background/50 placeholder:text-muted-foreground flex-1"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <Select value={countryFilter} onValueChange={setCountryFilter}>
            <SelectTrigger className="bg-background/50 flex-1">
              <SelectValue placeholder="All Countries" />
            </SelectTrigger>
            <SelectContent>
              {countries.map((c) => (
                <SelectItem key={c} value={c}>
                  {c === 'all' ? 'All Countries' : c}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>
      <div className="flex-grow min-h-0">
        <ScrollArea className="h-full">
          <div className="p-2 space-y-1">
            {isLoading ? (
              <div className="text-center text-sm text-muted-foreground py-10 animate-pulse">
                Loading...
              </div>
            ) : !sources ? (
              <div className="p-4 flex flex-col items-center justify-center h-full text-muted-foreground">
                <ServerCrash className="w-10 h-10 mb-4" />
                <h3 className="font-semibold">Failed to load sources</h3>
              </div>
            ) : filteredSources.length > 0 ? (
              filteredSources.map((source) => (
                <div key={source._id} className="flex items-center gap-1">
                  <Button
                    variant={selectedSourceId === source._id ? 'secondary' : 'ghost'}
                    className="w-full justify-start items-center gap-3 h-10 text-base"
                    onClick={() => onSelectSource(source._id)}
                  >
                    <div className="w-8 h-4 flex items-center justify-center">
                      <DynamicStatus source={source} status={liveStatuses[source._id]} />
                    </div>
                    <span className="flex-grow text-left truncate">{source.name}</span>
                    <span className="text-xs text-muted-foreground flex-shrink-0">
                      {source.country}
                    </span>
                  </Button>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-10 w-10 flex-shrink-0 text-muted-foreground hover:text-foreground"
                    onClick={(e) => {
                      e.stopPropagation()
                      window.open(source.sectionUrl, '_blank')
                    }}
                    aria-label="Open source URL in new tab"
                  >
                    <ExternalLink className="w-4 h-4" />
                  </Button>
                </div>
              ))
            ) : (
              <div className="text-center text-sm text-muted-foreground py-10">
                <DatabaseZap className="mx-auto h-8 w-8 mb-2" />
                <p>No sources match filters.</p>
              </div>
            )}
          </div>
        </ScrollArea>
      </div>
    </aside>
  )
}

```

## 📄 src/app/_components/suggestion-accordion.jsx
*Lines: 76, Size: 3.05 KB*

```jsx
// src/app/_components/suggestion-accordion.jsx (version 1.3)
'use client'

import { Accordion, AccordionContent, AccordionItem, AccordionTrigger, Button } from '@headlines/ui'
import { ExternalLink, Wand2 } from 'lucide-react'
import { motion } from 'framer-motion'

export default function SuggestionAccordion({ suggestions, onApply }) {
  if (!suggestions || suggestions.length === 0) {
    return (
      <div className="text-sm text-muted-foreground text-center py-10">
        <Wand2 className="w-8 h-8 mx-auto mb-2 opacity-50" />
        <p>No valid suggestions found.</p>
        <p className="text-xs">The AI or test run returned no results.</p>
      </div>
    )
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <Accordion type="single" collapsible className="w-full">
        {suggestions.map((item, index) => (
          <AccordionItem value={`item-${index}`} key={index}>
            <AccordionTrigger className="font-mono text-sm px-2 hover:bg-white/5 rounded">
              <div className="flex justify-between w-full items-center pr-2">
                <span className="truncate">{item.selector}</span>
                <span className="text-xs text-muted-foreground bg-secondary px-2 py-1 rounded-md">
                  {item.count} hits
                </span>
              </div>
            </AccordionTrigger>
            <AccordionContent className="p-2">
              <div className="bg-background/50 p-4 rounded-md border border-border">
                {item.selector !== 'Test Results' && (
                  <div className="flex justify-end mb-3">
                    <Button size="sm" onClick={() => onApply(item.selector)}>
                      Apply this Selector
                    </Button>
                  </div>
                )}
                <ul className="space-y-3 max-h-60 overflow-y-auto pr-2">
                  {item.samples && item.samples.length > 0 ? (
                    item.samples.map((sample, s_index) => (
                      <li
                        key={s_index}
                        className="text-sm border-b border-border/50 pb-2"
                      >
                        <p className="font-medium">{sample.headline}</p>
                        <a
                          href={sample.link}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-xs text-muted-foreground hover:text-foreground transition-colors flex items-center gap-1 truncate"
                        >
                          <ExternalLink className="w-3 h-3 flex-shrink-0" />
                          {sample.link}
                        </a>
                      </li>
                    ))
                  ) : (
                    <li className="text-sm text-muted-foreground">No samples found.</li>
                  )}
                </ul>
              </div>
            </AccordionContent>
          </AccordionItem>
        ))}
      </Accordion>
    </motion.div>
  )
}

```

## 📄 src/app/_components/test-results-viewer.jsx
*Lines: 96, Size: 3.44 KB*

```jsx
// src/app/_components/test-results-viewer.jsx (version 1.2)
import { useState } from 'react'
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  ScrollArea,
  Button,
} from '@headlines/ui'
import { ExternalLink, FileText, XCircle } from 'lucide-react'
import ArticleAnalysisViewer from './article-analysis-viewer'

export default function TestResultsViewer({ results, open, onOpenChange }) {
  const [articleToAnalyze, setArticleToAnalyze] = useState(null)

  const hasResults = results && results.count > 0

  const handleAnalyzeClick = (article) => {
    setArticleToAnalyze(article)
  }

  return (
    <>
      <ArticleAnalysisViewer
        article={articleToAnalyze}
        open={!!articleToAnalyze}
        onOpenChange={(isOpen) => !isOpen && setArticleToAnalyze(null)}
      />
      <Dialog open={open} onOpenChange={onOpenChange}>
        <DialogContent className="max-w-4xl h-[80vh] flex flex-col">
          <DialogHeader>
            <DialogTitle>Scrape Test Results</DialogTitle>
            <DialogDescription>
              Found {results?.count ?? 0} headlines using the provided configuration.
            </DialogDescription>
          </DialogHeader>
          <div className="flex-grow overflow-hidden">
            <ScrollArea className="h-full pr-4">
              {hasResults ? (
                <ul className="space-y-3">
                  {results.headlines.map((item, index) => (
                    <li
                      key={index}
                      className="p-3 bg-secondary/50 rounded-md flex items-center justify-between gap-4"
                    >
                      <div className="flex-grow">
                        <p className="font-medium">{item.headline}</p>
                        <a
                          href={item.link}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-xs text-muted-foreground hover:text-foreground transition-colors flex items-center gap-1"
                        >
                          <ExternalLink className="w-3 h-3" />
                          {item.link}
                        </a>
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleAnalyzeClick(item)}
                      >
                        <FileText className="w-4 h-4 mr-2" />
                        Analyze Article
                      </Button>
                    </li>
                  ))}
                </ul>
              ) : (
                <div className="flex flex-col items-center justify-center h-full text-muted-foreground">
                  <XCircle className="w-12 h-12 mb-4 text-destructive" />
                  <p className="font-semibold">No Headlines Found</p>
                  <p className="text-sm">
                    Check your selectors or the source website's structure.
                  </p>
                  {results?.error && (
                    <p className="text-xs mt-4 max-w-md text-center">
                      Error: {results.details}
                    </p>
                  )}
                </div>
              )}
            </ScrollArea>
          </div>
          <DialogFooter>
            <Button onClick={() => onOpenChange(false)}>Close</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  )
}

```

## 📄 src/app/_components/theme-provider.jsx
*Lines: 10, Size: 309 Bytes*

```jsx
// apps/admin/src/app/_components/theme-provider.jsx (version 1.0)
'use client'

import * as React from 'react'
import { ThemeProvider as NextThemesProvider } from 'next-themes'

export function ThemeProvider({ children, ...props }) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

```

## 📄 src/app/_components/theme-toggle.jsx
*Lines: 36, Size: 1.19 KB*

```jsx
// apps/admin/src/app/_components/theme-toggle.jsx (version 1.0)
'use client'

import * as React from 'react'
import { Moon, Sun } from 'lucide-react'
import { useTheme } from 'next-themes'

import { Button } from '@headlines/ui'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@headlines/ui'

export function ThemeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme('light')}>Light</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('dark')}>Dark</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('system')}>System</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

```

## 📄 src/app/api/ai/analyze-source-structure/route.js
*Lines: 61, Size: 2.25 KB*

```javascript
// apps/admin/src/app/api/ai/analyze-source-structure/route.js (version 2.1)
import { NextResponse } from 'next/server';
import { verifyAdmin } from '@headlines/auth';
import { fetchPageWithPlaywright } from '@headlines/scraper-logic/src/browser.js';
import { heuristicallyFindSelectors } from '@headlines/scraper-logic/src/scraper/selectorOptimizer.js';
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
import * as cheerio from 'cheerio';

export async function POST(request) {
  await initializeSharedLogic();
  const { isAdmin, error: authError } = await verifyAdmin();
  if (!isAdmin) {
    return NextResponse.json({ success: false, error: authError }, { status: 401 });
  }

  await initializeSharedLogic();

  try {
    const { url } = await request.json();
    if (!url) {
      return NextResponse.json({ success: false, error: 'URL is required.' }, { status: 400 });
    }

    const html = await fetchPageWithPlaywright(url, 'SourceStructureAnalyzer');
    if (!html) {
      throw new Error('Failed to fetch page content.');
    }

    const heuristicSuggestions = heuristicallyFindSelectors(html);
    const $ = cheerio.load(html);
    const baseUrl = new URL(url).origin;

    // Live test each suggestion to get a real count and samples
    const finalSuggestions = heuristicSuggestions.map(suggestion => {
        const matchedElements = $(suggestion.selector);
        const samples = [];
        matchedElements.slice(0, 10).each((_, el) => {
            const linkEl = $(el).is('a') ? $(el) : $(el).find('a').first();
            const text = $(el).text().trim().replace(/\s+/g, ' ');
            const href = linkEl.attr('href');
            if (text && href) {
                try {
                    samples.push({ text, href: new URL(href, baseUrl).href });
                } catch(e) { /* ignore invalid urls */ }
            }
        });
        return {
            selector: suggestion.selector,
            count: matchedElements.length,
            samples,
        };
    }).filter(s => s.count > 0);

    return NextResponse.json({ success: true, url, suggestions: finalSuggestions });

  } catch (e) {
    console.error('[API analyze-source-structure Error]', e);
    return NextResponse.json({ success: false, error: e.message }, { status: 500 });
  }
}

```

## 📄 src/app/api/ai/auto-configure-source/route.js
*Lines: 63, Size: 2.07 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// src/app/api/ai/auto-configure-source/route.js (version 1.0)
import { NextResponse } from 'next/server'
import { fetchPageWithPlaywright, smartStripHtml } from '@/lib/scraping'
import { analyzePageForScraping } from '@/lib/ai'

export async function POST(request) {
  await initializeSharedLogic();

  try {
    const { url } = await request.json()
    if (!url) {
      return NextResponse.json({ error: 'URL is required.' }, { status: 400 })
    }

    // 1. Fetch the raw page content
    const rawHtml = await fetchPageWithPlaywright(url)

    // 2. Use "smart stripping" to clean and focus the HTML
    const cleanHtml = smartStripHtml(rawHtml)

    // 3. Send the cleaned HTML to the AI for a "blind" analysis (no examples)
    const analysis = await analyzePageForScraping(cleanHtml)

    if (!analysis || !analysis.suggestions || analysis.suggestions.length === 0) {
      throw new Error('AI could not determine a valid scraping configuration.')
    }

    // 4. Automatically select the best suggestion (usually the one with the most hits)
    const bestSuggestion = analysis.suggestions.sort((a, b) => b.count - a.count)[0]

    const autoConfig = {
      extractionMethod: analysis.extractionMethod,
      headlineSelector: bestSuggestion.selector,
      // Reset relative selectors as the main one is new
      linkSelector: '',
      headlineTextSelector: '',
    }

    // Auto-fill basic info from the URL
    try {
      const urlObject = new URL(url)
      autoConfig.baseUrl = urlObject.origin
      const name = urlObject.hostname.replace(/^www\./, '').split('.')[0]
      autoConfig.name = name.charAt(0).toUpperCase() + name.slice(1)
    } catch (e) {
      // ignore if URL is invalid
    }

    return NextResponse.json({ success: true, configuration: autoConfig })
  } catch (error) {
    console.error('[API Auto-Configure Error]', error)
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to auto-configure source.',
        details: error.message,
      },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api/ai/debug-source/route.js
*Lines: 76, Size: 2.4 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// src/app/api/ai/debug-source/route.js (version 1.0)
import { NextResponse } from 'next/server'
import {
  fetchPageWithPlaywright,
  smartStripHtml,
  testHeadlineExtraction,
} from '@/lib/scraping'
import { debugSourceSelectors } from '@/lib/ai' // A new, specialized AI function

export async function POST(request) {
  await initializeSharedLogic();

  try {
    const sourceConfig = await request.json()
    if (!sourceConfig || !sourceConfig.sectionUrl) {
      return NextResponse.json(
        { error: 'Source configuration is required.' },
        { status: 400 }
      )
    }

    // 1. Fetch the current, "broken" HTML from the source's page
    const rawHtml = await fetchPageWithPlaywright(sourceConfig.sectionUrl)
    const cleanHtml = smartStripHtml(rawHtml)

    // 2. Send the cleaned HTML and the old, non-working selectors to the AI for analysis
    const analysis = await debugSourceSelectors(cleanHtml, sourceConfig)

    if (!analysis || !analysis.suggestions || analysis.suggestions.length === 0) {
      throw new Error('AI could not find a corrected selector.')
    }

    const bestSuggestion = analysis.suggestions[0] // Trust the AI's top suggestion
    const proposedConfig = {
      ...sourceConfig,
      extractionMethod: analysis.extractionMethod,
      headlineSelector: bestSuggestion.selector,
      linkSelector: '', // Reset relative selectors
      headlineTextSelector: '',
    }

    // 3. Immediately perform a live test scrape with the AI's proposed new configuration
    const headlines = await testHeadlineExtraction(proposedConfig, rawHtml)
    const firstArticleContent =
      headlines.length > 0
        ? await scrapeArticleContentForTest(
            headlines[0].link,
            proposedConfig.articleSelector
          )
        : ''

    // 4. Return the full results of the test, including the proposed changes
    return NextResponse.json({
      success: true,
      proposedConfig,
      testResults: {
        success: headlines.length > 0,
        count: headlines.length,
        headlines: headlines.slice(0, 5),
        firstArticleContent,
      },
    })
  } catch (error) {
    console.error('[API AI Debug Source Error]', error)
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to debug source with AI.',
        details: error.message,
      },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api/ai/discover-sources/route.js
*Lines: 68, Size: 2.84 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// src/app/api/ai/discover-sources/route.js (version 1.1)
import { NextResponse } from 'next/server'
import OpenAI from 'openai'

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY })

// CORRECTIVE ACTION: Upgraded prompt to be context-aware of existing sources
const getSourceDiscoveryPrompt = () => `
You are an expert financial intelligence researcher with deep knowledge of global media markets. Your task is to identify influential and relevant news sources for a specific country that are NOT on a provided list of existing sources.
**CRITICAL Instructions:**
1.  **Analyze the Country and Existing Sources:** You will receive a country name and an array of source names that are already onboarded.
2.  **Find NEW Sources:** Your primary goal is to find sources that are NOT on the existing list.
3.  **Categorize Sources:** Categorize your findings into three types: "Financial News", "Private Equity & Venture Capital", and "M&A News".
4.  **Provide Top Sources:** For each category, list up to 5 of the most prominent and respected sources.
5.  **Include Name and URL:** For each source, you must provide its official \`name\` and the direct \`url\` to its homepage or relevant news section.
6.  **Strict Formatting:** Your entire response must be a single, valid JSON object.

Example Input User Content:
"Country: Denmark. Existing Sources: [\\"Børsen\\", \\"KapitalWatch\\"]"

Example Response:
{
  "financial_news": [
    { "name": "Finans.dk", "url": "https://finans.dk/" }
  ],
  "pe_vc_news": [
    { "name": "Bootstrapping.dk", "url": "https://bootstrapping.dk/" }
  ],
  "ma_news": [
    { "name": "RevisionsWatch", "url": "https://revisionswatch.dk/" }
  ]
}
`

export async function POST(request) {
  await initializeSharedLogic();

  try {
    // CORRECTIVE ACTION: Accept existing sources in the request body
    const { country, existingSources } = await request.json()
    if (!country) {
      return NextResponse.json({ error: 'Country is required.' }, { status: 400 })
    }

    const userContent = `Country: ${country}. Existing Sources: ${JSON.stringify(existingSources || [])}`

    const completion = await openai.chat.completions.create({
      model: 'gpt-5-mini', // Using gpt-5-mini as requested
      response_format: { type: 'json_object' },
      messages: [
        { role: 'system', content: getSourceDiscoveryPrompt() },
        { role: 'user', content: userContent },
      ],
    })
    const content = completion.choices[0].message.content
    const parsed = JSON.parse(content)

    return NextResponse.json({ success: true, suggestions: parsed })
  } catch (error) {
    console.error('[API AI Discover Sources Error]', error)
    return NextResponse.json(
      { success: false, error: 'Failed to discover sources.', details: error.message },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api/ai/enrich-entity/route.js
*Lines: 55, Size: 2.08 KB*

```javascript
// apps/admin/src/app/api/ai/enrich-entity/route.js (version 2.0.1)
import { NextResponse } from 'next/server'
import { initializeSharedLogic } from '@/lib/init-shared-logic'
import { callLanguageModel } from '@headlines/ai-services'
import { verifyAdmin } from '@headlines/auth'

const getEntityEnrichmentPrompt = () => `
You are a corporate intelligence analyst. Your task is to provide a brief, factual, one-sentence context for a given person, family, or company name. This context will be used in a financial intelligence watchlist.
**CRITICAL Instructions:**
1.  **Analyze the entity name and type.**
2.  **Provide a single, concise sentence.** Examples: "Founder and CEO of Microsoft.", "Danish family behind the LEGO Group (Kirkbi A/S).", "Leading Nordic private equity firm."
3.  **Be factual and neutral.**
4.  **If the name is ambiguous or you have no information, you MUST return "null".**
5.  **Your response MUST be a valid JSON object with the following structure:** { "context": "Your one-sentence description." | null }
`

export async function POST(request) {
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  try {
    await initializeSharedLogic()
    const { name, type } = await request.json()

    if (!name || !type) {
      return NextResponse.json(
        { error: 'Entity name and type are required.' },
        { status: 400 }
      )
    }

    const userContent = `Enrich the following entity:\nName: ${name}\nType: ${type}`
    const result = await callLanguageModel({
      modelName: process.env.LLM_MODEL_UTILITY || 'gpt-5-nano',
      systemPrompt: getEntityEnrichmentPrompt(),
      userContent,
      isJson: true,
    })

    if (result.error) {
      throw new Error(result.error)
    }

    return NextResponse.json({ success: true, context: result.context })
  } catch (error) {
    console.error('[API AI Enrich Entity Error]', error)
    return NextResponse.json(
      { success: false, error: 'Failed to enrich entity.', details: error.message },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api/ai/executive-summary/route.js
*Lines: 53, Size: 2.79 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/ai/executive-summary/route.js (version 1.0)
import { NextResponse } from 'next/server'
import OpenAI from 'openai'

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY })

const getExecutiveSummaryPrompt = () => `
You are a Managing Director at an elite wealth management firm. You are writing a high-level executive summary of a junior AI analyst's performance for a given intelligence-gathering run. You will receive a JSON object containing the junior AI's own 'judge verdicts' on the events and opportunities it generated. Your task is to synthesize this feedback into a concise, actionable summary for the senior partners.

**CRITICAL Instructions:**
1.  **Summarize Overall Quality:** Start by stating the overall quality of the run. Was it excellent, good, mixed, or poor?
2.  **Highlight Successes:** Mention the number of high-quality ('Excellent' or 'Good') events or opportunities identified. Point out a specific success if one stands out.
3.  **Identify Failures & Patterns:** Crucially, identify any systemic failures or patterns of errors. Did the AI repeatedly flag irrelevant corporate news? Did it struggle with a specific type of event? Use the AI's own 'Irrelevant' or 'Poor' commentary to diagnose the problem.
4.  **Provide Actionable Recommendations:** Based on the failures, provide a clear, one-sentence recommendation for improvement. This should be a concrete suggestion for prompt engineering. Example: 'Recommend refining the headline assessment prompt to be more skeptical of press releases about corporate partnerships.'
5.  **Be Concise and Professional:** The entire summary should be 2-4 sentences and written in a professional, direct tone.
6.  **Your response MUST be a valid JSON object with a single key "summary".**
`

export async function POST(request) {
  await initializeSharedLogic();

  try {
    const { judgeVerdict } = await request.json()
    if (!judgeVerdict) {
      return NextResponse.json({ error: 'judgeVerdict is required.' }, { status: 400 })
    }

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      response_format: { type: 'json_object' },
      messages: [
        { role: 'system', content: getExecutiveSummaryPrompt() },
        { role: 'user', content: JSON.stringify(judgeVerdict) },
      ],
    })
    const content = completion.choices[0].message.content
    const parsed = JSON.parse(content)

    return NextResponse.json({ success: true, summary: parsed.summary })
  } catch (error) {
    console.error('[API AI Executive Summary Error]', error)
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to generate executive summary.',
        details: error.message,
      },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api/ai/full-source-analysis/route.js
*Lines: 75, Size: 3.31 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/ai/full-source-analysis/route.js (version 2.0.1)
import { NextResponse } from 'next/server'
import { initializeSharedLogic } from '@/lib/init-shared-logic'
import {  smartStripHtml  } from '@headlines/utils/server';
import { fetchPageWithPlaywright, testHeadlineExtraction } from '@headlines/scraper-logic/src/scraper/index.js'
import { callLanguageModel } from '@headlines/ai-services'
import { verifyAdmin } from '@headlines/auth'

const getSourceAnalysisPrompt = () => `
You are an expert web scraping engineer. Your task is to devise a complete, robust "Extraction Recipe" for scraping headlines from the provided HTML.
**CRITICAL Instructions:**
1.  **Analyze HTML Structure:** Identify the primary repeating container element for each news article.
2.  **Devise the Recipe:** You MUST determine three key CSS selectors:
    *   \`headlineSelector\`: The selector for the main container of a single article teaser.
    *   \`linkSelector\`: The selector for the \`<a>\` tag, *relative to the headlineSelector*.
    *   \`headlineTextSelector\`: The selector for the element containing the headline text, *relative to the headlineSelector*.
    *   \`articleSelector\`: A best-guess, robust selector for the main article content (e.g., \`div.article-body\`).
3.  **Your response MUST be a valid JSON object:** \`{ "recipe": { "headlineSelector": "...", "linkSelector": "...", "headlineTextSelector": "...", "articleSelector": "..." } }\`
`

export async function POST(request) {
  await initializeSharedLogic();
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  try {
    initializeSharedLogic()
    const { url } = await request.json()
    if (!url) return NextResponse.json({ error: 'URL is required.' }, { status: 400 })

    const rawHtml = await fetchPageWithPlaywright(url)
    const cleanHtml = await smartStripHtml(rawHtml)

    const analysis = await callLanguageModel({
      modelName: process.env.LLM_MODEL_UTILITY || 'gpt-5-nano',
      systemPrompt: getSourceAnalysisPrompt(),
      userContent: `Analyze the following HTML and provide a complete extraction recipe.\n\nHTML:\n\`\`\`html\n${cleanHtml}\n\`\`\``,
      isJson: true,
    })

    const recipe = analysis.recipe
    const configuration = {
      ...recipe,
      sectionUrl: url,
      status: 'active',
      scrapeFrequency: 'high',
      isStatic: false,
      isDynamicContent: true,
      extractionMethod: 'declarative',
    }
    try {
      const urlObject = new URL(url)
      configuration.baseUrl = urlObject.origin
      const name = urlObject.hostname.replace(/^www\./, '').split('.')[0]
      configuration.name = name.charAt(0).toUpperCase() + name.slice(1)
    } catch (e) {}

    const headlines = await testHeadlineExtraction(configuration, rawHtml)
    if (headlines.length === 0) {
      throw new Error('AI analysis complete, but live test found 0 headlines.')
    }

    return NextResponse.json({
      success: true,
      configuration,
      testResults: { count: headlines.length, headlines: headlines.slice(0, 5) },
    })
  } catch (error) {
    return NextResponse.json({ success: false, error: 'Failed to perform full source analysis.', details: error.message }, { status: 500 })
  }
}

```

## 📄 src/app/api/ai/suggest-search-terms/route.js
*Lines: 50, Size: 2.36 KB*

```javascript
// src/app/api/ai/suggest-search-terms/route.js (version 1.0)
import { NextResponse } from 'next/server'
import { callLanguageModel } from '@headlines/ai-services'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';

const getSearchTermPrompt = () => `
You are a search query generation expert for a financial intelligence firm. Your task is to analyze an entity's name, type, and context to generate a list of likely search terms (or "crums") that would identify this entity in news headlines.

**CRITICAL Instructions:**
1.  **Analyze the Input:** You will receive the entity's formal name, its type (person, family, company), and a brief context sentence.
2.  **Generate Aliases and Keywords:** Think of common abbreviations, alternative spellings, key individuals, or related company names. For example, for "Kirk Kristiansen family", terms could be "kirk kristiansen", "lego family", "kirkbi". For "Hanni Merete Toosbuy Kasprzak", a key term would be "ecco".
3.  **Return a List:** Your output should be a list of 3-5 lowercase strings.
4.  **Simplicity is Key:** The terms should be simple and likely to appear in text.
5.  **Your response MUST be a valid JSON object with the following structure:** { "searchTerms": ["term1", "term2"] }
`

export async function POST(request) {
  await initializeSharedLogic();
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  try {
    const { name, type, context } = await request.json()
    if (!name || !type) {
      return NextResponse.json({ error: 'Name and type are required.' }, { status: 400 })
    }

    const userContent = `Entity Name: ${name}\nEntity Type: ${type}\nContext: ${context || 'No context provided.'}`

    const result = await callLanguageModel({
        modelName: process.env.LLM_MODEL_UTILITY || 'gpt-5-nano',
        systemPrompt: getSearchTermPrompt(),
        userContent,
        isJson: true
    })
    if (result.error) throw new Error(result.error)

    return NextResponse.json({ success: true, searchTerms: result.searchTerms })
  } catch (error) {
    console.error('[API AI Suggest Search Terms Error]', error)
    return NextResponse.json(
      { success: false, error: 'Failed to suggest search terms.', details: error.message },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api/articles/route.js
*Lines: 42, Size: 1.63 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/articles/route.js (version 1.0.0)
import { NextResponse } from 'next/server';
import { getAdminArticles, updateAdminArticle, deleteAdminArticle } from '@headlines/data-access';

export const dynamic = 'force-dynamic';

export async function GET(request) {
  await initializeSharedLogic();
    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get('page') || '1', 10);
    const sort = searchParams.get('sort') || 'date_desc';
    const q = searchParams.get('q') || '';
    const country = searchParams.get('country') || '';
    
    const result = await getAdminArticles({ page, sort, filters: { q, country } });
    if (!result.success) {
        return NextResponse.json({ error: result.error }, { status: 500 });
    }
    return NextResponse.json(result);
}

export async function PATCH(request) {
  await initializeSharedLogic();
    const { articleId, updateData } = await request.json();
    const result = await updateAdminArticle(articleId, updateData);
    if (!result.success) {
        return NextResponse.json({ error: result.error }, { status: result.error.includes('not found') ? 404 : 500 });
    }
    return NextResponse.json(result.data);
}

export async function DELETE(request) {
  await initializeSharedLogic();
    const { articleId } = await request.json();
    const result = await deleteAdminArticle(articleId);
    if (!result.success) {
        return NextResponse.json({ error: result.error }, { status: result.error.includes('not found') ? 404 : 500 });
    }
    return NextResponse.json({ success: true });
}

```

## 📄 src/app/api/countries/[countryId]/route.js
*Lines: 29, Size: 1.06 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/countries/[countryId]/route.js (version 3.0.1)
import { NextResponse } from 'next/server'
import { updateCountry } from '@headlines/data-access'
import mongoose from 'mongoose'
import { verifyAdmin } from '@headlines/auth'

export async function PATCH(request, { params }) {
  await initializeSharedLogic();

  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const { countryId } = params
  if (!mongoose.Types.ObjectId.isValid(countryId)) {
    return NextResponse.json({ error: 'Invalid country ID' }, { status: 400 })
  }
  const body = await request.json()
  const result = await updateCountry(countryId, body)

  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500;
    return NextResponse.json({ error: result.error, details: result.error }, { status });
  }
  return NextResponse.json({ message: 'Country updated', country: result.data });
}

```

## 📄 src/app/api/countries/route.js
*Lines: 39, Size: 1.32 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/countries/route.js (version 4.0.1)
import { NextResponse } from 'next/server'
import { getAllCountries, createCountry } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'

export const dynamic = 'force-dynamic'

export async function GET(request) {
  await initializeSharedLogic();

  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }
  
  const result = await getAllCountries()
  if (!result.success) {
    return NextResponse.json({ error: 'Failed to fetch countries.', details: result.error }, { status: 500 });
  }
  return NextResponse.json({ countries: result.data });
}

export async function POST(request) {
  await initializeSharedLogic();
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const body = await request.json()
  const result = await createCountry(body)
  if (!result.success) {
    const status = result.error.includes('already exists') ? 409 : 500;
    return NextResponse.json({ error: result.error }, { status });
  }
  return NextResponse.json({ success: true, country: result.data }, { status: 201 });
}

```

## 📄 src/app/api/dashboard-stats/route.js
*Lines: 23, Size: 789 Bytes*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/dashboard-stats/route.js (version 4.0.1)
import { NextResponse } from 'next/server'
import { getDashboardStats } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'

export const dynamic = 'force-dynamic'

export async function GET(request) {
  await initializeSharedLogic();

  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const result = await getDashboardStats()
  if (!result.success) {
    return NextResponse.json({ error: 'Failed to fetch dashboard stats.', details: result.error }, { status: 500 });
  }
  return NextResponse.json({ stats: result.data });
}

```

## 📄 src/app/api/events/[eventId]/route.js
*Lines: 17, Size: 652 Bytes*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/events/[eventId]/route.js (version 1.0.0)
import { NextResponse } from 'next/server';
import { getAdminEventDetails } from '@headlines/data-access';

export const dynamic = 'force-dynamic';

export async function GET(request, { params }) {
  await initializeSharedLogic();
    const { eventId } = params;
    const result = await getAdminEventDetails(eventId);
    if (!result.success) {
        return NextResponse.json({ error: result.error }, { status: result.error.includes('not found') ? 404 : 500 });
    }
    return NextResponse.json(result.data);
}

```

## 📄 src/app/api/events/route.js
*Lines: 56, Size: 2.04 KB*

```javascript
// apps/admin/src/app/api/events/route.js (version 2.0.0 - Correct Param Handling)
import { NextResponse } from 'next/server';
import { getAdminEvents, updateAdminEvent, deleteAdminEvent } from '@headlines/data-access';
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';

export const dynamic = 'force-dynamic';

export async function GET(request) {
  await initializeSharedLogic();
  
  try {
    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get('page') || '1', 10);
    const sort = searchParams.get('sort') || 'createdAt_desc';
    
    // Convert columnFilters from JSON string back to an object for the data layer
    const columnFilters = JSON.parse(searchParams.get('columnFilters') || '[]');
    const filters = columnFilters.reduce((acc, filter) => {
        if (filter.value) {
           const key = filter.id === 'synthesized_headline' ? 'q' : filter.id;
           acc[key] = filter.value;
        }
        return acc;
    }, {});
    
    const result = await getAdminEvents({ page, sort, filters });

    if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: 500 });
    }
    return NextResponse.json(result);
  } catch (error) {
    return NextResponse.json({ error: 'Internal server error: ' + error.message }, { status: 500 });
  }
}

export async function PATCH(request) {
  await initializeSharedLogic();
  const { eventId, updateData } = await request.json();
  const result = await updateAdminEvent(eventId, updateData);
   if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: result.error.includes('not found') ? 404 : 500 });
  }
  return NextResponse.json(result.data);
}

export async function DELETE(request) {
  await initializeSharedLogic();
  const { eventId } = await request.json();
  const result = await deleteAdminEvent(eventId);
  if (!result.success) {
      return NextResponse.json({ error: result.error }, { status: result.error.includes('not found') ? 404 : 500 });
  }
  return NextResponse.json({ success: true });
}

```

## 📄 src/app/api/opportunities/route.js
*Lines: 44, Size: 1.79 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/opportunities/route.js (version 1.0.0)
import { NextResponse } from 'next/server';
import { getAdminOpportunities, updateAdminOpportunity, deleteAdminOpportunity } from '@headlines/data-access';

export const dynamic = 'force-dynamic';

export async function GET(request) {
  await initializeSharedLogic();
    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get('page') || '1', 10);
    const sort = searchParams.get('sort') || 'date_desc';
    const q = searchParams.get('q') || '';
    const country = searchParams.get('country') || '';
    // DEFINITIVE FIX: Read the 'withEmail' filter from the search parameters.
    const withEmail = searchParams.get('withEmail') === 'true';

    const result = await getAdminOpportunities({ page, sort, filters: { q, country, withEmail } });
    if (!result.success) {
        return NextResponse.json({ error: result.error }, { status: 500 });
    }
    return NextResponse.json(result);
}

export async function PATCH(request) {
  await initializeSharedLogic();
    const { oppId, updateData } = await request.json();
    const result = await updateAdminOpportunity(oppId, updateData);
     if (!result.success) {
        return NextResponse.json({ error: result.error }, { status: result.error.includes('not found') ? 404 : 500 });
    }
    return NextResponse.json(result.data);
}

export async function DELETE(request) {
  await initializeSharedLogic();
    const { oppId } = await request.json();
    const result = await deleteAdminOpportunity(oppId);
    if (!result.success) {
        return NextResponse.json({ error: result.error }, { status: result.error.includes('not found') ? 404 : 500 });
    }
    return NextResponse.json({ success: true });
}

```

## 📄 src/app/api/run-verdicts/[runId]/route.js
*Lines: 29, Size: 1.02 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/run-verdicts/[runId]/route.js (version 3.0.1)
import { NextResponse } from 'next/server'
import { getRunVerdictById } from '@headlines/data-access'
import mongoose from 'mongoose'
import { verifyAdmin } from '@headlines/auth'

export const dynamic = 'force-dynamic'

export async function GET(request, { params }) {
  await initializeSharedLogic();

  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const { runId } = params
  if (!mongoose.Types.ObjectId.isValid(runId)) {
    return NextResponse.json({ error: 'Invalid Run ID' }, { status: 400 })
  }
  const result = await getRunVerdictById(runId)
  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500;
    return NextResponse.json({ error: result.error, details: result.error }, { status });
  }
  return NextResponse.json({ verdict: result.data });
}

```

## 📄 src/app/api/run-verdicts/route.js
*Lines: 24, Size: 847 Bytes*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/run-verdicts/route.js (version 3.0.2)
import { NextResponse } from 'next/server'
import { getRecentRunVerdicts } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'

export const dynamic = 'force-dynamic'

export async function GET(request) {
  await initializeSharedLogic();

  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }
  
  const result = await getRecentRunVerdicts()
  if (!result.success) {
    return NextResponse.json({ error: 'Failed to fetch verdicts.', details: result.error }, { status: 500 });
  }
  // Data is already sanitized in the data-access action
  return NextResponse.json({ verdicts: result.data });
}

```

## 📄 src/app/api/scrape/analyze-url/route.js
*Lines: 66, Size: 3.6 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/scrape/analyze-url/route.js (version 4.0.1)
import { NextResponse } from 'next/server'
import { initializeSharedLogic } from '@/lib/init-shared-logic'
import {  smartStripHtml  } from '@headlines/utils/server';
import { fetchPageWithPlaywright, testHeadlineExtraction } from '@headlines/scraper-logic/src/scraper/index.js'
import { callLanguageModel } from '@headlines/ai-services'
import { verifyAdmin } from '@headlines/auth'

const getScraperAnalysisPrompt = () => `
You are a master web scraping engineer. You will be given the cleaned HTML from a news website's front page and, optionally, some example headlines. Your task is to analyze the structure and determine the most robust CSS selectors for scraping all headlines.
**CRITICAL Instructions:**
1.  **Determine Extraction Method:** Analyze the HTML to see if it uses JSON-LD. If a \`script[type="application/ld+json"]\` tag contains a list of news articles, the method should be \`json-ld\`. Otherwise, it should be \`declarative\`.
2.  **Find the Best Selector:** Identify the single, repeating CSS selector that uniquely wraps each news item.
3.  **Provide a Rationale:** Briefly explain your choice.
4.  **Handle Examples:** If example headlines and outerHTML are provided, use them as a strong guide.
5.  **Return Multiple Suggestions:** Provide a list of the top 1-3 most likely selectors.
6.  **Your response MUST be a valid JSON object:** \`{ "extractionMethod": "declarative" | "json-ld", "suggestions": [{ "selector": "CSS selector", "reasoning": "Your explanation." }] }\`
`
const analyzePageForScraping = async (html, example1, example2, outerHTML) => {
  let userContent = `Analyze the following HTML:\n\`\`\`html\n${html}\n\`\`\``
  if (example1 && example2) userContent += `\n\nUse these examples as a guide:\n- Example 1: "${example1}"\n- Example 2: "${example2}"`
  if (outerHTML) userContent += `\n\nThe user identified this element's outerHTML:\n\`\`\`html\n${outerHTML}\n\`\`\``
  const result = await callLanguageModel({
    modelName: process.env.LLM_MODEL_UTILITY || 'gpt-5-nano',
    systemPrompt: getScraperAnalysisPrompt(),
    userContent,
    isJson: true,
  })
  if (result.error) throw new Error(result.error)
  return result
}

export async function POST(request) {
  await initializeSharedLogic();
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  try {
    initializeSharedLogic()
    const { url, example1, example2, outerHTML } = await request.json()
    if (!url) return NextResponse.json({ error: 'URL is required.' }, { status: 400 })

    const fullHtml = await fetchPageWithPlaywright(url)
    const cleanHtml = await smartStripHtml(fullHtml)
    const analysis = await analyzePageForScraping(cleanHtml, example1, example2, outerHTML)

    const suggestionsWithSamples = await Promise.all(
      analysis.suggestions.map(async (suggestion) => {
        const headlines = await testHeadlineExtraction({
            extractionMethod: analysis.extractionMethod,
            sectionUrl: url,
            baseUrl: new URL(url).origin,
            headlineSelector: suggestion.selector,
          })
        return { ...suggestion, count: headlines.length, samples: headlines.slice(0, 3) }
      })
    )
    return NextResponse.json({ success: true, analysis: { ...analysis, suggestions: suggestionsWithSamples.filter((s) => s.count > 0) } })
  } catch (error) {
    return NextResponse.json({ success: false, error: 'Failed to analyze URL.', details: error.message }, { status: 500 })
  }
}

```

## 📄 src/app/api/scrape/debug-content-selector/route.js
*Lines: 47, Size: 1.53 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// src/app/api/scrape/debug-content-selector/route.js (version 1.0)
import { NextResponse } from 'next/server'
import {
  fetchPageWithPlaywright,
  smartStripHtml,
  scrapeArticleContentForTest,
} from '@/lib/scraping'
import { debugContentSelector } from '@/lib/ai'

export async function POST(request) {
  await initializeSharedLogic();

  try {
    const { articleUrl, oldSelector } = await request.json()
    if (!articleUrl) {
      return NextResponse.json({ error: 'articleUrl is required.' }, { status: 400 })
    }

    // 1. Fetch and clean the HTML of the target article page
    const rawHtml = await fetchPageWithPlaywright(articleUrl)
    const cleanHtml = smartStripHtml(rawHtml)

    // 2. Send to the AI to get a proposed new selector
    const analysis = await debugContentSelector(cleanHtml, oldSelector)
    const newSelector = analysis.selector

    if (!newSelector) {
      throw new Error('AI failed to propose a new selector.')
    }

    // 3. Immediately test the new selector to verify it works and get a content preview
    const contentPreview = await scrapeArticleContentForTest(articleUrl, newSelector)

    return NextResponse.json({
      success: true,
      proposedSelector: newSelector,
      contentPreview,
    })
  } catch (error) {
    console.error('[API AI Debug Content Selector Error]', error)
    return NextResponse.json(
      { success: false, error: 'Failed to debug content selector.', details: error.message },
      { status: 500 }
    )
  }
}
```

## 📄 src/app/api/scrape/fetch-html/route.js
*Lines: 34, Size: 1.11 KB*

```javascript
// apps/admin/src/app/api/scrape/fetch-html/route.js (version 1.0)
import { NextResponse } from 'next/server';
import { verifyAdmin } from '@headlines/auth';
import { fetchPageWithPlaywright } from '@headlines/scraper-logic/src/browser.js';
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';

export async function POST(request) {
  await initializeSharedLogic();
  const { isAdmin, error: authError } = await verifyAdmin();
  if (!isAdmin) {
    return NextResponse.json({ success: false, error: authError }, { status: 401 });
  }

  await initializeSharedLogic();

  try {
    const { url } = await request.json();
    if (!url) {
      return NextResponse.json({ success: false, error: 'URL is required.' }, { status: 400 });
    }

    const html = await fetchPageWithPlaywright(url, 'FetchHtmlEndpoint');
    if (!html) {
      throw new Error('Failed to fetch page content.');
    }

    return NextResponse.json({ success: true, url, htmlContent: html });

  } catch (e) {
    console.error('[API fetch-html Error]', e);
    return NextResponse.json({ success: false, error: e.message }, { status: 500 });
  }
}

```

## 📄 src/app/api/scrape/test-config/route.js
*Lines: 85, Size: 2.56 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/scrape/test-config/route.js (version 2.0.1)
import { NextResponse } from 'next/server'
import mongoose from 'mongoose'
import { Source } from '@headlines/models'
import { initializeSharedLogic } from '@/lib/init-shared-logic'
import {
  testHeadlineExtraction,
  scrapeArticleContentForTest,
} from '@headlines/scraper-logic/src/scraper/index.js'
import { verifyAdmin } from '@headlines/auth'

export async function POST(request) {
  await initializeSharedLogic();
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  let sourceId
  try {
    initializeSharedLogic()
    const sourceConfig = await request.json()
    sourceId = sourceConfig._id

    if (!sourceConfig || !sourceConfig.sectionUrl || !sourceId) {
      return NextResponse.json(
        { error: 'Full source configuration with _id is required.' },
        { status: 400 }
      )
    }

    const headlines = await testHeadlineExtraction(sourceConfig)
    const success = headlines.length > 0
    let firstArticleContent = ''

    if (success) {
      firstArticleContent = await scrapeArticleContentForTest(
        headlines[0].link,
        sourceConfig.articleSelector
      )
    }

    const updatedSource = await Source.findByIdAndUpdate(
      sourceId,
      {
        $set: {
          lastScrapedAt: new Date(),
          lastSuccessAt: success ? new Date() : undefined,
          'analytics.lastRunHeadlineCount': headlines.length,
          'analytics.lastRunRelevantCount': 0,
        },
        $inc: {
          'analytics.totalRuns': 1,
          'analytics.totalSuccesses': success ? 1 : 0,
          'analytics.totalFailures': success ? 0 : 1,
        },
      },
      { new: true }
    ).lean()

    const sanitizedSource = JSON.parse(JSON.stringify(updatedSource))

    return NextResponse.json({
      success: true,
      count: headlines.length,
      headlines: headlines.slice(0, 5),
      firstArticleContent,
      updatedSource: sanitizedSource,
    })
  } catch (error) {
    console.error(`[API Test Config Error for ${sourceId}]`, error)
    if (mongoose.Types.ObjectId.isValid(sourceId)) {
      await Source.findByIdAndUpdate(sourceId, {
        $set: { lastScrapedAt: new Date() },
        $inc: { 'analytics.totalRuns': 1, 'analytics.totalFailures': 1 },
      })
    }
    return NextResponse.json(
      { success: false, error: 'Failed to perform test scrape.', details: error.message },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api/scrape/test-recipe/route.js
*Lines: 61, Size: 2.08 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/scrape/test-recipe/route.js (version 2.2.0 - Dual Mode)
import { NextResponse } from 'next/server'
import { initializeSharedLogic } from '@/lib/init-shared-logic'
import {
  testHeadlineExtraction,
  scrapeArticleContentForTest,
} from '@headlines/scraper-logic/src/scraper/index.js'
import { verifyAdmin } from '@headlines/auth'

export async function POST(request) {
  await initializeSharedLogic();
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  try {
    initializeSharedLogic()
    const { sourceConfig, articleUrl } = await request.json()

    // Mode 1: Test a single article's content
    if (articleUrl && sourceConfig.articleSelector) {
      const content = await scrapeArticleContentForTest(articleUrl, sourceConfig.articleSelector);
      return NextResponse.json({
        success: true,
        content: { preview: content, sourceUrl: articleUrl }
      });
    }

    // Mode 2: Test the full source recipe
    if (sourceConfig && sourceConfig.sectionUrl) {
      const headlines = await testHeadlineExtraction(sourceConfig);
      let firstArticleContent = '';
      if (headlines.length > 0 && sourceConfig.articleSelector) {
          firstArticleContent = await scrapeArticleContentForTest(headlines[0].link, sourceConfig.articleSelector);
      }
      return NextResponse.json({
          success: true,
          headlines: {
              count: headlines.length,
              samples: headlines.slice(0, 10),
          },
          content: {
              preview: firstArticleContent,
              sourceUrl: headlines.length > 0 ? headlines[0].link : null,
          }
      });
    }

    return NextResponse.json({ error: 'Invalid request payload.' }, { status: 400 });

  } catch (error) {
    console.error('[API Test Recipe Error]', error)
    return NextResponse.json(
      { success: false, error: 'Failed to perform test scrape.', details: error.message },
      { status: 500 }
    )
  }
}

```

## 📄 src/app/api/settings/route.js
*Lines: 42, Size: 1.44 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/settings/route.js (version 3.0.3)
import { NextResponse } from 'next/server'
import { getSettings, updateSettings } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'

export const dynamic = 'force-dynamic'

export async function GET(request) {
  await initializeSharedLogic();

  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const result = await getSettings()
  if (!result.success) {
    return NextResponse.json({ error: 'Failed to fetch settings.', details: result.error }, { status: 500 });
  }
  // Data is already sanitized in the data-access action
  return NextResponse.json({ settings: result.data });
}

export async function PATCH(request) {
  await initializeSharedLogic();
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const body = await request.json()
  if (!Array.isArray(body)) {
    return NextResponse.json({ error: 'Request body must be an array of settings.' }, { status: 400 });
  }
  const result = await updateSettings(body)
  if (!result.success) {
    return NextResponse.json({ error: 'Failed to update settings', details: result.error }, { status: 500 });
  }
  return NextResponse.json({ message: result.message });
}

```

## 📄 src/app/api/sources/[sourceId]/route.js
*Lines: 28, Size: 1.02 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/sources/[sourceId]/route.js (version 3.0.1)
import { NextResponse } from 'next/server'
import { updateSource } from '@headlines/data-access'
import mongoose from 'mongoose'
import { verifyAdmin } from '@headlines/auth'

export async function PATCH(request, { params }) {
  await initializeSharedLogic();

  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const { sourceId } = params
  if (!mongoose.Types.ObjectId.isValid(sourceId)) {
    return NextResponse.json({ error: 'Invalid source ID' }, { status: 400 })
  }
  const body = await request.json()
  const result = await updateSource(sourceId, body)
  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500;
    return NextResponse.json({ error: result.error }, { status });
  }
  return NextResponse.json({ message: 'Source updated', source: result.data });
}

```

## 📄 src/app/api/sources/route.js
*Lines: 40, Size: 1.35 KB*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/sources/route.js (version 3.0.1)
import { NextResponse } from 'next/server'
import { getAllSources, createSource } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'

export const dynamic = 'force-dynamic'

export async function GET(request) {
  await initializeSharedLogic();

  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const result = await getAllSources()
  if (!result.success) {
    return NextResponse.json({ error: 'Failed to fetch sources.', details: result.error }, { status: 500 });
  }
  // Data is already sanitized in the action
  return NextResponse.json({ sources: result.data });
}

export async function POST(request) {
  await initializeSharedLogic();
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const body = await request.json()
  const result = await createSource(body)
  if (!result.success) {
    const status = result.error.includes('already exists') ? 409 : 500;
    return NextResponse.json({ error: result.error }, { status });
  }
  return NextResponse.json({ success: true, source: result.data }, { status: 201 });
}

```

## 📄 src/app/api/subscribers/[subscriberId]/route.js
*Lines: 47, Size: 1.77 KB*

```javascript
// apps/admin/src/app/api/subscribers/[subscriberId]/route.js (version 3.0.1)
import { NextResponse } from 'next/server'
import { updateSubscriber, deleteSubscriber } from '@headlines/data-access'
import mongoose from 'mongoose'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';

export async function PATCH(request, { params }) {
  await initializeSharedLogic();

  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const { subscriberId } = params
  if (!mongoose.Types.ObjectId.isValid(subscriberId)) {
    return NextResponse.json({ error: 'Invalid subscriber ID' }, { status: 400 })
  }
  const body = await request.json()
  const result = await updateSubscriber(subscriberId, body)
  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500;
    return NextResponse.json({ error: result.error }, { status });
  }
  return NextResponse.json({ message: 'Subscriber updated', subscriber: result.data });
}

export async function DELETE(request, { params }) {
  await initializeSharedLogic();
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const { subscriberId } = params
  if (!mongoose.Types.ObjectId.isValid(subscriberId)) {
    return NextResponse.json({ error: 'Invalid subscriber ID' }, { status: 400 })
  }
  const result = await deleteSubscriber(subscriberId)
  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500;
    return NextResponse.json({ error: result.error }, { status });
  }
  return NextResponse.json({ message: 'Subscriber deleted successfully' });
}

```

## 📄 src/app/api/subscribers/route.js
*Lines: 40, Size: 1.39 KB*

```javascript
// apps/admin/src/app/api/subscribers/route.js (version 3.0.2)
import { NextResponse } from 'next/server'
import { getAllSubscribers, createSubscriber } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';

export const dynamic = 'force-dynamic'

export async function GET(request) {
  await initializeSharedLogic();

  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const result = await getAllSubscribers()
  if (!result.success) {
    return NextResponse.json({ error: 'Failed to fetch subscribers.', details: result.error }, { status: 500 });
  }
  // Data is already sanitized in the data-access action
  return NextResponse.json({ subscribers: result.data });
}

export async function POST(request) {
  await initializeSharedLogic();
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const body = await request.json()
  const result = await createSubscriber(body)
  if (!result.success) {
    const status = result.error.includes('already exists') ? 409 : 500;
    return NextResponse.json({ error: result.error }, { status });
  }
  return NextResponse.json({ success: true, subscriber: result.data }, { status: 201 });
}

```

## 📄 src/app/api/suggestions/route.jsx
*Lines: 51, Size: 1.91 KB*

```jsx
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/suggestions/route.jsx (version 2.0.1)
import { NextResponse } from 'next/server'
import { getSuggestions, processWatchlistSuggestion, processSourceSuggestion } from '@headlines/data-access'
import mongoose from 'mongoose'
import { verifyAdmin } from '@headlines/auth'

export const dynamic = 'force-dynamic'

export async function GET(request) {
  await initializeSharedLogic();
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const result = await getSuggestions()
  if (!result.success) {
    return NextResponse.json({ error: 'Failed to fetch suggestions.', details: result.error }, { status: 500 });
  }
  return NextResponse.json(result.data);
}

export async function POST(request) {
  await initializeSharedLogic();
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const { suggestionId, suggestionType, action } = await request.json()
  if (!suggestionId || !suggestionType || !action || !mongoose.Types.ObjectId.isValid(suggestionId)) {
    return NextResponse.json({ error: 'Invalid parameters.' }, { status: 400 })
  }

  let result;
  if (suggestionType === 'watchlist') {
    result = await processWatchlistSuggestion({ suggestionId, action });
  } else if (suggestionType === 'source') {
    result = await processSourceSuggestion({ suggestionId, action });
  } else {
    return NextResponse.json({ error: 'Invalid suggestion type.' }, { status: 400 })
  }

  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500;
    return NextResponse.json({ error: 'Failed to process suggestion.', details: result.error }, { status });
  }
  return NextResponse.json({ success: true, message: result.message });
}

```

## 📄 src/app/api/watchlist/[entityId]/route.js
*Lines: 47, Size: 1.75 KB*

```javascript
// apps/admin/src/app/api/watchlist/[entityId]/route.js (version 3.0.1)
import { NextResponse } from 'next/server'
import { updateWatchlistEntity, deleteWatchlistEntity } from '@headlines/data-access'
import mongoose from 'mongoose'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';

export async function PATCH(request, { params }) {
  await initializeSharedLogic();

  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const { entityId } = params
  if (!mongoose.Types.ObjectId.isValid(entityId)) {
    return NextResponse.json({ error: 'Invalid entity ID' }, { status: 400 })
  }
  const body = await request.json()
  const result = await updateWatchlistEntity(entityId, body)
  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500;
    return NextResponse.json({ error: result.error }, { status });
  }
  return NextResponse.json({ message: 'Watchlist entity updated', entity: result.data });
}

export async function DELETE(request, { params }) {
  await initializeSharedLogic();
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const { entityId } = params
  if (!mongoose.Types.ObjectId.isValid(entityId)) {
    return NextResponse.json({ error: 'Invalid entity ID' }, { status: 400 })
  }
  const result = await deleteWatchlistEntity(entityId)
  if (!result.success) {
    const status = result.error.includes('not found') ? 404 : 500;
    return NextResponse.json({ error: result.error }, { status });
  }
  return NextResponse.json({ message: 'Watchlist entity deleted' });
}

```

## 📄 src/app/api/watchlist/route.js
*Lines: 39, Size: 1.35 KB*

```javascript
// apps/admin/src/app/api/watchlist/route.js (version 3.0.1)
import { NextResponse } from 'next/server'
import { getAllWatchlistEntities, createWatchlistEntity } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';

export const dynamic = 'force-dynamic'

export async function GET(request) {
  await initializeSharedLogic();

  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const result = await getAllWatchlistEntities()
  if (!result.success) {
    return NextResponse.json({ error: 'Failed to fetch watchlist.', details: result.error }, { status: 500 });
  }
  return NextResponse.json({ entities: result.data });
}

export async function POST(request) {
  await initializeSharedLogic();
  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }

  const body = await request.json()
  const result = await createWatchlistEntity(body)
  if (!result.success) {
    const status = result.error.includes('already exists') ? 409 : 500;
    return NextResponse.json({ error: result.error }, { status });
  }
  return NextResponse.json({ success: true, entity: result.data }, { status: 201 });
}

```

## 📄 src/app/api/watchlist/suggestions/[suggestionId]/route.js
*Lines: 28, Size: 1.01 KB*

```javascript
// apps/admin/src/app/api/watchlist/suggestions/[suggestionId]/route.js (version 1.0.0)
'use server'

import { NextResponse } from 'next/server';
import { updateWatchlistSuggestion } from '@headlines/data-access';
import { verifyAdmin } from '@headlines/auth';
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
import mongoose from 'mongoose';

export async function PATCH(request, { params }) {
    await initializeSharedLogic();
    const { isAdmin, error } = await verifyAdmin();
    if (!isAdmin) return NextResponse.json({ error }, { status: 401 });

    const { suggestionId } = params;
    if (!mongoose.Types.ObjectId.isValid(suggestionId)) {
        return NextResponse.json({ error: 'Invalid suggestion ID' }, { status: 400 });
    }

    const updateData = await request.json();
    const result = await updateWatchlistSuggestion(suggestionId, updateData);

    if (!result.success) {
        return NextResponse.json({ error: result.error }, { status: 500 });
    }
    return NextResponse.json(result);
}

```

## 📄 src/app/api/watchlist/suggestions/route.js
*Lines: 23, Size: 814 Bytes*

```javascript
import { initializeSharedLogic } from '@/lib/init-shared-logic.js';
// apps/admin/src/app/api/watchlist/suggestions/route.js (version 3.0.1)
import { NextResponse } from 'next/server'
import { getSuggestions } from '@headlines/data-access'
import { verifyAdmin } from '@headlines/auth'

export const dynamic = 'force-dynamic'

export async function GET(request) {
  await initializeSharedLogic();

  const { isAdmin, error: authError } = await verifyAdmin()
  if (!isAdmin) {
    return NextResponse.json({ error: authError }, { status: 401 })
  }
  
  const result = await getSuggestions()
  if (!result.success) {
    return NextResponse.json({ error: 'Failed to fetch suggestions.', details: result.error }, { status: 500 });
  }
  return NextResponse.json({ suggestions: result.data.watchlistSuggestions });
}

```

## 📄 src/app/articles/columns.jsx
*Lines: 83, Size: 2.63 KB*

```jsx
// apps/admin/src/app/articles/columns.jsx (version 1.2.0)
'use client'

import React from 'react'
import { Button, Badge, EditableCell, DataTableColumnHeader } from '@headlines/ui'
import { Trash2, ExternalLink } from 'lucide-react'
import { format } from 'date-fns'

export const columns = (onUpdate, onDelete) => [
  {
    accessorKey: 'relevance_headline',
    // DEFINITIVE FIX: Use the new interactive column header.
    header: ({ column }) => <DataTableColumnHeader column={column} title="HL Score" />,
    cell: ({ row }) => <Badge variant="outline">{row.original.relevance_headline}</Badge>,
  },
  {
    accessorKey: 'relevance_article',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Article Score" />
    ),
    cell: ({ row }) => (
      <Badge variant={row.original.relevance_article > 50 ? 'default' : 'secondary'}>
        {row.original.relevance_article || 'N/A'}
      </Badge>
    ),
  },
  {
    accessorKey: 'headline',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Headline" />,
    cell: ({ row }) => (
      <EditableCell
        initialValue={row.original.headline}
        onSave={(newValue) => onUpdate(row.original, { headline: newValue })}
      />
    ),
  },
  {
    accessorKey: 'newspaper',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Source" />,
    cell: ({ row }) => (
      <EditableCell
        initialValue={row.original.newspaper}
        onSave={(newValue) => onUpdate(row.original, { newspaper: newValue })}
      />
    ),
  },
  {
    accessorKey: 'country',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Country" />,
    cell: ({ row }) => (
      <EditableCell
        initialValue={row.original.country}
        onSave={(newValue) => onUpdate(row.original, { country: newValue })}
      />
    ),
  },
  {
    accessorKey: 'createdAt',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Discovered" />,
    cell: ({ row }) => format(new Date(row.original.createdAt), 'dd MMM yyyy, HH:mm'),
  },
  {
    id: 'actions',
    cell: ({ row }) => (
      <div className="flex items-center justify-end gap-2">
        <a href={row.original.link} target="_blank" rel="noopener noreferrer">
          <Button variant="ghost" size="icon" className="h-8 w-8">
            <ExternalLink className="h-4 w-4" />
          </Button>
        </a>
        <Button
          variant="ghost"
          size="icon"
          className="h-8 w-8 text-muted-foreground"
          onClick={() => onDelete(row.original._id)}
        >
          <Trash2 className="h-4 w-4" />
        </Button>
      </div>
    ),
  },
]

```

## 📄 src/app/articles/page.jsx
*Lines: 97, Size: 3.01 KB*

```jsx
// apps/admin/src/app/articles/page.jsx (version 1.2.0)
'use client'

import { PageHeader, DataTable, ExportButton } from '@headlines/ui'
import { columns } from './columns'
import { useAdminManager } from '@/hooks/use-admin-manager'
import {
  deleteAdminArticle,
  updateAdminArticle,
  exportArticlesToCSV,
  exportArticlesToXLSX,
} from '@headlines/data-access'
import { toast } from 'sonner'
import { useCallback, useState } from 'react'

export default function ArticlesPage() {
  const [sorting, setSorting] = useState([{ id: 'createdAt', desc: true }])
  const [columnFilters, setColumnFilters] = useState([])
  const [page, setPage] = useState(1)

  const { data, setData, total, isLoading, refetch } = useAdminManager(
    '/api/articles',
    page,
    sorting,
    columnFilters
  )

  const handleDelete = useCallback(
    async (articleId) => {
      setData((currentData) => currentData.filter((a) => a._id !== articleId))
      toast.success('Article deleted.')
      const result = await deleteAdminArticle(articleId)
      if (!result.success) {
        toast.error(`Deletion failed on server: ${result.error}. Reverting.`)
        refetch()
      }
    },
    [setData, refetch]
  )

  const handleOptimisticUpdate = useCallback(
    async (article, updateData) => {
      setData((currentData) =>
        currentData.map((a) => (a._id === article._id ? { ...a, ...updateData } : a))
      )
      const result = await updateAdminArticle(article._id, updateData)
      if (!result.success) {
        toast.error(`Update failed: ${result.error}`)
        refetch()
      }
    },
    [setData, refetch]
  )

  const description = `Review and manage all ${data.length.toLocaleString()} visible articles (${total.toLocaleString()} total).`

  const currentFilters = columnFilters.reduce((acc, filter) => {
    acc[filter.id === 'headline' ? 'q' : filter.id] = filter.value
    return acc
  }, {})
  const sortParam = sorting[0]
    ? `${sorting[0].id}_${sorting[0].desc ? 'desc' : 'asc'}`
    : 'createdAt_desc'

  const exportActions = {
    csv: () => exportArticlesToCSV({ filters: currentFilters, sort: sortParam }),
    xlsx: () => exportArticlesToXLSX({ filters: currentFilters, sort: sortParam }),
  }

  return (
    <div className="flex flex-col h-full">
      <PageHeader title="Article Management" description={description}>
        <ExportButton
          hasData={data && data.length > 0}
          filename="articles_export"
          exportActions={exportActions}
        />
      </PageHeader>
      <div className="mt-8 flex-grow min-h-0 max-w-none">
        <DataTable
          columns={columns(handleOptimisticUpdate, handleDelete)}
          data={data}
          isLoading={isLoading}
          // DEFINITIVE FIX: Pass the required pagination props to the DataTable component.
          page={page}
          setPage={setPage}
          total={total}
          sorting={sorting}
          setSorting={setSorting}
          columnFilters={columnFilters}
          setColumnFilters={setColumnFilters}
        />
      </div>
    </div>
  )
}

```

## 📄 src/app/countries/[countryName]/page.js
*Lines: 196, Size: 6.16 KB*

```javascript
// src/app/countries/[countryName]/page.js (version 1.3)
'use client'

import { useState, useEffect, useMemo } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { motion } from 'framer-motion'
import { ArrowLeft, Loader2, ServerCrash, Wand2, PlusCircle, Edit } from 'lucide-react'
import { Button } from '@headlines/ui'
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from '@headlines/ui'
import { Badge } from '@headlines/ui'
import { Separator } from '@headlines/ui'
import { toast } from 'sonner'
import { useEntityManager } from '@/hooks/use-entity-manager'

const SourceListCard = ({ title, sources, onAction, actionType }) => (
  <Card className="bg-black/20 border-white/10">
    <CardHeader>
      <CardTitle>{title}</CardTitle>
    </CardHeader>
    <CardContent>
      {sources && sources.length > 0 ? (
        <ul className="space-y-3">
          {sources.map((source, index) => (
            <li key={index} className="flex items-center justify-between">
              <div>
                <p className="font-medium">{source.name}</p>
                <a
                  href={source.url || source.sectionUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-xs text-muted-foreground hover:underline"
                >
                  {source.url || source.sectionUrl}
                </a>
              </div>
              <Button size="sm" variant="outline" onClick={() => onAction(source)}>
                {actionType === 'add' ? (
                  <PlusCircle className="h-4 w-4 mr-2" />
                ) : (
                  <Edit className="h-4 w-4 mr-2" />
                )}
                {actionType === 'add' ? 'Add' : 'Edit'}
              </Button>
            </li>
          ))}
        </ul>
      ) : (
        <p className="text-sm text-muted-foreground">No sources in this category.</p>
      )}
    </CardContent>
  </Card>
)

export default function CountryDetailPage({ params }) {
  const countryName = decodeURIComponent(params.countryName)
  const router = useRouter()
  const [suggestions, setSuggestions] = useState(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState(null)

  const { entities: allSources, isLoading: isLoadingSources } = useEntityManager(
    '/api/sources',
    'Source',
    'name'
  )

  const onboardedSources = useMemo(() => {
    if (!allSources) return []
    return allSources.filter((s) => s.country === countryName)
  }, [allSources, countryName])

  const handleDiscover = async () => {
    setIsLoading(true)
    setError(null)
    const toastId = toast.loading(
      `AI is discovering additional sources for ${countryName}...`
    )
    try {
      const res = await fetch('/api/ai/discover-sources', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          country: countryName,
          existingSources: onboardedSources.map((s) => s.name),
        }),
      })
      const data = await res.json()
      if (!res.ok) throw new Error(data.details || 'Failed to discover sources.')
      setSuggestions(data.suggestions)
      toast.success('Source discovery complete!', { id: toastId })
    } catch (err) {
      setError(err.message)
      toast.error('Discovery Failed', { id: toastId, description: err.message })
    } finally {
      setIsLoading(false)
    }
  }

  // CORRECTIVE ACTION: This now correctly navigates to the Sources page
  // and passes all necessary data via query params to pre-populate the editor.
  const handleAddSource = (source) => {
    const query = new URLSearchParams({
      action: 'add',
      name: source.name,
      country: countryName,
      sectionUrl: source.url,
      baseUrl: new URL(source.url).origin,
    }).toString()
    router.push(`/?${query}`)
  }

  const handleEditSource = (source) => {
    const query = new URLSearchParams({
      action: 'edit',
      sourceId: source._id,
    }).toString()
    router.push(`/?${query}`)
  }

  const allSuggestions = suggestions
    ? [
        ...(suggestions.financial_news || []),
        ...(suggestions.pe_vc_news || []),
        ...(suggestions.ma_news || []),
      ]
    : []

  if (isLoadingSources) {
    return (
      <div className="flex items-center justify-center h-full">
        <Loader2 className="w-12 h-12 animate-spin gemini-text" />
      </div>
    )
  }

  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
      <Button asChild variant="ghost" className="mb-4">
        <Link href="/countries">
          <ArrowLeft className="mr-2 h-4 w-4" /> Back to Countries
        </Link>
      </Button>
      <Card className="bg-black/20 border-white/10 mb-8">
        <CardHeader>
          <CardTitle className="text-3xl">Source Hub: {countryName}</CardTitle>
          <CardDescription>
            Manage existing sources or use AI to discover new ones for this country.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Button onClick={handleDiscover} disabled={isLoading}>
            {isLoading ? (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            ) : (
              <Wand2 className="mr-2 h-4 w-4" />
            )}
            {isLoading ? 'Discovering...' : 'Discover Additional Sources with AI'}
          </Button>
        </CardContent>
      </Card>

      <div className="space-y-6">
        <SourceListCard
          title="Onboarded Sources"
          sources={onboardedSources}
          onAction={handleEditSource}
          actionType="edit"
        />
        <Separator />
        {error && (
          <div className="p-4 rounded-lg bg-destructive/10 border border-destructive/50 text-destructive-foreground">
            <p>{error}</p>
          </div>
        )}
        {suggestions && (
          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }}>
            <SourceListCard
              title="AI-Suggested New Sources"
              sources={allSuggestions}
              onAction={handleAddSource}
              actionType="add"
            />
          </motion.div>
        )}
      </div>
    </motion.div>
  )
}

```

## 📄 src/app/countries/columns.jsx
*Lines: 99, Size: 2.88 KB*

```jsx
// src/app/countries/columns.jsx (version 1.2.0)
'use client'

import { Button } from '@headlines/ui'
import { Badge } from '@headlines/ui'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from '@headlines/ui'
import { ArrowUpDown, MoreHorizontal } from 'lucide-react'

export const columns = (handleEdit) => [
  {
    accessorKey: 'name',
    header: ({ column }) => (
      <Button
        variant="ghost"
        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
      >
        Country Name
        <ArrowUpDown className="ml-2 h-4 w-4" />
      </Button>
    ),
  },
  {
    accessorKey: 'status',
    header: 'Status',
    cell: ({ row }) => {
      const status = row.getValue('status')
      const colorClass =
        status === 'active'
          ? 'bg-green-500/20 text-green-400 border-green-500/30'
          : 'bg-gray-500/20 text-gray-400 border-gray-500/30'
      return <Badge className={colorClass}>{status}</Badge>
    },
  },
  {
    accessorKey: 'eventCount',
    header: ({ column }) => (
      <Button
        variant="ghost"
        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
      >
        Total Events
        <ArrowUpDown className="ml-2 h-4 w-4" />
      </Button>
    ),
    cell: ({ row }) => <div className="text-center font-medium">{row.original.eventCount}</div>,
  },
  {
      accessorKey: 'sourceCount',
      header: 'Sources',
      cell: ({ row }) => {
          const { sourceCount, activeSourceCount } = row.original;
          let activeText;
          if (activeSourceCount === 0 && sourceCount > 0) {
              activeText = '(none active)';
          } else if (activeSourceCount === sourceCount && sourceCount > 0) {
              activeText = '(all active)';
          } else {
              activeText = `(${activeSourceCount} active)`;
          }
          return (
            <div className="text-center">
              <span className="font-medium">{sourceCount}</span>
              <span className="text-muted-foreground text-xs ml-1">{activeText}</span>
            </div>
          )
      }
  },
  {
    id: 'actions',
    cell: ({ row }) => {
      const country = row.original
      return (
        <div className="text-right">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">Open menu</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem onClick={() => handleEdit(country._id)}>
                Edit Country
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      )
    },
  },
]

```

## 📄 src/app/countries/country-editor.jsx
*Lines: 131, Size: 4.03 KB*

```jsx
// src/app/countries/country-editor.jsx (version 1.0)
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { Button } from '@headlines/ui'
import { CardFooter } from '@headlines/ui'
import { Input } from '@headlines/ui'
import { Label } from '@headlines/ui'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@headlines/ui'
import { toast } from 'sonner'
import { Save, Loader2, PlusCircle, X } from 'lucide-react'

const FormField = ({ id, label, children }) => (
  <div className="space-y-2">
    <Label htmlFor={id} className="text-sm font-medium text-muted-foreground pl-1">
      {label}
    </Label>
    {children}
  </div>
)

export default function CountryEditor({ country, onSave, onCancel }) {
  const [formData, setFormData] = useState(country)
  const [isSaving, setIsSaving] = useState(false)
  const [isDirty, setIsDirty] = useState(false)

  useEffect(() => {
    setFormData(country)
    setIsDirty(false)
  }, [country])

  if (!country) return null

  const isNew = !formData._id

  const handleChange = (key, value) => {
    setFormData((prev) => ({ ...prev, [key]: value }))
    setIsDirty(true)
  }

  const handleSave = async () => {
    setIsSaving(true)
    const url = isNew ? '/api/countries' : `/api/countries/${country._id}`
    const method = isNew ? 'POST' : 'PATCH'
    try {
      const res = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      })
      const data = await res.json()
      if (!res.ok) throw new Error(data.error || 'Failed to save country.')
      onSave(data.country)
      toast.success(`Country "${data.country.name}" ${isNew ? 'created' : 'updated'}.`)
    } catch (error) {
      toast.error(`Error saving country: ${error.message}`)
    } finally {
      setIsSaving(false)
    }
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="h-full flex flex-col"
    >
      <div className="flex justify-between items-center flex-shrink-0 p-6 border-b border-white/10">
        <div className="space-y-1">
          <h1 className="text-2xl font-bold tracking-tight flex items-center gap-2">
            {isNew && <PlusCircle />}
            {isNew ? 'Create New Country' : 'Edit Country'}
          </h1>
          <p className="text-sm text-muted-foreground">
            {isNew ? 'Add a new country to the system.' : formData.name}
          </p>
        </div>
        <Button variant="ghost" size="icon" onClick={onCancel}>
          <X className="h-4 w-4" />
        </Button>
      </div>
      <div className="flex-grow overflow-y-auto p-6 space-y-6">
        <FormField id="name" label="Country Name">
          <Input
            value={formData.name || ''}
            onChange={(e) => handleChange('name', e.target.value)}
          />
        </FormField>
        <FormField id="isoCode" label="2-Letter ISO Code">
          <Input
            value={formData.isoCode || ''}
            onChange={(e) => handleChange('isoCode', e.target.value.toUpperCase())}
            maxLength={2}
          />
        </FormField>
        <FormField label="Status">
          <Select
            value={formData.status}
            onValueChange={(v) => handleChange('status', v)}
          >
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="active">Active</SelectItem>
              <SelectItem value="inactive">Inactive</SelectItem>
            </SelectContent>
          </Select>
        </FormField>
      </div>
      <CardFooter className="mt-auto border-t border-white/10 p-6 flex justify-end">
        <Button onClick={handleSave} disabled={!isDirty || isSaving}>
          {isSaving ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Save className="mr-2 h-4 w-4" />
          )}
          {isSaving ? 'Saving...' : 'Save Changes'}
        </Button>
      </CardFooter>
    </motion.div>
  )
}

```

## 📄 src/app/countries/page.js
*Lines: 110, Size: 3.38 KB*

```javascript
// src/app/countries/page.js (version 1.4.1)
'use client'

import { useMemo, useState } from 'react'
import Link from 'next/link'
import { ServerCrash, PlusCircle, ChevronsRight } from 'lucide-react'
import { PageHeader, SheetHeader, SheetTitle, SheetDescription } from '@headlines/ui'
import { useEntityManager } from '@/hooks/use-entity-manager'
import { Button } from '@headlines/ui'
import { Sheet, SheetContent } from '@headlines/ui'
import { columns } from './columns'
import { DataTable } from '@headlines/ui'
import CountryEditor from './country-editor'

export default function CountriesPage() {
  const {
    entities: countries,
    isLoading,
    error,
    handleSave,
  } = useEntityManager('/api/countries', 'Country', 'name')

  const [isEditorOpen, setIsEditorOpen] = useState(false)
  const [selectedId, setSelectedId] = useState(null)

  const handleEdit = (id) => {
    setSelectedId(id)
    setIsEditorOpen(true)
  }

  const handleAdd = () => {
    setSelectedId('new')
    setIsEditorOpen(true)
  }

  const activeCountryData = useMemo(() => {
    if (selectedId === 'new') {
      return { _id: null, name: '', isoCode: '', status: 'active' }
    }
    return countries?.find((c) => c._id === selectedId) || null
  }, [selectedId, countries])

  const columnsWithDetails = [
    ...columns(handleEdit),
    {
      id: 'details',
      cell: ({ row }) => (
        <Button asChild variant="ghost" size="icon">
          <Link href={`/countries/${encodeURIComponent(row.original.name)}`}>
            <ChevronsRight className="h-4 w-4" />
          </Link>
        </Button>
      ),
    },
  ]

  if (error) {
    return (
      <div className="flex h-full w-full items-center justify-center text-center p-4">
        <div className="p-8 rounded-lg bg-destructive/10 border border-destructive/50 max-w-md">
          <ServerCrash className="w-12 h-12 mx-auto text-destructive mb-4" />
          <h1 className="text-2xl font-bold">Failed to Load Countries</h1>
          <p className="text-destructive-foreground/80 mt-2">{error}</p>
        </div>
      </div>
    )
  }

  return (
    <div className="flex flex-col h-full">
      <PageHeader
        title="Country Management"
        description="Enable or disable countries for scraping and user subscriptions."
      >
        <Button onClick={handleAdd}>
          <PlusCircle className="mr-2 h-4 w-4" />
          Add New Country
        </Button>
      </PageHeader>
      <div className="mt-8 flex-grow min-h-0">
          <DataTable
            columns={columnsWithDetails}
            data={countries || []}
            isLoading={isLoading}
            filterColumn="name"
            filterPlaceholder="Filter by name..."
            initialSort={[{ id: 'eventCount', desc: true }]}
          />
      </div>
      <Sheet open={isEditorOpen} onOpenChange={setIsEditorOpen}>
        <SheetContent className="w-full sm:max-w-md p-0">
          <SheetHeader className="p-6 pb-0 sr-only">
             <SheetTitle>Country Editor</SheetTitle>
             <SheetDescription>Manage country details.</SheetDescription>
          </SheetHeader>
          <CountryEditor
            key={selectedId}
            country={activeCountryData}
            onSave={(saved) => {
              handleSave(saved)
              setIsEditorOpen(false)
            }}
            onCancel={() => setIsEditorOpen(false)}
          />
        </SheetContent>
      </Sheet>
    </div>
  )
}

```

## 📄 src/app/dashboard/page.jsx
*Lines: 311, Size: 10.2 KB*

```jsx
// apps/admin/src/app/dashboard/page.jsx (version 2.3.0)
'use client'

import { useState, useEffect, useMemo } from 'react'
import { motion } from 'framer-motion'
import Link from 'next/link'
import {
  Newspaper,
  Users,
  Rss,
  CheckCircle2,
  AlertTriangle,
  Loader2,
  Building,
  User,
  ShieldCheck,
  PauseCircle,
  LogIn,
  AlertCircle,
  ThumbsDown,
  Zap,
} from 'lucide-react'
import {
  PageHeader,
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  ScrollArea,
  Button,
  TooltipProvider,
  Tooltip,
  TooltipTrigger,
  TooltipContent,
} from '@headlines/ui'

const StatCard = ({ title, value, icon, children, href }) => (
  <Link href={href}>
    <motion.div
      whileHover={{ y: -5, boxShadow: '0 10px 20px rgba(0,0,0,0.2)' }}
      transition={{ type: 'spring', stiffness: 300 }}
      className="h-full"
    >
      <Card className="bg-black/20 border-white/10 hover:border-white/20 transition-colors h-full">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium text-muted-foreground">
            {title}
          </CardTitle>
          {icon}
        </CardHeader>
        <CardContent>
          <div className="text-4xl font-bold">{value}</div>
          <div className="text-xs text-muted-foreground flex flex-wrap gap-x-3 gap-y-1 mt-1">
            {children}
          </div>
        </CardContent>
      </Card>
    </motion.div>
  </Link>
)

const RunFunnelStat = ({ icon: Icon, count, tooltipText, colorClass }) => (
  <Tooltip>
    <TooltipTrigger asChild>
      <div className={`flex items-center gap-1.5 font-mono text-sm ${colorClass}`}>
        <Icon className="h-4 w-4" />
        <span>{count}</span>
      </div>
    </TooltipTrigger>
    <TooltipContent>
      <p>{tooltipText}</p>
    </TooltipContent>
  </Tooltip>
)

const RecentRun = ({ run }) => {
  const isSuccess = !run.runStats.errors || run.runStats.errors.length === 0
  const timestamp = new Date(run.createdAt).toLocaleString(undefined, {
    dateStyle: 'medium',
    timeStyle: 'short',
  })

  const { relevant, droppedErrors, droppedRelevance, events } = useMemo(() => {
    const outcomes = run.runStats.enrichmentOutcomes || []
    return {
      relevant: run.runStats.relevantHeadlines || 0,
      droppedErrors: outcomes.filter((o) => o.outcome === 'High-Signal Failure').length,
      droppedRelevance: outcomes.filter((o) => o.outcome === 'Dropped').length,
      events: run.runStats.eventsSynthesized || 0,
    }
  }, [run.runStats])

  return (
    <Link href={`/runs/${run._id}`}>
      <div className="flex items-center justify-between p-3 rounded-md hover:bg-white/5 transition-colors cursor-pointer">
        <div className="flex items-center gap-3">
          {isSuccess ? (
            <CheckCircle2 className="h-5 w-5 text-green-500 flex-shrink-0" />
          ) : (
            <AlertTriangle className="h-5 w-5 text-red-500 flex-shrink-0" />
          )}
          <div className="min-w-0">
            <p className="font-medium truncate">
              {run.runStats.freshHeadlinesFound} headlines
            </p>
            <p className="text-xs text-muted-foreground">{timestamp}</p>
          </div>
        </div>
        <TooltipProvider delayDuration={100}>
          <div className="flex items-center gap-3">
            <RunFunnelStat
              icon={LogIn}
              count={relevant}
              tooltipText="Relevant Headlines"
              colorClass="text-slate-400"
            />
            <RunFunnelStat
              icon={AlertCircle}
              count={droppedErrors}
              tooltipText="Dropped (Enrichment Errors)"
              colorClass="text-yellow-500"
            />
            <RunFunnelStat
              icon={ThumbsDown}
              count={droppedRelevance}
              tooltipText="Dropped (Low Relevance)"
              colorClass="text-red-500"
            />
            <RunFunnelStat
              icon={Zap}
              count={events}
              tooltipText="Synthesized Events"
              colorClass="text-green-400"
            />
          </div>
        </TooltipProvider>
      </div>
    </Link>
  )
}

export default function DashboardPage() {
  const [stats, setStats] = useState(null)
  const [runs, setRuns] = useState(null)
  const [sources, setSources] = useState(null)
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    Promise.all([
      fetch('/api/dashboard-stats').then((res) => res.json()),
      fetch('/api/run-verdicts').then((res) => res.json()),
      fetch('/api/sources').then((res) => res.json()), // Fetch all sources
    ])
      .then(([statsData, runsData, sourcesData]) => {
        setStats(statsData.stats)
        setRuns(runsData.verdicts)
        setSources(sourcesData.sources)
        setIsLoading(false)
      })
      .catch((err) => {
        console.error(err)
        setIsLoading(false)
      })
  }, [])

  const failingSources = useMemo(() => {
    if (!sources) return []
    return sources.filter(
      (s) =>
        s.status === 'active' &&
        s.analytics?.totalRuns > 0 &&
        s.analytics?.lastRunHeadlineCount === 0
    )
  }, [sources])

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <Loader2 className="w-12 h-12 animate-spin gemini-text" />
      </div>
    )
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="flex flex-col h-full"
    >
      <div className="flex-shrink-0">
        <PageHeader
          title="Dashboard"
          description="At-a-glance overview of the pipeline's configuration and health."
        />
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3 mt-8">
          <StatCard
            title="Sources"
            value={stats?.sources.active}
            href="/sources?status=failing"
            icon={<Newspaper className="h-5 w-5 text-muted-foreground" />}
          >
            <span>{stats?.sources.total} total</span>
            <span className="text-yellow-400 flex items-center gap-1">
              <PauseCircle className="h-3 w-3" /> {stats?.sources.paused} paused
            </span>
            <span className="text-red-400 flex items-center gap-1">
              <AlertTriangle className="h-3 w-3" /> {stats?.sources.failing} failing
            </span>
          </StatCard>
          <StatCard
            title="Users"
            value={stats?.users.active}
            href="/users"
            icon={<Users className="h-5 w-5 text-muted-foreground" />}
          >
            <span>{stats?.users.total} total</span>
            <span className="flex items-center gap-1">
              <ShieldCheck className="h-3 w-3" /> {stats?.users.admin} admin(s)
            </span>
          </StatCard>
          <StatCard
            title="Watchlist"
            value={stats?.watchlist.total}
            href="/watchlist"
            icon={<Rss className="h-5 w-5 text-muted-foreground" />}
          >
            <span className="flex items-center gap-1">
              <Building className="h-3 w-3" /> {stats?.watchlist.company} companies
            </span>
            <span className="flex items-center gap-1">
              <User className="h-3 w-3" />{' '}
              {stats?.watchlist.person + stats?.watchlist.family} people
            </span>
          </StatCard>
        </div>
      </div>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
        className="mt-10 grid gap-10 lg:grid-cols-2 flex-grow min-h-0"
      >
        <Card className="bg-black/20 border-white/10 flex flex-col">
          <CardHeader className="flex-shrink-0">
            <CardTitle>System Status</CardTitle>
            <CardDescription>Current health of active data sources.</CardDescription>
          </CardHeader>
          <CardContent className="flex-grow flex flex-col min-h-0">
            {failingSources.length > 0 ? (
              <div className="space-y-3 flex flex-col flex-grow min-h-0">
                <div className="flex items-center gap-3 text-red-400 flex-shrink-0">
                  <AlertTriangle />
                  <p className="font-semibold">
                    {failingSources.length} active source(s) are failing.
                  </p>
                </div>
                <div className="flex-grow min-h-0">
                  <ScrollArea className="h-full rounded-md border bg-background/50 p-2">
                    <ul className="space-y-1">
                      {failingSources.map((s) => (
                        <li key={s._id}>
                          <Link href={`/sources?action=edit&sourceId=${s._id}`}>
                            <Button variant="ghost" className="w-full justify-start h-8">
                              {s.name}
                            </Button>
                          </Link>
                        </li>
                      ))}
                    </ul>
                  </ScrollArea>
                </div>
              </div>
            ) : (
              <div className="flex items-center gap-3 text-green-400">
                <CheckCircle2 />
                <p className="font-semibold">
                  All systems nominal. All active sources are healthy.
                </p>
              </div>
            )}
          </CardContent>
        </Card>
        <Card className="bg-black/20 border-white/10 flex flex-col">
          <CardHeader className="flex-shrink-0">
            <CardTitle>Recent Pipeline Runs</CardTitle>
            <CardDescription>
              Performance funnel for the last 5 executions.
            </CardDescription>
          </CardHeader>
          <CardContent className="flex-grow min-h-0">
            <ScrollArea className="h-full">
              {runs && runs.length > 0 ? (
                <div className="space-y-2">
                  {runs.map((run) => (
                    <RecentRun key={run._id} run={run} />
                  ))}
                </div>
              ) : (
                <p className="text-sm text-muted-foreground p-4">
                  No recent pipeline runs found.
                </p>
              )}
            </ScrollArea>
          </CardContent>
        </Card>
      </motion.div>
    </motion.div>
  )
}

```

## 📄 src/app/events/columns.jsx
*Lines: 129, Size: 6.66 KB*

```jsx
// apps/admin/src/app/events/columns.jsx (version 3.4.1 - Unabridged)
'use client'

import React, { useState, useCallback } from 'react'
import {
  EditableCell, Button, AccordionContent, AccordionItem, AccordionTrigger,
  Select, SelectContent, SelectItem, SelectTrigger, SelectValue,
  DataTableColumnHeader, Card, CardHeader, CardTitle, CardDescription,
  CardContent, CardFooter, Label, Textarea,
} from '@headlines/ui'
import { Trash2, Loader2 } from 'lucide-react'
import { format } from 'date-fns'
import { RelationshipManager } from '../_components/relationships/RelationshipManager'
import { toast } from 'sonner'

const eventCategories = [
  'New Wealth', 'Future Wealth', 'Wealth Mentioned', 'Legal/Dispute', 'Background', 'Other',
]

const FormField = ({ id, label, children }) => (
  <div className="space-y-2">
    <Label htmlFor={id} className="text-sm font-medium text-muted-foreground pl-1">{label}</Label>
    {children}
  </div>
)

export const EventListItem = ({ event, onUpdate, onDelete, isExpanded }) => {
  const [details, setDetails] = useState(null)
  const [isLoadingDetails, setIsLoadingDetails] = useState(false)

  const loadDetails = useCallback(async () => {
    setIsLoadingDetails(true)
    try {
      const res = await fetch(`/api/events/${event._id}`)
      const data = await res.json()
      if (!res.ok) throw new Error(data.error || 'Failed to fetch details')
      setDetails(data)
    } catch (err) {
      toast.error('Failed to load event details', { description: err.message })
    } finally {
      setIsLoadingDetails(false)
    }
  }, [event._id])

  React.useEffect(() => {
    if (isExpanded && !details && !isLoadingDetails) {
      loadDetails()
    }
  }, [isExpanded, details, isLoadingDetails, loadDetails])

  return (
    <AccordionItem value={event._id} className="border-b border-white/10 group">
      <AccordionTrigger className="w-full text-left hover:bg-white/5 px-2 hover:no-underline">
        <div className="flex items-center w-full text-sm">
          <div className="w-[180px] flex-shrink-0 text-muted-foreground group-hover:text-foreground">{format(new Date(event.createdAt), 'dd MMM yyyy, HH:mm')}</div>
          <div className="w-[140px] flex-shrink-0">{event.country}</div>
          <div className="w-[180px] flex-shrink-0">{event.eventClassification || 'N/A'}</div>
          <div className="w-[80px] text-center flex-shrink-0">{event.highest_relevance_score}</div>
          <div className="flex-grow min-w-0 pr-4 whitespace-normal font-medium">{event.synthesized_headline}</div>
        </div>
      </AccordionTrigger>
      <AccordionContent className="p-4 bg-black/20">
        {isLoadingDetails ? (
          <div className="flex items-center justify-center h-64"><Loader2 className="h-8 w-8 animate-spin text-muted-foreground" /></div>
        ) : details ? (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader><CardTitle>Event Details</CardTitle><CardDescription>View and edit the core synthesized data.</CardDescription></CardHeader>
              <CardContent className="space-y-4">
                <FormField label="Synthesized Headline"><EditableCell useTextarea={true} initialValue={details.synthesized_headline} onSave={(newValue) => onUpdate(details, { synthesized_headline: newValue })} /></FormField>
                <FormField label="Country"><EditableCell initialValue={details.country} onSave={(newValue) => onUpdate(details, { country: newValue })} /></FormField>
                <FormField label="Classification">
                  <Select value={details.eventClassification} onValueChange={(newValue) => onUpdate(details, { eventClassification: newValue })}>
                    <SelectTrigger><SelectValue placeholder="Select..."/></SelectTrigger>
                    <SelectContent>{eventCategories.map(cat => <SelectItem key={cat} value={cat}>{cat}</SelectItem>)}</SelectContent>
                  </Select>
                </FormField>
                <FormField label="Relevance Score"><EditableCell type="number" initialValue={details.highest_relevance_score} onSave={(newValue) => onUpdate(details, { highest_relevance_score: newValue })} /></FormField>
                <FormField label="Synthesized Summary"><Textarea readOnly value={details.synthesized_summary} className="bg-secondary/50 h-32" /></FormField>
              </CardContent>
              <CardFooter><Button variant="destructive" onClick={() => onDelete(details._id)}><Trash2 className="mr-2 h-4 w-4" /> Delete Event</Button></CardFooter>
            </Card>
            <RelationshipManager item={details} itemType="event" refetch={loadDetails} />
          </div>
        ) : (
          <div className="text-center text-muted-foreground py-10">Click to load details. If this message persists, the fetch may have failed.</div>
        )}
      </AccordionContent>
    </AccordionItem>
  )
}

export const ListHeader = ({ sorting, setSorting, columnFilters, setColumnFilters }) => {
    const mockTable = {
        getColumn: (id) => ({
            getCanSort: () => true,
            getCanFilter: () => ['country', 'eventClassification', 'synthesized_headline'].includes(id),
            getIsSorted: () => sorting.find(s => s.id === id)?.desc ? 'desc' : (sorting.find(s => s.id === id) ? 'asc' : false),
            toggleSorting: (desc) => setSorting([{ id, desc }]),
            getFilterValue: () => columnFilters.find(f => f.id === id)?.value,
            setFilterValue: (value) => {
                const newFilters = columnFilters.filter(f => f.id !== id);
                if(value) newFilters.push({ id, value });
                setColumnFilters(newFilters);
            }
        })
    };

    return (
        <div className="flex items-center p-2 border-b font-medium text-muted-foreground text-sm sticky top-0 bg-background z-10">
            <div className="w-[180px] flex-shrink-0">
                <DataTableColumnHeader column={mockTable.getColumn('createdAt')} title="Discovered" />
            </div>
            <div className="w-[140px] flex-shrink-0">
                <DataTableColumnHeader column={mockTable.getColumn('country')} title="Country" />
            </div>
            <div className="w-[180px] flex-shrink-0">
                <DataTableColumnHeader column={mockTable.getColumn('eventClassification')} title="Classification" />
            </div>
            <div className="w-[80px] flex-shrink-0 text-center">
                <DataTableColumnHeader column={mockTable.getColumn('highest_relevance_score')} title="Score" />
            </div>
            <div className="flex-grow min-w-0">
                 <DataTableColumnHeader column={mockTable.getColumn('synthesized_headline')} title="Headline" />
            </div>
        </div>
    );
}

```

## 📄 src/app/events/columns.jsx.bak
*Lines: 178, Size: 7.33 KB*

```
// apps/admin/src/app/events/columns.jsx (version 3.3.1 - Final Lazy-Loading)
'use client'

import React, { useState, useCallback } from 'react'
import {
  EditableCell,
  Button,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  DataTableColumnHeader,
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
  Label,
  Textarea,
} from '@headlines/ui'
import { Trash2, Loader2 } from 'lucide-react'
import { format } from 'date-fns'
import { RelationshipManager } from '../_components/relationships/RelationshipManager'
import { toast } from 'sonner'

const eventCategories = [
  'New Wealth',
  'Future Wealth',
  'Wealth Mentioned',
  'Legal/Dispute',
  'Background',
  'Other',
]

const FormField = ({ id, label, children }) => (
  <div className="space-y-2">
    <Label htmlFor={id} className="text-sm font-medium text-muted-foreground pl-1">
      {label}
    </Label>
    {children}
  </div>
)

export const EventListItem = ({ event, onUpdate, onDelete }) => {
  const [details, setDetails] = useState(null)
  const [isLoadingDetails, setIsLoadingDetails] = useState(false)

  const loadDetails = useCallback(async () => {
    setIsLoadingDetails(true)
    try {
      const res = await fetch(`/api/events/${event._id}`)
      const data = await res.json()
      if (!res.ok) throw new Error(data.error || 'Failed to fetch details')
      setDetails(data)
    } catch (err) {
      toast.error('Failed to load event details', { description: err.message })
    } finally {
      setIsLoadingDetails(false)
    }
  }, [event._id])

  const handleTriggerClick = (isOpen) => {
    // Only fetch details if the accordion is opening and they haven't been fetched yet.
    if (isOpen && !details && !isLoadingDetails) {
      loadDetails()
    }
  }

  return (
    <AccordionItem onValueChange={(value) => handleTriggerClick(!!value)} value={event._id} className="border-b border-white/10 group">
      <AccordionTrigger
        className="w-full text-left hover:bg-white/5 px-2 hover:no-underline"
      >
        <div className="flex items-center w-full text-sm">
          <div className="w-[180px] flex-shrink-0 text-muted-foreground group-hover:text-foreground">
            {format(new Date(event.createdAt), 'dd MMM yyyy, HH:mm')}
          </div>
          <div className="w-[140px] flex-shrink-0">{event.country}</div>
          <div className="w-[180px] flex-shrink-0">{event.eventClassification || 'N/A'}</div>
          <div className="w-[80px] text-center flex-shrink-0">{event.highest_relevance_score}</div>
          <div className="flex-grow min-w-0 pr-4 whitespace-normal font-medium">{event.synthesized_headline}</div>
        </div>
      </AccordionTrigger>
      <AccordionContent className="p-4 bg-black/20">
        {isLoadingDetails ? (
          <div className="flex items-center justify-center h-64">
            <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
          </div>
        ) : details ? (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>Event Details</CardTitle>
                  <CardDescription>View and edit the core synthesized data for this event.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <FormField label="Synthesized Headline">
                    <EditableCell useTextarea={true} initialValue={details.synthesized_headline} onSave={(newValue) => onUpdate(details, { synthesized_headline: newValue })} />
                  </FormField>
                  <FormField label="Country">
                    <EditableCell initialValue={details.country} onSave={(newValue) => onUpdate(details, { country: newValue })} />
                  </FormField>
                  <FormField label="Classification">
                    <Select value={details.eventClassification} onValueChange={(newValue) => onUpdate(details, { eventClassification: newValue })}>
                      <SelectTrigger><SelectValue placeholder="Select classification..."/></SelectTrigger>
                      <SelectContent>{eventCategories.map(cat => <SelectItem key={cat} value={cat}>{cat}</SelectItem>)}</SelectContent>
                    </Select>
                  </FormField>
                  <FormField label="Relevance Score">
                    <EditableCell type="number" initialValue={details.highest_relevance_score} onSave={(newValue) => onUpdate(details, { highest_relevance_score: newValue })} />
                  </FormField>
                  <FormField label="Synthesized Summary">
                    <Textarea readOnly value={details.synthesized_summary} className="bg-secondary/50 h-32" />
                  </FormField>
                </CardContent>
                <CardFooter>
                  <Button variant="destructive" onClick={() => onDelete(details._id)}>
                    <Trash2 className="mr-2 h-4 w-4" /> Delete Event
                  </Button>
                </CardFooter>
              </Card>
            </div>
            <RelationshipManager item={details} itemType="event" refetch={loadDetails} />
          </div>
        ) : (
          <div className="text-center text-muted-foreground py-10">
            Click to load details. If this message persists, the fetch may have failed.
          </div>
        )}
      </AccordionContent>
    </AccordionItem>
  )
}

// ListHeader remains unchanged
export const ListHeader = ({ sorting, setSorting, columnFilters, setColumnFilters }) => {
    const mockTable = {
        getColumn: (id) => ({
            getCanSort: () => true,
            getCanFilter: () => ['country', 'eventClassification', 'synthesized_headline'].includes(id),
            getIsSorted: () => sorting.find(s => s.id === id)?.desc ? 'desc' : (sorting.find(s => s.id === id) ? 'asc' : false),
            toggleSorting: (desc) => setSorting([{ id, desc }]),
            getFilterValue: () => columnFilters.find(f => f.id === id)?.value,
            setFilterValue: (value) => {
                const newFilters = columnFilters.filter(f => f.id !== id);
                if(value) newFilters.push({ id, value });
                setColumnFilters(newFilters);
            }
        })
    };

    return (
        <div className="flex items-center p-2 border-b font-medium text-muted-foreground text-sm sticky top-0 bg-background z-10">
            <div className="w-[180px] flex-shrink-0">
                <DataTableColumnHeader column={mockTable.getColumn('createdAt')} title="Discovered" />
            </div>
            <div className="w-[140px] flex-shrink-0">
                <DataTableColumnHeader column={mockTable.getColumn('country')} title="Country" />
            </div>
            <div className="w-[180px] flex-shrink-0">
                <DataTableColumnHeader column={mockTable.getColumn('eventClassification')} title="Classification" />
            </div>
            <div className="w-[80px] flex-shrink-0 text-center">
                <DataTableColumnHeader column={mockTable.getColumn('highest_relevance_score')} title="Score" />
            </div>
            <div className="flex-grow min-w-0">
                 <DataTableColumnHeader column={mockTable.getColumn('synthesized_headline')} title="Headline" />
            </div>
        </div>
    );
}

```

## 📄 src/app/events/page.jsx
*Lines: 102, Size: 4.15 KB*

```jsx
// apps/admin/src/app/events/page.jsx (version 2.2.0 - State Management Fix)
'use client'

import {
  PageHeader, Accordion, LoadingOverlay, Button, ExportButton,
} from '@headlines/ui'
import { EventListItem, ListHeader } from './columns'
import { useAdminManager } from '@/hooks/use-admin-manager'
import {
  deleteAdminEvent, updateAdminEvent, exportEventsToCSV, exportEventsToXLSX,
} from '@headlines/data-access'
import { toast } from 'sonner'
import { useCallback, useState } from 'react'

export default function EventsPage() {
  const [sorting, setSorting] = useState([{ id: 'createdAt', desc: true }])
  const [columnFilters, setColumnFilters] = useState([])
  const [page, setPage] = useState(1)
  const [expandedItemId, setExpandedItemId] = useState(null); // State for expanded item

  const { data, setData, total, isLoading, refetch } = useAdminManager(
    '/api/events', page, sorting, columnFilters
  )

  const handleOptimisticUpdate = useCallback(
    async (event, updateData) => {
      setData((currentData) =>
        currentData.map((e) => (e._id === event._id ? { ...e, ...updateData } : e))
      )
      if (Object.keys(updateData).length === 0) {
        // This is a refetch call from RelationshipManager
        setExpandedItemId(null); // Close and reopen to trigger refetch
        setTimeout(() => setExpandedItemId(event._id), 50);
        return;
      }
      const result = await updateAdminEvent(event._id, updateData)
      if (!result.success) {
        toast.error(`Update failed: ${result.error}`)
        refetch()
      }
    }, [setData, refetch]
  )

  const handleDelete = useCallback(
    async (eventId) => {
      setData((currentData) => currentData.filter((e) => e._id !== eventId))
      toast.success('Event and its relations deleted.')
      const result = await deleteAdminEvent(eventId)
      if (!result.success) {
        toast.error(`Deletion failed on server: ${result.error}. Reverting.`)
        refetch()
      }
    }, [setData, refetch]
  )
  
  const description = `Review, audit, and manage all ${data.length.toLocaleString()} visible events (${total.toLocaleString()} total).`
  const totalPages = Math.ceil(total / 50) || 1
  
  const currentFilters = columnFilters.reduce((acc, filter) => {
    acc[filter.id === 'synthesized_headline' ? 'q' : filter.id] = filter.value;
    return acc;
  }, {});
  const sortParam = sorting[0] ? `${sorting[0].id}_${sorting[0].desc ? 'desc' : 'asc'}` : 'createdAt_desc';

  const exportActions = {
    csv: () => exportEventsToCSV({ filters: currentFilters, sort: sortParam }),
    xlsx: () => exportEventsToXLSX({ filters: currentFilters, sort: sortParam }),
  }

  return (
    <div className="flex flex-col h-full">
      <PageHeader title="Event Management" description={description}>
        <ExportButton hasData={data && data.length > 0} filename="events_export" exportActions={exportActions} />
      </PageHeader>
      <div className="mt-8 flex-grow min-h-0 flex flex-col">
        <div className="flex items-center py-4 justify-end">
            <div className="flex items-center gap-2">
                <Button onClick={() => setPage((p) => Math.max(1, p - 1))} variant="outline" disabled={page <= 1}>Previous</Button>
                <span className="text-sm text-muted-foreground">Page {page} of {totalPages}</span>
                <Button onClick={() => setPage((p) => p + 1)} variant="outline" disabled={page >= totalPages}>Next</Button>
            </div>
        </div>
        <div className="relative rounded-md border flex-grow overflow-y-auto">
          <LoadingOverlay isLoading={isLoading && !data?.length} />
          <ListHeader sorting={sorting} setSorting={setSorting} columnFilters={columnFilters} setColumnFilters={setColumnFilters} />
          <Accordion type="single" collapsible value={expandedItemId} onValueChange={setExpandedItemId}>
            {data.map((event) => (
              <EventListItem
                key={event._id}
                event={event}
                onUpdate={handleOptimisticUpdate}
                onDelete={handleDelete}
                isExpanded={expandedItemId === event._id}
              />
            ))}
          </Accordion>
        </div>
      </div>
    </div>
  )
}

```

## 📄 src/app/events/page.jsx.bak
*Lines: 133, Size: 4.08 KB*

```
// apps/admin/src/app/events/page.jsx (version 2.1.0 - Simplified)
'use client'

import {
  PageHeader,
  Accordion,
  LoadingOverlay,
  Button,
  ExportButton,
} from '@headlines/ui'
import { EventListItem, ListHeader } from './columns'
import { useAdminManager } from '@/hooks/use-admin-manager'
import {
  deleteAdminEvent,
  updateAdminEvent,
  exportEventsToCSV,
  exportEventsToXLSX,
} from '@headlines/data-access'
import { toast } from 'sonner'
import { useCallback, useState } from 'react'

export default function EventsPage() {
  const [sorting, setSorting] = useState([{ id: 'createdAt', desc: true }])
  const [columnFilters, setColumnFilters] = useState([])
  const [page, setPage] = useState(1)

  const { data, setData, total, isLoading, refetch } = useAdminManager(
    '/api/events',
    page,
    sorting,
    columnFilters
  )

  const handleOptimisticUpdate = useCallback(
    async (event, updateData) => {
      setData((currentData) =>
        currentData.map((e) => (e._id === event._id ? { ...e, ...updateData } : e))
      )
      if (Object.keys(updateData).length === 0) {
        refetch();
        return;
      }
      const result = await updateAdminEvent(event._id, updateData)
      if (!result.success) {
        toast.error(`Update failed: ${result.error}`)
        refetch()
      }
    },
    [setData, refetch]
  )

  const handleDelete = useCallback(
    async (eventId) => {
      setData((currentData) => currentData.filter((e) => e._id !== eventId))
      toast.success('Event and its relations deleted.')
      const result = await deleteAdminEvent(eventId)
      if (!result.success) {
        toast.error(`Deletion failed on server: ${result.error}. Reverting.`)
        refetch()
      }
    },
    [setData, refetch]
  )
  
  const description = `Review, audit, and manage all ${data.length.toLocaleString()} visible events (${total.toLocaleString()} total).`
  const totalPages = Math.ceil(total / 50) || 1

  const currentFilters = columnFilters.reduce((acc, filter) => {
    acc[filter.id === 'synthesized_headline' ? 'q' : filter.id] = filter.value;
    return acc;
  }, {});
  const sortParam = sorting[0] ? `${sorting[0].id}_${sorting[0].desc ? 'desc' : 'asc'}` : 'createdAt_desc';

  const exportActions = {
    csv: () => exportEventsToCSV({ filters: currentFilters, sort: sortParam }),
    xlsx: () => exportEventsToXLSX({ filters: currentFilters, sort: sortParam }),
  }

  return (
    <div className="flex flex-col h-full">
      <PageHeader title="Event Management" description={description}>
        <ExportButton
          hasData={data && data.length > 0}
          filename="events_export"
          exportActions={exportActions}
        />
      </PageHeader>
      <div className="mt-8 flex-grow min-h-0 flex flex-col">
        <div className="flex items-center py-4 justify-end">
          <div className="flex items-center gap-2">
            <Button
              onClick={() => setPage((p) => Math.max(1, p - 1))}
              variant="outline"
              disabled={page <= 1}
            >
              Previous
            </Button>
            <span className="text-sm text-muted-foreground">
              Page {page} of {totalPages}
            </span>
            <Button
              onClick={() => setPage((p) => p + 1)}
              variant="outline"
              disabled={page >= totalPages}
            >
              Next
            </Button>
          </div>
        </div>
        <div className="relative rounded-md border flex-grow overflow-y-auto">
          <LoadingOverlay isLoading={isLoading && !data?.length} />
          <ListHeader 
            sorting={sorting} 
            setSorting={setSorting} 
            columnFilters={columnFilters}
            setColumnFilters={setColumnFilters}
          />
          <Accordion type="single" collapsible>
            {data.map((event) => (
              <EventListItem
                key={event._id}
                event={event}
                onUpdate={handleOptimisticUpdate}
                onDelete={handleDelete}
              />
            ))}
          </Accordion>
        </div>
      </div>
    </div>
  )
}

```

## 📄 src/app/globals.css
*Lines: 69, Size: 1.61 KB*

```css
/* apps/admin/src/app/globals.css (version 1.3.3) */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
:root {
--background: 0 0% 100%;
--foreground: 222.2 84% 4.9%;
--card: 0 0% 100%;
--card-foreground: 222.2 84% 4.9%;
--popover: 0 0% 100%;
--popover-foreground: 222.2 84% 4.9%;
--primary: 222.2 47.4% 11.2%;
--primary-foreground: 210 40% 98%;
--secondary: 210 40% 96.1%;
--secondary-foreground: 222.2 47.4% 11.2%;
--muted: 210 40% 96.1%;
--muted-foreground: 215.4 16.3% 46.9%;
--accent: 210 40% 96.1%;
--accent-foreground: 222.2 47.4% 11.2%;
--destructive: 0 84.2% 60.2%;
--destructive-foreground: 210 40% 98%;
--border: 214.3 31.8% 91.4%;
--input: 214.3 31.8% 91.4%;
--ring: 222.2 84% 4.9%;
--radius: 0.5rem;
}

.dark {
--background: 222.2 84% 4.9%;
--foreground: 210 40% 98%;
--card: 222.2 84% 4.9%;
--card-foreground: 210 40% 98%;
--popover: 222.2 84% 4.9%;
--popover-foreground: 210 40% 98%;
--primary: 210 40% 98%;
--primary-foreground: 222.2 47.4% 11.2%;
--secondary: 217.2 32.6% 17.5%;
--secondary-foreground: 210 40% 98%;
--muted: 217.2 32.6% 17.5%;
--muted-foreground: 215 20.2% 65.1%;
--accent: 217.2 32.6% 17.5%;
--accent-foreground: 210 40% 98%;
--destructive: 0 62.8% 30.6%;
--destructive-foreground: 210 40% 98%;
--border: 217.2 32.6% 17.5%;
--input: 217.2 32.6% 17.5%;
--ring: 212.7 26.8% 83.9%;
}
}

@layer base {

    {
    border-color: hsl(var(--border));
    }
    body {
    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
    }
    }

@layer utilities {
.gemini-text {
@apply bg-gradient-to-r from-blue-400 via-purple-400 to-blue-400 bg-clip-text text-transparent;
}
}

```

## 📄 src/app/layout.js
*Lines: 57, Size: 1.65 KB*

```javascript
// apps/admin/src/app/layout.js (version 5.0.0 - With AuthProvider)
import { Inter } from 'next/font/google'
import './globals.css'
import { Toaster } from '@headlines/ui'
import { cn } from '@headlines/utils'
import MainNav from './_components/main-nav'
import { ThemeProvider } from './_components/theme-provider'
// DEFINITIVE FIX: Import the AuthProvider
import { AuthProvider } from '@headlines/auth/src/AuthProvider.js'

const fontSans = Inter({
  subsets: ['latin'],
  variable: '--font-sans',
  display: 'swap',
})

export const metadata = {
  title: 'Headlines Admin',
  description: 'Management Console for the Headlines Intelligence Pipeline.',
  icons: {
    icon: '/favicon.ico',
  },
}

export default function RootLayout({ children }) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={cn(
          'min-h-screen bg-background font-sans antialiased',
          fontSans.variable
        )}
      >
        {/* DEFINITIVE FIX: Wrap the entire body content with AuthProvider */}
        <AuthProvider appType="admin">
          <ThemeProvider
            attribute="class"
            defaultTheme="dark"
            enableSystem
            disableTransitionOnChange
          >
            <div className="flex h-screen w-full overflow-hidden">
              <MainNav />
              <main className="flex-1 flex flex-col overflow-y-auto">
                <div className="w-full mx-auto p-6 lg:p-8">
                  {children}
                </div>
              </main>
            </div>
            <Toaster theme="dark" position="bottom-right" />
          </ThemeProvider>
        </AuthProvider>
      </body>
    </html>
  )
}

```

## 📄 src/app/layout.js.bak
*Lines: 57, Size: 1.64 KB*

```
// apps/admin/src/app/layout.js (version 5.0.0 - With AuthProvider)
import { Inter } from 'next/font/google'
import './globals.css'
import { Toaster } from '@headlines/ui'
import { cn } from '@headlines/utils'
import MainNav from './_components/main-nav'
import { ThemeProvider } from './_components/theme-provider'
// DEFINITIVE FIX: Import the AuthProvider
import { AuthProvider } from '@headlines/auth/src/AuthProvider.js'

const fontSans = Inter({
  subsets: ['latin'],
  variable: '--font-sans',
  display: 'swap',
})

export const metadata = {
  title: 'Headlines Admin',
  description: 'Management Console for the Headlines Intelligence Pipeline.',
  icons: {
    icon: '/favicon.ico',
  },
}

export default function RootLayout({ children }) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={cn(
          'min-h-screen bg-background font-sans antialiased',
          fontSans.variable
        )}
      >
        {/* DEFINITIVE FIX: Wrap the entire body content with AuthProvider */}
        <AuthProvider>
          <ThemeProvider
            attribute="class"
            defaultTheme="dark"
            enableSystem
            disableTransitionOnChange
          >
            <div className="flex h-screen w-full overflow-hidden">
              <MainNav />
              <main className="flex-1 flex flex-col overflow-y-auto">
                <div className="w-full mx-auto p-6 lg:p-8">
                  {children}
                </div>
              </main>
            </div>
            <Toaster theme="dark" position="bottom-right" />
          </ThemeProvider>
        </AuthProvider>
      </body>
    </html>
  )
}

```

## 📄 src/app/opportunities/columns.jsx
*Lines: 210, Size: 5.68 KB*

```jsx
// apps/admin/src/app/opportunities/columns.jsx (version 2.5.0 - Responsive Layout)
'use client'

import React from 'react'
import { Button, EditableCell } from '@headlines/ui'
import { ArrowUpDown, Trash2, Edit } from 'lucide-react'
import { format } from 'date-fns'
import { toast } from 'sonner'

// Compact Cell Wrapper
const CompactCell = ({ children, allowWrap = false }) => (
  <div className={`text-xs p-1 ${allowWrap ? 'whitespace-normal' : ''}`}>{children}</div>
)
const CompactHeader = ({ column, title }) => (
  <Button
    variant="ghost"
    className="h-8 -ml-4"
    onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
  >
    <span className="text-xs">{title}</span>
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

export const columns = (onUpdate, onDelete, onEdit) => [
  {
    accessorKey: '_id',
    header: 'ID',
    cell: ({ row }) => (
      <CompactCell>
        <Button
          variant="ghost"
          size="sm"
          className="h-auto p-0 font-mono text-[11px] w-full justify-start max-w-[90px]"
          onClick={() => {
            navigator.clipboard.writeText(row.original._id)
            toast.success('ID Copied!')
          }}
        >
          <span className="truncate">{row.original._id}</span>
        </Button>
      </CompactCell>
    ),
    size: 90,
    minSize: 90,
    maxSize: 90,
    meta: { className: 'w-[90px]' },
  },
  {
    accessorKey: 'basedIn',
    header: ({ column }) => <CompactHeader column={column} title="Country" />,
    cell: ({ row }) => (
      <CompactCell>
        <div className="max-w-[85px]">
          <EditableCell
            initialValue={row.original.basedIn}
            placeholder="Add..."
            onSave={(newValue) => onUpdate(row.original, { basedIn: newValue })}
          />
        </div>
      </CompactCell>
    ),
    size: 85,
    minSize: 85,
    maxSize: 85,
    meta: { className: 'w-[85px]' },
  },
  {
    accessorKey: 'city',
    header: ({ column }) => <CompactHeader column={column} title="City" />,
    cell: ({ row }) => (
      <CompactCell>
        <div className="max-w-[75px]">
          <EditableCell
            initialValue={row.original.city}
            placeholder="Add..."
            onSave={(newValue) => onUpdate(row.original, { city: newValue })}
          />
        </div>
      </CompactCell>
    ),
    size: 75,
    minSize: 75,
    maxSize: 75,
    meta: { className: 'w-[75px]' },
  },
  {
    accessorKey: 'reachOutTo',
    header: ({ column }) => <CompactHeader column={column} title="Contact" />,
    cell: ({ row }) => (
      <CompactCell>
        <div className="max-w-[110px]">
          <EditableCell
            initialValue={row.original.reachOutTo}
            onSave={(newValue) => onUpdate(row.original, { reachOutTo: newValue })}
          />
        </div>
      </CompactCell>
    ),
    size: 110,
    minSize: 110,
    maxSize: 110,
    meta: { className: 'w-[110px]' },
  },
  {
    accessorKey: 'likelyMMDollarWealth',
    header: ({ column }) => <CompactHeader column={column} title="Wealth ($M)" />,
    cell: ({ row }) => (
      <CompactCell>
        <div className="max-w-[80px]">
          <EditableCell
            initialValue={row.original.likelyMMDollarWealth}
            placeholder="Add..."
            onSave={(newValue) =>
              onUpdate(row.original, { likelyMMDollarWealth: newValue })
            }
            type="number"
          />
        </div>
      </CompactCell>
    ),
    size: 80,
    minSize: 80,
    maxSize: 80,
    meta: { className: 'w-[80px]' },
  },
  {
    accessorKey: 'contactDetails.email',
    header: ({ column }) => <CompactHeader column={column} title="Email" />,
    cell: ({ row }) => (
      <CompactCell>
        <div className="max-w-[160px]">
          <EditableCell
            initialValue={row.original.contactDetails?.email}
            placeholder="Add..."
            onSave={(newValue) =>
              onUpdate(row.original, { 'contactDetails.email': newValue })
            }
          />
        </div>
      </CompactCell>
    ),
    size: 160,
    minSize: 160,
    maxSize: 160,
    meta: { className: 'w-[160px]' },
  },
  {
    accessorKey: 'whyContact',
    header: 'Reason',
    cell: ({ row }) => (
      <CompactCell allowWrap={true}>
        <EditableCell
          initialValue={row.original.whyContact}
          onSave={(newValue) => onUpdate(row.original, { whyContact: newValue })}
          placeholder="Add reason..."
          useTextarea={true}
          allowWrap={true}
        />
      </CompactCell>
    ),
    // This column will flex to fill remaining space
    minSize: 120,
    meta: { className: 'flex-1 min-w-[120px]' },
  },
  {
    accessorKey: 'createdAt',
    header: ({ column }) => <CompactHeader column={column} title="Created" />,
    cell: ({ row }) => (
      <CompactCell>
        <div className="max-w-[70px]">
          {format(new Date(row.original.createdAt), 'dd MMM yy')}
        </div>
      </CompactCell>
    ),
    size: 70,
    minSize: 70,
    maxSize: 70,
    meta: { className: 'w-[70px]' },
  },
  {
    id: 'actions',
    cell: ({ row }) => (
      <div className="flex items-center justify-end opacity-50 group-hover:opacity-100 max-w-[60px]">
        <Button
          variant="ghost"
          size="icon"
          className="h-6 w-6"
          onClick={() => onEdit(row.original._id)}
        >
          <Edit className="h-3 w-3" />
        </Button>
        <Button
          variant="ghost"
          size="icon"
          className="h-6 w-6"
          onClick={() => onDelete(row.original)}
        >
          <Trash2 className="h-3 w-3" />
        </Button>
      </div>
    ),
    size: 60,
    minSize: 60,
    maxSize: 60,
    enableResizing: false,
    meta: { className: 'w-[60px]' },
  },
]

```

## 📄 src/app/opportunities/columns.jsx.bak
*Lines: 101, Size: 4.54 KB*

```
// apps/admin/src/app/opportunities/columns.jsx (version 2.4.0 - Final Layout)
'use client'

import React from 'react';
import { Button, EditableCell } from '@headlines/ui';
import { ArrowUpDown, Trash2, Edit } from 'lucide-react';
import { format } from 'date-fns';
import { toast } from 'sonner';

// Compact Cell Wrapper
const CompactCell = ({ children, allowWrap = false }) => <div className={`text-xs p-1 ${allowWrap ? 'whitespace-normal' : ''}`}>{children}</div>;
const CompactHeader = ({ column, title }) => (
    <Button variant="ghost" className="h-8 -ml-4" onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}>
        <span className="text-xs">{title}</span>
        <ArrowUpDown className="ml-2 h-3 w-3" />
    </Button>
);


export const columns = (onUpdate, onDelete, onEdit) => [
    {
        accessorKey: '_id',
        header: 'ID',
        cell: ({ row }) => (
             <CompactCell>
                <Button variant="ghost" size="sm" className="h-auto p-0 font-mono text-[11px] w-full justify-start" onClick={() => { navigator.clipboard.writeText(row.original._id); toast.success('ID Copied!'); }}>
                    <span className="truncate">{row.original._id}</span>
                </Button>
            </CompactCell>
        ),
        size: 110, 
    },
    {
        accessorKey: 'basedIn',
        header: ({ column }) => <CompactHeader column={column} title="Country" />,
        cell: ({ row }) => <CompactCell><EditableCell initialValue={row.original.basedIn} placeholder="Add..." onSave={(newValue) => onUpdate(row.original, { basedIn: newValue })} /></CompactCell>,
        size: 120, // Reduced
    },
    {
        accessorKey: 'city',
        header: ({ column }) => <CompactHeader column={column} title="City" />,
        cell: ({ row }) => <CompactCell><EditableCell initialValue={row.original.city} placeholder="Add..." onSave={(newValue) => onUpdate(row.original, { city: newValue })} /></CompactCell>,
        size: 110, // Reduced
    },
    {
        accessorKey: 'reachOutTo',
        header: ({ column }) => <CompactHeader column={column} title="Contact" />,
        cell: ({ row }) => <CompactCell><EditableCell initialValue={row.original.reachOutTo} onSave={(newValue) => onUpdate(row.original, { reachOutTo: newValue })} /></CompactCell>,
        size: 160, // Reduced
    },
    {
        accessorKey: 'likelyMMDollarWealth',
        header: ({ column }) => <CompactHeader column={column} title="Wealth ($M)" />,
        cell: ({ row }) => <CompactCell><EditableCell initialValue={row.original.likelyMMDollarWealth} placeholder="Add..." onSave={(newValue) => onUpdate(row.original, { likelyMMDollarWealth: newValue })} type="number" /></CompactCell>,
        size: 100,
    },
    {
        accessorKey: 'contactDetails.email',
        header: ({ column }) => <CompactHeader column={column} title="Email" />,
        cell: ({ row }) => <CompactCell><EditableCell initialValue={row.original.contactDetails?.email} placeholder="Add..." onSave={(newValue) => onUpdate(row.original, { 'contactDetails.email': newValue })} /></CompactCell>,
        size: 200, // Given a fixed size
    },
    {
        // Re-introduce the Reason column as the flexible, wrapping column
        accessorKey: 'whyContact',
        header: 'Reason',
        cell: ({ row }) => (
            <CompactCell allowWrap={true}>
                <EditableCell 
                    initialValue={row.original.whyContact}
                    onSave={(newValue) => onUpdate(row.original, { whyContact: newValue })}
                    placeholder="Add reason..."
                    useTextarea={true}
                    allowWrap={true}
                />
            </CompactCell>
        ),
        // No size property, it will take remaining space
    },
    {
        accessorKey: 'createdAt',
        header: ({ column }) => <CompactHeader column={column} title="Created" />,
        cell: ({ row }) => <CompactCell>{format(new Date(row.original.createdAt), 'dd MMM yy')}</CompactCell>,
        size: 90,
    },
    {
        id: 'actions',
        cell: ({ row }) => (
            <div className="flex items-center justify-end opacity-50 group-hover:opacity-100">
                 <Button variant="ghost" size="icon" className="h-6 w-6" onClick={() => onEdit(row.original._id)}>
                    <Edit className="h-3 w-3" />
                </Button>
                <Button variant="ghost" size="icon" className="h-6 w-6" onClick={() => onDelete(row.original)}>
                    <Trash2 className="h-3 w-3" />
                </Button>
            </div>
        ),
        size: 80,
    }
];

```

## 📄 src/app/opportunities/page.jsx
*Lines: 150, Size: 4.85 KB*

```jsx
// apps/admin/src/app/opportunities/page.jsx (version 3.1.0 - Responsive Table Fix)
'use client'

import { useMemo, useState, useCallback } from 'react'
import { PageHeader, DataTable, ExportButton, ConfirmationDialog } from '@headlines/ui'
import { columns } from './columns'
import { useAdminManager } from '@/hooks/use-admin-manager'
import {
  deleteAdminOpportunity,
  updateAdminOpportunity,
  exportOpportunitiesToCSV,
  exportOpportunitiesToXLSX,
} from '@headlines/data-access'
import { toast } from 'sonner'

export default function OpportunitiesPage() {
  const [sorting, setSorting] = useState([{ id: 'createdAt', desc: true }])
  const [columnFilters, setColumnFilters] = useState([])
  const [page, setPage] = useState(1)

  const { data, setData, total, isLoading, refetch } = useAdminManager(
    '/api/opportunities',
    page,
    sorting,
    columnFilters
  )

  const [confirmState, setConfirmState] = useState({
    isOpen: false,
    oppId: null,
    oppName: '',
  })

  const availableCountries = useMemo(() => {
    if (!data) return []
    const countrySet = new Set(data.map((item) => item.basedIn).filter(Boolean))
    return Array.from(countrySet).sort()
  }, [data])

  const handleUpdate = useCallback(
    async (opp, updateData) => {
      setData((currentData) =>
        currentData.map((o) => (o._id === opp._id ? { ...o, ...updateData } : o))
      )
      const result = await updateAdminOpportunity(opp._id, updateData)
      if (!result.success) {
        toast.error(`Update failed: ${result.error}`)
        refetch()
      } else {
        toast.success(`Updated opportunity for ${opp.reachOutTo}`)
      }
    },
    [setData, refetch]
  )

  const handleDeleteRequest = useCallback((opp) => {
    setConfirmState({ isOpen: true, oppId: opp._id, oppName: opp.reachOutTo })
  }, [])

  const confirmDelete = useCallback(async () => {
    if (!confirmState.oppId) return

    const { oppId, oppName } = confirmState
    setConfirmState({ isOpen: false, oppId: null, oppName: '' })

    setData((currentData) => currentData.filter((o) => o._id !== oppId))
    toast.success(`Opportunity for "${oppName}" deleted.`)

    const result = await deleteAdminOpportunity(oppId)
    if (!result.success) {
      toast.error(`Deletion failed on server: ${result.error}. Reverting.`)
      refetch()
    }
  }, [confirmState, setData, refetch])

  const handleEdit = useCallback((oppId) => {
    toast.info('Full editor for this view is coming soon.')
    // In the future, this would open a Sheet or Modal:
    // setSelectedId(oppId);
    // setIsEditorOpen(true);
  }, [])

  const tableColumns = useMemo(
    () => columns(handleUpdate, handleDeleteRequest, handleEdit),
    [handleUpdate, handleDeleteRequest, handleEdit]
  )

  const description = `Review and manage all ${data.length.toLocaleString()} visible opportunities (${total.toLocaleString()} total).`

  const currentFilters = columnFilters.reduce((acc, filter) => {
    acc[filter.id === 'reachOutTo' ? 'q' : filter.id] = filter.value
    return acc
  }, {})
  const sortParam = sorting[0]
    ? `${sorting[0].id}_${sorting[0].desc ? 'desc' : 'asc'}`
    : 'createdAt_desc'

  const exportActions = {
    csv: () => exportOpportunitiesToCSV({ filters: currentFilters, sort: sortParam }),
    xlsx: () => exportOpportunitiesToXLSX({ filters: currentFilters, sort: sortParam }),
  }

  return (
    <>
      <div className="flex flex-col h-full">
        <PageHeader title="Opportunity Management" description={description}>
          <ExportButton
            hasData={data && data.length > 0}
            filename="opportunities_export"
            exportActions={exportActions}
          />
        </PageHeader>
        <div className="mt-8 flex-grow min-h-0">
          <div className="w-full overflow-auto">
            <div className="min-w-[740px]">
              <DataTable
                columns={tableColumns}
                data={data}
                isLoading={isLoading}
                page={page}
                setPage={setPage}
                total={total}
                sorting={sorting}
                setSorting={setSorting}
                columnFilters={columnFilters}
                setColumnFilters={setColumnFilters}
                enableColumnResizing={false}
                tableProps={{
                  style: {
                    tableLayout: 'fixed',
                    width: '100%',
                  },
                }}
              />
            </div>
          </div>
        </div>
      </div>
      <ConfirmationDialog
        open={confirmState.isOpen}
        onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })}
        onConfirm={confirmDelete}
        title="Confirm Deletion"
        description={`Are you sure you want to permanently delete the opportunity for "${confirmState.oppName}"? This action cannot be undone.`}
        confirmText="Delete Opportunity"
      />
    </>
  )
}

```

## 📄 src/app/opportunities/page.jsx.bak
*Lines: 115, Size: 4.13 KB*

```
// apps/admin/src/app/opportunities/page.jsx (version 2.0.0 - Corrected Data Handling)
'use client'

import { useMemo, useState, useCallback } from 'react'
import { PageHeader, DataTable, ExportButton, ConfirmationDialog } from '@headlines/ui'
import { columns } from './columns'
import { useEntityManager } from '@/hooks/use-entity-manager' // CORRECTED: Use the right hook
import {
  deleteAdminOpportunity,
  updateAdminOpportunity,
  exportOpportunitiesToCSV,
  exportOpportunitiesToXLSX,
} from '@headlines/data-access'
import { toast } from 'sonner'

export default function OpportunitiesPage() {
  // CORRECTED: Use EntityManager for client-side data management
  const {
    entities: data,
    isLoading,
    error,
    handleSave: handleOptimisticUpdate,
    handleRemove: handleOptimisticRemove,
    refetch,
  } = useEntityManager('/api/opportunities', 'Opportunity', 'createdAt')
  
  const [confirmState, setConfirmState] = useState({ isOpen: false, oppId: null, oppName: '' });

  const availableCountries = useMemo(() => {
    if (!data) return []
    const countrySet = new Set(data.map((item) => item.basedIn).filter(Boolean))
    return Array.from(countrySet).sort()
  }, [data])

  const handleUpdate = useCallback(
    async (opp, updateData) => {
      handleOptimisticUpdate(opp) // Optimistically update the UI
      const result = await updateAdminOpportunity(opp._id, updateData)
      if (!result.success) {
        toast.error(`Update failed: ${result.error}`)
        refetch() // Revert on failure
      } else {
        toast.success(`Updated ${Object.keys(updateData)[0]} for ${opp.reachOutTo}`)
      }
    },
    [handleOptimisticUpdate, refetch]
  )

  // CORRECTED: This now triggers the confirmation dialog
  const handleDelete = useCallback((oppId, oppName) => {
    setConfirmState({ isOpen: true, oppId, oppName });
  }, []);

  // CORRECTED: This is the function that runs after confirmation
  const confirmDelete = useCallback(async () => {
    if (!confirmState.oppId) return;

    const { oppId, oppName } = confirmState;
    setConfirmState({ isOpen: false, oppId: null, oppName: '' }); // Close dialog

    handleOptimisticRemove(oppId); // Optimistically remove from UI
    toast.success(`Opportunity for "${oppName}" deleted.`);
    
    const result = await deleteAdminOpportunity(oppId);
    if (!result.success) {
      toast.error(`Deletion failed on server: ${result.error}. Reverting.`);
      refetch(); // Revert on failure
    }
  }, [confirmState, handleOptimisticRemove, refetch]);

  // Pass a lambda to columns that captures the full object for the confirmation dialog
  const tableColumns = useMemo(() => columns(handleUpdate, (opp) => handleDelete(opp._id, opp.reachOutTo)), [handleUpdate, handleDelete]);

  const total = data?.length || 0;
  const description = `Review and manage all ${total.toLocaleString()} opportunities.`;

  const exportActions = {
    csv: () => exportOpportunitiesToCSV({}), // Simplified for client-side filtering
    xlsx: () => exportOpportunitiesToXLSX({}),
  }

  return (
    <>
      <div className="flex flex-col h-full">
        <PageHeader title="Opportunity Management" description={description}>
          <ExportButton
            hasData={data && data.length > 0}
            filename="opportunities_export"
            exportActions={exportActions}
          />
        </PageHeader>
        <div className="mt-8 flex-grow min-h-0 max-w-none">
          <DataTable
            columns={tableColumns}
            data={data || []}
            isLoading={isLoading}
            filterColumn="reachOutTo"
            filterPlaceholder="Filter by name, country, city..."
            secondaryFilterColumn="basedIn"
            secondaryFilterOptions={availableCountries}
          />
        </div>
      </div>
      <ConfirmationDialog
        open={confirmState.isOpen}
        onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })}
        onConfirm={confirmDelete}
        title="Confirm Deletion"
        description={`Are you sure you want to permanently delete the opportunity for "${confirmState.oppName}"? This action cannot be undone.`}
        confirmText="Delete Opportunity"
      />
    </>
  )
}

```

## 📄 src/app/page.js
*Lines: 7, Size: 135 Bytes*

```javascript
// src/app/page.js (version 4.1)
import SourcesPage from './sources/page'

export default function Home() {
  return <SourcesPage />
}

```

## 📄 src/app/runs/[runId]/page.js
*Lines: 260, Size: 8.42 KB*

```javascript
// apps/admin/src/app/runs/[runId]/page.js (version 1.0)
'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { motion } from 'framer-motion'
import {
  Loader2,
  ServerCrash,
  CheckCircle2,
  AlertTriangle,
  BotMessageSquare,
  Newspaper,
  Users,
  Rss,
  ArrowLeft,
  Database,
  Globe,
  BookOpen,
} from 'lucide-react'
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from '@headlines/ui'
import { Badge } from '@headlines/ui'
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@headlines/ui'
import { Button } from '@headlines/ui'

const StatCard = ({ title, value, icon }) => (
  <Card className="bg-black/20 border-white/10">
    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
      <CardTitle className="text-sm font-medium text-muted-foreground">{title}</CardTitle>
      {icon}
    </CardHeader>
    <CardContent>
      <div className="text-2xl font-bold">{value}</div>
    </CardContent>
  </Card>
)

const EnrichmentSourceIcons = ({ sources = [] }) => {
  const iconMap = {
    rag_db: { icon: Database, tooltip: 'RAG / Historical DB' },
    wikipedia: { icon: Globe, tooltip: 'Wikipedia' },
    news_api: { icon: BookOpen, tooltip: 'NewsAPI' },
  }
  return (
    <div className="flex items-center gap-2">
      <TooltipProvider>
        {sources.map((sourceKey) => {
          const IconComponent = iconMap[sourceKey]?.icon
          if (!IconComponent) return null
          return (
            <Tooltip key={sourceKey}>
              <TooltipTrigger>
                <IconComponent className="h-4 w-4 text-muted-foreground" />
              </TooltipTrigger>
              <TooltipContent>
                <p>Enriched with {iconMap[sourceKey].tooltip}</p>
              </TooltipContent>
            </Tooltip>
          )
        })}
      </TooltipProvider>
    </div>
  )
}

const VerdictCard = ({ items, title }) => (
  <Card className="bg-black/20 border-white/10">
    <CardHeader>
      <CardTitle>{title}</CardTitle>
    </CardHeader>
    <CardContent className="space-y-3">
      {items && items.length > 0 ? (
        items.map((item, index) => {
          const quality = item.quality?.toLowerCase() || 'n/a'
          let colorClass = 'bg-gray-500/20 text-gray-400'
          if (quality === 'excellent' || quality === 'good')
            colorClass = 'bg-green-500/20 text-green-400'
          if (quality === 'poor' || quality === 'irrelevant')
            colorClass = 'bg-red-500/20 text-red-400'

          return (
            <div
              key={index}
              className="text-sm p-3 rounded-md bg-background/50 border border-white/10"
            >
              <div className="flex justify-between items-start">
                <p className="font-semibold pr-4">{item.identifier}</p>
                <Badge className={`capitalize ${colorClass}`}>{item.quality}</Badge>
              </div>
              <p className="text-xs text-muted-foreground mt-1 italic">
                `{item.commentary}`
              </p>
              {item.enrichmentSources && (
                <div className="mt-2 pt-2 border-t border-white/10">
                  <EnrichmentSourceIcons sources={item.enrichmentSources} />
                </div>
              )}
            </div>
          )
        })
      ) : (
        <p className="text-sm text-muted-foreground">
          No {title.toLowerCase()} were judged in this run.
        </p>
      )}
    </CardContent>
  </Card>
)

export default function RunDetailsPage({ params }) {
  const { runId } = params
  const [verdict, setVerdict] = useState(null)
  const [summary, setSummary] = useState(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState(null)

  useEffect(() => {
    if (!runId) return
    setIsLoading(true)
    fetch(`/api/run-verdicts/${runId}`)
      .then((res) => {
        if (!res.ok) throw new Error(`API Error: ${res.status} ${res.statusText}`)
        return res.json()
      })
      .then((data) => {
        if (data.error) throw new Error(data.error)
        setVerdict(data.verdict)
        if (
          !data.verdict.judgeVerdict ||
          (!data.verdict.judgeVerdict.event_judgements &&
            !data.verdict.judgeVerdict.opportunity_judgements)
        ) {
          setSummary('No judge verdict was generated for this run.')
          return Promise.resolve(null)
        }
        return fetch('/api/ai/executive-summary', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ judgeVerdict: data.verdict.judgeVerdict }),
        })
      })
      .then((res) => (res ? res.json() : null))
      .then((data) => {
        if (data && data.summary) setSummary(data.summary)
        setIsLoading(false)
      })
      .catch((err) => {
        setError(err.message)
        setIsLoading(false)
      })
  }, [runId])

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <Loader2 className="w-12 h-12 animate-spin gemini-text" />
      </div>
    )
  }
  if (error) {
    return (
      <div className="flex h-full w-full items-center justify-center text-center p-4">
        <div className="p-8 rounded-lg bg-destructive/10 border border-destructive/50 max-w-md">
          <ServerCrash className="w-12 h-12 mx-auto text-destructive mb-4" />
          <h1 className="text-2xl font-bold">Failed to Load Run Details</h1>
          <p className="text-destructive-foreground/80 mt-2">{error}</p>
        </div>
      </div>
    )
  }

  const runDate = new Date(verdict.createdAt).toLocaleString(undefined, {
    dateStyle: 'full',
    timeStyle: 'long',
  })
  const isSuccess = !verdict.runStats.errors || verdict.runStats.errors.length === 0

  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
      <Button asChild variant="ghost" className="mb-4">
        <Link href="/dashboard">
          <ArrowLeft className="mr-2 h-4 w-4" /> Back to Dashboard
        </Link>
      </Button>
      <Card className="bg-black/20 border-white/10 mb-8">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-2xl">Pipeline Run Details</CardTitle>
              <CardDescription>{runDate}</CardDescription>
            </div>
            {isSuccess ? (
              <Badge className="bg-green-500/20 text-green-400 border-green-500/30 text-base">
                <CheckCircle2 className="mr-2 h-4 w-4" /> Success
              </Badge>
            ) : (
              <Badge variant="destructive" className="text-base">
                <AlertTriangle className="mr-2 h-4 w-4" /> Failed
              </Badge>
            )}
          </div>
        </CardHeader>
        <CardContent className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          <StatCard
            title="Headlines Found"
            value={verdict.runStats.freshHeadlinesFound}
            icon={<Newspaper className="h-5 w-5 text-muted-foreground" />}
          />
          <StatCard
            title="Events Synthesized"
            value={verdict.runStats.eventsSynthesized}
            icon={<Rss className="h-5 w-5 text-muted-foreground" />}
          />
          <StatCard
            title="Opportunities Generated"
            value={(verdict.generatedOpportunities || []).length}
            icon={<Users className="h-5 w-5 text-muted-foreground" />}
          />
          <StatCard
            title="Errors"
            value={verdict.runStats.errors?.length || 0}
            icon={<AlertTriangle className="h-5 w-5 text-muted-foreground" />}
          />
        </CardContent>
      </Card>
      <Card className="bg-black/20 border-white/10 mb-8">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BotMessageSquare className="h-6 w-6 gemini-text" /> AI Executive Summary
          </CardTitle>
        </CardHeader>
        <CardContent className="text-muted-foreground italic">
          {summary ? `"${summary}"` : <Loader2 className="h-5 w-5 animate-spin" />}
        </CardContent>
      </Card>
      <div className="grid gap-8 md:grid-cols-2">
        <VerdictCard
          items={verdict.judgeVerdict?.event_judgements || []}
          title="Judged Events"
        />
        <VerdictCard
          items={verdict.judgeVerdict?.opportunity_judgements || []}
          title="Judged Opportunities"
        />
      </div>
    </motion.div>
  )
}

```

## 📄 src/app/scraper-ide/_components/AnalysisPanel.jsx
*Lines: 78, Size: 4.37 KB*

```jsx
// apps/admin/src/app/scraper-ide/_components/AnalysisPanel.jsx (version 2.3 - Prop Fix)
'use client';

import { useState } from 'react';
import { Button, Card, CardContent, CardHeader, CardTitle, Accordion, AccordionItem, AccordionTrigger, AccordionContent } from '@headlines/ui';
import { Link as LinkIcon, CheckCircle2 } from 'lucide-react';
import { cn } from '@headlines/utils';

export default function AnalysisPanel({ analysis, onSetSelector, onDrillDown, activeHeadlineSelector }) {
  const [openAccordion, setOpenAccordion] = useState(activeHeadlineSelector ? `item-${analysis?.suggestions.findIndex(s => s.selector === activeHeadlineSelector)}` : null);

  if (!analysis) {
    return (
      <div className="flex items-center justify-center h-full text-muted-foreground">
        <p>Analyze a URL to see link structure suggestions here.</p>
      </div>
    );
  }

  if (analysis.suggestions.length === 0) {
     return (
      <div className="flex items-center justify-center h-full text-muted-foreground">
        <p>No suitable link clusters found on this page.</p>
      </div>
    );
  }

  return (
    <div className="h-full overflow-y-auto p-4">
        <Card className="bg-transparent border-none shadow-none">
            <CardHeader>
                <CardTitle>Heuristic Link Analysis</CardTitle>
            </CardHeader>
            <CardContent>
                <Accordion type="single" collapsible className="w-full" value={openAccordion} onValueChange={setOpenAccordion}>
                    {analysis.suggestions.map((cluster, index) => {
                        const isActive = activeHeadlineSelector === cluster.selector;
                        return (
                            <AccordionItem value={`item-${index}`} key={index}>
                                <AccordionTrigger className={cn("font-mono text-sm px-2 rounded hover:bg-white/5", isActive && "bg-primary/10")}>
                                    <div className="flex justify-between w-full items-center pr-2">
                                        <div className="flex items-center gap-2 truncate">
                                            {isActive && <CheckCircle2 className="h-4 w-4 text-green-400 flex-shrink-0" />}
                                            <span className="truncate">{cluster.selector}</span>
                                        </div>
                                        <span className="text-xs text-muted-foreground bg-secondary px-2 py-1 rounded-md">
                                            {cluster.count} links
                                        </span>
                                    </div>
                                </AccordionTrigger>
                                <AccordionContent className="p-2">
                                    <div className="bg-background/50 p-4 rounded-md border border-border">
                                        <div className="flex justify-end gap-2 mb-3">
                                            <Button size="sm" onClick={() => onSetSelector(cluster.selector)}>Set as Headline Selector</Button>
                                        </div>
                                        <ul className="space-y-1 max-h-48 overflow-y-auto pr-2">
                                            {cluster.samples.map((sample, s_index) => (
                                                <li key={s_index} className="text-xs p-1.5 rounded bg-background flex items-center gap-2 cursor-pointer hover:bg-accent" onClick={() => onDrillDown(sample.href)}>
                                                    <LinkIcon className="h-3 w-3 flex-shrink-0"/>
                                                    <div className="truncate">
                                                        <p className="text-muted-foreground truncate font-medium">{sample.text}</p>
                                                        <p className="text-blue-400 text-[10px] truncate">{sample.href}</p>
                                                    </div>
                                                </li>
                                            ))}
                                        </ul>
                                    </div>
                                </AccordionContent>
                            </AccordionItem>
                        )
                    })}
                </Accordion>
            </CardContent>
        </Card>
    </div>
  );
}

```

## 📄 src/app/scraper-ide/_components/ArticleExtractorView.jsx
*Lines: 107, Size: 4.57 KB*

```jsx
// apps/admin/src/app/scraper-ide/_components/ArticleExtractorView.jsx (version 3.1 - Prop Fix)
'use client';

import { useState, useEffect, useMemo } from 'react';
import { Button, Textarea, Label, Accordion, AccordionItem, AccordionTrigger, AccordionContent, Badge } from '@headlines/ui';
import { toast } from 'sonner';
import { heuristicallyFindSelectors } from '@headlines/scraper-logic/src/scraper/selectorOptimizer.js';
import * as cheerio from 'cheerio';

export default function ArticleExtractorView({ articleHtml, onSetSelector, value }) {
  const [extractedText, setExtractedText] = useState('');
  const [suggestions, setSuggestions] = useState([]);

  const cleanBodyHtml = useMemo(() => {
    if (!articleHtml) return '';
    const $ = cheerio.load(articleHtml);
    $('script, style, link, noscript, svg, header, footer, nav, aside').remove();
    return $('body').html() || '';
  }, [articleHtml]);

  useEffect(() => {
    if (cleanBodyHtml) {
      const heuristicSuggestions = heuristicallyFindSelectors(cleanBodyHtml);
      setSuggestions(heuristicSuggestions);
      
      if ((!value || value.length === 0) && heuristicSuggestions.length > 0) {
        onSetSelector([heuristicSuggestions[0].selector]);
        toast.info('Heuristics suggested an article selector.');
      }
    }
  }, [cleanBodyHtml, onSetSelector, value]);

  const handleManualExtract = () => {
    if (!value || value.length === 0) return toast.error('No selector provided to test.');
    try {
      const $ = cheerio.load(cleanBodyHtml);
      const contentParts = [];
      value.forEach(selector => {
        $(selector).each((_, el) => {
            contentParts.push($(el).text().trim());
        });
      });
      const text = contentParts.join('\\n\\n').replace(/\\s+/g, ' ');

      setExtractedText(text);
      if (text.length > 0) {
        toast.success(`Extracted ${text.length} characters.`);
      } else {
        toast.warn(`Selector is valid, but no text was found.`);
      }
    } catch (err) {
      toast.error('Extraction failed', { description: 'Invalid CSS selector.' });
      setExtractedText('');
    }
  };
  
  return (
    <div className="p-4 h-full grid grid-rows-[auto_1fr] gap-4">
      <div>
        <Label htmlFor="article-selector">Article Body Selectors</Label>
        <div className="flex gap-2 mt-1">
          <Textarea
            id="article-selector"
            value={(value || []).join(', ')}
            onChange={(e) => onSetSelector(e.target.value.split(',').map(s => s.trim()).filter(Boolean))}
            placeholder="e.g., div.prose, main > article"
            rows={2}
            className="font-mono text-sm"
          />
          <Button onClick={handleManualExtract} variant="outline" className="h-auto" disabled={!value || value.length === 0}>Test Selector</Button>
        </div>
      </div>
      <div className="min-h-0 grid grid-cols-2 gap-4">
        <div className="border rounded-md overflow-y-auto p-2">
            <h4 className="text-sm font-semibold mb-2 px-2">Selector Suggestions</h4>
            <Accordion type="single" collapsible className="w-full">
                {suggestions.map((item, index) => (
                    <AccordionItem value={`item-${index}`} key={index}>
                        <AccordionTrigger className="font-mono text-xs px-2 hover:bg-white/5 rounded">
                           <div className="flex justify-between w-full items-center pr-2">
                                <span className="truncate">{item.selector}</span>
                                <Badge variant="secondary">{item.score.toFixed(0)} score</Badge>
                           </div>
                        </AccordionTrigger>
                        <AccordionContent className="p-2">
                            <div className="bg-background/50 p-2 rounded-md border">
                                <Button size="sm" className="w-full mb-2" onClick={() => onSetSelector([item.selector])}>Apply this Selector</Button>
                                <p className="text-xs text-muted-foreground p-2 bg-background rounded max-h-24 overflow-y-auto">
                                    {(item.samples || []).join(' ').substring(0, 300)}...
                                </p>
                            </div>
                        </AccordionContent>
                    </AccordionItem>
                ))}
            </Accordion>
        </div>
        <Textarea
          readOnly
          value={extractedText}
          className="h-full w-full resize-none bg-secondary/50"
          placeholder="Test a selector to see the extracted text here..."
        />
      </div>
    </div>
  );
}

```

## 📄 src/app/scraper-ide/_components/ConfirmationModal.jsx
*Lines: 92, Size: 4.36 KB*

```jsx
// apps/admin/src/app/scraper-ide/_components/ConfirmationModal.jsx (version 2.1 - Wider & Interactive)
'use client';
import { useState, useEffect, useCallback } from 'react';
import { Button, Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, ScrollArea, LoadingOverlay, Textarea } from '@headlines/ui';
import { ExternalLink, Save } from 'lucide-react';
import { toast } from 'sonner';

export default function ConfirmationModal({ open, onOpenChange, onConfirm, testResults, isTesting, isSaving, sourceConfig }) {
  const [contentPreview, setContentPreview] = useState('');
  const [isLoadingContent, setIsLoadingContent] = useState(false);
  const [activeUrl, setActiveUrl] = useState(null);

  useEffect(() => {
    if (testResults) {
      setContentPreview(testResults.content.preview || "Could not fetch content from first article.");
      setActiveUrl(testResults.content.sourceUrl);
    }
  }, [testResults]);

  const fetchArticleContent = useCallback(async (article) => {
    if (!article?.link) return;
    setIsLoadingContent(true);
    setActiveUrl(article.link);
    try {
      const res = await fetch('/api/scrape/test-recipe', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ sourceConfig, articleUrl: article.link })
      });
      const data = await res.json();
      if (!res.ok || !data.success) throw new Error(data.details || 'Failed to fetch content');
      setContentPreview(data.content.preview || `No content found for ${article.link}`);
    } catch (err) {
      toast.error('Failed to fetch article content', { description: err.message });
      setContentPreview(`Error: ${err.message}`);
    } finally {
      setIsLoadingContent(false);
    }
  }, [sourceConfig]);

  const hasHeadlines = testResults?.headlines?.count > 0;

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-[85vw] h-[85vh] flex flex-col">
        <DialogHeader>
          <DialogTitle>Confirm Source Configuration</DialogTitle>
          <DialogDescription>
            A live test was performed. Click on a headline to preview its content before saving.
          </DialogDescription>
        </DialogHeader>
        <div className="flex-grow min-h-0 relative">
          <LoadingOverlay isLoading={isTesting} text="Running live test scrape..." />
          {testResults && (
            <div className="grid grid-cols-2 gap-4 h-full">
              <div className="flex flex-col gap-2">
                <h3 className="font-semibold">Found {testResults.headlines.count} Headlines</h3>
                <ScrollArea className="h-full border rounded-md p-2">
                  <ul className="space-y-2">
                    {hasHeadlines ? testResults.headlines.samples.map((item, i) => (
                      <li key={i} className={`text-sm p-2 rounded bg-secondary/50 flex justify-between items-center cursor-pointer hover:bg-secondary ${activeUrl === item.link ? 'ring-2 ring-primary' : ''}`} onClick={() => fetchArticleContent(item)}>
                        <span className="truncate pr-4">{item.headline}</span>
                        <a href={item.link} target="_blank" rel="noopener noreferrer" onClick={e => e.stopPropagation()}><ExternalLink className="h-4 w-4 text-muted-foreground" /></a>
                      </li>
                    )) : <li className="text-sm text-muted-foreground p-4 text-center">No headlines found.</li>}
                  </ul>
                </ScrollArea>
              </div>
              <div className="flex flex-col gap-2 h-full relative">
                <LoadingOverlay isLoading={isLoadingContent} text="Fetching content..." />
                <h3 className="font-semibold">Article Content Preview</h3>
                <Textarea
                    readOnly
                    value={contentPreview}
                    className="h-full w-full resize-none bg-secondary/50"
                />
              </div>
            </div>
          )}
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>Go Back & Edit</Button>
          <Button onClick={onConfirm} disabled={!hasHeadlines || isSaving || isTesting}>
            <Save className="mr-2 h-4 w-4"/>
            {isSaving ? 'Saving...' : 'Confirm & Save Source'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

```

## 📄 src/app/scraper-ide/_components/SourceDefinitionPanel.jsx
*Lines: 105, Size: 5.28 KB*

```jsx
// apps/admin/src/app/scraper-ide/_components/SourceDefinitionPanel.jsx (version 3.8 - Relative Selectors)
'use client';
import { Button, Input, Label, Select, SelectContent, SelectItem, SelectTrigger, SelectValue, Separator, Textarea } from '@headlines/ui';
import { Save, Loader2, TestTube2 } from 'lucide-react';
import { SOURCE_STATUSES, SOURCE_FREQUENCIES } from '@headlines/models/src/constants.js';

const FormField = ({ id, label, children, description }) => (
  <div className="space-y-1">
    <Label htmlFor={id} className="text-xs text-muted-foreground">{label}</Label>
    {children}
    {description && <p className="text-xs text-slate-500 mt-1">{description}</p>}
  </div>
);

export default function SourceDefinitionPanel({ sourceData, onDataChange, onTest, onUpdate, isSaving, countries, isSavable }) {
  
  const handleSelectorChange = (key, value) => {
    const selectors = value.split(',').map(s => s.trim()).filter(Boolean);
    onDataChange({ [key]: selectors });
  };
  
  const handleChange = (key, value) => {
    onDataChange({ [key]: value });
  };
  
  if (!sourceData) return null;

  return (
    <div className="p-4 flex flex-col h-full">
      <h3 className="font-semibold mb-2 px-2 text-lg">Source Definition</h3>
      <div className="flex-grow overflow-y-auto pr-2 space-y-3">
        <FormField label="Headline Container Selectors" id="headlineSelector">
            <Textarea 
                value={(sourceData.headlineSelector || []).join(', ')} 
                onChange={e => handleSelectorChange('headlineSelector', e.target.value)}
                placeholder="e.g., .article-container, .news-item"
                className="font-mono text-sm"
                rows={3}
            />
        </FormField>
         <FormField label="Link Selector (relative)" id="linkSelector" description="Relative to the container. Leave blank if container is the link.">
            <Input 
                value={sourceData.linkSelector || ''} 
                onChange={e => handleChange('linkSelector', e.target.value)}
                placeholder="e.g., a.headline-link"
                className="font-mono text-sm"
            />
        </FormField>
         <FormField label="Headline Text Selector (relative)" id="headlineTextSelector" description="Relative to the container. Leave blank for default text extraction.">
            <Input 
                value={sourceData.headlineTextSelector || ''} 
                onChange={e => handleChange('headlineTextSelector', e.target.value)}
                placeholder="e.g., h2, .title-text"
                className="font-mono text-sm"
            />
        </FormField>
         <FormField label="Article Body Selectors" id="articleSelector">
            <Textarea 
                value={(sourceData.articleSelector || []).join(', ')} 
                onChange={e => handleSelectorChange('articleSelector', e.target.value)}
                placeholder="e.g., div.prose, main > article"
                className="font-mono text-sm"
                rows={3}
            />
        </FormField>
        <Separator className="my-2"/>
        <FormField label="Source Name" id="name"><Input value={sourceData.name || ''} onChange={e => handleChange('name', e.target.value)} /></FormField>
        <div className="grid grid-cols-2 gap-2">
            <FormField label="Country" id="country">
                <Select value={sourceData.country || ''} onValueChange={v => handleChange('country', v)}>
                    <SelectTrigger><SelectValue placeholder="Select..." /></SelectTrigger>
                    <SelectContent>{countries.map(c => <SelectItem key={c} value={c}>{c}</SelectItem>)}</SelectContent>
                </Select>
            </FormField>
            <FormField label="Language" id="language"><Input value={sourceData.language || 'en'} onChange={e => handleChange('language', e.target.value)} /></FormField>
        </div>
        <div className="grid grid-cols-2 gap-2">
            <FormField label="Status" id="status">
                <Select value={sourceData.status || 'active'} onValueChange={v => handleChange('status', v)}>
                    <SelectTrigger><SelectValue/></SelectTrigger>
                    <SelectContent>{SOURCE_STATUSES.map(s => <SelectItem key={s} value={s}>{s}</SelectItem>)}</SelectContent>
                </Select>
            </FormField>
            <FormField label="Frequency" id="scrapeFrequency">
                <Select value={sourceData.scrapeFrequency || 'high'} onValueChange={v => handleChange('scrapeFrequency', v)}>
                    <SelectTrigger><SelectValue /></SelectTrigger>
                    <SelectContent>{SOURCE_FREQUENCIES.map(f => <SelectItem key={f} value={f}>{f}</SelectItem>)}</SelectContent>
                </Select>
            </FormField>
        </div>
      </div>
      <div className="flex-shrink-0 pt-4 flex gap-2">
        <Button onClick={onTest} disabled={isSaving || !isSavable} className="w-full" variant="outline">
            <TestTube2 className="mr-2 h-4 w-4"/>
            Test Source
        </Button>
        <Button onClick={onUpdate} disabled={isSaving || !isSavable} className="w-full">
            {isSaving ? <Loader2 className="mr-2 h-4 w-4 animate-spin"/> : <Save className="mr-2 h-4 w-4"/>}
            {sourceData._id ? 'Update Source' : 'Create Source'}
        </Button>
      </div>
    </div>
  );
}

```

## 📄 src/app/scraper-ide/_components/SourceSelectorInput.jsx
*Lines: 53, Size: 2.22 KB*

```jsx
// apps/admin/src/app/scraper-ide/_components/SourceSelectorInput.jsx (version 2.3 - UX Improvement)
'use client';
import * as React from 'react';
import { Button, Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList, Popover, PopoverContent, PopoverTrigger } from '@headlines/ui';
import { Check, ChevronsUpDown } from 'lucide-react';
import { cn } from '@headlines/utils';

export default function SourceSelectorInput({ sources, selectedSource, onSelectSource, disabled }) {
  const [open, setOpen] = React.useState(false);
  const selectedValue = selectedSource?._id ? selectedSource.name : ""; // Only show a name if it's a real, selected source

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-full justify-between h-11 text-base"
          disabled={disabled}
        >
          <span className="truncate">{selectedValue ? selectedValue : 'Select existing source to edit...'}</span>
          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
        <Command>
          <CommandInput placeholder="Search sources..." />
          <CommandList>
            <CommandEmpty>No source found.</CommandEmpty>
            <CommandGroup>
              {sources.map((source) => (
                <CommandItem
                  key={source._id}
                  value={source.name}
                  onSelect={(currentValue) => {
                    const sourceToSelect = sources.find(s => s.name.toLowerCase() === currentValue.toLowerCase());
                    onSelectSource(sourceToSelect ?? null); // Pass null if deselected
                    setOpen(false);
                  }}
                >
                  <Check className={cn('mr-2 h-4 w-4', selectedValue.toLowerCase() === source.name.toLowerCase() ? 'opacity-100' : 'opacity-0')}/>
                  {source.name}
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  );
}

```

## 📄 src/app/scraper-ide/_components/TabsBar.jsx
*Lines: 57, Size: 1.94 KB*

```jsx
// apps/admin/src/app/scraper-ide/_components/TabsBar.jsx (version 1.1)
'use client';

import { cn } from '@headlines/utils';
import { LayoutList, FileText, X } from 'lucide-react';

export default function TabsBar({ tabs, activeTabId, onSelectTab, onCloseTab }) {
  if (!tabs || tabs.length === 0) {
    return null;
  }

  const handleTabClick = (e, tabId) => {
    // If middle-clicked or ctrl/cmd-clicked, open in new tab and don't switch active tab
    if (e.button === 1 || e.ctrlKey || e.metaKey) {
      const tab = tabs.find(t => t.id === tabId);
      if (tab) window.open(tab.url, '_blank');
      return;
    }
    onSelectTab(tabId);
  };

  return (
    <div className="flex-shrink-0 border-b bg-secondary/30">
      <ul className="flex items-center gap-1 p-1">
        {tabs.map(tab => {
          const isActive = tab.id === activeTabId;
          const Icon = tab.type === 'discovery' ? LayoutList : FileText;
          return (
            <li
              key={tab.id}
              onMouseDown={(e) => handleTabClick(e, tab.id)} // Use onMouseDown for middle-click
              className={cn(
                'flex items-center gap-2 pl-3 pr-2 py-1.5 rounded-t-md cursor-pointer border-b-2',
                isActive
                  ? 'bg-background border-primary text-primary'
                  : 'bg-secondary border-transparent hover:bg-accent'
              )}
            >
              <Icon className="h-4 w-4 text-muted-foreground" />
              <span className="text-sm truncate max-w-48">{tab.url.replace(/^https?:\/\//, '')}</span>
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  onCloseTab(tab.id);
                }}
                className="p-1 rounded hover:bg-destructive/20 text-muted-foreground hover:text-destructive"
              >
                <X className="h-3 w-3" />
              </button>
            </li>
          );
        })}
      </ul>
    </div>
  );
}

```

## 📄 src/app/scraper-ide/page.jsx
*Lines: 633, Size: 20.24 KB*

```jsx
// apps/admin/src/app/sources/source-ide-modal.jsx (version 2.2.0)
'use client'

import { useState, useEffect, useCallback } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@headlines/ui'
import { Button } from '@headlines/ui'
import { Input } from '@headlines/ui'
import { Label } from '@headlines/ui'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@headlines/ui'
import { ScrollArea } from '@headlines/ui'
import { Card, CardContent, CardHeader, CardTitle } from '@headlines/ui'
import { Badge } from '@headlines/ui'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@headlines/ui'
import { Alert, AlertDescription } from '@headlines/ui'
import { Separator } from '@headlines/ui'
import { toast } from 'sonner'
import {
  Save,
  Loader2,
  PlusCircle,
  X,
  Wand2,
  TestTube2,
  ExternalLink,
  Edit,
  CheckCircle2,
  AlertTriangle,
  Info,
  Globe,
  Code,
  Zap,
  Eye,
  ArrowRight,
  Copy,
  RefreshCw,
  ShieldAlert,
} from 'lucide-react'

const FormField = ({ id, label, description, children, error, required }) => (
  <div className="space-y-2">
    <div className="flex items-center gap-2">
      <Label htmlFor={id} className="text-sm font-medium text-foreground">
        {label}
        {required && <span className="text-red-500">*</span>}
      </Label>
      {description && (
        <div className="group relative">
          <Info className="w-3 h-3 text-muted-foreground cursor-help" />
          <div className="absolute left-full ml-2 top-1/2 -translate-y-1/2 bg-popover border rounded-md p-2 text-xs w-64 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50">
            {description}
          </div>
        </div>
      )}
    </div>
    {children}
    {error && <p className="text-xs text-red-500">{error}</p>}
  </div>
)

const StatusIndicator = ({ status, label }) => {
  const statusConfig = {
    success: { icon: CheckCircle2, color: 'text-green-500', bg: 'bg-green-500/10' },
    warning: { icon: AlertTriangle, color: 'text-yellow-500', bg: 'bg-yellow-500/10' },
    error: { icon: X, color: 'text-red-500', bg: 'bg-red-500/10' },
    info: { icon: Info, color: 'text-blue-500', bg: 'bg-blue-500/10' },
  }
  const config = statusConfig[status] || statusConfig.info
  const Icon = config.icon

  return (
    <div className={`flex items-center gap-2 px-2 py-1 rounded-md ${config.bg}`}>
      <Icon className={`w-3 h-3 ${config.color}`} />
      <span className="text-xs">{label}</span>
    </div>
  )
}

const LiveTestResultItem = ({ headline, link, sourceConfig }) => {
  const [isTestingContent, setIsTestingContent] = useState(false)
  const [content, setContent] = useState(null)
  const [contentExpanded, setContentExpanded] = useState(false)

  const handleTestContent = async () => {
    setIsTestingContent(true)
    setContent(null)
    try {
      const res = await fetch('/api/scrape/test-recipe', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ sourceConfig, articleUrl: link }),
      })
      const data = await res.json()
      if (!res.ok) throw new Error(data.details || 'Content scrape failed.')
      setContent(data.content || 'No content found with selector.')
    } catch (err) {
      setContent(`Error: ${err.message}`)
    } finally {
      setIsTestingContent(false)
    }
  }

  const handleCopyLink = () => {
    navigator.clipboard.writeText(link)
    toast.success('Link copied to clipboard')
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      className="border border-white/10 rounded-lg p-3 bg-card hover:bg-card/80 transition-colors"
    >
      <div className="flex items-start justify-between gap-2">
        <div className="flex-grow min-w-0">
          <h4 className="font-medium text-sm mb-1 line-clamp-2">{headline}</h4>
          <div className="flex items-center gap-2 text-xs text-muted-foreground">
            <button
              onClick={handleCopyLink}
              className="flex items-center gap-1 hover:text-foreground transition-colors truncate"
              title="Copy link"
            >
              <ExternalLink className="w-3 h-3 flex-shrink-0" />
              <span className="truncate">{link}</span>
            </button>
          </div>
        </div>
        <div className="flex gap-1 flex-shrink-0">
          <Button
            variant="ghost"
            size="icon"
            className="h-7 w-7"
            onClick={handleTestContent}
            disabled={isTestingContent}
            title="Test article content extraction"
          >
            {isTestingContent ? (
              <Loader2 className="h-3 w-3 animate-spin" />
            ) : (
              <TestTube2 className="h-3 w-3" />
            )}
          </Button>
          <Button
            variant="ghost"
            size="icon"
            className="h-7 w-7"
            onClick={() => window.open(link, '_blank')}
            title="Open in new tab"
          >
            <ExternalLink className="h-3 w-3" />
          </Button>
        </div>
      </div>

      <AnimatePresence>
        {content && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            className="mt-3 pt-3 border-t border-white/10"
          >
            <div className="flex items-center justify-between mb-2">
              <span className="text-xs font-medium text-muted-foreground">
                Extracted Content:
              </span>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setContentExpanded(!contentExpanded)}
                className="text-xs h-6"
              >
                {contentExpanded ? 'Collapse' : 'Expand'}
              </Button>
            </div>
            <pre
              className={`text-xs whitespace-pre-wrap font-mono text-muted-foreground bg-black/20 rounded p-2 overflow-hidden transition-all ${
                contentExpanded ? 'max-h-none' : 'max-h-20'
              }`}
            >
              {content}
            </pre>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  )
}

const ProgressStep = ({ step, currentStep, title, description }) => {
  const isActive = step === currentStep
  const isCompleted = step < currentStep

  return (
    <div
      className={`flex items-center gap-3 p-3 rounded-lg transition-all ${
        isActive
          ? 'bg-primary/10 border border-primary/20'
          : isCompleted
            ? 'bg-green-500/10 border border-green-500/20'
            : 'bg-card border border-white/10'
      }`}
    >
      <div
        className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
          isCompleted
            ? 'bg-green-500 text-white'
            : isActive
              ? 'bg-primary text-primary-foreground'
              : 'bg-muted text-muted-foreground'
        }`}
      >
        {isCompleted ? <CheckCircle2 className="w-4 h-4" /> : step}
      </div>
      <div className="flex-grow">
        <h4
          className={`font-medium text-sm ${isActive ? 'text-foreground' : 'text-muted-foreground'}`}
        >
          {title}
        </h4>
        <p className="text-xs text-muted-foreground">{description}</p>
      </div>
      {isActive && <ArrowRight className="w-4 h-4 text-primary" />}
    </div>
  )
}

export default function SourceIdeModal({
  source,
  open,
  onOpenChange,
  onSave,
  countries,
}) {
  const [formData, setFormData] = useState(source)
  const [isDirty, setIsDirty] = useState(false)
  const [isSaving, setIsSaving] = useState(false)
  const [isCoPilotRunning, setIsCoPilotRunning] = useState(false)
  const [isTesting, setIsTesting] = useState(false)
  const [testResults, setTestResults] = useState(null)
  const [validationErrors, setValidationErrors] = useState({})
  const [currentStep, setCurrentStep] = useState(1)
  const [activeTab, setActiveTab] = useState('setup')

  useEffect(() => {
    setFormData(source)
    setIsDirty(source?._id === null)
    setTestResults(null)
    setValidationErrors({})
    setCurrentStep(1)
    setActiveTab('setup')
  }, [source])

  if (!source) return null
  const isNewSource = !source._id

  const isValidUrl = (string) => {
    try {
      new URL(string)
      return true
    } catch (_) {
      return false
    }
  }

  const validateForm = useCallback(() => {
    const errors = {}

    if (!formData.name?.trim()) errors.name = 'Source name is required'
    if (!formData.country) errors.country = 'Country selection is required'
    if (!formData.baseUrl?.trim()) errors.baseUrl = 'Base URL is required'
    else if (!isValidUrl(formData.baseUrl)) errors.baseUrl = 'Please enter a valid URL'
    if (!formData.sectionUrl?.trim()) errors.sectionUrl = 'Section URL is required'
    else if (!isValidUrl(formData.sectionUrl))
      errors.sectionUrl = 'Please enter a valid URL'

    if (currentStep >= 2) {
      if (!formData.headlineSelector || formData.headlineSelector.length === 0)
        errors.headlineSelector = 'Headline container selector is required'
      if (!formData.linkSelector?.trim())
        errors.linkSelector = 'Link selector is required'
      if (!formData.headlineTextSelector?.trim())
        errors.headlineTextSelector = 'Headline text selector is required'
    }

    if (currentStep >= 3) {
      if (!formData.articleSelector || formData.articleSelector.length === 0)
        errors.articleSelector = 'Article content selector is required'
    }

    setValidationErrors(errors)
    return Object.keys(errors).length === 0
  }, [formData, currentStep])

  useEffect(() => {
    validateForm()
  }, [validateForm])

  useEffect(() => {
    if (formData.name && formData.country && formData.baseUrl && formData.sectionUrl) {
      if (
        formData.headlineSelector &&
        formData.linkSelector &&
        formData.headlineTextSelector
      ) {
        if (formData.articleSelector) {
          setCurrentStep(4)
        } else {
          setCurrentStep(3)
        }
      } else {
        setCurrentStep(2)
      }
    } else {
      setCurrentStep(1)
    }
  }, [formData])

  const handleFieldChange = (key, value) => {
    setFormData((prev) => ({ ...prev, [key]: value }))
    setIsDirty(true)
  }

  const handleCoPilot = async () => {
    if (!formData.sectionUrl) {
      toast.error('Please enter a Section URL to analyze.')
      setActiveTab('setup')
      return
    }

    setIsCoPilotRunning(true)
    const toastId = toast.loading(
      'AI Co-Pilot is analyzing the website and configuring selectors...'
    )

    try {
      const res = await fetch('/api/ai/full-source-analysis', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ url: formData.sectionUrl }),
      })
      const data = await res.json()

      if (!res.ok) throw new Error(data.details || 'Co-Pilot failed.')

      setFormData((prev) => ({
        ...prev,
        ...data.configuration,
        name: prev.name || data.configuration.name,
        baseUrl: prev.baseUrl || data.configuration.baseUrl,
      }))
      setTestResults(data.testResults)
      setIsDirty(true)
      setActiveTab('test')

      toast.success('AI Co-Pilot has configured and tested the source successfully!', {
        id: toastId,
      })
    } catch (error) {
      toast.error(`Co-Pilot Failed: ${error.message}`, { id: toastId })
    } finally {
      setIsCoPilotRunning(false)
    }
  }

  const handleTest = async () => {
    if (!validateForm()) {
      toast.error('Please fix validation errors before testing')
      return
    }

    setIsTesting(true)
    setTestResults(null)
    const toastId = toast.loading('Running live test on the configured selectors...')

    try {
      const res = await fetch('/api/scrape/test-recipe', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ sourceConfig: formData }),
      })
      const data = await res.json()

      if (!res.ok) throw new Error(data.details || 'Test failed.')

      setTestResults(data)
      setActiveTab('test')
      toast.success(`Test successful! Found ${data.count} headlines.`, { id: toastId })
    } catch (err) {
      toast.error('Test Failed', { id: toastId, description: err.message })
    } finally {
      setIsTesting(false)
    }
  }

  const handleSave = async () => {
    if (!validateForm()) {
      toast.error('Please fix all validation errors before saving')
      return
    }

    setIsSaving(true)
    const url = isNewSource ? '/api/sources' : `/api/sources/${source._id}`
    const method = isNewSource ? 'POST' : 'PATCH'

    try {
      const res = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      })
      const data = await res.json()

      if (!res.ok) throw new Error(data.error || 'Failed to save source.')

      onSave(data.source)
      toast.success(`Source ${isNewSource ? 'created' : 'updated'} successfully!`)
      onOpenChange(false)
    } catch (error) {
      toast.error(`Error saving source: ${error.message}`)
    } finally {
      setIsSaving(false)
    }
  }

  const handleQuickFill = (template) => {
    const templates = {
      news: {
        headlineSelector: 'article, .article, .news-item, .story',
        linkSelector: 'a[href]',
        headlineTextSelector: 'h1, h2, h3, .headline, .title',
        articleSelector: '.article-content, .story-content, .post-content, main article',
      },
      blog: {
        headlineSelector: '.post, .blog-post, article',
        linkSelector: 'a[href]',
        headlineTextSelector: '.post-title, .entry-title, h1, h2',
        articleSelector: '.post-content, .entry-content, .blog-content',
      },
      reddit: {
        headlineSelector: '[data-testid="post-container"], .Post',
        linkSelector: 'a[data-click-id="body"]',
        headlineTextSelector: '[data-testid="post-content"] h3',
        articleSelector: '[data-testid="post-content"]',
      },
    }

    const template_config = templates[template]
    if (template_config) {
      Object.entries(template_config).forEach(([key, value]) => {
        handleFieldChange(key, value)
      })
      toast.success(`Applied ${template} template`)
    }
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-7xl h-[95vh] flex flex-col">
        <DialogHeader className="flex-shrink-0">
          <DialogTitle className="text-2xl flex items-center gap-3">
            <Edit className="w-6 h-6" />
            {isNewSource ? 'Create New Source' : `Editing: ${source.name}`}
          </DialogTitle>
          <DialogDescription>
            Use this IDE to define, test, and save source scraper configurations.
          </DialogDescription>
        </DialogHeader>

        <div className="flex-grow min-h-0 grid grid-cols-12 gap-6">
          {/* Left Column: Progress & Actions */}
          <div className="col-span-3 flex flex-col gap-6">
            <Card className="flex-shrink-0">
              <CardHeader>
                <CardTitle>Configuration Steps</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <ProgressStep
                  step={1}
                  currentStep={currentStep}
                  title="Source Setup"
                  description="Define basic info like name and URL."
                />
                <ProgressStep
                  step={2}
                  currentStep={currentStep}
                  title="Headline Selectors"
                  description="Define selectors to find headlines."
                />
                <ProgressStep
                  step={3}
                  currentStep={currentStep}
                  title="Article Selector"
                  description="Define selector for article content."
                />
                <ProgressStep
                  step={4}
                  currentStep={currentStep}
                  title="Test & Save"
                  description="Run a live test before saving."
                />
              </CardContent>
            </Card>

            <Card className="flex-grow">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Zap className="w-4 h-4" /> Quick Actions
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <Button
                  variant="outline"
                  className="w-full"
                  onClick={handleCoPilot}
                  disabled={isCoPilotRunning || !formData.sectionUrl}
                >
                  {isCoPilotRunning ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <Wand2 className="mr-2 h-4 w-4" />
                  )}
                  Run AI Co-Pilot
                </Button>
                <div className="space-y-1">
                  <Label className="text-xs text-muted-foreground pl-1">
                    Apply Template
                  </Label>
                  <div className="flex gap-2">
                    <Button
                      variant="secondary"
                      size="sm"
                      className="flex-1"
                      onClick={() => handleQuickFill('news')}
                    >
                      News
                    </Button>
                    <Button
                      variant="secondary"
                      size="sm"
                      className="flex-1"
                      onClick={() => handleQuickFill('blog')}
                    >
                      Blog
                    </Button>
                    <Button
                      variant="secondary"
                      size="sm"
                      className="flex-1"
                      onClick={() => handleQuickFill('reddit')}
                    >
                      Reddit
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Right Column: Editor & Test Results */}
          <div className="col-span-9 rounded-lg border flex flex-col">
            <Tabs
              value={activeTab}
              onValueChange={setActiveTab}
              className="flex-grow flex flex-col min-h-0"
            >
              <TabsList className="m-2">
                <TabsTrigger value="setup">
                  <Code className="w-4 h-4 mr-2" />
                  Setup
                </TabsTrigger>
                <TabsTrigger value="test">
                  <Eye className="w-4 h-4 mr-2" />
                  Live Test Results
                </TabsTrigger>
              </TabsList>
              <TabsContent value="setup" className="flex-grow min-h-0">
                {/* Setup Form Content */}
              </TabsContent>
              <TabsContent value="test" className="flex-grow min-h-0">
                {/* Test Results Content */}
              </TabsContent>
            </Tabs>
          </div>
        </div>

        <DialogFooter className="flex-shrink-0">
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          <div className="flex gap-2">
            <Button
              variant="secondary"
              onClick={handleTest}
              disabled={isTesting || isCoPilotRunning || Object.keys(validationErrors).length > 0}
            >
              {isTesting ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <TestTube2 className="mr-2 h-4 w-4" />
              )}
              Run Live Test
            </Button>
            <Button
              onClick={handleSave}
              disabled={!isDirty || isSaving || Object.keys(validationErrors).length > 0}
            >
              {isSaving ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <Save className="mr-2 h-4 w-4" />
              )}
              Save Source
            </Button>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
```

## 📄 src/app/settings/page.jsx
*Lines: 65, Size: 1.83 KB*

```jsx
// apps/admin/src/app/settings/page.jsx (version 1.2.1)
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { PageHeader } from '@headlines/ui'
import SettingsForm from './settings-form'
import { Loader2 } from 'lucide-react'
import { toast } from 'sonner'
import { getSettings, updateSettings } from '@headlines/data-access'

export default function SettingsPage() {
  const [settings, setSettings] = useState([]) // ROBUSTNESS FIX: Initialize with empty array instead of null.
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    getSettings().then((result) => {
      if(result.success) {
        setSettings(result.data)
      } else {
        toast.error("Failed to load settings: " + result.error)
        setSettings([]) // Ensure it remains an array on failure.
      }
      setIsLoading(false)
    })
  }, [])

  const handleSave = async (updatedSettings) => {
    toast.info('Saving settings...')
    const result = await updateSettings(updatedSettings)
    if (result.success) {
      setSettings(updatedSettings)
      toast.success('Settings saved successfully.')
      return true
    } else {
      toast.error(`Error: ${result.error}`)
      return false
    }
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <Loader2 className="w-12 h-12 animate-spin gemini-text" />
      </div>
    )
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <PageHeader
        title="Pipeline Settings"
        description="Dynamically adjust thresholds and parameters for the backend scraper pipeline."
      />
      <div className="mt-8">
        <SettingsForm initialSettings={settings} onSave={handleSave} />
      </div>
    </motion.div>
  )
}

```

## 📄 src/app/settings/settings-form.jsx
*Lines: 121, Size: 4.24 KB*

```jsx
// apps/admin/src/app/settings/settings-form.jsx (version 1.3.0)
'use client'

import { useState, useMemo } from 'react'
import { motion } from 'framer-motion'
import { Card, CardContent, CardFooter, Tabs, TabsContent, TabsList, TabsTrigger } from '@headlines/ui'
import { Label } from '@headlines/ui'
import { Input } from '@headlines/ui'
import { Switch } from '@headlines/ui'
import { Button } from '@headlines/ui'
import { Save, Loader2 } from 'lucide-react'

const SettingInput = ({ setting, onChange }) => {
  const { type, key, value } = setting
  switch (type) {
    case 'number':
      return (
        <Input
          type="number"
          id={key}
          value={value}
          onChange={(e) => onChange(key, parseFloat(e.target.value))}
          className="bg-black/20 border-white/10"
        />
      )
    case 'boolean':
      return (
        <Switch
          id={key}
          checked={value}
          onCheckedChange={(checked) => onChange(key, checked)}
        />
      )
    default:
      return (
        <Input
          type="text"
          id={key}
          value={value}
          onChange={(e) => onChange(key, e.target.value)}
          className="bg-black/20 border-white/10"
        />
      )
  }
}

const SettingRow = ({ setting, onChange }) => (
    <div key={setting.key} className="grid grid-cols-3 items-center gap-4">
        <div className="col-span-2">
        <Label htmlFor={setting.key}>{setting.key.replace(/_/g, ' ')}</Label>
        <p className="text-sm text-muted-foreground">{setting.description}</p>
        </div>
        <SettingInput setting={setting} onChange={onChange} />
    </div>
);

export default function SettingsForm({ initialSettings = [], onSave }) {
  const [settings, setSettings] = useState(initialSettings)
  const [isSaving, setIsSaving] = useState(false)

  const { thresholdSettings, modelSettings, promptSettings } = useMemo(() => {
    const thresholds = [], models = [], prompts = [];
    (initialSettings || []).forEach(s => {
        if (s.key.includes('_THRESHOLD') || s.key.includes('MIN_')) {
            thresholds.push(s);
        } else if (s.key.includes('LLM_MODEL')) {
            models.push(s);
        } else {
            prompts.push(s);
        }
    });
    return { thresholdSettings: thresholds, modelSettings: models, promptSettings: prompts };
  }, [initialSettings]);


  const handleChange = (key, value) => {
    setSettings((prev) => prev.map((s) => (s.key === key ? { ...s, value } : s)))
  }

  const handleSaveClick = async () => {
    setIsSaving(true)
    await onSave(settings)
    setIsSaving(false)
  }

  return (
    <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }}>
      <Card className="bg-black/20 border-white/10">
        <CardContent className="pt-6">
           <Tabs defaultValue="thresholds">
                <TabsList className="grid w-full grid-cols-3">
                    <TabsTrigger value="thresholds">Thresholds</TabsTrigger>
                    <TabsTrigger value="ai_models">AI Models</TabsTrigger>
                    <TabsTrigger value="prompt_params">Prompt Parameters</TabsTrigger>
                </TabsList>
                <TabsContent value="thresholds" className="mt-6 space-y-6">
                    {thresholdSettings.map(setting => <SettingRow key={setting.key} setting={setting} onChange={handleChange} />)}
                </TabsContent>
                <TabsContent value="ai_models" className="mt-6 space-y-6">
                    {modelSettings.map(setting => <SettingRow key={setting.key} setting={setting} onChange={handleChange} />)}
                </TabsContent>
                <TabsContent value="prompt_params" className="mt-6 space-y-6">
                    {promptSettings.map(setting => <SettingRow key={setting.key} setting={setting} onChange={handleChange} />)}
                </TabsContent>
           </Tabs>
        </CardContent>
        <CardFooter className="border-t border-white/10 px-6 py-4">
          <Button onClick={handleSaveClick} disabled={isSaving}>
            {isSaving ? (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            ) : (
              <Save className="mr-2 h-4 w-4" />
            )}
            Save Settings
          </Button>
        </CardFooter>
      </Card>
    </motion.div>
  )
}

```

## 📄 src/app/sources/add-source-modal.jsx
*Lines: 84, Size: 2.55 KB*

```jsx
// apps/admin/src/app/sources/add-source-modal.jsx (version 2.0.0)
'use client'

import { useState } from 'react'
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@headlines/ui'
import { Input } from '@headlines/ui'
import { Label } from '@headlines/ui'
import { Button } from '@headlines/ui'
import { Wand2, Loader2 } from 'lucide-react'
import { toast } from 'sonner'

export default function AddSourceModal({ open, onOpenChange, onAnalysisComplete }) {
  const [url, setUrl] = useState('')
  const [isLoading, setIsLoading] = useState(false)

  const handleAnalyze = async () => {
    if (!url.startsWith('http')) {
      toast.error('Please enter a valid URL.')
      return
    }
    setIsLoading(true)
    const toastId = toast.loading('Initiating AI Co-Pilot analysis...')
    try {
      const res = await fetch('/api/ai/full-source-analysis', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ url }),
      })
      const data = await res.json()
      if (!res.ok || !data.success) {
        throw new Error(data.details || 'Full analysis failed on the server.')
      }
      onAnalysisComplete(data.configuration, data.testResults)
      toast.success('AI Co-Pilot analysis complete! Review and save the new source.', {
        id: toastId,
      })
    } catch (err) {
      toast.error('AI Co-Pilot Failed', { id: toastId, description: err.message })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Add New Source via AI Co-Pilot</DialogTitle>
          <DialogDescription>
            Enter the URL of a news section. The AI will analyze it, suggest a full
            configuration, and perform a live test.
          </DialogDescription>
        </DialogHeader>
        <div className="py-4">
          <Label htmlFor="url">Section URL</Label>
          <Input
            id="url"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            placeholder="https://www.example.com/news/business"
          />
        </div>
        <DialogFooter>
          <Button onClick={handleAnalyze} disabled={isLoading}>
            {isLoading ? (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            ) : (
              <Wand2 className="mr-2 h-4 w-4" />
            )}
            AI Configure & Test
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/app/sources/columns.jsx
*Lines: 189, Size: 6.41 KB*

```jsx
// apps/admin/src/app/sources/columns.jsx (version 1.9.2)
'use client'

import React, { useState, useEffect, useRef } from 'react'
import { Button } from '@headlines/ui'
import { Badge } from '@headlines/ui'
import { Input } from '@headlines/ui'
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@headlines/ui'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from '@headlines/ui'
import {
  ArrowUpDown,
  MoreHorizontal,
  CheckCircle2,
  AlertTriangle,
  XCircle,
  Clock,
  Edit,
} from 'lucide-react'

const HealthIndicator = ({ source }) => {
  const analytics = source.analytics || { totalRuns: 0, lastRunHeadlineCount: 0 };
  let icon, tooltipText;

  if (analytics.totalRuns === 0) {
    icon = <Clock className="h-5 w-5 text-muted-foreground" />;
    tooltipText = 'New source, has not been scraped yet.';
  } else if (analytics.lastRunHeadlineCount === 0) {
    icon = <XCircle className="h-5 w-5 text-red-500" />;
    tooltipText = 'Scrape Failure: The last run found 0 headlines.';
  } else {
    icon = <CheckCircle2 className="h-5 w-5 text-green-500" />;
    tooltipText = 'Healthy: Scrapes are successful.';
  }

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <div>{icon}</div>
        </TooltipTrigger>
        <TooltipContent><p>{tooltipText}</p></TooltipContent>
      </Tooltip>
    </TooltipProvider>
  )
}

const EditableSourceName = ({ source, onUpdate }) => {
    const [isEditing, setIsEditing] = useState(false);
    const [name, setName] = useState(source.name);
    const inputRef = useRef(null);

    useEffect(() => {
        if (isEditing) {
            inputRef.current?.focus();
            inputRef.current?.select();
        }
    }, [isEditing]);

    const handleSave = () => {
        if (name.trim() && name.trim() !== source.name) {
            onUpdate(source, { name: name.trim() });
        }
        setIsEditing(false);
    };

    if (isEditing) {
        return (
            <Input
                ref={inputRef}
                value={name}
                onChange={(e) => setName(e.target.value)}
                onBlur={handleSave}
                onKeyDown={(e) => {
                    if (e.key === 'Enter') handleSave();
                    if (e.key === 'Escape') setIsEditing(false);
                }}
                className="h-8"
            />
        );
    }
    
    return (
        <Button variant="ghost" className="h-auto p-1 font-medium text-left justify-start" onClick={() => setIsEditing(true)}>
            <Edit className="h-3 w-3 mr-2 text-muted-foreground opacity-50 group-hover:opacity-100" />
            {source.name}
        </Button>
    )
}

export const columns = (handleEdit, handleTest, handleStatusToggle, onUpdate) => [
  {
    accessorKey: 'health',
    header: () => <div className="text-center">Health</div>,
    cell: ({ row }) => <div className="flex justify-center"><HealthIndicator source={row.original} /></div>,
    filterFn: (row, id, value) => {
      if (value === 'failing') {
        return row.original.analytics?.totalRuns > 0 && row.original.analytics?.lastRunHeadlineCount === 0;
      }
      return true;
    },
  },
  {
    accessorKey: 'name',
    header: ({ column }) => (
      <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}>
        Name <ArrowUpDown className="ml-2 h-4 w-4" />
      </Button>
    ),
    cell: ({ row }) => <div className="group"><EditableSourceName source={row.original} onUpdate={onUpdate} /></div>
  },
  {
    accessorKey: 'status',
    header: 'Status',
    cell: ({ row }) => {
      const source = row.original, status = source.status;
      const colorClass = { active: 'bg-green-500/20 text-green-400', paused: 'bg-yellow-500/20 text-yellow-400', under_review: 'bg-gray-500/20 text-gray-400'}[status];
      return <Badge variant="outline" className={`cursor-pointer transition-colors ${colorClass}`} onClick={() => handleStatusToggle(source)}>{status}</Badge>
    },
  },
  {
    accessorKey: 'country',
    header: 'Country',
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    id: 'totalRelevant', // Use a flat ID for sorting
    accessorFn: row => row.analytics?.totalRelevant || 0, // Tell the table how to get the value
    header: ({ column }) => (
      <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}>
        Relevant <ArrowUpDown className="ml-2 h-4 w-4" />
      </Button>
    ),
    cell: ({ row }) => <div className="text-center">{row.original.analytics?.totalRelevant || '—'}</div>,
  },
  {
    accessorKey: 'relevanceRate',
    header: ({ column }) => (
      <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}>
        Relevance % <ArrowUpDown className="ml-2 h-4 w-4" />
      </Button>
    ),
    cell: ({ row }) => {
      const { totalScraped = 0, totalRelevant = 0 } = row.original.analytics || {};
      if (totalScraped === 0) return <div className="text-center text-muted-foreground">N/A</div>;
      const rate = (totalRelevant / totalScraped) * 100;
      return <div className="text-center font-medium">{rate.toFixed(1)}%</div>
    },
  },
  {
    id: 'totalScraped', // Use a flat ID for sorting
    accessorFn: row => row.analytics?.totalScraped || 0, // Tell the table how to get the value
    header: ({ column }) => (
      <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}>
        Scraped <ArrowUpDown className="ml-2 h-4 w-4" />
      </Button>
    ),
    cell: ({ row }) => <div className="text-center">{row.original.analytics?.totalScraped || '—'}</div>,
  },
  {
    id: 'actions',
    cell: ({ row }) => {
      const source = row.original;
      return (
        <div className="text-right">
          <DropdownMenu>
            <DropdownMenuTrigger asChild><Button variant="ghost" className="h-8 w-8 p-0"><span className="sr-only">Open menu</span><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem onClick={() => handleEdit(source._id)}>Edit Source</DropdownMenuItem>
              <DropdownMenuItem onClick={() => handleTest(source)}>Run Test Scrape</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      )
    },
  },
]

```

## 📄 src/app/sources/page.jsx
*Lines: 149, Size: 5.85 KB*

```jsx
// apps/admin/src/app/sources/page.jsx (version 5.0.0)
'use client'

import { useState, useCallback, useMemo, useEffect, Suspense } from 'react'
import { useSearchParams, useRouter } from 'next/navigation'
import { ServerCrash, PlusCircle, Wrench, Trash2, Pause, Play } from 'lucide-react'
import {
  PageHeader,
  DataTable,
  Button,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
  ConfirmationDialog,
  LoadingOverlay, 
} from '@headlines/ui'
import { useEntityManager } from '@/hooks/use-entity-manager'
import { columns } from './columns'
import { suggestionColumns } from './suggestion-columns'
// DEFINITIVE FIX: The SourceIdeModal is no longer a modal and was moved. It should not be imported here.
// Instead, navigation to the /scraper-ide page is handled directly.
import { toast } from 'sonner'
import TestResultsViewer from '../_components/test-results-viewer'
import AddSourceModal from './add-source-modal'
import {
  processSourceSuggestion,
  updateSource,
  deleteSource,
  testSourceConfig,
} from '@headlines/data-access'
import SourceList from '../_components/source-list' // Import the SourceList
import { useSourceHealthChecker } from './use-source-health-checker'

function SourcesPageContent() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const statusFilter = searchParams.get('status')
  const action = searchParams.get('action')
  const sourceIdToEdit = searchParams.get('sourceId')

  const {
    entities: sources,
    setEntities,
    isLoading: isLoadingSources,
    error: sourcesError,
    handleSave,
    refetch: refetchSources,
  } = useEntityManager('/api/sources', 'Source', 'name')
  
  const { 
    entities: suggestions, 
    isLoading: isLoadingSuggestions,
    refetch: refetchSuggestions,
    error: suggestionsError,
  } = useEntityManager('/api/suggestions', 'SourceSuggestion', 'createdAt', { dataKey: 'sourceSuggestions' })
  
  const {
    entities: countries,
    isLoading: isLoadingCountries,
    error: countriesError,
  } = useEntityManager('/api/countries', 'Country', 'name')
  
  const [selectedSourceId, setSelectedSourceId] = useState(null);
  const [isIdeOpen, setIsIdeOpen] = useState(false)
  const [testResults, setTestResults] = useState(null)
  const [isAddModalOpen, setIsAddModalOpen] = useState(false)
  const [confirmState, setConfirmState] = useState({ isOpen: false, action: null });
  
  const availableCountries = useMemo(() => {
    if (!countries) return ['all'];
    const countryNames = countries.filter(c => c.status === 'active').map(c => c.name);
    return ['all', ...countryNames.sort()];
  }, [countries]);

  const handleSourceUpdate = useCallback((updatedSource) => {
    setEntities(prev => prev.map(s => s._id === updatedSource._id ? updatedSource : s));
  }, [setEntities]);
  
  const { liveStatuses, isCheckingAll, handleCheckFiltered, handleStopCheck, handleTestComplete } = useSourceHealthChecker(handleSourceUpdate);

  const activeSourceData = useMemo(() => {
    if (selectedSourceId) return sources?.find(s => s._id === selectedSourceId) || null;
    return null;
  }, [selectedSourceId, sources]);
  
  useEffect(() => {
    if (action === 'edit' && sourceIdToEdit) {
      // DEFINITIVE FIX: Instead of opening a modal, navigate to the IDE page with the sourceId.
      router.push(`/scraper-ide?sourceId=${sourceIdToEdit}`);
    } else if (action === 'add') {
      router.push(`/scraper-ide?action=add&name=${searchParams.get('name')}&sectionUrl=${searchParams.get('sectionUrl')}`);
    }
  }, [action, sourceIdToEdit, searchParams, router]);

  const handleTest = useCallback(async (source) => {
    const toastId = toast.loading(`Running test scrape for "${source.name}"...`);
    const result = await testSourceConfig(source);
    if (result.success) {
      handleSave(result.data.updatedSource);
      handleTestComplete(source._id, result.data.count, result.data.updatedSource);
      setTestResults(result.data);
      toast.success(`Test complete! Found ${result.data.count} headlines.`, { id: toastId });
    } else {
      toast.error(`Test failed: ${result.details || 'Unknown error'}`, { id: toastId });
    }
  }, [handleSave, handleTestComplete]);
  
  const error = sourcesError || suggestionsError || countriesError;
  const isLoading = isLoadingSources || isLoadingCountries;

  if (error) {
    return ( <div className="flex h-full w-full items-center justify-center text-center p-4"> <div className="p-8 rounded-lg bg-destructive/10 border border-destructive/50 max-w-md"> <ServerCrash className="w-12 h-12 mx-auto text-destructive mb-4" /> <h1 className="text-2xl font-bold">Failed to Load Sources</h1> <p className="text-destructive-foreground/80 mt-2">{error}</p> </div> </div> )
  }

  return (
    <div className="flex flex-row h-full w-full">
      <SourceList 
        sources={sources}
        isLoading={isLoading}
        selectedSourceId={selectedSourceId}
        onSelectSource={(id) => router.push(`/scraper-ide?sourceId=${id}`)}
        onAddSource={() => router.push('/scraper-ide')}
        onCheckFiltered={handleCheckFiltered}
        onStopCheck={handleStopCheck}
        isCheckingAll={isCheckingAll}
        liveStatuses={liveStatuses}
        countries={availableCountries}
      />
      
      <div className="flex-grow p-6 flex flex-col items-center justify-center text-center text-muted-foreground">
          <div className="text-lg font-semibold">Source Management Hub</div>
          <p>Select a source from the list to edit it in the IDE.</p>
          <p className="mt-2">Or, click "Add New Source" to configure a new one.</p>
      </div>

      <TestResultsViewer results={testResults} open={!!testResults} onOpenChange={() => setTestResults(null)} />
    </div>
  )
}

export default function SourcesPage() {
  return (
    <Suspense fallback={<div className="relative flex items-center justify-center h-96"><LoadingOverlay isLoading={true} /></div>}>
      <SourcesPageContent />
    </Suspense>
  )
}

```

## 📄 src/app/sources/suggestion-columns.jsx
*Lines: 97, Size: 2.66 KB*

```jsx
// apps/admin/src/app/sources/suggestion-columns.jsx (version 1.0)
'use client'

import { Button } from '@headlines/ui'
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@headlines/ui'
import { ArrowUpDown, Check, X, Code } from 'lucide-react'

export const suggestionColumns = (onAction) => [
  {
    accessorKey: 'sourceName',
    header: ({ column }) => (
      <Button
        variant="ghost"
        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
      >
        Source Name
        <ArrowUpDown className="ml-2 h-4 w-4" />
      </Button>
    ),
  },
  {
    accessorKey: 'reasoning',
    header: 'AI Reasoning',
    cell: ({ row }) => (
      <div className="truncate max-w-md text-muted-foreground">
        {row.getValue('reasoning')}
      </div>
    ),
  },
  {
    id: 'suggestedSelectors',
    header: 'Suggested Fix',
    cell: ({ row }) => {
      const selectors = row.original.suggestedSelectors
      return (
        <div className="font-mono text-xs flex flex-col gap-1">
          {Object.entries(selectors).map(([key, value]) =>
            value ? (
              <div key={key}>
                <span className="text-muted-foreground">{key}: </span>
                <span>{value}</span>
              </div>
            ) : null
          )}
        </div>
      )
    },
  },
  {
    id: 'actions',
    cell: ({ row }) => {
      const suggestion = row.original
      return (
        <div className="text-right space-x-2">
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 text-green-400 hover:bg-green-500/10 hover:text-green-400"
                  onClick={() => onAction(suggestion, 'approved')}
                >
                  <Check className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>Approve and apply fix</p>
              </TooltipContent>
            </Tooltip>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 text-red-400 hover:bg-red-500/10 hover:text-red-400"
                  onClick={() => onAction(suggestion, 'rejected')}
                >
                  <X className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>Reject this suggestion</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
      )
    },
  },
]

```

## 📄 src/app/sources/test-results-modal.jsx
*Lines: 165, Size: 5.13 KB*

```jsx
// src/app/sources/test-results-modal.jsx (version 1.0)
'use client'

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@headlines/ui'
import { Button } from '@headlines/ui'
import { Alert, AlertDescription, AlertTitle } from '@headlines/ui'
import { Separator } from '@headlines/ui'
import {
  CheckCircle2,
  XCircle,
  ShieldCheck,
  Loader2,
  FileText,
  ExternalLink,
} from 'lucide-react'
import { useState } from 'react'
import { toast } from 'sonner'

const ResultItem = ({ headline, link }) => (
  <div className="flex items-center justify-between p-2 rounded-md bg-secondary/50">
    <div>
      <p className="text-sm font-medium">{headline}</p>
      <a
        href={link}
        target="_blank"
        rel="noopener noreferrer"
        className="text-xs text-muted-foreground hover:underline"
      >
        {link}
      </a>
    </div>
    <Button variant="ghost" size="icon" asChild className="h-8 w-8 text-muted-foreground">
      <a href={link} target="_blank" rel="noopener noreferrer">
        <ExternalLink className="w-4 h-4" />
      </a>
    </Button>
  </div>
)

export default function TestResultsModal({ results, open, onOpenChange, onFixApplied }) {
  const [isSaving, setIsSaving] = useState(false)

  const { success, count, headlines, firstArticleContent, proposedConfig, source } =
    results

  const handleApplyFix = async () => {
    setIsSaving(true)
    const toastId = toast.loading(`Applying fix for "${proposedConfig.name}"...`)
    try {
      const res = await fetch(`/api/sources/${proposedConfig._id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(proposedConfig),
      })
      const data = await res.json()
      if (!res.ok) throw new Error(data.error)
      toast.success(`Fix applied successfully for "${data.source.name}"!`, {
        id: toastId,
      })
      onFixApplied(data.source)
    } catch (err) {
      toast.error(`Failed to apply fix: ${err.message}`, { id: toastId })
    } finally {
      setIsSaving(false)
    }
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-3xl">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <ShieldCheck className="w-6 h-6 text-primary" />
            AI Auto-Heal Results for "{source.name}"
          </DialogTitle>
          <DialogDescription>
            The AI analyzed the broken source and proposed the following changes and
            results.
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4 py-4">
          <Alert>
            <AlertTitle>Proposed Configuration</AlertTitle>
            <AlertDescription className="font-mono text-xs space-y-1">
              <p>
                <strong>Headline Sel:</strong> {proposedConfig.headlineSelector}
              </p>
              <p>
                <strong>Link Sel:</strong>{' '}
                {proposedConfig.linkSelector || '(not changed)'}
              </p>
              <p>
                <strong>Text Sel:</strong>{' '}
                {proposedConfig.headlineTextSelector || '(not changed)'}
              </p>
            </AlertDescription>
          </Alert>

          <Separator />

          <div>
            <h4 className="font-semibold mb-2">Live Test Results with New Config</h4>
            <div className="flex items-center gap-2 text-sm">
              {success ? (
                <CheckCircle2 className="w-5 h-5 text-green-500" />
              ) : (
                <XCircle className="w-5 h-5 text-red-500" />
              )}
              <p>
                Test {success ? 'succeeded' : 'failed'}, found{' '}
                <strong className={success ? 'text-green-400' : 'text-red-400'}>
                  {count}
                </strong>{' '}
                headlines.
              </p>
            </div>
          </div>

          {success && (
            <div className="space-y-2 max-h-48 overflow-y-auto pr-2">
              {headlines.map((item, i) => (
                <ResultItem key={i} {...item} />
              ))}
            </div>
          )}

          {firstArticleContent && (
            <div>
              <h4 className="font-semibold mb-2 flex items-center gap-2">
                <FileText className="w-4 h-4" />
                First Article Content Preview
              </h4>
              <p className="text-xs p-3 bg-secondary/50 rounded-md font-mono text-muted-foreground max-h-24 overflow-y-auto">
                {firstArticleContent}
              </p>
            </div>
          )}
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          <Button onClick={handleApplyFix} disabled={!success || isSaving}>
            {isSaving ? (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            ) : (
              <ShieldCheck className="mr-2 h-4 w-4" />
            )}
            {isSaving ? 'Applying...' : 'Apply & Save Fix'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

```

## 📄 src/app/sources/use-source-health-checker.js
*Lines: 95, Size: 2.6 KB*

```javascript
// src/app/sources/use-source-health-checker.js (version 1.1.0)
'use client'

import { useState, useCallback, useRef } from 'react'
import { toast } from 'sonner'

export function useSourceHealthChecker(onSourceUpdate) {
  const [liveStatuses, setLiveStatuses] = useState({})
  const [isCheckingAll, setIsCheckingAll] = useState(false)
  const isCheckingRef = useRef(false)

  const handleCheckFiltered = async (filteredSources) => {
    if (!filteredSources || filteredSources.length === 0) {
      toast.info('No sources in the current view to check.')
      return
    }

    const sourcesToCheck = filteredSources.filter((s) => {
      const status = liveStatuses[s._id]
      return !status || status.count === undefined || status.count <= 0
    })

    if (sourcesToCheck.length === 0) {
      toast.success('All sources in the current view are already verified.')
      return
    }

    toast.info(
      `Starting health check for ${sourcesToCheck.length} unverified source(s)...`
    )
    isCheckingRef.current = true
    setIsCheckingAll(true)

    for (const source of sourcesToCheck) {
      if (!isCheckingRef.current) {
        toast.warning('Health check cancelled by user.')
        break
      }
      setLiveStatuses((prev) => ({ ...prev, [source._id]: { checking: true } }))
      try {
        const res = await fetch('/api/scrape/test-config', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(source),
        })
        const data = await res.json()
        if (!res.ok || !data.success) {
          throw new Error(data.details || 'Scrape failed')
        }
        onSourceUpdate(data.updatedSource)
        setLiveStatuses((prev) => ({
          ...prev,
          [source._id]: { checking: false, count: data.count },
        }))
      } catch (error) {
        setLiveStatuses((prev) => ({
          ...prev,
          [source._id]: { checking: false, count: -1, error: error.message },
        }))
      }
    }

    if (isCheckingRef.current) {
      toast.success('Health check complete.')
    }
    isCheckingRef.current = false
    setIsCheckingAll(false)
  }

  const handleStopCheck = () => {
    isCheckingRef.current = false
  }

  const handleTestComplete = useCallback(
    (sourceId, count, updatedSource) => {
      setLiveStatuses((prev) => ({
        ...prev,
        [sourceId]: { checking: false, count },
      }))
      if (updatedSource) {
        onSourceUpdate(updatedSource)
      }
    },
    [onSourceUpdate]
  )

  return {
    liveStatuses,
    isCheckingAll,
    handleCheckFiltered,
    handleStopCheck,
    handleTestComplete,
  }
}

```

## 📄 src/app/users/columns.jsx
*Lines: 275, Size: 7.86 KB*

```jsx
// apps/admin/src/app/users/columns.jsx (version 2.1.0)
'use client'

import React from 'react'
import { Button } from '@headlines/ui'
import { Popover, PopoverTrigger, PopoverContent } from '@headlines/ui'
import { MultiSelect } from '../_components/multi-select'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@headlines/ui'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from '@headlines/ui'
import {
  ArrowUpDown,
  MoreHorizontal,
  UserCheck,
  UserX,
  ShieldCheck,
  User,
  Trash2,
  Globe,
  Star,
  Mail,
  MailMinus,
  Bell,
  BellOff,
  Edit,
  Newspaper,
  Languages,
} from 'lucide-react'
import { SUBSCRIPTION_TIERS, SUBSCRIBER_ROLES } from '@headlines/models/src/constants'

const InlineCountryEditor = ({ user, allCountries, onAction }) => {
  const subscribedCountryNames = (user.countries || []).map((c) => c.name)

  const handleSelectionChange = (newSelection) => {
    const newSubscriptions = newSelection.map((name) => {
      const existing = user.countries.find((c) => c.name === name)
      return existing || { name, active: true }
    })
    onAction(user, 'updateCountries', { countries: newSubscriptions })
  }

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="ghost" size="sm" className="h-auto p-1 text-left justify-start">
          <Edit className="h-3 w-3 mr-2 flex-shrink-0" />
          <span className="truncate max-w-[200px]">
            {subscribedCountryNames.length > 0
              ? subscribedCountryNames.join(', ')
              : 'No subscriptions'}
          </span>
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-80 p-0">
        <MultiSelect
          options={allCountries}
          selected={subscribedCountryNames}
          onChange={handleSelectionChange}
          placeholder="Select subscriptions..."
        />
      </PopoverContent>
    </Popover>
  )
}

const InlineLanguageEditor = ({ user, availableLanguages, onAction }) => {
  const handleLanguageChange = (newLanguage) => {
    onAction(user, 'updateLanguage', { language: newLanguage })
  }

  return (
    <Select value={user.language} onValueChange={handleLanguageChange}>
      <SelectTrigger className="w-40 h-8 text-xs bg-transparent border-none focus:ring-0 shadow-none">
        <SelectValue placeholder="Select..." />
      </SelectTrigger>
      <SelectContent>
        {availableLanguages.map((lang) => (
          <SelectItem key={lang} value={lang}>
            {lang}
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  )
}

export const columns = (
  handleEdit,
  handleAction,
  allCountries = [],
  availableLanguages = []
) => [
  {
    accessorKey: 'email',
    header: ({ column }) => (
      <Button
        variant="ghost"
        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
      >
        Email <ArrowUpDown className="ml-2 h-4 w-4" />
      </Button>
    ),
    cell: ({ row }) => (
      <div className="flex flex-col">
        <span className="font-medium">{row.original.email}</span>
        <span className="text-muted-foreground text-xs">
          {row.original.firstName} {row.original.lastName || ''}
        </span>
      </div>
    ),
  },
  {
    accessorKey: 'isActive',
    header: 'Status',
    cell: ({ row }) => {
      const user = row.original
      const Icon = user.isActive ? UserCheck : UserX
      const color = user.isActive ? 'text-green-500' : 'text-muted-foreground'
      const text = user.isActive ? 'Active' : 'Inactive'
      return (
        <Button
          variant="ghost"
          size="sm"
          className={`flex items-center gap-2 ${color}`}
          onClick={() => handleAction(user, 'toggleActive')}
        >
          <Icon className="h-4 w-4" /> {text}
        </Button>
      )
    },
  },
  {
    accessorKey: 'role',
    header: 'Role',
    cell: ({ row }) => {
      const user = row.original
      const Icon = user.role === 'admin' ? ShieldCheck : User
      const color = user.role === 'admin' ? 'text-yellow-400' : 'text-muted-foreground'
      return (
        <Button
          variant="ghost"
          size="sm"
          className={`flex items-center gap-2 capitalize ${color}`}
          onClick={() => handleAction(user, 'toggleRole')}
        >
          <Icon className="h-4 w-4" /> {user.role}
        </Button>
      )
    },
  },
  {
    accessorKey: 'language',
    header: 'Language',
    cell: ({ row }) => {
      const user = row.original
      return (
        <InlineLanguageEditor
          user={user}
          availableLanguages={availableLanguages}
          onAction={handleAction}
        />
      )
    },
  },
  {
    accessorKey: 'countries',
    header: 'Countries',
    cell: ({ row }) => {
      const user = row.original
      if (user.role === 'admin') {
        return (
          <div className="flex items-center gap-2 text-muted-foreground">
            <Globe className="h-4 w-4" />
            All Countries
          </div>
        )
      }
      return (
        <InlineCountryEditor
          user={user}
          allCountries={allCountries}
          onAction={handleAction}
        />
      )
    },
  },
  {
    id: 'notifications',
    header: 'Engagement',
    cell: ({ row }) => {
      const user = row.original
      return (
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-2">
            <button
              onClick={() => handleAction(user, 'toggleEmail')}
              title={user.emailNotificationsEnabled ? 'Email Enabled' : 'Email Disabled'}
            >
              {user.emailNotificationsEnabled ? (
                <Mail className="h-5 w-5 text-green-400" />
              ) : (
                <MailMinus className="h-5 w-5 text-muted-foreground" />
              )}
            </button>
            <button
              onClick={() => handleAction(user, 'togglePush')}
              title={user.pushNotificationsEnabled ? 'Push Enabled' : 'Push Disabled'}
            >
              {user.pushNotificationsEnabled ? (
                <Bell className="h-5 w-5 text-green-400" />
              ) : (
                <BellOff className="h-5 w-5 text-muted-foreground" />
              )}
            </button>
          </div>
          <div className="flex items-center gap-3 text-xs text-muted-foreground">
            <div className="flex items-center gap-1" title="Emails Sent">
              <Mail className="h-3 w-3" />
              <span>{user.emailSentCount || 0}</span>
            </div>
            <div className="flex items-center gap-1" title="Events Received">
              <Newspaper className="h-3 w-3" />
              <span>{user.eventsReceivedCount || 0}</span>
            </div>
          </div>
        </div>
      )
    },
  },
  {
    id: 'actions',
    cell: ({ row }) => {
      const user = row.original
      return (
        <div className="text-right">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">Open menu</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem onClick={() => handleEdit(user._id)}>
                Edit Full Profile
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                className="text-red-400 focus:bg-red-500/10 focus:text-red-400"
                onClick={() => handleAction(user, 'delete')}
              >
                <Trash2 className="mr-2 h-4 w-4" />
                Delete User
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      )
    },
  },
]

```

## 📄 src/app/users/country-subscription-manager.jsx
*Lines: 116, Size: 3.79 KB*

```jsx
// apps/admin/src/app/users/country-subscription-manager.jsx (version 1.0)
'use client'

import { useState } from 'react'
import { Popover, PopoverContent, PopoverTrigger } from '@headlines/ui'
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from '@headlines/ui'
import { Button } from '@headlines/ui'
import { Switch } from '@headlines/ui'
import { Check, ChevronsUpDown, X } from 'lucide-react'
import { cn } from '@headlines/utils'

export default function CountrySubscriptionManager({
  availableCountries,
  subscriptions,
  onChange,
}) {
  const [open, setOpen] = useState(false)

  const handleAddCountry = (countryName) => {
    if (!subscriptions.some((sub) => sub.name === countryName)) {
      const newSubscriptions = [...subscriptions, { name: countryName, active: true }]
      onChange(newSubscriptions.sort((a, b) => a.name.localeCompare(b.name)));
    }
    setOpen(false)
  }

  const handleRemoveCountry = (countryName) => {
    const newSubscriptions = subscriptions.filter((sub) => sub.name !== countryName)
    onChange(newSubscriptions)
  }

  const handleToggleActive = (countryName, isActive) => {
    const newSubscriptions = subscriptions.map((sub) =>
      sub.name === countryName ? { ...sub, active: isActive } : sub
    )
    onChange(newSubscriptions)
  }

  const subscribedCountryNames = new Set(subscriptions.map((s) => s.name))
  const addableCountries = availableCountries.filter(
    (c) => !subscribedCountryNames.has(c)
  ).sort()

  return (
    <div className="space-y-2">
      <div className="space-y-2">
        {subscriptions.length > 0 ? (
          subscriptions.map((sub) => (
            <div
              key={sub.name}
              className="flex items-center justify-between p-2 bg-black/20 rounded-md"
            >
              <span className="font-medium text-sm">{sub.name}</span>
              <div className="flex items-center gap-2">
                <Switch
                  checked={sub.active}
                  onCheckedChange={(checked) => handleToggleActive(sub.name, checked)}
                />
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-7 w-7"
                  onClick={() => handleRemoveCountry(sub.name)}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>
          ))
        ) : (
          <div className="text-center text-sm text-muted-foreground p-4 border border-dashed border-white/10 rounded-md">
            No countries subscribed.
          </div>
        )}
      </div>
      <Popover open={open} onOpenChange={setOpen}>
        <PopoverTrigger asChild>
          <Button variant="outline" role="combobox" className="w-full justify-between">
            Add country subscription...
            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
          <Command>
            <CommandInput placeholder="Search countries..." />
            <CommandList>
              <CommandEmpty>No countries found.</CommandEmpty>
              <CommandGroup>
                {addableCountries.map((country) => (
                  <CommandItem
                    key={country}
                    value={country}
                    onSelect={() => handleAddCountry(country)}
                  >
                    <Check
                      className={cn('mr-2 h-4 w-4', 'opacity-0')} // Keep layout consistent
                    />
                    {country}
                  </CommandItem>
                ))}
              </CommandGroup>
            </CommandList>
          </Command>
        </PopoverContent>
      </Popover>
    </div>
  )
}

```

## 📄 src/app/users/page.jsx
*Lines: 107, Size: 5.62 KB*

```jsx
// apps/admin/src/app/users/page.jsx (version 5.2.0 - Definitive Sheet Fix)
'use client'

import { ServerCrash, PlusCircle, UserCheck, UserX, Trash2 } from 'lucide-react'
import { PageHeader, Button, ConfirmationDialog, Sheet, SheetContent, DataTable } from '@headlines/ui'
import { useEntityManager } from '@/hooks/use-entity-manager'
import { columns } from './columns'
import UserEditor from './user-editor'
import { toast } from 'sonner'
import { useMemo, useState, useCallback } from 'react'
import { languageList } from '@headlines/utils'

// API call functions are defined locally to avoid complex imports
async function deleteSubscriber(userId) {
    const res = await fetch(`/api/subscribers/${userId}`, { method: 'DELETE' });
    return res.json();
}
async function updateSubscriber(userId, updateData) {
    const res = await fetch(`/api/subscribers/${userId}`, { method: 'PATCH', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(updateData) });
    return res.json();
}
async function updateSubscribersStatus(userIds, isActive) { return { success: true }; }
async function deleteSubscribers(userIds) { return { success: true }; }


export default function UsersPage() {
  const { entities: users, setEntities, isLoading: isLoadingUsers, error: usersError, handleSave, refetch, } = useEntityManager('/api/subscribers', 'Subscriber', 'email')
  const { entities: countries, isLoading: isLoadingCountries, error: countriesError, } = useEntityManager('/api/countries', 'Country', 'name')

  const [isEditorOpen, setIsEditorOpen] = useState(false)
  const [selectedId, setSelectedId] = useState(null)
  const [selectedUsers, setSelectedUsers] = useState([])
  const [confirmState, setConfirmState] = useState({ isOpen: false, data: null, action: null, })

  const availableCountries = useMemo(() => {
    if (!countries) return []
    return countries.filter((c) => c.status === 'active').map((c) => c.name)
  }, [countries])

  const handleEdit = (id) => { setSelectedId(id); setIsEditorOpen(true); }
  const handleAdd = () => { setSelectedId('new'); setIsEditorOpen(true); }

  const handleAction = useCallback( (user, action, data) => {
      if (action === 'delete') {
        setConfirmState({ isOpen: true, data: { user }, action })
        return
      }
      handleSave(user)
      updateSubscriber(user._id, data).then((result) => {
        if (!result.subscriber) {
          toast.error(`Update failed: ${result.error}`)
          refetch();
        }
      })
    }, [handleSave, refetch]
  )

  const confirmAction = useCallback(async () => {
    const { action, data } = confirmState
    setConfirmState({ isOpen: false, data: null, action: null })
    const toastId = toast.loading(`Performing action: ${action}...`)
    
    if (action === 'delete') {
      setEntities(currentUsers => currentUsers.filter(u => u._id !== data.user._id));
      const result = await deleteSubscriber(data.user._id);
      if (result.error) {
        toast.error(`Action failed: ${result.error}`, { id: toastId });
        refetch();
      } else {
        toast.success('Action completed successfully.', { id: toastId });
      }
    }
  }, [confirmState, setEntities, refetch])

  const activeUserData = useMemo(() => {
    if (selectedId === 'new') return { _id: null, email: '', firstName: '', lastName: '', role: 'user', isActive: true, countries: [], password: '', emailNotificationsEnabled: true, pushNotificationsEnabled: true, subscriptionTier: 'free', isLifetimeFree: false, subscriptionExpiresAt: null, language: 'English', }
    return users?.find((u) => u._id === selectedId) || null
  }, [selectedId, users])

  const error = usersError || countriesError
  const isLoading = isLoadingUsers || isLoadingCountries

  if (error) { return ( <div className="flex h-full w-full items-center justify-center text-center p-4"> <div className="p-8 rounded-lg bg-destructive/10 border border-destructive/50 max-w-md"> <ServerCrash className="w-12 h-12 mx-auto text-destructive mb-4" /> <h1 className="text-2xl font-bold">Failed to Load Users</h1> <p className="text-destructive-foreground/80 mt-2">{error}</p> </div> </div> ) }

  return (
    <div className="flex flex-col h-full">
      <PageHeader title="User Management" description="Add, edit, and manage user accounts and their country subscriptions." >
        <Button onClick={handleAdd}> <PlusCircle className="mr-2 h-4 w-4" /> Add New User </Button>
      </PageHeader>

      <div className="mt-8 flex-grow min-h-0">
        <DataTable columns={columns(handleEdit, handleAction, availableCountries, languageList)} data={users || []} isLoading={isLoading} filterColumn="email" filterPlaceholder="Filter by email..." enableRowSelection={true} onRowSelectionChange={setSelectedUsers} />
      </div>

      <Sheet open={isEditorOpen} onOpenChange={setIsEditorOpen}>
        {/* DEFINITIVE FIX: The SheetContent component now has a single direct child, UserEditor. */}
        {/* The header logic is handled inside UserEditor itself. */}
        <SheetContent className="w-full sm:max-w-lg p-0">
          <UserEditor key={selectedId} user={activeUserData} onSave={(saved) => { handleSave(saved); setIsEditorOpen(false); }} onCancel={() => setIsEditorOpen(false)} availableCountries={availableCountries} availableLanguages={languageList} />
        </SheetContent>
      </Sheet>

      <ConfirmationDialog open={confirmState.isOpen} onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })} onConfirm={confirmAction} title={`Confirm Action: ${confirmState.action}`} description={`Are you sure you want to ${confirmState.action} ${confirmState.data?.count || `user ${confirmState.data?.user?.email}`}? This may be irreversible.`} />
    </div>
  )
}

```

## 📄 src/app/users/user-editor.jsx
*Lines: 270, Size: 9.28 KB*

```jsx
// apps/admin/src/app/users/user-editor.jsx (version 3.0.0 - API Route Refactor)
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { Button, CardFooter, Input, Label, Select, SelectContent, SelectItem, SelectTrigger, SelectValue, Switch, Separator, Textarea } from '@headlines/ui'
import { toast } from 'sonner'
import { Save, Loader2, UserPlus, X } from 'lucide-react'
import CountrySubscriptionManager from './country-subscription-manager'

// Removed direct imports of createSubscriber, updateSubscriber from @headlines/data-access

const FormField = ({ id, label, children, description }) => (
  <div className="space-y-2">
    <Label htmlFor={id} className="text-sm font-medium text-muted-foreground pl-1">
      {label}
    </Label>
    {children}
    {description && <p className="text-xs text-muted-foreground pl-1">{description}</p>}
  </div>
)

export default function UserEditor({
  user,
  onSave,
  onCancel,
  availableCountries,
  availableLanguages,
}) {
  const [formData, setFormData] = useState(user)
  const [isSaving, setIsSaving] = useState(false)
  const [isDirty, setIsDirty] = useState(false)

  useEffect(() => {
    setFormData(user)
    setIsDirty(false)
  }, [user])

  if (!user) return null

  const isNewUser = !formData._id

  const handleChange = (key, value) => {
    setFormData((prev) => ({ ...prev, [key]: value }))
    setIsDirty(true)
  }

  const handleDateChange = (e) => {
    const value = e.target.value
    const dateValue = value ? new Date(value) : null
    handleChange('subscriptionExpiresAt', dateValue)
  }

  const handleSave = async () => {
    setIsSaving(true);
    const url = isNewUser ? '/api/subscribers' : `/api/subscribers/${user._id}`;
    const method = isNewUser ? 'POST' : 'PATCH';
    
    try {
        const res = await fetch(url, {
            method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        });

        const result = await res.json();
        
        if (!res.ok) {
            throw new Error(result.error || 'Failed to save user.');
        }

        onSave(result.subscriber); // The API route returns the saved user object
        toast.success(`User "${result.subscriber.email}" ${isNewUser ? 'created' : 'updated'}.`);

    } catch (error) {
        toast.error(`Error saving user: ${error.message}`);
    } finally {
        setIsSaving(false);
    }
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="h-full flex flex-col"
    >
      <div className="flex justify-between items-center flex-shrink-0 p-6 border-b border-white/10">
        <div className="space-y-1">
          <h1 className="text-2xl font-bold tracking-tight flex items-center gap-2">
            {isNewUser && <UserPlus />}
            {isNewUser ? 'Create New User' : 'Edit User'}
          </h1>
          <p className="text-sm text-muted-foreground">
            {isNewUser ? 'Provide details for the new user.' : formData.email}
          </p>
        </div>
        <Button variant="ghost" size="icon" onClick={onCancel}>
          <X className="h-4 w-4" />
        </Button>
      </div>
      <div className="flex-grow overflow-y-auto p-6 space-y-6">
        <h3 className="text-lg font-semibold leading-none tracking-tight">
          Account Details
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormField id="firstName" label="First Name">
            <Input
              value={formData.firstName || ''}
              onChange={(e) => handleChange('firstName', e.target.value)}
            />
          </FormField>
          <FormField id="lastName" label="Last Name">
            <Input
              value={formData.lastName || ''}
              onChange={(e) => handleChange('lastName', e.target.value)}
            />
          </FormField>
        </div>
        <FormField id="email" label="Email Address">
          <Input
            type="email"
            value={formData.email || ''}
            onChange={(e) => handleChange('email', e.target.value)}
            disabled={!isNewUser}
          />
        </FormField>
        <FormField
          id="password"
          label="Password"
          description={
            isNewUser
              ? 'Required for new users.'
              : 'Leave blank to keep current password.'
          }
        >
          <Input
            type="password"
            autoComplete="new-password"
            value={formData.password || ''}
            onChange={(e) => handleChange('password', e.target.value)}
          />
        </FormField>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormField label="Role">
            <Select value={formData.role} onValueChange={(v) => handleChange('role', v)}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="user">User</SelectItem>
                <SelectItem value="admin">Admin</SelectItem>
              </SelectContent>
            </Select>
          </FormField>
          <FormField label="Account Status">
            <Select
              value={String(formData.isActive)}
              onValueChange={(v) => handleChange('isActive', v === 'true')}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="true">Active</SelectItem>
                <SelectItem value="false">Inactive</SelectItem>
              </SelectContent>
            </Select>
          </FormField>
        </div>
        <Separator />
        <h3 className="text-lg font-semibold leading-none tracking-tight">Preferences</h3>
        <FormField label="Preferred Language">
          <Select
            value={formData.language}
            onValueChange={(v) => handleChange('language', v)}
          >
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {availableLanguages.map((lang) => (
                <SelectItem key={lang} value={lang}>
                  {lang}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </FormField>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="flex items-center space-x-2">
            <Switch
              id="email-notifications"
              checked={formData.emailNotificationsEnabled}
              onCheckedChange={(v) => handleChange('emailNotificationsEnabled', v)}
            />
            <Label htmlFor="email-notifications">Email Notifications</Label>
          </div>
          <div className="flex items-center space-x-2">
            <Switch
              id="push-notifications"
              checked={formData.pushNotificationsEnabled}
              onCheckedChange={(v) => handleChange('pushNotificationsEnabled', v)}
            />
            <Label htmlFor="push-notifications">Push Notifications</Label>
          </div>
        </div>
        <Separator />
        <h3 className="text-lg font-semibold leading-none tracking-tight">
          Subscription Details
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormField label="Subscription Tier">
            <Select
              value={formData.subscriptionTier || 'free'}
              onValueChange={(v) => handleChange('subscriptionTier', v)}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="free">Free</SelectItem>
                <SelectItem value="premium">Premium</SelectItem>
                <SelectItem value="enterprise">Enterprise</SelectItem>
              </SelectContent>
            </Select>
          </FormField>
          <FormField id="expiresAt" label="Subscription Expires At">
            <Input
              type="date"
              value={
                formData.subscriptionExpiresAt
                  ? new Date(formData.subscriptionExpiresAt).toISOString().split('T')[0]
                  : ''
              }
              onChange={handleDateChange}
            />
          </FormField>
        </div>
        <div className="flex items-center space-x-2">
          <Switch
            id="lifetime"
            checked={formData.isLifetimeFree || false}
            onCheckedChange={(v) => handleChange('isLifetimeFree', v)}
          />
          <Label htmlFor="lifetime">Lifetime Access</Label>
        </div>
        <Separator />
        <FormField label="Country Subscriptions">
          <CountrySubscriptionManager
            availableCountries={availableCountries}
            subscriptions={formData.countries || []}
            onChange={(newSubs) => handleChange('countries', newSubs)}
          />
        </FormField>
      </div>
      <CardFooter className="mt-auto border-t border-white/10 p-6 flex justify-end">
        <Button onClick={handleSave} disabled={!isDirty || isSaving}>
          {isSaving ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Save className="mr-2 h-4 w-4" />
          )}
          {isSaving ? 'Saving...' : 'Save Changes'}
        </Button>
      </CardFooter>
    </motion.div>
  )
}

```

## 📄 src/app/watchlist/columns.jsx
*Lines: 409, Size: 11.61 KB*

```jsx
// apps/admin/src/app/watchlist/columns.jsx (version 3.5.0 - Final Slot Fix)
'use client'

import React, { useState, useEffect, useRef } from 'react'
import {
  Button,
  Badge,
  Input,
  Popover,
  PopoverContent,
  PopoverTrigger,
  PremiumSpinner,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
  Tooltip,
  TooltipProvider,
  TooltipTrigger,
  TooltipContent,
  DataTableColumnHeader,
} from '@headlines/ui'
import {
  ArrowUpDown,
  MoreHorizontal,
  Building,
  User,
  Users,
  Trash2,
  PlusCircle,
  X,
  Check,
} from 'lucide-react'

// --- Shared Components ---

const TypeIcon = ({ type }) => {
  if (type === 'person') return <User className="h-5 w-5 text-blue-400" />
  if (type === 'family') return <Users className="h-5 w-5 text-purple-400" />
  return <Building className="h-5 w-5 text-orange-400" />
}

const EditableTermBadge = ({ term, onUpdate, onRemove }) => {
  const [isEditing, setIsEditing] = useState(false)
  const [editText, setEditText] = useState(term)
  const inputRef = useRef(null)
  useEffect(() => {
    if (isEditing && inputRef.current) {
      inputRef.current.focus()
      inputRef.current.select()
    }
  }, [isEditing])
  const handleSave = () => {
    if (editText.trim() && editText.trim().toLowerCase() !== term) {
      onUpdate(term, editText.trim().toLowerCase())
    }
    setIsEditing(false)
  }
  if (isEditing) {
    return (
      <Input
        ref={inputRef}
        value={editText}
        onChange={(e) => setEditText(e.target.value)}
        onBlur={handleSave}
        onKeyDown={(e) => {
          if (e.key === 'Enter') handleSave()
          if (e.key === 'Escape') setIsEditing(false)
        }}
        className="h-6 text-xs w-auto inline-flex"
        style={{ width: `${Math.max(editText.length, 5)}ch` }}
      />
    )
  }
  return (
    <Badge
      variant="secondary"
      className="group cursor-pointer"
      onClick={() => setIsEditing(true)}
    >
      {' '}
      {term}{' '}
      <button
        onClick={(e) => {
          e.stopPropagation()
          onRemove(term)
        }}
        className="ml-1.5 opacity-50 group-hover:opacity-100 rounded-full hover:bg-background/50"
      >
        {' '}
        <X className="h-3 w-3" />{' '}
      </button>{' '}
    </Badge>
  )
}

const SearchTermManager = ({ entity, onUpdate }) => {
  const [newTerm, setNewTerm] = useState('')
  const [isPopoverOpen, setIsPopoverOpen] = useState(false)
  const handleUpdateTerms = (newTerms) => {
    onUpdate(entity, { searchTerms: [...new Set(newTerms)] })
  }
  const handleAddTerm = () => {
    if (newTerm.trim()) {
      handleUpdateTerms([...(entity.searchTerms || []), newTerm.trim().toLowerCase()])
      setNewTerm('')
      setIsPopoverOpen(false)
    }
  }
  const handleRemoveTerm = (termToRemove) => {
    handleUpdateTerms((entity.searchTerms || []).filter((t) => t !== termToRemove))
  }
  const handleUpdateTerm = (oldTerm, newTerm) => {
    handleUpdateTerms(
      (entity.searchTerms || []).map((t) => (t === oldTerm ? newTerm : t))
    )
  }
  return (
    <div className="flex flex-wrap items-center gap-1 max-w-md">
      {(entity.searchTerms || []).map((term) => (
        <EditableTermBadge
          key={term}
          term={term}
          onUpdate={handleUpdateTerm}
          onRemove={handleRemoveTerm}
        />
      ))}
      <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>
        <PopoverTrigger asChild>
          <Button size="icon" variant="ghost" className="h-6 w-6 rounded-full">
            <PlusCircle className="h-4 w-4" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-48 p-2">
          <div className="flex items-center gap-1">
            <Input
              value={newTerm}
              onChange={(e) => setNewTerm(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && handleAddTerm()}
              placeholder="Add term..."
              className="h-7 text-xs"
            />
            <Button
              size="icon"
              variant="default"
              className="h-7 w-7"
              onClick={handleAddTerm}
            >
              {' '}
              <PlusCircle className="h-4 w-4" />{' '}
            </Button>
          </div>
        </PopoverContent>
      </Popover>
    </div>
  )
}

// --- Column Definitions ---

export const watchlistColumns = (
  handleEdit,
  onUpdate,
  onDelete,
  availableCountries = []
) => [
  {
    accessorKey: 'hitCount',
    header: ({ column }) => (
      <Button
        variant="ghost"
        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
      >
        {' '}
        Hits <ArrowUpDown className="ml-2 h-4 w-4" />{' '}
      </Button>
    ),
    cell: ({ row }) => {
      const hitCount = row.getValue('hitCount')
      if (hitCount === 'recalculating') {
        return (
          <div className="flex justify-center items-center h-full">
            {' '}
            <div className="w-6 h-6">
              {' '}
              <PremiumSpinner size={24} />{' '}
            </div>{' '}
          </div>
        )
      }
      return <div className="text-center font-medium">{hitCount || 0}</div>
    },
  },
  // DEFINITIVE FIX: Replace the simple sortable button with the new DataTableColumnHeader.
  {
    accessorKey: 'name',
    header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />,
    cell: ({ row }) => (
      <div className="flex items-center gap-2">
        {' '}
        <TypeIcon type={row.original.type} />{' '}
        <span className="font-medium">{row.getValue('name')}</span>{' '}
      </div>
    ),
  },
  {
    accessorKey: 'searchTerms',
    header: 'Search Terms',
    cell: ({ row }) => <SearchTermManager entity={row.original} onUpdate={onUpdate} />,
  },
  {
    accessorKey: 'status',
    header: 'Status',
    cell: ({ row }) => {
      const entity = row.original
      const statuses = ['candidate', 'active', 'inactive']
      const currentStatusIndex = statuses.indexOf(entity.status)
      const nextStatus = statuses[(currentStatusIndex + 1) % statuses.length]
      const colorClass = {
        active:
          'bg-green-500/20 text-green-400 border-green-500/30 hover:bg-green-500/30',
        inactive: 'bg-gray-500/20 text-gray-400 border-gray-500/30 hover:bg-gray-500/30',
        candidate:
          'bg-yellow-500/20 text-yellow-400 border-yellow-500/30 hover:bg-yellow-500/30',
      }[entity.status]
      return (
        <Badge
          variant="outline"
          className={`cursor-pointer transition-colors ${colorClass}`}
          onClick={() => onUpdate(entity, { status: nextStatus })}
        >
          {' '}
          {entity.status}{' '}
        </Badge>
      )
    },
  },
  {
    accessorKey: 'country',
    header: 'Country',
    cell: ({ row }) => {
      const entity = row.original
      return (
        <Select
          value={entity.country || ''}
          onValueChange={(value) => onUpdate(entity, { country: value })}
        >
          {' '}
          <SelectTrigger className="w-32 h-8 text-xs bg-transparent border-none focus:ring-0 shadow-none">
            {' '}
            <SelectValue placeholder="Select..." />{' '}
          </SelectTrigger>{' '}
          <SelectContent>
            {' '}
            {availableCountries.map((c) => (
              <SelectItem key={c} value={c}>
                {' '}
                {c}{' '}
              </SelectItem>
            ))}{' '}
          </SelectContent>{' '}
        </Select>
      )
    },
    filterFn: (row, id, value) => value === row.getValue(id),
  },
  {
    id: 'actions',
    cell: ({ row }) => {
      const entity = row.original
      return (
        <div className="text-right">
          {' '}
          <DropdownMenu>
            {' '}
            <DropdownMenuTrigger asChild>
              {' '}
              <Button variant="ghost" className="h-8 w-8 p-0">
                {' '}
                <span className="sr-only">Open menu</span>{' '}
                <MoreHorizontal className="h-4 w-4" />{' '}
              </Button>{' '}
            </DropdownMenuTrigger>{' '}
            <DropdownMenuContent align="end">
              {' '}
              <DropdownMenuLabel>Actions</DropdownMenuLabel>{' '}
              <DropdownMenuItem onClick={() => handleEdit(entity._id)}>
                {' '}
                Edit Details{' '}
              </DropdownMenuItem>{' '}
              <DropdownMenuSeparator />{' '}
              <DropdownMenuItem
                className="text-red-400 focus:bg-red-500/10 focus:text-red-400"
                onClick={() => onDelete(entity._id)}
              >
                {' '}
                <Trash2 className="mr-2 h-4 w-4" /> Delete{' '}
              </DropdownMenuItem>{' '}
            </DropdownMenuContent>{' '}
          </DropdownMenu>{' '}
        </div>
      )
    },
  },
]

export const suggestionColumns = (onAction, onUpdate) => [
  {
    accessorKey: 'name',
    header: ({ column }) => (
      <Button
        variant="ghost"
        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
      >
        {' '}
        Name <ArrowUpDown className="ml-2 h-4 w-4" />{' '}
      </Button>
    ),
    cell: ({ row }) => (
      <div className="flex items-center gap-2">
        {' '}
        <TypeIcon type={row.original.type} />{' '}
        <span className="font-medium">{row.getValue('name')}</span>{' '}
      </div>
    ),
  },
  { accessorKey: 'country', header: 'Country' },
  {
    accessorKey: 'rationale',
    header: 'AI Rationale',
    cell: ({ row }) => (
      <div className="truncate max-w-sm">{row.getValue('rationale')}</div>
    ),
  },
  {
    accessorKey: 'searchTerms',
    header: 'Suggested Search Terms',
    cell: ({ row }) => <SearchTermManager entity={row.original} onUpdate={onUpdate} />,
  },
  {
    accessorKey: 'sourceEvent',
    header: 'Source Event',
    cell: ({ row }) => (
      <div className="truncate max-w-xs text-muted-foreground">
        {row.getValue('sourceEvent')}
      </div>
    ),
  },
  {
    id: 'actions',
    cell: ({ row }) => {
      const suggestion = row.original
      return (
        <div className="text-right space-x-2">
          {' '}
          <TooltipProvider>
            {' '}
            <Tooltip>
              {' '}
              <TooltipTrigger asChild>
                {' '}
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 text-green-400 hover:bg-green-500/10 hover:text-green-400"
                  onClick={() => onAction(suggestion, 'approved')}
                >
                  {' '}
                  <Check className="h-4 w-4" />{' '}
                </Button>{' '}
              </TooltipTrigger>{' '}
              <TooltipContent>
                {' '}
                <p>Approve and add to watchlist</p>{' '}
              </TooltipContent>{' '}
            </Tooltip>{' '}
            <Tooltip>
              {' '}
              <TooltipTrigger asChild>
                {' '}
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 text-red-400 hover:bg-red-500/10 hover:text-red-400"
                  onClick={() => onAction(suggestion, 'dismissed')}
                >
                  {' '}
                  <X className="h-4 w-4" />{' '}
                </Button>{' '}
              </TooltipTrigger>{' '}
              <TooltipContent>
                {' '}
                <p>Dismiss this suggestion</p>{' '}
              </TooltipContent>{' '}
            </Tooltip>{' '}
          </TooltipProvider>{' '}
        </div>
      )
    },
  },
]

```

## 📄 src/app/watchlist/page.jsx
*Lines: 131, Size: 7.26 KB*

```jsx
// apps/admin/src/app/watchlist/page.jsx (version 3.3.0 - Sheet Fix)
'use client'

import { useMemo, useState, useCallback } from 'react'
import { ServerCrash, PlusCircle } from 'lucide-react'
import { PageHeader, Button, Sheet, SheetContent, Tabs, TabsContent, TabsList, TabsTrigger, ConfirmationDialog } from '@headlines/ui'
import { useEntityManager } from '@/hooks/use-entity-manager'
import { watchlistColumns, suggestionColumns } from './columns'
import { DataTable } from '@headlines/ui'
import WatchlistEditor from './watchlist-editor'
import { toast } from 'sonner'
import { processWatchlistSuggestion, updateWatchlistEntity, deleteWatchlistEntity } from '@headlines/data-access'

async function updateWatchlistSuggestion_local(suggestionId, updateData) {
    const res = await fetch(`/api/watchlist/suggestions/${suggestionId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updateData)
    });
    return res.json();
}

export default function WatchlistPage() {
  const { entities: watchlist, setEntities: setWatchlist, isLoading: isLoadingWatchlist, error: watchlistError, handleSave: handleEditorSave, refetch: refetchWatchlist } = useEntityManager('/api/watchlist', 'WatchlistEntity', 'name')
  const { entities: suggestions, setEntities: setSuggestions, isLoading: isLoadingSuggestions, error: suggestionError, refetch: refetchSuggestions } = useEntityManager('/api/suggestions', 'WatchlistSuggestion', 'name', { dataKey: 'watchlistSuggestions' });

  const [isEditorOpen, setIsEditorOpen] = useState(false)
  const [selectedId, setSelectedId] = useState(null)
  const [confirmState, setConfirmState] = useState({ isOpen: false, entityId: null })

  const availableCountries = useMemo(() => {
    if (!watchlist) return []
    const countrySet = new Set(watchlist.map((item) => item.country).filter(Boolean))
    return Array.from(countrySet).sort()
  }, [watchlist])

  const handleEdit = (id) => { setSelectedId(id); setIsEditorOpen(true); }
  const handleAdd = () => { setSelectedId('new'); setIsEditorOpen(true); }

  const handleSuggestionAction = async (suggestion, action) => {
    const toastId = toast.loading(`Processing suggestion "${suggestion.name}"...`)
    const result = await processWatchlistSuggestion({ suggestionId: suggestion._id, action, })
    if (result.success) {
      if (action === 'approved') refetchWatchlist();
      refetchSuggestions();
      toast.success(result.message, { id: toastId });
    } else {
      toast.error(`Failed to ${action} suggestion: ${result.error}`, { id: toastId });
    }
  }

  const handleSuggestionUpdate = useCallback(async (suggestion, updateData) => {
      setSuggestions(prev => prev.map(s => s._id === suggestion._id ? { ...s, ...updateData } : s));
      const result = await updateWatchlistSuggestion_local(suggestion._id, updateData);
      if (!result.success) {
          toast.error(`Update failed: ${result.error}`);
          refetchSuggestions();
      }
  }, [setSuggestions, refetchSuggestions]);

  const handleRowUpdate = useCallback(async (entity, updateData) => {
      let updatedEntity = { ...entity, ...updateData };
      if (updateData.searchTerms) updatedEntity.hitCount = 'recalculating';
      setWatchlist((prev) => prev.map((e) => (e._id === entity._id ? updatedEntity : e)));
      if (updateData.status) toast.success(`Updated "${updatedEntity.name}" status to ${updatedEntity.status}.`);
      const result = await updateWatchlistEntity(entity._id, updateData);
      if (result.success) {
        setWatchlist((prev) => prev.map((e) => (e._id === result.data._id ? result.data : e)));
      } else {
        toast.error(`Update failed: ${result.error}`);
        refetchWatchlist();
      }
    }, [watchlist, setWatchlist, refetchWatchlist]
  );

  const handleDelete = (entityId) => { setConfirmState({ isOpen: true, entityId }); }
  const confirmDelete = async () => {
    const { entityId } = confirmState;
    setConfirmState({ isOpen: false, entityId: null });
    const toastId = toast.loading('Deleting entity...');
    const result = await deleteWatchlistEntity(entityId);
    if (result.success) {
      toast.success('Entity deleted.', { id: toastId });
      refetchWatchlist();
    } else {
      toast.error(`Deletion failed: ${result.error}`, { id: toastId });
    }
  }

  const activeEntityData = useMemo(() => {
    if (selectedId === 'new') return { _id: null, name: '', type: 'company', status: 'candidate', context: '', country: '', estimatedNetWorthUSD_MM: null, primaryCompany: '', notes: '', searchTerms: [] };
    return watchlist?.find((e) => e._id === selectedId) || null
  }, [selectedId, watchlist])
  
  const error = watchlistError || suggestionError
  const isLoading = isLoadingWatchlist || isLoadingSuggestions

  if (error) {
    return ( <div className="flex h-full w-full items-center justify-center text-center p-4"> <div className="p-8 rounded-lg bg-destructive/10 border border-destructive/50 max-w-md"> <ServerCrash className="w-12 h-12 mx-auto text-destructive mb-4" /> <h1 className="text-2xl font-bold">Failed to Load Data</h1> <p className="text-destructive-foreground/80 mt-2">{error}</p> </div> </div> )
  }

  return (
    <div className="flex flex-col h-full">
      <PageHeader title="Watchlist Management" description="Manage entities monitored by the pipeline and review AI-generated suggestions." >
        <Button onClick={handleAdd}> <PlusCircle className="mr-2 h-4 w-4" /> Add New Entity </Button>
      </PageHeader>
      <div className="mt-8 flex-grow min-h-0">
        <Tabs defaultValue="watchlist" className="h-full flex flex-col">
          <TabsList>
            <TabsTrigger value="watchlist"> Monitored Entities ({watchlist?.length || 0}) </TabsTrigger>
            <TabsTrigger value="suggestions"> AI Suggestions ({suggestions?.length || 0}) </TabsTrigger>
          </TabsList>
          <TabsContent value="watchlist" className="flex-grow min-h-0">
            <DataTable columns={watchlistColumns(handleEdit, handleRowUpdate, handleDelete, availableCountries)} data={watchlist || []} isLoading={isLoading} filterColumn="name" filterPlaceholder="Filter by name..." secondaryFilterColumn="country" secondaryFilterOptions={availableCountries} />
          </TabsContent>
          <TabsContent value="suggestions" className="flex-grow min-h-0">
            <DataTable columns={suggestionColumns(handleSuggestionAction, handleSuggestionUpdate)} data={suggestions || []} isLoading={isLoading} filterColumn="name" filterPlaceholder="Filter by name..." />
          </TabsContent>
        </Tabs>
      </div>
      <Sheet open={isEditorOpen} onOpenChange={setIsEditorOpen}>
        {/* DEFINITIVE FIX: The SheetContent component must have a single direct child. */}
        <SheetContent className="w-full sm:max-w-lg p-0">
          <WatchlistEditor key={selectedId} entity={activeEntityData} onSave={(saved) => { handleEditorSave(saved); setIsEditorOpen(false); }} onCancel={() => setIsEditorOpen(false)} countries={availableCountries} />
        </SheetContent>
      </Sheet>
      <ConfirmationDialog open={confirmState.isOpen} onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })} onConfirm={confirmDelete} title="Confirm Deletion" description="Are you sure you want to delete this entity? This action cannot be undone." confirmText="Delete Entity" />
    </div>
  )
}

```

## 📄 src/app/watchlist/suggestion-search-term-manager.jsx
*Lines: 86, Size: 3.42 KB*

```jsx
// apps/admin/src/app/watchlist/suggestion-search-term-manager.jsx (version 1.0.0)
'use client'

import React, { useState, useEffect, useRef } from 'react'
import { Button, Badge, Input, Popover, PopoverContent, PopoverTrigger } from '@headlines/ui'
import { PlusCircle, X } from 'lucide-react'

const EditableTermBadge = ({ term, onUpdate, onRemove }) => {
    const [isEditing, setIsEditing] = useState(false);
    const [editText, setEditText] = useState(term);
    const inputRef = useRef(null);

    useEffect(() => {
        if (isEditing && inputRef.current) {
            inputRef.current.focus();
            inputRef.current.select();
        }
    }, [isEditing]);

    const handleSave = () => {
        if (editText.trim() && editText.trim().toLowerCase() !== term) {
            onUpdate(term, editText.trim().toLowerCase());
        }
        setIsEditing(false);
    };
    
    if (isEditing) {
        return ( <Input ref={inputRef} value={editText} onChange={(e) => setEditText(e.target.value)} onBlur={handleSave} onKeyDown={(e) => { if (e.key === 'Enter') handleSave(); if (e.key === 'Escape') setIsEditing(false); }} className="h-6 text-xs w-auto inline-flex" style={{ width: `${Math.max(editText.length, 5)}ch` }} /> )
    }

    return (
        <Badge variant="secondary" className="group cursor-pointer" onClick={() => setIsEditing(true)}>
            {term}
            <button onClick={(e) => { e.stopPropagation(); onRemove(term); }} className="ml-1.5 opacity-50 group-hover:opacity-100 rounded-full hover:bg-background/50">
              <X className="h-3 w-3" />
            </button>
        </Badge>
    )
}

export const SuggestionSearchTermManager = ({ suggestion, onUpdate }) => {
  const [newTerm, setNewTerm] = useState('');
  const [isPopoverOpen, setIsPopoverOpen] = useState(false);

  const handleUpdateTerms = (newTerms) => {
    onUpdate(suggestion, { searchTerms: [...new Set(newTerms)] });
  };

  const handleAddTerm = () => {
    if (newTerm.trim()) {
      handleUpdateTerms([...(suggestion.searchTerms || []), newTerm.trim().toLowerCase()]);
      setNewTerm('');
      setIsPopoverOpen(false);
    }
  };

  const handleRemoveTerm = (termToRemove) => {
    handleUpdateTerms((suggestion.searchTerms || []).filter(t => t !== termToRemove));
  };
  
  const handleUpdateTerm = (oldTerm, newTerm) => {
    handleUpdateTerms((suggestion.searchTerms || []).map(t => t === oldTerm ? newTerm : t));
  };
  
  return (
    <div className="flex flex-wrap items-center gap-1 max-w-md">
      {(suggestion.searchTerms || []).map(term => (
        <EditableTermBadge key={term} term={term} onUpdate={handleUpdateTerm} onRemove={handleRemoveTerm} />
      ))}
       <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>
        <PopoverTrigger asChild>
            <Button size="icon" variant="ghost" className="h-6 w-6 rounded-full">
              <PlusCircle className="h-4 w-4" />
            </Button>
        </PopoverTrigger>
        <PopoverContent className="w-48 p-2">
            <div className="flex items-center gap-1">
                <Input value={newTerm} onChange={(e) => setNewTerm(e.target.value)} onKeyDown={(e) => e.key === 'Enter' && handleAddTerm()} placeholder="Add term..." className="h-7 text-xs" />
                <Button size="icon" variant="default" className="h-7 w-7" onClick={handleAddTerm}> <PlusCircle className="h-4 w-4" /> </Button>
            </div>
        </PopoverContent>
       </Popover>
    </div>
  )
}

```

## 📄 src/app/watchlist/watchlist-editor.jsx
*Lines: 93, Size: 5.97 KB*

```jsx
// apps/admin/src/app/watchlist/watchlist-editor.jsx (version 2.2.0 - Final)
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { Button, CardFooter, Input, Textarea, Label, Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@headlines/ui'
import { toast } from 'sonner'
import { Save, Loader2, PlusCircle, X, Sparkles } from 'lucide-react'

const FormField = ({ id, label, children }) => (
  <div className="space-y-2"> <Label htmlFor={id} className="text-sm font-medium text-muted-foreground pl-1">{label}</Label> {children} </div>
)

export default function WatchlistEditor({ entity, onSave, onCancel, countries = [] }) {
  const [formData, setFormData] = useState(entity)
  const [isSaving, setIsSaving] = useState(false)
  const [isEnriching, setIsEnriching] = useState(false)
  const [isDirty, setIsDirty] = useState(false)

  useEffect(() => { setFormData(entity); setIsDirty(false); }, [entity])

  if (!entity) return null

  const isNewEntity = !entity._id
  const handleChange = (key, value) => { setFormData((prev) => ({ ...prev, [key]: value })); setIsDirty(true); }

  const handleAIEnrich = async () => {
    if (!formData.name) { toast.warning('Please enter a name before enriching.'); return; }
    setIsEnriching(true)
    const toastId = toast.loading('AI is enriching entity context...')
    try {
      const [contextRes, termsRes] = await Promise.all([
        fetch('/api/ai/enrich-entity', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ name: formData.name, type: formData.type }), }),
        fetch('/api/ai/suggest-search-terms', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ name: formData.name, type: formData.type, context: formData.context, }), }),
      ])
      const contextData = await contextRes.json()
      const termsData = await termsRes.json()
      if (!contextRes.ok && !termsRes.ok) throw new Error('AI enrichment failed on all fronts.')
      const updates = {}
      if (contextRes.ok && contextData.context) updates.context = contextData.context
      if (termsRes.ok && termsData.searchTerms) updates.searchTerms = [...new Set([...(formData.searchTerms || []), ...termsData.searchTerms])]
      setFormData((prev) => ({ ...prev, ...updates }))
      setIsDirty(true)
      toast.success('AI enrichment successful!', { id: toastId })
    } catch (error) {
      toast.error('AI Enrichment Failed', { id: toastId, description: error.message })
    } finally {
      setIsEnriching(false)
    }
  }

  const handleSave = async () => {
    setIsSaving(true)
    const url = isNewEntity ? '/api/watchlist' : `/api/watchlist/${entity._id}`;
    const method = isNewEntity ? 'POST' : 'PATCH';
    try {
      const res = await fetch(url, { method, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(formData) });
      const result = await res.json();
      if (!res.ok) throw new Error(result.error || 'Failed to save entity.');
      
      onSave(result.entity);
      toast.success(`Entity "${result.entity.name}" ${isNewEntity ? 'created' : 'updated'}.`);
    } catch (error) {
      toast.error(`Error saving entity: ${error.message}`);
    } finally {
      setIsSaving(false);
    }
  }

  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="h-full flex flex-col" >
      <div className="flex justify-between items-center flex-shrink-0 p-6 border-b border-white/10">
        <div className="space-y-1"> <h1 className="text-2xl font-bold tracking-tight flex items-center gap-2"> {isNewEntity && <PlusCircle />} {isNewEntity ? 'Create New Entity' : 'Edit Entity'} </h1> <p className="text-sm text-muted-foreground"> {isNewEntity ? 'Add a new target to the watchlist.' : formData.name} </p> </div>
        <Button variant="ghost" size="icon" onClick={onCancel}> <X className="h-4 w-4" /> </Button>
      </div>
      <div className="flex-grow overflow-y-auto p-6 space-y-6">
        <FormField id="name" label="Name">
          <div className="flex gap-2"> <Input value={formData.name || ''} onChange={(e) => handleChange('name', e.target.value)} /> <Button variant="outline" onClick={handleAIEnrich} disabled={isEnriching || !formData.name} > {isEnriching ? <Loader2 className="h-4 w-4 animate-spin" /> : <Sparkles className="h-4 w-4" />} AI Enrich </Button> </div>
        </FormField>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormField label="Type"> <Select value={formData.type} onValueChange={(v) => handleChange('type', v)}> <SelectTrigger> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="company">Company</SelectItem> <SelectItem value="person">Person</SelectItem> <SelectItem value="family">Family</SelectItem> </SelectContent> </Select> </FormField>
          <FormField label="Status"> <Select value={formData.status} onValueChange={(v) => handleChange('status', v)}> <SelectTrigger> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="candidate">Candidate</SelectItem> <SelectItem value="active">Active</SelectItem> <SelectItem value="inactive">Inactive</SelectItem> </SelectContent> </Select> </FormField>
        </div>
        <FormField id="context" label="Context / AKA"> <Input value={formData.context || ''} onChange={(e) => handleChange('context', e.target.value)} placeholder="e.g., The Lego Family" /> </FormField>
        <FormField id="searchTerms" label="Search Terms (Crums)"> <Textarea value={(formData.searchTerms || []).join(', ')} onChange={(e) => handleChange('searchTerms', e.target.value.split(',').map((s) => s.trim().toLowerCase()))} placeholder="e.g., hanni, kasprzak, ecco" /> </FormField>
      </div>
      <CardFooter className="mt-auto border-t border-white/10 p-6 flex justify-end">
        <Button onClick={handleSave} disabled={!isDirty || isSaving}> {isSaving ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Save className="mr-2 h-4 w-4" />} {isSaving ? 'Saving...' : 'Save Changes'} </Button>
      </CardFooter>
    </motion.div>
  )
}

```

## 📄 src/hooks/use-admin-manager.js
*Lines: 75, Size: 1.98 KB*

```javascript
// apps/admin/src/hooks/use-admin-manager.js (version 3.3.0 - Correct Serialization)
'use client'

import { useState, useEffect, useCallback } from 'react'
import { useDebounce } from '@headlines/utils'
import { toast } from 'sonner'
import { useAuth } from '@headlines/auth/src/useAuth'

export function useAdminManager(
  apiPath,
  page,
  sorting,
  columnFilters
) {
  const [data, setData] = useState([])
  const [total, setTotal] = useState(0)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState(null)
  const { user } = useAuth()

  const debouncedFilters = useDebounce(columnFilters, 500)

  const fetchData = useCallback(async () => {
    if (!user) {
      setIsLoading(false)
      return
    }

    setIsLoading(true)
    setError(null)
    try {
      const sortParam = sorting[0] ? `${sorting[0].id}_${sorting[0].desc ? 'desc' : 'asc'}` : 'createdAt_desc';
      const params = new URLSearchParams();
      params.set('page', page.toString());
      params.set('sort', sortParam);
      
      // Correctly serialize complex objects for URL parameters
      if (debouncedFilters && debouncedFilters.length > 0) {
        params.set('columnFilters', JSON.stringify(debouncedFilters));
      }

      const res = await fetch(`${apiPath}?${params.toString()}`, {
        headers: {
          'x-dev-mode': process.env.NODE_ENV === 'development' ? 'true' : 'false',
        },
      })
      if (!res.ok) {
        const errorData = await res.json()
        throw new Error(errorData.error || 'Failed to fetch data.')
      }
      const result = await res.json()
      setData(result.data)
      setTotal(result.total)
    } catch (e) {
      setError(e.message)
      toast.error(`Failed to load data: ${e.message}`)
    } finally {
      setIsLoading(false)
    }
  }, [apiPath, page, sorting, debouncedFilters, user])

  useEffect(() => {
    fetchData()
  }, [fetchData])

  return {
    data,
    setData,
    total,
    isLoading,
    error,
    refetch: fetchData,
  }
}

```

## 📄 src/hooks/use-entity-manager.js
*Lines: 109, Size: 3.46 KB*

```javascript
// apps/admin/src/hooks/use-entity-manager.js (version 2.1.0)
'use client'

import { useState, useEffect, useCallback } from 'react'

export function useEntityManager(apiPath, entityName, defaultSortKey, options = {}) {
  const { dataKey } = options
  const [entities, setEntities] = useState(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState(null)

  const fetchEntities = useCallback(async () => {
    setIsLoading(true)
    setError(null)
    return fetch(apiPath)
      .then(async (res) => {
        if (!res.ok) {
          const errorData = await res.json()
          throw new Error(errorData.details || `Failed to fetch from ${apiPath}.`)
        }
        return res.json()
      })
      .then((data) => {
        // DEFINITIVE FIX: Check if the API response has a 'data' property that is an array.
        // This handles server-paginated endpoints that return an object like { data: [...], total: ... }.
        if (data && Array.isArray(data.data)) {
          setEntities(data.data)
          return
        }

        if (dataKey && data[dataKey] && Array.isArray(data[dataKey])) {
          setEntities(data[dataKey])
          return
        }

        const lowerEntityName = entityName.toLowerCase()
        const keyMappings = {
          country: 'countries',
          watchlistentity: 'entities',
          subscriber: 'subscribers',
        }
        const key = keyMappings[lowerEntityName] || `${lowerEntityName.toLowerCase()}s`

        if (data[key] && Array.isArray(data[key])) {
          // Perform default sort on the client after fetching
          const sortedData = [...data[key]].sort((a, b) => {
            // Handle nested keys like 'analytics.totalRelevant'
            const getDeepValue = (obj, path) =>
              path.split('.').reduce((o, i) => (o ? o[i] : 0), obj)
            const valA = getDeepValue(a, defaultSortKey)
            const valB = getDeepValue(b, defaultSortKey)
            if (typeof valA === 'number' && typeof valB === 'number') {
              return valB - valA // Default to descending for numbers
            }
            if (typeof valA === 'string' && typeof valB === 'string') {
              return valA.localeCompare(valB) // Default to ascending for strings
            }
            return 0
          })
          setEntities(sortedData)
        } else {
          if (
            typeof data === 'object' &&
            data !== null &&
            !Array.isArray(data) &&
            Object.keys(data).length > 0
          ) {
            setEntities(data)
          } else {
            throw new Error(
              `API response from '${apiPath}' did not contain the expected key: '${key}' or '${dataKey}'.`
            )
          }
        }
      })
      .catch((err) => {
        console.error(err)
        setError(err.message)
      })
      .finally(() => setIsLoading(false))
  }, [apiPath, entityName, dataKey, defaultSortKey])

  useEffect(() => {
    fetchEntities()
  }, [fetchEntities])

  const handleSave = useCallback((savedEntity) => {
    setEntities((prev) => {
      if (!prev || !Array.isArray(prev)) return [savedEntity]

      const exists = prev.some((e) => e._id === savedEntity._id)
      if (exists) {
        return prev.map((e) => (e._id === savedEntity._id ? savedEntity : e))
      } else {
        return [savedEntity, ...prev]
      }
    })
  }, [])

  return {
    entities,
    setEntities,
    isLoading,
    error,
    handleSave,
    refetch: fetchEntities,
  }
}

```

## 📄 src/lib/init-shared-logic.js
*Lines: 25, Size: 861 Bytes*

```javascript
// apps/admin/src/lib/init-shared-logic.js (version 8.0.0)
import { configure as configureScraperLogic } from '@headlines/scraper-logic/src/config.js';
import * as appConfig from '@/../app.config.js';
import { settings, initializeSettings } from '@headlines/config/server';
import { logger } from '@headlines/utils/server';
import dbConnect from '@headlines/data-access/src/dbConnect.js'; // Import dbConnect

let isInitialized = false;

export async function initializeSharedLogic() {
  if (isInitialized) {
    return;
  }

  // CRITICAL FIX: Establish database connection *before* attempting to load settings.
  await dbConnect();
  
  // Now that a connection is guaranteed, initialize settings from the database.
  await initializeSettings();
  
  configureScraperLogic({ ...appConfig, logger, settings, utilityFunctions: {} });

  isInitialized = true;
}

```

## 📄 src/middleware.js
*Lines: 29, Size: 975 Bytes*

```javascript
// apps/admin/src/middleware.js (version 2.1.0)
import { NextResponse } from 'next/server'

// This minimal middleware's only job is to inject the 'x-dev-mode' header
// into API requests during development. This allows the API routes' `verifySession`
// check to be bypassed, enabling a seamless developer experience.
export function middleware(request) {
  const requestHeaders = new Headers(request.headers)
  if (process.env.NODE_ENV === 'development') {
    requestHeaders.set('x-dev-mode', 'true')
  }
  return NextResponse.next({
    request: {
      headers: requestHeaders,
    },
  })
}

export const config = {
  /*
   * Match all request paths except for the ones starting with:
   * - _next/static (static files)
   * - _next/image (image optimization files)
   * - favicon.ico (favicon file)
   * This ensures the dev-mode header is applied to pages and Server Actions, not just API routes.
   */
  matcher: ['/((?!_next/static|_next/image|favicon.ico).*)'],
}

```

## 📄 tailwind.config.js
*Lines: 16, Size: 679 Bytes*

```javascript
// apps/admin/tailwind.config.js (version 6.0.0 - Monorepo Root Relative)
/** @type {import('tailwindcss').Config} */
module.exports = {
  // Use the shared preset from the UI package for a consistent theme.
  presets: [require('../../packages/ui/tailwind.preset.cjs')],

  // The 'content' paths must be relative to the MONOREPO ROOT,
  // not the current file. This ensures that when the Tailwind
  // compiler runs from the root, it can correctly locate all
  // source files that contain Tailwind classes. This is the
  // definitive fix for CSS not loading in a monorepo setup.
  content: [
    './apps/admin/src/**/*.{js,jsx}',
    './packages/ui/src/**/*.{js,jsx}',
  ],
}
```

# üìÅ PROJECT DIRECTORY STRUCTURE

Total: 10 files, 2 directories

```
headlines-monorepo/
‚îú‚îÄ‚îÄ üìÅ src/
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ data/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ countries.json
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ languages.json
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ apiCallTracker.js
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ countries.js
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ helpers.js
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ index.js
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ languages.js
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ logger.js
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ realtimeEvents.js
‚îî‚îÄ‚îÄ üìÑ package.json
```

# üìã PROJECT METADATA

**Generated**: 2025-10-10T00:11:02.010Z
**Repository Path**: /home/mark/Repos/projects/headlines-monorepo/packages/utils-shared
**Total Files**: 10
**Package**: @headlines/utils-shared@2.0.0
**Description**: Isomorphic (client and server safe) utilities and hooks.



---


## üìÑ package.json
*Lines: 18, Size: 380 Bytes*

```json
{
  "name": "@headlines/utils-shared",
  "version": "2.0.0",
  "description": "Isomorphic (client and server safe) utilities and hooks.",
  "main": "src/index.js",
  "type": "module",
  "license": "ISC",
  "exports": {
    ".": "./src/index.js"
  },
  "dependencies": {
    "clsx": "^2.1.1",
    "pusher-js": "^8.4.0",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.3.0"
  }
}

```

## üìÑ src/apiCallTracker.js
*Lines: 49, Size: 1.02 KB*

```javascript
// packages/utils-shared/src/apiCallTracker.js (version 1.0.0)
import { logger } from './logger.js'

// Prices per 1000 calls in USD.
const servicePricing = {
  serper_news: 2.5,
  serper_search: 2.5,
  newsapi_search: 0, // Developer plan is free
  wikipedia: 0,
}

class ApiCallTracker {
  constructor() {
    this.usage = {}
    this.reset()
  }

  reset() {
    this.usage = {}
    Object.keys(servicePricing).forEach((service) => {
      this.usage[service] = { calls: 0, cost: 0 }
    })
  }

  recordCall(service) {
    if (!service) return

    if (!this.usage[service]) {
      logger.warn(
        `API call recorded for an un-priced service: ${service}. Calls will be tracked, but cost will be $0.`
      )
      this.usage[service] = { calls: 0, cost: 0 }
    }

    this.usage[service].calls += 1

    const pricePer1000 = servicePricing[service]
    if (pricePer1000) {
      this.usage[service].cost += pricePer1000 / 1000
    }
  }

  getStats() {
    return this.usage
  }
}

export const apiCallTracker = new ApiCallTracker()

```

## üìÑ src/countries.js
*Lines: 33, Size: 1.09 KB*

```javascript
// packages/utils-shared/src/countries.js (CORRECTED)
import isoCountryFlags from './data/countries.json' with { type: 'json' }

const defaultFlag = 'üåç'
const countryNameToIsoMap = new Map(Object.entries(isoCountryFlags))
const isoToFlagMap = new Map()

for (const [name, iso] of countryNameToIsoMap.entries()) {
  if (iso.length === 2) {
    const flag = iso
      .toUpperCase()
      .replace(/./g, (char) => String.fromCodePoint(char.charCodeAt(0) + 127397))
    isoToFlagMap.set(iso, flag)
  } else {
    const specialFlags = { Global: 'üåê', Europe: 'üá™üá∫', Scandinavia: '‚ùÑÔ∏è' }
    if (specialFlags[name]) isoToFlagMap.set(iso, specialFlags[name])
  }
}

export function getCountryFlag(countryName) {
  // DEFINITIVE FIX: Add a type check to prevent crashes on invalid input.
  if (!countryName || typeof countryName !== 'string') {
    return defaultFlag
  }
  for (const [key, value] of countryNameToIsoMap.entries()) {
    if (key.toLowerCase() === countryName.trim().toLowerCase()) {
      const flag = isoToFlagMap.get(value)
      return flag || defaultFlag
    }
  }
  return defaultFlag
}

```

## üìÑ src/data/countries.json
*Lines: 110, Size: 2.06 KB*

```json
{
  "Global": "XX",
  "Europe": "EU",
  "Scandinavia": "SC",
  "Afghanistan": "AF",
  "Albania": "AL",
  "Algeria": "DZ",
  "Andorra": "AD",
  "Angola": "AO",
  "Argentina": "AR",
  "Armenia": "AM",
  "Australia": "AU",
  "Austria": "AT",
  "Azerbaijan": "AZ",
  "Bahamas": "BS",
  "Bahrain": "BH",
  "Bangladesh": "BD",
  "Belarus": "BY",
  "Belgium": "BE",
  "Benin": "BJ",
  "Bhutan": "BT",
  "Bolivia": "BO",
  "Bosnia and Herzegovina": "BA",
  "Brazil": "BR",
  "Bulgaria": "BG",
  "Cambodia": "KH",
  "Canada": "CA",
  "Chile": "CL",
  "China": "CN",
  "Colombia": "CO",
  "Croatia": "HR",
  "Cuba": "CU",
  "Cyprus": "CY",
  "Czech Republic": "CZ",
  "Denmark": "DK",
  "Egypt": "EG",
  "Estonia": "EE",
  "Ethiopia": "ET",
  "Finland": "FI",
  "France": "FR",
  "Georgia": "GE",
  "Germany": "DE",
  "Ghana": "GH",
  "Greece": "GR",
  "Hungary": "HU",
  "Iceland": "IS",
  "India": "IN",
  "Indonesia": "ID",
  "Iran": "IR",
  "Iraq": "IQ",
  "Ireland": "IE",
  "Israel": "IL",
  "Italy": "IT",
  "Japan": "JP",
  "Jordan": "JO",
  "Kazakhstan": "KZ",
  "Kenya": "KE",
  "Kuwait": "KW",
  "Latvia": "LV",
  "Lebanon": "LB",
  "Liechtenstein": "LI",
  "Lithuania": "LT",
  "Luxembourg": "LU",
  "Malaysia": "MY",
  "Malta": "MT",
  "Mexico": "MX",
  "Monaco": "MC",
  "Mongolia": "MN",
  "Montenegro": "ME",
  "Morocco": "MA",
  "Nepal": "NP",
  "Netherlands": "NL",
  "New Zealand": "NZ",
  "Nigeria": "NG",
  "North Korea": "KP",
  "North Macedonia": "MK",
  "Norway": "NO",
  "Oman": "OM",
  "Pakistan": "PK",
  "Peru": "PE",
  "Philippines": "PH",
  "Poland": "PL",
  "Portugal": "PT",
  "Qatar": "QA",
  "Romania": "RO",
  "Russia": "RU",
  "Saudi Arabia": "SA",
  "Serbia": "RS",
  "Singapore": "SG",
  "Slovakia": "SK",
  "Slovenia": "SI",
  "South Africa": "ZA",
  "South Korea": "KR",
  "Spain": "ES",
  "Sri Lanka": "LK",
  "Sweden": "SE",
  "Switzerland": "CH",
  "Syria": "SY",
  "Taiwan": "TW",
  "Thailand": "TH",
  "Turkey": "TR",
  "Ukraine": "UA",
  "United Arab Emirates": "AE",
  "United Kingdom": "GB",
  "United States": "US",
  "Uzbekistan": "UZ",
  "Vietnam": "VN",
  "Yemen": "YE"
}

```

## üìÑ src/data/languages.json
*Lines: 10, Size: 167 Bytes*

```json
{
    "English": "en",
    "Danish": "da",
    "Swedish": "sv",
    "Norwegian": "no",
    "German": "de",
    "French": "fr",
    "Spanish": "es",
    "Dutch": "nl"
}
```

## üìÑ src/helpers.js
*Lines: 50, Size: 1.1 KB*

```javascript
// packages/utils-shared/src/helpers.js (Corrected)
import { clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs) {
  return twMerge(clsx(inputs))
}

export function truncateString(str, maxLength = 100) {
  if (typeof str !== 'string' || str.length <= maxLength) {
    return str
  }
  return str.substring(0, maxLength) + '...'
}

export function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms))
}

export function escapeHtml(str) {
  if (str === null || str === undefined) return ''
  return String(str).replace(/[<>&'"]/g, (c) => {
    switch (c) {
      case '<':
        return '&lt;'
      case '>':
        return '&gt;'
      case '&':
        return '&amp;'
      case "'":
        return '&apos;'
      case '"':
        return '&quot;'
    }
  })
}

// NEW FUNCTION ADDED
export function groupItemsByCountry(items, countryKey) {
  if (!items) return {}
  return items.reduce((acc, item) => {
    const country = item[countryKey] || 'Unknown'
    if (!acc[country]) {
      acc[country] = []
    }
    acc[country].push(item)
    return acc
  }, {})
}

```

## üìÑ src/index.js
*Lines: 8, Size: 434 Bytes*

```javascript
// packages/utils-shared/src/index.js
export { cn, truncateString, sleep, escapeHtml, groupItemsByCountry } from './helpers.js'
export { getCountryFlag } from './countries.js'
export { languageList, languageMap } from './languages.js'
export { apiCallTracker } from './apiCallTracker.js'
export { REALTIME_CHANNELS, REALTIME_EVENTS } from './realtimeEvents.js'
export { logger, setLogger } from './logger.js' // Export the new logger

```

## üìÑ src/languages.js
*Lines: 6, Size: 251 Bytes*

```javascript
// packages/utils-shared/src/languages.js (NEW FILE)
import languageData from './data/languages.json' with { type: 'json' }

export const languageList = Object.keys(languageData).sort()
export const languageMap = new Map(Object.entries(languageData))

```

## üìÑ src/logger.js
*Lines: 47, Size: 1.31 KB*

```javascript
// packages/utils-shared/src/logger.js
/**
 * A universal, isomorphic logger that can be safely imported in any environment
 * (Node.js, Next.js server, or client).
 *
 * It acts as a proxy. By default, it uses `console`. If a more powerful logger
 * (like Pino) is provided via the `setLogger` function at application startup,
 * it will transparently use that instead.
 */

const createSimpleLogger = () => {
  const simpleLogger = {}
  const levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal']
  levels.forEach((level) => {
    const consoleMethod =
      level === 'fatal' ? 'error' : level === 'trace' || level === 'debug' ? 'log' : level
    if (typeof console[consoleMethod] === 'function') {
      simpleLogger[level] = (...args) => {
        console[consoleMethod](`[${level.toUpperCase()}]`, ...args)
      }
    } else {
      simpleLogger[level] = (...args) => {
        console.log(`[${level.toUpperCase()}]`, ...args)
      }
    }
  })
  return simpleLogger
}

let loggerInstance = createSimpleLogger()

export function setLogger(instance) {
  if (instance && typeof instance.info === 'function') {
    loggerInstance = instance
  }
}

export const logger = new Proxy(
  {},
  {
    get(target, prop) {
      // Forward any property access to the current logger instance
      return loggerInstance[prop]
    },
  }
)

```

## üìÑ src/realtimeEvents.js
*Lines: 15, Size: 462 Bytes*

```javascript
// packages/utils-shared/src/realtimeEvents.js (version 1.0.0)
// This file centralizes the names of all real-time channels and events,
// eliminating "magic strings" and preventing typos between the backend
// that triggers events and the frontend that listens for them.

export const REALTIME_CHANNELS = {
  ARTICLES: 'articles-channel',
  EVENTS: 'events-channel',
}

export const REALTIME_EVENTS = {
  NEW_ARTICLE: 'new-article',
  NEW_EVENT: 'new-event',
}

```

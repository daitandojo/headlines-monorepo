// packages/models/src/Article.js (version 5.0.0 - Self-Contained)
import mongoose from 'mongoose';
import { ARTICLE_STATUSES } from './constants.js';
const { Schema, model, models } = mongoose;
const LifecycleEventSchema = new Schema({ stage: { type: String, required: true }, status: { type: String, required: true }, reason: { type: String }, timestamp: { type: Date, default: Date.now }, }, { _id: false });
const ArticleSchema = new Schema({ headline: { type: String, required: true, trim: true, minlength: 5, maxlength: 500 }, headline_en: { type: String, trim: true }, link: { type: String, required: true, unique: true, trim: true }, newspaper: { type: String, required: true, trim: true }, source: { type: String, required: true, trim: true }, country: { type: String, trim: true, index: true }, imageUrl: { type: String, trim: true }, headline_selector: { type: String, trim: true }, relevance_headline: { type: Number, required: true, min: 0, max: 100 }, assessment_headline: { type: String, required: true, trim: true }, classification: { type: String, trim: true }, topic: { type: String, trim: true }, relevance_article: { type: Number, min: 0, max: 100 }, assessment_article: { type: String, trim: true }, amount: { type: Number }, key_individuals: [{ _id: false, name: { type: String, trim: true }, role_in_event: { type: String, trim: true }, company: { type: String, trim: true }, email_suggestion: { type: String, trim: true }, }], enrichment_error: { type: String, trim: true }, emailed: { type: Boolean, default: false }, embedding: { type: [Number] }, synthesizedEventId: { type: Schema.Types.ObjectId, ref: 'SynthesizedEvent', index: true, required: false, }, status: { type: String, enum: ARTICLE_STATUSES, default: 'scraped', index: true }, pipeline_lifecycle: { type: [LifecycleEventSchema], default: [] }, }, { timestamps: true, collection: 'articles', methods: { toRealtimePayload() { return { _id: this._id, headline: this.headline, headline_en: this.headline_en, link: this.link, newspaper: this.newspaper, country: this.country, topic: this.topic, relevance_article: this.relevance_article, assessment_article: this.assessment_article, key_individuals: (this.key_individuals || []).map((p) => ({ name: p.name, role_in_event: p.role_in_event, company: p.company, })), createdAt: this.createdAt, updatedAt: this.updatedAt, }; }, }, });
ArticleSchema.index({ headline: 'text', headline_en: 'text', assessment_article: 'text' });
ArticleSchema.index({ newspaper: 1, createdAt: -1 });
ArticleSchema.index({ relevance_article: -1, createdAt: -1 });
ArticleSchema.index({ relevance_headline: -1, createdAt: -1 });
ArticleSchema.index({ country: 1, createdAt: -1 });
export default models.Article || model('Article', ArticleSchema);

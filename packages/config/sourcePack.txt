# 📁 PROJECT DIRECTORY STRUCTURE

Total: 5 files, 1 directories

```
headlines/
├── 📁 src/
│   ├── 📄 envSchema.js
│   ├── 📄 index.js
│   ├── 📄 server.js
│   └── 📄 settings.js
└── 📄 package.json
```

# 📋 PROJECT METADATA

**Generated**: 2025-09-17T10:46:26.442Z
**Repository Path**: /home/mark/Repos/projects/headlines/packages/config
**Total Files**: 5
**Package**: @headlines/config@3.0.0
**Description**: Shared environment schema validation for the Headlines monorepo.



---


## 📄 package.json
*Lines: 18, Size: 370 Bytes*

```json
{
  "name": "@headlines/config",
  "version": "3.0.0",
  "description": "Shared environment schema validation for the Headlines monorepo.",
  "type": "module",
  "exports": {
    ".": "./src/index.js",
    "./server": "./src/server.js"
  },
  "license": "ISC",
  "dependencies": {
    "zod": "^3.23.8"
  },
  "peerDependencies": {
    "@headlines/models": "1.0.0"
  }
}

```

## 📄 src/envSchema.js
*Lines: 59, Size: 2.22 KB*

```javascript
// packages/config/src/envSchema.js (version 8.0.0)
import { z } from 'zod'

const stringToBoolean = z.string().transform((val) => val === 'true').or(z.boolean())
const stringToNumber = z.string().transform((val) => parseInt(val, 10))

const envSchema = z.object({
  NODE_ENV: z.enum(['development', 'production']).default('development'),
  MONGO_URI: z.string().url(),
  JWT_SECRET: z.string().min(32),
  LOG_LEVEL: z.enum(['debug', 'info', 'warn', 'error']).default('info'),
  CONCURRENCY_LIMIT: stringToNumber.default('3'),
  OPENAI_API_KEY: z.string().startsWith('sk-'),
  PINECONE_API_KEY: z.string().min(1),
  PINECONE_INDEX_NAME: z.string().min(1).default('headlines'),
  // Upstash Redis credentials
  UPSTASH_REDIS_REST_URL: z.string().url().optional(),
  UPSTASH_REDIS_REST_TOKEN: z.string().min(1).optional(),
  SMTP_HOST: z.string().min(1),
  SMTP_PORT: stringToNumber,
  SMTP_SECURE: stringToBoolean,
  SMTP_USER: z.string().email(),
  SMTP_PASS: z.string().min(1),
  SMTP_FROM_ADDRESS: z.string().email(),
  SMTP_FROM_NAME: z.string().min(1).default('Headlines AI'),
  NEXT_PUBLIC_VAPID_PUBLIC_KEY: z.string().min(1),
  VAPID_PRIVATE_KEY: z.string().min(1),
  VAPID_SUBJECT: z.string().startsWith('mailto:'),
  NEXT_PUBLIC_PUSHER_KEY: z.string().min(1),
  NEXT_PUBLIC_PUSHER_CLUSTER: z.string().min(1),
  PUSHER_APP_ID: z.string().min(1),
  PUSHER_KEY: z.string().min(1),
  PUSHER_SECRET: z.string().min(1),
  PUSHER_CLUSTER: z.string().min(1),
  GROQ_API_KEY: z.string().startsWith('gsk_').optional(),
  SERPER_API_KEY: z.string().min(1).optional(),
  NEWSAPI_API_KEY: z.string().min(1),
});

let validatedEnv = null;

function validateAndExportEnv() {
    if (validatedEnv) return validatedEnv;
    try {
        validatedEnv = envSchema.parse(process.env);
        return validatedEnv;
    } catch (error) {
        console.error("\n❌ CRITICAL: Invalid environment variables found!\n");
        console.error(JSON.stringify(error.flatten().fieldErrors, null, 2));
        console.error("\nHalting application. Please update your .env file.\n");
        if (typeof process !== 'undefined' && process.exit) {
          process.exit(1);
        }
        throw new Error("Invalid environment variables");
    }
}

export const env = validateAndExportEnv();

```

## 📄 src/index.js
*Lines: 8, Size: 343 Bytes*

```javascript
// packages/config/src/index.js (version 9.0.0 - Client Safe)
// This is the CLIENT-SAFE entrypoint. It only exports the validated env object.
// It deliberately does NOT export 'settings' or 'initializeSettings' to avoid
// pulling in server-side model dependencies into client bundles.
import { env } from './envSchema.js';

export { env };

```

## 📄 src/server.js
*Lines: 7, Size: 263 Bytes*

```javascript
// packages/config/src/server.js (version 1.0.0)
// This file is the server-only entrypoint for the config package.
import { env } from './envSchema.js';
import { settings, initializeSettings } from './settings.js';

export { env, settings, initializeSettings };

```

## 📄 src/settings.js
*Lines: 55, Size: 1.6 KB*

```javascript
// packages/config/src/settings.js (version 2.2.0)
import { Setting } from '@headlines/models'
import { logger } from '@headlines/utils/server';

// These defaults are used ONLY if the values are not found in the database.
const DEFAULTS = {
  HEADLINES_RELEVANCE_THRESHOLD: 35,
  ARTICLES_RELEVANCE_THRESHOLD: 50,
  EVENT_RELEVANCE_THRESHOLD: 59,
  MINIMUM_EVENT_AMOUNT_USD_MILLIONS: 20,
  HIGH_SIGNAL_HEADLINE_THRESHOLD: 90,
  AGENT_DISAGREEMENT_THRESHOLD: 50,
  SINGLETON_RELEVANCE_THRESHOLD: 85,
  HIGH_VALUE_DEAL_USD_MM: 50,
  SIGNIFICANT_PRIVATE_BENEFICIARY_USD_MM: 30,
  WATCHLIST_SCORE_BOOST: 35,
  SUGGESTION_GENERATION_THRESHOLD: 80,
  MIN_ARTICLE_CHARS: 100,
  LLM_MODEL_HEADLINE_ASSESSMENT: 'gpt-5-mini',
  LLM_MODEL_ARTICLE_ASSESSMENT: 'gpt-5-mini',
  LLM_MODEL_SYNTHESIS: 'gpt-5-mini',
  LLM_MODEL_UTILITY: 'gpt-5-nano',
}

export const settings = { ...DEFAULTS }

let isInitialized = false

export async function initializeSettings() {
  if (isInitialized) return
  logger.info('Loading pipeline settings from database...');
  try {
    const dbSettings = await Setting.find({}).lean()
    if (dbSettings.length === 0) {
      logger.warn(
        'No settings found in the database. The pipeline will run on default values.'
      )
    } else {
      dbSettings.forEach((setting) => {
        settings[setting.key] = setting.value
      })
      logger.info(
        `Successfully loaded ${dbSettings.length} settings from the database.`
      )
    }
    isInitialized = true
  } catch (error) {
    logger.error(
      'CRITICAL: Failed to load settings from database. Halting.',
      error
    )
    throw error
  }
}

```

# 📁 PROJECT DIRECTORY STRUCTURE

Total: 6 files, 1 directories

```
headlines/
├── 📁 src/
│   ├── 📄 envSchema.js
│   ├── 📄 index.js
│   ├── 📄 next.js
│   ├── 📄 node.js
│   └── 📄 settings.js
└── 📄 package.json
```

# 📋 PROJECT METADATA

**Generated**: 2025-09-29T22:40:44.833Z
**Repository Path**: /home/mark/Repos/projects/headlines/packages/config
**Total Files**: 6
**Package**: @headlines/config@3.0.0




---


## 📄 package.json
*Lines: 21, Size: 402 Bytes*

```json
{
  "name": "@headlines/config",
  "version": "3.0.0",
  "main": "src/index.js",
  "type": "module",
  "license": "ISC",
  "exports": {
    ".": "./src/index.js",
    "./node": "./src/node.js",
    "./next": "./src/next.js"
  },
  "dependencies": {
    "client-only": "^0.0.1",
    "server-only": "^0.0.1",
    "zod": "^3.23.8"
  },
  "peerDependencies": {
    "@headlines/models": "workspace:*"
  }
}

```

## 📄 src/envSchema.js
*Lines: 39, Size: 1.5 KB*

```javascript
import { z } from 'zod'

const stringToBoolean = z
  .string()
  .transform((val) => val === 'true')
  .or(z.boolean())
const stringToNumber = z.string().transform((val) => parseInt(val, 10))

export const envSchema = z.object({
  NODE_ENV: z.enum(['development', 'production']).default('development'),
  MONGO_URI: z.string().url(),
  JWT_SECRET: z.string().min(32),
  LOG_LEVEL: z.enum(['debug', 'info', 'warn', 'error']).default('info'),
  CONCURRENCY_LIMIT: stringToNumber.default('3'),
  OPENAI_API_KEY: z.string().startsWith('sk-'),
  PINECONE_API_KEY: z.string().min(1),
  PINECONE_INDEX_NAME: z.string().min(1).default('headlines'),
  UPSTASH_REDIS_REST_URL: z.string().url().optional(),
  UPSTASH_REDIS_REST_TOKEN: z.string().min(1).optional(),
  SMTP_HOST: z.string().min(1),
  SMTP_PORT: stringToNumber,
  SMTP_SECURE: stringToBoolean,
  SMTP_USER: z.string().email(),
  SMTP_PASS: z.string().min(1),
  SMTP_FROM_ADDRESS: z.string().email(),
  SMTP_FROM_NAME: z.string().min(1).default('Headlines AI'),
  NEXT_PUBLIC_VAPID_PUBLIC_KEY: z.string().min(1),
  VAPID_PRIVATE_KEY: z.string().min(1),
  VAPID_SUBJECT: z.string().startsWith('mailto:'),
  NEXT_PUBLIC_PUSHER_KEY: z.string().min(1),
  NEXT_PUBLIC_PUSHER_CLUSTER: z.string().min(1),
  PUSHER_APP_ID: z.string().min(1),
  PUSHER_KEY: z.string().min(1),
  PUSHER_SECRET: z.string().min(1),
  PUSHER_CLUSTER: z.string().min(1),
  GROQ_API_KEY: z.string().startsWith('gsk_').optional(),
  SERPER_API_KEY: z.string().min(1).optional(),
  NEWSAPI_API_KEY: z.string().min(1),
})
```

## 📄 src/index.js
*Lines: 103, Size: 3.45 KB*

```javascript
// packages/config/src/pipeline.js (NEW FILE)
// This file is IDENTICAL to server.js but WITHOUT the 'server-only' import.
// It is intended ONLY for use by the pipeline script.

import { z } from 'zod'
import { settings, initializeSettings } from './settings.js'

// --- Environment Schema and Validation ---
const stringToBoolean = z
  .string()
  .transform((val) => val === 'true')
  .or(z.boolean())
const stringToNumber = z.string().transform((val) => parseInt(val, 10))

const envSchema = z.object({
  NODE_ENV: z.enum(['development', 'production']).default('development'),
  MONGO_URI: z.string().url(),
  JWT_SECRET: z.string().min(32),
  LOG_LEVEL: z.enum(['debug', 'info', 'warn', 'error']).default('info'),
  CONCURRENCY_LIMIT: stringToNumber.default('3'),
  OPENAI_API_KEY: z.string().startsWith('sk-'),
  PINECONE_API_KEY: z.string().min(1),
  PINECONE_INDEX_NAME: z.string().min(1).default('headlines'),
  UPSTASH_REDIS_REST_URL: z.string().url().optional(),
  UPSTASH_REDIS_REST_TOKEN: z.string().min(1).optional(),
  SMTP_HOST: z.string().min(1),
  SMTP_PORT: stringToNumber,
  SMTP_SECURE: stringToBoolean,
  SMTP_USER: z.string().email(),
  SMTP_PASS: z.string().min(1),
  SMTP_FROM_ADDRESS: z.string().email(),
  SMTP_FROM_NAME: z.string().min(1).default('Headlines AI'),
  NEXT_PUBLIC_VAPID_PUBLIC_KEY: z.string().min(1),
  VAPID_PRIVATE_KEY: z.string().min(1),
  VAPID_SUBJECT: z.string().startsWith('mailto:'),
  NEXT_PUBLIC_PUSHER_KEY: z.string().min(1),
  NEXT_PUBLIC_PUSHER_CLUSTER: z.string().min(1),
  PUSHER_APP_ID: z.string().min(1),
  PUSHER_KEY: z.string().min(1),
  PUSHER_SECRET: z.string().min(1),
  PUSHER_CLUSTER: z.string().min(1),
  GROQ_API_KEY: z.string().startsWith('gsk_').optional(),
  SERPER_API_KEY: z.string().min(1).optional(),
  NEWSAPI_API_KEY: z.string().min(1),
})

let validatedEnv = null
function validateAndExportEnv() {
  if (validatedEnv) return validatedEnv
  try {
    validatedEnv = envSchema.parse(process.env)
    return validatedEnv
  } catch (error) {
    console.error('\n❌ CRITICAL: Invalid environment variables found!\n')
    console.error(JSON.stringify(error.flatten().fieldErrors, null, 2))
    console.error('\nHalting application. Please update your .env file.\n')
    if (typeof process !== 'undefined' && process.exit) {
      process.exit(1)
    }
    throw new Error('Invalid environment variables')
  }
}
export const env = validateAndExportEnv()

// --- Static and Derived Configs ---
export const IS_REFRESH_MODE = process.env.REFRESH_MODE === 'true'
export const MAX_ARTICLE_CHARS = 30000
export const LLM_CONTEXT_MAX_CHARS = 25000
export const MIN_HEADLINE_CHARS = 5
export const MAX_HEADLINE_CHARS = 500
export const AI_BATCH_SIZE = 6

export const SMTP_CONFIG = {
  host: env.SMTP_HOST,
  port: env.SMTP_PORT,
  secure: env.SMTP_SECURE,
  auth: { user: env.SMTP_USER, pass: env.SMTP_PASS },
  fromAddress: env.SMTP_FROM_ADDRESS || env.SMTP_USER,
  fromName: env.SMTP_FROM_NAME,
  pool: true,
  maxConnections: 5,
  maxMessages: 100,
  rateLimit: 10,
}

export const EMAIL_CONFIG = {
  templateName: 'wealthEvents',
  subject: 'New Nordic Banking Opportunities Detected',
  language: 'en',
  brandName: 'Your Wealth Watch',
  companyAddress: 'Wealth Watch Inc., Paris, France',
  unsubscribeUrl: '#',
}

export const SUPERVISOR_EMAIL_CONFIG = {
  templateName: 'supervisorReport',
  subject: '⚙️ Hourly Headlines Processing Run Summary',
  language: 'en',
  brandName: 'Headlines Processing Bot',
}

export { settings, initializeSettings }

```

## 📄 src/next.js
*Lines: 20, Size: 492 Bytes*

```javascript
import 'server-only'

// Explicitly re-export every constant and function from the shared core file.
// This is the most robust way to ensure Next.js's bundler correctly handles
// the module while respecting the 'server-only' directive.
export {
  env,
  settings,
  initializeSettings,
  IS_REFRESH_MODE,
  MAX_ARTICLE_CHARS,
  LLM_CONTEXT_MAX_CHARS,
  MIN_HEADLINE_CHARS,
  MAX_HEADLINE_CHARS,
  AI_BATCH_SIZE,
  SMTP_CONFIG,
  EMAIL_CONFIG,
  SUPERVISOR_EMAIL_CONFIG,
} from './index.js'

```

## 📄 src/node.js
*Lines: 2, Size: 27 Bytes*

```javascript
export * from './index.js'

```

## 📄 src/settings.js
*Lines: 55, Size: 1.61 KB*

```javascript
// packages/config/src/settings.js
import { Setting } from '@headlines/models'
// This file must have ZERO workspace dependencies.
// We will use console.log for this critical, low-level module.

const DEFAULTS = {
  HEADLINES_RELEVANCE_THRESHOLD: 25,
  ARTICLES_RELEVANCE_THRESHOLD: 45,
  EVENT_RELEVANCE_THRESHOLD: 50,
  MINIMUM_EVENT_AMOUNT_USD_MILLIONS: 20,
  HIGH_SIGNAL_HEADLINE_THRESHOLD: 90,
  AGENT_DISAGREEMENT_THRESHOLD: 50,
  SINGLETON_RELEVANCE_THRESHOLD: 85,
  HIGH_VALUE_DEAL_USD_MM: 50,
  SIGNIFICANT_PRIVATE_BENEFICIARY_USD_MM: 30,
  WATCHLIST_SCORE_BOOST: 35,
  SUGGESTION_GENERATION_THRESHOLD: 80,
  MIN_ARTICLE_CHARS: 100,
  LLM_MODEL_HEADLINE_ASSESSMENT: 'gpt-5-mini',
  LLM_MODEL_ARTICLE_ASSESSMENT: 'gpt-5-mini',
  LLM_MODEL_SYNTHESIS: 'gpt-5-mini',
  LLM_MODEL_UTILITY: 'gpt-5-nano',
}

export const settings = { ...DEFAULTS }

let isInitialized = false

export async function initializeSettings() {
  if (isInitialized) return
  console.log('[Config] Loading pipeline settings from database...')
  try {
    const dbSettings = await Setting.find({}).lean()
    if (dbSettings.length === 0) {
      console.warn(
        '[Config] No settings found in the database. The pipeline will run on default values.'
      )
    } else {
      dbSettings.forEach((setting) => {
        settings[setting.key] = setting.value
      })
      console.log(
        `[Config] Successfully loaded ${dbSettings.length} settings from the database.`
      )
    }
    isInitialized = true
  } catch (error) {
    console.error(
      '[Config] CRITICAL: Failed to load settings from database. Halting.',
      error
    )
    throw error
  }
}

```

# üìÅ PROJECT DIRECTORY STRUCTURE

Total: 14 files, 2 directories

```
headlines/
‚îú‚îÄ‚îÄ üìÅ src/
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ data/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ countries.json
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ languages.json
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ apiCallTracker.js
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ auditLogger.js
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ client-helpers.js
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ countries.js
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ index.js
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ languages.js
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ logger.js
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ server-helpers.js
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ server.js
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ tokenTracker.js
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ use-debounce.js
‚îî‚îÄ‚îÄ üìÑ package.json
```

# üìã PROJECT METADATA

**Generated**: 2025-09-17T10:46:26.459Z
**Repository Path**: /home/mark/Repos/projects/headlines/packages/utils
**Total Files**: 14
**Package**: @headlines/utils@1.2.0
**Description**: Shared utilities like logger and helpers for the Headlines monorepo.



---


## üìÑ package.json
*Lines: 17, Size: 380 Bytes*

```json
{
  "name": "@headlines/utils",
  "version": "1.2.0",
  "description": "Shared utilities like logger and helpers for the Headlines monorepo.",
  "main": "src/index.js",
  "type": "module",
  "license": "ISC",
  "exports": {
    ".": "./src/index.js",
    "./server": "./src/server.js"
  },
  "dependencies": {},
  "peerDependencies": {
    "@headlines/ai-services": "1.0.0"
  }
}

```

## üìÑ src/apiCallTracker.js
*Lines: 49, Size: 1.03 KB*

```javascript
// packages/utils/src/apiCallTracker.js (version 1.0.0)
import { logger } from './logger.js';

// Prices per 1000 calls in USD.
const servicePricing = {
  serper_news: 2.50,
  serper_search: 2.50,
  newsapi_search: 0, // Developer plan is free
  wikipedia: 0,
};

class ApiCallTracker {
  constructor() {
    this.usage = {};
    this.reset();
  }

  reset() {
    this.usage = {};
    Object.keys(servicePricing).forEach((service) => {
      this.usage[service] = { calls: 0, cost: 0 };
    });
  }

  recordCall(service) {
    if (!service) return;

    if (!this.usage[service]) {
      logger.warn(
        `API call recorded for an un-priced service: ${service}. Calls will be tracked, but cost will be $0.`
      );
      this.usage[service] = { calls: 0, cost: 0 };
    }

    this.usage[service].calls += 1;

    const pricePer1000 = servicePricing[service];
    if (pricePer1000) {
      this.usage[service].cost += pricePer1000 / 1000;
    }
  }

  getStats() {
    return this.usage;
  }
}

export const apiCallTracker = new ApiCallTracker();

```

## üìÑ src/auditLogger.js
*Lines: 86, Size: 2.61 KB*

```javascript
// packages/utils/src/auditLogger.js (version 2.0)
import pino from 'pino'
import fs from 'fs'
import path from 'path'
import { Transform } from 'stream'
import { EOL } from 'os'
import moment from 'moment'
import { format } from 'util'

const COLORS = {
  reset: '\x1b[0m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m',
  yellow: '\x1b[33m',
  grey: '\x1b[90m',
}

const humanAuditStream = new Transform({
  transform(chunk, enc, cb) {
    try {
      const logObject = JSON.parse(chunk)
      const { time, msg, context } = logObject
      const timestamp = moment(time).format('HH:mm:ss.SSS')
      let output = `${COLORS.cyan}--- [${timestamp}] ${msg} ---${COLORS.reset}${EOL}`

      if (context) {
        for (const [key, value] of Object.entries(context)) {
          const formattedKey = key
            .replace(/_/g, ' ')
            .replace(/\b\w/g, (l) => l.toUpperCase())
          output += `  ${COLORS.yellow}${formattedKey}:${COLORS.reset}${EOL}`
          output += `${COLORS.grey}${format(value).replace(/^/gm, '    > ')}${COLORS.reset}${EOL}${EOL}`
        }
      }
      this.push(output)
    } catch (e) {
      this.push(chunk) // Pass through non-JSON
    }
    cb()
  },
})

let auditLoggerInstance

export function initializeAuditLogger(logDirectory) {
  if (auditLoggerInstance) return auditLoggerInstance

  if (!logDirectory) {
    throw new Error('[AuditLogger] Initialization failed: logDirectory must be provided.')
  }

  if (!fs.existsSync(logDirectory)) fs.mkdirSync(logDirectory, { recursive: true })

  const auditLogFile = path.join(logDirectory, 'run_audit.log')
  try {
    fs.unlinkSync(auditLogFile)
  } catch (e) {
    if (e.code !== 'ENOENT') console.error('Could not clear old audit log file:', e)
  }

  const fileWriteStream = fs.createWriteStream(auditLogFile, { flags: 'a' })
  humanAuditStream.pipe(fileWriteStream)

  auditLoggerInstance = pino({ level: 'info' }, humanAuditStream)
  return auditLoggerInstance
}

// Export a proxy object. This allows modules to import `auditLogger` directly,
// and it will begin working as soon as initializeAuditLogger() is called from app.js.
export const auditLogger = new Proxy(
  {},
  {
    get(target, prop) {
      if (auditLoggerInstance) {
        return auditLoggerInstance[prop]
      }
      // Fallback behavior before initialization
      if (prop === 'info' || prop === 'warn' || prop === 'error' || prop === 'fatal' || prop === 'debug' || prop === 'trace') {
        // console.warn(`[AuditLogger] Not initialized. Call to '${String(prop)}' was ignored.`)
        return () => {} // Return a no-op function to prevent crashes
      }
      return undefined
    },
  }
)

```

## üìÑ src/client-helpers.js
*Lines: 65, Size: 1.85 KB*

```javascript
// packages/utils/src/client-helpers.js (version 1.1.0)
import { clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

/**
 * Merges CSS classes. This is a CLIENT-SAFE utility.
 */
export function cn(...inputs) {
  return twMerge(clsx(inputs));
}

/**
 * Truncates a string to a specified length, adding an ellipsis if truncated.
 * @param {string} str The string to truncate.
 * @param {number} maxLength The maximum length of the string.
 * @returns {string} The truncated string.
 */
export function truncateString(str, maxLength = 100) {
  if (typeof str !== 'string' || str.length <= maxLength) {
    return str;
  }
  return str.substring(0, maxLength) + '...';
}

/**
 * Escapes HTML special characters to prevent XSS.
 * @param {*} unsafe - The input to sanitize.
 * @returns {string} The sanitized string.
 */
export function escapeHtml(unsafe) {
  if (unsafe === null || unsafe === undefined) return '';
  return String(unsafe)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}

/**
 * A simple promise-based sleep function.
 * @param {number} ms - The number of milliseconds to wait.
 * @returns {Promise<void>}
 */
export function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

/**
 * Groups an array of items by a specified country field.
 * @param {Array<object>} items - The array of items to group.
 * @param {string} countryField - The name of the field containing the country string.
 * @returns {object} An object with country names as keys and arrays of items as values.
 */
export function groupItemsByCountry(items, countryField) {
  return items.reduce((acc, item) => {
    const country = item[countryField];
    if (country) {
      if (!acc[country]) acc[country] = [];
      acc[country].push(item);
    }
    return acc;
  }, {});
}

```

## üìÑ src/countries.js
*Lines: 46, Size: 1.42 KB*

```javascript
// packages/utils/src/countries.js (version 2.7.0)
import isoCountryFlags from './data/countries.json' with { type: 'json' };

const defaultFlag = 'üåç';
const countryNameToIsoMap = new Map(Object.entries(isoCountryFlags));
const isoToFlagMap = new Map();

// Pre-compute ISO to Flag mapping
for (const [name, iso] of countryNameToIsoMap.entries()) {
    if (iso.length === 2) {
        const flag = iso.toUpperCase().replace(/./g, char => String.fromCodePoint(char.charCodeAt(0) + 127397));
        isoToFlagMap.set(iso, flag);
    } else {
        const specialFlags = { "Global": "üåê", "Europe": "üá™üá∫", "Scandinavia": "‚ùÑÔ∏è" };
        if(specialFlags[name]) isoToFlagMap.set(iso, specialFlags[name]);
    }
}

/**
 * Returns the flag emoji for a given country name in a case-insensitive manner.
 * @param {string | null | undefined} countryName - The name of the country.
 * @returns {string} The corresponding flag emoji.
 */
export function getCountryFlag(countryName) {
  if (!countryName) return defaultFlag;
  for (const [key, value] of countryNameToIsoMap.entries()) {
      if (key.toLowerCase() === countryName.trim().toLowerCase()) {
          const flag = isoToFlagMap.get(value);
          return flag || defaultFlag;
      }
  }
  return defaultFlag;
}

export const COMMON_COUNTRIES = [
  'Denmark',
  'Sweden',
  'Norway',
  'Finland',
  'Netherlands',
  'United Kingdom',
  'United States',
  'Germany',
  'Switzerland',
];

```

## üìÑ src/data/countries.json
*Lines: 110, Size: 2.06 KB*

```json
{
  "Global": "XX",
  "Europe": "EU",
  "Scandinavia": "SC",
  "Afghanistan": "AF",
  "Albania": "AL",
  "Algeria": "DZ",
  "Andorra": "AD",
  "Angola": "AO",
  "Argentina": "AR",
  "Armenia": "AM",
  "Australia": "AU",
  "Austria": "AT",
  "Azerbaijan": "AZ",
  "Bahamas": "BS",
  "Bahrain": "BH",
  "Bangladesh": "BD",
  "Belarus": "BY",
  "Belgium": "BE",
  "Benin": "BJ",
  "Bhutan": "BT",
  "Bolivia": "BO",
  "Bosnia and Herzegovina": "BA",
  "Brazil": "BR",
  "Bulgaria": "BG",
  "Cambodia": "KH",
  "Canada": "CA",
  "Chile": "CL",
  "China": "CN",
  "Colombia": "CO",
  "Croatia": "HR",
  "Cuba": "CU",
  "Cyprus": "CY",
  "Czech Republic": "CZ",
  "Denmark": "DK",
  "Egypt": "EG",
  "Estonia": "EE",
  "Ethiopia": "ET",
  "Finland": "FI",
  "France": "FR",
  "Georgia": "GE",
  "Germany": "DE",
  "Ghana": "GH",
  "Greece": "GR",
  "Hungary": "HU",
  "Iceland": "IS",
  "India": "IN",
  "Indonesia": "ID",
  "Iran": "IR",
  "Iraq": "IQ",
  "Ireland": "IE",
  "Israel": "IL",
  "Italy": "IT",
  "Japan": "JP",
  "Jordan": "JO",
  "Kazakhstan": "KZ",
  "Kenya": "KE",
  "Kuwait": "KW",
  "Latvia": "LV",
  "Lebanon": "LB",
  "Liechtenstein": "LI",
  "Lithuania": "LT",
  "Luxembourg": "LU",
  "Malaysia": "MY",
  "Malta": "MT",
  "Mexico": "MX",
  "Monaco": "MC",
  "Mongolia": "MN",
  "Montenegro": "ME",
  "Morocco": "MA",
  "Nepal": "NP",
  "Netherlands": "NL",
  "New Zealand": "NZ",
  "Nigeria": "NG",
  "North Korea": "KP",
  "North Macedonia": "MK",
  "Norway": "NO",
  "Oman": "OM",
  "Pakistan": "PK",
  "Peru": "PE",
  "Philippines": "PH",
  "Poland": "PL",
  "Portugal": "PT",
  "Qatar": "QA",
  "Romania": "RO",
  "Russia": "RU",
  "Saudi Arabia": "SA",
  "Serbia": "RS",
  "Singapore": "SG",
  "Slovakia": "SK",
  "Slovenia": "SI",
  "South Africa": "ZA",
  "South Korea": "KR",
  "Spain": "ES",
  "Sri Lanka": "LK",
  "Sweden": "SE",
  "Switzerland": "CH",
  "Syria": "SY",
  "Taiwan": "TW",
  "Thailand": "TH",
  "Turkey": "TR",
  "Ukraine": "UA",
  "United Arab Emirates": "AE",
  "United Kingdom": "GB",
  "United States": "US",
  "Uzbekistan": "UZ",
  "Vietnam": "VN",
  "Yemen": "YE"
}

```

## üìÑ src/data/languages.json
*Lines: 11, Size: 168 Bytes*

```json
{
    "English": "en",
    "Danish": "da",
    "Swedish": "sv",
    "Norwegian": "no",
    "German": "de",
    "French": "fr",
    "Spanish": "es",
    "Dutch": "nl"
}

```

## üìÑ src/index.js
*Lines: 15, Size: 438 Bytes*

```javascript
// packages/utils/src/index.js (version 8.2.0)
// This file is the universal, CLIENT-SAFE entry point for the package.

export { 
  cn, 
  truncateString, 
  escapeHtml, 
  sleep, 
  groupItemsByCountry 
} from './client-helpers.js';

export { getCountryFlag, COMMON_COUNTRIES } from './countries.js';
export { languageList, languageMap } from './languages.js'; // CORRECTED IMPORT SOURCE
export { useDebounce } from './use-debounce.js';

```

## üìÑ src/languages.js
*Lines: 15, Size: 409 Bytes*

```javascript
// packages/utils/src/languages.js (version 1.0.0)
import languageData from './data/languages.json' with { type: 'json' };

/**
 * An array of language names.
 * @type {string[]}
 */
export const languageList = Object.keys(languageData).sort();

/**
 * A map of language names to their two-letter ISO codes.
 * @type {Map<string, string>}
 */
export const languageMap = new Map(Object.entries(languageData));

```

## üìÑ src/logger.js
*Lines: 95, Size: 3.3 KB*

```javascript
// packages/utils/src/logger.js (version 7.2.0)
import pino from 'pino';
import fs from 'fs';
import path from 'path';
import moment from 'moment';

const LOG_LEVEL = process.env.LOG_LEVEL || 'info';
const IS_PRODUCTION = process.env.NODE_ENV === 'production';

let loggerInstance = null;

const loggerProxy = {
    trace: (...args) => loggerInstance?.trace(...args),
    debug: (...args) => loggerInstance?.debug(...args),
    info: (...args) => loggerInstance?.info(...args),
    warn: (...args) => loggerInstance?.warn(...args),
    error: (...args) => loggerInstance?.error(...args),
    fatal: (...args) => loggerInstance?.fatal(...args),
};

function createPinoLogger(logDirectory = null, extraStreams = [], isReinit = false) {
    const consoleTransport = pino.transport({
        target: 'pino-pretty',
        options: {
            colorize: true,
            translateTime: 'HH:MM:ss',
            ignore: 'pid,hostname,runStats,article,assessment,event,payload,context,embedding,finalAssessment,watchlistHits,hits,reasoning,enrichmentSources,source_articles,key_individuals,source,details',
            singleLine: true,
            messageFormat: '{msg}',
        },
    });

    const streams = [
        {
            level: LOG_LEVEL,
            stream: IS_PRODUCTION ? process.stdout : consoleTransport,
        },
        ...extraStreams,
    ];

    if (logDirectory && !IS_PRODUCTION) {
        if (!fs.existsSync(logDirectory)) fs.mkdirSync(logDirectory, { recursive: true });
        
        const errorLogFile = path.join(logDirectory, 'error.log');
        if (!isReinit) {
             try { fs.unlinkSync(errorLogFile); } catch (e) { if (e.code !== 'ENOENT') console.error('Could not clear old error log file:', e); }
        }
        streams.push({ level: 'warn', stream: fs.createWriteStream(errorLogFile, { flags: 'a' }) });
    }

    const newLogger = pino({ level: 'trace' }, pino.multistream(streams));
    
    if (!global.loggerInitialized) {
        const formattedDate = moment().format('YYYY-MM-DD HH:mm:ss');
        newLogger.info(`
#############################################################
#                                                           #
#         PIPELINE RUN INITIATED: ${formattedDate}      #
#                                                           #
#############################################################
`);
        global.loggerInitialized = true;
    }
    
    return newLogger;
}

export function initializeLogger(logDirectory = null, extraStreams = []) {
    if (loggerInstance) {
        return loggerInstance;
    }
    loggerInstance = createPinoLogger(logDirectory, extraStreams);
    
    for (const key in loggerInstance) {
        if (typeof loggerInstance[key] === 'function') {
            loggerProxy[key] = loggerInstance[key].bind(loggerInstance);
        }
    }

    return loggerInstance;
}

export function reinitializeLogger(logDirectory = null, extraStreams = []) {
    // A true re-initialization. Create new logger instance but don't repeat the banner.
    loggerInstance = createPinoLogger(logDirectory, extraStreams, true);
    for (const key in loggerInstance) {
        if (typeof loggerInstance[key] === 'function') {
            loggerProxy[key] = loggerInstance[key].bind(loggerInstance);
        }
    }
    return loggerInstance;
}

export { loggerProxy as logger };

```

## üìÑ src/server-helpers.js
*Lines: 37, Size: 1.32 KB*

```javascript
// packages/utils/src/server-helpers.js (version 2.0.0)

/**
 * Executes an async function and handles errors gracefully.
 * The calling function is responsible for logging via the errorHandler.
 * @param {() => Promise<any>} asyncFn The async function to execute.
 * @param {{errorHandler: (error: Error) => any}} options Error handling options.
 * @returns {Promise<any>} The result of the function or the error handler.
 */
export async function safeExecute(asyncFn, { errorHandler } = {}) {
  try {
    return await asyncFn()
  } catch (error) {
    if (errorHandler) {
      return errorHandler(error)
    }
    // As a last resort, log to console if no handler is provided.
    console.error('An unexpected error occurred in a safeExecute block without an error handler:', error)
    return null // Default fallback
  }
}

/**
 * Performs "smart stripping" on raw HTML to prepare it for AI analysis.
 * It removes irrelevant tags to reduce noise and token count.
 * @param {string} rawHtml - The full HTML of a page.
 * @returns {Promise<string>} - The cleaned and focused HTML snippet.
 */
export async function smartStripHtml(rawHtml) {
  const cheerio = await import('cheerio')
  const $ = cheerio.load(rawHtml)
  $(
    'script, style, link[rel="stylesheet"], noscript, svg, path, footer, header, nav'
  ).remove()
  return $('body').html()
}

```

## üìÑ src/server.js
*Lines: 40, Size: 1.01 KB*

```javascript
// packages/utils/src/server.js (version 5.1.0)
// This file is the server-only entrypoint for the utils package.
// It uses explicit imports and exports for maximum compatibility.

import {
  cn,
  truncateString,
  escapeHtml,
  sleep,
  groupItemsByCountry,
} from './client-helpers.js'
import { safeExecute, smartStripHtml } from './server-helpers.js'
import { getCountryFlag, COMMON_COUNTRIES } from './countries.js'
import { languageList, languageMap } from './languages.js'
import { logger, initializeLogger, reinitializeLogger } from './logger.js'
import { auditLogger, initializeAuditLogger } from './auditLogger.js'
import { tokenTracker } from './tokenTracker.js'
import { apiCallTracker } from './apiCallTracker.js'

export {
  languageList,
  languageMap,
  cn,
  truncateString,
  escapeHtml,
  sleep,
  groupItemsByCountry,
  safeExecute,
  smartStripHtml,
  getCountryFlag,
  COMMON_COUNTRIES,
  logger,
  initializeLogger,
  reinitializeLogger,
  auditLogger,
  initializeAuditLogger,
  tokenTracker,
  apiCallTracker,
}

```

## üìÑ src/tokenTracker.js
*Lines: 61, Size: 1.73 KB*

```javascript
// packages/utils/src/tokenTracker.js (version 3.1.0)
import { logger } from './logger.js'

// COST TRACKING FIX: Updated model names and pricing to reflect the actual models
// being used in the pipeline (gpt-5-nano, gpt-5-mini) instead of placeholder names.
// Prices are per 1 MILLION tokens in USD.
const modelPricing = {
  'gpt-5-nano': { input: 0.15, output: 0.4 },
  'gpt-5-mini': { input: 0.5, output: 2.5 },
  // Keep other potential models for future use
  'gpt-4o-mini': { input: 0.15, output: 0.6 },
}

class TokenTracker {
  constructor() {
    this.usage = {}
    this.reset()
  }

  initializeModels(modelKeys = []) {
    this.usage = {}
    const allKnownModels = new Set([...Object.keys(modelPricing), ...modelKeys])
    allKnownModels.forEach((model) => {
      this.usage[model] = { inputTokens: 0, outputTokens: 0, cost: 0 }
    })
  }

  reset() {
    this.initializeModels()
  }

  recordUsage(model, usageData) {
    if (!usageData || !model) return

    const { prompt_tokens, completion_tokens } = usageData

    if (!this.usage[model]) {
      logger.warn(
        `Token usage recorded for an un-priced model: ${model}. Tokens will be tracked, but cost will be $0.`
      )
      this.usage[model] = { inputTokens: 0, outputTokens: 0, cost: 0 }
    }

    this.usage[model].inputTokens += prompt_tokens || 0
    this.usage[model].outputTokens += completion_tokens || 0

    const pricing = modelPricing[model]
    if (pricing) {
      const inputCost = ((prompt_tokens || 0) / 1_000_000) * pricing.input
      const outputCost = ((completion_tokens || 0) / 1_000_000) * pricing.output
      this.usage[model].cost += inputCost + outputCost
    }
  }

  getStats() {
    return this.usage
  }
}

export const tokenTracker = new TokenTracker()

```

## üìÑ src/use-debounce.js
*Lines: 20, Size: 479 Bytes*

```javascript
"use client";

import { useState, useEffect } from 'react';

// No changes needed, but provided for completeness as it's used by the updated Filters component.
export function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}
```

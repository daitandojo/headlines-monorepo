// apps/client/src/components/ViewHeader.jsx (version 2.6.0)
'use client'

import { useRouter, useSearchParams, usePathname } from 'next/navigation'
import { useState, useEffect } from 'react'
import { useDebounce } from '@headlines/utils'
import {
  Input,
  Button,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  ScrollArea,
} from '@headlines/ui'
import { Search, Clock, BarChart, ArrowDownUp, Mail, Star } from 'lucide-react'
import { cn } from '@headlines/utils'

const iconMap = {
  clock: Clock,
  relevance: BarChart,
  size: ArrowDownUp,
}

export function ViewHeader({ title, baseSubtitle, count, isCountLoading, sortOptions, allCountries = [], filters = {} }) {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  const currentSort = searchParams.get('sort') || 'date_desc'
  const [searchTerm, setSearchTerm] = useState(searchParams.get('q') || '')
  const debouncedSearchTerm = useDebounce(searchTerm, 500)

  useEffect(() => {
    const params = new URLSearchParams(searchParams.toString())
    if (debouncedSearchTerm) {
      params.set('q', debouncedSearchTerm)
    } else {
      params.delete('q')
    }
    router.replace(`?${params.toString()}`, { scroll: false })
  }, [debouncedSearchTerm, router, searchParams])

  const handleUrlParamChange = (key, value) => {
    const params = new URLSearchParams(searchParams.toString())
    if (!value || value === 'all' || value === false) {
      params.delete(key)
    } else {
      params.set(key, value)
    }
    params.set('page', '1');
    router.push(`${pathname}?${params.toString()}`, { scroll: false })
  }

  const subtitleText = isCountLoading
    ? 'Calculating...'
    : count != null ? `${count.toLocaleString()} ${baseSubtitle}` : `...`
  
  const currentCountry = filters.country || 'all'
  const withEmailOnly = filters.withEmail === true
  const favoritesOnly = searchParams.get('favorites') === 'true'

  return (
    <div className="flex flex-col items-center justify-center text-center mb-8 space-y-6 max-w-5xl mx-auto">
      <div>
        <h2 className="text-3xl font-bold tracking-tight text-slate-100">{title}</h2>
        <p className="text-slate-400 mt-1 transition-colors">{subtitleText}</p>
      </div>

      <div className="w-full flex flex-col sm:flex-row items-center gap-4">
        {/* Country Filter */}
        <Select
          value={currentCountry}
          onValueChange={(value) => handleUrlParamChange('country', value)}
        >
          <SelectTrigger className="w-full sm:w-[200px] h-12 bg-slate-900/80 border-slate-700">
            <SelectValue placeholder="Filter by country..." />
          </SelectTrigger>
          <SelectContent>
            <ScrollArea className="h-[250px]">
              <SelectItem value="all">All Countries</SelectItem>
              {allCountries.map((country) => (
                <SelectItem key={country} value={country}>
                  {country}
                </SelectItem>
              ))}
            </ScrollArea>
          </SelectContent>
        </Select>

        {/* Search Input */}
        <div className="relative flex-grow w-full">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-slate-500" />
          <Input
            id="search"
            placeholder="Search by name, company, or keyword..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="bg-slate-900/80 border-slate-700 h-12 pl-10"
          />
        </div>

        {/* Action Buttons */}
        <div className="flex items-center gap-2">
          <TooltipProvider>
            {sortOptions.map((option) => {
              const IconComponent = iconMap[option.icon] || Clock
              return (
                <Tooltip key={option.value}>
                  <TooltipTrigger asChild>
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={() => handleUrlParamChange('sort', option.value === 'date_desc' ? null : option.value)}
                      className={cn(
                        'h-12 w-12',
                        currentSort === option.value && 'bg-blue-500/20 text-blue-300'
                      )}
                      aria-label={option.tooltip}
                    >
                      <IconComponent className="h-5 w-5" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>{option.tooltip}</TooltipContent>
                </Tooltip>
              )
            })}
             <Tooltip>
                <TooltipTrigger asChild>
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={() => handleUrlParamChange('withEmail', !withEmailOnly)}
                      className={cn(
                        'h-12 w-12',
                        withEmailOnly && 'bg-blue-500/20 text-blue-300'
                      )}
                      aria-label="Filter by email"
                    >
                      <Mail className="h-5 w-5" />
                    </Button>
                </TooltipTrigger>
                <TooltipContent>
                    {withEmailOnly ? "Show all opportunities" : "Show only opportunities with email"}
                </TooltipContent>
            </Tooltip>
             <Tooltip>
                <TooltipTrigger asChild>
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={() => handleUrlParamChange('favorites', !favoritesOnly)}
                      className={cn(
                        'h-12 w-12',
                        favoritesOnly && 'bg-yellow-500/20 text-yellow-300'
                      )}
                      aria-label="Filter by favorites"
                    >
                      <Star className="h-5 w-5" />
                    </Button>
                </TooltipTrigger>
                <TooltipContent>
                    {favoritesOnly ? "Show all items" : "Show only favorited items"}
                </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
      </div>
    </div>
  )
}

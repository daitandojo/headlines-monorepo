// apps/admin/src/app/opportunities/page.jsx (version 1.2.0)
'use client'

import { PageHeader, DataTable, ExportButton } from '@headlines/ui';
import { columns } from './columns';
import { useAdminManager } from '@/hooks/use-admin-manager';
import { deleteAdminOpportunity, updateAdminOpportunity, exportOpportunitiesToCSV, exportOpportunitiesToXLSX } from '@headlines/data-access';
import { toast } from 'sonner';
import { useCallback, useMemo } from 'react';

export default function OpportunitiesPage() {
    const { data, total, isLoading, searchTerm, setSearchTerm, sort, setSort, refetch, handleUpdate, handleRemove, setFilter, filters } = useAdminManager('/api/opportunities', 'basedIn_asc');
    
    const availableCountries = useMemo(() => {
        if (!data) return [];
        const countrySet = new Set(data.map(item => item.basedIn).filter(Boolean));
        return Array.from(countrySet).sort();
    }, [data]);

    const handleOptimisticUpdate = useCallback(async (opp, updateData) => {
        handleUpdate(opp._id, updateData);
        const result = await updateAdminOpportunity(opp._id, updateData);
        if (!result.success) {
            toast.error(`Update failed: ${result.error}`);
            refetch();
        } else {
            toast.success(`Updated ${Object.keys(updateData)[0]} for ${opp.reachOutTo}`);
        }
    }, [handleUpdate, refetch]);

    const handleDelete = useCallback(async (oppId) => {
        handleRemove(oppId);
        toast.success('Opportunity deleted.');
        const result = await deleteAdminOpportunity(oppId);
        if (!result.success) {
            toast.error(`Deletion failed on server: ${result.error}. Reverting.`);
            refetch();
        }
    }, [handleRemove, refetch]);
    
    const description = `Review and manage all ${data.length.toLocaleString()} visible opportunities (${total.toLocaleString()} total).`;
    const currentFilters = { ...filters, q: searchTerm };

    // DEFINITIVE FIX: Create an object of export actions to pass to the button
    const exportActions = {
        csv: () => exportOpportunitiesToCSV({ filters: currentFilters, sort }),
        xlsx: () => exportOpportunitiesToXLSX({ filters: currentFilters, sort })
    };

    return (
        <div className="flex flex-col h-full">
            <PageHeader title="Opportunity Management" description={description}>
                <ExportButton 
                    hasData={data && data.length > 0} 
                    filename="opportunities_export" 
                    exportActions={exportActions}
                />
            </PageHeader>
            <div className="mt-8 flex-grow min-h-0 max-w-none">
                <DataTable
                    columns={columns(handleOptimisticUpdate, handleDelete)}
                    data={data}
                    isLoading={isLoading}
                    filterColumn="reachOutTo"
                    filterPlaceholder="Filter by name, country, city..."
                    secondaryFilterColumn="basedIn"
                    secondaryFilterOptions={availableCountries}
                    onSecondaryFilterChange={(value) => setFilter('country', value === 'all' ? null : value)}
                    emailFilter={filters?.withEmail}
                    onEmailFilterChange={(value) => setFilter('withEmail', value)}
                    initialSort={[{id: sort.split('_')[0], desc: sort.endsWith('desc')}]}
                    onSortingChange={(updater) => {
                        const newSort = updater([{id: sort.split('_')[0], desc: sort.endsWith('desc')}]);
                        if (newSort && newSort[0]) {
                             setSort(`${newSort[0].id}_${newSort[0].desc ? 'desc' : 'asc'}`);
                        }
                    }}
                />
            </div>
        </div>
    );
}

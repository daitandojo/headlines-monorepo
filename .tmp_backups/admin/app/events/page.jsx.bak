// apps/admin/src/app/events/page.jsx (version 1.2.1)
'use client'

import { PageHeader, ConfirmationDialog, Input, Button, Accordion, LoadingOverlay } from '@headlines/ui';
import { EventListItem, ListHeader } from './columns';
import { useAdminManager } from '@/hooks/use-admin-manager';
import { deleteAdminEvent, updateAdminEvent } from '@headlines/data-access';
import { toast } from 'sonner';
import { useState, useCallback } from 'react';
import { Search } from 'lucide-react';

export default function EventsPage() {
    const { data, total, isLoading, searchTerm, setSearchTerm, sort, setSort, refetch, handleUpdate, handleRemove } = useAdminManager('/api/events', 'createdAt_desc');
    const [confirmState, setConfirmState] = useState({ isOpen: false, eventId: null });

    const handleOptimisticUpdate = useCallback(async (event, updateData) => {
        handleUpdate(event._id, updateData); // Optimistic update
        const result = await updateAdminEvent(event._id, updateData);
        if (!result.success) {
            toast.error(`Update failed: ${result.error}`);
            refetch(); // Revert
        }
    }, [handleUpdate, refetch]);

    const handleDeleteClick = (eventId) => {
        setConfirmState({ isOpen: true, eventId });
    };

    const confirmDelete = async () => {
        const { eventId } = confirmState;
        handleRemove(eventId); // Optimistic remove
        setConfirmState({ isOpen: false, eventId: null });
        const result = await deleteAdminEvent(eventId);
        if (result.success) {
            toast.success('Event and its relations deleted.');
        } else {
            toast.error(`Deletion failed: ${result.error}`);
            refetch(); // Revert
        }
    };
    
    return (
        <div className="flex flex-col h-full">
            <PageHeader title="Event Management" description={`Review, audit, and manage all ${total.toLocaleString()} synthesized events.`} />
            <div className="mt-8 flex-grow min-h-0 flex flex-col">
                <div className="flex items-center py-4 justify-between">
                     <div className="relative flex-grow max-w-sm">
                        <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-slate-500" />
                        <Input
                            placeholder="Filter by headline, country..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className="h-10 pl-10"
                        />
                    </div>
                    {/* Pagination can go here in the future */}
                </div>
                <div className="relative rounded-md border flex-grow overflow-y-auto">
                    <LoadingOverlay isLoading={isLoading} />
                    <ListHeader sort={sort} setSort={setSort} />
                    <Accordion type="single" collapsible>
                        {data.map(event => (
                            <EventListItem key={event._id} event={event} onUpdate={handleOptimisticUpdate} onDelete={handleDeleteClick} />
                        ))}
                    </Accordion>
                </div>
            </div>
            <ConfirmationDialog
                open={confirmState.isOpen}
                onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })}
                onConfirm={confirmDelete}
                title="Delete Event"
                description="Are you sure you want to permanently delete this event and its links to articles/opportunities? This is a significant action."
                confirmText="Delete Event"
             />
        </div>
    );
}

// apps/admin/src/app/opportunities/page.jsx (version 1.2.0)
'use client'

import { PageHeader, DataTable, ConfirmationDialog } from '@headlines/ui';
import { columns } from './columns';
import { useAdminManager } from '@/hooks/use-admin-manager';
import { deleteAdminOpportunity, updateAdminOpportunity } from '@headlines/data-access';
import { toast } from 'sonner';
import { useState, useCallback } from 'react';

export default function OpportunitiesPage() {
    const { data, total, isLoading, searchTerm, setSearchTerm, sort, setSort, refetch, handleUpdate, handleRemove } = useAdminManager('/api/opportunities', 'basedIn_asc');
    const [confirmState, setConfirmState] = useState({ isOpen: false, oppId: null });

    const handleOptimisticUpdate = useCallback(async (opp, updateData) => {
        handleUpdate(opp._id, updateData); // Optimistic update
        const result = await updateAdminOpportunity(opp._id, updateData);
        if (!result.success) {
            toast.error(`Update failed: ${result.error}`);
            refetch(); // Revert
        }
    }, [handleUpdate, refetch]);

    const handleDeleteClick = (oppId) => {
        setConfirmState({ isOpen: true, oppId });
    };

    const confirmDelete = async () => {
        const { oppId } = confirmState;
        handleRemove(oppId); // Optimistic remove
        setConfirmState({ isOpen: false, oppId: null });
        const result = await deleteAdminOpportunity(oppId);
        if (!result.success) {
            toast.error(`Deletion failed: ${result.error}`);
            refetch(); // Revert
        } else {
            toast.success('Opportunity deleted.');
        }
    };
    
    return (
        <div className="flex flex-col h-full">
            <PageHeader title="Opportunity Management" description={`Review and manage all ${total.toLocaleString()} actionable opportunities generated by the pipeline.`} />
            <div className="mt-8 flex-grow min-h-0">
                <DataTable
                    columns={columns(handleOptimisticUpdate, handleDeleteClick)}
                    data={data}
                    isLoading={isLoading}
                    filterColumn="reachOutTo"
                    filterPlaceholder="Filter by name, country..."
                    initialSort={[{id: sort.split('_')[0], desc: sort.endsWith('desc')}]}
                    onSortingChange={(updater) => {
                        const newSort = updater([{id: sort.split('_')[0], desc: sort.endsWith('desc')}]);
                        if (newSort && newSort[0]) {
                             setSort(`${newSort[0].id}_${newSort[0].desc ? 'desc' : 'asc'}`);
                        }
                    }}
                />
            </div>
             <ConfirmationDialog
                open={confirmState.isOpen}
                onOpenChange={(isOpen) => setConfirmState({ ...confirmState, isOpen })}
                onConfirm={confirmDelete}
                title="Delete Opportunity"
                description="Are you sure you want to permanently delete this opportunity? This action cannot be undone."
                confirmText="Delete"
             />
        </div>
    );
}
